debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=1, optimization_level=0, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['stubs'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.stubs.bytes.check_slicing_with_uint64
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.bytes.check_end_before_start_slicing
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.bytes.one_to_seven
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.biguint.compare_biguints
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.uint64.Uint64Contract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Sealing block@0
stubs/uint64.py:55:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:56:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:57:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:58:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:59:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:60:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:61:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:62:17 debug: encountered already materialized expression (false), reusing result: false#0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Sealing block@0
stubs/uint64.py:55:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:56:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:57:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:58:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:59:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:60:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/uint64.py:61:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/uint64.py:62:17 debug: encountered already materialized expression (false), reusing result: false#0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Building IR for function test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: removing unused subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Building IR for function test_cases.stubs.string.StringContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.stubs.string.StringContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
stubs/string.py:26:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:26:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%15#0
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Created Phi assignment: let alpha#1: bytes = undefined while trying to resolve 'alpha' in block@3
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1) in block@1
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0
debug: Deleting Phi assignment: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2)
debug: Replaced trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0 in current definition for 1 blocks
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
stubs/string.py:27:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:27:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='a')))), reusing result: tmp%19#0
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@6
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4) in block@4
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5
debug: Created Phi assignment: let alpha#2: bytes = undefined while trying to resolve 'alpha' in block@6
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4) in block@4
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0
debug: Deleting Phi assignment: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5)
debug: Replaced trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
stubs/string.py:28:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:28:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ab')))), reusing result: tmp%23#0
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@9
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7) in block@7
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8
debug: Created Phi assignment: let alpha#3: bytes = undefined while trying to resolve 'alpha' in block@9
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7) in block@7
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0
debug: Deleting Phi assignment: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8)
debug: Replaced trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0 in current definition for 1 blocks
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
stubs/string.py:29:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:29:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='b')))), reusing result: tmp%27#0
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let ternary_result%3#2: bool = undefined while trying to resolve 'ternary_result%3' in block@12
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10) in block@10
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11
debug: Created Phi assignment: let alpha#4: bytes = undefined while trying to resolve 'alpha' in block@12
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10) in block@10
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0
debug: Deleting Phi assignment: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11)
debug: Replaced trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
stubs/string.py:30:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:30:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%32#0
stubs/string.py:30:33 debug: encountered already materialized expression (alpha), reusing result: alpha#0
debug: Terminated block@14
debug: Sealing block@15
debug: Created Phi assignment: let ternary_result%4#2: bool = undefined while trying to resolve 'ternary_result%4' in block@15
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13) in block@13
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14
debug: Created Phi assignment: let alpha#5: bytes = undefined while trying to resolve 'alpha' in block@15
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13) in block@13
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0
debug: Deleting Phi assignment: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14)
debug: Replaced trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0 in current definition for 1 blocks
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
stubs/string.py:31:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:31:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source=alpha + '!')))), reusing result: tmp%36#0
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let ternary_result%5#2: bool = undefined while trying to resolve 'ternary_result%5' in block@18
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16) in block@16
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17
debug: Created Phi assignment: let alpha#6: bytes = undefined while trying to resolve 'alpha' in block@18
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16) in block@16
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) in block@17
debug: Replacing trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0
debug: Deleting Phi assignment: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17)
debug: Replaced trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0 in current definition for 1 blocks
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
stubs/string.py:33:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%42#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%41#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%41#0
debug: Terminated block@20
debug: Sealing block@21
debug: Created Phi assignment: let ternary_result%6#2: bool = undefined while trying to resolve 'ternary_result%6' in block@21
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19) in block@19
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20
debug: Created Phi assignment: let alpha#7: bytes = undefined while trying to resolve 'alpha' in block@21
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19) in block@19
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0
debug: Deleting Phi assignment: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20)
debug: Replaced trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0 in current definition for 1 blocks
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
stubs/string.py:34:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%47#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='g')))), reusing result: tmp%46#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='g')))), reusing result: tmp%46#0
debug: Terminated block@23
debug: Sealing block@24
debug: Created Phi assignment: let ternary_result%7#2: bool = undefined while trying to resolve 'ternary_result%7' in block@24
debug: Added ternary_result%7#0 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22) in block@22
debug: Added ternary_result%7#1 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23) in block@23
debug: Created Phi assignment: let alpha#8: bytes = undefined while trying to resolve 'alpha' in block@24
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22) in block@22
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) in block@23
debug: Replacing trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0
debug: Deleting Phi assignment: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23)
debug: Replaced trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0 in current definition for 1 blocks
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
stubs/string.py:35:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%52#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='fg')))), reusing result: tmp%51#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='fg')))), reusing result: tmp%51#0
debug: Terminated block@26
debug: Sealing block@27
debug: Created Phi assignment: let ternary_result%8#2: bool = undefined while trying to resolve 'ternary_result%8' in block@27
debug: Added ternary_result%8#0 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25) in block@25
debug: Added ternary_result%8#1 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26) in block@26
debug: Created Phi assignment: let alpha#9: bytes = undefined while trying to resolve 'alpha' in block@27
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25) in block@25
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) in block@26
debug: Replacing trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0
debug: Deleting Phi assignment: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26)
debug: Replaced trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0 in current definition for 1 blocks
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
stubs/string.py:36:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%57#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='f')))), reusing result: tmp%56#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='f')))), reusing result: tmp%56#0
debug: Terminated block@29
debug: Sealing block@30
debug: Created Phi assignment: let ternary_result%9#2: bool = undefined while trying to resolve 'ternary_result%9' in block@30
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28) in block@28
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28, ternary_result%9#1 <- block@29) in block@29
debug: Created Phi assignment: let alpha#10: bytes = undefined while trying to resolve 'alpha' in block@30
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28) in block@28
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) in block@29
debug: Replacing trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0
debug: Deleting Phi assignment: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29)
debug: Replaced trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0 in current definition for 1 blocks
debug: Terminated block@30
debug: Sealing block@31
debug: Terminated block@31
debug: Sealing block@32
stubs/string.py:37:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%63#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%62#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%62#0
stubs/string.py:37:31 debug: encountered already materialized expression (alpha), reusing result: alpha#0
debug: Terminated block@32
debug: Sealing block@33
debug: Created Phi assignment: let ternary_result%10#2: bool = undefined while trying to resolve 'ternary_result%10' in block@33
debug: Added ternary_result%10#0 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31) in block@31
debug: Added ternary_result%10#1 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31, ternary_result%10#1 <- block@32) in block@32
debug: Created Phi assignment: let alpha#11: bytes = undefined while trying to resolve 'alpha' in block@33
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31) in block@31
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) in block@32
debug: Replacing trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0
debug: Deleting Phi assignment: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32)
debug: Replaced trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0 in current definition for 1 blocks
debug: Terminated block@33
debug: Sealing block@34
debug: Terminated block@34
debug: Sealing block@35
stubs/string.py:38:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%68#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='!' + alpha)))), reusing result: tmp%67#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='!' + alpha)))), reusing result: tmp%67#0
debug: Terminated block@35
debug: Sealing block@36
debug: Created Phi assignment: let ternary_result%11#2: bool = undefined while trying to resolve 'ternary_result%11' in block@36
debug: Added ternary_result%11#0 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34) in block@34
debug: Added ternary_result%11#1 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34, ternary_result%11#1 <- block@35) in block@35
debug: Terminated block@36
debug: Sealing block@37
debug: Terminated block@37
debug: Sealing block@38
debug: Terminated block@38
debug: Sealing block@39
debug: Created Phi assignment: let ternary_result%12#2: bytes = undefined while trying to resolve 'ternary_result%12' in block@39
debug: Added ternary_result%12#0 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37) in block@37
debug: Added ternary_result%12#1 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37, ternary_result%12#1 <- block@38) in block@38
debug: Terminated block@39
debug: Building IR for function test_cases.stubs.string.StringContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.string.StringContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
stubs/string.py:26:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:26:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%15#0
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Created Phi assignment: let alpha#1: bytes = undefined while trying to resolve 'alpha' in block@3
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1) in block@1
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0
debug: Deleting Phi assignment: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2)
debug: Replaced trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0 in current definition for 1 blocks
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
stubs/string.py:27:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:27:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='a')))), reusing result: tmp%19#0
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@6
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4) in block@4
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5
debug: Created Phi assignment: let alpha#2: bytes = undefined while trying to resolve 'alpha' in block@6
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4) in block@4
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0
debug: Deleting Phi assignment: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5)
debug: Replaced trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
stubs/string.py:28:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:28:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ab')))), reusing result: tmp%23#0
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@9
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7) in block@7
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8
debug: Created Phi assignment: let alpha#3: bytes = undefined while trying to resolve 'alpha' in block@9
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7) in block@7
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0
debug: Deleting Phi assignment: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8)
debug: Replaced trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0 in current definition for 1 blocks
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
stubs/string.py:29:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:29:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='b')))), reusing result: tmp%27#0
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let ternary_result%3#2: bool = undefined while trying to resolve 'ternary_result%3' in block@12
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10) in block@10
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11
debug: Created Phi assignment: let alpha#4: bytes = undefined while trying to resolve 'alpha' in block@12
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10) in block@10
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0
debug: Deleting Phi assignment: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11)
debug: Replaced trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
stubs/string.py:30:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:30:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%32#0
stubs/string.py:30:33 debug: encountered already materialized expression (alpha), reusing result: alpha#0
debug: Terminated block@14
debug: Sealing block@15
debug: Created Phi assignment: let ternary_result%4#2: bool = undefined while trying to resolve 'ternary_result%4' in block@15
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13) in block@13
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14
debug: Created Phi assignment: let alpha#5: bytes = undefined while trying to resolve 'alpha' in block@15
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13) in block@13
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0
debug: Deleting Phi assignment: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14)
debug: Replaced trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0 in current definition for 1 blocks
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
stubs/string.py:31:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:31:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source=alpha + '!')))), reusing result: tmp%36#0
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let ternary_result%5#2: bool = undefined while trying to resolve 'ternary_result%5' in block@18
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16) in block@16
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17
debug: Created Phi assignment: let alpha#6: bytes = undefined while trying to resolve 'alpha' in block@18
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16) in block@16
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) in block@17
debug: Replacing trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0
debug: Deleting Phi assignment: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17)
debug: Replaced trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0 in current definition for 1 blocks
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
stubs/string.py:33:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%42#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%41#0
stubs/string.py:33:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))), reusing result: tmp%41#0
debug: Terminated block@20
debug: Sealing block@21
debug: Created Phi assignment: let ternary_result%6#2: bool = undefined while trying to resolve 'ternary_result%6' in block@21
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19) in block@19
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20
debug: Created Phi assignment: let alpha#7: bytes = undefined while trying to resolve 'alpha' in block@21
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19) in block@19
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0
debug: Deleting Phi assignment: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20)
debug: Replaced trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0 in current definition for 1 blocks
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
stubs/string.py:34:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%47#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='g')))), reusing result: tmp%46#0
stubs/string.py:34:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='g')))), reusing result: tmp%46#0
debug: Terminated block@23
debug: Sealing block@24
debug: Created Phi assignment: let ternary_result%7#2: bool = undefined while trying to resolve 'ternary_result%7' in block@24
debug: Added ternary_result%7#0 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22) in block@22
debug: Added ternary_result%7#1 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23) in block@23
debug: Created Phi assignment: let alpha#8: bytes = undefined while trying to resolve 'alpha' in block@24
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22) in block@22
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) in block@23
debug: Replacing trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0
debug: Deleting Phi assignment: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23)
debug: Replaced trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0 in current definition for 1 blocks
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
stubs/string.py:35:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%52#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='fg')))), reusing result: tmp%51#0
stubs/string.py:35:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='fg')))), reusing result: tmp%51#0
debug: Terminated block@26
debug: Sealing block@27
debug: Created Phi assignment: let ternary_result%8#2: bool = undefined while trying to resolve 'ternary_result%8' in block@27
debug: Added ternary_result%8#0 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25) in block@25
debug: Added ternary_result%8#1 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26) in block@26
debug: Created Phi assignment: let alpha#9: bytes = undefined while trying to resolve 'alpha' in block@27
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25) in block@25
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) in block@26
debug: Replacing trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0
debug: Deleting Phi assignment: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26)
debug: Replaced trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0 in current definition for 1 blocks
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
stubs/string.py:36:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%57#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='f')))), reusing result: tmp%56#0
stubs/string.py:36:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='f')))), reusing result: tmp%56#0
debug: Terminated block@29
debug: Sealing block@30
debug: Created Phi assignment: let ternary_result%9#2: bool = undefined while trying to resolve 'ternary_result%9' in block@30
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28) in block@28
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28, ternary_result%9#1 <- block@29) in block@29
debug: Created Phi assignment: let alpha#10: bytes = undefined while trying to resolve 'alpha' in block@30
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28) in block@28
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) in block@29
debug: Replacing trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0
debug: Deleting Phi assignment: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29)
debug: Replaced trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0 in current definition for 1 blocks
debug: Terminated block@30
debug: Sealing block@31
debug: Terminated block@31
debug: Sealing block@32
stubs/string.py:37:16 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%63#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%62#0
stubs/string.py:37:16 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%62#0
stubs/string.py:37:31 debug: encountered already materialized expression (alpha), reusing result: alpha#0
debug: Terminated block@32
debug: Sealing block@33
debug: Created Phi assignment: let ternary_result%10#2: bool = undefined while trying to resolve 'ternary_result%10' in block@33
debug: Added ternary_result%10#0 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31) in block@31
debug: Added ternary_result%10#1 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31, ternary_result%10#1 <- block@32) in block@32
debug: Created Phi assignment: let alpha#11: bytes = undefined while trying to resolve 'alpha' in block@33
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31) in block@31
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) in block@32
debug: Replacing trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0
debug: Deleting Phi assignment: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32)
debug: Replaced trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0 in current definition for 1 blocks
debug: Terminated block@33
debug: Sealing block@34
debug: Terminated block@34
debug: Sealing block@35
stubs/string.py:38:20 debug: encountered already materialized expression (alpha), reusing result: alpha#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(alpha))), reusing result: tmp%68#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='!' + alpha)))), reusing result: tmp%67#0
stubs/string.py:38:20 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='!' + alpha)))), reusing result: tmp%67#0
debug: Terminated block@35
debug: Sealing block@36
debug: Created Phi assignment: let ternary_result%11#2: bool = undefined while trying to resolve 'ternary_result%11' in block@36
debug: Added ternary_result%11#0 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34) in block@34
debug: Added ternary_result%11#1 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34, ternary_result%11#1 <- block@35) in block@35
debug: Terminated block@36
debug: Sealing block@37
debug: Terminated block@37
debug: Sealing block@38
debug: Terminated block@38
debug: Sealing block@39
debug: Created Phi assignment: let ternary_result%12#2: bytes = undefined while trying to resolve 'ternary_result%12' in block@39
debug: Added ternary_result%12#0 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37) in block@37
debug: Added ternary_result%12#1 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37, ternary_result%12#1 <- block@38) in block@38
debug: Terminated block@39
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.string.StringContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.string.StringContract.approval_program
debug: removing unused subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Building IR for function test_cases.stubs.string.StringContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.string.StringContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.string.StringContract.approval_program
debug: removing unused subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Building IR for function test_cases.stubs.bytes.BytesContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.stubs.bytes.BytesContract.approval_program
debug: Sealing block@0
stubs/bytes.py:38:14 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:40:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:41:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:42:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:43:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:44:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:45:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:46:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:47:17 debug: encountered already materialized expression (false), reusing result: false#0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.bytes.BytesContract.approval_program
debug: Sealing block@0
stubs/bytes.py:38:14 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:40:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:41:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:42:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:43:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:44:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:45:17 debug: encountered already materialized expression (true), reusing result: true#0
stubs/bytes.py:46:17 debug: encountered already materialized expression (false), reusing result: false#0
stubs/bytes.py:47:17 debug: encountered already materialized expression (false), reusing result: false#0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Building IR for function test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: removing unused subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Building IR for function test_cases.stubs.biguint.BigUIntContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Building IR for function test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: removing unused subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: removing unused subroutine test_cases.stubs.bytes.one_to_seven
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguints
debug: removing unused subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: removing unused subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: removing unused subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
info: optimizing approval program of test_cases.stubs.uint64.Uint64Contract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable zero#0
debug: Removing unused variable one#0
debug: Removing unused variable two#0
debug: Removing unused variable five#0
debug: Removing unused variable three#0
debug: Removing unused variable sixty#0
debug: Removing unused variable c#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable y#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing c#1 with [c#2, c#3, c#4, c#5, c#6]
debug: Coalescing y#1 with [y#2, y#3]
debug: Coalescing resulted in 19 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/Uint64Contract.ir/Uint64Contract.approval.0.destructured.ir
info: optimizing clear program of test_cases.stubs.uint64.Uint64Contract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable reinterpret_uint64%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/Uint64Contract.ir/Uint64Contract.clear.0.destructured.ir
debug: Inserted main.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[10]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[12]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main.ops[17]: 'l-store-copy tmp%2#0 0'
debug: Replaced main.ops[19]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main.ops[24]: 'l-store-copy tmp%3#0 0'
debug: Replaced main.ops[26]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main.ops[31]: 'l-store-copy tmp%4#0 0'
debug: Replaced main.ops[33]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main.ops[38]: 'l-store-copy tmp%5#0 0'
debug: Replaced main.ops[40]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main.ops[45]: 'l-store-copy tmp%6#0 0'
debug: Replaced main.ops[47]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main.ops[50]: 'l-store-copy tmp%7#0 0'
debug: Replaced main.ops[52]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main.ops[57]: 'l-store-copy c#1 0'
debug: Replaced main.ops[59]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[62]: 'l-store-copy tmp%8#0 0'
debug: Replaced main.ops[64]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main.ops[69]: 'l-store-copy tmp%9#0 0'
debug: Replaced main.ops[71]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main.ops[74]: 'l-store-copy tmp%10#0 0'
debug: Replaced main.ops[76]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main.ops[81]: 'l-store-copy c#1 0'
debug: Replaced main.ops[83]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[86]: 'l-store-copy tmp%11#0 0'
debug: Replaced main.ops[88]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main.ops[93]: 'l-store-copy tmp%12#0 0'
debug: Replaced main.ops[95]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main.ops[98]: 'l-store-copy tmp%13#0 0'
debug: Replaced main.ops[100]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main.ops[105]: 'l-store-copy c#1 0'
debug: Replaced main.ops[107]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[110]: 'l-store-copy tmp%14#0 0'
debug: Replaced main.ops[112]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main.ops[117]: 'l-store-copy tmp%15#0 0'
debug: Replaced main.ops[119]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main.ops[122]: 'l-store-copy tmp%16#0 0'
debug: Replaced main.ops[124]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main.ops[129]: 'l-store-copy tmp%17#0 0'
debug: Replaced main.ops[131]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main.ops[134]: 'l-store-copy tmp%18#0 0'
debug: Replaced main.ops[136]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main.ops[141]: 'l-store-copy c#1 0'
debug: Replaced main.ops[143]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[146]: 'l-store-copy tmp%19#0 0'
debug: Replaced main.ops[148]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main.ops[153]: 'l-store-copy tmp%20#0 0'
debug: Replaced main.ops[155]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main.ops[158]: 'l-store-copy tmp%21#0 0'
debug: Replaced main.ops[160]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main.ops[165]: 'l-store-copy c#1 0'
debug: Replaced main.ops[167]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[170]: 'l-store-copy tmp%22#0 0'
debug: Replaced main.ops[172]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main.ops[177]: 'l-store-copy c#1 0'
debug: Replaced main.ops[179]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[182]: 'l-store-copy tmp%23#0 0'
debug: Replaced main.ops[184]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main.ops[189]: 'l-store-copy tmp%24#0 0'
debug: Replaced main.ops[191]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main.ops[194]: 'l-store-copy tmp%25#0 0'
debug: Replaced main.ops[196]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted main.ops[200]: 'l-store-copy tmp%26#0 0'
debug: Replaced main.ops[202]: 'v-load tmp%26#0' with 'l-load tmp%26#0'
debug: Inserted main.ops[205]: 'l-store-copy tmp%27#0 0'
debug: Replaced main.ops[207]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted main.ops[217]: 'l-store-copy tmp%29#0 0'
debug: Replaced main.ops[219]: 'v-load tmp%29#0' with 'l-load tmp%29#0'
debug: Inserted main.ops[222]: 'l-store-copy tmp%30#0 0'
debug: Replaced main.ops[224]: 'v-load tmp%30#0' with 'l-load tmp%30#0'
debug: Inserted main.ops[234]: 'l-store-copy tmp%32#0 0'
debug: Replaced main.ops[236]: 'v-load tmp%32#0' with 'l-load tmp%32#0'
debug: Inserted main.ops[239]: 'l-store-copy tmp%33#0 0'
debug: Replaced main.ops[241]: 'v-load tmp%33#0' with 'l-load tmp%33#0'
debug: Inserted main.ops[251]: 'l-store-copy tmp%35#0 0'
debug: Replaced main.ops[253]: 'v-load tmp%35#0' with 'l-load tmp%35#0'
debug: Inserted main.ops[256]: 'l-store-copy tmp%36#0 0'
debug: Replaced main.ops[258]: 'v-load tmp%36#0' with 'l-load tmp%36#0'
debug: Inserted main.ops[268]: 'l-store-copy tmp%38#0 0'
debug: Replaced main.ops[270]: 'v-load tmp%38#0' with 'l-load tmp%38#0'
debug: Inserted main.ops[273]: 'l-store-copy tmp%39#0 0'
debug: Replaced main.ops[275]: 'v-load tmp%39#0' with 'l-load tmp%39#0'
debug: Inserted main.ops[285]: 'l-store-copy tmp%41#0 0'
debug: Replaced main.ops[287]: 'v-load tmp%41#0' with 'l-load tmp%41#0'
debug: Inserted main.ops[290]: 'l-store-copy tmp%42#0 0'
debug: Replaced main.ops[292]: 'v-load tmp%42#0' with 'l-load tmp%42#0'
debug: Inserted main.ops[302]: 'l-store-copy tmp%44#0 0'
debug: Replaced main.ops[304]: 'v-load tmp%44#0' with 'l-load tmp%44#0'
debug: Inserted main.ops[307]: 'l-store-copy tmp%45#0 0'
debug: Replaced main.ops[309]: 'v-load tmp%45#0' with 'l-load tmp%45#0'
debug: Inserted main.ops[319]: 'l-store-copy tmp%47#0 0'
debug: Replaced main.ops[321]: 'v-load tmp%47#0' with 'l-load tmp%47#0'
debug: Inserted main.ops[324]: 'l-store-copy tmp%48#0 0'
debug: Replaced main.ops[326]: 'v-load tmp%48#0' with 'l-load tmp%48#0'
debug: Inserted main.ops[336]: 'l-store-copy tmp%50#0 0'
debug: Replaced main.ops[338]: 'v-load tmp%50#0' with 'l-load tmp%50#0'
debug: Inserted main.ops[341]: 'l-store-copy tmp%51#0 0'
debug: Replaced main.ops[343]: 'v-load tmp%51#0' with 'l-load tmp%51#0'
debug: Inserted main.ops[348]: 'l-store-copy tmp%52#0 0'
debug: Replaced main.ops[350]: 'v-load tmp%52#0' with 'l-load tmp%52#0'
debug: Inserted main.ops[353]: 'l-store-copy tmp%53#0 0'
debug: Replaced main.ops[355]: 'v-load tmp%53#0' with 'l-load tmp%53#0'
debug: Inserted main.ops[360]: 'l-store-copy tmp%54#0 0'
debug: Replaced main.ops[362]: 'v-load tmp%54#0' with 'l-load tmp%54#0'
debug: Inserted main.ops[365]: 'l-store-copy tmp%55#0 0'
debug: Replaced main.ops[367]: 'v-load tmp%55#0' with 'l-load tmp%55#0'
debug: Inserted main.ops[372]: 'l-store-copy tmp%56#0 0'
debug: Replaced main.ops[374]: 'v-load tmp%56#0' with 'l-load tmp%56#0'
debug: Inserted main.ops[377]: 'l-store-copy tmp%57#0 0'
debug: Replaced main.ops[379]: 'v-load tmp%57#0' with 'l-load tmp%57#0'
debug: Inserted main.ops[384]: 'l-store-copy y#1 0'
debug: Replaced main.ops[386]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[389]: 'l-store-copy tmp%58#0 0'
debug: Replaced main.ops[391]: 'v-load tmp%58#0' with 'l-load tmp%58#0'
debug: Inserted main.ops[396]: 'l-store-copy y#1 0'
debug: Replaced main.ops[398]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[401]: 'l-store-copy tmp%59#0 0'
debug: Replaced main.ops[403]: 'v-load tmp%59#0' with 'l-load tmp%59#0'
debug: Inserted main.ops[408]: 'l-store-copy y#1 0'
debug: Replaced main.ops[410]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[413]: 'l-store-copy tmp%60#0 0'
debug: Replaced main.ops[415]: 'v-load tmp%60#0' with 'l-load tmp%60#0'
debug: Inserted main.ops[426]: 'l-store-copy tmp%63#0 0'
debug: Replaced main.ops[428]: 'v-load tmp%63#0' with 'l-load tmp%63#0'
debug: Inserted main.ops[433]: 'l-store-copy tmp%64#0 0'
debug: Replaced main.ops[435]: 'v-load tmp%64#0' with 'l-load tmp%64#0'
debug: Inserted main.ops[438]: 'l-store-copy tmp%65#0 0'
debug: Replaced main.ops[440]: 'v-load tmp%65#0' with 'l-load tmp%65#0'
debug: Inserted main.ops[448]: 'l-store-copy tmp%67#0 0'
debug: Replaced main.ops[450]: 'v-load tmp%67#0' with 'l-load tmp%67#0'
debug: Inserted main.ops[453]: 'l-store-copy tmp%68#0 0'
debug: Replaced main.ops[455]: 'v-load tmp%68#0' with 'l-load tmp%68#0'
debug: Inserted main.ops[422]: 'l-store-copy tmp%62#0 0'
debug: Replaced main.ops[425]: 'v-load tmp%62#0' with 'l-load tmp%62#0'
debug: Inserted main.ops[212]: 'l-store-copy tmp%28#0 0'
debug: Replaced main.ops[216]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted main.ops[230]: 'l-store-copy tmp%31#0 0'
debug: Replaced main.ops[234]: 'v-load tmp%31#0' with 'l-load tmp%31#0'
debug: Inserted main.ops[248]: 'l-store-copy tmp%34#0 0'
debug: Replaced main.ops[252]: 'v-load tmp%34#0' with 'l-load tmp%34#0'
debug: Inserted main.ops[266]: 'l-store-copy tmp%37#0 0'
debug: Replaced main.ops[270]: 'v-load tmp%37#0' with 'l-load tmp%37#0'
debug: Inserted main.ops[284]: 'l-store-copy tmp%40#0 0'
debug: Replaced main.ops[288]: 'v-load tmp%40#0' with 'l-load tmp%40#0'
debug: Inserted main.ops[302]: 'l-store-copy tmp%43#0 0'
debug: Replaced main.ops[306]: 'v-load tmp%43#0' with 'l-load tmp%43#0'
debug: Inserted main.ops[320]: 'l-store-copy tmp%46#0 0'
debug: Replaced main.ops[324]: 'v-load tmp%46#0' with 'l-load tmp%46#0'
debug: Inserted main.ops[338]: 'l-store-copy tmp%49#0 0'
debug: Replaced main.ops[342]: 'v-load tmp%49#0' with 'l-load tmp%49#0'
debug: Inserted main.ops[452]: 'l-store-copy tmp%66#0 0'
debug: Replaced main.ops[456]: 'v-load tmp%66#0' with 'l-load tmp%66#0'
debug: Inserted main.ops[427]: 'l-store-copy tmp%61#0 0'
debug: Replaced main.ops[433]: 'v-load tmp%61#0' with 'l-load tmp%61#0'
debug: Inserted main.ops[168]: 'l-store-copy c#1 0'
debug: Replaced main.ops[175]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[396]: 'l-store-copy y#1 0'
debug: Replaced main.ops[403]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[409]: 'l-store-copy y#1 0'
debug: Replaced main.ops[416]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[60]: 'l-store-copy c#1 0'
debug: Replaced main.ops[79]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[85]: 'l-store-copy c#1 0'
debug: Replaced main.ops[104]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[146]: 'l-store-copy c#1 0'
debug: Replaced main.ops[165]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[110]: 'l-store-copy c#1 0'
debug: Replaced main.ops[141]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[10]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[12]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
stubs/uint64.py:5 debug: optimizing TEAL subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
stubs/uint64.py:84 debug: optimizing TEAL subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> uint64:
info: optimizing approval program of test_cases.stubs.string.StringContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable empty#0
debug: Removing unused variable non_empty#0
debug: Removing unused variable c#0
debug: Removing unused variable alpha#0
debug: Removing unused variable d#0
debug: Removing unused variable e#0
debug: Removing unused variable f#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.string.StringContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.string.StringContract.approval_program using strategy RootOperandGrouping
debug: Coalescing c#1 with [c#2]
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#5, ternary_result%1#1, ternary_result%1#2]
debug: Coalescing ternary_result%2#0 with [ternary_result%2#5, ternary_result%2#1, ternary_result%2#2]
debug: Coalescing ternary_result%3#0 with [ternary_result%3#5, ternary_result%3#1, ternary_result%3#2]
debug: Coalescing ternary_result%4#0 with [ternary_result%4#5, ternary_result%4#1, ternary_result%4#2]
debug: Coalescing ternary_result%5#0 with [ternary_result%5#5, ternary_result%5#1, ternary_result%5#2]
debug: Coalescing ternary_result%6#0 with [ternary_result%6#5, ternary_result%6#1, ternary_result%6#2]
debug: Coalescing ternary_result%7#0 with [ternary_result%7#5, ternary_result%7#1, ternary_result%7#2]
debug: Coalescing ternary_result%8#0 with [ternary_result%8#5, ternary_result%8#1, ternary_result%8#2]
debug: Coalescing ternary_result%9#0 with [ternary_result%9#5, ternary_result%9#1, ternary_result%9#2]
debug: Coalescing ternary_result%10#0 with [ternary_result%10#5, ternary_result%10#1, ternary_result%10#2]
debug: Coalescing ternary_result%11#0 with [ternary_result%11#5, ternary_result%11#1, ternary_result%11#2]
debug: Coalescing ternary_result%12#0 with [ternary_result%12#5, ternary_result%12#1, ternary_result%12#2]
debug: Coalescing resulted in 93 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.string.StringContract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for _puya_lib.bytes_.is_substring
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in _puya_lib.bytes_.is_substring using strategy RootOperandGrouping
debug: Coalescing start#0 with [start#5, start#1, start#2]
debug: Coalescing resulted in 10 replacement/s
debug: Sequentializing parallel copies in _puya_lib.bytes_.is_substring
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/StringContract.ir/StringContract.approval.0.destructured.ir
info: optimizing clear program of test_cases.stubs.string.StringContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.string.StringContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.string.StringContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.string.StringContract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/StringContract.ir/StringContract.clear.0.destructured.ir
debug: Inserted main.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[9]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main.ops[13]: 'l-store-copy tmp%2#0 0'
debug: Replaced main.ops[15]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main.ops[18]: 'l-store-copy tmp%3#0 0'
debug: Replaced main.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main.ops[25]: 'l-store-copy tmp%4#0 0'
debug: Replaced main.ops[27]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main.ops[30]: 'l-store-copy tmp%5#0 0'
debug: Replaced main.ops[32]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main.ops[37]: 'l-store-copy tmp%6#0 0'
debug: Replaced main.ops[39]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main.ops[42]: 'l-store-copy tmp%7#0 0'
debug: Replaced main.ops[44]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main.ops[49]: 'l-store-copy tmp%8#0 0'
debug: Replaced main.ops[51]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main.ops[54]: 'l-store-copy tmp%9#0 0'
debug: Replaced main.ops[56]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main.ops[61]: 'l-store-copy tmp%10#0 0'
debug: Replaced main.ops[63]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main.ops[68]: 'l-store-copy c#1 0'
debug: Replaced main.ops[70]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[73]: 'l-store-copy c#1 0'
debug: Replaced main.ops[75]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[78]: 'l-store-copy tmp%11#0 0'
debug: Replaced main.ops[80]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main.ops[85]: 'l-store-copy tmp%12#0 0'
debug: Replaced main.ops[87]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main.ops[92]: 'l-store-copy tmp%13#0 0'
debug: Replaced main.ops[94]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main.ops[96]: 'l-store-copy tmp%14#0 0'
debug: Replaced main.ops[98]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main.ops[109]: 'l-store-copy tmp%17#0 0'
debug: Replaced main.ops[111]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main.ops[105]: 'l-store-copy tmp%16#0 0'
debug: Replaced main.ops[108]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main.ops[102]: 'l-store-copy tmp%15#0 0'
debug: Replaced main.ops[108]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_ternary_false@2.ops[4]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_ternary_false@2.ops[6]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_ternary_merge@3.ops[11]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_ternary_merge@3.ops[13]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_ternary_merge@3.ops[7]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_ternary_merge@3.ops[10]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_ternary_merge@3.ops[4]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_ternary_merge@3.ops[10]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_ternary_false@5.ops[4]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_ternary_false@5.ops[6]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_ternary_merge@6.ops[11]: 'l-store-copy tmp%25#0 0'
debug: Replaced main_ternary_merge@6.ops[13]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted main_ternary_merge@6.ops[7]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_ternary_merge@6.ops[10]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_ternary_merge@6.ops[4]: 'l-store-copy tmp%23#0 0'
debug: Replaced main_ternary_merge@6.ops[10]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main_ternary_false@8.ops[4]: 'l-store-copy tmp%26#0 0'
debug: Replaced main_ternary_false@8.ops[6]: 'v-load tmp%26#0' with 'l-load tmp%26#0'
debug: Inserted main_ternary_merge@9.ops[11]: 'l-store-copy tmp%29#0 0'
debug: Replaced main_ternary_merge@9.ops[13]: 'v-load tmp%29#0' with 'l-load tmp%29#0'
debug: Inserted main_ternary_merge@9.ops[7]: 'l-store-copy tmp%28#0 0'
debug: Replaced main_ternary_merge@9.ops[10]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted main_ternary_merge@9.ops[4]: 'l-store-copy tmp%27#0 0'
debug: Replaced main_ternary_merge@9.ops[10]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted main_ternary_false@11.ops[4]: 'l-store-copy tmp%30#0 0'
debug: Replaced main_ternary_false@11.ops[6]: 'v-load tmp%30#0' with 'l-load tmp%30#0'
debug: Inserted main_ternary_merge@12.ops[2]: 'l-store-copy tmp%31#0 0'
debug: Replaced main_ternary_merge@12.ops[4]: 'v-load tmp%31#0' with 'l-load tmp%31#0'
debug: Inserted main_ternary_merge@12.ops[15]: 'l-store-copy tmp%34#0 0'
debug: Replaced main_ternary_merge@12.ops[17]: 'v-load tmp%34#0' with 'l-load tmp%34#0'
debug: Inserted main_ternary_merge@12.ops[11]: 'l-store-copy tmp%33#0 0'
debug: Replaced main_ternary_merge@12.ops[14]: 'v-load tmp%33#0' with 'l-load tmp%33#0'
debug: Inserted main_ternary_merge@12.ops[8]: 'l-store-copy tmp%32#0 0'
debug: Replaced main_ternary_merge@12.ops[14]: 'v-load tmp%32#0' with 'l-load tmp%32#0'
debug: Inserted main_ternary_false@14.ops[4]: 'l-store-copy tmp%35#0 0'
debug: Replaced main_ternary_false@14.ops[6]: 'v-load tmp%35#0' with 'l-load tmp%35#0'
debug: Inserted main_ternary_merge@15.ops[5]: 'l-store-copy awst_tmp%0#0 0'
debug: Replaced main_ternary_merge@15.ops[7]: 'v-load awst_tmp%0#0' with 'l-load awst_tmp%0#0'
debug: Inserted main_ternary_merge@15.ops[16]: 'l-store-copy tmp%38#0 0'
debug: Replaced main_ternary_merge@15.ops[18]: 'v-load tmp%38#0' with 'l-load tmp%38#0'
debug: Inserted main_ternary_merge@15.ops[12]: 'l-store-copy tmp%37#0 0'
debug: Replaced main_ternary_merge@15.ops[15]: 'v-load tmp%37#0' with 'l-load tmp%37#0'
debug: Inserted main_ternary_merge@15.ops[9]: 'l-store-copy tmp%36#0 0'
debug: Replaced main_ternary_merge@15.ops[15]: 'v-load tmp%36#0' with 'l-load tmp%36#0'
debug: Inserted main_ternary_false@17.ops[4]: 'l-store-copy tmp%39#0 0'
debug: Replaced main_ternary_false@17.ops[6]: 'v-load tmp%39#0' with 'l-load tmp%39#0'
debug: Inserted main_ternary_merge@18.ops[2]: 'l-store-copy tmp%40#0 0'
debug: Replaced main_ternary_merge@18.ops[4]: 'v-load tmp%40#0' with 'l-load tmp%40#0'
debug: Inserted main_ternary_merge@18.ops[15]: 'l-store-copy tmp%43#0 0'
debug: Replaced main_ternary_merge@18.ops[17]: 'v-load tmp%43#0' with 'l-load tmp%43#0'
debug: Inserted main_ternary_merge@18.ops[11]: 'l-store-copy tmp%42#0 0'
debug: Replaced main_ternary_merge@18.ops[14]: 'v-load tmp%42#0' with 'l-load tmp%42#0'
debug: Inserted main_ternary_merge@18.ops[8]: 'l-store-copy tmp%41#0 0'
debug: Replaced main_ternary_merge@18.ops[14]: 'v-load tmp%41#0' with 'l-load tmp%41#0'
debug: Inserted main_ternary_false@20.ops[8]: 'l-store-copy tmp%45#0 0'
debug: Replaced main_ternary_false@20.ops[10]: 'v-load tmp%45#0' with 'l-load tmp%45#0'
debug: Inserted main_ternary_false@20.ops[3]: 'l-store-copy tmp%44#0 0'
debug: Replaced main_ternary_false@20.ops[6]: 'v-load tmp%44#0' with 'l-load tmp%44#0'
debug: Inserted main_ternary_false@20.ops[2]: 'l-store-copy tmp%41#0 1'
debug: Replaced main_ternary_false@20.ops[8]: 'v-load tmp%41#0' with 'l-load tmp%41#0'
debug: Inserted main_ternary_merge@21.ops[11]: 'l-store-copy tmp%48#0 0'
debug: Replaced main_ternary_merge@21.ops[13]: 'v-load tmp%48#0' with 'l-load tmp%48#0'
debug: Inserted main_ternary_merge@21.ops[7]: 'l-store-copy tmp%47#0 0'
debug: Replaced main_ternary_merge@21.ops[10]: 'v-load tmp%47#0' with 'l-load tmp%47#0'
debug: Inserted main_ternary_merge@21.ops[4]: 'l-store-copy tmp%46#0 0'
debug: Replaced main_ternary_merge@21.ops[10]: 'v-load tmp%46#0' with 'l-load tmp%46#0'
debug: Inserted main_ternary_false@23.ops[8]: 'l-store-copy tmp%50#0 0'
debug: Replaced main_ternary_false@23.ops[10]: 'v-load tmp%50#0' with 'l-load tmp%50#0'
debug: Inserted main_ternary_false@23.ops[3]: 'l-store-copy tmp%49#0 0'
debug: Replaced main_ternary_false@23.ops[6]: 'v-load tmp%49#0' with 'l-load tmp%49#0'
debug: Inserted main_ternary_false@23.ops[2]: 'l-store-copy tmp%46#0 1'
debug: Replaced main_ternary_false@23.ops[8]: 'v-load tmp%46#0' with 'l-load tmp%46#0'
debug: Inserted main_ternary_merge@24.ops[11]: 'l-store-copy tmp%53#0 0'
debug: Replaced main_ternary_merge@24.ops[13]: 'v-load tmp%53#0' with 'l-load tmp%53#0'
debug: Inserted main_ternary_merge@24.ops[7]: 'l-store-copy tmp%52#0 0'
debug: Replaced main_ternary_merge@24.ops[10]: 'v-load tmp%52#0' with 'l-load tmp%52#0'
debug: Inserted main_ternary_merge@24.ops[4]: 'l-store-copy tmp%51#0 0'
debug: Replaced main_ternary_merge@24.ops[10]: 'v-load tmp%51#0' with 'l-load tmp%51#0'
debug: Inserted main_ternary_false@26.ops[8]: 'l-store-copy tmp%55#0 0'
debug: Replaced main_ternary_false@26.ops[10]: 'v-load tmp%55#0' with 'l-load tmp%55#0'
debug: Inserted main_ternary_false@26.ops[3]: 'l-store-copy tmp%54#0 0'
debug: Replaced main_ternary_false@26.ops[6]: 'v-load tmp%54#0' with 'l-load tmp%54#0'
debug: Inserted main_ternary_false@26.ops[2]: 'l-store-copy tmp%51#0 1'
debug: Replaced main_ternary_false@26.ops[8]: 'v-load tmp%51#0' with 'l-load tmp%51#0'
debug: Inserted main_ternary_merge@27.ops[11]: 'l-store-copy tmp%58#0 0'
debug: Replaced main_ternary_merge@27.ops[13]: 'v-load tmp%58#0' with 'l-load tmp%58#0'
debug: Inserted main_ternary_merge@27.ops[7]: 'l-store-copy tmp%57#0 0'
debug: Replaced main_ternary_merge@27.ops[10]: 'v-load tmp%57#0' with 'l-load tmp%57#0'
debug: Inserted main_ternary_merge@27.ops[4]: 'l-store-copy tmp%56#0 0'
debug: Replaced main_ternary_merge@27.ops[10]: 'v-load tmp%56#0' with 'l-load tmp%56#0'
debug: Inserted main_ternary_false@29.ops[8]: 'l-store-copy tmp%60#0 0'
debug: Replaced main_ternary_false@29.ops[10]: 'v-load tmp%60#0' with 'l-load tmp%60#0'
debug: Inserted main_ternary_false@29.ops[3]: 'l-store-copy tmp%59#0 0'
debug: Replaced main_ternary_false@29.ops[6]: 'v-load tmp%59#0' with 'l-load tmp%59#0'
debug: Inserted main_ternary_false@29.ops[2]: 'l-store-copy tmp%56#0 1'
debug: Replaced main_ternary_false@29.ops[8]: 'v-load tmp%56#0' with 'l-load tmp%56#0'
debug: Inserted main_ternary_merge@30.ops[2]: 'l-store-copy tmp%61#0 0'
debug: Replaced main_ternary_merge@30.ops[4]: 'v-load tmp%61#0' with 'l-load tmp%61#0'
debug: Inserted main_ternary_merge@30.ops[15]: 'l-store-copy tmp%64#0 0'
debug: Replaced main_ternary_merge@30.ops[17]: 'v-load tmp%64#0' with 'l-load tmp%64#0'
debug: Inserted main_ternary_merge@30.ops[11]: 'l-store-copy tmp%63#0 0'
debug: Replaced main_ternary_merge@30.ops[14]: 'v-load tmp%63#0' with 'l-load tmp%63#0'
debug: Inserted main_ternary_merge@30.ops[8]: 'l-store-copy tmp%62#0 0'
debug: Replaced main_ternary_merge@30.ops[14]: 'v-load tmp%62#0' with 'l-load tmp%62#0'
debug: Inserted main_ternary_false@32.ops[8]: 'l-store-copy tmp%66#0 0'
debug: Replaced main_ternary_false@32.ops[10]: 'v-load tmp%66#0' with 'l-load tmp%66#0'
debug: Inserted main_ternary_false@32.ops[3]: 'l-store-copy tmp%65#0 0'
debug: Replaced main_ternary_false@32.ops[6]: 'v-load tmp%65#0' with 'l-load tmp%65#0'
debug: Inserted main_ternary_false@32.ops[2]: 'l-store-copy tmp%62#0 1'
debug: Replaced main_ternary_false@32.ops[8]: 'v-load tmp%62#0' with 'l-load tmp%62#0'
debug: Inserted main_ternary_merge@33.ops[5]: 'l-store-copy awst_tmp%1#0 0'
debug: Replaced main_ternary_merge@33.ops[7]: 'v-load awst_tmp%1#0' with 'l-load awst_tmp%1#0'
debug: Inserted main_ternary_merge@33.ops[16]: 'l-store-copy tmp%69#0 0'
debug: Replaced main_ternary_merge@33.ops[18]: 'v-load tmp%69#0' with 'l-load tmp%69#0'
debug: Inserted main_ternary_merge@33.ops[12]: 'l-store-copy tmp%68#0 0'
debug: Replaced main_ternary_merge@33.ops[15]: 'v-load tmp%68#0' with 'l-load tmp%68#0'
debug: Inserted main_ternary_merge@33.ops[9]: 'l-store-copy tmp%67#0 0'
debug: Replaced main_ternary_merge@33.ops[15]: 'v-load tmp%67#0' with 'l-load tmp%67#0'
debug: Inserted main_ternary_false@35.ops[8]: 'l-store-copy tmp%71#0 0'
debug: Replaced main_ternary_false@35.ops[10]: 'v-load tmp%71#0' with 'l-load tmp%71#0'
debug: Inserted main_ternary_false@35.ops[3]: 'l-store-copy tmp%70#0 0'
debug: Replaced main_ternary_false@35.ops[6]: 'v-load tmp%70#0' with 'l-load tmp%70#0'
debug: Inserted main_ternary_false@35.ops[2]: 'l-store-copy tmp%67#0 1'
debug: Replaced main_ternary_false@35.ops[8]: 'v-load tmp%67#0' with 'l-load tmp%67#0'
debug: Inserted main_ternary_merge@36.ops[2]: 'l-store-copy tmp%72#0 0'
debug: Replaced main_ternary_merge@36.ops[4]: 'v-load tmp%72#0' with 'l-load tmp%72#0'
debug: Inserted main_ternary_merge@36.ops[9]: 'l-store-copy tmp%73#0 0'
debug: Replaced main_ternary_merge@36.ops[11]: 'v-load tmp%73#0' with 'l-load tmp%73#0'
debug: Inserted main_ternary_merge@36.ops[14]: 'l-store-copy tmp%74#0 0'
debug: Replaced main_ternary_merge@36.ops[16]: 'v-load tmp%74#0' with 'l-load tmp%74#0'
debug: Inserted main_ternary_merge@36.ops[19]: 'l-store-copy tmp%75#0 0'
debug: Replaced main_ternary_merge@36.ops[21]: 'v-load tmp%75#0' with 'l-load tmp%75#0'
debug: Inserted main_ternary_merge@36.ops[24]: 'l-store-copy tmp%76#0 0'
debug: Replaced main_ternary_merge@36.ops[26]: 'v-load tmp%76#0' with 'l-load tmp%76#0'
debug: Inserted main_ternary_merge@36.ops[29]: 'l-store-copy tmp%77#0 0'
debug: Replaced main_ternary_merge@36.ops[31]: 'v-load tmp%77#0' with 'l-load tmp%77#0'
debug: Inserted main_ternary_merge@36.ops[36]: 'l-store-copy tmp%78#0 0'
debug: Replaced main_ternary_merge@36.ops[38]: 'v-load tmp%78#0' with 'l-load tmp%78#0'
debug: Inserted main_ternary_merge@36.ops[41]: 'l-store-copy tmp%79#0 0'
debug: Replaced main_ternary_merge@36.ops[43]: 'v-load tmp%79#0' with 'l-load tmp%79#0'
debug: Inserted main_ternary_merge@36.ops[46]: 'l-store-copy tmp%80#0 0'
debug: Replaced main_ternary_merge@36.ops[48]: 'v-load tmp%80#0' with 'l-load tmp%80#0'
debug: Inserted main_ternary_merge@36.ops[51]: 'l-store-copy tmp%81#0 0'
debug: Replaced main_ternary_merge@36.ops[53]: 'v-load tmp%81#0' with 'l-load tmp%81#0'
debug: Inserted main_ternary_merge@36.ops[56]: 'l-store-copy tmp%82#0 0'
debug: Replaced main_ternary_merge@36.ops[58]: 'v-load tmp%82#0' with 'l-load tmp%82#0'
debug: Inserted main_ternary_merge@36.ops[63]: 'l-store-copy tmp%83#0 0'
debug: Replaced main_ternary_merge@36.ops[65]: 'v-load tmp%83#0' with 'l-load tmp%83#0'
debug: Inserted main_ternary_merge@36.ops[68]: 'l-store-copy tmp%84#0 0'
debug: Replaced main_ternary_merge@36.ops[70]: 'v-load tmp%84#0' with 'l-load tmp%84#0'
debug: Inserted main_ternary_merge@36.ops[73]: 'l-store-copy tmp%85#0 0'
debug: Replaced main_ternary_merge@36.ops[75]: 'v-load tmp%85#0' with 'l-load tmp%85#0'
debug: Inserted main_ternary_merge@36.ops[78]: 'l-store-copy tmp%86#0 0'
debug: Replaced main_ternary_merge@36.ops[80]: 'v-load tmp%86#0' with 'l-load tmp%86#0'
debug: Inserted main_ternary_merge@36.ops[83]: 'l-store-copy tmp%87#0 0'
debug: Replaced main_ternary_merge@36.ops[85]: 'v-load tmp%87#0' with 'l-load tmp%87#0'
debug: Inserted main_ternary_merge@36.ops[90]: 'l-store-copy tmp%88#0 0'
debug: Replaced main_ternary_merge@36.ops[92]: 'v-load tmp%88#0' with 'l-load tmp%88#0'
debug: Inserted main_ternary_merge@36.ops[95]: 'l-store-copy tmp%89#0 0'
debug: Replaced main_ternary_merge@36.ops[97]: 'v-load tmp%89#0' with 'l-load tmp%89#0'
debug: Inserted main_ternary_merge@36.ops[100]: 'l-store-copy tmp%90#0 0'
debug: Replaced main_ternary_merge@36.ops[102]: 'v-load tmp%90#0' with 'l-load tmp%90#0'
debug: Inserted main_ternary_merge@36.ops[105]: 'l-store-copy tmp%91#0 0'
debug: Replaced main_ternary_merge@36.ops[107]: 'v-load tmp%91#0' with 'l-load tmp%91#0'
debug: Inserted main_ternary_merge@36.ops[110]: 'l-store-copy tmp%92#0 0'
debug: Replaced main_ternary_merge@36.ops[112]: 'v-load tmp%92#0' with 'l-load tmp%92#0'
debug: Inserted main_ternary_merge@36.ops[117]: 'l-store-copy tmp%93#0 0'
debug: Replaced main_ternary_merge@36.ops[119]: 'v-load tmp%93#0' with 'l-load tmp%93#0'
debug: Inserted main_ternary_merge@36.ops[122]: 'l-store-copy tmp%94#0 0'
debug: Replaced main_ternary_merge@36.ops[124]: 'v-load tmp%94#0' with 'l-load tmp%94#0'
debug: Inserted main_ternary_merge@36.ops[127]: 'l-store-copy tmp%95#0 0'
debug: Replaced main_ternary_merge@36.ops[129]: 'v-load tmp%95#0' with 'l-load tmp%95#0'
debug: Inserted main_ternary_merge@36.ops[132]: 'l-store-copy tmp%96#0 0'
debug: Replaced main_ternary_merge@36.ops[134]: 'v-load tmp%96#0' with 'l-load tmp%96#0'
debug: Inserted main_ternary_merge@36.ops[137]: 'l-store-copy tmp%97#0 0'
debug: Replaced main_ternary_merge@36.ops[139]: 'v-load tmp%97#0' with 'l-load tmp%97#0'
debug: Inserted main_ternary_merge@36.ops[144]: 'l-store-copy tmp%98#0 0'
debug: Replaced main_ternary_merge@36.ops[146]: 'v-load tmp%98#0' with 'l-load tmp%98#0'
debug: Inserted main_ternary_merge@36.ops[151]: 'l-store-copy tmp%99#0 0'
debug: Replaced main_ternary_merge@36.ops[153]: 'v-load tmp%99#0' with 'l-load tmp%99#0'
debug: Inserted main_ternary_merge@36.ops[156]: 'l-store-copy tmp%100#0 0'
debug: Replaced main_ternary_merge@36.ops[158]: 'v-load tmp%100#0' with 'l-load tmp%100#0'
debug: Inserted main_ternary_merge@36.ops[161]: 'l-store-copy tmp%101#0 0'
debug: Replaced main_ternary_merge@36.ops[163]: 'v-load tmp%101#0' with 'l-load tmp%101#0'
debug: Inserted main_ternary_merge@39.ops[3]: 'l-store-copy tmp%102#0 0'
debug: Replaced main_ternary_merge@39.ops[5]: 'v-load tmp%102#0' with 'l-load tmp%102#0'
debug: Inserted is_substring_while_top@1.ops[13]: 'l-store-copy tmp%3#0 0'
debug: Replaced is_substring_while_top@1.ops[15]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted is_substring_while_top@1.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced is_substring_while_top@1.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted is_substring_while_top@1.ops[10]: 'l-store-copy tmp%2#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted is_substring_while_top@1.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted is_substring_while_body@2.ops[15]: 'l-store-copy tmp%7#0 0'
debug: Replaced is_substring_while_body@2.ops[17]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted is_substring_while_body@2.ops[2]: 'l-store-copy tmp%4#0 0'
debug: Replaced is_substring_while_body@2.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted is_substring_while_body@2.ops[12]: 'l-store-copy tmp%6#0 0'
debug: Replaced is_substring_while_body@2.ops[15]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted is_substring_while_body@2.ops[7]: 'l-store-copy tmp%5#0 0'
debug: Replaced is_substring_while_body@2.ops[11]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted is_substring_while_body@2.ops[5]: 'l-store-copy start#0 1'
debug: Replaced is_substring_while_body@2.ops[11]: 'v-load start#0' with 'l-load start#0'
debug: Found 26 edge set/s for test_cases.stubs.string.StringContract.approval_program
debug: Allocated 13 variable/s to x-stack: ternary_result%0#0, ternary_result%1#0, ternary_result%10#0, ternary_result%11#0, ternary_result%12#0, ternary_result%2#0, ternary_result%3#0, ternary_result%4#0, ternary_result%5#0, ternary_result%6#0, ternary_result%7#0, ternary_result%8#0, ternary_result%9#0
debug: shared x-stack for main_ternary_true@1 -> main_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for main_ternary_false@2 -> main_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for main_ternary_true@4 -> main_ternary_merge@6: ternary_result%1#0
debug: shared x-stack for main_ternary_false@5 -> main_ternary_merge@6: ternary_result%1#0
debug: shared x-stack for main_ternary_true@7 -> main_ternary_merge@9: ternary_result%2#0
debug: shared x-stack for main_ternary_false@8 -> main_ternary_merge@9: ternary_result%2#0
debug: shared x-stack for main_ternary_true@10 -> main_ternary_merge@12: ternary_result%3#0
debug: shared x-stack for main_ternary_false@11 -> main_ternary_merge@12: ternary_result%3#0
debug: shared x-stack for main_ternary_true@13 -> main_ternary_merge@15: ternary_result%4#0
debug: shared x-stack for main_ternary_false@14 -> main_ternary_merge@15: ternary_result%4#0
debug: shared x-stack for main_ternary_true@16 -> main_ternary_merge@18: ternary_result%5#0
debug: shared x-stack for main_ternary_false@17 -> main_ternary_merge@18: ternary_result%5#0
debug: shared x-stack for main_ternary_true@19 -> main_ternary_merge@21: ternary_result%6#0
debug: shared x-stack for main_ternary_false@20 -> main_ternary_merge@21: ternary_result%6#0
debug: shared x-stack for main_ternary_true@22 -> main_ternary_merge@24: ternary_result%7#0
debug: shared x-stack for main_ternary_false@23 -> main_ternary_merge@24: ternary_result%7#0
debug: shared x-stack for main_ternary_true@25 -> main_ternary_merge@27: ternary_result%8#0
debug: shared x-stack for main_ternary_false@26 -> main_ternary_merge@27: ternary_result%8#0
debug: shared x-stack for main_ternary_true@28 -> main_ternary_merge@30: ternary_result%9#0
debug: shared x-stack for main_ternary_false@29 -> main_ternary_merge@30: ternary_result%9#0
debug: shared x-stack for main_ternary_true@31 -> main_ternary_merge@33: ternary_result%10#0
debug: shared x-stack for main_ternary_false@32 -> main_ternary_merge@33: ternary_result%10#0
debug: shared x-stack for main_ternary_true@34 -> main_ternary_merge@36: ternary_result%11#0
debug: shared x-stack for main_ternary_false@35 -> main_ternary_merge@36: ternary_result%11#0
debug: shared x-stack for main_ternary_true@37 -> main_ternary_merge@39: ternary_result%12#0
debug: shared x-stack for main_ternary_false@38 -> main_ternary_merge@39: ternary_result%12#0
debug: Found 3 edge set/s for _puya_lib.bytes_.is_substring
debug: test_cases.stubs.string.StringContract.approval_program f-stack entry: ['awst_tmp%0#0', 'awst_tmp%1#0', 'tmp%19#0', 'tmp%23#0', 'tmp%27#0', 'tmp%32#0', 'tmp%36#0', 'tmp%41#0', 'tmp%42#0', 'tmp%46#0', 'tmp%47#0', 'tmp%51#0', 'tmp%52#0', 'tmp%56#0', 'tmp%57#0', 'tmp%62#0', 'tmp%63#0', 'tmp%67#0', 'tmp%68#0']
debug: test_cases.stubs.string.StringContract.approval_program f-stack on first store: ['tmp%15#0']
debug: _puya_lib.bytes_.is_substring f-stack entry: []
debug: _puya_lib.bytes_.is_substring f-stack on first store: ['start#0']
stubs/string.py:5 debug: optimizing TEAL subroutine test_cases.stubs.string.StringContract.approval_program() -> uint64:
debug: removing explicit jump to fall-through block main_ternary_true@1
debug: removing explicit jump to fall-through block main_ternary_merge@3
debug: removing explicit jump to fall-through block main_ternary_true@4
debug: removing explicit jump to fall-through block main_ternary_merge@6
debug: removing explicit jump to fall-through block main_ternary_true@7
debug: removing explicit jump to fall-through block main_ternary_merge@9
debug: removing explicit jump to fall-through block main_ternary_true@10
debug: removing explicit jump to fall-through block main_ternary_merge@12
debug: removing explicit jump to fall-through block main_ternary_true@13
debug: removing explicit jump to fall-through block main_ternary_merge@15
debug: removing explicit jump to fall-through block main_ternary_true@16
debug: removing explicit jump to fall-through block main_ternary_merge@18
debug: removing explicit jump to fall-through block main_ternary_true@19
debug: removing explicit jump to fall-through block main_ternary_merge@21
debug: removing explicit jump to fall-through block main_ternary_true@22
debug: removing explicit jump to fall-through block main_ternary_merge@24
debug: removing explicit jump to fall-through block main_ternary_true@25
debug: removing explicit jump to fall-through block main_ternary_merge@27
debug: removing explicit jump to fall-through block main_ternary_true@28
debug: removing explicit jump to fall-through block main_ternary_merge@30
debug: removing explicit jump to fall-through block main_ternary_true@31
debug: removing explicit jump to fall-through block main_ternary_merge@33
debug: removing explicit jump to fall-through block main_ternary_true@34
debug: removing explicit jump to fall-through block main_ternary_merge@36
debug: removing explicit jump to fall-through block main_ternary_true@37
debug: removing explicit jump to fall-through block main_ternary_merge@39
debug: optimizing TEAL subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
debug: removing explicit jump to fall-through block is_substring_while_top@1
debug: removing explicit jump to fall-through block is_substring_while_body@2
debug: removing explicit jump to fall-through block is_substring_if_body@3
stubs/string.py:54 debug: optimizing TEAL subroutine test_cases.stubs.string.StringContract.clear_state_program() -> uint64:
info: optimizing approval program of test_cases.stubs.bytes.BytesContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable base_64#0
debug: Removing unused variable base_32#0
debug: Removing unused variable base_16#0
debug: Removing unused variable empty#0
debug: Removing unused variable c#0
debug: Removing unused variable abc#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable y#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Removing unused variable ten#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Removing unused variable ten#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.bytes.BytesContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.approval_program using strategy RootOperandGrouping
debug: Coalescing y#1 with [y#2, y#3]
debug: Coalescing resulted in 5 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.bytes.check_slicing_with_uint64
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.bytes.check_slicing_with_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.check_slicing_with_uint64
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.bytes.check_end_before_start_slicing
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.bytes.check_end_before_start_slicing using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.check_end_before_start_slicing
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.bytes.one_to_seven
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.bytes.one_to_seven using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.one_to_seven
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/BytesContract.ir/BytesContract.approval.0.destructured.ir
info: optimizing clear program of test_cases.stubs.bytes.BytesContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/BytesContract.ir/BytesContract.clear.0.destructured.ir
debug: Inserted main.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[10]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[12]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main.ops[17]: 'l-store-copy tmp%2#0 0'
debug: Replaced main.ops[19]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main.ops[23]: 'l-store-copy tmp%3#0 0'
debug: Replaced main.ops[25]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main.ops[28]: 'l-store-copy tmp%4#0 0'
debug: Replaced main.ops[30]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main.ops[34]: 'l-store-copy tmp%5#0 0'
debug: Replaced main.ops[36]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main.ops[39]: 'l-store-copy tmp%6#0 0'
debug: Replaced main.ops[41]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main.ops[46]: 'l-store-copy tmp%7#0 0'
debug: Replaced main.ops[48]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main.ops[51]: 'l-store-copy tmp%8#0 0'
debug: Replaced main.ops[53]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main.ops[58]: 'l-store-copy c#1 0'
debug: Replaced main.ops[60]: 'v-load c#1' with 'l-load c#1'
debug: Inserted main.ops[63]: 'l-store-copy tmp%9#0 0'
debug: Replaced main.ops[65]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main.ops[69]: 'l-store-copy tmp%10#0 0'
debug: Replaced main.ops[71]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main.ops[74]: 'l-store-copy tmp%11#0 0'
debug: Replaced main.ops[76]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main.ops[94]: 'l-store-copy tmp%12#0 0'
debug: Replaced main.ops[96]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main.ops[99]: 'l-store-copy tmp%13#0 0'
debug: Replaced main.ops[101]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main.ops[128]: 'l-store-copy tmp%14#0 0'
debug: Replaced main.ops[130]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main.ops[133]: 'l-store-copy tmp%15#0 0'
debug: Replaced main.ops[135]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main.ops[153]: 'l-store-copy tmp%16#0 0'
debug: Replaced main.ops[155]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main.ops[158]: 'l-store-copy tmp%17#0 0'
debug: Replaced main.ops[160]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main.ops[182]: 'l-store-copy tmp%18#0 0'
debug: Replaced main.ops[184]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main.ops[187]: 'l-store-copy tmp%19#0 0'
debug: Replaced main.ops[189]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main.ops[211]: 'l-store-copy tmp%20#0 0'
debug: Replaced main.ops[213]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main.ops[216]: 'l-store-copy tmp%21#0 0'
debug: Replaced main.ops[218]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main.ops[253]: 'l-store-copy tmp%22#0 0'
debug: Replaced main.ops[255]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main.ops[258]: 'l-store-copy tmp%23#0 0'
debug: Replaced main.ops[260]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main.ops[286]: 'l-store-copy bounded_index%9#0 0'
debug: Replaced main.ops[288]: 'v-load bounded_index%9#0' with 'l-load bounded_index%9#0'
debug: Inserted main.ops[301]: 'l-store-copy tmp%24#0 0'
debug: Replaced main.ops[303]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main.ops[306]: 'l-store-copy tmp%25#0 0'
debug: Replaced main.ops[308]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted main.ops[334]: 'l-store-copy bounded_index%11#0 0'
debug: Replaced main.ops[336]: 'v-load bounded_index%11#0' with 'l-load bounded_index%11#0'
debug: Inserted main.ops[349]: 'l-store-copy tmp%26#0 0'
debug: Replaced main.ops[351]: 'v-load tmp%26#0' with 'l-load tmp%26#0'
debug: Inserted main.ops[354]: 'l-store-copy tmp%27#0 0'
debug: Replaced main.ops[356]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted main.ops[360]: 'l-store-copy tmp%28#0 0'
debug: Replaced main.ops[362]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted main.ops[370]: 'l-store-copy tmp%30#0 0'
debug: Replaced main.ops[372]: 'v-load tmp%30#0' with 'l-load tmp%30#0'
debug: Inserted main.ops[375]: 'l-store-copy x#0 0'
debug: Replaced main.ops[377]: 'v-load x#0' with 'l-load x#0'
debug: Inserted main.ops[381]: 'l-store-copy tmp%31#0 0'
debug: Replaced main.ops[383]: 'v-load tmp%31#0' with 'l-load tmp%31#0'
debug: Inserted main.ops[391]: 'l-store-copy tmp%33#0 0'
debug: Replaced main.ops[393]: 'v-load tmp%33#0' with 'l-load tmp%33#0'
debug: Inserted main.ops[396]: 'l-store-copy tmp%34#0 0'
debug: Replaced main.ops[398]: 'v-load tmp%34#0' with 'l-load tmp%34#0'
debug: Inserted main.ops[402]: 'l-store-copy tmp%35#0 0'
debug: Replaced main.ops[404]: 'v-load tmp%35#0' with 'l-load tmp%35#0'
debug: Inserted main.ops[412]: 'l-store-copy tmp%37#0 0'
debug: Replaced main.ops[414]: 'v-load tmp%37#0' with 'l-load tmp%37#0'
debug: Inserted main.ops[417]: 'l-store-copy tmp%38#0 0'
debug: Replaced main.ops[419]: 'v-load tmp%38#0' with 'l-load tmp%38#0'
debug: Inserted main.ops[423]: 'l-store-copy tmp%39#0 0'
debug: Replaced main.ops[425]: 'v-load tmp%39#0' with 'l-load tmp%39#0'
debug: Inserted main.ops[433]: 'l-store-copy tmp%41#0 0'
debug: Replaced main.ops[435]: 'v-load tmp%41#0' with 'l-load tmp%41#0'
debug: Inserted main.ops[438]: 'l-store-copy tmp%42#0 0'
debug: Replaced main.ops[440]: 'v-load tmp%42#0' with 'l-load tmp%42#0'
debug: Inserted main.ops[444]: 'l-store-copy tmp%43#0 0'
debug: Replaced main.ops[446]: 'v-load tmp%43#0' with 'l-load tmp%43#0'
debug: Inserted main.ops[454]: 'l-store-copy tmp%45#0 0'
debug: Replaced main.ops[456]: 'v-load tmp%45#0' with 'l-load tmp%45#0'
debug: Inserted main.ops[459]: 'l-store-copy tmp%46#0 0'
debug: Replaced main.ops[461]: 'v-load tmp%46#0' with 'l-load tmp%46#0'
debug: Inserted main.ops[465]: 'l-store-copy tmp%47#0 0'
debug: Replaced main.ops[467]: 'v-load tmp%47#0' with 'l-load tmp%47#0'
debug: Inserted main.ops[475]: 'l-store-copy tmp%49#0 0'
debug: Replaced main.ops[477]: 'v-load tmp%49#0' with 'l-load tmp%49#0'
debug: Inserted main.ops[480]: 'l-store-copy tmp%50#0 0'
debug: Replaced main.ops[482]: 'v-load tmp%50#0' with 'l-load tmp%50#0'
debug: Inserted main.ops[486]: 'l-store-copy tmp%51#0 0'
debug: Replaced main.ops[488]: 'v-load tmp%51#0' with 'l-load tmp%51#0'
debug: Inserted main.ops[496]: 'l-store-copy tmp%53#0 0'
debug: Replaced main.ops[498]: 'v-load tmp%53#0' with 'l-load tmp%53#0'
debug: Inserted main.ops[501]: 'l-store-copy tmp%54#0 0'
debug: Replaced main.ops[503]: 'v-load tmp%54#0' with 'l-load tmp%54#0'
debug: Inserted main.ops[507]: 'l-store-copy tmp%55#0 0'
debug: Replaced main.ops[509]: 'v-load tmp%55#0' with 'l-load tmp%55#0'
debug: Inserted main.ops[517]: 'l-store-copy tmp%57#0 0'
debug: Replaced main.ops[519]: 'v-load tmp%57#0' with 'l-load tmp%57#0'
debug: Inserted main.ops[522]: 'l-store-copy tmp%58#0 0'
debug: Replaced main.ops[524]: 'v-load tmp%58#0' with 'l-load tmp%58#0'
debug: Inserted main.ops[528]: 'l-store-copy tmp%59#0 0'
debug: Replaced main.ops[530]: 'v-load tmp%59#0' with 'l-load tmp%59#0'
debug: Inserted main.ops[538]: 'l-store-copy tmp%61#0 0'
debug: Replaced main.ops[540]: 'v-load tmp%61#0' with 'l-load tmp%61#0'
debug: Inserted main.ops[543]: 'l-store-copy tmp%62#0 0'
debug: Replaced main.ops[545]: 'v-load tmp%62#0' with 'l-load tmp%62#0'
debug: Inserted main.ops[550]: 'l-store-copy tmp%63#0 0'
debug: Replaced main.ops[552]: 'v-load tmp%63#0' with 'l-load tmp%63#0'
debug: Inserted main.ops[555]: 'l-store-copy tmp%64#0 0'
debug: Replaced main.ops[557]: 'v-load tmp%64#0' with 'l-load tmp%64#0'
debug: Inserted main.ops[562]: 'l-store-copy tmp%65#0 0'
debug: Replaced main.ops[564]: 'v-load tmp%65#0' with 'l-load tmp%65#0'
debug: Inserted main.ops[567]: 'l-store-copy tmp%66#0 0'
debug: Replaced main.ops[569]: 'v-load tmp%66#0' with 'l-load tmp%66#0'
debug: Inserted main.ops[574]: 'l-store-copy tmp%67#0 0'
debug: Replaced main.ops[576]: 'v-load tmp%67#0' with 'l-load tmp%67#0'
debug: Inserted main.ops[579]: 'l-store-copy tmp%68#0 0'
debug: Replaced main.ops[581]: 'v-load tmp%68#0' with 'l-load tmp%68#0'
debug: Inserted main.ops[586]: 'l-store-copy y#1 0'
debug: Replaced main.ops[588]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[591]: 'l-store-copy tmp%69#0 0'
debug: Replaced main.ops[593]: 'v-load tmp%69#0' with 'l-load tmp%69#0'
debug: Inserted main.ops[598]: 'l-store-copy y#1 0'
debug: Replaced main.ops[600]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[603]: 'l-store-copy tmp%70#0 0'
debug: Replaced main.ops[605]: 'v-load tmp%70#0' with 'l-load tmp%70#0'
debug: Inserted main.ops[610]: 'l-store-copy y#1 0'
debug: Replaced main.ops[612]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[615]: 'l-store-copy tmp%71#0 0'
debug: Replaced main.ops[617]: 'v-load tmp%71#0' with 'l-load tmp%71#0'
debug: Inserted main.ops[624]: 'l-store-copy tmp%72#0 0'
debug: Replaced main.ops[626]: 'v-load tmp%72#0' with 'l-load tmp%72#0'
debug: Inserted main.ops[634]: 'l-store-copy tmp%74#0 0'
debug: Replaced main.ops[636]: 'v-load tmp%74#0' with 'l-load tmp%74#0'
debug: Inserted main.ops[639]: 'l-store-copy tmp%75#0 0'
debug: Replaced main.ops[641]: 'v-load tmp%75#0' with 'l-load tmp%75#0'
debug: Inserted main.ops[80]: 'l-store-copy length%0#0 0'
debug: Replaced main.ops[83]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main.ops[90]: 'l-store-copy bounded_index%0#0 0'
debug: Replaced main.ops[93]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted main.ops[107]: 'l-store-copy length%1#0 0'
debug: Replaced main.ops[110]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main.ops[142]: 'l-store-copy length%2#0 0'
debug: Replaced main.ops[145]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted main.ops[168]: 'l-store-copy length%3#0 0'
debug: Replaced main.ops[171]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted main.ops[178]: 'l-store-copy bounded_offset%0#0 0'
debug: Replaced main.ops[181]: 'v-load bounded_offset%0#0' with 'l-load bounded_offset%0#0'
debug: Inserted main.ops[199]: 'l-store-copy length%4#0 0'
debug: Replaced main.ops[202]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted main.ops[209]: 'l-store-copy bounded_offset%1#0 0'
debug: Replaced main.ops[212]: 'v-load bounded_offset%1#0' with 'l-load bounded_offset%1#0'
debug: Inserted main.ops[214]: 'l-store-copy bounded_index%5#0 0'
debug: Replaced main.ops[217]: 'v-load bounded_index%5#0' with 'l-load bounded_index%5#0'
debug: Inserted main.ops[231]: 'l-store-copy length%5#0 0'
debug: Replaced main.ops[234]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[241]: 'l-store-copy bounded_offset%2#0 0'
debug: Replaced main.ops[244]: 'v-load bounded_offset%2#0' with 'l-load bounded_offset%2#0'
debug: Inserted main.ops[255]: 'l-store-copy bounded_offset%3#0 0'
debug: Replaced main.ops[258]: 'v-load bounded_offset%3#0' with 'l-load bounded_offset%3#0'
debug: Inserted main.ops[276]: 'l-store-copy length%6#0 0'
debug: Replaced main.ops[279]: 'v-load length%6#0' with 'l-load length%6#0'
debug: Inserted main.ops[295]: 'l-store-copy bounded_offset%4#0 0'
debug: Replaced main.ops[298]: 'v-load bounded_offset%4#0' with 'l-load bounded_offset%4#0'
debug: Inserted main.ops[326]: 'l-store-copy length%7#0 0'
debug: Replaced main.ops[329]: 'v-load length%7#0' with 'l-load length%7#0'
debug: Inserted main.ops[336]: 'l-store-copy bounded_offset%5#0 0'
debug: Replaced main.ops[339]: 'v-load bounded_offset%5#0' with 'l-load bounded_offset%5#0'
debug: Inserted main.ops[85]: 'l-store-copy is_out_of_bounds%0#0 0'
debug: Replaced main.ops[89]: 'v-load is_out_of_bounds%0#0' with 'l-load is_out_of_bounds%0#0'
debug: Inserted main.ops[113]: 'l-store-copy is_out_of_bounds%1#0 0'
debug: Replaced main.ops[117]: 'v-load is_out_of_bounds%1#0' with 'l-load is_out_of_bounds%1#0'
debug: Inserted main.ops[123]: 'l-store-copy is_out_of_bounds%2#0 0'
debug: Replaced main.ops[127]: 'v-load is_out_of_bounds%2#0' with 'l-load is_out_of_bounds%2#0'
debug: Inserted main.ops[129]: 'l-store-copy bounded_index%2#0 0'
debug: Replaced main.ops[133]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
debug: Inserted main.ops[151]: 'l-store-copy is_out_of_bounds%3#0 0'
debug: Replaced main.ops[155]: 'v-load is_out_of_bounds%3#0' with 'l-load is_out_of_bounds%3#0'
debug: Inserted main.ops[157]: 'l-store-copy bounded_index%3#0 0'
debug: Replaced main.ops[161]: 'v-load bounded_index%3#0' with 'l-load bounded_index%3#0'
debug: Inserted main.ops[179]: 'l-store-copy is_out_of_bounds%4#0 0'
debug: Replaced main.ops[183]: 'v-load is_out_of_bounds%4#0' with 'l-load is_out_of_bounds%4#0'
debug: Inserted main.ops[190]: 'l-store-copy bounded_index%4#0 0'
debug: Replaced main.ops[194]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted main.ops[212]: 'l-store-copy is_out_of_bounds%5#0 0'
debug: Replaced main.ops[216]: 'v-load is_out_of_bounds%5#0' with 'l-load is_out_of_bounds%5#0'
debug: Inserted main.ops[245]: 'l-store-copy is_out_of_bounds%6#0 0'
debug: Replaced main.ops[249]: 'v-load is_out_of_bounds%6#0' with 'l-load is_out_of_bounds%6#0'
debug: Inserted main.ops[260]: 'l-store-copy is_out_of_bounds%7#0 0'
debug: Replaced main.ops[264]: 'v-load is_out_of_bounds%7#0' with 'l-load is_out_of_bounds%7#0'
debug: Inserted main.ops[271]: 'l-store-copy bounded_index%7#0 0'
debug: Replaced main.ops[275]: 'v-load bounded_index%7#0' with 'l-load bounded_index%7#0'
debug: Inserted main.ops[293]: 'l-store-copy is_out_of_bounds%8#0 0'
debug: Replaced main.ops[297]: 'v-load is_out_of_bounds%8#0' with 'l-load is_out_of_bounds%8#0'
debug: Inserted main.ops[303]: 'l-store-copy is_out_of_bounds%9#0 0'
debug: Replaced main.ops[307]: 'v-load is_out_of_bounds%9#0' with 'l-load is_out_of_bounds%9#0'
debug: Inserted main.ops[319]: 'l-store-copy end_before_start%0#0 0'
debug: Replaced main.ops[323]: 'v-load end_before_start%0#0' with 'l-load end_before_start%0#0'
debug: Inserted main.ops[325]: 'l-store-copy end%0#0 0'
debug: Replaced main.ops[329]: 'v-load end%0#0' with 'l-load end%0#0'
debug: Inserted main.ops[347]: 'l-store-copy is_out_of_bounds%10#0 0'
debug: Replaced main.ops[351]: 'v-load is_out_of_bounds%10#0' with 'l-load is_out_of_bounds%10#0'
debug: Inserted main.ops[362]: 'l-store-copy is_out_of_bounds%11#0 0'
debug: Replaced main.ops[366]: 'v-load is_out_of_bounds%11#0' with 'l-load is_out_of_bounds%11#0'
debug: Inserted main.ops[373]: 'l-store-copy end_before_start%1#0 0'
debug: Replaced main.ops[377]: 'v-load end_before_start%1#0' with 'l-load end_before_start%1#0'
debug: Inserted main.ops[379]: 'l-store-copy end%1#0 0'
debug: Replaced main.ops[383]: 'v-load end%1#0' with 'l-load end%1#0'
debug: Inserted main.ops[401]: 'l-store-copy tmp%29#0 0'
debug: Replaced main.ops[405]: 'v-load tmp%29#0' with 'l-load tmp%29#0'
debug: Inserted main.ops[423]: 'l-store-copy tmp%32#0 0'
debug: Replaced main.ops[427]: 'v-load tmp%32#0' with 'l-load tmp%32#0'
debug: Inserted main.ops[445]: 'l-store-copy tmp%36#0 0'
debug: Replaced main.ops[449]: 'v-load tmp%36#0' with 'l-load tmp%36#0'
debug: Inserted main.ops[467]: 'l-store-copy tmp%40#0 0'
debug: Replaced main.ops[471]: 'v-load tmp%40#0' with 'l-load tmp%40#0'
debug: Inserted main.ops[489]: 'l-store-copy tmp%44#0 0'
debug: Replaced main.ops[493]: 'v-load tmp%44#0' with 'l-load tmp%44#0'
debug: Inserted main.ops[511]: 'l-store-copy tmp%48#0 0'
debug: Replaced main.ops[515]: 'v-load tmp%48#0' with 'l-load tmp%48#0'
debug: Inserted main.ops[533]: 'l-store-copy tmp%52#0 0'
debug: Replaced main.ops[537]: 'v-load tmp%52#0' with 'l-load tmp%52#0'
debug: Inserted main.ops[555]: 'l-store-copy tmp%56#0 0'
debug: Replaced main.ops[559]: 'v-load tmp%56#0' with 'l-load tmp%56#0'
debug: Inserted main.ops[577]: 'l-store-copy tmp%60#0 0'
debug: Replaced main.ops[581]: 'v-load tmp%60#0' with 'l-load tmp%60#0'
debug: Inserted main.ops[674]: 'l-store-copy tmp%73#0 0'
debug: Replaced main.ops[678]: 'v-load tmp%73#0' with 'l-load tmp%73#0'
debug: Inserted main.ops[84]: 'l-store-copy length%0#0 1'
debug: Replaced main.ops[89]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main.ops[113]: 'l-store-copy length%1#0 1'
debug: Replaced main.ops[118]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main.ops[124]: 'l-store-copy length%1#0 1'
debug: Replaced main.ops[129]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main.ops[153]: 'l-store-copy length%2#0 1'
debug: Replaced main.ops[158]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted main.ops[182]: 'l-store-copy length%3#0 1'
debug: Replaced main.ops[187]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted main.ops[188]: 'l-store-copy length%3#0 2'
debug: Replaced main.ops[193]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted main.ops[217]: 'l-store-copy length%4#0 1'
debug: Replaced main.ops[222]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted main.ops[223]: 'l-store-copy length%4#0 2'
debug: Replaced main.ops[228]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted main.ops[252]: 'l-store-copy length%5#0 1'
debug: Replaced main.ops[257]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[258]: 'l-store-copy length%5#0 2'
debug: Replaced main.ops[263]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[269]: 'l-store-copy length%5#0 1'
debug: Replaced main.ops[274]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[275]: 'l-store-copy length%5#0 2'
debug: Replaced main.ops[280]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[304]: 'l-store-copy length%6#0 1'
debug: Replaced main.ops[309]: 'v-load length%6#0' with 'l-load length%6#0'
debug: Inserted main.ops[315]: 'l-store-copy length%6#0 1'
debug: Replaced main.ops[320]: 'v-load length%6#0' with 'l-load length%6#0'
debug: Inserted main.ops[321]: 'l-store-copy length%6#0 2'
debug: Replaced main.ops[326]: 'v-load length%6#0' with 'l-load length%6#0'
debug: Inserted main.ops[332]: 'l-store-copy bounded_index%9#0 0'
debug: Replaced main.ops[337]: 'v-load bounded_index%9#0' with 'l-load bounded_index%9#0'
debug: Inserted main.ops[334]: 'l-store-copy bounded_index%8#0 2'
debug: Replaced main.ops[339]: 'v-load bounded_index%8#0' with 'l-load bounded_index%8#0'
debug: Inserted main.ops[363]: 'l-store-copy length%7#0 1'
debug: Replaced main.ops[368]: 'v-load length%7#0' with 'l-load length%7#0'
debug: Inserted main.ops[369]: 'l-store-copy length%7#0 2'
debug: Replaced main.ops[374]: 'v-load length%7#0' with 'l-load length%7#0'
debug: Inserted main.ops[380]: 'l-store-copy length%7#0 1'
debug: Replaced main.ops[385]: 'v-load length%7#0' with 'l-load length%7#0'
debug: Inserted main.ops[391]: 'l-store-copy bounded_index%11#0 0'
debug: Replaced main.ops[396]: 'v-load bounded_index%11#0' with 'l-load bounded_index%11#0'
debug: Inserted main.ops[393]: 'l-store-copy bounded_index%10#0 2'
debug: Replaced main.ops[398]: 'v-load bounded_index%10#0' with 'l-load bounded_index%10#0'
debug: Inserted main.ops[119]: 'l-store-copy length%1#0 2'
debug: Replaced main.ops[124]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main.ops[265]: 'l-store-copy length%5#0 1'
debug: Replaced main.ops[270]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main.ops[312]: 'l-store-copy length%6#0 2'
debug: Replaced main.ops[317]: 'v-load length%6#0' with 'l-load length%6#0'
debug: Inserted main.ops[343]: 'l-store-copy bounded_index%8#0 2'
debug: Replaced main.ops[349]: 'v-load bounded_index%8#0' with 'l-load bounded_index%8#0'
debug: Inserted main.ops[379]: 'l-store-copy length%7#0 1'
debug: Replaced main.ops[384]: 'v-load length%7#0' with 'l-load length%7#0'
debug: Inserted main.ops[404]: 'l-store-copy bounded_index%10#0 2'
debug: Replaced main.ops[410]: 'v-load bounded_index%10#0' with 'l-load bounded_index%10#0'
debug: Inserted main.ops[90]: 'l-store-copy length%0#0 2'
debug: Replaced main.ops[97]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main.ops[231]: 'l-store-copy length%4#0 1'
debug: Replaced main.ops[238]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted main.ops[664]: 'l-store-copy y#1 0'
debug: Replaced main.ops[671]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[677]: 'l-store-copy y#1 0'
debug: Replaced main.ops[684]: 'v-load y#1' with 'l-load y#1'
debug: Inserted main.ops[123]: 'l-store-copy bounded_index%1#0 1'
debug: Replaced main.ops[138]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted main.ops[385]: 'l-store-copy bounded_index%10#0 1'
debug: Replaced main.ops[401]: 'v-load bounded_index%10#0' with 'l-load bounded_index%10#0'
debug: Inserted main.ops[271]: 'l-store-copy bounded_index%6#0 1'
debug: Replaced main.ops[292]: 'v-load bounded_index%6#0' with 'l-load bounded_index%6#0'
debug: Inserted main.ops[319]: 'l-store-copy bounded_index%8#0 1'
debug: Replaced main.ops[341]: 'v-load bounded_index%8#0' with 'l-load bounded_index%8#0'
debug: Inserted check_slicing_with_uint64.ops[16]: 'l-store-copy tmp%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[18]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted check_slicing_with_uint64.ops[21]: 'l-store-copy tmp%1#0 0'
debug: Replaced check_slicing_with_uint64.ops[23]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted check_slicing_with_uint64.ops[45]: 'l-store-copy bounded_index%2#0 0'
debug: Replaced check_slicing_with_uint64.ops[47]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
debug: Inserted check_slicing_with_uint64.ops[60]: 'l-store-copy tmp%2#0 0'
debug: Replaced check_slicing_with_uint64.ops[62]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted check_slicing_with_uint64.ops[65]: 'l-store-copy tmp%3#0 0'
debug: Replaced check_slicing_with_uint64.ops[67]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted check_slicing_with_uint64.ops[85]: 'l-store-copy tmp%4#0 0'
debug: Replaced check_slicing_with_uint64.ops[87]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted check_slicing_with_uint64.ops[90]: 'l-store-copy tmp%5#0 0'
debug: Replaced check_slicing_with_uint64.ops[92]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted check_slicing_with_uint64.ops[95]: 'l-store-copy tmp%6#0 0'
debug: Replaced check_slicing_with_uint64.ops[97]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted check_slicing_with_uint64.ops[121]: 'l-store-copy bounded_index%5#0 0'
debug: Replaced check_slicing_with_uint64.ops[123]: 'v-load bounded_index%5#0' with 'l-load bounded_index%5#0'
debug: Inserted check_slicing_with_uint64.ops[136]: 'l-store-copy tmp%7#0 0'
debug: Replaced check_slicing_with_uint64.ops[138]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted check_slicing_with_uint64.ops[141]: 'l-store-copy tmp%8#0 0'
debug: Replaced check_slicing_with_uint64.ops[143]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted check_slicing_with_uint64.ops[170]: 'l-store-copy tmp%9#0 0'
debug: Replaced check_slicing_with_uint64.ops[172]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted check_slicing_with_uint64.ops[175]: 'l-store-copy tmp%10#0 0'
debug: Replaced check_slicing_with_uint64.ops[177]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted check_slicing_with_uint64.ops[2]: 'l-store-copy length%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[5]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_slicing_with_uint64.ops[12]: 'l-store-copy bounded_index%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[15]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted check_slicing_with_uint64.ops[29]: 'l-store-copy length%1#0 0'
debug: Replaced check_slicing_with_uint64.ops[32]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_slicing_with_uint64.ops[74]: 'l-store-copy length%2#0 0'
debug: Replaced check_slicing_with_uint64.ops[77]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_slicing_with_uint64.ops[103]: 'l-store-copy length%3#0 0'
debug: Replaced check_slicing_with_uint64.ops[106]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted check_slicing_with_uint64.ops[122]: 'l-store-copy bounded_offset%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[125]: 'v-load bounded_offset%0#0' with 'l-load bounded_offset%0#0'
debug: Inserted check_slicing_with_uint64.ops[153]: 'l-store-copy length%4#0 0'
debug: Replaced check_slicing_with_uint64.ops[156]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted check_slicing_with_uint64.ops[7]: 'l-store-copy is_out_of_bounds%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[11]: 'v-load is_out_of_bounds%0#0' with 'l-load is_out_of_bounds%0#0'
debug: Inserted check_slicing_with_uint64.ops[35]: 'l-store-copy is_out_of_bounds%1#0 0'
debug: Replaced check_slicing_with_uint64.ops[39]: 'v-load is_out_of_bounds%1#0' with 'l-load is_out_of_bounds%1#0'
debug: Inserted check_slicing_with_uint64.ops[45]: 'l-store-copy is_out_of_bounds%2#0 0'
debug: Replaced check_slicing_with_uint64.ops[49]: 'v-load is_out_of_bounds%2#0' with 'l-load is_out_of_bounds%2#0'
debug: Inserted check_slicing_with_uint64.ops[56]: 'l-store-copy end_before_start%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[60]: 'v-load end_before_start%0#0' with 'l-load end_before_start%0#0'
debug: Inserted check_slicing_with_uint64.ops[62]: 'l-store-copy end%0#0 0'
debug: Replaced check_slicing_with_uint64.ops[66]: 'v-load end%0#0' with 'l-load end%0#0'
debug: Inserted check_slicing_with_uint64.ops[84]: 'l-store-copy is_out_of_bounds%3#0 0'
debug: Replaced check_slicing_with_uint64.ops[88]: 'v-load is_out_of_bounds%3#0' with 'l-load is_out_of_bounds%3#0'
debug: Inserted check_slicing_with_uint64.ops[90]: 'l-store-copy bounded_index%3#0 0'
debug: Replaced check_slicing_with_uint64.ops[94]: 'v-load bounded_index%3#0' with 'l-load bounded_index%3#0'
debug: Inserted check_slicing_with_uint64.ops[115]: 'l-store-copy is_out_of_bounds%4#0 0'
debug: Replaced check_slicing_with_uint64.ops[119]: 'v-load is_out_of_bounds%4#0' with 'l-load is_out_of_bounds%4#0'
debug: Inserted check_slicing_with_uint64.ops[125]: 'l-store-copy is_out_of_bounds%5#0 0'
debug: Replaced check_slicing_with_uint64.ops[129]: 'v-load is_out_of_bounds%5#0' with 'l-load is_out_of_bounds%5#0'
debug: Inserted check_slicing_with_uint64.ops[141]: 'l-store-copy end_before_start%1#0 0'
debug: Replaced check_slicing_with_uint64.ops[145]: 'v-load end_before_start%1#0' with 'l-load end_before_start%1#0'
debug: Inserted check_slicing_with_uint64.ops[147]: 'l-store-copy end%1#0 0'
debug: Replaced check_slicing_with_uint64.ops[151]: 'v-load end%1#0' with 'l-load end%1#0'
debug: Inserted check_slicing_with_uint64.ops[169]: 'l-store-copy is_out_of_bounds%6#0 0'
debug: Replaced check_slicing_with_uint64.ops[173]: 'v-load is_out_of_bounds%6#0' with 'l-load is_out_of_bounds%6#0'
debug: Inserted check_slicing_with_uint64.ops[179]: 'l-store-copy is_out_of_bounds%7#0 0'
debug: Replaced check_slicing_with_uint64.ops[183]: 'v-load is_out_of_bounds%7#0' with 'l-load is_out_of_bounds%7#0'
debug: Inserted check_slicing_with_uint64.ops[185]: 'l-store-copy bounded_index%7#0 0'
debug: Replaced check_slicing_with_uint64.ops[189]: 'v-load bounded_index%7#0' with 'l-load bounded_index%7#0'
debug: Inserted check_slicing_with_uint64.ops[6]: 'l-store-copy length%0#0 1'
debug: Replaced check_slicing_with_uint64.ops[11]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_slicing_with_uint64.ops[35]: 'l-store-copy length%1#0 1'
debug: Replaced check_slicing_with_uint64.ops[40]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_slicing_with_uint64.ops[46]: 'l-store-copy length%1#0 1'
debug: Replaced check_slicing_with_uint64.ops[51]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_slicing_with_uint64.ops[57]: 'l-store-copy bounded_index%2#0 0'
debug: Replaced check_slicing_with_uint64.ops[62]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
debug: Inserted check_slicing_with_uint64.ops[59]: 'l-store-copy bounded_index%1#0 2'
debug: Replaced check_slicing_with_uint64.ops[64]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted check_slicing_with_uint64.ops[88]: 'l-store-copy length%2#0 1'
debug: Replaced check_slicing_with_uint64.ops[93]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_slicing_with_uint64.ops[120]: 'l-store-copy length%3#0 1'
debug: Replaced check_slicing_with_uint64.ops[125]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted check_slicing_with_uint64.ops[131]: 'l-store-copy length%3#0 1'
debug: Replaced check_slicing_with_uint64.ops[136]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted check_slicing_with_uint64.ops[137]: 'l-store-copy length%3#0 2'
debug: Replaced check_slicing_with_uint64.ops[142]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted check_slicing_with_uint64.ops[148]: 'l-store-copy bounded_index%5#0 0'
debug: Replaced check_slicing_with_uint64.ops[153]: 'v-load bounded_index%5#0' with 'l-load bounded_index%5#0'
debug: Inserted check_slicing_with_uint64.ops[150]: 'l-store-copy bounded_index%4#0 2'
debug: Replaced check_slicing_with_uint64.ops[155]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_slicing_with_uint64.ops[179]: 'l-store-copy length%4#0 1'
debug: Replaced check_slicing_with_uint64.ops[184]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted check_slicing_with_uint64.ops[190]: 'l-store-copy length%4#0 1'
debug: Replaced check_slicing_with_uint64.ops[195]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted check_slicing_with_uint64.ops[41]: 'l-store-copy length%1#0 2'
debug: Replaced check_slicing_with_uint64.ops[46]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_slicing_with_uint64.ops[66]: 'l-store-copy bounded_index%1#0 2'
debug: Replaced check_slicing_with_uint64.ops[72]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted check_slicing_with_uint64.ops[128]: 'l-store-copy length%3#0 2'
debug: Replaced check_slicing_with_uint64.ops[133]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted check_slicing_with_uint64.ops[159]: 'l-store-copy bounded_index%4#0 2'
debug: Replaced check_slicing_with_uint64.ops[165]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_slicing_with_uint64.ops[189]: 'l-store-copy length%4#0 2'
debug: Replaced check_slicing_with_uint64.ops[194]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted check_slicing_with_uint64.ops[12]: 'l-store-copy length%0#0 2'
debug: Replaced check_slicing_with_uint64.ops[19]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_slicing_with_uint64.ops[45]: 'l-store-copy bounded_index%1#0 1'
debug: Replaced check_slicing_with_uint64.ops[61]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted check_slicing_with_uint64.ops[194]: 'l-store-copy bounded_index%6#0 1'
debug: Replaced check_slicing_with_uint64.ops[209]: 'v-load bounded_index%6#0' with 'l-load bounded_index%6#0'
debug: Inserted check_slicing_with_uint64.ops[133]: 'l-store-copy bounded_index%4#0 1'
debug: Replaced check_slicing_with_uint64.ops[155]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_slicing_with_uint64.ops[119]: 'l-store-copy tmp%6#0 0'
debug: Replaced check_slicing_with_uint64.ops[168]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted check_end_before_start_slicing.ops[20]: 'l-store-copy bounded_index%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[22]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted check_end_before_start_slicing.ops[35]: 'l-store-copy tmp%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[37]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted check_end_before_start_slicing.ops[40]: 'l-store-copy tmp%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[42]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted check_end_before_start_slicing.ops[72]: 'l-store-copy bounded_index%3#0 0'
debug: Replaced check_end_before_start_slicing.ops[74]: 'v-load bounded_index%3#0' with 'l-load bounded_index%3#0'
debug: Inserted check_end_before_start_slicing.ops[87]: 'l-store-copy tmp%2#0 0'
debug: Replaced check_end_before_start_slicing.ops[89]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted check_end_before_start_slicing.ops[92]: 'l-store-copy tmp%3#0 0'
debug: Replaced check_end_before_start_slicing.ops[94]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted check_end_before_start_slicing.ops[116]: 'l-store-copy bounded_index%5#0 0'
debug: Replaced check_end_before_start_slicing.ops[118]: 'v-load bounded_index%5#0' with 'l-load bounded_index%5#0'
debug: Inserted check_end_before_start_slicing.ops[131]: 'l-store-copy tmp%4#0 0'
debug: Replaced check_end_before_start_slicing.ops[133]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted check_end_before_start_slicing.ops[136]: 'l-store-copy tmp%5#0 0'
debug: Replaced check_end_before_start_slicing.ops[138]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted check_end_before_start_slicing.ops[2]: 'l-store-copy length%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[5]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_end_before_start_slicing.ops[47]: 'l-store-copy length%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[50]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[57]: 'l-store-copy bounded_offset%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[60]: 'v-load bounded_offset%0#0' with 'l-load bounded_offset%0#0'
debug: Inserted check_end_before_start_slicing.ops[71]: 'l-store-copy bounded_offset%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[74]: 'v-load bounded_offset%1#0' with 'l-load bounded_offset%1#0'
debug: Inserted check_end_before_start_slicing.ops[102]: 'l-store-copy length%2#0 0'
debug: Replaced check_end_before_start_slicing.ops[105]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_end_before_start_slicing.ops[7]: 'l-store-copy is_out_of_bounds%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[11]: 'v-load is_out_of_bounds%0#0' with 'l-load is_out_of_bounds%0#0'
debug: Inserted check_end_before_start_slicing.ops[17]: 'l-store-copy is_out_of_bounds%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[21]: 'v-load is_out_of_bounds%1#0' with 'l-load is_out_of_bounds%1#0'
debug: Inserted check_end_before_start_slicing.ops[28]: 'l-store-copy end_before_start%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[32]: 'v-load end_before_start%0#0' with 'l-load end_before_start%0#0'
debug: Inserted check_end_before_start_slicing.ops[34]: 'l-store-copy end%0#0 0'
debug: Replaced check_end_before_start_slicing.ops[38]: 'v-load end%0#0' with 'l-load end%0#0'
debug: Inserted check_end_before_start_slicing.ops[56]: 'l-store-copy is_out_of_bounds%2#0 0'
debug: Replaced check_end_before_start_slicing.ops[60]: 'v-load is_out_of_bounds%2#0' with 'l-load is_out_of_bounds%2#0'
debug: Inserted check_end_before_start_slicing.ops[71]: 'l-store-copy is_out_of_bounds%3#0 0'
debug: Replaced check_end_before_start_slicing.ops[75]: 'v-load is_out_of_bounds%3#0' with 'l-load is_out_of_bounds%3#0'
debug: Inserted check_end_before_start_slicing.ops[87]: 'l-store-copy end_before_start%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[91]: 'v-load end_before_start%1#0' with 'l-load end_before_start%1#0'
debug: Inserted check_end_before_start_slicing.ops[93]: 'l-store-copy end%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[97]: 'v-load end%1#0' with 'l-load end%1#0'
debug: Inserted check_end_before_start_slicing.ops[115]: 'l-store-copy is_out_of_bounds%4#0 0'
debug: Replaced check_end_before_start_slicing.ops[119]: 'v-load is_out_of_bounds%4#0' with 'l-load is_out_of_bounds%4#0'
debug: Inserted check_end_before_start_slicing.ops[125]: 'l-store-copy is_out_of_bounds%5#0 0'
debug: Replaced check_end_before_start_slicing.ops[129]: 'v-load is_out_of_bounds%5#0' with 'l-load is_out_of_bounds%5#0'
debug: Inserted check_end_before_start_slicing.ops[136]: 'l-store-copy end_before_start%2#0 0'
debug: Replaced check_end_before_start_slicing.ops[140]: 'v-load end_before_start%2#0' with 'l-load end_before_start%2#0'
debug: Inserted check_end_before_start_slicing.ops[142]: 'l-store-copy end%2#0 0'
debug: Replaced check_end_before_start_slicing.ops[146]: 'v-load end%2#0' with 'l-load end%2#0'
debug: Inserted check_end_before_start_slicing.ops[6]: 'l-store-copy length%0#0 1'
debug: Replaced check_end_before_start_slicing.ops[11]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_end_before_start_slicing.ops[17]: 'l-store-copy length%0#0 1'
debug: Replaced check_end_before_start_slicing.ops[22]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_end_before_start_slicing.ops[28]: 'l-store-copy bounded_index%1#0 0'
debug: Replaced check_end_before_start_slicing.ops[33]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted check_end_before_start_slicing.ops[30]: 'l-store-copy bounded_index%0#0 2'
debug: Replaced check_end_before_start_slicing.ops[35]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted check_end_before_start_slicing.ops[59]: 'l-store-copy length%1#0 1'
debug: Replaced check_end_before_start_slicing.ops[64]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[65]: 'l-store-copy length%1#0 2'
debug: Replaced check_end_before_start_slicing.ops[70]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[76]: 'l-store-copy length%1#0 1'
debug: Replaced check_end_before_start_slicing.ops[81]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[82]: 'l-store-copy length%1#0 2'
debug: Replaced check_end_before_start_slicing.ops[87]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[93]: 'l-store-copy bounded_index%3#0 0'
debug: Replaced check_end_before_start_slicing.ops[98]: 'v-load bounded_index%3#0' with 'l-load bounded_index%3#0'
debug: Inserted check_end_before_start_slicing.ops[95]: 'l-store-copy bounded_index%2#0 2'
debug: Replaced check_end_before_start_slicing.ops[100]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
debug: Inserted check_end_before_start_slicing.ops[124]: 'l-store-copy length%2#0 1'
debug: Replaced check_end_before_start_slicing.ops[129]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_end_before_start_slicing.ops[135]: 'l-store-copy length%2#0 1'
debug: Replaced check_end_before_start_slicing.ops[140]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_end_before_start_slicing.ops[146]: 'l-store-copy bounded_index%5#0 0'
debug: Replaced check_end_before_start_slicing.ops[151]: 'v-load bounded_index%5#0' with 'l-load bounded_index%5#0'
debug: Inserted check_end_before_start_slicing.ops[148]: 'l-store-copy bounded_index%4#0 2'
debug: Replaced check_end_before_start_slicing.ops[153]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_end_before_start_slicing.ops[12]: 'l-store-copy length%0#0 2'
debug: Replaced check_end_before_start_slicing.ops[17]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted check_end_before_start_slicing.ops[37]: 'l-store-copy bounded_index%0#0 2'
debug: Replaced check_end_before_start_slicing.ops[43]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted check_end_before_start_slicing.ops[73]: 'l-store-copy length%1#0 1'
debug: Replaced check_end_before_start_slicing.ops[78]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted check_end_before_start_slicing.ops[104]: 'l-store-copy bounded_index%2#0 2'
debug: Replaced check_end_before_start_slicing.ops[110]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
debug: Inserted check_end_before_start_slicing.ops[134]: 'l-store-copy length%2#0 2'
debug: Replaced check_end_before_start_slicing.ops[139]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted check_end_before_start_slicing.ops[159]: 'l-store-copy bounded_index%4#0 2'
debug: Replaced check_end_before_start_slicing.ops[165]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_end_before_start_slicing.ops[15]: 'l-store-copy bounded_index%0#0 1'
debug: Replaced check_end_before_start_slicing.ops[31]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted check_end_before_start_slicing.ops[138]: 'l-store-copy bounded_index%4#0 1'
debug: Replaced check_end_before_start_slicing.ops[154]: 'v-load bounded_index%4#0' with 'l-load bounded_index%4#0'
debug: Inserted check_end_before_start_slicing.ops[77]: 'l-store-copy bounded_index%2#0 1'
debug: Replaced check_end_before_start_slicing.ops[99]: 'v-load bounded_index%2#0' with 'l-load bounded_index%2#0'
stubs/bytes.py:5 debug: optimizing TEAL subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
stubs/bytes.py:81 debug: optimizing TEAL subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
stubs/bytes.py:92 debug: optimizing TEAL subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
stubs/bytes.py:101 debug: optimizing TEAL subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
stubs/bytes.py:77 debug: optimizing TEAL subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> uint64:
info: optimizing approval program of test_cases.stubs.biguint.BigUIntContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.biguint.compare_biguints
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguints using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguints
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguint_vs_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.biguint.compare_uint64_vs_biguint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/BigUIntContract.ir/BigUIntContract.approval.0.destructured.ir
info: optimizing clear program of test_cases.stubs.biguint.BigUIntContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to stubs/out_unoptimized/BigUIntContract.ir/BigUIntContract.clear.0.destructured.ir
debug: Inserted main.ops[10]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[12]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[20]: 'l-store-copy tmp%2#0 0'
debug: Replaced main.ops[22]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main.ops[25]: 'l-store-copy tmp%3#0 0'
debug: Replaced main.ops[27]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main.ops[38]: 'l-store-copy tmp%6#0 0'
debug: Replaced main.ops[40]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main.ops[45]: 'l-store-copy tmp%7#0 0'
debug: Replaced main.ops[47]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main.ops[34]: 'l-store-copy tmp%5#0 0'
debug: Replaced main.ops[37]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main.ops[15]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[19]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main.ops[32]: 'l-store-copy tmp%4#0 0'
debug: Replaced main.ops[38]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted compare_biguints.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced compare_biguints.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted compare_biguints.ops[10]: 'l-store-copy tmp%1#0 0'
debug: Replaced compare_biguints.ops[12]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted compare_biguints.ops[17]: 'l-store-copy tmp%2#0 0'
debug: Replaced compare_biguints.ops[19]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted compare_biguints.ops[24]: 'l-store-copy tmp%3#0 0'
debug: Replaced compare_biguints.ops[26]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted compare_biguints.ops[31]: 'l-store-copy tmp%4#0 0'
debug: Replaced compare_biguints.ops[33]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted compare_biguints.ops[38]: 'l-store-copy tmp%5#0 0'
debug: Replaced compare_biguints.ops[40]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted compare_biguint_vs_uint64.ops[6]: 'l-store-copy tmp%1#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[8]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted compare_biguint_vs_uint64.ops[16]: 'l-store-copy tmp%3#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[18]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted compare_biguint_vs_uint64.ops[23]: 'l-store-copy tmp%4#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[25]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted compare_biguint_vs_uint64.ops[33]: 'l-store-copy tmp%6#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[35]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted compare_biguint_vs_uint64.ops[43]: 'l-store-copy tmp%8#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[45]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted compare_biguint_vs_uint64.ops[53]: 'l-store-copy tmp%10#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[55]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted compare_biguint_vs_uint64.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted compare_biguint_vs_uint64.ops[13]: 'l-store-copy tmp%2#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[16]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted compare_biguint_vs_uint64.ops[31]: 'l-store-copy tmp%5#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[34]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted compare_biguint_vs_uint64.ops[42]: 'l-store-copy tmp%7#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[45]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted compare_biguint_vs_uint64.ops[53]: 'l-store-copy tmp%9#0 0'
debug: Replaced compare_biguint_vs_uint64.ops[56]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted compare_uint64_vs_biguint.ops[6]: 'l-store-copy tmp%1#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[8]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted compare_uint64_vs_biguint.ops[16]: 'l-store-copy tmp%3#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[18]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted compare_uint64_vs_biguint.ops[23]: 'l-store-copy tmp%4#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[25]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted compare_uint64_vs_biguint.ops[33]: 'l-store-copy tmp%6#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[35]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted compare_uint64_vs_biguint.ops[43]: 'l-store-copy tmp%8#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[45]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted compare_uint64_vs_biguint.ops[53]: 'l-store-copy tmp%10#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[55]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted compare_uint64_vs_biguint.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted compare_uint64_vs_biguint.ops[13]: 'l-store-copy tmp%2#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[16]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted compare_uint64_vs_biguint.ops[31]: 'l-store-copy tmp%5#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[34]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted compare_uint64_vs_biguint.ops[42]: 'l-store-copy tmp%7#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[45]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted compare_uint64_vs_biguint.ops[53]: 'l-store-copy tmp%9#0 0'
debug: Replaced compare_uint64_vs_biguint.ops[56]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
stubs/biguint.py:5 debug: optimizing TEAL subroutine test_cases.stubs.biguint.BigUIntContract.approval_program() -> uint64:
stubs/biguint.py:20 debug: optimizing TEAL subroutine test_cases.stubs.biguint.compare_biguints(one: bytes, two: bytes) -> void:
stubs/biguint.py:30 debug: optimizing TEAL subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64(one: bytes, two: uint64) -> void:
stubs/biguint.py:40 debug: optimizing TEAL subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint(one: uint64, two: bytes) -> void:
stubs/biguint.py:15 debug: optimizing TEAL subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program() -> uint64:
info: Writing stubs/out_unoptimized/Uint64Contract.approval.teal
info: Writing stubs/out_unoptimized/Uint64Contract.clear.teal
info: Writing stubs/out_unoptimized/Uint64Contract.approval.bin
info: Writing stubs/out_unoptimized/Uint64Contract.clear.bin
info: Writing stubs/out_unoptimized/Uint64Contract.approval.puya.map
info: Writing stubs/out_unoptimized/Uint64Contract.clear.puya.map
info: Writing stubs/out_unoptimized/StringContract.approval.teal
info: Writing stubs/out_unoptimized/StringContract.clear.teal
info: Writing stubs/out_unoptimized/StringContract.approval.bin
info: Writing stubs/out_unoptimized/StringContract.clear.bin
info: Writing stubs/out_unoptimized/StringContract.approval.puya.map
info: Writing stubs/out_unoptimized/StringContract.clear.puya.map
info: Writing stubs/out_unoptimized/BytesContract.approval.teal
info: Writing stubs/out_unoptimized/BytesContract.clear.teal
info: Writing stubs/out_unoptimized/BytesContract.approval.bin
info: Writing stubs/out_unoptimized/BytesContract.clear.bin
info: Writing stubs/out_unoptimized/BytesContract.approval.puya.map
info: Writing stubs/out_unoptimized/BytesContract.clear.puya.map
info: Writing stubs/out_unoptimized/BigUIntContract.approval.teal
info: Writing stubs/out_unoptimized/BigUIntContract.clear.teal
info: Writing stubs/out_unoptimized/BigUIntContract.approval.bin
info: Writing stubs/out_unoptimized/BigUIntContract.clear.bin
info: Writing stubs/out_unoptimized/BigUIntContract.approval.puya.map
info: Writing stubs/out_unoptimized/BigUIntContract.clear.puya.map