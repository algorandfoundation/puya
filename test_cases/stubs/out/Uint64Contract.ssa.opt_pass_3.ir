contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let tmp%11#0: bool = 1u
                (assert tmp%11#0)
                let c#3: uint64 = 12u
                let tmp%14#0: bool = (== c#3 12u)
                (assert tmp%14#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%19#0: bool = (== c#4 144u)
                (assert tmp%19#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%22#0: bool = (== c#5 2u)
                (assert tmp%22#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%23#0: bool = (== c#6 128u)
                (assert tmp%23#0)
                let tmp%33#0: bool = 1u
                (assert tmp%33#0)
                let tmp%36#0: bool = 1u
                (assert tmp%36#0)
                let tmp%45#0: bool = 1u
                (assert tmp%45#0)
                let tmp%48#0: bool = 1u
                (assert tmp%48#0)
                let tmp%59#0: bool = 1u
                (assert tmp%59#0)
                let y#3: uint64 = 193u
                let tmp%60#0: bool = (== y#3 193u)
                (assert tmp%60#0)
                let tmp%65#0: uint64 = (txn NumAppArgs)
                let tmp%67#0: uint64 = (select 5u 1u tmp%65#0)
                let tmp%68#0: bool = (== tmp%67#0 5u)
                (assert tmp%68#0) // constructor expressions supported
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> bool:
            block@0: // L84
                return 1u