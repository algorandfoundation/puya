contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let tmp%11#0: bool = 1u
                (assert tmp%11#0)
                let c#3: uint64 = 12u
                let tmp%14#0: bool = (== c#3 12u)
                (assert tmp%14#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%19#0: bool = (== c#4 144u)
                (assert tmp%19#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%22#0: bool = (== c#5 2u)
                (assert tmp%22#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%23#0: bool = (== c#6 128u)
                (assert tmp%23#0)
                let tmp%31#0: bool = 1u
                (assert tmp%31#0)
                let tmp%33#0: bool = 1u
                (assert tmp%33#0)
                let tmp%39#0: bool = 1u
                (assert tmp%39#0)
                let tmp%41#0: bool = 1u
                (assert tmp%41#0)
                let tmp%51#0: bool = 1u
                (assert tmp%51#0)
                let y#3: uint64 = 193u
                let tmp%52#0: bool = (== y#3 193u)
                (assert tmp%52#0)
                let tmp%57#0: uint64 = (txn NumAppArgs)
                goto tmp%57#0 ? block@25 : block@26
            block@25: // ternary_true_L80
                let ternary_result%8#0: uint64 = 1u
                goto block@27
            block@26: // ternary_false_L80
                let ternary_result%8#1: uint64 = 5u
                goto block@27
            block@27: // ternary_merge_L80
                let ternary_result%8#2: uint64 = Ï†(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26)
                let tmp%59#0: bool = (== ternary_result%8#2 5u)
                (assert tmp%59#0) // constructor expressions supported
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> bool:
            block@0: // L84
                return 1u