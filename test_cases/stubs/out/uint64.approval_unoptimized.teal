#pragma version 8

// test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
main_block@0:
        int 0
        int 1
        dup
        cover 2
        int 2
        cover 2
        int 5
        dup
        cover 3
        cover 4
        int 3
        cover 3
        int 60
        dup
        cover 4
        cover 6
        dup
        assert // Any non-zero number should be Truthy
        swap
        !
        assert // Zero should beFalsy
        dup
        dig 2
        <
        assert
        dig 1
        dig 1
        >
        assert
        dup
        dig 1
        <=
        assert
        dig 1
        dig 2
        >=
        assert
        dup
        dig 2
        +
        int 6
        ==
        assert
        dig 1
        dig 3
        +
        dup
        int 65
        ==
        assert
        dig 3
        dig 3
        -
        int 55
        ==
        assert
        dig 2
        -
        dup
        int 60
        ==
        assert
        dig 3
        dig 3
        /
        int 12
        ==
        assert
        dig 2
        /
        dup
        int 12
        ==
        assert
        dig 2
        uncover 4
        *
        int 300
        ==
        assert
        dig 2
        dig 4
        exp
        int 125
        ==
        assert
        int 2
        exp
        dup
        int 144
        ==
        assert
        dig 1
        uncover 5
        shl
        int 4
        ==
        assert
        int 6
        shr
        dup
        int 2
        ==
        assert
        int 6
        shl
        int 128
        ==
        assert
        swap
        uncover 2
        shr
        int 0
        ==
        assert
        ~
        int 18446744073709551614
        ==
        assert
        int 1
        dup
        swap
        int 0
        swap
        bnz main_ternary_false@2

main_ternary_true@1:
        dig 1
        b main_ternary_merge@3

main_ternary_false@2:
        dig 1

main_ternary_merge@3:
        dig 2
        dup
        cover 2
        ==
        assert
        bnz main_ternary_false@5

main_ternary_true@4:
        dig 1
        b main_ternary_merge@6

main_ternary_false@5:
        dup

main_ternary_merge@6:
        dig 1
        dup
        cover 2
        ==
        assert
        bnz main_ternary_false@8

main_ternary_true@7:
        dup
        b main_ternary_merge@9

main_ternary_false@8:
        dig 1

main_ternary_merge@9:
        dig 1
        dup
        cover 2
        ==
        assert
        bnz main_ternary_false@11

main_ternary_true@10:
        dup
        b main_ternary_merge@12

main_ternary_false@11:
        dup

main_ternary_merge@12:
        dig 1
        ==
        assert
        dig 1
        bz main_ternary_false@14

main_ternary_true@13:
        dig 1
        b main_ternary_merge@15

main_ternary_false@14:
        dig 1

main_ternary_merge@15:
        dig 2
        dup
        cover 2
        ==
        assert
        bz main_ternary_false@17

main_ternary_true@16:
        dig 1
        b main_ternary_merge@18

main_ternary_false@17:
        dup

main_ternary_merge@18:
        dig 2
        ==
        assert
        dup
        bz main_ternary_false@20

main_ternary_true@19:
        dup
        b main_ternary_merge@21

main_ternary_false@20:
        dig 1

main_ternary_merge@21:
        dig 2
        ==
        assert
        dup
        bz main_ternary_false@23

main_ternary_true@22:
        dup
        b main_ternary_merge@24

main_ternary_false@23:
        dup

main_ternary_merge@24:
        dig 1
        ==
        assert
        dig 4
        dup
        dig 5
        dup
        cover 3
        &
        ==
        assert
        dig 3
        dup
        cover 2
        dig 1
        |
        int 61
        ==
        assert
        ^
        int 57
        ==
        assert
        int 254
        int 31
        &
        dup
        int 30
        ==
        assert
        int 54
        |
        dup
        int 62
        ==
        assert
        int 255
        ^
        int 193
        ==
        assert
        int 1
        return

