#pragma version 10

test_cases.stubs.string.StringContract.approval_program:
    intcblock 1 0
    bytecblock "The quick brown fox jumped over the lazy dog" "no args"
    // stubs/string.py:22
    // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
    pushbytes "brown fox"
    bytec_0 // "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    assert
    // stubs/string.py:23
    // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
    pushbytes "red fox"
    bytec_0 // "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    !
    assert
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    txn NumAppArgs
    bz main_ternary_false@38
    pushbytes "args"
    b main_ternary_merge@39

main_ternary_false@38:
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    bytec_1 // "no args"

main_ternary_merge@39:
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    bytec_1 // "no args"
    ==
    // stubs/string.py:48-50
    // assert (
    //     String("args" if Txn.num_app_args else "no args") == "no args"
    // ), "constructor expressions supported"
    assert // constructor expressions supported
    // stubs/string.py:52
    // return True
    intc_0 // 1
    return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    pushbytes ""
    intc_1 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 1
    +
    dup
    frame_bury 0
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -1
    frame_dig 1
    frame_dig 0
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4
    intc_0 // 1
    frame_bury 0
    retsub

is_substring_after_if_else@4:
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_1 // 0
    frame_bury 0
    retsub
