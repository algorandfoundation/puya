contract StringContract
{
  approval_program(): bool
  {
    empty: string = ''
    assert(!(reinterpret_cast<bool>(len(reinterpret_cast<bytes>(empty)))), comment="Empty bytes should be False")
    non_empty: string = ' '
    assert(reinterpret_cast<bool>(len(reinterpret_cast<bytes>(non_empty))), comment="Non-empty bytes should be True")
    assert('a' + 'b' == 'ab')
    assert('a' + 'b' == 'ab')
    assert('a' + 'b' == 'ab')
    assert(empty != non_empty)
    c: string = 'c'
    c += 'd'
    c += 'e'
    assert(c == 'cde')
    assert(algopy_lib_bytes::is_substring(item=reinterpret_cast<bytes>('brown fox'), sequence=reinterpret_cast<bytes>('The quick brown fox jumped over the lazy dog')))
    assert(!(algopy_lib_bytes::is_substring(item=reinterpret_cast<bytes>('red fox'), sequence=reinterpret_cast<bytes>('The quick brown fox jumped over the lazy dog'))))
    alpha: string = 'abcdefg'
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source=''))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=1, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=1, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source=''))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source='a'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=3, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=3, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source='a')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source='a'))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=4, source='ab'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=4, source='ab')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=4, source='ab'))))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='b'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=7, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=7, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='b')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='b')))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source=alpha))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=9, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=9, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source=alpha)))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source=alpha))))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=10, source=alpha + '!'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=11, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=11, source=alpha)), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=10, source=alpha + '!')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=10, source=alpha + '!')))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=12, source=''))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=13, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=13, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=13, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=12, source=''))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=12, source='')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=12, source=''))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=14, source='g'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=15, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=15, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=15, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=14, source='g'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=14, source='g')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=14, source='g'))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=16, source='fg'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=17, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=17, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=17, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=16, source='fg'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=16, source='fg')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=16, source='fg'))))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=18, source='f'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=19, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=19, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=19, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=18, source='f'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=18, source='f')))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=18, source='f')))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=20, source=alpha))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=21, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=21, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=21, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=20, source=alpha))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=20, source=alpha)))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=20, source=alpha))))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=22, source='!' + alpha))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=23, source=alpha)))) ? (false) : (extract3(reinterpret_cast<bytes>(SINGLE_EVAL(id=23, source=alpha)), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=23, source=alpha))) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=22, source='!' + alpha))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=22, source='!' + alpha)))) == reinterpret_cast<bytes>(SINGLE_EVAL(id=22, source='!' + alpha)))))
    (d, e, f): tuple<string,string,string> = ('d', 'e', 'f')
    assert(concat(concat(concat(concat(SINGLE_EVAL(id=24, source=(d, e, f))[0], SINGLE_EVAL(id=25, source='.')), SINGLE_EVAL(id=24, source=(d, e, f))[1]), SINGLE_EVAL(id=25, source='.')), SINGLE_EVAL(id=24, source=(d, e, f))[2]) == 'd.e.f')
    assert(concat(concat(concat(concat(SINGLE_EVAL(id=26, source=(d, e, f))[0], SINGLE_EVAL(id=27, source='')), SINGLE_EVAL(id=26, source=(d, e, f))[1]), SINGLE_EVAL(id=27, source='')), SINGLE_EVAL(id=26, source=(d, e, f))[2]) == 'def')
    assert(SINGLE_EVAL(id=28, source=(d))[0] == 'd')
    assert(SINGLE_EVAL(id=29, source=(d))[0] == 'd')
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}