contract StringContract
{
  approval_program(): bool
  {
    empty: string = ''
    assert(!(reinterpret_cast<bool>(len(empty))), comment="Empty bytes should be False")
    non_empty: string = ' '
    assert(reinterpret_cast<bool>(len(non_empty)), comment="Non-empty bytes should be True")
    assert('a' + 'b' == 'ab')
    assert('a' + 'b' == 'ab')
    assert('a' + 'b' == 'ab')
    assert(empty != non_empty)
    c: string = 'c'
    c += 'd'
    c += 'e'
    assert(c == 'cde')
    assert(algopy_lib_bytes::is_substring(item=reinterpret_cast<bytes>('brown fox'), sequence=reinterpret_cast<bytes>('The quick brown fox jumped over the lazy dog')))
    assert(!(algopy_lib_bytes::is_substring(item=reinterpret_cast<bytes>('red fox'), sequence=reinterpret_cast<bytes>('The quick brown fox jumped over the lazy dog'))))
    alpha: string = 'abcdefg'
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source=''))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='')))) == SINGLE_EVAL(id=0, source='')))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=1, source='a'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=1, source='a')))) == SINGLE_EVAL(id=1, source='a')))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source='ab'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source='ab')))) == SINGLE_EVAL(id=2, source='ab')))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=3, source='b'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=3, source='b')))) == SINGLE_EVAL(id=3, source='b'))))
    assert((len(reinterpret_cast<bytes>(alpha)) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(alpha))) == alpha))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=4, source=alpha + '!'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=4, source=alpha + '!')))) == SINGLE_EVAL(id=4, source=alpha + '!'))))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source=''))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source=''))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source='')))) == SINGLE_EVAL(id=5, source='')))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='g'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='g'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=6, source='g')))) == SINGLE_EVAL(id=6, source='g')))
    assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=7, source='fg'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=7, source='fg'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=7, source='fg')))) == SINGLE_EVAL(id=7, source='fg')))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source='f'))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source='f'))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=8, source='f')))) == SINGLE_EVAL(id=8, source='f'))))
    assert((len(reinterpret_cast<bytes>(alpha)) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(alpha)), len(reinterpret_cast<bytes>(alpha))) == alpha))
    assert(!((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=9, source='!' + alpha))) > len(reinterpret_cast<bytes>(alpha))) ? (false) : (extract3(alpha, len(reinterpret_cast<bytes>(alpha)) - len(reinterpret_cast<bytes>(SINGLE_EVAL(id=9, source='!' + alpha))), len(reinterpret_cast<bytes>(SINGLE_EVAL(id=9, source='!' + alpha)))) == SINGLE_EVAL(id=9, source='!' + alpha))))
    (d, e, f): tuple<string,string,string> = ('d', 'e', 'f')
    assert(concat(concat(concat(concat(d, SINGLE_EVAL(id=10, source='.')), e), SINGLE_EVAL(id=10, source='.')), f) == 'd.e.f')
    assert(concat(concat(concat(concat(d, SINGLE_EVAL(id=11, source='.')), 'e'), SINGLE_EVAL(id=11, source='.')), f) == 'd.e.f')
    assert(concat(concat(concat(concat('d', SINGLE_EVAL(id=12, source='.')), 'e'), SINGLE_EVAL(id=12, source='.')), 'f') == 'd.e.f')
    assert(concat(concat(concat(concat('d', SINGLE_EVAL(id=13, source='.')), 'e'), SINGLE_EVAL(id=13, source='.')), 'f') == 'd.e.f')
    assert(concat(concat(concat(concat(d, SINGLE_EVAL(id=14, source='')), e), SINGLE_EVAL(id=14, source='')), f) == 'def')
    assert(d == 'd')
    assert(d == 'd')
    assert((reinterpret_cast<bool>(txn<NumAppArgs>())) ? ('args') : ('no args') == 'no args', comment="constructor expressions supported")
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}