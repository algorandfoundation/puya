#pragma version 8

// test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
main:
        int 0
        dup
        byte ""
        dupn 8

main_block@0:
        byte base64 QmFzZSA2NCBlbmNvZGVk
        dup
        byte "Base 64 encoded"
        ==
        assert
        byte base32 IJQXGZJAGMZCAZLOMNXWIZLE
        byte "Base 32 encoded"
        ==
        assert
        byte 0x4261736520313620656e636f646564
        byte "Base 16 encoded"
        ==
        assert
        byte ""
        swap
        len
        assert // Non empty bytes should be Truthy
        len
        !
        assert // Empty bytes should be Falsy
        byte "a"
        byte "b"
        concat
        byte "ab"
        ==
        assert
        byte "c"
        byte "d"
        concat
        byte "cd"
        ==
        assert
        byte "abc"
        dup
        swap
        dup
        extract 0 1
        byte "a"
        ==
        assert
        len
        dup
        swap
        int 1
        >
        bz main_ternary_false@2

main_ternary_true@1:
        int 1
        b main_ternary_merge@3

main_ternary_false@2:
        dup

main_ternary_merge@3:
        dig 2
        dup
        len
        swap
        dup
        uncover 3
        uncover 3
        substring3
        byte "bc"
        ==
        assert
        len
        dup
        bury 12
        int 1
        >
        bz main_ternary_false@5

main_ternary_true@4:
        int 1
        bury 5
        b main_ternary_merge@6

main_ternary_false@5:
        dig 10
        bury 5

main_ternary_merge@6:
        dig 1
        len
        dup
        bury 12
        int 1
        >
        bz main_ternary_false@8

main_ternary_true@7:
        int 1
        b main_ternary_merge@9

main_ternary_false@8:
        dig 10

main_ternary_merge@9:
        dig 2
        dup
        dig 7
        uncover 3
        substring3
        byte ""
        ==
        assert
        len
        dup
        bury 11
        int 1
        >
        bz main_ternary_false@11

main_ternary_true@10:
        int 1
        b main_ternary_merge@12

main_ternary_false@11:
        dig 9

main_ternary_merge@12:
        dig 2
        dup
        int 0
        uncover 3
        substring3
        byte "a"
        ==
        assert
        len
        dup
        bury 10
        int 1
        >
        bz main_ternary_false@14

main_ternary_true@13:
        dig 8
        int 1
        -
        b main_ternary_merge@15

main_ternary_false@14:
        int 0

main_ternary_merge@15:
        dig 2
        dup
        int 0
        uncover 3
        substring3
        byte "ab"
        ==
        assert
        len
        dup
        bury 9
        int 2
        >
        bz main_ternary_false@17

main_ternary_true@16:
        dig 7
        int 2
        -
        b main_ternary_merge@18

main_ternary_false@17:
        int 0

main_ternary_merge@18:
        dig 2
        dup
        len
        swap
        dup
        uncover 3
        uncover 3
        substring3
        byte "bc"
        ==
        assert
        len
        dup
        bury 8
        int 2
        >
        bz main_ternary_false@20

main_ternary_true@19:
        dig 6
        int 2
        -
        bury 4
        b main_ternary_merge@21

main_ternary_false@20:
        int 0
        bury 4

main_ternary_merge@21:
        dig 1
        len
        dup
        bury 8
        int 1
        >
        bz main_ternary_false@23

main_ternary_true@22:
        dig 6
        int 1
        -
        b main_ternary_merge@24

main_ternary_false@23:
        int 0

main_ternary_merge@24:
        dig 2
        dup
        dig 6
        uncover 3
        substring3
        byte "b"
        ==
        assert
        byte "1234567"
        int 1
        int 6
        substring3
        byte "23456"
        ==
        assert
        len
        dup
        bury 7
        int 10
        >
        bz main_ternary_false@26

main_ternary_true@25:
        dig 5
        int 10
        -
        bury 3
        b main_ternary_merge@27

main_ternary_false@26:
        int 0
        bury 3

main_ternary_merge@27:
        dig 1
        len
        dup
        bury 7
        int 10
        >
        bz main_ternary_false@29

main_ternary_true@28:
        int 10
        b main_ternary_merge@30

main_ternary_false@29:
        dig 5

main_ternary_merge@30:
        dig 2
        dig 4
        uncover 2
        substring3
        byte "abc"
        ==
        assert
        byte "1"
        dup
        bury 13
        byte ""
        bury 14
        len
        bnz main_ternary_false@32

main_ternary_true@31:
        dig 11
        b main_ternary_merge@33

main_ternary_false@32:
        dig 11

main_ternary_merge@33:
        dig 12
        dup
        cover 2
        ==
        assert
        len
        bnz main_ternary_false@35

main_ternary_true@34:
        dig 11
        b main_ternary_merge@36

main_ternary_false@35:
        dig 11

main_ternary_merge@36:
        dig 12
        dup
        cover 2
        ==
        assert
        len
        bnz main_ternary_false@38

main_ternary_true@37:
        dig 11
        b main_ternary_merge@39

main_ternary_false@38:
        dig 12

main_ternary_merge@39:
        dig 13
        dup
        cover 2
        ==
        assert
        len
        bnz main_ternary_false@41

main_ternary_true@40:
        dig 12
        b main_ternary_merge@42

main_ternary_false@41:
        dig 11

main_ternary_merge@42:
        dig 13
        dup
        cover 2
        ==
        assert
        len
        bnz main_ternary_false@44

main_ternary_true@43:
        dig 12
        b main_ternary_merge@45

main_ternary_false@44:
        dig 12

main_ternary_merge@45:
        dig 13
        ==
        assert
        dig 11
        len
        bz main_ternary_false@47

main_ternary_true@46:
        dig 11
        b main_ternary_merge@48

main_ternary_false@47:
        dig 11

main_ternary_merge@48:
        dig 12
        dup
        cover 2
        ==
        assert
        len
        bz main_ternary_false@50

main_ternary_true@49:
        dig 11
        b main_ternary_merge@51

main_ternary_false@50:
        dig 12

main_ternary_merge@51:
        dig 12
        ==
        assert
        dig 12
        len
        bz main_ternary_false@53

main_ternary_true@52:
        dig 12
        b main_ternary_merge@54

main_ternary_false@53:
        dig 11

main_ternary_merge@54:
        dig 12
        ==
        assert
        dig 12
        len
        bz main_ternary_false@56

main_ternary_true@55:
        dig 12
        b main_ternary_merge@57

main_ternary_false@56:
        dig 12

main_ternary_merge@57:
        dig 13
        ==
        assert
        byte 0x00
        byte 0x0f
        byte 0xf0
        cover 2
        byte 0xff
        cover 3
        dig 1
        dig 1
        b&
        dig 2
        ==
        assert
        dup
        dig 3
        b|
        dig 4
        ==
        assert
        dup
        dig 4
        b^
        dig 3
        ==
        assert
        dig 1
        dig 4
        b&
        dup
        uncover 3
        ==
        assert
        dig 3
        b|
        dup
        uncover 4
        ==
        assert
        uncover 2
        b^
        ==
        assert
        int 1
        return

