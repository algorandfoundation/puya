contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let base_64#0: bytes = QmFzZSA2NCBlbmNvZGVk
                let tmp%0#0: bool = (== base_64#0 0x4261736520363420656e636f646564)
                (assert tmp%0#0)
                let base_32#0: bytes = IJQXGZJAGMZCAZLOMNXWIZLE
                let tmp%1#0: bool = (== base_32#0 0x4261736520333220656e636f646564)
                (assert tmp%1#0)
                let base_16#0: bytes = 0x4261736520313620656e636f646564
                let tmp%2#0: bool = (== base_16#0 0x4261736520313620656e636f646564)
                (assert tmp%2#0)
                let empty#0: bytes = 0x
                let reinterpret_bool%0#0: bool = (len base_64#0)
                (assert reinterpret_bool%0#0) // Non empty bytes should be Truthy
                let reinterpret_bool%1#0: bool = (len empty#0)
                let tmp%3#0: bool = (! reinterpret_bool%1#0)
                (assert tmp%3#0) // Empty bytes should be Falsy
                let tmp%4#0: bytes = (concat 0x61 0x62)
                let tmp%5#0: bool = (== tmp%4#0 0x6162)
                (assert tmp%5#0)
                let c#0: bytes = 0x63
                let c#1: bytes = (concat c#0 0x64)
                let tmp%6#0: bool = (== c#1 0x6364)
                (assert tmp%6#0)
                let abc#0: bytes = 0x616263
                let tmp%7#0: bytes = ((extract 0 1) abc#0)
                let tmp%8#0: bool = (== tmp%7#0 0x61)
                (assert tmp%8#0)
                let length%0#0: uint64 = (len abc#0)
                let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
                let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
                let tmp%9#0: bytes = (substring3 abc#0 bounded_index%0#0 length%0#0)
                let tmp%10#0: bool = (== tmp%9#0 0x6263)
                (assert tmp%10#0)
                let length%1#0: uint64 = (len abc#0)
                let is_out_of_bounds%1#0: bool = (>= 1u length%1#0)
                let bounded_index%1#0: uint64 = (select 1u length%1#0 is_out_of_bounds%1#0)
                let is_out_of_bounds%2#0: bool = (>= 1u length%1#0)
                let bounded_index%2#0: uint64 = (select 1u length%1#0 is_out_of_bounds%2#0)
                let tmp%11#0: bytes = (substring3 abc#0 bounded_index%1#0 bounded_index%2#0)
                let tmp%12#0: bool = (== tmp%11#0 0x)
                (assert tmp%12#0)
                let length%2#0: uint64 = (len abc#0)
                let is_out_of_bounds%3#0: bool = (>= 1u length%2#0)
                let bounded_index%3#0: uint64 = (select 1u length%2#0 is_out_of_bounds%3#0)
                let tmp%13#0: bytes = (substring3 abc#0 0u bounded_index%3#0)
                let tmp%14#0: bool = (== tmp%13#0 0x61)
                (assert tmp%14#0)
                let length%3#0: uint64 = (len abc#0)
                let is_out_of_bounds%4#0: bool = (>= 1u length%3#0)
                let bounded_offset%0#0: uint64 = (select 1u length%3#0 is_out_of_bounds%4#0)
                let bounded_index%4#0: uint64 = (- length%3#0 bounded_offset%0#0)
                let tmp%15#0: bytes = (substring3 abc#0 0u bounded_index%4#0)
                let tmp%16#0: bool = (== tmp%15#0 0x6162)
                (assert tmp%16#0)
                let length%4#0: uint64 = (len abc#0)
                let is_out_of_bounds%5#0: bool = (>= 2u length%4#0)
                let bounded_offset%1#0: uint64 = (select 2u length%4#0 is_out_of_bounds%5#0)
                let bounded_index%5#0: uint64 = (- length%4#0 bounded_offset%1#0)
                let tmp%17#0: bytes = (substring3 abc#0 bounded_index%5#0 length%4#0)
                let tmp%18#0: bool = (== tmp%17#0 0x6263)
                (assert tmp%18#0)
                let length%5#0: uint64 = (len abc#0)
                let is_out_of_bounds%6#0: bool = (>= 2u length%5#0)
                let bounded_offset%2#0: uint64 = (select 2u length%5#0 is_out_of_bounds%6#0)
                let bounded_index%6#0: uint64 = (- length%5#0 bounded_offset%2#0)
                let is_out_of_bounds%7#0: bool = (>= 1u length%5#0)
                let bounded_offset%3#0: uint64 = (select 1u length%5#0 is_out_of_bounds%7#0)
                let bounded_index%7#0: uint64 = (- length%5#0 bounded_offset%3#0)
                let tmp%19#0: bytes = (substring3 abc#0 bounded_index%6#0 bounded_index%7#0)
                let tmp%20#0: bool = (== tmp%19#0 0x62)
                (assert tmp%20#0)
                let length%6#0: uint64 = (len 0x31323334353637)
                let is_out_of_bounds%8#0: bool = (>= 1u length%6#0)
                let bounded_index%8#0: uint64 = (select 1u length%6#0 is_out_of_bounds%8#0)
                let is_out_of_bounds%9#0: bool = (>= 1u length%6#0)
                let bounded_offset%4#0: uint64 = (select 1u length%6#0 is_out_of_bounds%9#0)
                let bounded_index%9#0: uint64 = (- length%6#0 bounded_offset%4#0)
                let end_before_start%0#0: bool = (< bounded_index%9#0 bounded_index%8#0)
                let end%0#0: uint64 = (select bounded_index%9#0 bounded_index%8#0 end_before_start%0#0)
                let tmp%21#0: bytes = (substring3 0x31323334353637 bounded_index%8#0 end%0#0)
                let tmp%22#0: bool = (== tmp%21#0 0x3233343536)
                (assert tmp%22#0)
                let length%7#0: uint64 = (len abc#0)
                let is_out_of_bounds%10#0: bool = (>= 10u length%7#0)
                let bounded_offset%5#0: uint64 = (select 10u length%7#0 is_out_of_bounds%10#0)
                let bounded_index%10#0: uint64 = (- length%7#0 bounded_offset%5#0)
                let is_out_of_bounds%11#0: bool = (>= 10u length%7#0)
                let bounded_index%11#0: uint64 = (select 10u length%7#0 is_out_of_bounds%11#0)
                let end_before_start%1#0: bool = (< bounded_index%11#0 bounded_index%10#0)
                let end%1#0: uint64 = (select bounded_index%11#0 bounded_index%10#0 end_before_start%1#0)
                let tmp%23#0: bytes = (substring3 abc#0 bounded_index%10#0 end%1#0)
                let tmp%24#0: bool = (== tmp%23#0 0x616263)
                (assert tmp%24#0)
                let true#0: bytes = 0x31
                let false#0: bytes = 0x
                let reinterpret_bool%2#0: bool = (len true#0)
                goto reinterpret_bool%2#0 ? block@2 : block@1
            block@1: // ternary_true_L38
                let ternary_result%0#0: bytes = true#0
                goto block@3
            block@2: // ternary_false_L38
                let ternary_result%0#1: bytes = true#0
                goto block@3
            block@3: // ternary_merge_L38
                let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                let x#0: bool = (== ternary_result%0#2 true#0)
                (assert x#0)
                let reinterpret_bool%3#0: bool = (len true#0)
                goto reinterpret_bool%3#0 ? block@5 : block@4
            block@4: // ternary_true_L40
                let ternary_result%1#0: bytes = true#0
                goto block@6
            block@5: // ternary_false_L40
                let ternary_result%1#1: bytes = true#0
                goto block@6
            block@6: // ternary_merge_L40
                let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
                let tmp%25#0: bool = (== ternary_result%1#2 true#0)
                (assert tmp%25#0)
                let reinterpret_bool%4#0: bool = (len true#0)
                goto reinterpret_bool%4#0 ? block@8 : block@7
            block@7: // ternary_true_L41
                let ternary_result%2#0: bytes = true#0
                goto block@9
            block@8: // ternary_false_L41
                let ternary_result%2#1: bytes = false#0
                goto block@9
            block@9: // ternary_merge_L41
                let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                let tmp%26#0: bool = (== ternary_result%2#2 false#0)
                (assert tmp%26#0)
                let reinterpret_bool%5#0: bool = (len false#0)
                goto reinterpret_bool%5#0 ? block@11 : block@10
            block@10: // ternary_true_L42
                let ternary_result%3#0: bytes = false#0
                goto block@12
            block@11: // ternary_false_L42
                let ternary_result%3#1: bytes = true#0
                goto block@12
            block@12: // ternary_merge_L42
                let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11)
                let tmp%27#0: bool = (== ternary_result%3#2 false#0)
                (assert tmp%27#0)
                let reinterpret_bool%6#0: bool = (len false#0)
                goto reinterpret_bool%6#0 ? block@14 : block@13
            block@13: // ternary_true_L43
                let ternary_result%4#0: bytes = false#0
                goto block@15
            block@14: // ternary_false_L43
                let ternary_result%4#1: bytes = false#0
                goto block@15
            block@15: // ternary_merge_L43
                let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14)
                let tmp%28#0: bool = (== ternary_result%4#2 false#0)
                (assert tmp%28#0)
                let reinterpret_bool%7#0: bool = (len true#0)
                goto reinterpret_bool%7#0 ? block@16 : block@17
            block@16: // ternary_true_L44
                let ternary_result%5#0: bytes = true#0
                goto block@18
            block@17: // ternary_false_L44
                let ternary_result%5#1: bytes = true#0
                goto block@18
            block@18: // ternary_merge_L44
                let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17)
                let tmp%29#0: bool = (== ternary_result%5#2 true#0)
                (assert tmp%29#0)
                let reinterpret_bool%8#0: bool = (len true#0)
                goto reinterpret_bool%8#0 ? block@19 : block@20
            block@19: // ternary_true_L45
                let ternary_result%6#0: bytes = true#0
                goto block@21
            block@20: // ternary_false_L45
                let ternary_result%6#1: bytes = false#0
                goto block@21
            block@21: // ternary_merge_L45
                let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20)
                let tmp%30#0: bool = (== ternary_result%6#2 true#0)
                (assert tmp%30#0)
                let reinterpret_bool%9#0: bool = (len false#0)
                goto reinterpret_bool%9#0 ? block@22 : block@23
            block@22: // ternary_true_L46
                let ternary_result%7#0: bytes = false#0
                goto block@24
            block@23: // ternary_false_L46
                let ternary_result%7#1: bytes = true#0
                goto block@24
            block@24: // ternary_merge_L46
                let ternary_result%7#2: bytes = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23)
                let tmp%31#0: bool = (== ternary_result%7#2 true#0)
                (assert tmp%31#0)
                let reinterpret_bool%10#0: bool = (len false#0)
                goto reinterpret_bool%10#0 ? block@25 : block@26
            block@25: // ternary_true_L47
                let ternary_result%8#0: bytes = false#0
                goto block@27
            block@26: // ternary_false_L47
                let ternary_result%8#1: bytes = false#0
                goto block@27
            block@27: // ternary_merge_L47
                let ternary_result%8#2: bytes = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26)
                let tmp%32#0: bool = (== ternary_result%8#2 false#0)
                (assert tmp%32#0)
                let a#0: bytes = 0x00
                let b#0: bytes = 0x0f
                let c#2: bytes = 0xf0
                let d#0: bytes = 0xff
                let tmp%33#0: bytes = (b& a#0 b#0)
                let tmp%34#0: bool = (== tmp%33#0 a#0)
                (assert tmp%34#0)
                let tmp%35#0: bytes = (b| b#0 c#2)
                let tmp%36#0: bool = (== tmp%35#0 d#0)
                (assert tmp%36#0)
                let tmp%37#0: bytes = (b^ b#0 d#0)
                let tmp%38#0: bool = (== tmp%37#0 c#2)
                (assert tmp%38#0)
                let y#0: bytes = a#0
                let y#1: bytes = (b& y#0 d#0)
                let tmp%39#0: bool = (== y#1 a#0)
                (assert tmp%39#0)
                let y#2: bytes = (b| y#1 d#0)
                let tmp%40#0: bool = (== y#2 d#0)
                (assert tmp%40#0)
                let y#3: bytes = (b^ y#2 c#2)
                let tmp%41#0: bool = (== y#3 b#0)
                (assert tmp%41#0)
                test_cases.stubs.bytes.check_slicing_with_uint64(abc#0)
                test_cases.stubs.bytes.check_end_before_start_slicing(abc#0)
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L77
                let one#0: uint64 = 1u
                let ten#0: uint64 = 10u
                let length%0#0: uint64 = (len abc#0)
                let is_out_of_bounds%0#0: bool = (>= one#0 length%0#0)
                let bounded_index%0#0: uint64 = (select one#0 length%0#0 is_out_of_bounds%0#0)
                let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 length%0#0)
                let tmp%1#0: bool = (== tmp%0#0 0x6263)
                (assert tmp%1#0)
                let length%1#0: uint64 = (len abc#0)
                let is_out_of_bounds%1#0: bool = (>= one#0 length%1#0)
                let bounded_index%1#0: uint64 = (select one#0 length%1#0 is_out_of_bounds%1#0)
                let is_out_of_bounds%2#0: bool = (>= one#0 length%1#0)
                let bounded_index%2#0: uint64 = (select one#0 length%1#0 is_out_of_bounds%2#0)
                let end_before_start%0#0: bool = (< bounded_index%2#0 bounded_index%1#0)
                let end%0#0: uint64 = (select bounded_index%2#0 bounded_index%1#0 end_before_start%0#0)
                let tmp%2#0: bytes = (substring3 abc#0 bounded_index%1#0 end%0#0)
                let tmp%3#0: bool = (== tmp%2#0 0x)
                (assert tmp%3#0)
                let length%2#0: uint64 = (len abc#0)
                let is_out_of_bounds%3#0: bool = (>= one#0 length%2#0)
                let bounded_index%3#0: uint64 = (select one#0 length%2#0 is_out_of_bounds%3#0)
                let tmp%4#0: bytes = (substring3 abc#0 0u bounded_index%3#0)
                let tmp%5#0: bool = (== tmp%4#0 0x61)
                (assert tmp%5#0)
                let tmp%6#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let length%3#0: uint64 = (len tmp%6#0)
                let is_out_of_bounds%4#0: bool = (>= one#0 length%3#0)
                let bounded_index%4#0: uint64 = (select one#0 length%3#0 is_out_of_bounds%4#0)
                let is_out_of_bounds%5#0: bool = (>= 1u length%3#0)
                let bounded_offset%0#0: uint64 = (select 1u length%3#0 is_out_of_bounds%5#0)
                let bounded_index%5#0: uint64 = (- length%3#0 bounded_offset%0#0)
                let end_before_start%1#0: bool = (< bounded_index%5#0 bounded_index%4#0)
                let end%1#0: uint64 = (select bounded_index%5#0 bounded_index%4#0 end_before_start%1#0)
                let tmp%7#0: bytes = (substring3 tmp%6#0 bounded_index%4#0 end%1#0)
                let tmp%8#0: bool = (== tmp%7#0 0x3233343536)
                (assert tmp%8#0)
                let length%4#0: uint64 = (len abc#0)
                let is_out_of_bounds%6#0: bool = (>= 0u length%4#0)
                let bounded_index%6#0: uint64 = (select 0u length%4#0 is_out_of_bounds%6#0)
                let is_out_of_bounds%7#0: bool = (>= ten#0 length%4#0)
                let bounded_index%7#0: uint64 = (select ten#0 length%4#0 is_out_of_bounds%7#0)
                let tmp%9#0: bytes = (substring3 abc#0 bounded_index%6#0 bounded_index%7#0)
                let tmp%10#0: bool = (== tmp%9#0 0x616263)
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L97
                (log "one_to_seven called")
                return 0x31323334353637
        
        subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
            block@0: // L88
                let length%0#0: uint64 = (len abc#0)
                let is_out_of_bounds%0#0: bool = (>= 10u length%0#0)
                let bounded_index%0#0: uint64 = (select 10u length%0#0 is_out_of_bounds%0#0)
                let is_out_of_bounds%1#0: bool = (>= 1u length%0#0)
                let bounded_index%1#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0)
                let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
                let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
                let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 end%0#0)
                let tmp%1#0: bool = (== tmp%0#0 0x)
                (assert tmp%1#0)
                let length%1#0: uint64 = (len abc#0)
                let is_out_of_bounds%2#0: bool = (>= 10u length%1#0)
                let bounded_offset%0#0: uint64 = (select 10u length%1#0 is_out_of_bounds%2#0)
                let bounded_index%2#0: uint64 = (- length%1#0 bounded_offset%0#0)
                let is_out_of_bounds%3#0: bool = (>= 12u length%1#0)
                let bounded_offset%1#0: uint64 = (select 12u length%1#0 is_out_of_bounds%3#0)
                let bounded_index%3#0: uint64 = (- length%1#0 bounded_offset%1#0)
                let end_before_start%1#0: bool = (< bounded_index%3#0 bounded_index%2#0)
                let end%1#0: uint64 = (select bounded_index%3#0 bounded_index%2#0 end_before_start%1#0)
                let tmp%2#0: bytes = (substring3 abc#0 bounded_index%2#0 end%1#0)
                let tmp%3#0: bool = (== tmp%2#0 0x)
                (assert tmp%3#0)
                let one#0: uint64 = 1u
                let ten#0: uint64 = 10u
                let length%2#0: uint64 = (len abc#0)
                let is_out_of_bounds%4#0: bool = (>= ten#0 length%2#0)
                let bounded_index%4#0: uint64 = (select ten#0 length%2#0 is_out_of_bounds%4#0)
                let is_out_of_bounds%5#0: bool = (>= one#0 length%2#0)
                let bounded_index%5#0: uint64 = (select one#0 length%2#0 is_out_of_bounds%5#0)
                let end_before_start%2#0: bool = (< bounded_index%5#0 bounded_index%4#0)
                let end%2#0: uint64 = (select bounded_index%5#0 bounded_index%4#0 end_before_start%2#0)
                let tmp%4#0: bytes = (substring3 abc#0 bounded_index%4#0 end%2#0)
                let tmp%5#0: bool = (== tmp%4#0 0x)
                (assert tmp%5#0)
                return 
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> bool:
            block@0: // L73
                return 1u