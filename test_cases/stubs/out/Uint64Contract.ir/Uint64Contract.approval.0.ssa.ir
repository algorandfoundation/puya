main test_cases.stubs.uint64.Uint64Contract.approval_program:
    block@0: // L5
        let zero#0: uint64 = 0u
        let one#0: uint64 = 1u
        let two#0: uint64 = 2u
        let five#0: uint64 = 5u
        let three#0: uint64 = 3u
        let sixty#0: uint64 = 60u
        let tmp%0#0: bool = (!= one#0 0u)
        (assert tmp%0#0) // Any non-zero number should be Truthy
        let tmp%1#0: bool = (== zero#0 0u)
        (assert tmp%1#0) // Zero should beFalsy
        let tmp%2#0: bool = (< one#0 five#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (> five#0 one#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (<= one#0 one#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (>= five#0 five#0)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (+ one#0 five#0)
        let tmp%7#0: bool = (== tmp%6#0 6u)
        (assert tmp%7#0)
        let c#0: uint64 = five#0
        let tmp%8#0: uint64 = (+ c#0 sixty#0)
        let c#1: uint64 = tmp%8#0
        let tmp%9#0: bool = (== c#1 65u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (- sixty#0 five#0)
        let tmp%11#0: bool = (== tmp%10#0 55u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (- c#1 five#0)
        let c#2: uint64 = tmp%12#0
        let tmp%13#0: bool = (== c#2 60u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (/ sixty#0 five#0)
        let tmp%15#0: bool = (== tmp%14#0 12u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (/ c#2 five#0)
        let c#3: uint64 = tmp%16#0
        let tmp%17#0: bool = (== c#3 12u)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = (* five#0 sixty#0)
        let tmp%19#0: bool = (== tmp%18#0 300u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = (exp five#0 three#0)
        let tmp%21#0: bool = (== tmp%20#0 125u)
        (assert tmp%21#0)
        let tmp%22#0: uint64 = (exp c#3 2u)
        let c#4: uint64 = tmp%22#0
        let tmp%23#0: bool = (== c#4 144u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (shl one#0 two#0)
        let tmp%25#0: bool = (== tmp%24#0 4u)
        (assert tmp%25#0)
        let tmp%26#0: uint64 = (shr c#4 6u)
        let c#5: uint64 = tmp%26#0
        let tmp%27#0: bool = (== c#5 2u)
        (assert tmp%27#0)
        let tmp%28#0: uint64 = (shl c#5 6u)
        let c#6: uint64 = tmp%28#0
        let tmp%29#0: bool = (== c#6 128u)
        (assert tmp%29#0)
        let tmp%30#0: uint64 = (shr five#0 three#0)
        let tmp%31#0: bool = (== tmp%30#0 0u)
        (assert tmp%31#0)
        let tmp%32#0: uint64 = (~ one#0)
        let tmp%33#0: bool = (== tmp%32#0 18446744073709551614u)
        (assert tmp%33#0)
        let true#0: uint64 = 1u
        let false#0: uint64 = 0u
        let tmp%34#0: bool = (== true#0 0u)
        let select%0#0: uint64 = (select true#0 true#0 tmp%34#0)
        let tmp%35#0: bool = (== select%0#0 true#0)
        (assert tmp%35#0)
        let tmp%36#0: bool = (== true#0 0u)
        let select%1#0: uint64 = (select false#0 true#0 tmp%36#0)
        let tmp%37#0: bool = (== select%1#0 false#0)
        (assert tmp%37#0)
        let tmp%38#0: bool = (== false#0 0u)
        let select%2#0: uint64 = (select true#0 false#0 tmp%38#0)
        let tmp%39#0: bool = (== select%2#0 false#0)
        (assert tmp%39#0)
        let tmp%40#0: bool = (== false#0 0u)
        let select%3#0: uint64 = (select false#0 false#0 tmp%40#0)
        let tmp%41#0: bool = (== select%3#0 false#0)
        (assert tmp%41#0)
        let tmp%42#0: bool = (!= true#0 0u)
        let select%4#0: uint64 = (select true#0 true#0 tmp%42#0)
        let tmp%43#0: bool = (== select%4#0 true#0)
        (assert tmp%43#0)
        let tmp%44#0: bool = (!= true#0 0u)
        let select%5#0: uint64 = (select false#0 true#0 tmp%44#0)
        let tmp%45#0: bool = (== select%5#0 true#0)
        (assert tmp%45#0)
        let tmp%46#0: bool = (!= false#0 0u)
        let select%6#0: uint64 = (select true#0 false#0 tmp%46#0)
        let tmp%47#0: bool = (== select%6#0 true#0)
        (assert tmp%47#0)
        let tmp%48#0: bool = (!= false#0 0u)
        let select%7#0: uint64 = (select false#0 false#0 tmp%48#0)
        let tmp%49#0: bool = (== select%7#0 false#0)
        (assert tmp%49#0)
        let tmp%50#0: uint64 = (& one#0 five#0)
        let tmp%51#0: bool = (== tmp%50#0 one#0)
        (assert tmp%51#0)
        let tmp%52#0: uint64 = (| sixty#0 five#0)
        let tmp%53#0: bool = (== tmp%52#0 61u)
        (assert tmp%53#0)
        let tmp%54#0: uint64 = (^ sixty#0 five#0)
        let tmp%55#0: bool = (== tmp%54#0 57u)
        (assert tmp%55#0)
        let y#0: uint64 = 254u
        let tmp%56#0: uint64 = (& y#0 31u)
        let y#1: uint64 = tmp%56#0
        let tmp%57#0: bool = (== y#1 30u)
        (assert tmp%57#0)
        let tmp%58#0: uint64 = (| y#1 54u)
        let y#2: uint64 = tmp%58#0
        let tmp%59#0: bool = (== y#2 62u)
        (assert tmp%59#0)
        let tmp%60#0: uint64 = (^ y#2 255u)
        let y#3: uint64 = tmp%60#0
        let tmp%61#0: bool = (== y#3 193u)
        (assert tmp%61#0)
        let tmp%62#0: uint64 = (sqrt 17u)
        let tmp%63#0: uint64 = (sqrt 16u)
        let tmp%64#0: bool = (== tmp%62#0 tmp%63#0)
        (assert tmp%64#0)
        let tmp%65#0: bool = (== one#0 one#0)
        (assert tmp%65#0)
        let tmp%66#0: uint64 = (txn NumAppArgs)
        let tmp%67#0: bool = (!= tmp%66#0 0u)
        let select%8#0: uint64 = (select 5u 1u tmp%67#0)
        let tmp%68#0: bool = (== select%8#0 5u)
        (assert tmp%68#0) // constructor expressions supported
        return 1u