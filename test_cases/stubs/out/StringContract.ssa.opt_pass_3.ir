contract test_cases.stubs.string.StringContract:
    program approval:
        subroutine test_cases.stubs.string.StringContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%10#0: uint64 = 1u
                (assert tmp%10#0)
                let tmp%11#0: uint64 = algopy_lib_bytes.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
                (assert tmp%11#0)
                let tmp%12#0: uint64 = algopy_lib_bytes.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0)
                let ternary_result%0#1: uint64 = 1u
                goto block@3
            block@3: // ternary_merge_L26
                (assert ternary_result%0#1)
                let ternary_result%1#1: uint64 = 1u
                goto block@6
            block@6: // ternary_merge_L27
                (assert ternary_result%1#1)
                let ternary_result%2#1: uint64 = 1u
                goto block@9
            block@9: // ternary_merge_L28
                (assert ternary_result%2#1)
                let ternary_result%3#1: uint64 = 0u
                goto block@12
            block@12: // ternary_merge_L29
                let tmp%34#0: uint64 = (! ternary_result%3#1)
                (assert tmp%34#0)
                let ternary_result%4#1: uint64 = 1u
                goto block@15
            block@15: // ternary_merge_L30
                (assert ternary_result%4#1)
                let tmp%42#0: uint64 = 1u
                goto tmp%42#0 ? block@16 : block@17
            block@16: // ternary_true_L31
                let ternary_result%5#0: uint64 = 0u
                goto block@18
            block@17: // ternary_false_L31
                let tmp%44#0: bytes = "abcdefg"
                let ternary_result%5#1: uint64 = (== tmp%44#0 "abcdefg!")
                goto block@18
            block@18: // ternary_merge_L31
                let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17)
                let tmp%45#0: uint64 = (! ternary_result%5#2)
                (assert tmp%45#0)
                let tmp%53#0: bytes = ""
                let ternary_result%6#1: uint64 = (== tmp%53#0 "")
                goto block@21
            block@21: // ternary_merge_L33
                (assert ternary_result%6#1)
                let tmp%61#0: bytes = "g"
                let ternary_result%7#1: uint64 = (== tmp%61#0 "g")
                goto block@24
            block@24: // ternary_merge_L34
                (assert ternary_result%7#1)
                let tmp%69#0: bytes = "fg"
                let ternary_result%8#1: uint64 = (== tmp%69#0 "fg")
                goto block@27
            block@27: // ternary_merge_L35
                (assert ternary_result%8#1)
                let tmp%77#0: bytes = "g"
                let ternary_result%9#1: uint64 = (== tmp%77#0 "f")
                goto block@30
            block@30: // ternary_merge_L36
                let tmp%78#0: uint64 = (! ternary_result%9#1)
                (assert tmp%78#0)
                let tmp%86#0: bytes = "abcdefg"
                let ternary_result%10#1: uint64 = (== tmp%86#0 "abcdefg")
                goto block@33
            block@33: // ternary_merge_L37
                (assert ternary_result%10#1)
                let tmp%89#0: uint64 = 1u
                goto tmp%89#0 ? block@34 : block@35
            block@34: // ternary_true_L38
                let ternary_result%11#0: uint64 = 0u
                goto block@36
            block@35: // ternary_false_L38
                let tmp%92#0: uint64 = (- 7u 8u)
                let tmp%94#0: bytes = (extract3 "abcdefg" tmp%92#0 8u)
                let ternary_result%11#1: uint64 = (== tmp%94#0 "!abcdefg")
                goto block@36
            block@36: // ternary_merge_L38
                let ternary_result%11#2: uint64 = φ(ternary_result%11#0 <- block@34, ternary_result%11#1 <- block@35)
                let tmp%95#0: uint64 = (! ternary_result%11#2)
                (assert tmp%95#0)
                let tmp%98#0: bytes = "d.e."
                let tmp%99#0: bytes = (concat tmp%98#0 "f")
                let tmp%100#0: uint64 = (== tmp%99#0 "d.e.f")
                (assert tmp%100#0)
                let tmp%104#0: bytes = "def"
                let tmp%105#0: uint64 = (== tmp%104#0 "def")
                (assert tmp%105#0)
                return 1u
        
        subroutine algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: uint64 = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L11
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
                let tmp%7#0: uint64 = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L12
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.stubs.string.StringContract.clear_state_program() -> uint64:
            block@0: // L48
                return 1u