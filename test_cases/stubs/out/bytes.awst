contract BytesContract
{
  approval_program(): algopy.UInt64
  {
    base_64: algopy.Bytes = b64<"QmFzZSA2NCBlbmNvZGVk">
    assert(base_64 == 'Base 64 encoded')
    base_32: algopy.Bytes = b32<"IJQXGZJAGMZCAZLOMNXWIZLE">
    assert(base_32 == 'Base 32 encoded')
    base_16: algopy.Bytes = hex<"4261736520313620656E636F646564">
    assert(base_16 == 'Base 16 encoded')
    empty: algopy.Bytes = ''
    assert(reinterpret_cast<bool>(len(base_64)), comment="Non empty bytes should be Truthy")
    assert(!(reinterpret_cast<bool>(len(empty))), comment="Empty bytes should be Falsy")
    assert('a' + 'b' == 'ab')
    c: algopy.Bytes = 'c'
    c += 'd'
    assert(c == 'cd')
    abc: algopy.Bytes = 'abc'
    assert(abc[0u] == 'a')
    assert(SINGLE_EVAL(id=0, source=abc)[select(len(SINGLE_EVAL(id=0, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=0, source=abc))):] == 'bc')
    assert(SINGLE_EVAL(id=1, source=abc)[select(len(SINGLE_EVAL(id=1, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=1, source=abc))):select(select(len(SINGLE_EVAL(id=1, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=1, source=abc))), select(len(SINGLE_EVAL(id=1, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=1, source=abc))), select(len(SINGLE_EVAL(id=1, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=1, source=abc))) > select(len(SINGLE_EVAL(id=1, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=1, source=abc))))] == '')
    assert(SINGLE_EVAL(id=2, source=abc)[:select(len(SINGLE_EVAL(id=2, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=2, source=abc)))] == 'a')
    assert(SINGLE_EVAL(id=3, source=abc)[:len(SINGLE_EVAL(id=3, source=abc)) - select(len(SINGLE_EVAL(id=3, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=3, source=abc)))] == 'ab')
    assert(SINGLE_EVAL(id=4, source=abc)[len(SINGLE_EVAL(id=4, source=abc)) - select(len(SINGLE_EVAL(id=4, source=abc)), 2u, 2u < len(SINGLE_EVAL(id=4, source=abc))):] == 'bc')
    assert(SINGLE_EVAL(id=5, source=abc)[len(SINGLE_EVAL(id=5, source=abc)) - select(len(SINGLE_EVAL(id=5, source=abc)), 2u, 2u < len(SINGLE_EVAL(id=5, source=abc))):select(len(SINGLE_EVAL(id=5, source=abc)) - select(len(SINGLE_EVAL(id=5, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=5, source=abc))), len(SINGLE_EVAL(id=5, source=abc)) - select(len(SINGLE_EVAL(id=5, source=abc)), 2u, 2u < len(SINGLE_EVAL(id=5, source=abc))), len(SINGLE_EVAL(id=5, source=abc)) - select(len(SINGLE_EVAL(id=5, source=abc)), 2u, 2u < len(SINGLE_EVAL(id=5, source=abc))) > len(SINGLE_EVAL(id=5, source=abc)) - select(len(SINGLE_EVAL(id=5, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=5, source=abc))))] == 'b')
    assert(SINGLE_EVAL(id=6, source='1234567')[select(len(SINGLE_EVAL(id=6, source='1234567')), 1u, 1u < len(SINGLE_EVAL(id=6, source='1234567'))):select(len(SINGLE_EVAL(id=6, source='1234567')) - select(len(SINGLE_EVAL(id=6, source='1234567')), 1u, 1u < len(SINGLE_EVAL(id=6, source='1234567'))), select(len(SINGLE_EVAL(id=6, source='1234567')), 1u, 1u < len(SINGLE_EVAL(id=6, source='1234567'))), select(len(SINGLE_EVAL(id=6, source='1234567')), 1u, 1u < len(SINGLE_EVAL(id=6, source='1234567'))) > len(SINGLE_EVAL(id=6, source='1234567')) - select(len(SINGLE_EVAL(id=6, source='1234567')), 1u, 1u < len(SINGLE_EVAL(id=6, source='1234567'))))] == '23456')
    assert(SINGLE_EVAL(id=7, source=abc)[len(SINGLE_EVAL(id=7, source=abc)) - select(len(SINGLE_EVAL(id=7, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=7, source=abc))):select(select(len(SINGLE_EVAL(id=7, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=7, source=abc))), len(SINGLE_EVAL(id=7, source=abc)) - select(len(SINGLE_EVAL(id=7, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=7, source=abc))), len(SINGLE_EVAL(id=7, source=abc)) - select(len(SINGLE_EVAL(id=7, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=7, source=abc))) > select(len(SINGLE_EVAL(id=7, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=7, source=abc))))] == 'abc')
    true: algopy.Bytes = '1'
    false: algopy.Bytes = ''
    x: bool = (!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true
    assert(x)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (false) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (true) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (false) == false)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (true) == true)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (false) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (true) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (false) == false)
    (a, b, c, d): tuple[algopy.Bytes, algopy.Bytes, algopy.Bytes, algopy.Bytes] = (hex<"00">, hex<"0F">, hex<"F0">, hex<"FF">)
    assert(a & b == a)
    assert(b | c == d)
    assert(b ^ d == c)
    y: algopy.Bytes = a
    y &= d
    assert(y == a)
    y |= d
    assert(y == d)
    y ^= c
    assert(y == b)
    test_cases.stubs.bytes::check_slicing_with_uint64(abc)
    test_cases.stubs.bytes::check_end_before_start_slicing(abc)
    return 1u
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine check_slicing_with_uint64(abc: algopy.Bytes): None
{
  one: algopy.UInt64 = 1u
  ten: algopy.UInt64 = 10u
  assert(SINGLE_EVAL(id=8, source=abc)[select(len(SINGLE_EVAL(id=8, source=abc)), SINGLE_EVAL(id=9, source=one), SINGLE_EVAL(id=9, source=one) < len(SINGLE_EVAL(id=8, source=abc))):] == 'bc')
  assert(SINGLE_EVAL(id=10, source=abc)[select(len(SINGLE_EVAL(id=10, source=abc)), SINGLE_EVAL(id=11, source=one), SINGLE_EVAL(id=11, source=one) < len(SINGLE_EVAL(id=10, source=abc))):select(select(len(SINGLE_EVAL(id=10, source=abc)), SINGLE_EVAL(id=12, source=one), SINGLE_EVAL(id=12, source=one) < len(SINGLE_EVAL(id=10, source=abc))), select(len(SINGLE_EVAL(id=10, source=abc)), SINGLE_EVAL(id=11, source=one), SINGLE_EVAL(id=11, source=one) < len(SINGLE_EVAL(id=10, source=abc))), select(len(SINGLE_EVAL(id=10, source=abc)), SINGLE_EVAL(id=11, source=one), SINGLE_EVAL(id=11, source=one) < len(SINGLE_EVAL(id=10, source=abc))) > select(len(SINGLE_EVAL(id=10, source=abc)), SINGLE_EVAL(id=12, source=one), SINGLE_EVAL(id=12, source=one) < len(SINGLE_EVAL(id=10, source=abc))))] == '')
  assert(SINGLE_EVAL(id=13, source=abc)[:select(len(SINGLE_EVAL(id=13, source=abc)), SINGLE_EVAL(id=14, source=one), SINGLE_EVAL(id=14, source=one) < len(SINGLE_EVAL(id=13, source=abc)))] == 'a')
  assert(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())[select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())), SINGLE_EVAL(id=16, source=one), SINGLE_EVAL(id=16, source=one) < len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven()))):select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())) - select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())), 1u, 1u < len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven()))), select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())), SINGLE_EVAL(id=16, source=one), SINGLE_EVAL(id=16, source=one) < len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven()))), select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())), SINGLE_EVAL(id=16, source=one), SINGLE_EVAL(id=16, source=one) < len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven()))) > len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())) - select(len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven())), 1u, 1u < len(SINGLE_EVAL(id=15, source=test_cases.stubs.bytes::one_to_seven()))))] == '23456')
  assert(SINGLE_EVAL(id=17, source=abc)[select(len(SINGLE_EVAL(id=17, source=abc)), SINGLE_EVAL(id=18, source=0u), SINGLE_EVAL(id=18, source=0u) < len(SINGLE_EVAL(id=17, source=abc))):select(select(len(SINGLE_EVAL(id=17, source=abc)), SINGLE_EVAL(id=19, source=ten), SINGLE_EVAL(id=19, source=ten) < len(SINGLE_EVAL(id=17, source=abc))), select(len(SINGLE_EVAL(id=17, source=abc)), SINGLE_EVAL(id=18, source=0u), SINGLE_EVAL(id=18, source=0u) < len(SINGLE_EVAL(id=17, source=abc))), select(len(SINGLE_EVAL(id=17, source=abc)), SINGLE_EVAL(id=18, source=0u), SINGLE_EVAL(id=18, source=0u) < len(SINGLE_EVAL(id=17, source=abc))) > select(len(SINGLE_EVAL(id=17, source=abc)), SINGLE_EVAL(id=19, source=ten), SINGLE_EVAL(id=19, source=ten) < len(SINGLE_EVAL(id=17, source=abc))))] == 'abc')
}

subroutine check_end_before_start_slicing(abc: algopy.Bytes): None
{
  assert(SINGLE_EVAL(id=20, source=abc)[select(len(SINGLE_EVAL(id=20, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=20, source=abc))):select(select(len(SINGLE_EVAL(id=20, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=20, source=abc))), select(len(SINGLE_EVAL(id=20, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=20, source=abc))), select(len(SINGLE_EVAL(id=20, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=20, source=abc))) > select(len(SINGLE_EVAL(id=20, source=abc)), 1u, 1u < len(SINGLE_EVAL(id=20, source=abc))))] == '')
  assert(SINGLE_EVAL(id=21, source=abc)[len(SINGLE_EVAL(id=21, source=abc)) - select(len(SINGLE_EVAL(id=21, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=21, source=abc))):select(len(SINGLE_EVAL(id=21, source=abc)) - select(len(SINGLE_EVAL(id=21, source=abc)), 12u, 12u < len(SINGLE_EVAL(id=21, source=abc))), len(SINGLE_EVAL(id=21, source=abc)) - select(len(SINGLE_EVAL(id=21, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=21, source=abc))), len(SINGLE_EVAL(id=21, source=abc)) - select(len(SINGLE_EVAL(id=21, source=abc)), 10u, 10u < len(SINGLE_EVAL(id=21, source=abc))) > len(SINGLE_EVAL(id=21, source=abc)) - select(len(SINGLE_EVAL(id=21, source=abc)), 12u, 12u < len(SINGLE_EVAL(id=21, source=abc))))] == '')
  one: algopy.UInt64 = 1u
  ten: algopy.UInt64 = 10u
  assert(SINGLE_EVAL(id=22, source=abc)[select(len(SINGLE_EVAL(id=22, source=abc)), SINGLE_EVAL(id=23, source=ten), SINGLE_EVAL(id=23, source=ten) < len(SINGLE_EVAL(id=22, source=abc))):select(select(len(SINGLE_EVAL(id=22, source=abc)), SINGLE_EVAL(id=24, source=one), SINGLE_EVAL(id=24, source=one) < len(SINGLE_EVAL(id=22, source=abc))), select(len(SINGLE_EVAL(id=22, source=abc)), SINGLE_EVAL(id=23, source=ten), SINGLE_EVAL(id=23, source=ten) < len(SINGLE_EVAL(id=22, source=abc))), select(len(SINGLE_EVAL(id=22, source=abc)), SINGLE_EVAL(id=23, source=ten), SINGLE_EVAL(id=23, source=ten) < len(SINGLE_EVAL(id=22, source=abc))) > select(len(SINGLE_EVAL(id=22, source=abc)), SINGLE_EVAL(id=24, source=one), SINGLE_EVAL(id=24, source=one) < len(SINGLE_EVAL(id=22, source=abc))))] == '')
}

subroutine one_to_seven(): algopy.Bytes
{
  log('one_to_seven called')
  return '1234567'
}