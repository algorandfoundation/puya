contract BytesContract
{
  approval_program(): puyapy.UInt64
  {
    base_64: puyapy.Bytes = b64<"QmFzZSA2NCBlbmNvZGVk">
    assert(base_64 == 'Base 64 encoded')
    base_32: puyapy.Bytes = b32<"IJQXGZJAGMZCAZLOMNXWIZLE">
    assert(base_32 == 'Base 32 encoded')
    base_16: puyapy.Bytes = hex<"4261736520313620656E636F646564">
    assert(base_16 == 'Base 16 encoded')
    empty: puyapy.Bytes = ''
    assert(reinterpret_cast<bool>(len(base_64)), comment="Non empty bytes should be Truthy")
    assert(!(reinterpret_cast<bool>(len(empty))), comment="Empty bytes should be Falsy")
    assert('a' + 'b' == 'ab')
    c: puyapy.Bytes = 'c'
    c += 'd'
    assert(c == 'cd')
    abc: puyapy.Bytes = 'abc'
    assert(abc[0u] == 'a')
    assert(abc[(1u < tmp$0: puyapy.UInt64 := len(abc)) ? (1u) : (tmp$0):] == 'bc')
    assert(abc[(1u < tmp$1: puyapy.UInt64 := len(abc)) ? (1u) : (tmp$1):(1u < tmp$1: puyapy.UInt64 := len(abc)) ? (1u) : (tmp$1)] == '')
    assert(abc[:(1u < tmp$2: puyapy.UInt64 := len(abc)) ? (1u) : (tmp$2)] == 'a')
    assert(abc[:(1u < tmp$3: puyapy.UInt64 := len(abc)) ? (tmp$3 - 1u) : (0u)] == 'ab')
    assert(abc[(2u < tmp$4: puyapy.UInt64 := len(abc)) ? (tmp$4 - 2u) : (0u):] == 'bc')
    assert(abc[(2u < tmp$5: puyapy.UInt64 := len(abc)) ? (tmp$5 - 2u) : (0u):(1u < tmp$5: puyapy.UInt64 := len(abc)) ? (tmp$5 - 1u) : (0u)] == 'b')
    assert('1234567'[1u:6u] == '23456')
    assert(abc[(10u < tmp$6: puyapy.UInt64 := len(abc)) ? (tmp$6 - 10u) : (0u):(10u < tmp$6: puyapy.UInt64 := len(abc)) ? (10u) : (tmp$6)] == 'abc')
    true: puyapy.Bytes = '1'
    false: puyapy.Bytes = ''
    x: bool = (!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true
    assert(x)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (false) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (true) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (false) == false)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (true) == true)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (false) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (true) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (false) == false)
    (a, b, c, d): tuple[puyapy.Bytes, puyapy.Bytes, puyapy.Bytes, puyapy.Bytes] = (hex<"00">, hex<"0F">, hex<"F0">, hex<"FF">)
    assert(a & b == a)
    assert(b | c == d)
    assert(b ^ d == c)
    y: puyapy.Bytes = a
    y &= d
    assert(y == a)
    y |= d
    assert(y == d)
    y ^= c
    assert(y == b)
    return 1u
  }
  
  clear_state_program(): bool
  {
    return true
  }
}