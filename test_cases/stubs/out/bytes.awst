contract BytesContract
{
  approval_program(): uint64
  {
    base_64: bytes = b64<"QmFzZSA2NCBlbmNvZGVk">
    assert(base_64 == 'Base 64 encoded')
    base_32: bytes = b32<"IJQXGZJAGMZCAZLOMNXWIZLE">
    assert(base_32 == 'Base 32 encoded')
    base_16: bytes = hex<"4261736520313620656E636F646564">
    assert(base_16 == 'Base 16 encoded')
    empty: bytes = ''
    assert(reinterpret_cast<bool>(len(base_64)), comment="Non empty bytes should be Truthy")
    assert(!(reinterpret_cast<bool>(len(empty))), comment="Empty bytes should be Falsy")
    assert('a' + 'b' == 'ab')
    c: bytes = 'c'
    c += 'd'
    assert(c == 'cd')
    abc: bytes = 'abc'
    assert(abc[0u] == 'a')
    assert(abc[1:] == 'bc')
    assert(abc[1:1] == '')
    assert(abc[:1] == 'a')
    assert(abc[:-1] == 'ab')
    assert(abc[-2:] == 'bc')
    assert(abc[-2:-1] == 'b')
    assert('1234567'[1:-1] == '23456')
    assert(abc[-10:10] == 'abc')
    true: bytes = '1'
    false: bytes = ''
    x: bool = (!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true
    assert(x)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (true) == true)
    assert((!(reinterpret_cast<bool>(len(true)))) ? (true) : (false) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (true) == false)
    assert((!(reinterpret_cast<bool>(len(false)))) ? (false) : (false) == false)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (true) == true)
    assert((reinterpret_cast<bool>(len(true))) ? (true) : (false) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (true) == true)
    assert((reinterpret_cast<bool>(len(false))) ? (false) : (false) == false)
    (a, b, c, d): tuple<bytes,bytes,bytes,bytes> = (hex<"00">, hex<"0F">, hex<"F0">, hex<"FF">)
    assert(a & b == a)
    assert(b | c == d)
    assert(b ^ d == c)
    y: bytes = a
    y &= d
    assert(y == a)
    y |= d
    assert(y == d)
    y ^= c
    assert(y == b)
    test_cases.stubs.bytes::check_slicing_with_uint64(abc)
    test_cases.stubs.bytes::check_end_before_start_slicing(abc)
    return 1u
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine check_slicing_with_uint64(abc: bytes): void
{
  one: uint64 = 1u
  ten: uint64 = 10u
  assert(abc[one:] == 'bc')
  assert(abc[one:one] == '')
  assert(abc[:one] == 'a')
  assert(test_cases.stubs.bytes::one_to_seven()[one:-1] == '23456')
  assert(abc[0u:ten] == 'abc')
}

subroutine check_end_before_start_slicing(abc: bytes): void
{
  assert(abc[10:1] == '')
  assert(abc[-10:-12] == '')
  one: uint64 = 1u
  ten: uint64 = 10u
  assert(abc[ten:one] == '')
}

subroutine one_to_seven(): bytes
{
  log('one_to_seven called')
  return '1234567'
}