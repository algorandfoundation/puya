{
  "version": 3,
  "sources": [
    "../string.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBe;;;;;;;;;;;AAAe;AAAf;;;AAAP;AACO;;;;;;;;;AAAyB;AAAzB;;;AAAA;AAAP;AA0BqB;;AAAV;;;AAAP;;;;;;AAAqD;AAA9C;AADX;AAIO;AAAP;AAHI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.stubs.string.StringContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"The quick brown fox jumped over the lazy dog\" \"no args\""
    },
    "60": {
      "op": "pushbytes \"brown fox\"",
      "defined_out": [
        "\"brown fox\""
      ],
      "stack_out": [
        "\"brown fox\""
      ]
    },
    "71": {
      "op": "bytec_0 // \"The quick brown fox jumped over the lazy dog\"",
      "defined_out": [
        "\"The quick brown fox jumped over the lazy dog\"",
        "\"brown fox\""
      ],
      "stack_out": [
        "\"brown fox\"",
        "\"The quick brown fox jumped over the lazy dog\""
      ]
    },
    "72": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "75": {
      "op": "assert",
      "stack_out": []
    },
    "76": {
      "op": "pushbytes \"red fox\"",
      "defined_out": [
        "\"red fox\""
      ],
      "stack_out": [
        "\"red fox\""
      ]
    },
    "85": {
      "op": "bytec_0 // \"The quick brown fox jumped over the lazy dog\"",
      "stack_out": [
        "\"red fox\"",
        "\"The quick brown fox jumped over the lazy dog\""
      ]
    },
    "86": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "89": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "90": {
      "op": "assert",
      "stack_out": []
    },
    "91": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "93": {
      "op": "bz main_ternary_false@38",
      "stack_out": []
    },
    "96": {
      "op": "pushbytes \"args\""
    },
    "102": {
      "block": "main_ternary_merge@39",
      "stack_in": [
        "ternary_result%12#0"
      ],
      "op": "bytec_1 // \"no args\"",
      "defined_out": [
        "\"no args\"",
        "ternary_result%12#0"
      ],
      "stack_out": [
        "ternary_result%12#0",
        "\"no args\""
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "104": {
      "error": "constructor expressions supported",
      "op": "assert // constructor expressions supported",
      "stack_out": []
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "block": "main_ternary_false@38",
      "stack_in": [],
      "op": "bytec_1 // \"no args\"",
      "defined_out": [
        "ternary_result%12#0"
      ],
      "stack_out": [
        "ternary_result%12#0"
      ]
    },
    "108": {
      "op": "b main_ternary_merge@39"
    },
    "111": {
      "subroutine": "_puya_lib.bytes_.is_substring",
      "params": {
        "item#0": "bytes",
        "sequence#0": "bytes"
      },
      "block": "is_substring",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "114": {
      "op": "pushbytes \"\""
    },
    "116": {
      "op": "intc_1 // 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "117": {
      "block": "is_substring_while_top@1",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "item#0 (copy)"
      ]
    },
    "119": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "frame_dig 1",
      "defined_out": [
        "start#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%0#0",
        "start#0"
      ]
    },
    "122": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0"
      ]
    },
    "123": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "124": {
      "op": "frame_bury 0",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0"
      ]
    },
    "126": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "sequence#0 (copy)"
      ]
    },
    "128": {
      "op": "len",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "129": {
      "op": "<=",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%3#0"
      ]
    },
    "130": {
      "op": "bz is_substring_after_while@5",
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "133": {
      "op": "frame_dig -1"
    },
    "135": {
      "op": "frame_dig 1"
    },
    "137": {
      "op": "frame_dig 0"
    },
    "139": {
      "op": "substring3"
    },
    "140": {
      "op": "frame_dig -2"
    },
    "142": {
      "op": "=="
    },
    "143": {
      "op": "bz is_substring_after_if_else@4"
    },
    "146": {
      "op": "intc_0 // 1"
    },
    "147": {
      "op": "frame_bury 0"
    },
    "149": {
      "retsub": true,
      "op": "retsub"
    },
    "150": {
      "block": "is_substring_after_if_else@4",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0"
      ]
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0",
        "1"
      ]
    },
    "153": {
      "op": "+",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0"
      ]
    },
    "154": {
      "op": "frame_bury 1",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "156": {
      "op": "b is_substring_while_top@1"
    },
    "159": {
      "block": "is_substring_after_while@5",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "0"
      ]
    },
    "160": {
      "op": "frame_bury 0"
    },
    "162": {
      "retsub": true,
      "op": "retsub"
    }
  }
}