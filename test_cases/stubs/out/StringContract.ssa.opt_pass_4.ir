contract test_cases.stubs.string.StringContract:
    program approval:
        subroutine test_cases.stubs.string.StringContract.approval_program() -> bool:
            block@0: // L5
                let tmp%12#0: bool = _puya_lib.bytes_.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
                (assert tmp%12#0)
                let tmp%13#0: bool = _puya_lib.bytes_.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%35#0: bool = 1u
                (assert tmp%35#0)
                let ternary_result%5#0: bool = 0u
                goto block@18
            block@18: // ternary_merge_L31
                let tmp%46#0: bool = (! ternary_result%5#0)
                (assert tmp%46#0)
                let ternary_result%6#1: bool = 1u
                (assert ternary_result%6#1)
                let ternary_result%7#1: bool = 1u
                (assert ternary_result%7#1)
                let ternary_result%8#1: bool = 1u
                (assert ternary_result%8#1)
                let ternary_result%9#1: bool = 0u
                let tmp%79#0: bool = (! ternary_result%9#1)
                (assert tmp%79#0)
                let ternary_result%10#1: bool = 1u
                (assert ternary_result%10#1)
                let ternary_result%11#0: bool = 0u
                goto block@36
            block@36: // ternary_merge_L38
                let tmp%96#0: bool = (! ternary_result%11#0)
                (assert tmp%96#0)
                let tmp%100#0: bytes = "d.e.f"
                let tmp%101#0: bool = (== tmp%100#0 "d.e.f")
                (assert tmp%101#0)
                let tmp%105#0: bytes = "d.e.f"
                let tmp%106#0: bool = (== tmp%105#0 "d.e.f")
                (assert tmp%106#0)
                let tmp%110#0: bytes = "d.e.f"
                let tmp%111#0: bool = (== tmp%110#0 "d.e.f")
                (assert tmp%111#0)
                let tmp%115#0: bytes = "d.e.f"
                let tmp%116#0: bool = (== tmp%115#0 "d.e.f")
                (assert tmp%116#0)
                let tmp%121#0: bool = 1u
                (assert tmp%121#0)
                let tmp%124#0: uint64 = (txn NumAppArgs)
                goto tmp%124#0 ? block@37 : block@38
            block@37: // ternary_true_L49
                let ternary_result%12#0: bytes = "args"
                goto block@39
            block@38: // ternary_false_L49
                let ternary_result%12#1: bytes = "no args"
                goto block@39
            block@39: // ternary_merge_L49
                let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37, ternary_result%12#1 <- block@38)
                let tmp%126#0: bool = (== ternary_result%12#2 "no args")
                (assert tmp%126#0) // constructor expressions supported
                return 1u
        
        subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L12
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
                let tmp%7#0: bool = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L13
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.stubs.string.StringContract.clear_state_program() -> bool:
            block@0: // L54
                return 1u