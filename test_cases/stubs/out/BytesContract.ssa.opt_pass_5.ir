contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%16#0: bool = 1u
                (assert tmp%16#0)
                let tmp%38#0: uint64 = 1u
                let tmp%39#0: bytes = (substring3 "abc" 1u tmp%38#0)
                let tmp%40#0: bool = (== tmp%39#0 "")
                (assert tmp%40#0)
                let tmp%46#0: bool = 1u
                (assert tmp%46#0)
                let tmp%53#0: bytes = "ab"
                let tmp%54#0: bool = (== tmp%53#0 "ab")
                (assert tmp%54#0)
                let tmp%61#0: bytes = "bc"
                let tmp%62#0: bool = (== tmp%61#0 "bc")
                (assert tmp%62#0)
                let tmp%93#0: bool = 0u
                let tmp%94#0: uint64 = (select 2u 1u tmp%93#0)
                let tmp%95#0: bytes = (substring3 "abc" 1u tmp%94#0)
                let tmp%96#0: bool = (== tmp%95#0 "b")
                (assert tmp%96#0)
                let tmp%121#0: bool = 0u
                let tmp%122#0: uint64 = (select 6u 1u tmp%121#0)
                let tmp%123#0: bytes = (substring3 "1234567" 1u tmp%122#0)
                let tmp%124#0: bool = (== tmp%123#0 "23456")
                (assert tmp%124#0)
                let tmp%151#0: bool = 0u
                let tmp%152#0: uint64 = (select 3u 0u tmp%151#0)
                let tmp%153#0: bytes = (substring3 "abc" 0u tmp%152#0)
                let tmp%154#0: bool = (== tmp%153#0 "abc")
                (assert tmp%154#0)
                test_cases.stubs.bytes.check_slicing_with_uint64("abc")
                test_cases.stubs.bytes.check_end_before_start_slicing("abc")
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L77
                let tmp%0#0: uint64 = (len abc#0)
                let tmp%2#0: bool = (< 1u tmp%0#0)
                let tmp%3#0: uint64 = (select tmp%0#0 1u tmp%2#0)
                let tmp%4#0: bytes = (substring3 abc#0 tmp%3#0 tmp%0#0)
                let tmp%5#0: bool = (== tmp%4#0 "bc")
                (assert tmp%5#0)
                let tmp%28#0: bytes = (substring3 abc#0 tmp%3#0 tmp%3#0)
                let tmp%29#0: bool = (== tmp%28#0 "")
                (assert tmp%29#0)
                let tmp%34#0: bytes = (substring3 abc#0 0u tmp%3#0)
                let tmp%35#0: bool = (== tmp%34#0 "a")
                (assert tmp%35#0)
                let awst_tmp%7#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let tmp%36#0: uint64 = (len awst_tmp%7#0)
                let tmp%38#0: bool = (< 1u tmp%36#0)
                let tmp%39#0: uint64 = (select tmp%36#0 1u tmp%38#0)
                let tmp%45#0: uint64 = (- tmp%36#0 tmp%39#0)
                let tmp%60#0: bool = (> tmp%39#0 tmp%45#0)
                let tmp%61#0: uint64 = (select tmp%45#0 tmp%39#0 tmp%60#0)
                let tmp%62#0: bytes = (substring3 awst_tmp%7#0 tmp%39#0 tmp%61#0)
                let tmp%63#0: bool = (== tmp%62#0 "23456")
                (assert tmp%63#0)
                let tmp%67#0: uint64 = (select tmp%0#0 0u tmp%0#0)
                let tmp%70#0: bool = (< 10u tmp%0#0)
                let tmp%71#0: uint64 = (select tmp%0#0 10u tmp%70#0)
                let tmp%84#0: bool = (> tmp%67#0 tmp%71#0)
                let tmp%85#0: uint64 = (select tmp%71#0 tmp%67#0 tmp%84#0)
                let tmp%86#0: bytes = (substring3 abc#0 tmp%67#0 tmp%85#0)
                let tmp%87#0: bool = (== tmp%86#0 "abc")
                (assert tmp%87#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L97
                (log "one_to_seven called")
                return "1234567"
        
        subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
            block@0: // L88
                let tmp%0#0: uint64 = (len abc#0)
                let tmp%2#0: bool = (< 10u tmp%0#0)
                let tmp%3#0: uint64 = (select tmp%0#0 10u tmp%2#0)
                let tmp%6#0: bool = (< 1u tmp%0#0)
                let tmp%7#0: uint64 = (select tmp%0#0 1u tmp%6#0)
                let tmp%20#0: bool = (> tmp%3#0 tmp%7#0)
                let tmp%21#0: uint64 = (select tmp%7#0 tmp%3#0 tmp%20#0)
                let tmp%22#0: bytes = (substring3 abc#0 tmp%3#0 tmp%21#0)
                let tmp%23#0: bool = (== tmp%22#0 "")
                (assert tmp%23#0)
                let tmp%29#0: uint64 = (- tmp%0#0 tmp%3#0)
                let tmp%33#0: bool = (< 12u tmp%0#0)
                let tmp%34#0: uint64 = (select tmp%0#0 12u tmp%33#0)
                let tmp%35#0: uint64 = (- tmp%0#0 tmp%34#0)
                let tmp%54#0: bool = (> tmp%29#0 tmp%35#0)
                let tmp%55#0: uint64 = (select tmp%35#0 tmp%29#0 tmp%54#0)
                let tmp%56#0: bytes = (substring3 abc#0 tmp%29#0 tmp%55#0)
                let tmp%57#0: bool = (== tmp%56#0 "")
                (assert tmp%57#0)
                return 
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> bool:
            block@0: // L73
                return 1u