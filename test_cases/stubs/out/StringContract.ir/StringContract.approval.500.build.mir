// Op                                                                                             Stack (out)
// test_cases.stubs.string.StringContract.approval_program() -> uint64:
subroutine main:
    block@0:
        // stubs/string.py:22
        // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
        byte "brown fox"                                                                          "brown fox"
        byte "The quick brown fox jumped over the lazy dog"                                       "brown fox","The quick brown fox jumped over the lazy dog"
        callsub is_substring                                                                      tmp%14#0
        v-store tmp%14#0
        v-load tmp%14#0                                                                           tmp%14#0
        assert
        // stubs/string.py:23
        // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
        byte "red fox"                                                                            "red fox"
        byte "The quick brown fox jumped over the lazy dog"                                       "red fox","The quick brown fox jumped over the lazy dog"
        callsub is_substring                                                                      tmp%15#0
        v-store tmp%15#0
        v-load tmp%15#0                                                                           tmp%15#0
        !                                                                                         tmp%16#0
        v-store tmp%16#0
        v-load tmp%16#0                                                                           tmp%16#0
        assert
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        txn NumAppArgs                                                                            tmp%102#0
        v-store tmp%102#0
        v-load tmp%102#0                                                                          tmp%102#0
        bz ternary_false@38 ; b ternary_true@37

    ternary_true@37:
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        byte "args"                                                                               "args"
        v-store ternary_result%12#0
        b ternary_merge@39

    ternary_false@38:
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        byte "no args"                                                                            "no args"
        v-store ternary_result%12#0
        b ternary_merge@39

    ternary_merge@39:
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        v-load ternary_result%12#0                                                                ternary_result%12#0
        byte "no args"                                                                            ternary_result%12#0,"no args"
        ==                                                                                        tmp%104#0
        v-store tmp%104#0
        // stubs/string.py:48-50
        // assert (
        //     String("args" if Txn.num_app_args else "no args") == "no args"
        // ), "constructor expressions supported"
        v-load tmp%104#0                                                                          tmp%104#0
        assert // constructor expressions supported
        // stubs/string.py:52
        // return True
        int 1                                                                                     1
        return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
subroutine is_substring:
    is_substring_block@0:                                                                         (洧도) item#0,sequence#0 |
        int 0                                                                                     (洧도) item#0,sequence#0 | 0
        v-store start#0                                                                           (洧도) item#0,sequence#0 |
        b is_substring_while_top@1                                                                (洧도) item#0,sequence#0 |

    is_substring_while_top@1:                                                                     (洧도) item#0,sequence#0 |
        p-load item#0                                                                             (洧도) item#0,sequence#0 | item#0 (copy)
        len                                                                                       (洧도) item#0,sequence#0 | tmp%0#0
        v-store tmp%0#0                                                                           (洧도) item#0,sequence#0 |
        v-load start#0                                                                            (洧도) item#0,sequence#0 | start#0
        v-load tmp%0#0                                                                            (洧도) item#0,sequence#0 | start#0,tmp%0#0
        +                                                                                         (洧도) item#0,sequence#0 | tmp%1#0
        v-store tmp%1#0                                                                           (洧도) item#0,sequence#0 |
        p-load sequence#0                                                                         (洧도) item#0,sequence#0 | sequence#0 (copy)
        len                                                                                       (洧도) item#0,sequence#0 | tmp%2#0
        v-store tmp%2#0                                                                           (洧도) item#0,sequence#0 |
        v-load tmp%1#0                                                                            (洧도) item#0,sequence#0 | tmp%1#0
        v-load tmp%2#0                                                                            (洧도) item#0,sequence#0 | tmp%1#0,tmp%2#0
        <=                                                                                        (洧도) item#0,sequence#0 | tmp%3#0
        v-store tmp%3#0                                                                           (洧도) item#0,sequence#0 |
        v-load tmp%3#0                                                                            (洧도) item#0,sequence#0 | tmp%3#0
        bz is_substring_after_while@5 ; b is_substring_while_body@2                               (洧도) item#0,sequence#0 |

    is_substring_while_body@2:                                                                    (洧도) item#0,sequence#0 |
        p-load sequence#0                                                                         (洧도) item#0,sequence#0 | sequence#0 (copy)
        v-load start#0                                                                            (洧도) item#0,sequence#0 | sequence#0 (copy),start#0
        v-load tmp%1#0                                                                            (洧도) item#0,sequence#0 | sequence#0 (copy),start#0,tmp%1#0
        substring3                                                                                (洧도) item#0,sequence#0 | tmp%6#0
        v-store tmp%6#0                                                                           (洧도) item#0,sequence#0 |
        p-load item#0                                                                             (洧도) item#0,sequence#0 | item#0 (copy)
        v-load tmp%6#0                                                                            (洧도) item#0,sequence#0 | item#0 (copy),tmp%6#0
        ==                                                                                        (洧도) item#0,sequence#0 | tmp%7#0
        v-store tmp%7#0                                                                           (洧도) item#0,sequence#0 |
        v-load tmp%7#0                                                                            (洧도) item#0,sequence#0 | tmp%7#0
        bz is_substring_after_if_else@4 ; b is_substring_if_body@3                                (洧도) item#0,sequence#0 |

    is_substring_if_body@3:                                                                       (洧도) item#0,sequence#0 |
        int 1                                                                                     (洧도) item#0,sequence#0 | 1
        retsub                                                                                    1

    is_substring_after_if_else@4:                                                                 (洧도) item#0,sequence#0 |
        v-load start#0                                                                            (洧도) item#0,sequence#0 | start#0
        int 1                                                                                     (洧도) item#0,sequence#0 | start#0,1
        +                                                                                         (洧도) item#0,sequence#0 | start#0
        v-store start#0                                                                           (洧도) item#0,sequence#0 |
        b is_substring_while_top@1                                                                (洧도) item#0,sequence#0 |

    is_substring_after_while@5:                                                                   (洧도) item#0,sequence#0 |
        int 0                                                                                     (洧도) item#0,sequence#0 | 0
        retsub                                                                                    0


