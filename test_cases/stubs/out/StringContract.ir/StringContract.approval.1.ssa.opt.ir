main test_cases.stubs.string.StringContract.approval_program:
    block@0: // L5
        let tmp%0#0: uint64 = 0u
        let tmp%1#0: bool = 1u
        let tmp%2#0: uint64 = 1u
        let tmp%3#0: bool = 1u
        let tmp%4#0: bytes = "ab"
        let tmp%5#0: bool = 1u
        let tmp%6#0: bytes = "ab"
        let tmp%7#0: bool = 1u
        let tmp%8#0: bytes = "ab"
        let tmp%9#0: bool = 1u
        let tmp%10#0: bool = 1u
        let c#1: string = "cd"
        let c#2: string = "cde"
        let tmp%11#0: bool = 1u
        let tmp%12#0: bool = _puya_lib.bytes_.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
        (assert tmp%12#0)
        let tmp%13#0: bool = _puya_lib.bytes_.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = 0u
        let tmp%16#0: uint64 = 7u
        let tmp%17#0: bool = 0u
        let tmp%18#0: string = ""
        let ternary_result%0#1: bool = 1u
        goto block@3
    block@3: // ternary_merge_L26
        (assert ternary_result%0#1)
        let tmp%19#0: uint64 = 1u
        let tmp%20#0: uint64 = 7u
        let tmp%21#0: bool = 0u
        let tmp%22#0: string = "a"
        let ternary_result%1#1: bool = 1u
        goto block@6
    block@6: // ternary_merge_L27
        (assert ternary_result%1#1)
        let tmp%23#0: uint64 = 2u
        let tmp%24#0: uint64 = 7u
        let tmp%25#0: bool = 0u
        let tmp%26#0: string = "ab"
        let ternary_result%2#1: bool = 1u
        goto block@9
    block@9: // ternary_merge_L28
        (assert ternary_result%2#1)
        let tmp%27#0: uint64 = 1u
        let tmp%28#0: uint64 = 7u
        let tmp%29#0: bool = 0u
        let tmp%30#0: string = "a"
        let ternary_result%3#1: bool = 0u
        goto block@12
    block@12: // ternary_merge_L29
        let tmp%31#0: bool = (! ternary_result%3#1)
        (assert tmp%31#0)
        let tmp%32#0: uint64 = 7u
        let tmp%33#0: uint64 = 7u
        let tmp%34#0: bool = 0u
        let tmp%35#0: string = "abcdefg"
        let ternary_result%4#1: bool = 1u
        goto block@15
    block@15: // ternary_merge_L30
        (assert ternary_result%4#1)
        let awst_tmp%0#0: bytes = "abcdefg!"
        let tmp%36#0: uint64 = 8u
        let tmp%37#0: uint64 = 7u
        let tmp%38#0: bool = 1u
        let ternary_result%5#0: bool = 0u
        goto block@18
    block@18: // ternary_merge_L31
        let tmp%40#0: bool = (! ternary_result%5#0)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = 0u
        let tmp%42#0: uint64 = 7u
        let tmp%43#0: bool = 0u
        let tmp%44#0: uint64 = 7u
        let tmp%45#0: string = ""
        let ternary_result%6#1: bool = 1u
        goto block@21
    block@21: // ternary_merge_L33
        (assert ternary_result%6#1)
        let tmp%46#0: uint64 = 1u
        let tmp%47#0: uint64 = 7u
        let tmp%48#0: bool = 0u
        let tmp%49#0: uint64 = 6u
        let tmp%50#0: string = "g"
        let ternary_result%7#1: bool = 1u
        goto block@24
    block@24: // ternary_merge_L34
        (assert ternary_result%7#1)
        let tmp%51#0: uint64 = 2u
        let tmp%52#0: uint64 = 7u
        let tmp%53#0: bool = 0u
        let tmp%54#0: uint64 = 5u
        let tmp%55#0: string = "fg"
        let ternary_result%8#1: bool = 1u
        goto block@27
    block@27: // ternary_merge_L35
        (assert ternary_result%8#1)
        let tmp%56#0: uint64 = 1u
        let tmp%57#0: uint64 = 7u
        let tmp%58#0: bool = 0u
        let tmp%59#0: uint64 = 6u
        let tmp%60#0: string = "g"
        let ternary_result%9#1: bool = 0u
        goto block@30
    block@30: // ternary_merge_L36
        let tmp%61#0: bool = (! ternary_result%9#1)
        (assert tmp%61#0)
        let tmp%62#0: uint64 = 7u
        let tmp%63#0: uint64 = 7u
        let tmp%64#0: bool = 0u
        let tmp%65#0: uint64 = 0u
        let tmp%66#0: string = "abcdefg"
        let ternary_result%10#1: bool = 1u
        goto block@33
    block@33: // ternary_merge_L37
        (assert ternary_result%10#1)
        let awst_tmp%1#0: bytes = "!abcdefg"
        let tmp%67#0: uint64 = 8u
        let tmp%68#0: uint64 = 7u
        let tmp%69#0: bool = 1u
        let ternary_result%11#0: bool = 0u
        goto block@36
    block@36: // ternary_merge_L38
        let tmp%72#0: bool = (! ternary_result%11#0)
        (assert tmp%72#0)
        let tmp%73#0: bytes = "d."
        let tmp%74#0: string = "d.e"
        let tmp%75#0: bytes = "d.e."
        let tmp%76#0: string = "d.e.f"
        let tmp%77#0: bool = 1u
        let tmp%78#0: bytes = "d."
        let tmp%79#0: string = "d.e"
        let tmp%80#0: bytes = "d.e."
        let tmp%81#0: string = "d.e.f"
        let tmp%82#0: bool = 1u
        let tmp%83#0: bytes = "d."
        let tmp%84#0: string = "d.e"
        let tmp%85#0: bytes = "d.e."
        let tmp%86#0: string = "d.e.f"
        let tmp%87#0: bool = 1u
        let tmp%88#0: bytes = "d."
        let tmp%89#0: string = "d.e"
        let tmp%90#0: bytes = "d.e."
        let tmp%91#0: string = "d.e.f"
        let tmp%92#0: bool = 1u
        let tmp%93#0: bytes = "d"
        let tmp%94#0: string = "de"
        let tmp%95#0: bytes = "de"
        let tmp%96#0: string = "def"
        let tmp%97#0: bool = 1u
        let tmp%98#0: bool = 1u
        let tmp%99#0: bool = 1u
        let tmp%100#0: uint64 = (txn NumAppArgs)
        let tmp%101#0: bool = (!= tmp%100#0 0u)
        goto tmp%100#0 ? block@37 : block@38
    block@37: // ternary_true_L49
        let ternary_result%12#0: string = "args"
        goto block@39
    block@38: // ternary_false_L49
        let ternary_result%12#1: string = "no args"
        goto block@39
    block@39: // ternary_merge_L49
        let ternary_result%12#2: string = φ(ternary_result%12#0 <- block@37, ternary_result%12#1 <- block@38)
        let tmp%102#0: bool = (== ternary_result%12#2 "no args")
        (assert tmp%102#0) // constructor expressions supported
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let start#2: uint64 = (+ start#1 1u)
        goto block@1
    block@5: // after_while_L11
        return 0u