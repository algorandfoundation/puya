// Op                                                                                             Stack (out)
// test_cases.stubs.string.StringContract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // stubs/string.py:22
        // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
        byte "brown fox"                                                                          "brown fox"
        byte "The quick brown fox jumped over the lazy dog"                                       "brown fox","The quick brown fox jumped over the lazy dog"
        callsub is_substring                                                                      tmp%14#0
        assert
        // stubs/string.py:23
        // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
        byte "red fox"                                                                            "red fox"
        byte "The quick brown fox jumped over the lazy dog"                                       "red fox","The quick brown fox jumped over the lazy dog"
        callsub is_substring                                                                      tmp%15#0
        !                                                                                         tmp%16#0
        assert
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        txn NumAppArgs                                                                            tmp%102#0
        bz main_ternary_false@38 ; b main_ternary_true@37

    main_ternary_true@37:
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        byte "args"                                                                               ternary_result%12#0
        x-store ternary_result%12#0                                                               (洧뎶) ternary_result%12#0 |
        b main_ternary_merge@39                                                                   (洧뎶) ternary_result%12#0 |

    main_ternary_false@38:
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        byte "no args"                                                                            ternary_result%12#0
        x-store ternary_result%12#0                                                               (洧뎶) ternary_result%12#0 |
        b main_ternary_merge@39                                                                   (洧뎶) ternary_result%12#0 |

    main_ternary_merge@39:                                                                        (洧뎶) ternary_result%12#0 |
        // stubs/string.py:49
        // String("args" if Txn.num_app_args else "no args") == "no args"
        x-load ternary_result%12#0                                                                ternary_result%12#0
        byte "no args"                                                                            ternary_result%12#0,"no args"
        ==                                                                                        tmp%104#0
        // stubs/string.py:48-50
        // assert (
        //     String("args" if Txn.num_app_args else "no args") == "no args"
        // ), "constructor expressions supported"
        assert // constructor expressions supported
        // stubs/string.py:52
        // return True
        int 1                                                                                     1
        return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
subroutine is_substring:
    declare uint64 tmp%1#0
    is_substring_block@0:                                                                         (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0 |
        int 0                                                                                     (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0 | start#0
        f-store start#0                                                                           (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        b is_substring_while_top@1                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

    is_substring_while_top@1:                                                                     (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        p-load item#0                                                                             (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | item#0 (copy)
        len                                                                                       (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%0#0
        f-load start#0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%0#0,start#0
        l-load tmp%0#0 1                                                                          (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0,tmp%0#0
        +                                                                                         (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0
        l-store-copy tmp%1#0 0                                                                    (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%1#0
        f-store tmp%1#0                                                                           (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0
        p-load sequence#0                                                                         (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,sequence#0 (copy)
        len                                                                                       (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%2#0
        l-load tmp%1#0 1                                                                          (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%2#0,tmp%1#0
        l-load tmp%2#0 1                                                                          (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%2#0
        <=                                                                                        (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%3#0
        bz is_substring_after_while@5 ; b is_substring_while_body@2                               (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

    is_substring_while_body@2:                                                                    (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        p-load sequence#0                                                                         (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy)
        f-load start#0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy),start#0
        f-load tmp%1#0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy),start#0,tmp%1#0
        substring3                                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%6#0
        p-load item#0                                                                             (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%6#0,item#0 (copy)
        l-load tmp%6#0 1                                                                          (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | item#0 (copy),tmp%6#0
        ==                                                                                        (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%7#0
        bz is_substring_after_if_else@4 ; b is_substring_if_body@3                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

    is_substring_if_body@3:                                                                       (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        int 1                                                                                     (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | 1
        retsub                                                                                    1

    is_substring_after_if_else@4:                                                                 (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        f-load start#0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0
        int 1                                                                                     (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0,1
        +                                                                                         (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0
        f-store start#0                                                                           (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        b is_substring_while_top@1                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

    is_substring_after_while@5:                                                                   (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
        int 0                                                                                     (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | 0
        retsub                                                                                    0


