contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let awst_tmp%11#0: uint64 = 3u
                let ternary_result%13#0: uint64 = 1u
                goto block@3
            block@3: // ternary_merge_L26
                let tmp%15#0: bytes = (substring3 "abc" ternary_result%13#0 3u)
                let tmp%16#0: uint64 = (== tmp%15#0 "bc")
                (assert tmp%16#0)
                let ternary_result%19#0: uint64 = 1u
                goto block@6
            block@6: // ternary_merge_L27
                let ternary_result%21#0: uint64 = 1u
                goto block@9
            block@9: // ternary_merge_L27
                let tmp%22#0: bytes = (substring3 "abc" ternary_result%19#0 ternary_result%21#0)
                let tmp%23#0: uint64 = (== tmp%22#0 "")
                (assert tmp%23#0)
                let ternary_result%26#0: uint64 = 1u
                goto block@12
            block@12: // ternary_merge_L28
                let tmp%27#0: bytes = (substring3 "abc" 0u ternary_result%26#0)
                let tmp%28#0: uint64 = (== tmp%27#0 "a")
                (assert tmp%28#0)
                let ternary_result%31#0: uint64 = 2u
                goto block@15
            block@15: // ternary_merge_L29
                let tmp%32#0: bytes = (substring3 "abc" 0u ternary_result%31#0)
                let tmp%33#0: uint64 = (== tmp%32#0 "ab")
                (assert tmp%33#0)
                let ternary_result%36#0: uint64 = 1u
                goto block@18
            block@18: // ternary_merge_L30
                let tmp%38#0: bytes = (substring3 "abc" ternary_result%36#0 3u)
                let tmp%39#0: uint64 = (== tmp%38#0 "bc")
                (assert tmp%39#0)
                let ternary_result%42#0: uint64 = 1u
                goto block@21
            block@21: // ternary_merge_L31
                let ternary_result%44#0: uint64 = 2u
                goto block@24
            block@24: // ternary_merge_L31
                let tmp%45#0: bytes = (substring3 "abc" ternary_result%42#0 ternary_result%44#0)
                let tmp%46#0: uint64 = (== tmp%45#0 "b")
                (assert tmp%46#0)
                let ternary_result%51#1: uint64 = 0u
                goto block@27
            block@27: // ternary_merge_L33
                goto block@30
            block@30: // ternary_merge_L33
                let tmp%54#0: bytes = (substring3 "abc" ternary_result%51#1 awst_tmp%11#0)
                let tmp%55#0: uint64 = (== tmp%54#0 "abc")
                (assert tmp%55#0)
                let x#0: uint64 = (== "1" "1")
                (assert x#0)
                let tmp%63#0: uint64 = (== "" "")
                (assert tmp%63#0)
                let tmp%89#0: uint64 = (== 0xff 0xff)
                (assert tmp%89#0)
                let y#3: bytes = (b^ 0xff 0xf0)
                let tmp%90#0: uint64 = (== y#3 0x0f)
                (assert tmp%90#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L70
                return 1u