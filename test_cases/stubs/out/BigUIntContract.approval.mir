// Op                                                                                         Stack (out)
// test_cases.stubs.biguint.BigUIntContract.approval_program() -> uint64:
main_block@0:
    // stubs/biguint.py:6
    // one = BigUInt(1)
    byte 0x01                                                                                 0x01
    // stubs/biguint.py:7
    // compare_biguints(one, BigUInt(2))
    byte 0x02                                                                                 0x01,0x02
    callsub compare_biguints
    // stubs/biguint.py:6
    // one = BigUInt(1)
    byte 0x01                                                                                 0x01
    // stubs/biguint.py:8
    // compare_biguint_vs_uint64(one, UInt64(2))
    int 2                                                                                     0x01,2
    callsub compare_biguint_vs_uint64
    // stubs/biguint.py:9
    // compare_uint64_vs_biguint(UInt64(1), BigUInt(2))
    int 1                                                                                     1
    byte 0x02                                                                                 1,0x02
    callsub compare_uint64_vs_biguint
    // stubs/biguint.py:10
    // assert BigUInt(1 if Txn.num_app_args else 5) == 5, "constructor expressions supported"
    txn NumAppArgs                                                                            tmp%0#0
    byte 0x05                                                                                 tmp%0#0,0x05
    byte 0x01                                                                                 tmp%0#0,0x05,0x01
    l-load tmp%0#0 2                                                                          0x05,0x01,tmp%0#0
    select                                                                                    tmp%2#0
    byte 0x05                                                                                 tmp%2#0,0x05
    b==                                                                                       tmp%3#0
    assert // constructor expressions supported
    // stubs/biguint.py:13
    // return True
    int 1                                                                                     1
    return


// test_cases.stubs.biguint.compare_biguints(one: bytes, two: bytes) -> void:
compare_biguints:                                                                             (洧도) one#0,two#0 |
    // stubs/biguint.py:20-21
    // @subroutine
    // def compare_biguints(one: BigUInt, two: BigUInt) -> None:
    proto 2 0                                                                                 (洧도) one#0,two#0 |

compare_biguints_block@0:                                                                     (洧도) one#0,two#0 |
    // stubs/biguint.py:22
    // assert one < two
    p-load one#0                                                                              (洧도) one#0,two#0 | one#0 (copy)
    p-load two#0                                                                              (洧도) one#0,two#0 | one#0 (copy),two#0 (copy)
    b<                                                                                        (洧도) one#0,two#0 | tmp%0#0
    assert                                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:23
    // assert one <= two
    p-load one#0                                                                              (洧도) one#0,two#0 | one#0 (copy)
    p-load two#0                                                                              (洧도) one#0,two#0 | one#0 (copy),two#0 (copy)
    b<=                                                                                       (洧도) one#0,two#0 | tmp%1#0
    assert                                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:25
    // assert two > one
    p-load two#0                                                                              (洧도) one#0,two#0 | two#0 (copy)
    p-load one#0                                                                              (洧도) one#0,two#0 | two#0 (copy),one#0 (copy)
    b>                                                                                        (洧도) one#0,two#0 | tmp%3#0
    assert                                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:26
    // assert two >= one
    p-load two#0                                                                              (洧도) one#0,two#0 | two#0 (copy)
    p-load one#0                                                                              (洧도) one#0,two#0 | two#0 (copy),one#0 (copy)
    b>=                                                                                       (洧도) one#0,two#0 | tmp%4#0
    assert                                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:27
    // assert one != two
    p-load one#0                                                                              (洧도) one#0,two#0 | one#0 (copy)
    p-load two#0                                                                              (洧도) one#0,two#0 | one#0 (copy),two#0 (copy)
    b!=                                                                                       (洧도) one#0,two#0 | tmp%5#0
    assert                                                                                    (洧도) one#0,two#0 |
    retsub


// test_cases.stubs.biguint.compare_biguint_vs_uint64(one: bytes, two: uint64) -> void:
compare_biguint_vs_uint64:                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:30-31
    // @subroutine
    // def compare_biguint_vs_uint64(one: BigUInt, two: UInt64) -> None:
    proto 2 0                                                                                 (洧도) one#0,two#0 |

compare_biguint_vs_uint64_block@0:                                                            (洧도) one#0,two#0 |
    // stubs/biguint.py:32
    // assert one < two
    p-load two#0                                                                              (洧도) one#0,two#0 | two#0 (copy)
    itob                                                                                      (洧도) one#0,two#0 | tmp%0#0
    p-load one#0                                                                              (洧도) one#0,two#0 | tmp%0#0,one#0 (copy)
    l-load-copy tmp%0#0 1                                                                     (洧도) one#0,two#0 | tmp%0#0,one#0 (copy),tmp%0#0 (copy)
    b<                                                                                        (洧도) one#0,two#0 | tmp%0#0,tmp%1#0
    assert                                                                                    (洧도) one#0,two#0 | tmp%0#0
    // stubs/biguint.py:33
    // assert one <= two
    p-load one#0                                                                              (洧도) one#0,two#0 | tmp%0#0,one#0 (copy)
    l-load-copy tmp%0#0 1                                                                     (洧도) one#0,two#0 | tmp%0#0,one#0 (copy),tmp%0#0 (copy)
    b<=                                                                                       (洧도) one#0,two#0 | tmp%0#0,tmp%3#0
    assert                                                                                    (洧도) one#0,two#0 | tmp%0#0
    // stubs/biguint.py:37
    // assert one != two
    p-load one#0                                                                              (洧도) one#0,two#0 | tmp%0#0,one#0 (copy)
    l-load tmp%0#0 1                                                                          (洧도) one#0,two#0 | one#0 (copy),tmp%0#0
    b!=                                                                                       (洧도) one#0,two#0 | tmp%10#0
    assert                                                                                    (洧도) one#0,two#0 |
    retsub


// test_cases.stubs.biguint.compare_uint64_vs_biguint(one: uint64, two: bytes) -> void:
compare_uint64_vs_biguint:                                                                    (洧도) one#0,two#0 |
    // stubs/biguint.py:40-41
    // @subroutine
    // def compare_uint64_vs_biguint(one: UInt64, two: BigUInt) -> None:
    proto 2 0                                                                                 (洧도) one#0,two#0 |

compare_uint64_vs_biguint_block@0:                                                            (洧도) one#0,two#0 |
    // stubs/biguint.py:42
    // assert one < two
    p-load one#0                                                                              (洧도) one#0,two#0 | one#0 (copy)
    itob                                                                                      (洧도) one#0,two#0 | tmp%0#0
    p-load two#0                                                                              (洧도) one#0,two#0 | tmp%0#0,two#0 (copy)
    l-load-copy tmp%0#0 1                                                                     (洧도) one#0,two#0 | tmp%0#0,two#0 (copy),tmp%0#0 (copy)
    b>                                                                                        (洧도) one#0,two#0 | tmp%0#0,tmp%1#0
    assert                                                                                    (洧도) one#0,two#0 | tmp%0#0
    // stubs/biguint.py:43
    // assert one <= two
    p-load two#0                                                                              (洧도) one#0,two#0 | tmp%0#0,two#0 (copy)
    l-load-copy tmp%0#0 1                                                                     (洧도) one#0,two#0 | tmp%0#0,two#0 (copy),tmp%0#0 (copy)
    b>=                                                                                       (洧도) one#0,two#0 | tmp%0#0,tmp%3#0
    assert                                                                                    (洧도) one#0,two#0 | tmp%0#0
    // stubs/biguint.py:47
    // assert one != two
    p-load two#0                                                                              (洧도) one#0,two#0 | tmp%0#0,two#0 (copy)
    l-load tmp%0#0 1                                                                          (洧도) one#0,two#0 | two#0 (copy),tmp%0#0
    b!=                                                                                       (洧도) one#0,two#0 | tmp%10#0
    assert                                                                                    (洧도) one#0,two#0 |
    retsub


