main test_cases.stubs.bytes.BytesContract.approval_program:
    block@0: // L5
        let tmp%0#0: bool = 1u
        let tmp%1#0: bool = 1u
        let tmp%2#0: bool = 1u
        let tmp%3#0: uint64 = 15u
        let tmp%4#0: bool = 1u
        let tmp%5#0: uint64 = 0u
        let tmp%6#0: bool = 1u
        let tmp%7#0: bytes = 0x6162
        let tmp%8#0: bool = 1u
        let c#1: bytes = 0x6364
        let tmp%9#0: bool = 1u
        let read_bytes%0#0: bytes = 0x61
        let tmp%10#0: bool = 1u
        let length%0#0: uint64 = 3u
        let is_out_of_bounds%0#0: bool = 0u
        let bounded_index%0#0: uint64 = 1u
        let tmp%11#0: bytes = 0x6263
        let tmp%12#0: bool = 1u
        let length%1#0: uint64 = 3u
        let is_out_of_bounds%1#0: bool = 0u
        let bounded_index%1#0: uint64 = 1u
        let is_out_of_bounds%2#0: bool = 0u
        let bounded_index%2#0: uint64 = 1u
        let tmp%13#0: bytes = 0x
        let tmp%14#0: bool = 1u
        let length%2#0: uint64 = 3u
        let is_out_of_bounds%3#0: bool = 0u
        let bounded_index%3#0: uint64 = 1u
        let tmp%15#0: bytes = 0x61
        let tmp%16#0: bool = 1u
        let length%3#0: uint64 = 3u
        let is_out_of_bounds%4#0: bool = 0u
        let bounded_offset%0#0: uint64 = 1u
        let bounded_index%4#0: uint64 = 2u
        let tmp%17#0: bytes = 0x6162
        let tmp%18#0: bool = 1u
        let length%4#0: uint64 = 3u
        let is_out_of_bounds%5#0: bool = 0u
        let bounded_offset%1#0: uint64 = 2u
        let bounded_index%5#0: uint64 = 1u
        let tmp%19#0: bytes = 0x6263
        let tmp%20#0: bool = 1u
        let length%5#0: uint64 = 3u
        let is_out_of_bounds%6#0: bool = 0u
        let bounded_offset%2#0: uint64 = 2u
        let bounded_index%6#0: uint64 = 1u
        let is_out_of_bounds%7#0: bool = 0u
        let bounded_offset%3#0: uint64 = 1u
        let bounded_index%7#0: uint64 = 2u
        let tmp%21#0: bytes = 0x62
        let tmp%22#0: bool = 1u
        let length%6#0: uint64 = 7u
        let is_out_of_bounds%8#0: bool = 0u
        let bounded_index%8#0: uint64 = 1u
        let is_out_of_bounds%9#0: bool = 0u
        let bounded_offset%4#0: uint64 = 1u
        let bounded_index%9#0: uint64 = 6u
        let end_before_start%0#0: bool = 0u
        let end%0#0: uint64 = 6u
        let tmp%23#0: bytes = 0x3233343536
        let tmp%24#0: bool = 1u
        let length%7#0: uint64 = 3u
        let is_out_of_bounds%10#0: bool = 1u
        let bounded_offset%5#0: uint64 = 3u
        let bounded_index%10#0: uint64 = 0u
        let is_out_of_bounds%11#0: bool = 1u
        let bounded_index%11#0: uint64 = 3u
        let end_before_start%1#0: bool = 0u
        let end%1#0: uint64 = 3u
        let tmp%25#0: bytes = 0x616263
        let tmp%26#0: bool = 1u
        let tmp%27#0: uint64 = 1u
        let tmp%28#0: bool = 0u
        let select%0#0: bytes = 0x31
        let x#0: bool = 1u
        let tmp%29#0: uint64 = 1u
        let tmp%30#0: bool = 0u
        let select%1#0: bytes = 0x31
        let tmp%31#0: bool = 1u
        let tmp%32#0: uint64 = 1u
        let tmp%33#0: bool = 0u
        let select%2#0: bytes = 0x
        let tmp%34#0: bool = 1u
        let tmp%35#0: uint64 = 0u
        let tmp%36#0: bool = 1u
        let select%3#0: bytes = 0x
        let tmp%37#0: bool = 1u
        let tmp%38#0: uint64 = 0u
        let tmp%39#0: bool = 1u
        let select%4#0: bytes = 0x
        let tmp%40#0: bool = 1u
        let tmp%41#0: uint64 = 1u
        let tmp%42#0: bool = 1u
        let select%5#0: bytes = 0x31
        let tmp%43#0: bool = 1u
        let tmp%44#0: uint64 = 1u
        let tmp%45#0: bool = 1u
        let select%6#0: bytes = 0x31
        let tmp%46#0: bool = 1u
        let tmp%47#0: uint64 = 0u
        let tmp%48#0: bool = 0u
        let select%7#0: bytes = 0x31
        let tmp%49#0: bool = 1u
        let tmp%50#0: uint64 = 0u
        let tmp%51#0: bool = 0u
        let select%8#0: bytes = 0x
        let tmp%52#0: bool = 1u
        let tmp%53#0: bytes = 0x00
        let tmp%54#0: bool = 1u
        let tmp%55#0: bytes = 0xff
        let tmp%56#0: bool = 1u
        let tmp%57#0: bytes = 0xf0
        let tmp%58#0: bool = 1u
        let y#1: bytes = 0x00
        let tmp%59#0: bool = 1u
        let y#2: bytes = 0xff
        let tmp%60#0: bool = 1u
        let y#3: bytes = 0x0f
        let tmp%61#0: bool = 1u
        let length%0#1: uint64 = 3u
        let is_out_of_bounds%0#1: bool = 0u
        let bounded_index%0#1: uint64 = 1u
        let tmp%0#1: bytes = 0x6263
        let tmp%1#1: bool = 1u
        let length%1#1: uint64 = 3u
        let is_out_of_bounds%1#1: bool = 0u
        let bounded_index%1#1: uint64 = 1u
        let is_out_of_bounds%2#1: bool = 0u
        let bounded_index%2#1: uint64 = 1u
        let end_before_start%0#1: bool = 0u
        let end%0#1: uint64 = 1u
        let tmp%2#1: bytes = 0x
        let tmp%3#1: bool = 1u
        let length%2#1: uint64 = 3u
        let is_out_of_bounds%3#1: bool = 0u
        let bounded_index%3#1: uint64 = 1u
        let tmp%4#1: bytes = 0x61
        let tmp%5#1: bool = 1u
        let tmp%6#1: bytes = test_cases.stubs.bytes.one_to_seven()
        let length%3#1: uint64 = (len tmp%6#1)
        let is_out_of_bounds%4#1: bool = (>= 1u length%3#1)
        let bounded_index%4#1: uint64 = (select 1u length%3#1 is_out_of_bounds%4#1)
        let bounded_index%5#1: uint64 = (- length%3#1 bounded_index%4#1)
        let end_before_start%1#1: bool = (< bounded_index%5#1 bounded_index%4#1)
        let end%1#1: uint64 = (select bounded_index%5#1 bounded_index%4#1 end_before_start%1#1)
        let tmp%7#1: bytes = (substring3 tmp%6#1 bounded_index%4#1 end%1#1)
        let tmp%8#1: bool = (== tmp%7#1 0x3233343536)
        (assert tmp%8#1)
        let length%4#1: uint64 = 3u
        let is_out_of_bounds%6#1: bool = 0u
        let bounded_index%6#1: uint64 = 0u
        let is_out_of_bounds%7#1: bool = 1u
        let bounded_index%7#1: uint64 = 3u
        let tmp%9#1: bytes = 0x616263
        let tmp%10#1: bool = 1u
        let length%0#2: uint64 = 3u
        let is_out_of_bounds%0#2: bool = 1u
        let bounded_index%0#2: uint64 = 3u
        let is_out_of_bounds%1#2: bool = 0u
        let bounded_index%1#2: uint64 = 1u
        let end_before_start%0#2: bool = 1u
        let end%0#2: uint64 = 3u
        let tmp%0#2: bytes = 0x
        let tmp%1#2: bool = 1u
        let length%1#2: uint64 = 3u
        let is_out_of_bounds%2#2: bool = 1u
        let bounded_offset%0#2: uint64 = 3u
        let bounded_index%2#2: uint64 = 0u
        let is_out_of_bounds%3#2: bool = 1u
        let bounded_offset%1#1: uint64 = 3u
        let bounded_index%3#2: uint64 = 0u
        let end_before_start%1#2: bool = 0u
        let end%1#2: uint64 = 0u
        let tmp%2#2: bytes = 0x
        let tmp%3#2: bool = 1u
        let length%2#2: uint64 = 3u
        let is_out_of_bounds%4#2: bool = 1u
        let bounded_index%4#2: uint64 = 3u
        let is_out_of_bounds%5#2: bool = 0u
        let bounded_index%5#2: uint64 = 1u
        let end_before_start%2#0: bool = 1u
        let end%2#0: uint64 = 3u
        let tmp%4#2: bytes = 0x
        let tmp%5#2: bool = 1u
        let tmp%62#0: uint64 = (txn NumAppArgs)
        let tmp%63#0: bool = (!= tmp%62#0 0u)
        let select%9#0: bytes = (select 0x6e6f2061726773 0x61726773 tmp%62#0)
        let tmp%64#0: bool = (== select%9#0 0x6e6f2061726773)
        (assert tmp%64#0) // constructor expressions supported
        return 1u

subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
    block@0: // L101
        (log "one_to_seven called")
        return 0x31323334353637