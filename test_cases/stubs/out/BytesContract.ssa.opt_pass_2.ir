contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%5#0: uint64 = 1u
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%7#0: uint64 = 1u
                (assert tmp%7#0)
                let tmp%8#0: uint64 = 1u
                (assert tmp%8#0)
                let tmp%10#0: uint64 = 1u
                (assert tmp%10#0)
                let awst_tmp%11#0: uint64 = 3u
                let tmp%12#0: uint64 = 1u
                goto tmp%12#0 ? block@1 : block@2
            block@1: // ternary_true_L26
                let ternary_result%13#0: uint64 = 1u
                goto block@3
            block@2: // ternary_false_L26
                goto block@3
            block@3: // ternary_merge_L26
                let ternary_result%13#2: uint64 = φ(ternary_result%13#0 <- block@1, awst_tmp%11#0 <- block@2)
                let tmp%15#0: bytes = (substring3 "abc" ternary_result%13#2 3u)
                let tmp%16#0: uint64 = (== tmp%15#0 "bc")
                (assert tmp%16#0)
                let awst_tmp%17#0: uint64 = 3u
                let tmp%18#0: uint64 = 1u
                goto tmp%18#0 ? block@4 : block@5
            block@4: // ternary_true_L27
                let ternary_result%19#0: uint64 = 1u
                goto block@6
            block@5: // ternary_false_L27
                goto block@6
            block@6: // ternary_merge_L27
                let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@4, awst_tmp%17#0 <- block@5)
                let awst_tmp%17#1: uint64 = 3u
                let tmp%20#0: uint64 = 1u
                goto tmp%20#0 ? block@7 : block@8
            block@7: // ternary_true_L27
                let ternary_result%21#0: uint64 = 1u
                goto block@9
            block@8: // ternary_false_L27
                goto block@9
            block@9: // ternary_merge_L27
                let ternary_result%21#2: uint64 = φ(ternary_result%21#0 <- block@7, awst_tmp%17#1 <- block@8)
                let tmp%22#0: bytes = (substring3 "abc" ternary_result%19#2 ternary_result%21#2)
                let tmp%23#0: uint64 = (== tmp%22#0 "")
                (assert tmp%23#0)
                let awst_tmp%24#0: uint64 = 3u
                let tmp%25#0: uint64 = 1u
                goto tmp%25#0 ? block@10 : block@11
            block@10: // ternary_true_L28
                let ternary_result%26#0: uint64 = 1u
                goto block@12
            block@11: // ternary_false_L28
                goto block@12
            block@12: // ternary_merge_L28
                let ternary_result%26#2: uint64 = φ(ternary_result%26#0 <- block@10, awst_tmp%24#0 <- block@11)
                let tmp%27#0: bytes = (substring3 "abc" 0u ternary_result%26#2)
                let tmp%28#0: uint64 = (== tmp%27#0 "a")
                (assert tmp%28#0)
                let tmp%30#0: uint64 = 1u
                goto tmp%30#0 ? block@13 : block@14
            block@13: // ternary_true_L29
                let ternary_result%31#0: uint64 = 2u
                goto block@15
            block@14: // ternary_false_L29
                let ternary_result%31#1: uint64 = 0u
                goto block@15
            block@15: // ternary_merge_L29
                let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@13, ternary_result%31#1 <- block@14)
                let tmp%32#0: bytes = (substring3 "abc" 0u ternary_result%31#2)
                let tmp%33#0: uint64 = (== tmp%32#0 "ab")
                (assert tmp%33#0)
                let tmp%35#0: uint64 = 1u
                goto tmp%35#0 ? block@16 : block@17
            block@16: // ternary_true_L30
                let ternary_result%36#0: uint64 = 1u
                goto block@18
            block@17: // ternary_false_L30
                let ternary_result%36#1: uint64 = 0u
                goto block@18
            block@18: // ternary_merge_L30
                let ternary_result%36#2: uint64 = φ(ternary_result%36#0 <- block@16, ternary_result%36#1 <- block@17)
                let tmp%38#0: bytes = (substring3 "abc" ternary_result%36#2 3u)
                let tmp%39#0: uint64 = (== tmp%38#0 "bc")
                (assert tmp%39#0)
                let tmp%41#0: uint64 = 1u
                goto tmp%41#0 ? block@19 : block@20
            block@19: // ternary_true_L31
                let ternary_result%42#0: uint64 = 1u
                goto block@21
            block@20: // ternary_false_L31
                let ternary_result%42#1: uint64 = 0u
                goto block@21
            block@21: // ternary_merge_L31
                let ternary_result%42#2: uint64 = φ(ternary_result%42#0 <- block@19, ternary_result%42#1 <- block@20)
                let tmp%43#0: uint64 = 1u
                goto tmp%43#0 ? block@22 : block@23
            block@22: // ternary_true_L31
                let ternary_result%44#0: uint64 = 2u
                goto block@24
            block@23: // ternary_false_L31
                let ternary_result%44#1: uint64 = 0u
                goto block@24
            block@24: // ternary_merge_L31
                let ternary_result%44#2: uint64 = φ(ternary_result%44#0 <- block@22, ternary_result%44#1 <- block@23)
                let tmp%45#0: bytes = (substring3 "abc" ternary_result%42#2 ternary_result%44#2)
                let tmp%46#0: uint64 = (== tmp%45#0 "b")
                (assert tmp%46#0)
                let tmp%48#0: uint64 = 1u
                (assert tmp%48#0)
                let tmp%50#0: uint64 = 0u
                goto tmp%50#0 ? block@25 : block@26
            block@25: // ternary_true_L33
                let ternary_result%51#0: uint64 = (- 3u 10u)
                goto block@27
            block@26: // ternary_false_L33
                let ternary_result%51#1: uint64 = 0u
                goto block@27
            block@27: // ternary_merge_L33
                let ternary_result%51#2: uint64 = φ(ternary_result%51#0 <- block@25, ternary_result%51#1 <- block@26)
                let awst_tmp%49#1: uint64 = 3u
                let tmp%52#0: uint64 = 0u
                goto tmp%52#0 ? block@28 : block@29
            block@28: // ternary_true_L33
                let ternary_result%53#0: uint64 = 10u
                goto block@30
            block@29: // ternary_false_L33
                goto block@30
            block@30: // ternary_merge_L33
                let ternary_result%53#2: uint64 = φ(ternary_result%53#0 <- block@28, awst_tmp%49#1 <- block@29)
                let tmp%54#0: bytes = (substring3 "abc" ternary_result%51#2 ternary_result%53#2)
                let tmp%55#0: uint64 = (== tmp%54#0 "abc")
                (assert tmp%55#0)
                let ternary_result%57#1: bytes = "1"
                goto block@33
            block@33: // ternary_merge_L38
                let x#0: uint64 = (== ternary_result%57#1 "1")
                (assert x#0)
                let ternary_result%59#1: bytes = "1"
                goto block@36
            block@36: // ternary_merge_L40
                let tmp%60#0: uint64 = (== ternary_result%59#1 "1")
                (assert tmp%60#0)
                let ternary_result%62#1: bytes = ""
                goto block@39
            block@39: // ternary_merge_L41
                let tmp%63#0: uint64 = (== ternary_result%62#1 "")
                (assert tmp%63#0)
                let ternary_result%65#0: bytes = ""
                goto block@42
            block@42: // ternary_merge_L42
                let tmp%66#0: uint64 = (== ternary_result%65#0 "")
                (assert tmp%66#0)
                let ternary_result%68#0: bytes = ""
                goto block@45
            block@45: // ternary_merge_L43
                let tmp%69#0: uint64 = (== ternary_result%68#0 "")
                (assert tmp%69#0)
                let ternary_result%71#0: bytes = "1"
                goto block@48
            block@48: // ternary_merge_L44
                let tmp%72#0: uint64 = (== ternary_result%71#0 "1")
                (assert tmp%72#0)
                let ternary_result%74#0: bytes = "1"
                goto block@51
            block@51: // ternary_merge_L45
                let tmp%75#0: uint64 = (== ternary_result%74#0 "1")
                (assert tmp%75#0)
                let ternary_result%77#1: bytes = "1"
                goto block@54
            block@54: // ternary_merge_L46
                let tmp%78#0: uint64 = (== ternary_result%77#1 "1")
                (assert tmp%78#0)
                let ternary_result%80#1: bytes = ""
                goto block@57
            block@57: // ternary_merge_L47
                let tmp%81#0: uint64 = (== ternary_result%80#1 "")
                (assert tmp%81#0)
                let tmp%83#0: uint64 = 1u
                (assert tmp%83#0)
                let tmp%85#0: uint64 = 1u
                (assert tmp%85#0)
                let tmp%87#0: uint64 = 1u
                (assert tmp%87#0)
                let tmp%88#0: uint64 = 1u
                (assert tmp%88#0)
                let y#2: bytes = 0xff
                let tmp%89#0: uint64 = (== y#2 0xff)
                (assert tmp%89#0)
                let y#3: bytes = (b^ y#2 0xf0)
                let tmp%90#0: uint64 = (== y#3 0x0f)
                (assert tmp%90#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L70
                return 1u