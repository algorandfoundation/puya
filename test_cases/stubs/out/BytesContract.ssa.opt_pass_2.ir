contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%5#0: bool = 1u
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%7#0: bool = 1u
                (assert tmp%7#0)
                let tmp%8#0: bool = 1u
                (assert tmp%8#0)
                let tmp%10#0: bool = 1u
                (assert tmp%10#0)
                let is_out_of_bounds%0#0: bool = 0u
                let bounded_index%0#0: uint64 = (select 1u 3u is_out_of_bounds%0#0)
                let tmp%11#0: bytes = (substring3 "abc" bounded_index%0#0 3u)
                let tmp%12#0: bool = (== tmp%11#0 "bc")
                (assert tmp%12#0)
                let is_out_of_bounds%1#0: bool = 0u
                let bounded_index%1#0: uint64 = (select 1u 3u is_out_of_bounds%1#0)
                let tmp%13#0: bytes = (substring3 "abc" bounded_index%1#0 bounded_index%1#0)
                let tmp%14#0: bool = (== tmp%13#0 "")
                (assert tmp%14#0)
                let is_out_of_bounds%3#0: bool = 0u
                let bounded_index%3#0: uint64 = (select 1u 3u is_out_of_bounds%3#0)
                let tmp%15#0: bytes = (substring3 "abc" 0u bounded_index%3#0)
                let tmp%16#0: bool = (== tmp%15#0 "a")
                (assert tmp%16#0)
                let is_out_of_bounds%4#0: bool = 0u
                let bounded_offset%0#0: uint64 = (select 1u 3u is_out_of_bounds%4#0)
                let bounded_index%4#0: uint64 = (- 3u bounded_offset%0#0)
                let tmp%17#0: bytes = (substring3 "abc" 0u bounded_index%4#0)
                let tmp%18#0: bool = (== tmp%17#0 "ab")
                (assert tmp%18#0)
                let is_out_of_bounds%5#0: bool = 0u
                let bounded_offset%1#0: uint64 = (select 2u 3u is_out_of_bounds%5#0)
                let bounded_index%5#0: uint64 = (- 3u bounded_offset%1#0)
                let tmp%19#0: bytes = (substring3 "abc" bounded_index%5#0 3u)
                let tmp%20#0: bool = (== tmp%19#0 "bc")
                (assert tmp%20#0)
                let is_out_of_bounds%6#0: bool = 0u
                let bounded_offset%2#0: uint64 = (select 2u 3u is_out_of_bounds%6#0)
                let bounded_index%6#0: uint64 = (- 3u bounded_offset%2#0)
                let is_out_of_bounds%7#0: bool = 0u
                let bounded_offset%3#0: uint64 = (select 1u 3u is_out_of_bounds%7#0)
                let bounded_index%7#0: uint64 = (- 3u bounded_offset%3#0)
                let tmp%21#0: bytes = (substring3 "abc" bounded_index%6#0 bounded_index%7#0)
                let tmp%22#0: bool = (== tmp%21#0 "b")
                (assert tmp%22#0)
                let is_out_of_bounds%8#0: bool = 0u
                let bounded_index%8#0: uint64 = (select 1u 7u is_out_of_bounds%8#0)
                let bounded_index%9#0: uint64 = (- 7u bounded_index%8#0)
                let end_before_start%0#0: bool = (< bounded_index%9#0 bounded_index%8#0)
                let end%0#0: uint64 = (select bounded_index%9#0 bounded_index%8#0 end_before_start%0#0)
                let tmp%23#0: bytes = (substring3 "1234567" bounded_index%8#0 end%0#0)
                let tmp%24#0: bool = (== tmp%23#0 "23456")
                (assert tmp%24#0)
                let is_out_of_bounds%10#0: bool = 1u
                let bounded_offset%5#0: uint64 = (select 10u 3u is_out_of_bounds%10#0)
                let bounded_index%10#0: uint64 = (- 3u bounded_offset%5#0)
                let end_before_start%1#0: bool = (< bounded_offset%5#0 bounded_index%10#0)
                let end%1#0: uint64 = (select bounded_offset%5#0 bounded_index%10#0 end_before_start%1#0)
                let tmp%25#0: bytes = (substring3 "abc" bounded_index%10#0 end%1#0)
                let tmp%26#0: bool = (== tmp%25#0 "abc")
                (assert tmp%26#0)
                goto block@6
            block@6: // ternary_merge_L40
                let ternary_result%2#1: bytes = ""
                goto block@9
            block@9: // ternary_merge_L41
                let tmp%31#0: bool = (== ternary_result%2#1 "")
                (assert tmp%31#0)
                let ternary_result%3#0: bytes = ""
                goto block@12
            block@12: // ternary_merge_L42
                let tmp%33#0: bool = (== ternary_result%3#0 "")
                (assert tmp%33#0)
                goto block@18
            block@18: // ternary_merge_L44
                let ternary_result%6#0: bytes = "1"
                goto block@21
            block@21: // ternary_merge_L45
                let tmp%39#0: bool = (== ternary_result%6#0 "1")
                (assert tmp%39#0)
                let ternary_result%7#1: bytes = "1"
                goto block@24
            block@24: // ternary_merge_L46
                let tmp%41#0: bool = (== ternary_result%7#1 "1")
                (assert tmp%41#0)
                goto block@27
            block@27: // ternary_merge_L47
                let tmp%45#0: bool = 1u
                (assert tmp%45#0)
                let tmp%47#0: bool = 1u
                (assert tmp%47#0)
                let tmp%49#0: bool = 1u
                (assert tmp%49#0)
                let tmp%50#0: bool = 1u
                (assert tmp%50#0)
                let y#2: bytes = 0xff
                let tmp%51#0: bool = (== y#2 0xff)
                (assert tmp%51#0)
                let y#3: bytes = (b^ y#2 0xf0)
                let tmp%52#0: bool = (== y#3 0x0f)
                (assert tmp%52#0)
                test_cases.stubs.bytes.check_slicing_with_uint64("abc")
                test_cases.stubs.bytes.check_end_before_start_slicing("abc")
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L77
                let length%0#0: uint64 = (len abc#0)
                let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
                let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
                let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 length%0#0)
                let tmp%1#0: bool = (== tmp%0#0 "bc")
                (assert tmp%1#0)
                let end_before_start%0#0: bool = 0u
                let end%0#0: uint64 = (select bounded_index%0#0 bounded_index%0#0 end_before_start%0#0)
                let tmp%2#0: bytes = (substring3 abc#0 bounded_index%0#0 end%0#0)
                let tmp%3#0: bool = (== tmp%2#0 "")
                (assert tmp%3#0)
                let tmp%4#0: bytes = (substring3 abc#0 0u bounded_index%0#0)
                let tmp%5#0: bool = (== tmp%4#0 "a")
                (assert tmp%5#0)
                let tmp%6#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let length%3#0: uint64 = (len tmp%6#0)
                let is_out_of_bounds%4#0: bool = (>= 1u length%3#0)
                let bounded_index%4#0: uint64 = (select 1u length%3#0 is_out_of_bounds%4#0)
                let bounded_index%5#0: uint64 = (- length%3#0 bounded_index%4#0)
                let end_before_start%1#0: bool = (< bounded_index%5#0 bounded_index%4#0)
                let end%1#0: uint64 = (select bounded_index%5#0 bounded_index%4#0 end_before_start%1#0)
                let tmp%7#0: bytes = (substring3 tmp%6#0 bounded_index%4#0 end%1#0)
                let tmp%8#0: bool = (== tmp%7#0 "23456")
                (assert tmp%8#0)
                let is_out_of_bounds%6#0: bool = (>= 0u length%0#0)
                let bounded_index%6#0: uint64 = (select 0u length%0#0 is_out_of_bounds%6#0)
                let is_out_of_bounds%7#0: bool = (>= 10u length%0#0)
                let bounded_index%7#0: uint64 = (select 10u length%0#0 is_out_of_bounds%7#0)
                let tmp%9#0: bytes = (substring3 abc#0 bounded_index%6#0 bounded_index%7#0)
                let tmp%10#0: bool = (== tmp%9#0 "abc")
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L97
                (log "one_to_seven called")
                return "1234567"
        
        subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
            block@0: // L88
                let length%0#0: uint64 = (len abc#0)
                let is_out_of_bounds%0#0: bool = (>= 10u length%0#0)
                let bounded_index%0#0: uint64 = (select 10u length%0#0 is_out_of_bounds%0#0)
                let is_out_of_bounds%1#0: bool = (>= 1u length%0#0)
                let bounded_index%1#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0)
                let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
                let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
                let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 end%0#0)
                let tmp%1#0: bool = (== tmp%0#0 "")
                (assert tmp%1#0)
                let bounded_index%2#0: uint64 = (- length%0#0 bounded_index%0#0)
                let is_out_of_bounds%3#0: bool = (>= 12u length%0#0)
                let bounded_offset%1#0: uint64 = (select 12u length%0#0 is_out_of_bounds%3#0)
                let bounded_index%3#0: uint64 = (- length%0#0 bounded_offset%1#0)
                let end_before_start%1#0: bool = (< bounded_index%3#0 bounded_index%2#0)
                let end%1#0: uint64 = (select bounded_index%3#0 bounded_index%2#0 end_before_start%1#0)
                let tmp%2#0: bytes = (substring3 abc#0 bounded_index%2#0 end%1#0)
                let tmp%3#0: bool = (== tmp%2#0 "")
                (assert tmp%3#0)
                return 
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> bool:
            block@0: // L73
                return 1u