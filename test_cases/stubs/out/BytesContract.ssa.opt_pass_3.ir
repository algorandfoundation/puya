contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%15#0: uint64 = 1u
                let tmp%17#0: bytes = (substring3 "abc" tmp%15#0 3u)
                let tmp%18#0: uint64 = (== tmp%17#0 "bc")
                (assert tmp%18#0)
                let tmp%23#0: uint64 = 1u
                let tmp%27#0: uint64 = 1u
                let tmp%31#0: uint64 = 1u
                let tmp%35#0: uint64 = 1u
                let tmp%39#0: uint64 = 1u
                let tmp%40#0: uint64 = (> tmp%35#0 tmp%39#0)
                let tmp%41#0: uint64 = (select tmp%27#0 tmp%31#0 tmp%40#0)
                let tmp%42#0: bytes = (substring3 "abc" tmp%23#0 tmp%41#0)
                let tmp%43#0: uint64 = (== tmp%42#0 "")
                (assert tmp%43#0)
                let tmp%48#0: uint64 = 1u
                let tmp%49#0: bytes = (substring3 "abc" 0u tmp%48#0)
                let tmp%50#0: uint64 = (== tmp%49#0 "a")
                (assert tmp%50#0)
                let tmp%56#0: uint64 = 1u
                let tmp%57#0: uint64 = (- 3u tmp%56#0)
                let tmp%58#0: bytes = (substring3 "abc" 0u tmp%57#0)
                let tmp%59#0: uint64 = (== tmp%58#0 "ab")
                (assert tmp%59#0)
                let tmp%65#0: uint64 = 2u
                let tmp%66#0: uint64 = (- 3u tmp%65#0)
                let tmp%68#0: bytes = (substring3 "abc" tmp%66#0 3u)
                let tmp%69#0: uint64 = (== tmp%68#0 "bc")
                (assert tmp%69#0)
                let tmp%75#0: uint64 = 2u
                let tmp%76#0: uint64 = (- 3u tmp%75#0)
                let tmp%81#0: uint64 = 1u
                let tmp%82#0: uint64 = (- 3u tmp%81#0)
                let tmp%87#0: uint64 = 2u
                let tmp%88#0: uint64 = (- 3u tmp%87#0)
                let tmp%93#0: uint64 = 2u
                let tmp%94#0: uint64 = (- 3u tmp%93#0)
                let tmp%99#0: uint64 = 1u
                let tmp%100#0: uint64 = (- 3u tmp%99#0)
                let tmp%101#0: uint64 = (> tmp%94#0 tmp%100#0)
                let tmp%102#0: uint64 = (select tmp%82#0 tmp%88#0 tmp%101#0)
                let tmp%103#0: bytes = (substring3 "abc" tmp%76#0 tmp%102#0)
                let tmp%104#0: uint64 = (== tmp%103#0 "b")
                (assert tmp%104#0)
                let tmp%109#0: uint64 = 1u
                let tmp%114#0: uint64 = 1u
                let tmp%115#0: uint64 = (- 7u tmp%114#0)
                let tmp%119#0: uint64 = 1u
                let tmp%123#0: uint64 = 1u
                let tmp%128#0: uint64 = 1u
                let tmp%129#0: uint64 = (- 7u tmp%128#0)
                let tmp%130#0: uint64 = (> tmp%123#0 tmp%129#0)
                let tmp%131#0: uint64 = (select tmp%115#0 tmp%119#0 tmp%130#0)
                let tmp%132#0: bytes = (substring3 "1234567" tmp%109#0 tmp%131#0)
                let tmp%133#0: uint64 = (== tmp%132#0 "23456")
                (assert tmp%133#0)
                let tmp%139#0: uint64 = 3u
                let tmp%140#0: uint64 = (- 3u tmp%139#0)
                let tmp%144#0: uint64 = 3u
                let tmp%149#0: uint64 = 3u
                let tmp%150#0: uint64 = (- 3u tmp%149#0)
                let tmp%155#0: uint64 = 3u
                let tmp%156#0: uint64 = (- 3u tmp%155#0)
                let tmp%160#0: uint64 = 3u
                let tmp%161#0: uint64 = (> tmp%156#0 tmp%160#0)
                let tmp%162#0: uint64 = (select tmp%144#0 tmp%150#0 tmp%161#0)
                let tmp%163#0: bytes = (substring3 "abc" tmp%140#0 tmp%162#0)
                let tmp%164#0: uint64 = (== tmp%163#0 "abc")
                (assert tmp%164#0)
                let tmp%172#0: uint64 = 1u
                (assert tmp%172#0)
                let tmp%175#0: uint64 = 1u
                (assert tmp%175#0)
                let tmp%184#0: uint64 = 1u
                (assert tmp%184#0)
                let tmp%187#0: uint64 = 1u
                (assert tmp%187#0)
                let tmp%198#0: uint64 = 1u
                (assert tmp%198#0)
                let y#3: bytes = 0x0f
                let tmp%199#0: uint64 = (== y#3 0x0f)
                (assert tmp%199#0)
                test_cases.stubs.bytes.check_slicing_with_uint64("abc")
                test_cases.stubs.bytes.check_end_before_start_slicing("abc")
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L77
                let tmp%1#0: uint64 = (len abc#0)
                let tmp%4#0: uint64 = (< 1u tmp%1#0)
                let tmp%5#0: uint64 = (select tmp%1#0 1u tmp%4#0)
                let tmp%7#0: bytes = (substring3 abc#0 tmp%5#0 tmp%1#0)
                let tmp%8#0: uint64 = (== tmp%7#0 "bc")
                (assert tmp%8#0)
                let tmp%33#0: uint64 = tmp%5#0
                let tmp%34#0: bytes = (substring3 abc#0 tmp%5#0 tmp%33#0)
                let tmp%35#0: uint64 = (== tmp%34#0 "")
                (assert tmp%35#0)
                let tmp%42#0: bytes = (substring3 abc#0 0u tmp%5#0)
                let tmp%43#0: uint64 = (== tmp%42#0 "a")
                (assert tmp%43#0)
                let awst_tmp%44#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let tmp%45#0: uint64 = (len awst_tmp%44#0)
                let tmp%48#0: uint64 = (< 1u tmp%45#0)
                let tmp%49#0: uint64 = (select tmp%45#0 1u tmp%48#0)
                let tmp%55#0: uint64 = (- tmp%45#0 tmp%49#0)
                let tmp%70#0: uint64 = (> tmp%49#0 tmp%55#0)
                let tmp%71#0: uint64 = (select tmp%55#0 tmp%49#0 tmp%70#0)
                let tmp%72#0: bytes = (substring3 awst_tmp%44#0 tmp%49#0 tmp%71#0)
                let tmp%73#0: uint64 = (== tmp%72#0 "23456")
                (assert tmp%73#0)
                let tmp%79#0: uint64 = (select tmp%1#0 0u tmp%1#0)
                let tmp%83#0: uint64 = (< 10u tmp%1#0)
                let tmp%84#0: uint64 = (select tmp%1#0 10u tmp%83#0)
                let tmp%97#0: uint64 = (> tmp%79#0 tmp%84#0)
                let tmp%98#0: uint64 = (select tmp%84#0 tmp%79#0 tmp%97#0)
                let tmp%99#0: bytes = (substring3 abc#0 tmp%79#0 tmp%98#0)
                let tmp%100#0: uint64 = (== tmp%99#0 "abc")
                (assert tmp%100#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L97
                (log "one_to_seven called")
                return "1234567"
        
        subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
            block@0: // L88
                let tmp%1#0: uint64 = (len abc#0)
                let tmp%3#0: uint64 = (< 10u tmp%1#0)
                let tmp%4#0: uint64 = (select tmp%1#0 10u tmp%3#0)
                let tmp%7#0: uint64 = (< 1u tmp%1#0)
                let tmp%8#0: uint64 = (select tmp%1#0 1u tmp%7#0)
                let tmp%21#0: uint64 = (> tmp%4#0 tmp%8#0)
                let tmp%22#0: uint64 = (select tmp%8#0 tmp%4#0 tmp%21#0)
                let tmp%23#0: bytes = (substring3 abc#0 tmp%4#0 tmp%22#0)
                let tmp%24#0: uint64 = (== tmp%23#0 "")
                (assert tmp%24#0)
                let tmp%31#0: uint64 = (- tmp%1#0 tmp%4#0)
                let tmp%35#0: uint64 = (< 12u tmp%1#0)
                let tmp%36#0: uint64 = (select tmp%1#0 12u tmp%35#0)
                let tmp%37#0: uint64 = (- tmp%1#0 tmp%36#0)
                let tmp%56#0: uint64 = (> tmp%31#0 tmp%37#0)
                let tmp%57#0: uint64 = (select tmp%37#0 tmp%31#0 tmp%56#0)
                let tmp%58#0: bytes = (substring3 abc#0 tmp%31#0 tmp%57#0)
                let tmp%59#0: uint64 = (== tmp%58#0 "")
                (assert tmp%59#0)
                return 
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L73
                return 1u