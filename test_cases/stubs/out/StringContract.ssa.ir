contract test_cases.stubs.string.StringContract:
    program approval:
        subroutine test_cases.stubs.string.StringContract.approval_program() -> uint64:
            block@0: // L5
                let empty#0: bytes = ""
                let tmp%0#0: uint64 = (len empty#0)
                let tmp%1#0: uint64 = (! tmp%0#0)
                (assert tmp%1#0) // Empty bytes should be False
                let non_empty#0: bytes = " "
                let tmp%2#0: uint64 = (len non_empty#0)
                (assert tmp%2#0) // Non-empty bytes should be True
                let tmp%3#0: bytes = (concat "a" "b")
                let tmp%4#0: uint64 = (== tmp%3#0 "ab")
                (assert tmp%4#0)
                let tmp%5#0: bytes = (concat "a" "b")
                let tmp%6#0: uint64 = (== tmp%5#0 "ab")
                (assert tmp%6#0)
                let tmp%7#0: bytes = (concat "a" "b")
                let tmp%8#0: uint64 = (== tmp%7#0 "ab")
                (assert tmp%8#0)
                let tmp%9#0: uint64 = (!= empty#0 non_empty#0)
                (assert tmp%9#0)
                let c#0: bytes = "c"
                let c#1: bytes = (concat c#0 "d")
                let c#2: bytes = (concat c#1 "e")
                let tmp%10#0: uint64 = (== c#2 "cde")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = algopy_lib_bytes.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
                (assert tmp%11#0)
                let tmp%12#0: uint64 = algopy_lib_bytes.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0)
                let alpha#0: bytes = "abcdefg"
                let awst_tmp%0#0: bytes = ""
                let tmp%14#0: uint64 = (len awst_tmp%0#0)
                let awst_tmp%1#0: bytes = alpha#0
                let tmp%15#0: uint64 = (len awst_tmp%1#0)
                let tmp%16#0: uint64 = (> tmp%14#0 tmp%15#0)
                goto tmp%16#0 ? block@1 : block@2
            block@1: // ternary_true_L26
                let ternary_result%0#0: uint64 = 0u
                goto block@3
            block@2: // ternary_false_L26
                let tmp%17#0: uint64 = (len awst_tmp%0#0)
                let tmp%18#0: bytes = (extract3 awst_tmp%1#0 0u tmp%17#0)
                let ternary_result%0#1: uint64 = (== tmp%18#0 awst_tmp%0#0)
                goto block@3
            block@3: // ternary_merge_L26
                let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                (assert ternary_result%0#2)
                let awst_tmp%2#0: bytes = "a"
                let tmp%19#0: uint64 = (len awst_tmp%2#0)
                let awst_tmp%3#0: bytes = alpha#0
                let tmp%20#0: uint64 = (len awst_tmp%3#0)
                let tmp%21#0: uint64 = (> tmp%19#0 tmp%20#0)
                goto tmp%21#0 ? block@4 : block@5
            block@4: // ternary_true_L27
                let ternary_result%1#0: uint64 = 0u
                goto block@6
            block@5: // ternary_false_L27
                let tmp%22#0: uint64 = (len awst_tmp%2#0)
                let tmp%23#0: bytes = (extract3 awst_tmp%3#0 0u tmp%22#0)
                let ternary_result%1#1: uint64 = (== tmp%23#0 awst_tmp%2#0)
                goto block@6
            block@6: // ternary_merge_L27
                let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
                (assert ternary_result%1#2)
                let awst_tmp%4#0: bytes = "ab"
                let tmp%24#0: uint64 = (len awst_tmp%4#0)
                let awst_tmp%5#0: bytes = alpha#0
                let tmp%25#0: uint64 = (len awst_tmp%5#0)
                let tmp%26#0: uint64 = (> tmp%24#0 tmp%25#0)
                goto tmp%26#0 ? block@7 : block@8
            block@7: // ternary_true_L28
                let ternary_result%2#0: uint64 = 0u
                goto block@9
            block@8: // ternary_false_L28
                let tmp%27#0: uint64 = (len awst_tmp%4#0)
                let tmp%28#0: bytes = (extract3 awst_tmp%5#0 0u tmp%27#0)
                let ternary_result%2#1: uint64 = (== tmp%28#0 awst_tmp%4#0)
                goto block@9
            block@9: // ternary_merge_L28
                let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                (assert ternary_result%2#2)
                let awst_tmp%6#0: bytes = "b"
                let tmp%29#0: uint64 = (len awst_tmp%6#0)
                let awst_tmp%7#0: bytes = alpha#0
                let tmp%30#0: uint64 = (len awst_tmp%7#0)
                let tmp%31#0: uint64 = (> tmp%29#0 tmp%30#0)
                goto tmp%31#0 ? block@10 : block@11
            block@10: // ternary_true_L29
                let ternary_result%3#0: uint64 = 0u
                goto block@12
            block@11: // ternary_false_L29
                let tmp%32#0: uint64 = (len awst_tmp%6#0)
                let tmp%33#0: bytes = (extract3 awst_tmp%7#0 0u tmp%32#0)
                let ternary_result%3#1: uint64 = (== tmp%33#0 awst_tmp%6#0)
                goto block@12
            block@12: // ternary_merge_L29
                let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11)
                let tmp%34#0: uint64 = (! ternary_result%3#2)
                (assert tmp%34#0)
                let awst_tmp%8#0: bytes = alpha#0
                let tmp%35#0: uint64 = (len awst_tmp%8#0)
                let awst_tmp%9#0: bytes = alpha#0
                let tmp%36#0: uint64 = (len awst_tmp%9#0)
                let tmp%37#0: uint64 = (> tmp%35#0 tmp%36#0)
                goto tmp%37#0 ? block@13 : block@14
            block@13: // ternary_true_L30
                let ternary_result%4#0: uint64 = 0u
                goto block@15
            block@14: // ternary_false_L30
                let tmp%38#0: uint64 = (len awst_tmp%8#0)
                let tmp%39#0: bytes = (extract3 awst_tmp%9#0 0u tmp%38#0)
                let ternary_result%4#1: uint64 = (== tmp%39#0 awst_tmp%8#0)
                goto block@15
            block@15: // ternary_merge_L30
                let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14)
                (assert ternary_result%4#2)
                let awst_tmp%10#0: bytes = (concat alpha#0 "!")
                let tmp%40#0: uint64 = (len awst_tmp%10#0)
                let awst_tmp%11#0: bytes = alpha#0
                let tmp%41#0: uint64 = (len awst_tmp%11#0)
                let tmp%42#0: uint64 = (> tmp%40#0 tmp%41#0)
                goto tmp%42#0 ? block@16 : block@17
            block@16: // ternary_true_L31
                let ternary_result%5#0: uint64 = 0u
                goto block@18
            block@17: // ternary_false_L31
                let tmp%43#0: uint64 = (len awst_tmp%10#0)
                let tmp%44#0: bytes = (extract3 awst_tmp%11#0 0u tmp%43#0)
                let ternary_result%5#1: uint64 = (== tmp%44#0 awst_tmp%10#0)
                goto block@18
            block@18: // ternary_merge_L31
                let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17)
                let tmp%45#0: uint64 = (! ternary_result%5#2)
                (assert tmp%45#0)
                let awst_tmp%12#0: bytes = ""
                let tmp%46#0: uint64 = (len awst_tmp%12#0)
                let awst_tmp%13#0: bytes = alpha#0
                let tmp%47#0: uint64 = (len awst_tmp%13#0)
                let tmp%48#0: uint64 = (> tmp%46#0 tmp%47#0)
                goto tmp%48#0 ? block@19 : block@20
            block@19: // ternary_true_L33
                let ternary_result%6#0: uint64 = 0u
                goto block@21
            block@20: // ternary_false_L33
                let tmp%49#0: uint64 = (len awst_tmp%13#0)
                let tmp%50#0: uint64 = (len awst_tmp%12#0)
                let tmp%51#0: uint64 = (- tmp%49#0 tmp%50#0)
                let tmp%52#0: uint64 = (len awst_tmp%12#0)
                let tmp%53#0: bytes = (extract3 awst_tmp%13#0 tmp%51#0 tmp%52#0)
                let ternary_result%6#1: uint64 = (== tmp%53#0 awst_tmp%12#0)
                goto block@21
            block@21: // ternary_merge_L33
                let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20)
                (assert ternary_result%6#2)
                let awst_tmp%14#0: bytes = "g"
                let tmp%54#0: uint64 = (len awst_tmp%14#0)
                let awst_tmp%15#0: bytes = alpha#0
                let tmp%55#0: uint64 = (len awst_tmp%15#0)
                let tmp%56#0: uint64 = (> tmp%54#0 tmp%55#0)
                goto tmp%56#0 ? block@22 : block@23
            block@22: // ternary_true_L34
                let ternary_result%7#0: uint64 = 0u
                goto block@24
            block@23: // ternary_false_L34
                let tmp%57#0: uint64 = (len awst_tmp%15#0)
                let tmp%58#0: uint64 = (len awst_tmp%14#0)
                let tmp%59#0: uint64 = (- tmp%57#0 tmp%58#0)
                let tmp%60#0: uint64 = (len awst_tmp%14#0)
                let tmp%61#0: bytes = (extract3 awst_tmp%15#0 tmp%59#0 tmp%60#0)
                let ternary_result%7#1: uint64 = (== tmp%61#0 awst_tmp%14#0)
                goto block@24
            block@24: // ternary_merge_L34
                let ternary_result%7#2: uint64 = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23)
                (assert ternary_result%7#2)
                let awst_tmp%16#0: bytes = "fg"
                let tmp%62#0: uint64 = (len awst_tmp%16#0)
                let awst_tmp%17#0: bytes = alpha#0
                let tmp%63#0: uint64 = (len awst_tmp%17#0)
                let tmp%64#0: uint64 = (> tmp%62#0 tmp%63#0)
                goto tmp%64#0 ? block@25 : block@26
            block@25: // ternary_true_L35
                let ternary_result%8#0: uint64 = 0u
                goto block@27
            block@26: // ternary_false_L35
                let tmp%65#0: uint64 = (len awst_tmp%17#0)
                let tmp%66#0: uint64 = (len awst_tmp%16#0)
                let tmp%67#0: uint64 = (- tmp%65#0 tmp%66#0)
                let tmp%68#0: uint64 = (len awst_tmp%16#0)
                let tmp%69#0: bytes = (extract3 awst_tmp%17#0 tmp%67#0 tmp%68#0)
                let ternary_result%8#1: uint64 = (== tmp%69#0 awst_tmp%16#0)
                goto block@27
            block@27: // ternary_merge_L35
                let ternary_result%8#2: uint64 = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26)
                (assert ternary_result%8#2)
                let awst_tmp%18#0: bytes = "f"
                let tmp%70#0: uint64 = (len awst_tmp%18#0)
                let awst_tmp%19#0: bytes = alpha#0
                let tmp%71#0: uint64 = (len awst_tmp%19#0)
                let tmp%72#0: uint64 = (> tmp%70#0 tmp%71#0)
                goto tmp%72#0 ? block@28 : block@29
            block@28: // ternary_true_L36
                let ternary_result%9#0: uint64 = 0u
                goto block@30
            block@29: // ternary_false_L36
                let tmp%73#0: uint64 = (len awst_tmp%19#0)
                let tmp%74#0: uint64 = (len awst_tmp%18#0)
                let tmp%75#0: uint64 = (- tmp%73#0 tmp%74#0)
                let tmp%76#0: uint64 = (len awst_tmp%18#0)
                let tmp%77#0: bytes = (extract3 awst_tmp%19#0 tmp%75#0 tmp%76#0)
                let ternary_result%9#1: uint64 = (== tmp%77#0 awst_tmp%18#0)
                goto block@30
            block@30: // ternary_merge_L36
                let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@28, ternary_result%9#1 <- block@29)
                let tmp%78#0: uint64 = (! ternary_result%9#2)
                (assert tmp%78#0)
                let awst_tmp%20#0: bytes = alpha#0
                let tmp%79#0: uint64 = (len awst_tmp%20#0)
                let awst_tmp%21#0: bytes = alpha#0
                let tmp%80#0: uint64 = (len awst_tmp%21#0)
                let tmp%81#0: uint64 = (> tmp%79#0 tmp%80#0)
                goto tmp%81#0 ? block@31 : block@32
            block@31: // ternary_true_L37
                let ternary_result%10#0: uint64 = 0u
                goto block@33
            block@32: // ternary_false_L37
                let tmp%82#0: uint64 = (len awst_tmp%21#0)
                let tmp%83#0: uint64 = (len awst_tmp%20#0)
                let tmp%84#0: uint64 = (- tmp%82#0 tmp%83#0)
                let tmp%85#0: uint64 = (len awst_tmp%20#0)
                let tmp%86#0: bytes = (extract3 awst_tmp%21#0 tmp%84#0 tmp%85#0)
                let ternary_result%10#1: uint64 = (== tmp%86#0 awst_tmp%20#0)
                goto block@33
            block@33: // ternary_merge_L37
                let ternary_result%10#2: uint64 = φ(ternary_result%10#0 <- block@31, ternary_result%10#1 <- block@32)
                (assert ternary_result%10#2)
                let awst_tmp%22#0: bytes = (concat "!" alpha#0)
                let tmp%87#0: uint64 = (len awst_tmp%22#0)
                let awst_tmp%23#0: bytes = alpha#0
                let tmp%88#0: uint64 = (len awst_tmp%23#0)
                let tmp%89#0: uint64 = (> tmp%87#0 tmp%88#0)
                goto tmp%89#0 ? block@34 : block@35
            block@34: // ternary_true_L38
                let ternary_result%11#0: uint64 = 0u
                goto block@36
            block@35: // ternary_false_L38
                let tmp%90#0: uint64 = (len awst_tmp%23#0)
                let tmp%91#0: uint64 = (len awst_tmp%22#0)
                let tmp%92#0: uint64 = (- tmp%90#0 tmp%91#0)
                let tmp%93#0: uint64 = (len awst_tmp%22#0)
                let tmp%94#0: bytes = (extract3 awst_tmp%23#0 tmp%92#0 tmp%93#0)
                let ternary_result%11#1: uint64 = (== tmp%94#0 awst_tmp%22#0)
                goto block@36
            block@36: // ternary_merge_L38
                let ternary_result%11#2: uint64 = φ(ternary_result%11#0 <- block@34, ternary_result%11#1 <- block@35)
                let tmp%95#0: uint64 = (! ternary_result%11#2)
                (assert tmp%95#0)
                let d#0: bytes = "d"
                let e#0: bytes = "e"
                let f#0: bytes = "f"
                let (awst_tmp%24#0: bytes, awst_tmp%25#0: bytes, awst_tmp%26#0: bytes) = (d#0, e#0, f#0)
                let awst_tmp%27#0: bytes = "."
                let tmp%96#0: bytes = (concat awst_tmp%24#0 awst_tmp%27#0)
                let tmp%97#0: bytes = (concat tmp%96#0 awst_tmp%25#0)
                let tmp%98#0: bytes = (concat tmp%97#0 awst_tmp%27#0)
                let tmp%99#0: bytes = (concat tmp%98#0 awst_tmp%26#0)
                let tmp%100#0: uint64 = (== tmp%99#0 "d.e.f")
                (assert tmp%100#0)
                let (awst_tmp%28#0: bytes, awst_tmp%29#0: bytes, awst_tmp%30#0: bytes) = (d#0, e#0, f#0)
                let awst_tmp%31#0: bytes = ""
                let tmp%101#0: bytes = (concat awst_tmp%28#0 awst_tmp%31#0)
                let tmp%102#0: bytes = (concat tmp%101#0 awst_tmp%29#0)
                let tmp%103#0: bytes = (concat tmp%102#0 awst_tmp%31#0)
                let tmp%104#0: bytes = (concat tmp%103#0 awst_tmp%30#0)
                let tmp%105#0: uint64 = (== tmp%104#0 "def")
                (assert tmp%105#0)
                let awst_tmp%32#0: bytes = (d#0)
                let tmp%106#0: uint64 = (== awst_tmp%32#0 "d")
                (assert tmp%106#0)
                let awst_tmp%33#0: bytes = (d#0)
                let tmp%107#0: uint64 = (== awst_tmp%33#0 "d")
                (assert tmp%107#0)
                return 1u
        
        subroutine algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: uint64 = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L11
                let tmp%4#0: uint64 = (len item#0)
                let tmp%5#0: uint64 = (+ start#1 tmp%4#0)
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%5#0)
                let tmp%7#0: uint64 = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L12
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.stubs.string.StringContract.clear_state_program() -> uint64:
            block@0: // L48
                return 1u