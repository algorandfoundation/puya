contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let tmp%3#0: uint64 = 15u
                (assert tmp%3#0) // Non empty bytes should be Truthy
                let tmp%4#0: uint64 = 0u
                let tmp%5#0: bool = (! tmp%4#0)
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%6#0: bytes = "ab"
                let tmp%7#0: bool = (== tmp%6#0 "ab")
                (assert tmp%7#0)
                let c#1: bytes = "cd"
                let tmp%8#0: bool = (== c#1 "cd")
                (assert tmp%8#0)
                let tmp%9#0: bytes = "a"
                let tmp%10#0: bool = (== tmp%9#0 "a")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = 3u
                let tmp%12#0: uint64 = 3u
                let tmp%13#0: bool = (< 1u tmp%12#0)
                let tmp%14#0: uint64 = (select tmp%11#0 1u tmp%13#0)
                let base_length%0#0: uint64 = 3u
                let tmp%15#0: bytes = (substring3 "abc" tmp%14#0 base_length%0#0)
                let tmp%16#0: bool = (== tmp%15#0 "bc")
                (assert tmp%16#0)
                let tmp%17#0: uint64 = 3u
                let tmp%18#0: uint64 = 3u
                let tmp%19#0: bool = (< 1u tmp%18#0)
                let tmp%20#0: uint64 = (select tmp%17#0 1u tmp%19#0)
                let tmp%21#0: uint64 = 3u
                let tmp%22#0: uint64 = 3u
                let tmp%23#0: bool = (< 1u tmp%22#0)
                let tmp%24#0: uint64 = (select tmp%21#0 1u tmp%23#0)
                let tmp%25#0: uint64 = 3u
                let tmp%26#0: uint64 = 3u
                let tmp%27#0: bool = (< 1u tmp%26#0)
                let tmp%28#0: uint64 = (select tmp%25#0 1u tmp%27#0)
                let tmp%29#0: uint64 = 3u
                let tmp%30#0: uint64 = 3u
                let tmp%31#0: bool = (< 1u tmp%30#0)
                let tmp%32#0: uint64 = (select tmp%29#0 1u tmp%31#0)
                let tmp%33#0: uint64 = 3u
                let tmp%34#0: uint64 = 3u
                let tmp%35#0: bool = (< 1u tmp%34#0)
                let tmp%36#0: uint64 = (select tmp%33#0 1u tmp%35#0)
                let tmp%37#0: bool = (> tmp%32#0 tmp%36#0)
                let tmp%38#0: uint64 = (select tmp%24#0 tmp%28#0 tmp%37#0)
                let tmp%39#0: bytes = (substring3 "abc" tmp%20#0 tmp%38#0)
                let tmp%40#0: bool = (== tmp%39#0 "")
                (assert tmp%40#0)
                let tmp%41#0: uint64 = 3u
                let tmp%42#0: uint64 = 3u
                let tmp%43#0: bool = (< 1u tmp%42#0)
                let tmp%44#0: uint64 = (select tmp%41#0 1u tmp%43#0)
                let tmp%45#0: bytes = (substring3 "abc" 0u tmp%44#0)
                let tmp%46#0: bool = (== tmp%45#0 "a")
                (assert tmp%46#0)
                let tmp%47#0: uint64 = 3u
                let tmp%48#0: uint64 = 3u
                let tmp%49#0: uint64 = 3u
                let tmp%50#0: bool = (< 1u tmp%49#0)
                let tmp%51#0: uint64 = (select tmp%48#0 1u tmp%50#0)
                let tmp%52#0: uint64 = (- tmp%47#0 tmp%51#0)
                let tmp%53#0: bytes = (substring3 "abc" 0u tmp%52#0)
                let tmp%54#0: bool = (== tmp%53#0 "ab")
                (assert tmp%54#0)
                let tmp%55#0: uint64 = 3u
                let tmp%56#0: uint64 = 3u
                let tmp%57#0: uint64 = 3u
                let tmp%58#0: bool = (< 2u tmp%57#0)
                let tmp%59#0: uint64 = (select tmp%56#0 2u tmp%58#0)
                let tmp%60#0: uint64 = (- tmp%55#0 tmp%59#0)
                let base_length%1#0: uint64 = 3u
                let tmp%61#0: bytes = (substring3 "abc" tmp%60#0 base_length%1#0)
                let tmp%62#0: bool = (== tmp%61#0 "bc")
                (assert tmp%62#0)
                let tmp%63#0: uint64 = 3u
                let tmp%64#0: uint64 = 3u
                let tmp%65#0: uint64 = 3u
                let tmp%66#0: bool = (< 2u tmp%65#0)
                let tmp%67#0: uint64 = (select tmp%64#0 2u tmp%66#0)
                let tmp%68#0: uint64 = (- tmp%63#0 tmp%67#0)
                let tmp%69#0: uint64 = 3u
                let tmp%70#0: uint64 = 3u
                let tmp%71#0: uint64 = 3u
                let tmp%72#0: bool = (< 1u tmp%71#0)
                let tmp%73#0: uint64 = (select tmp%70#0 1u tmp%72#0)
                let tmp%74#0: uint64 = (- tmp%69#0 tmp%73#0)
                let tmp%75#0: uint64 = 3u
                let tmp%76#0: uint64 = 3u
                let tmp%77#0: uint64 = 3u
                let tmp%78#0: bool = (< 2u tmp%77#0)
                let tmp%79#0: uint64 = (select tmp%76#0 2u tmp%78#0)
                let tmp%80#0: uint64 = (- tmp%75#0 tmp%79#0)
                let tmp%81#0: uint64 = 3u
                let tmp%82#0: uint64 = 3u
                let tmp%83#0: uint64 = 3u
                let tmp%84#0: bool = (< 2u tmp%83#0)
                let tmp%85#0: uint64 = (select tmp%82#0 2u tmp%84#0)
                let tmp%86#0: uint64 = (- tmp%81#0 tmp%85#0)
                let tmp%87#0: uint64 = 3u
                let tmp%88#0: uint64 = 3u
                let tmp%89#0: uint64 = 3u
                let tmp%90#0: bool = (< 1u tmp%89#0)
                let tmp%91#0: uint64 = (select tmp%88#0 1u tmp%90#0)
                let tmp%92#0: uint64 = (- tmp%87#0 tmp%91#0)
                let tmp%93#0: bool = (> tmp%86#0 tmp%92#0)
                let tmp%94#0: uint64 = (select tmp%74#0 tmp%80#0 tmp%93#0)
                let tmp%95#0: bytes = (substring3 "abc" tmp%68#0 tmp%94#0)
                let tmp%96#0: bool = (== tmp%95#0 "b")
                (assert tmp%96#0)
                let tmp%97#0: uint64 = 7u
                let tmp%98#0: uint64 = 7u
                let tmp%99#0: bool = (< 1u tmp%98#0)
                let tmp%100#0: uint64 = (select tmp%97#0 1u tmp%99#0)
                let tmp%101#0: uint64 = 7u
                let tmp%102#0: uint64 = 7u
                let tmp%103#0: uint64 = 7u
                let tmp%104#0: bool = (< 1u tmp%103#0)
                let tmp%105#0: uint64 = (select tmp%102#0 1u tmp%104#0)
                let tmp%106#0: uint64 = (- tmp%101#0 tmp%105#0)
                let tmp%107#0: uint64 = 7u
                let tmp%108#0: uint64 = 7u
                let tmp%109#0: bool = (< 1u tmp%108#0)
                let tmp%110#0: uint64 = (select tmp%107#0 1u tmp%109#0)
                let tmp%111#0: uint64 = 7u
                let tmp%112#0: uint64 = 7u
                let tmp%113#0: bool = (< 1u tmp%112#0)
                let tmp%114#0: uint64 = (select tmp%111#0 1u tmp%113#0)
                let tmp%115#0: uint64 = 7u
                let tmp%116#0: uint64 = 7u
                let tmp%117#0: uint64 = 7u
                let tmp%118#0: bool = (< 1u tmp%117#0)
                let tmp%119#0: uint64 = (select tmp%116#0 1u tmp%118#0)
                let tmp%120#0: uint64 = (- tmp%115#0 tmp%119#0)
                let tmp%121#0: bool = (> tmp%114#0 tmp%120#0)
                let tmp%122#0: uint64 = (select tmp%106#0 tmp%110#0 tmp%121#0)
                let tmp%123#0: bytes = (substring3 "1234567" tmp%100#0 tmp%122#0)
                let tmp%124#0: bool = (== tmp%123#0 "23456")
                (assert tmp%124#0)
                let tmp%125#0: uint64 = 3u
                let tmp%126#0: uint64 = 3u
                let tmp%127#0: uint64 = 3u
                let tmp%128#0: bool = (< 10u tmp%127#0)
                let tmp%129#0: uint64 = (select tmp%126#0 10u tmp%128#0)
                let tmp%130#0: uint64 = (- tmp%125#0 tmp%129#0)
                let tmp%131#0: uint64 = 3u
                let tmp%132#0: uint64 = 3u
                let tmp%133#0: bool = (< 10u tmp%132#0)
                let tmp%134#0: uint64 = (select tmp%131#0 10u tmp%133#0)
                let tmp%135#0: uint64 = 3u
                let tmp%136#0: uint64 = 3u
                let tmp%137#0: uint64 = 3u
                let tmp%138#0: bool = (< 10u tmp%137#0)
                let tmp%139#0: uint64 = (select tmp%136#0 10u tmp%138#0)
                let tmp%140#0: uint64 = (- tmp%135#0 tmp%139#0)
                let tmp%141#0: uint64 = 3u
                let tmp%142#0: uint64 = 3u
                let tmp%143#0: uint64 = 3u
                let tmp%144#0: bool = (< 10u tmp%143#0)
                let tmp%145#0: uint64 = (select tmp%142#0 10u tmp%144#0)
                let tmp%146#0: uint64 = (- tmp%141#0 tmp%145#0)
                let tmp%147#0: uint64 = 3u
                let tmp%148#0: uint64 = 3u
                let tmp%149#0: bool = (< 10u tmp%148#0)
                let tmp%150#0: uint64 = (select tmp%147#0 10u tmp%149#0)
                let tmp%151#0: bool = (> tmp%146#0 tmp%150#0)
                let tmp%152#0: uint64 = (select tmp%134#0 tmp%140#0 tmp%151#0)
                let tmp%153#0: bytes = (substring3 "abc" tmp%130#0 tmp%152#0)
                let tmp%154#0: bool = (== tmp%153#0 "abc")
                (assert tmp%154#0)
                let tmp%155#0: uint64 = 1u
                goto tmp%155#0 ? block@2 : block@1
            block@1: // ternary_true_L38
                let ternary_result%0#0: bytes = "1"
                goto block@3
            block@2: // ternary_false_L38
                let ternary_result%0#1: bytes = "1"
                goto block@3
            block@3: // ternary_merge_L38
                let x#0: bool = 1u
                (assert x#0)
                let tmp%156#0: uint64 = 1u
                goto tmp%156#0 ? block@5 : block@4
            block@4: // ternary_true_L40
                let ternary_result%1#0: bytes = "1"
                goto block@6
            block@5: // ternary_false_L40
                let ternary_result%1#1: bytes = "1"
                goto block@6
            block@6: // ternary_merge_L40
                let tmp%157#0: bool = 1u
                (assert tmp%157#0)
                let tmp%158#0: uint64 = 1u
                goto tmp%158#0 ? block@8 : block@7
            block@7: // ternary_true_L41
                let ternary_result%2#0: bytes = "1"
                goto block@9
            block@8: // ternary_false_L41
                let ternary_result%2#1: bytes = ""
                goto block@9
            block@9: // ternary_merge_L41
                let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                let tmp%159#0: bool = (== ternary_result%2#2 "")
                (assert tmp%159#0)
                let tmp%160#0: uint64 = 0u
                goto tmp%160#0 ? block@11 : block@10
            block@10: // ternary_true_L42
                let ternary_result%3#0: bytes = ""
                goto block@12
            block@11: // ternary_false_L42
                let ternary_result%3#1: bytes = "1"
                goto block@12
            block@12: // ternary_merge_L42
                let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11)
                let tmp%161#0: bool = (== ternary_result%3#2 "")
                (assert tmp%161#0)
                let tmp%162#0: uint64 = 0u
                goto tmp%162#0 ? block@14 : block@13
            block@13: // ternary_true_L43
                let ternary_result%4#0: bytes = ""
                goto block@15
            block@14: // ternary_false_L43
                let ternary_result%4#1: bytes = ""
                goto block@15
            block@15: // ternary_merge_L43
                let tmp%163#0: bool = 1u
                (assert tmp%163#0)
                let tmp%164#0: uint64 = 1u
                goto tmp%164#0 ? block@16 : block@17
            block@16: // ternary_true_L44
                let ternary_result%5#0: bytes = "1"
                goto block@18
            block@17: // ternary_false_L44
                let ternary_result%5#1: bytes = "1"
                goto block@18
            block@18: // ternary_merge_L44
                let tmp%165#0: bool = 1u
                (assert tmp%165#0)
                let tmp%166#0: uint64 = 1u
                goto tmp%166#0 ? block@19 : block@20
            block@19: // ternary_true_L45
                let ternary_result%6#0: bytes = "1"
                goto block@21
            block@20: // ternary_false_L45
                let ternary_result%6#1: bytes = ""
                goto block@21
            block@21: // ternary_merge_L45
                let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20)
                let tmp%167#0: bool = (== ternary_result%6#2 "1")
                (assert tmp%167#0)
                let tmp%168#0: uint64 = 0u
                goto tmp%168#0 ? block@22 : block@23
            block@22: // ternary_true_L46
                let ternary_result%7#0: bytes = ""
                goto block@24
            block@23: // ternary_false_L46
                let ternary_result%7#1: bytes = "1"
                goto block@24
            block@24: // ternary_merge_L46
                let ternary_result%7#2: bytes = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23)
                let tmp%169#0: bool = (== ternary_result%7#2 "1")
                (assert tmp%169#0)
                let tmp%170#0: uint64 = 0u
                goto tmp%170#0 ? block@25 : block@26
            block@25: // ternary_true_L47
                let ternary_result%8#0: bytes = ""
                goto block@27
            block@26: // ternary_false_L47
                let ternary_result%8#1: bytes = ""
                goto block@27
            block@27: // ternary_merge_L47
                let tmp%171#0: bool = 1u
                (assert tmp%171#0)
                let tmp%172#0: bytes = 0x00
                let tmp%173#0: bool = (== tmp%172#0 0x00)
                (assert tmp%173#0)
                let tmp%174#0: bytes = 0xff
                let tmp%175#0: bool = (== tmp%174#0 0xff)
                (assert tmp%175#0)
                let tmp%176#0: bytes = 0xf0
                let tmp%177#0: bool = (== tmp%176#0 0xf0)
                (assert tmp%177#0)
                let y#1: bytes = 0x00
                let tmp%178#0: bool = (== y#1 0x00)
                (assert tmp%178#0)
                let y#2: bytes = (b| y#1 0xff)
                let tmp%179#0: bool = (== y#2 0xff)
                (assert tmp%179#0)
                let y#3: bytes = (b^ y#2 0xf0)
                let tmp%180#0: bool = (== y#3 0x0f)
                (assert tmp%180#0)
                test_cases.stubs.bytes.check_slicing_with_uint64("abc")
                test_cases.stubs.bytes.check_end_before_start_slicing("abc")
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L77
                let tmp%0#0: uint64 = (len abc#0)
                let tmp%2#0: bool = (< 1u tmp%0#0)
                let tmp%3#0: uint64 = (select tmp%0#0 1u tmp%2#0)
                let tmp%4#0: bytes = (substring3 abc#0 tmp%3#0 tmp%0#0)
                let tmp%5#0: bool = (== tmp%4#0 "bc")
                (assert tmp%5#0)
                let tmp%26#0: bool = (> tmp%3#0 tmp%3#0)
                let tmp%27#0: uint64 = (select tmp%3#0 tmp%3#0 tmp%26#0)
                let tmp%28#0: bytes = (substring3 abc#0 tmp%3#0 tmp%27#0)
                let tmp%29#0: bool = (== tmp%28#0 "")
                (assert tmp%29#0)
                let tmp%34#0: bytes = (substring3 abc#0 0u tmp%3#0)
                let tmp%35#0: bool = (== tmp%34#0 "a")
                (assert tmp%35#0)
                let awst_tmp%7#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let tmp%36#0: uint64 = (len awst_tmp%7#0)
                let tmp%38#0: bool = (< 1u tmp%36#0)
                let tmp%39#0: uint64 = (select tmp%36#0 1u tmp%38#0)
                let tmp%45#0: uint64 = (- tmp%36#0 tmp%39#0)
                let tmp%60#0: bool = (> tmp%39#0 tmp%45#0)
                let tmp%61#0: uint64 = (select tmp%45#0 tmp%39#0 tmp%60#0)
                let tmp%62#0: bytes = (substring3 awst_tmp%7#0 tmp%39#0 tmp%61#0)
                let tmp%63#0: bool = (== tmp%62#0 "23456")
                (assert tmp%63#0)
                let tmp%67#0: uint64 = (select tmp%0#0 0u tmp%0#0)
                let tmp%70#0: bool = (< 10u tmp%0#0)
                let tmp%71#0: uint64 = (select tmp%0#0 10u tmp%70#0)
                let tmp%84#0: bool = (> tmp%67#0 tmp%71#0)
                let tmp%85#0: uint64 = (select tmp%71#0 tmp%67#0 tmp%84#0)
                let tmp%86#0: bytes = (substring3 abc#0 tmp%67#0 tmp%85#0)
                let tmp%87#0: bool = (== tmp%86#0 "abc")
                (assert tmp%87#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L97
                (log "one_to_seven called")
                return "1234567"
        
        subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
            block@0: // L88
                let tmp%0#0: uint64 = (len abc#0)
                let tmp%2#0: bool = (< 10u tmp%0#0)
                let tmp%3#0: uint64 = (select tmp%0#0 10u tmp%2#0)
                let tmp%6#0: bool = (< 1u tmp%0#0)
                let tmp%7#0: uint64 = (select tmp%0#0 1u tmp%6#0)
                let tmp%20#0: bool = (> tmp%3#0 tmp%7#0)
                let tmp%21#0: uint64 = (select tmp%7#0 tmp%3#0 tmp%20#0)
                let tmp%22#0: bytes = (substring3 abc#0 tmp%3#0 tmp%21#0)
                let tmp%23#0: bool = (== tmp%22#0 "")
                (assert tmp%23#0)
                let tmp%29#0: uint64 = (- tmp%0#0 tmp%3#0)
                let tmp%33#0: bool = (< 12u tmp%0#0)
                let tmp%34#0: uint64 = (select tmp%0#0 12u tmp%33#0)
                let tmp%35#0: uint64 = (- tmp%0#0 tmp%34#0)
                let tmp%54#0: bool = (> tmp%29#0 tmp%35#0)
                let tmp%55#0: uint64 = (select tmp%35#0 tmp%29#0 tmp%54#0)
                let tmp%56#0: bytes = (substring3 abc#0 tmp%29#0 tmp%55#0)
                let tmp%57#0: bool = (== tmp%56#0 "")
                (assert tmp%57#0)
                return 
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> bool:
            block@0: // L73
                return 1u