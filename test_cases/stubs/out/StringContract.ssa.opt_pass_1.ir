contract test_cases.stubs.string.StringContract:
    program approval:
        subroutine test_cases.stubs.string.StringContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = 0u
                let tmp%1#0: uint64 = (! tmp%0#0)
                (assert tmp%1#0) // Empty bytes should be False
                let tmp%2#0: uint64 = 1u
                (assert tmp%2#0) // Non-empty bytes should be True
                let tmp%3#0: bytes = "ab"
                let tmp%4#0: uint64 = (== tmp%3#0 "ab")
                (assert tmp%4#0)
                let tmp%5#0: bytes = "ab"
                let tmp%6#0: uint64 = (== tmp%5#0 "ab")
                (assert tmp%6#0)
                let tmp%7#0: bytes = "ab"
                let tmp%8#0: uint64 = (== tmp%7#0 "ab")
                (assert tmp%8#0)
                let tmp%9#0: uint64 = 1u
                (assert tmp%9#0)
                let c#1: bytes = "cd"
                let c#2: bytes = (concat c#1 "e")
                let tmp%10#0: uint64 = (== c#2 "cde")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = puyapy_lib_bytes.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
                (assert tmp%11#0)
                let tmp%12#0: uint64 = puyapy_lib_bytes.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0)
                let tmp%15#0: uint64 = 0u
                let tmp%17#0: uint64 = 7u
                let tmp%18#0: uint64 = (> tmp%15#0 tmp%17#0)
                goto tmp%18#0 ? block@1 : block@2
            block@1: // ternary_true_L26
                let ternary_result%19#0: uint64 = 0u
                goto block@3
            block@2: // ternary_false_L26
                let tmp%20#0: uint64 = 0u
                let tmp%21#0: bytes = (extract3 "abcdefg" 0u tmp%20#0)
                let ternary_result%19#1: uint64 = (== tmp%21#0 "")
                goto block@3
            block@3: // ternary_merge_L26
                let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@1, ternary_result%19#1 <- block@2)
                (assert ternary_result%19#2)
                let tmp%23#0: uint64 = 1u
                let tmp%25#0: uint64 = 7u
                let tmp%26#0: uint64 = (> tmp%23#0 tmp%25#0)
                goto tmp%26#0 ? block@4 : block@5
            block@4: // ternary_true_L27
                let ternary_result%27#0: uint64 = 0u
                goto block@6
            block@5: // ternary_false_L27
                let tmp%28#0: uint64 = 1u
                let tmp%29#0: bytes = (extract3 "abcdefg" 0u tmp%28#0)
                let ternary_result%27#1: uint64 = (== tmp%29#0 "a")
                goto block@6
            block@6: // ternary_merge_L27
                let ternary_result%27#2: uint64 = φ(ternary_result%27#0 <- block@4, ternary_result%27#1 <- block@5)
                (assert ternary_result%27#2)
                let tmp%31#0: uint64 = 2u
                let tmp%33#0: uint64 = 7u
                let tmp%34#0: uint64 = (> tmp%31#0 tmp%33#0)
                goto tmp%34#0 ? block@7 : block@8
            block@7: // ternary_true_L28
                let ternary_result%35#0: uint64 = 0u
                goto block@9
            block@8: // ternary_false_L28
                let tmp%36#0: uint64 = 2u
                let tmp%37#0: bytes = (extract3 "abcdefg" 0u tmp%36#0)
                let ternary_result%35#1: uint64 = (== tmp%37#0 "ab")
                goto block@9
            block@9: // ternary_merge_L28
                let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@7, ternary_result%35#1 <- block@8)
                (assert ternary_result%35#2)
                let tmp%39#0: uint64 = 1u
                let tmp%41#0: uint64 = 7u
                let tmp%42#0: uint64 = (> tmp%39#0 tmp%41#0)
                goto tmp%42#0 ? block@10 : block@11
            block@10: // ternary_true_L29
                let ternary_result%43#0: uint64 = 0u
                goto block@12
            block@11: // ternary_false_L29
                let tmp%44#0: uint64 = 1u
                let tmp%45#0: bytes = (extract3 "abcdefg" 0u tmp%44#0)
                let ternary_result%43#1: uint64 = (== tmp%45#0 "b")
                goto block@12
            block@12: // ternary_merge_L29
                let ternary_result%43#2: uint64 = φ(ternary_result%43#0 <- block@10, ternary_result%43#1 <- block@11)
                let tmp%46#0: uint64 = (! ternary_result%43#2)
                (assert tmp%46#0)
                let tmp%48#0: uint64 = 7u
                let tmp%50#0: uint64 = 7u
                let tmp%51#0: uint64 = (> tmp%48#0 tmp%50#0)
                goto tmp%51#0 ? block@13 : block@14
            block@13: // ternary_true_L30
                let ternary_result%52#0: uint64 = 0u
                goto block@15
            block@14: // ternary_false_L30
                let tmp%53#0: uint64 = 7u
                let tmp%54#0: bytes = (extract3 "abcdefg" 0u tmp%53#0)
                let ternary_result%52#1: uint64 = (== tmp%54#0 "abcdefg")
                goto block@15
            block@15: // ternary_merge_L30
                let ternary_result%52#2: uint64 = φ(ternary_result%52#0 <- block@13, ternary_result%52#1 <- block@14)
                (assert ternary_result%52#2)
                let awst_tmp%55#0: bytes = "abcdefg!"
                let tmp%56#0: uint64 = (len awst_tmp%55#0)
                let tmp%58#0: uint64 = 7u
                let tmp%59#0: uint64 = (> tmp%56#0 tmp%58#0)
                goto tmp%59#0 ? block@16 : block@17
            block@16: // ternary_true_L31
                let ternary_result%60#0: uint64 = 0u
                goto block@18
            block@17: // ternary_false_L31
                let tmp%62#0: bytes = (extract3 "abcdefg" 0u tmp%56#0)
                let ternary_result%60#1: uint64 = (== tmp%62#0 awst_tmp%55#0)
                goto block@18
            block@18: // ternary_merge_L31
                let ternary_result%60#2: uint64 = φ(ternary_result%60#0 <- block@16, ternary_result%60#1 <- block@17)
                let tmp%63#0: uint64 = (! ternary_result%60#2)
                (assert tmp%63#0)
                let tmp%65#0: uint64 = 0u
                let tmp%67#0: uint64 = 7u
                let tmp%68#0: uint64 = (> tmp%65#0 tmp%67#0)
                goto tmp%68#0 ? block@19 : block@20
            block@19: // ternary_true_L33
                let ternary_result%69#0: uint64 = 0u
                goto block@21
            block@20: // ternary_false_L33
                let tmp%70#0: uint64 = 7u
                let tmp%71#0: uint64 = 0u
                let tmp%72#0: uint64 = (- tmp%70#0 tmp%71#0)
                let tmp%73#0: uint64 = 0u
                let tmp%74#0: bytes = (extract3 "abcdefg" tmp%72#0 tmp%73#0)
                let ternary_result%69#1: uint64 = (== tmp%74#0 "")
                goto block@21
            block@21: // ternary_merge_L33
                let ternary_result%69#2: uint64 = φ(ternary_result%69#0 <- block@19, ternary_result%69#1 <- block@20)
                (assert ternary_result%69#2)
                let tmp%76#0: uint64 = 1u
                let tmp%78#0: uint64 = 7u
                let tmp%79#0: uint64 = (> tmp%76#0 tmp%78#0)
                goto tmp%79#0 ? block@22 : block@23
            block@22: // ternary_true_L34
                let ternary_result%80#0: uint64 = 0u
                goto block@24
            block@23: // ternary_false_L34
                let tmp%81#0: uint64 = 7u
                let tmp%82#0: uint64 = 1u
                let tmp%83#0: uint64 = (- tmp%81#0 tmp%82#0)
                let tmp%84#0: uint64 = 1u
                let tmp%85#0: bytes = (extract3 "abcdefg" tmp%83#0 tmp%84#0)
                let ternary_result%80#1: uint64 = (== tmp%85#0 "g")
                goto block@24
            block@24: // ternary_merge_L34
                let ternary_result%80#2: uint64 = φ(ternary_result%80#0 <- block@22, ternary_result%80#1 <- block@23)
                (assert ternary_result%80#2)
                let tmp%87#0: uint64 = 2u
                let tmp%89#0: uint64 = 7u
                let tmp%90#0: uint64 = (> tmp%87#0 tmp%89#0)
                goto tmp%90#0 ? block@25 : block@26
            block@25: // ternary_true_L35
                let ternary_result%91#0: uint64 = 0u
                goto block@27
            block@26: // ternary_false_L35
                let tmp%92#0: uint64 = 7u
                let tmp%93#0: uint64 = 2u
                let tmp%94#0: uint64 = (- tmp%92#0 tmp%93#0)
                let tmp%95#0: uint64 = 2u
                let tmp%96#0: bytes = (extract3 "abcdefg" tmp%94#0 tmp%95#0)
                let ternary_result%91#1: uint64 = (== tmp%96#0 "fg")
                goto block@27
            block@27: // ternary_merge_L35
                let ternary_result%91#2: uint64 = φ(ternary_result%91#0 <- block@25, ternary_result%91#1 <- block@26)
                (assert ternary_result%91#2)
                let tmp%98#0: uint64 = 1u
                let tmp%100#0: uint64 = 7u
                let tmp%101#0: uint64 = (> tmp%98#0 tmp%100#0)
                goto tmp%101#0 ? block@28 : block@29
            block@28: // ternary_true_L36
                let ternary_result%102#0: uint64 = 0u
                goto block@30
            block@29: // ternary_false_L36
                let tmp%103#0: uint64 = 7u
                let tmp%104#0: uint64 = 1u
                let tmp%105#0: uint64 = (- tmp%103#0 tmp%104#0)
                let tmp%106#0: uint64 = 1u
                let tmp%107#0: bytes = (extract3 "abcdefg" tmp%105#0 tmp%106#0)
                let ternary_result%102#1: uint64 = (== tmp%107#0 "f")
                goto block@30
            block@30: // ternary_merge_L36
                let ternary_result%102#2: uint64 = φ(ternary_result%102#0 <- block@28, ternary_result%102#1 <- block@29)
                let tmp%108#0: uint64 = (! ternary_result%102#2)
                (assert tmp%108#0)
                let tmp%110#0: uint64 = 7u
                let tmp%112#0: uint64 = 7u
                let tmp%113#0: uint64 = (> tmp%110#0 tmp%112#0)
                goto tmp%113#0 ? block@31 : block@32
            block@31: // ternary_true_L37
                let ternary_result%114#0: uint64 = 0u
                goto block@33
            block@32: // ternary_false_L37
                let tmp%115#0: uint64 = 7u
                let tmp%116#0: uint64 = 7u
                let tmp%117#0: uint64 = (- tmp%115#0 tmp%116#0)
                let tmp%118#0: uint64 = 7u
                let tmp%119#0: bytes = (extract3 "abcdefg" tmp%117#0 tmp%118#0)
                let ternary_result%114#1: uint64 = (== tmp%119#0 "abcdefg")
                goto block@33
            block@33: // ternary_merge_L37
                let ternary_result%114#2: uint64 = φ(ternary_result%114#0 <- block@31, ternary_result%114#1 <- block@32)
                (assert ternary_result%114#2)
                let awst_tmp%120#0: bytes = "!abcdefg"
                let tmp%121#0: uint64 = (len awst_tmp%120#0)
                let tmp%123#0: uint64 = 7u
                let tmp%124#0: uint64 = (> tmp%121#0 tmp%123#0)
                goto tmp%124#0 ? block@34 : block@35
            block@34: // ternary_true_L38
                let ternary_result%125#0: uint64 = 0u
                goto block@36
            block@35: // ternary_false_L38
                let tmp%126#0: uint64 = 7u
                let tmp%128#0: uint64 = (- tmp%126#0 tmp%121#0)
                let tmp%130#0: bytes = (extract3 "abcdefg" tmp%128#0 tmp%121#0)
                let ternary_result%125#1: uint64 = (== tmp%130#0 awst_tmp%120#0)
                goto block@36
            block@36: // ternary_merge_L38
                let ternary_result%125#2: uint64 = φ(ternary_result%125#0 <- block@34, ternary_result%125#1 <- block@35)
                let tmp%131#0: uint64 = (! ternary_result%125#2)
                (assert tmp%131#0)
                let tmp%136#0: bytes = "d."
                let tmp%137#0: bytes = (concat tmp%136#0 "e")
                let tmp%138#0: bytes = (concat tmp%137#0 ".")
                let tmp%139#0: bytes = (concat tmp%138#0 "f")
                let tmp%140#0: uint64 = (== tmp%139#0 "d.e.f")
                (assert tmp%140#0)
                let tmp%145#0: bytes = "d"
                let tmp%146#0: bytes = (concat tmp%145#0 "e")
                let tmp%148#0: bytes = (concat tmp%146#0 "f")
                let tmp%149#0: uint64 = (== tmp%148#0 "def")
                (assert tmp%149#0)
                let tmp%151#0: uint64 = 1u
                (assert tmp%151#0)
                let tmp%153#0: uint64 = 1u
                (assert tmp%153#0)
                return 1u
        
        subroutine puyapy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: uint64 = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L11
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
                let tmp%7#0: uint64 = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L12
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.stubs.string.StringContract.clear_state_program() -> uint64:
            block@0: // L48
                return 1u