contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: bool = 1u
                (assert tmp%0#0) // Any non-zero number should be Truthy
                let tmp%1#0: bool = 1u
                (assert tmp%1#0) // Zero should beFalsy
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%4#0: bool = 1u
                (assert tmp%4#0)
                let tmp%5#0: bool = 1u
                (assert tmp%5#0)
                let tmp%6#0: uint64 = 6u
                let tmp%7#0: bool = (== tmp%6#0 6u)
                (assert tmp%7#0)
                let c#1: uint64 = 65u
                let tmp%8#0: bool = (== c#1 65u)
                (assert tmp%8#0)
                let tmp%9#0: uint64 = 55u
                let tmp%10#0: bool = (== tmp%9#0 55u)
                (assert tmp%10#0)
                let c#2: uint64 = (- c#1 5u)
                let tmp%11#0: bool = (== c#2 60u)
                (assert tmp%11#0)
                let tmp%12#0: uint64 = 12u
                let tmp%13#0: bool = (== tmp%12#0 12u)
                (assert tmp%13#0)
                let c#3: uint64 = (/ c#2 5u)
                let tmp%14#0: bool = (== c#3 12u)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = 300u
                let tmp%16#0: bool = (== tmp%15#0 300u)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = 125u
                let tmp%18#0: bool = (== tmp%17#0 125u)
                (assert tmp%18#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%19#0: bool = (== c#4 144u)
                (assert tmp%19#0)
                let tmp%20#0: uint64 = 4u
                let tmp%21#0: bool = (== tmp%20#0 4u)
                (assert tmp%21#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%22#0: bool = (== c#5 2u)
                (assert tmp%22#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%23#0: bool = (== c#6 128u)
                (assert tmp%23#0)
                let tmp%24#0: uint64 = 0u
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: uint64 = 18446744073709551614u
                let tmp%27#0: bool = (== tmp%26#0 18446744073709551614u)
                (assert tmp%27#0)
                let tmp%28#0: bool = 0u
                let tmp%29#0: uint64 = (select 1u 1u tmp%28#0)
                let tmp%30#0: bool = (== tmp%29#0 1u)
                (assert tmp%30#0)
                let tmp%31#0: bool = 0u
                let tmp%32#0: uint64 = (select 0u 1u tmp%31#0)
                let tmp%33#0: bool = (! tmp%32#0)
                (assert tmp%33#0)
                let tmp%34#0: bool = 1u
                let tmp%35#0: uint64 = (select 1u 0u tmp%34#0)
                let tmp%36#0: bool = (! tmp%35#0)
                (assert tmp%36#0)
                let tmp%37#0: bool = 1u
                let tmp%38#0: uint64 = (select 0u 0u tmp%37#0)
                let tmp%39#0: bool = (! tmp%38#0)
                (assert tmp%39#0)
                let tmp%40#0: bool = 1u
                let tmp%41#0: uint64 = (select 1u 1u tmp%40#0)
                let tmp%42#0: bool = (== tmp%41#0 1u)
                (assert tmp%42#0)
                let tmp%43#0: bool = 1u
                let tmp%44#0: uint64 = (select 0u 1u tmp%43#0)
                let tmp%45#0: bool = (== tmp%44#0 1u)
                (assert tmp%45#0)
                let tmp%46#0: bool = 0u
                let tmp%47#0: uint64 = (select 1u 0u tmp%46#0)
                let tmp%48#0: bool = (== tmp%47#0 1u)
                (assert tmp%48#0)
                let tmp%49#0: bool = 0u
                let tmp%50#0: uint64 = (select 0u 0u tmp%49#0)
                let tmp%51#0: bool = (! tmp%50#0)
                (assert tmp%51#0)
                let tmp%52#0: uint64 = 1u
                let tmp%53#0: bool = (== tmp%52#0 1u)
                (assert tmp%53#0)
                let tmp%54#0: uint64 = 61u
                let tmp%55#0: bool = (== tmp%54#0 61u)
                (assert tmp%55#0)
                let tmp%56#0: uint64 = 57u
                let tmp%57#0: bool = (== tmp%56#0 57u)
                (assert tmp%57#0)
                let y#1: uint64 = 30u
                let tmp%58#0: bool = (== y#1 30u)
                (assert tmp%58#0)
                let y#2: uint64 = (| y#1 54u)
                let tmp%59#0: bool = (== y#2 62u)
                (assert tmp%59#0)
                let y#3: uint64 = (^ y#2 255u)
                let tmp%60#0: bool = (== y#3 193u)
                (assert tmp%60#0)
                let tmp%61#0: uint64 = 4u
                let tmp%62#0: uint64 = 4u
                let tmp%63#0: bool = (== tmp%61#0 tmp%62#0)
                (assert tmp%63#0)
                let tmp%64#0: bool = 1u
                (assert tmp%64#0)
                let tmp%65#0: uint64 = (txn NumAppArgs)
                let tmp%67#0: uint64 = (select 5u 1u tmp%65#0)
                let tmp%68#0: bool = (== tmp%67#0 5u)
                (assert tmp%68#0) // constructor expressions supported
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> bool:
            block@0: // L84
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                return 1u