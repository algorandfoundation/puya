contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: bool = 1u
                (assert tmp%0#0) // Any non-zero number should be Truthy
                let tmp%1#0: bool = 1u
                (assert tmp%1#0) // Zero should beFalsy
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%4#0: bool = 1u
                (assert tmp%4#0)
                let tmp%5#0: bool = 1u
                (assert tmp%5#0)
                let tmp%6#0: uint64 = 6u
                let tmp%7#0: bool = (== tmp%6#0 6u)
                (assert tmp%7#0)
                let c#1: uint64 = 65u
                let tmp%8#0: bool = (== c#1 65u)
                (assert tmp%8#0)
                let tmp%9#0: uint64 = 55u
                let tmp%10#0: bool = (== tmp%9#0 55u)
                (assert tmp%10#0)
                let c#2: uint64 = (- c#1 5u)
                let tmp%11#0: bool = (== c#2 60u)
                (assert tmp%11#0)
                let tmp%12#0: uint64 = 12u
                let tmp%13#0: bool = (== tmp%12#0 12u)
                (assert tmp%13#0)
                let c#3: uint64 = (/ c#2 5u)
                let tmp%14#0: bool = (== c#3 12u)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = 300u
                let tmp%16#0: bool = (== tmp%15#0 300u)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = 125u
                let tmp%18#0: bool = (== tmp%17#0 125u)
                (assert tmp%18#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%19#0: bool = (== c#4 144u)
                (assert tmp%19#0)
                let tmp%20#0: uint64 = 4u
                let tmp%21#0: bool = (== tmp%20#0 4u)
                (assert tmp%21#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%22#0: bool = (== c#5 2u)
                (assert tmp%22#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%23#0: bool = (== c#6 128u)
                (assert tmp%23#0)
                let tmp%24#0: uint64 = 0u
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: uint64 = 18446744073709551614u
                let tmp%27#0: bool = (== tmp%26#0 18446744073709551614u)
                (assert tmp%27#0)
                let tmp%28#0: bool = 0u
                goto tmp%28#0 ? block@1 : block@2
            block@1: // ternary_true_L55
                let ternary_result%0#0: uint64 = 1u
                goto block@3
            block@2: // ternary_false_L55
                let ternary_result%0#1: uint64 = 1u
                goto block@3
            block@3: // ternary_merge_L55
                let tmp%29#0: bool = 1u
                (assert tmp%29#0)
                let tmp%30#0: bool = 0u
                goto tmp%30#0 ? block@4 : block@5
            block@4: // ternary_true_L56
                let ternary_result%1#0: uint64 = 1u
                goto block@6
            block@5: // ternary_false_L56
                let ternary_result%1#1: uint64 = 0u
                goto block@6
            block@6: // ternary_merge_L56
                let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
                let tmp%31#0: bool = (! ternary_result%1#2)
                (assert tmp%31#0)
                let tmp%32#0: bool = 1u
                goto tmp%32#0 ? block@7 : block@8
            block@7: // ternary_true_L57
                let ternary_result%2#0: uint64 = 0u
                goto block@9
            block@8: // ternary_false_L57
                let ternary_result%2#1: uint64 = 1u
                goto block@9
            block@9: // ternary_merge_L57
                let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                let tmp%33#0: bool = (! ternary_result%2#2)
                (assert tmp%33#0)
                let tmp%34#0: bool = 1u
                goto tmp%34#0 ? block@10 : block@11
            block@10: // ternary_true_L58
                let ternary_result%3#0: uint64 = 0u
                goto block@12
            block@11: // ternary_false_L58
                let ternary_result%3#1: uint64 = 0u
                goto block@12
            block@12: // ternary_merge_L58
                let tmp%35#0: bool = 1u
                (assert tmp%35#0)
                let tmp%36#0: bool = 1u
                goto tmp%36#0 ? block@13 : block@14
            block@13: // ternary_true_L59
                let ternary_result%4#0: uint64 = 1u
                goto block@15
            block@14: // ternary_false_L59
                let ternary_result%4#1: uint64 = 1u
                goto block@15
            block@15: // ternary_merge_L59
                let tmp%37#0: bool = 1u
                (assert tmp%37#0)
                let tmp%38#0: bool = 1u
                goto tmp%38#0 ? block@16 : block@17
            block@16: // ternary_true_L60
                let ternary_result%5#0: uint64 = 1u
                goto block@18
            block@17: // ternary_false_L60
                let ternary_result%5#1: uint64 = 0u
                goto block@18
            block@18: // ternary_merge_L60
                let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17)
                let tmp%39#0: bool = (== ternary_result%5#2 1u)
                (assert tmp%39#0)
                let tmp%40#0: bool = 0u
                goto tmp%40#0 ? block@19 : block@20
            block@19: // ternary_true_L61
                let ternary_result%6#0: uint64 = 0u
                goto block@21
            block@20: // ternary_false_L61
                let ternary_result%6#1: uint64 = 1u
                goto block@21
            block@21: // ternary_merge_L61
                let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20)
                let tmp%41#0: bool = (== ternary_result%6#2 1u)
                (assert tmp%41#0)
                let tmp%42#0: bool = 0u
                goto tmp%42#0 ? block@22 : block@23
            block@22: // ternary_true_L62
                let ternary_result%7#0: uint64 = 0u
                goto block@24
            block@23: // ternary_false_L62
                let ternary_result%7#1: uint64 = 0u
                goto block@24
            block@24: // ternary_merge_L62
                let tmp%43#0: bool = 1u
                (assert tmp%43#0)
                let tmp%44#0: uint64 = 1u
                let tmp%45#0: bool = (== tmp%44#0 1u)
                (assert tmp%45#0)
                let tmp%46#0: uint64 = 61u
                let tmp%47#0: bool = (== tmp%46#0 61u)
                (assert tmp%47#0)
                let tmp%48#0: uint64 = 57u
                let tmp%49#0: bool = (== tmp%48#0 57u)
                (assert tmp%49#0)
                let y#1: uint64 = 30u
                let tmp%50#0: bool = (== y#1 30u)
                (assert tmp%50#0)
                let y#2: uint64 = (| y#1 54u)
                let tmp%51#0: bool = (== y#2 62u)
                (assert tmp%51#0)
                let y#3: uint64 = (^ y#2 255u)
                let tmp%52#0: bool = (== y#3 193u)
                (assert tmp%52#0)
                let tmp%53#0: uint64 = 4u
                let tmp%54#0: uint64 = 4u
                let tmp%55#0: bool = (== tmp%53#0 tmp%54#0)
                (assert tmp%55#0)
                let tmp%56#0: bool = 1u
                (assert tmp%56#0)
                let tmp%57#0: uint64 = (txn NumAppArgs)
                goto tmp%57#0 ? block@25 : block@26
            block@25: // ternary_true_L80
                let ternary_result%8#0: uint64 = 1u
                goto block@27
            block@26: // ternary_false_L80
                let ternary_result%8#1: uint64 = 5u
                goto block@27
            block@27: // ternary_merge_L80
                let ternary_result%8#2: uint64 = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26)
                let tmp%59#0: bool = (== ternary_result%8#2 5u)
                (assert tmp%59#0) // constructor expressions supported
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> bool:
            block@0: // L84
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                return 1u