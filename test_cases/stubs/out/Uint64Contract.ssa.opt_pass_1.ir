contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = 1u
                (assert tmp%0#0) // Zero should beFalsy
                let tmp%1#0: uint64 = 1u
                (assert tmp%1#0)
                let tmp%2#0: uint64 = 1u
                (assert tmp%2#0)
                let tmp%3#0: uint64 = 1u
                (assert tmp%3#0)
                let tmp%4#0: uint64 = 1u
                (assert tmp%4#0)
                let tmp%5#0: uint64 = 6u
                let tmp%6#0: uint64 = (== tmp%5#0 6u)
                (assert tmp%6#0)
                let c#1: uint64 = 65u
                let tmp%7#0: uint64 = (== c#1 65u)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = 55u
                let tmp%9#0: uint64 = (== tmp%8#0 55u)
                (assert tmp%9#0)
                let c#2: uint64 = (- c#1 5u)
                let tmp%10#0: uint64 = (== c#2 60u)
                (assert tmp%10#0)
                let tmp%11#0: uint64 = 12u
                let tmp%12#0: uint64 = (== tmp%11#0 12u)
                (assert tmp%12#0)
                let c#3: uint64 = (/ c#2 5u)
                let tmp%13#0: uint64 = (== c#3 12u)
                (assert tmp%13#0)
                let tmp%14#0: uint64 = 300u
                let tmp%15#0: uint64 = (== tmp%14#0 300u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = 125u
                let tmp%17#0: uint64 = (== tmp%16#0 125u)
                (assert tmp%17#0)
                let c#4: uint64 = (exp c#3 2u)
                let tmp%18#0: uint64 = (== c#4 144u)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = 4u
                let tmp%20#0: uint64 = (== tmp%19#0 4u)
                (assert tmp%20#0)
                let c#5: uint64 = (shr c#4 6u)
                let tmp%21#0: uint64 = (== c#5 2u)
                (assert tmp%21#0)
                let c#6: uint64 = (shl c#5 6u)
                let tmp%22#0: uint64 = (== c#6 128u)
                (assert tmp%22#0)
                let tmp%23#0: uint64 = 0u
                let tmp%24#0: uint64 = (! tmp%23#0)
                (assert tmp%24#0)
                let tmp%25#0: uint64 = 18446744073709551614u
                let tmp%26#0: uint64 = (== tmp%25#0 18446744073709551614u)
                (assert tmp%26#0)
                let ternary_result%0#1: uint64 = 1u
                goto block@3
            block@3: // ternary_merge_L55
                let tmp%27#0: uint64 = 1u
                (assert tmp%27#0)
                let ternary_result%1#1: uint64 = 0u
                goto block@6
            block@6: // ternary_merge_L56
                let tmp%28#0: uint64 = (! ternary_result%1#1)
                (assert tmp%28#0)
                let ternary_result%2#0: uint64 = 0u
                goto block@9
            block@9: // ternary_merge_L57
                let tmp%29#0: uint64 = (! ternary_result%2#0)
                (assert tmp%29#0)
                let ternary_result%3#0: uint64 = 0u
                goto block@12
            block@12: // ternary_merge_L58
                let tmp%30#0: uint64 = 1u
                (assert tmp%30#0)
                let ternary_result%4#0: uint64 = 1u
                goto block@15
            block@15: // ternary_merge_L59
                let tmp%31#0: uint64 = 1u
                (assert tmp%31#0)
                let ternary_result%5#0: uint64 = 1u
                goto block@18
            block@18: // ternary_merge_L60
                let tmp%32#0: uint64 = (== ternary_result%5#0 1u)
                (assert tmp%32#0)
                let ternary_result%6#1: uint64 = 1u
                goto block@21
            block@21: // ternary_merge_L61
                let tmp%33#0: uint64 = (== ternary_result%6#1 1u)
                (assert tmp%33#0)
                let ternary_result%7#1: uint64 = 0u
                goto block@24
            block@24: // ternary_merge_L62
                let tmp%34#0: uint64 = 1u
                (assert tmp%34#0)
                let tmp%35#0: uint64 = 1u
                let tmp%36#0: uint64 = (== tmp%35#0 1u)
                (assert tmp%36#0)
                let tmp%37#0: uint64 = 61u
                let tmp%38#0: uint64 = (== tmp%37#0 61u)
                (assert tmp%38#0)
                let tmp%39#0: uint64 = 57u
                let tmp%40#0: uint64 = (== tmp%39#0 57u)
                (assert tmp%40#0)
                let y#1: uint64 = 30u
                let tmp%41#0: uint64 = (== y#1 30u)
                (assert tmp%41#0)
                let y#2: uint64 = (| y#1 54u)
                let tmp%42#0: uint64 = (== y#2 62u)
                (assert tmp%42#0)
                let y#3: uint64 = (^ y#2 255u)
                let tmp%43#0: uint64 = (== y#3 193u)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = 4u
                let tmp%45#0: uint64 = 4u
                let tmp%46#0: uint64 = (== tmp%44#0 tmp%45#0)
                (assert tmp%46#0)
                let tmp%47#0: uint64 = 1u
                (assert tmp%47#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> uint64:
            block@0: // L82
                let tmp%0#0: uint64 = 1u
                (assert tmp%0#0)
                return 1u