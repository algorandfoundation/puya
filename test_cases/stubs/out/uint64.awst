contract Uint64Contract
{
  approval_program(): uint64
  {
    zero: uint64 = 0u
    one: uint64 = 1u
    two: uint64 = 2u
    five: uint64 = 5u
    three: uint64 = 3u
    sixty: uint64 = 60u
    assert(reinterpret_cast<bool>(one), comment="Any non-zero number should be Truthy")
    assert(!(reinterpret_cast<bool>(zero)), comment="Zero should beFalsy")
    assert(one < five)
    assert(five > one)
    assert(one <= one)
    assert(five >= five)
    assert(one + five == 6u)
    c: uint64 = five
    c += sixty
    assert(c == 65u)
    assert(sixty - five == 55u)
    c -= five
    assert(c == 60u)
    assert(sixty // five == 12u)
    c //= five
    assert(c == 12u)
    assert(five * sixty == 300u)
    assert(five ** three == 125u)
    c **= 2u
    assert(c == 144u)
    assert(one << two == 4u)
    c >>= 6u
    assert(c == 2u)
    c <<= 6u
    assert(c == 128u)
    assert(five >> three == 0u)
    assert(~(one) == 18446744073709551614u)
    true: uint64 = 1u
    false: uint64 = 0u
    assert((!(reinterpret_cast<bool>(true))) ? (true) : (true) == true)
    assert((!(reinterpret_cast<bool>(true))) ? (true) : (false) == false)
    assert((!(reinterpret_cast<bool>(false))) ? (false) : (true) == false)
    assert((!(reinterpret_cast<bool>(false))) ? (false) : (false) == false)
    assert((reinterpret_cast<bool>(true)) ? (true) : (true) == true)
    assert((reinterpret_cast<bool>(true)) ? (true) : (false) == true)
    assert((reinterpret_cast<bool>(false)) ? (false) : (true) == true)
    assert((reinterpret_cast<bool>(false)) ? (false) : (false) == false)
    assert(one & five == one)
    assert(sixty | five == 61u)
    assert(sixty ^ five == 57u)
    y: uint64 = 254u
    y &= 31u
    assert(y == 30u)
    y |= 54u
    assert(y == 62u)
    y ^= 255u
    assert(y == 193u)
    assert(sqrt(17u) == sqrt(16u))
    assert(one == one)
    return 1u
  }
  
  clear_state_program(): bool
  {
    assert(0u == 0u)
    return true
  }
}