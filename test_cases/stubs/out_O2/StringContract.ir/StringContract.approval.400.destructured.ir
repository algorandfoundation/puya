main test_cases.stubs.string.StringContract.approval_program:
    block@0: // L5
        let tmp%14#0: bool = _puya_lib.bytes_.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
        (assert tmp%14#0)
        let tmp%15#0: bool = _puya_lib.bytes_.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0)
        let tmp%102#0: uint64 = (txn NumAppArgs)
        goto tmp%102#0 ? block@37 : block@38
    block@37: // ternary_true_L49
        let ternary_result%12#0: string = "args"
        goto block@39
    block@38: // ternary_false_L49
        let ternary_result%12#0: string = "no args"
        goto block@39
    block@39: // ternary_merge_L49
        let tmp%104#0: bool = (== ternary_result%12#0 "no args")
        (assert tmp%104#0) // constructor expressions supported
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#0 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%6#0: bytes = (substring3 sequence#0 start#0 tmp%1#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let start#0: uint64 = (+ start#0 1u)
        goto block@1
    block@5: // after_while_L11
        return 0u