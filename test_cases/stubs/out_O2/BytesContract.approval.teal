#pragma version 10

test_cases.stubs.bytes.BytesContract.approval_program:
    intcblock 1 10 0 12
    bytecblock 0x616263 0x 0x6e6f2061726773
    bytec_0 // 0x616263
    callsub check_slicing_with_uint64
    bytec_0 // 0x616263
    callsub check_end_before_start_slicing
    bytec_2 // 0x6e6f2061726773
    pushbytes 0x61726773
    txn NumAppArgs
    select
    bytec_2 // 0x6e6f2061726773
    ==
    assert // constructor expressions supported
    intc_0 // 1
    return


// test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
check_slicing_with_uint64:
    proto 1 0
    frame_dig -1
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    frame_dig -1
    dig 1
    dig 3
    substring3
    pushbytes 0x6263
    ==
    assert
    frame_dig -1
    dig 1
    dig 2
    substring3
    bytec_1 // 0x
    ==
    assert
    frame_dig -1
    intc_2 // 0
    uncover 2
    substring3
    pushbytes 0x61
    ==
    assert
    callsub one_to_seven
    dup
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    swap
    dig 1
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    substring3
    pushbytes 0x3233343536
    ==
    assert
    intc_2 // 0
    dig 1
    >=
    intc_2 // 0
    dig 2
    uncover 2
    select
    intc_1 // 10
    dig 2
    >=
    intc_1 // 10
    uncover 3
    uncover 2
    select
    frame_dig -1
    cover 2
    substring3
    bytec_0 // 0x616263
    ==
    assert
    retsub


// test_cases.stubs.bytes.one_to_seven() -> bytes:
one_to_seven:
    proto 0 1
    pushbytes "one_to_seven called"
    log
    pushbytes 0x31323334353637
    retsub


// test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
check_end_before_start_slicing:
    proto 1 0
    frame_dig -1
    len
    intc_1 // 10
    dig 1
    >=
    intc_1 // 10
    dig 2
    uncover 2
    select
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    frame_dig -1
    dig 2
    uncover 2
    substring3
    bytec_1 // 0x
    ==
    assert
    dig 1
    swap
    -
    intc_3 // 12
    dig 2
    >=
    intc_3 // 12
    dig 3
    uncover 2
    select
    uncover 2
    swap
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    frame_dig -1
    cover 2
    substring3
    bytec_1 // 0x
    ==
    assert
    retsub
