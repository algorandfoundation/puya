contract test_cases.inner_transactions.itxn_loop.MyContract:
    program approval:
        subroutine test_cases.inner_transactions.itxn_loop.MyContract.approval_program() -> bool:
            block@0: // L19
                let app_params%%param_Note_idx_0#0: bytes = 0x
                let app_params%%ApplicationArgs_length#0: uint64 = 0u
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let continue_looping%0#0: bool = (< range_item%0#0 4u)
                goto continue_looping%0#0 ? block@2 : block@15
            block@2: // for_body_L27
                let i#0: uint64 = range_item%0#0
                let i_note#0: bytes = (extract3 0x4142434445 0u i#0)
                switch i#0 {1u => block@3, 2u => block@4, 3u => block@5, * => block@6}
            block@3: // switch_case_0_L31
                let app_params%%param_Note_idx_0#0: bytes = i_note#0
                let app_params%%param_ApplicationArgs_idx_0#0: bytes = 0x31
                let app_params%%ApplicationArgs_length#0: uint64 = 1u
                goto block@7
            block@4: // switch_case_1_L33
                let app_params%%param_Note_idx_0#0: bytes = i_note#0
                let app_params%%param_ApplicationArgs_idx_0#0: bytes = 0x32
                let app_params%%param_ApplicationArgs_idx_1#0: bytes = 0x31
                let app_params%%ApplicationArgs_length#0: uint64 = 2u
                goto block@7
            block@5: // switch_case_2_L35
                let app_params%%param_Note_idx_0#0: bytes = i_note#0
                let app_params%%param_ApplicationArgs_idx_0#0: bytes = 0x33
                let app_params%%param_ApplicationArgs_idx_1#0: bytes = 0x32
                let app_params%%param_ApplicationArgs_idx_2#0: bytes = 0x31
                let app_params%%ApplicationArgs_length#0: uint64 = 3u
                goto block@7
            block@6: // switch_case_default_L29
                goto block@7
            block@7: // switch_case_next_L29
                itxn_begin
                let is_ApplicationArgs_count_gte_1%0#0: bool = (>= app_params%%ApplicationArgs_length#0 1u)
                goto is_ApplicationArgs_count_gte_1%0#0 ? block@8 : block@11
            block@8: // set_ApplicationArgs_0_to_0_L39
                ((itxn_field ApplicationArgs) app_params%%param_ApplicationArgs_idx_0#0)
                let is_ApplicationArgs_count_gte_2%0#0: bool = (>= app_params%%ApplicationArgs_length#0 2u)
                goto is_ApplicationArgs_count_gte_2%0#0 ? block@9 : block@11
            block@9: // set_ApplicationArgs_1_to_1_L39
                ((itxn_field ApplicationArgs) app_params%%param_ApplicationArgs_idx_1#0)
                let is_ApplicationArgs_count_gte_3%0#0: bool = (>= app_params%%ApplicationArgs_length#0 3u)
                goto is_ApplicationArgs_count_gte_3%0#0 ? block@10 : block@11
            block@10: // set_ApplicationArgs_2_to_2_L39
                ((itxn_field ApplicationArgs) app_params%%param_ApplicationArgs_idx_2#0)
                goto block@11
            block@11: // next_field_L39
                ((itxn_field Note) app_params%%param_Note_idx_0#0)
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ClearStateProgramPages) 0x0a8101)
                ((itxn_field ApprovalProgramPages) 0x0a8101)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@12
            block@12: // next_txn_L39
                itxn_submit
                let app_txn.Note#0: bytes = (itxn Note)
                let app_txn.NumAppArgs#0: uint64 = (itxn NumAppArgs)
                (log app_txn.Note#0)
                let tmp%0#0: bytes = (itob app_txn.NumAppArgs#0)
                (log tmp%0#0)
                goto block@13
            block@13: // for_footer_L27
                goto block@14
            block@14: // for_increment_L27
                let range_item%0#0: uint64 = (+ range_item%0#0 1u)
                goto block@1
            block@15: // after_for_L27
                return 1u
    
    program clear-state:
        subroutine test_cases.inner_transactions.itxn_loop.MyContract.clear_state_program() -> bool:
            block@0: // L16
                return 1u