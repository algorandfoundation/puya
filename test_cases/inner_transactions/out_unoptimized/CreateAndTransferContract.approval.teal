#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3 4
    b block@0

block@0:
    b block@1

block@1:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    intc_0 // 0
    intc_1 // 1
    pushint 2 // 2
    intc_2 // 3
    intc_3 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create@22

after_inlined_test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create@22:
    intc_1 // 1
    return

else_body@8:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x48e9ed7c // method "create_and_transfer()void"
    uncover 1
    match create_and_transfer_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

create_and_transfer_route@3:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    callsub create_and_transfer
    b switch_case_next@5


// test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer[routing]() -> void:
create_and_transfer:
    b create_and_transfer_block@0

create_and_transfer_block@0:
    // inner_transactions/asset_transfer.py:11
    // @arc4.abimethod()
    callsub test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer
    intc_1 // 1
    return


// test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer() -> void:
test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer:
    b test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_block@0

test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_block@0:
    // inner_transactions/asset_transfer.py:15-23
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    itxn_begin
    // inner_transactions/asset_transfer.py:20
    // manager=op.Global.current_application_address,
    global CurrentApplicationAddress
    // inner_transactions/asset_transfer.py:21
    // clawback=op.Global.current_application_address,
    global CurrentApplicationAddress
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetManager
    // inner_transactions/asset_transfer.py:19
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // inner_transactions/asset_transfer.py:18
    // unit_name="TST",
    pushbytes "TST"
    itxn_field ConfigAssetUnitName
    // inner_transactions/asset_transfer.py:17
    // asset_name="test",
    pushbytes "test"
    itxn_field ConfigAssetName
    // inner_transactions/asset_transfer.py:16
    // total=1000,
    pushint 1000 // 1000
    itxn_field ConfigAssetTotal
    // inner_transactions/asset_transfer.py:15
    // itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_next_txn@1

test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_next_txn@1:
    // inner_transactions/asset_transfer.py:15-23
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    itxn_submit
    // inner_transactions/asset_transfer.py:15-24
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    // .created_asset
    itxn CreatedAssetID
    // inner_transactions/asset_transfer.py:27-33
    // # transfer
    // itxn.AssetTransfer(
    //     asset_sender=new_asset.creator,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=1000,
    //     xfer_asset=new_asset,
    // ).submit()
    itxn_begin
    // inner_transactions/asset_transfer.py:29
    // asset_sender=new_asset.creator,
    dup
    asset_params_get AssetCreator
    assert // asset exists
    cover 1
    // inner_transactions/asset_transfer.py:30
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // inner_transactions/asset_transfer.py:32
    // xfer_asset=new_asset,
    uncover 1
    itxn_field XferAsset
    // inner_transactions/asset_transfer.py:31
    // asset_amount=1000,
    pushint 1000 // 1000
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetSender
    // inner_transactions/asset_transfer.py:27-28
    // # transfer
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_next_txn@2

test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer_next_txn@2:
    // inner_transactions/asset_transfer.py:27-33
    // # transfer
    // itxn.AssetTransfer(
    //     asset_sender=new_asset.creator,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=1000,
    //     xfer_asset=new_asset,
    // ).submit()
    itxn_submit
    retsub
