#pragma version 10

test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.approval_program:
    intcblock 0 1 1000
    callsub __puya_arc4_router__
    return


// test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@5
    txna ApplicationArgs 0
    pushbytes 0x48e9ed7c // method "create_and_transfer()void"
    swap
    match __puya_arc4_router___create_and_transfer_route@2
    b __puya_arc4_router___switch_case_default@3

__puya_arc4_router___create_and_transfer_route@2:
    // inner_transactions/asset_transfer.py:11
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    callsub create_and_transfer
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@3:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@5:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@6
    b __puya_arc4_router___switch_case_default@7

__puya_arc4_router_____algopy_default_create@6:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // is creating
    callsub __algopy_default_create
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@7:

__puya_arc4_router___after_if_else@9:
    // inner_transactions/asset_transfer.py:10
    // class CreateAndTransferContract(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer() -> void:
create_and_transfer:
    // inner_transactions/asset_transfer.py:11-12
    // @arc4.abimethod()
    // def create_and_transfer(self) -> None:
    proto 0 0
    // inner_transactions/asset_transfer.py:15-23
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    itxn_begin
    // inner_transactions/asset_transfer.py:20
    // manager=op.Global.current_application_address,
    global CurrentApplicationAddress
    // inner_transactions/asset_transfer.py:21
    // clawback=op.Global.current_application_address,
    dup
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetManager
    // inner_transactions/asset_transfer.py:19
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // inner_transactions/asset_transfer.py:18
    // unit_name="TST",
    pushbytes "TST"
    itxn_field ConfigAssetUnitName
    // inner_transactions/asset_transfer.py:17
    // asset_name="test",
    pushbytes "test"
    itxn_field ConfigAssetName
    // inner_transactions/asset_transfer.py:16
    // total=1000,
    intc_2 // 1000
    itxn_field ConfigAssetTotal
    // inner_transactions/asset_transfer.py:15
    // itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // inner_transactions/asset_transfer.py:15-23
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    itxn_submit
    // inner_transactions/asset_transfer.py:15-24
    // itxn.AssetConfig(
    //     total=1000,
    //     asset_name="test",
    //     unit_name="TST",
    //     decimals=0,
    //     manager=op.Global.current_application_address,
    //     clawback=op.Global.current_application_address,
    // )
    // .submit()
    // .created_asset
    itxn CreatedAssetID
    // inner_transactions/asset_transfer.py:27-33
    // # transfer
    // itxn.AssetTransfer(
    //     asset_sender=new_asset.creator,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=1000,
    //     xfer_asset=new_asset,
    // ).submit()
    itxn_begin
    // inner_transactions/asset_transfer.py:29
    // asset_sender=new_asset.creator,
    dup
    asset_params_get AssetCreator
    assert // asset exists
    swap
    // inner_transactions/asset_transfer.py:30
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // inner_transactions/asset_transfer.py:32
    // xfer_asset=new_asset,
    swap
    itxn_field XferAsset
    // inner_transactions/asset_transfer.py:31
    // asset_amount=1000,
    intc_2 // 1000
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetSender
    // inner_transactions/asset_transfer.py:27-28
    // # transfer
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // inner_transactions/asset_transfer.py:27-33
    // # transfer
    // itxn.AssetTransfer(
    //     asset_sender=new_asset.creator,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=1000,
    //     xfer_asset=new_asset,
    // ).submit()
    itxn_submit
    retsub


// test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create() -> void:
__algopy_default_create:
    proto 0 0
    retsub
