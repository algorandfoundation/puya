{
  "version": 3,
  "sources": [
    "../c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;AAiBK;;;;;;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAaA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAfG;AAAiB;AAAjB;;;;;AAIW;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAP;AAEI;AAEwB;;;;;;;AADH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADrB;;;AAAA;;;;;;AAAA;AAAA;;AADJ;AAAA;;AAAA;AAQO;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEgB;AACF;AAAA;AAAA;AAAA;AAC+C;;AAA5C;;;;;;;;;;;;AAFD;;;AAAA;;;;;;AAAA;;;AAIF;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACP;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;AAA6B;AAAA;;AAAA;;;AAAA;AAA7B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 6"
    },
    "7": {
      "op": "bytecblock \"hello_app\" 0x151f7c75"
    },
    "24": {
      "op": "b main_block@0"
    },
    "27": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "32": {
      "op": "b main_call___init__@1"
    },
    "35": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.inner_transactions.c2c.Greeter.__init__",
      "op": "callsub __init__"
    },
    "38": {
      "op": "b main_after_if_else@2"
    },
    "41": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "44": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "46": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "47": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "48": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "51": {
      "op": "b main_abi_routing@4"
    },
    "54": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "56": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "57": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "58": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "61": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "62": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "63": {
      "op": "bz main_create_NoOp@9",
      "stack_out": []
    },
    "66": {
      "op": "b main_call_NoOp@5"
    },
    "69": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "72": {
      "op": "pushbytes 0x786b6291 // method \"bootstrap()uint64\"",
      "defined_out": [
        "Method(bootstrap()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(bootstrap()uint64)"
      ]
    },
    "78": {
      "op": "pushbytes 0x33fb5d48 // method \"log_greetings(string)void\"",
      "defined_out": [
        "Method(bootstrap()uint64)",
        "Method(log_greetings(string)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(bootstrap()uint64)",
        "Method(log_greetings(string)void)"
      ]
    },
    "84": {
      "op": "uncover 2",
      "stack_out": [
        "Method(bootstrap()uint64)",
        "Method(log_greetings(string)void)",
        "tmp%6#0"
      ]
    },
    "86": {
      "op": "match main_bootstrap_route@6 main_log_greetings_route@7",
      "stack_out": []
    },
    "92": {
      "op": "b main_switch_case_next@8"
    },
    "95": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "98": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "101": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "102": {
      "block": "main_log_greetings_route@7",
      "stack_in": [],
      "callsub": "test_cases.inner_transactions.c2c.Greeter.log_greetings[routing]",
      "op": "callsub log_greetings"
    },
    "105": {
      "op": "b main_switch_case_next@8"
    },
    "108": {
      "block": "main_bootstrap_route@6",
      "stack_in": [],
      "callsub": "test_cases.inner_transactions.c2c.Greeter.bootstrap[routing]",
      "op": "callsub bootstrap"
    },
    "111": {
      "op": "b main_switch_case_next@8"
    },
    "114": {
      "block": "main_create_NoOp@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "117": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "119": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "120": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "121": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "123": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "125": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "126": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "127": {
      "op": "b main_block@14"
    },
    "130": {
      "block": "main_block@14",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.inner_transactions.c2c.Greeter.__algopy_default_create@15"
    },
    "133": {
      "block": "main_after_inlined_test_cases.inner_transactions.c2c.Greeter.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "134": {
      "op": "return",
      "stack_out": []
    },
    "135": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "b bootstrap_block@0"
    },
    "138": {
      "block": "bootstrap_block@0",
      "stack_in": [],
      "callsub": "test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "op": "callsub test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "142": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "143": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "146": {
      "op": "log",
      "stack_out": []
    },
    "147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.log_greetings[routing]",
      "params": {},
      "block": "log_greetings",
      "stack_in": [],
      "op": "b log_greetings_block@0"
    },
    "152": {
      "block": "log_greetings_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "155": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "157": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "159": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "160": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "161": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "162": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "164": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "166": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "167": {
      "callsub": "test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "op": "callsub test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "stack_out": []
    },
    "170": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "175": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\""
      ],
      "stack_out": [
        "\"hello_app\""
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"hello_app\"",
        "0"
      ],
      "stack_out": [
        "\"hello_app\"",
        "0"
      ]
    },
    "177": {
      "op": "app_global_put",
      "stack_out": []
    },
    "178": {
      "retsub": true,
      "op": "retsub"
    },
    "179": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "params": {},
      "block": "test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "stack_in": [],
      "op": "b test_cases.inner_transactions.c2c.Greeter.bootstrap_block@0"
    },
    "182": {
      "block": "test_cases.inner_transactions.c2c.Greeter.bootstrap_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "183": {
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "184": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "185": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "186": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "187": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "error": "already bootstrapped",
      "op": "assert // already bootstrapped",
      "stack_out": []
    },
    "189": {
      "op": "itxn_begin"
    },
    "190": {
      "op": "pushbytes 0x0a8101",
      "defined_out": [
        "0x0a8101"
      ],
      "stack_out": [
        "0x0a8101"
      ]
    },
    "195": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "197": {
      "op": "pushbytes 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089",
      "defined_out": [
        "0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089"
      ],
      "stack_out": [
        "0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089"
      ]
    },
    "284": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "286": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "287": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "289": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "290": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "292": {
      "op": "b test_cases.inner_transactions.c2c.Greeter.bootstrap_next_txn@1"
    },
    "295": {
      "block": "test_cases.inner_transactions.c2c.Greeter.bootstrap_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "296": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "298": {
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"hello_app\""
      ]
    },
    "299": {
      "op": "uncover 1",
      "stack_out": [
        "\"hello_app\"",
        "tmp%1#0"
      ]
    },
    "301": {
      "op": "app_global_put",
      "stack_out": []
    },
    "302": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "303": {
      "op": "bytec_0 // \"hello_app\"",
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "305": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "306": {
      "retsub": true,
      "op": "retsub"
    },
    "307": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "params": {
        "name#0": "bytes"
      },
      "block": "test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "310": {
      "op": "b test_cases.inner_transactions.c2c.Greeter.log_greetings_block@0"
    },
    "313": {
      "block": "test_cases.inner_transactions.c2c.Greeter.log_greetings_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "314": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "315": {
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "317": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "318": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "320": {
      "op": "pushbytes 0x02bece11 // method \"hello(string)string\"",
      "defined_out": [
        "Method(hello(string)string)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(hello(string)string)"
      ]
    },
    "326": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "328": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "330": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "332": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "333": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "335": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "336": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "338": {
      "op": "b test_cases.inner_transactions.c2c.Greeter.log_greetings_next_txn@1"
    },
    "341": {
      "block": "test_cases.inner_transactions.c2c.Greeter.log_greetings_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "342": {
      "op": "itxn LastLog",
      "defined_out": [
        "hello_call.LastLog#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0"
      ]
    },
    "344": {
      "op": "dup",
      "defined_out": [
        "hello_call.LastLog#0",
        "hello_call.LastLog#0 (copy)"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "hello_call.LastLog#0 (copy)"
      ]
    },
    "345": {
      "op": "extract 4 0",
      "defined_out": [
        "hello_call.LastLog#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "dup",
      "defined_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "349": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "hello_call.LastLog#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "350": {
      "op": "extract_uint16",
      "defined_out": [
        "hello_call.LastLog#0",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "hello_call.LastLog#0",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "352": {
      "op": "*",
      "defined_out": [
        "hello_call.LastLog#0",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "353": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "hello_call.LastLog#0",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "354": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "hello_call.LastLog#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "355": {
      "op": "dig 1",
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "357": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "hello_call.LastLog#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "hello_call.LastLog#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "359": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "hello_call.LastLog#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "360": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "hello_call.LastLog#0"
      ]
    },
    "362": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ]
    },
    "365": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "367": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0"
      ]
    },
    "368": {
      "op": "pushbytes \"HelloWorld returned: \"",
      "defined_out": [
        "\"HelloWorld returned: \"",
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0",
        "\"HelloWorld returned: \""
      ]
    },
    "391": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"HelloWorld returned: \"",
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0",
        "\"HelloWorld returned: \"",
        "\"\""
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "greeting#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "greeting#0",
        "tmp%3#0"
      ]
    },
    "394": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "greeting#0"
      ]
    },
    "396": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "400": {
      "op": "log",
      "stack_out": []
    },
    "401": {
      "retsub": true,
      "op": "retsub"
    }
  }
}