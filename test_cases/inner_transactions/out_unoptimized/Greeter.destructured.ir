contract test_cases.inner_transactions.c2c.Greeter:
    program approval:
        subroutine test_cases.inner_transactions.c2c.Greeter.approval_program() -> bool:
            block@0: // L6
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L7
                test_cases.inner_transactions.c2c.Greeter.__init__()
                goto block@2
            block@2: // entrypoint_L7
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@3 : block@8
            block@3: // abi_routing_L6
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "bootstrap()uint64" => block@4, method "log_greetings(string)void" => block@5, * => block@6}
            block@4: // bootstrap_route_L10
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: uint64 = test_cases.inner_transactions.c2c.Greeter.bootstrap()
                let val_as_bytes%0#0: bytes = (itob tmp%5#0)
                let tmp%6#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%6#0)
                return 1u
            block@5: // log_greetings_route_L24
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 NoOp)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                let tmp%10#0: bytes = (txna ApplicationArgs 1)
                test_cases.inner_transactions.c2c.Greeter.log_greetings(tmp%10#0)
                return 1u
            block@6: // switch_case_default_L6
                goto block@7
            block@7: // switch_case_next_L6
                fail // reject transaction
            block@8: // bare_routing_L6
                let tmp%11#0: uint64 = (txn OnCompletion)
                switch tmp%11#0 {0u => block@9, * => block@10}
            block@9: // create_L6
                let tmp%12#0: bool = (txn ApplicationID)
                let tmp%13#0: bool = (! tmp%12#0)
                (assert tmp%13#0) // is creating
                return 1u
            block@10: // reject_bare_on_completion_L6
                fail // reject transaction
        
        subroutine test_cases.inner_transactions.c2c.Greeter.bootstrap() -> uint64:
            block@0: // L10
                let (hello_app_value%0#0: uint64, hello_app_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
                (assert hello_app_exists%0#0) // check hello_app exists
                let tmp%0#0: bool = (! hello_app_value%0#0)
                (assert tmp%0#0) // already bootstrapped
                itxn_begin
                ((itxn_field Fee) 0u)
                ((itxn_field ClearStateProgramPages) 0x0a8101)
                ((itxn_field ApprovalProgramPages) 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089)
                ((itxn_field TypeEnum) appl)
                goto block@1
            block@1: // next_txn_L14
                itxn_submit
                let new_state_value%0#0: uint64 = (itxn CreatedApplicationID)
                (app_global_put "hello_app" new_state_value%0#0)
                let (hello_app_value%1#0: uint64, hello_app_exists%1#0: bool) = (app_global_get_ex 0u "hello_app")
                (assert hello_app_exists%1#0) // check hello_app exists
                return hello_app_value%1#0
        
        subroutine test_cases.inner_transactions.c2c.Greeter.log_greetings(name: bytes) -> void:
            block@0: // L24
                itxn_begin
                let (hello_app_value%0#0: uint64, hello_app_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
                (assert hello_app_exists%0#0) // check hello_app exists
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = hello_app_value%0#0
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = name#0
                ((itxn_field ApplicationArgs) method "hello(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field TypeEnum) appl)
                goto block@1
            block@1: // next_txn_L26
                itxn_submit
                let hello_call.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%0#0: bytes = hello_call.LastLog#0
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let greeting#0: bytes = value%0#0
                let tmp%3#0: bytes = (concat "HelloWorld returned: " "")
                let tmp%4#0: bytes = ((extract 2 0) greeting#0)
                let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
                (log tmp%5#0)
                return 
        
        subroutine test_cases.inner_transactions.c2c.Greeter.__init__() -> void:
            block@0: // L7
                (app_global_put "hello_app" 0u)
                return 
    
    program clear-state:
        subroutine test_cases.inner_transactions.c2c.Greeter.clear_state_program() -> bool:
            block@0: // L6
                return 1u