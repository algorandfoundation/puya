#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 6 2
    bytecblock 0x098101 0x00 0x31 0x32
    b block@0

block@0:
    b block@1

block@1:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    intc_0 // 0
    intc_1 // 1
    intc_3 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    intc_2 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create@22

after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create@22:
    intc_1 // 1
    return

else_body@8:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x89a8220a // method "test_branching_array_call(bool)void"
    uncover 1
    match test_branching_array_call_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

test_branching_array_call_route@3:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    callsub test_branching_array_call
    b switch_case_next@5


// test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]() -> void:
test_branching_array_call:
    b test_branching_array_call_block@0

test_branching_array_call_block@0:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    txna ApplicationArgs 1
    callsub test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call
    intc_1 // 1
    return


// test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: bytes) -> void:
test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call:
    // inner_transactions/array_access.py:21-22
    // @arc4.abimethod
    // def test_branching_array_call(self, maybe: arc4.Bool) -> None:
    proto 1 0
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_block@0

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_block@0:
    // inner_transactions/array_access.py:23
    // if maybe:
    bytec_1 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    frame_dig -1
    !=
    bz test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@3
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@1

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@1:
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:27
    // app_args=(Bytes(b"1"), Bytes(b"2")),
    bytec_2 // 0x31
    itxn_field ApplicationArgs
    bytec_3 // 0x32
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:26
    // clear_state_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:25
    // approval_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:24
    // create_app_txn = itxn.ApplicationCall(
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@2

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@2:
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_submit
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5:
    // inner_transactions/array_access.py:36
    // if maybe:
    bytec_1 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    frame_dig -1
    !=
    bz test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@7
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@6

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@6:
    // inner_transactions/array_access.py:37
    // assert create_app_txn.app_args(0) == b"1", "correct args used 1"
    intc_0 // 0
    itxnas ApplicationArgs
    bytec_2 // 0x31
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:38
    // assert create_app_txn.app_args(1) == b"2", "correct args used 2"
    intc_1 // 1
    itxnas ApplicationArgs
    bytec_3 // 0x32
    ==
    assert // correct args used 2
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8:
    retsub

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@7:
    // inner_transactions/array_access.py:40
    // assert create_app_txn.app_args(0) == b"3", "correct args used 1"
    intc_0 // 0
    itxnas ApplicationArgs
    pushbytes 0x33
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:41
    // assert create_app_txn.app_args(1) == b"4", "correct args used 2"
    intc_1 // 1
    itxnas ApplicationArgs
    pushbytes 0x34
    ==
    assert // correct args used 2
    // inner_transactions/array_access.py:42
    // assert create_app_txn.app_args(2) == b"5", "correct args used 3"
    intc_3 // 2
    itxnas ApplicationArgs
    pushbytes 0x35
    ==
    assert // correct args used 3
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@3:
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:34
    // note=b"different param set",
    pushbytes 0x646966666572656e7420706172616d20736574
    itxn_field Note
    // inner_transactions/array_access.py:33
    // app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    pushbytes 0x33
    itxn_field ApplicationArgs
    pushbytes 0x34
    itxn_field ApplicationArgs
    pushbytes 0x35
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:32
    // clear_state_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:31
    // approval_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:30
    // create_app_txn = itxn.ApplicationCall(
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@4

test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@4:
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_submit
    b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5
