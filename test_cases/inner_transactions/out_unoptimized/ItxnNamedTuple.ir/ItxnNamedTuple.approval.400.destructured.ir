main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L11
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@9
    block@3: // call_NoOp_L11
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "named_tuple_itxn(uint64)void" => block@4, method "named_tuple_itxn2(uint64)void" => block@5, method "named_tuple_itxn3(uint64)void" => block@6, * => block@7}
    block@4: // named_tuple_itxn_route_L12
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]()
        goto block@8
    block@5: // named_tuple_itxn2_route_L17
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]()
        goto block@8
    block@6: // named_tuple_itxn3_route_L22
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]()
        goto block@8
    block@7: // switch_case_default_L11
        goto block@8
    block@8: // switch_case_next_L11
        goto block@10
    block@9: // create_NoOp_L11
        goto block@10
    block@10: // after_if_else_L11
        goto block@12
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@14
    block@14: // L1
        goto block@15
    block@15: // after_inlined_test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.__algopy_default_create_L1
        exit 1u
    block@12: // after_if_else_L11
        exit 0u
    block@13: // after_inlined_test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]() -> void:
    block@0: // L22
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn(amt: uint64) -> void:
    block@0: // L12
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L14
        itxn_submit
        let hmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#0: bool = (== hmm.bar.Amount#0 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2(amt: uint64) -> void:
    block@0: // L17
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L19
        itxn_submit
        let txn.Amount#0: uint64 = (itxn Amount)
        let tmp%0#0: bool = (== txn.Amount#0 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3(amt: uint64) -> void:
    block@0: // L22
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L24
        itxn_submit
        let hmmm.bar.Amount#0: uint64 = (itxn Amount)
        let txn.Amount#0: uint64 = hmmm.bar.Amount#0
        let tmp%0#0: bool = (== txn.Amount#0 0u)
        (assert tmp%0#0)
        return 