main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@8, 2u => block@11, 3u => block@12, 4u => block@13, 5u => block@14, 6u => block@15, 7u => block@16, 8u => block@17, 9u => block@18, 10u => block@19, 11u => block@20, * => block@21}
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "named_tuple_itxn(uint64)void" => block@3, method "named_tuple_itxn2(uint64)void" => block@4, method "named_tuple_itxn3(uint64)void" => block@5, * => block@6}
    block@3: // named_tuple_itxn_route_L12
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]()
        goto block@7
    block@4: // named_tuple_itxn2_route_L17
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]()
        goto block@7
    block@5: // named_tuple_itxn3_route_L22
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]()
        goto block@7
    block@6: // switch_case_default_L11
        goto block@7
    block@7: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@9 : block@10
    block@9: // __algopy_default_create_L1
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.__algopy_default_create_L1
        exit 1u
    block@10: // else_body_L11
        fail // this contract does not implement the given ABI method for create NoOp
    block@11: // switch_case_2_L11
        goto block@21
    block@12: // switch_case_3_L11
        goto block@21
    block@13: // switch_case_4_L11
        goto block@21
    block@14: // switch_case_5_L11
        goto block@21
    block@15: // switch_case_6_L11
        goto block@21
    block@16: // switch_case_7_L11
        goto block@21
    block@17: // switch_case_8_L11
        goto block@21
    block@18: // switch_case_9_L11
        goto block@21
    block@19: // switch_case_10_L11
        goto block@21
    block@20: // switch_case_11_L11
        goto block@21
    block@21: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@22: // after_inlined_test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]() -> void:
    block@0: // L22
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3(tmp%0#0)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn(amt: uint64) -> void:
    block@0: // L12
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L14
        itxn_submit
        let hmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#0: bool = (== hmm.bar.Amount#0 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2(amt: uint64) -> void:
    block@0: // L17
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L19
        itxn_submit
        let txn.Amount#0: uint64 = (itxn Amount)
        let tmp%0#0: bool = (== txn.Amount#0 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3(amt: uint64) -> void:
    block@0: // L22
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amt#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L24
        itxn_submit
        let hmmm.bar.Amount#0: uint64 = (itxn Amount)
        let txn.Amount#0: uint64 = hmmm.bar.Amount#0
        let tmp%0#0: bool = (== txn.Amount#0 0u)
        (assert tmp%0#0)
        return 