main test_cases.inner_transactions.c2c.Greeter.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.inner_transactions.c2c.Greeter.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.inner_transactions.c2c.Greeter.bootstrap[routing]() -> void:
    block@0: // L10
        let tmp%0#0: uint64 = test_cases.inner_transactions.c2c.Greeter.bootstrap()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.inner_transactions.c2c.Greeter.log_greetings[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        test_cases.inner_transactions.c2c.Greeter.log_greetings(reinterpret_Encoded(len+utf8[])%0#0)
        exit 1u

subroutine test_cases.inner_transactions.c2c.Greeter.__init__() -> void:
    block@0: // L7
        (app_global_put "hello_app" 0u)
        return 

subroutine test_cases.inner_transactions.c2c.Greeter.bootstrap() -> uint64:
    block@0: // L10
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        let tmp%0#0: bool = (== maybe_value%0#0 0u)
        (assert tmp%0#0) // already bootstrapped
        itxn_begin
        ((itxn_field ClearStateProgramPages) 0x0a8101)
        ((itxn_field ApprovalProgramPages) 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L14
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        (app_global_put "hello_app" tmp%1#0)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%1#0) // check self.hello_app exists
        return maybe_value%1#0

subroutine test_cases.inner_transactions.c2c.Greeter.log_greetings(name: Encoded(len+utf8[])) -> void:
    block@0: // L23
        itxn_begin
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = maybe_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = name#0
        ((itxn_field ApplicationArgs) method "hello(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L25
        itxn_submit
        let hello_call.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(len+utf8[]) = ((extract 4 0) hello_call.LastLog#0)
        let tmp%1#0: bytes = ((extract 0 4) hello_call.LastLog#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let greeting#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%3#0: bytes = (concat "HelloWorld returned: " "")
        let tmp%4#0: string = ((extract 2 0) greeting#0)
        let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
        (log tmp%5#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@7, 2u => block@12, 3u => block@13, 4u => block@14, 5u => block@15, 6u => block@16, 7u => block@17, 8u => block@18, 9u => block@19, 10u => block@20, 11u => block@21, * => block@22}
    block@2: // switch_case_0_L6
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "bootstrap()uint64" => block@3, method "log_greetings(string)void" => block@4, * => block@5}
    block@3: // bootstrap_route_L10
        test_cases.inner_transactions.c2c.Greeter.bootstrap[routing]()
        goto block@6
    block@4: // log_greetings_route_L23
        test_cases.inner_transactions.c2c.Greeter.log_greetings[routing]()
        goto block@6
    block@5: // switch_case_default_L6
        goto block@6
    block@6: // switch_case_next_L6
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L6
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@11
    block@8: // __algopy_default_create_L1
        goto block@9
    block@9: // L1
        goto block@10
    block@10: // after_inlined_test_cases.inner_transactions.c2c.Greeter.__algopy_default_create_L1
        exit 1u
    block@11: // else_body_L6
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L6
        goto block@22
    block@13: // switch_case_3_L6
        goto block@22
    block@14: // switch_case_4_L6
        goto block@22
    block@15: // switch_case_5_L6
        goto block@22
    block@16: // switch_case_6_L6
        goto block@22
    block@17: // switch_case_7_L6
        goto block@22
    block@18: // switch_case_8_L6
        goto block@22
    block@19: // switch_case_9_L6
        goto block@22
    block@20: // switch_case_10_L6
        goto block@22
    block@21: // switch_case_11_L6
        goto block@22
    block@22: // switch_case_default_L6
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@23: // after_inlined_test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0