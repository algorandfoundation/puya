main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L20
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_branching_array_call(bool)void" => block@3, * => block@4}
    block@3: // test_branching_array_call_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]()
        goto block@4
    block@4: // switch_case_next_L20
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L20
        exit 0u
    block@7: // after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]() -> void:
    block@0: // L21
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for bool8
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%0#0
        test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(as_Encoded(bool8)%0#0)
        exit 1u

subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: Encoded(bool8)) -> void:
    block@0: // L21
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%1#0: bool = (!= maybe#0 tmp%0#0)
        goto tmp%1#0 ? block@1 : block@3
    block@1: // if_body_L24
        itxn_begin
        ((itxn_field ApplicationArgs) 0x31)
        ((itxn_field ApplicationArgs) 0x32)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L24
        itxn_submit
        goto block@5
    block@3: // else_body_L30
        itxn_begin
        ((itxn_field Note) 0x646966666572656e7420706172616d20736574)
        ((itxn_field ApplicationArgs) 0x33)
        ((itxn_field ApplicationArgs) 0x34)
        ((itxn_field ApplicationArgs) 0x35)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L30
        itxn_submit
        goto block@5
    block@5: // after_if_else_L23
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let tmp%3#0: bool = (!= maybe#0 tmp%2#0)
        goto tmp%3#0 ? block@6 : block@7
    block@6: // if_body_L37
        let tmp%4#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%5#0: bool = (== tmp%4#0 0x31)
        (assert tmp%5#0) // correct args used 1
        let tmp%6#0: bytes = ((itxnas ApplicationArgs) 1u)
        let tmp%7#0: bool = (== tmp%6#0 0x32)
        (assert tmp%7#0) // correct args used 2
        goto block@8
    block@7: // else_body_L40
        let tmp%8#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%9#0: bool = (== tmp%8#0 0x33)
        (assert tmp%9#0) // correct args used 1
        let tmp%10#0: bytes = ((itxnas ApplicationArgs) 1u)
        let tmp%11#0: bool = (== tmp%10#0 0x34)
        (assert tmp%11#0) // correct args used 2
        let tmp%12#0: bytes = ((itxnas ApplicationArgs) 2u)
        let tmp%13#0: bool = (== tmp%12#0 0x35)
        (assert tmp%13#0) // correct args used 3
        goto block@8
    block@8: // after_if_else_L36
        return 