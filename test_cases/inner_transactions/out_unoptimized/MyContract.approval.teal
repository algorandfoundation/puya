#pragma version 10

test_cases.inner_transactions.contract.MyContract.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // inner_transactions/contract.py:27
    // if op.Txn.num_app_args:
    txn NumAppArgs
    bz main_after_if_else@10
    // inner_transactions/contract.py:28
    // match op.Txn.application_args(0):
    txna ApplicationArgs 0
    // inner_transactions/contract.py:29
    // case Bytes(b"test1"):
    byte "test1"
    // inner_transactions/contract.py:31
    // case Bytes(b"test2"):
    byte "test2"
    // inner_transactions/contract.py:33
    // case Bytes(b"test3"):
    byte "test3"
    // inner_transactions/contract.py:35
    // case Bytes(b"test4"):
    byte "test4"
    // inner_transactions/contract.py:28-36
    // match op.Txn.application_args(0):
    //     case Bytes(b"test1"):
    //         self.test1()
    //     case Bytes(b"test2"):
    //         self.test2()
    //     case Bytes(b"test3"):
    //         self.test3()
    //     case Bytes(b"test4"):
    //         self.test4()
    uncover 4
    match main_switch_case_0@4 main_switch_case_1@5 main_switch_case_2@6 main_switch_case_3@7
    b main_switch_case_default@8

main_switch_case_0@4:
    // inner_transactions/contract.py:30
    // self.test1()
    callsub test1
    b main_switch_case_next@9

main_switch_case_1@5:
    // inner_transactions/contract.py:32
    // self.test2()
    callsub test2
    b main_switch_case_next@9

main_switch_case_2@6:
    // inner_transactions/contract.py:34
    // self.test3()
    callsub test3
    b main_switch_case_next@9

main_switch_case_3@7:
    // inner_transactions/contract.py:36
    // self.test4()
    callsub test4
    b main_switch_case_next@9

main_switch_case_default@8:

main_switch_case_next@9:

main_after_if_else@10:
    // inner_transactions/contract.py:37
    // return True
    int 1
    return


// test_cases.inner_transactions.contract.MyContract.test1() -> void:
test1:
    // inner_transactions/contract.py:42-43
    // @subroutine
    // def test1(self) -> None:
    proto 0 0
    int 0
    dupn 5
    byte ""
    dupn 2
    // inner_transactions/contract.py:44
    // self.name = Bytes(b"AST1")
    byte "name"
    byte "AST1"
    app_global_put
    // inner_transactions/contract.py:47
    // asset_name=self.name,
    int 0
    byte "name"
    app_global_get_ex
    assert // check name exists
    // inner_transactions/contract.py:49
    // decimals=3,
    int 3
    dup
    cover 2
    // inner_transactions/contract.py:52
    // fee=0,
    int 0
    dup
    cover 3
    // inner_transactions/contract.py:50
    // manager=op.Global.current_application_address,
    global CurrentApplicationAddress
    dup
    cover 4
    // inner_transactions/contract.py:51
    // reserve=op.Global.current_application_address,
    global CurrentApplicationAddress
    dup
    cover 5
    // inner_transactions/contract.py:46
    // total=1000,
    int 1000
    dup
    cover 6
    // inner_transactions/contract.py:45
    // asset_params = itxn.AssetConfig(
    int acfg
    dup
    cover 7
    // inner_transactions/contract.py:48
    // unit_name=b"unit",
    byte "unit"
    dup
    cover 8
    // inner_transactions/contract.py:54
    // self.name = Bytes(b"AST2")
    byte "name"
    byte "AST2"
    app_global_put
    // inner_transactions/contract.py:55
    // asset1_txn = asset_params.submit()
    itxn_begin
    itxn_field ConfigAssetUnitName
    itxn_field TypeEnum
    itxn_field ConfigAssetTotal
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    itxn_field Fee
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetName
    itxn_submit
    itxn ConfigAssetName
    frame_bury 3
    itxn CreatedAssetID
    // inner_transactions/contract.py:58
    // asset_name=self.name,
    int 0
    byte "name"
    app_global_get_ex
    assert // check name exists
    // inner_transactions/contract.py:61
    // asset2_txn = asset_params.submit()
    itxn_begin
    frame_dig 15
    itxn_field ConfigAssetUnitName
    frame_dig 14
    itxn_field TypeEnum
    frame_dig 13
    itxn_field ConfigAssetTotal
    frame_dig 12
    itxn_field ConfigAssetReserve
    frame_dig 11
    itxn_field ConfigAssetManager
    frame_dig 10
    itxn_field Fee
    frame_dig 9
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetName
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    swap
    // inner_transactions/contract.py:63
    // assert asset1_txn.asset_name == b"AST1", "asset1_txn is correct"
    frame_dig 3
    byte "AST1"
    ==
    assert // asset1_txn is correct
    // inner_transactions/contract.py:64
    // assert asset2_txn.asset_name == b"AST2", "asset2_txn is correct"
    byte "AST2"
    ==
    assert // asset2_txn is correct
    // inner_transactions/contract.py:66
    // assert asset1_txn.created_asset.name == b"AST1", "created asset 1 is correct"
    swap
    asset_params_get AssetName
    assert // asset exists
    byte "AST1"
    ==
    assert // created asset 1 is correct
    // inner_transactions/contract.py:67
    // assert asset2_txn.created_asset.name == b"AST2", "created asset 2 is correct"
    asset_params_get AssetName
    assert // asset exists
    byte "AST2"
    ==
    assert // created asset 2 is correct
    // inner_transactions/contract.py:70
    // approval_program=b"\x09\x81\x01",
    byte 0x098101
    dup
    frame_bury 0
    // inner_transactions/contract.py:71
    // clear_state_program=Bytes.from_hex("098101"),
    byte 0x098101
    dup
    frame_bury 1
    // inner_transactions/contract.py:72
    // fee=0,
    int 0
    dup
    frame_bury 6
    // inner_transactions/contract.py:69
    // app_create_params = itxn.ApplicationCall(
    int appl
    dup
    frame_bury 7
    // inner_transactions/contract.py:76
    // asset_name=Bytes(b"AST3"),
    byte "AST3"
    frame_bury 4
    // inner_transactions/contract.py:79
    // app_create_txn, asset3_txn = itxn.submit_txns(app_create_params, asset_params)
    itxn_begin
    itxn_field TypeEnum
    itxn_field Fee
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    itxn_next
    frame_dig 15
    itxn_field ConfigAssetUnitName
    frame_dig 14
    itxn_field TypeEnum
    frame_dig 13
    itxn_field ConfigAssetTotal
    frame_dig 12
    itxn_field ConfigAssetReserve
    frame_dig 11
    itxn_field ConfigAssetManager
    frame_dig 10
    itxn_field Fee
    frame_dig 9
    itxn_field ConfigAssetDecimals
    frame_dig 4
    itxn_field ConfigAssetName
    itxn_submit
    gitxn 0 CreatedApplicationID
    itxn ConfigAssetName
    swap
    // inner_transactions/contract.py:81
    // assert app_create_txn.created_app, "created app"
    assert // created app
    // inner_transactions/contract.py:82
    // assert asset3_txn.asset_name == b"AST3", "asset3_txn is correct"
    byte "AST3"
    ==
    assert // asset3_txn is correct
    // inner_transactions/contract.py:84
    // app_create_params.set(note=b"3rd")
    byte "3rd"
    frame_bury 2
    int 1
    // inner_transactions/contract.py:85
    // asset_params.set(note=b"3rd")
    byte "3rd"
    frame_bury 5
    int 1
    frame_bury 8
    // inner_transactions/contract.py:86-87
    // # unassigned result
    // itxn.submit_txns(app_create_params, asset_params)
    itxn_begin
    frame_dig 7
    itxn_field TypeEnum
    int 1
    >=
    bz test1_next_field@6
    frame_dig 2
    itxn_field Note

test1_next_field@6:
    frame_dig 6
    itxn_field Fee
    frame_dig 1
    itxn_field ClearStateProgramPages
    frame_dig 0
    itxn_field ApprovalProgramPages
    // inner_transactions/contract.py:86-87
    // # unassigned result
    // itxn.submit_txns(app_create_params, asset_params)
    itxn_next
    frame_dig 15
    itxn_field ConfigAssetUnitName
    frame_dig 14
    itxn_field TypeEnum
    frame_dig 13
    itxn_field ConfigAssetTotal
    frame_dig 12
    itxn_field ConfigAssetReserve
    frame_dig 8
    int 1
    >=
    bz test1_next_field@9
    frame_dig 5
    itxn_field Note

test1_next_field@9:
    frame_dig 11
    itxn_field ConfigAssetManager
    frame_dig 10
    itxn_field Fee
    frame_dig 9
    itxn_field ConfigAssetDecimals
    frame_dig 4
    itxn_field ConfigAssetName
    // inner_transactions/contract.py:86-87
    // # unassigned result
    // itxn.submit_txns(app_create_params, asset_params)
    itxn_submit
    retsub


// test_cases.inner_transactions.contract.MyContract.test2() -> void:
test2:
    // inner_transactions/contract.py:89-90
    // @subroutine
    // def test2(self) -> None:
    proto 0 0
    int 0
    dupn 5
    byte ""
    dupn 2
    // inner_transactions/contract.py:91
    // if op.Txn.num_app_args:
    txn NumAppArgs
    bz test2_else_body@2
    // inner_transactions/contract.py:92
    // args = Bytes(b"1"), Bytes(b"2")
    byte "1"
    byte "2"
    swap
    frame_bury 0
    frame_bury 1
    // inner_transactions/contract.py:96
    // app_args=args,
    int 2
    frame_bury 7
    // inner_transactions/contract.py:94
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101
    frame_bury 3
    // inner_transactions/contract.py:95
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    frame_bury 4
    // inner_transactions/contract.py:97
    // fee=0,
    int 0
    frame_bury 8
    // inner_transactions/contract.py:93
    // create_app_params = itxn.ApplicationCall(
    int 0
    int appl
    swap
    b test2_after_if_else@3

test2_else_body@2:
    // inner_transactions/contract.py:103
    // app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    byte "3"
    frame_bury 0
    byte "4"
    frame_bury 1
    byte "5"
    frame_bury 2
    int 3
    frame_bury 7
    // inner_transactions/contract.py:101
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101
    frame_bury 3
    // inner_transactions/contract.py:102
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    frame_bury 4
    // inner_transactions/contract.py:105
    // fee=0,
    int 0
    frame_bury 8
    // inner_transactions/contract.py:104
    // note=b"different param set",
    byte "different param set"
    frame_bury 5
    int 1
    // inner_transactions/contract.py:100
    // create_app_params = itxn.ApplicationCall(
    int appl
    swap

test2_after_if_else@3:
    // inner_transactions/contract.py:107
    // create_app_txn = create_app_params.submit()
    itxn_begin
    swap
    itxn_field TypeEnum
    int 1
    >=
    bz test2_next_field@5
    frame_dig 5
    itxn_field Note

test2_next_field@5:
    frame_dig 8
    itxn_field Fee
    frame_dig 4
    itxn_field ClearStateProgramPages
    frame_dig 3
    itxn_field ApprovalProgramPages
    frame_dig 0
    itxn_field ApplicationArgs
    frame_dig 1
    itxn_field ApplicationArgs
    frame_dig 7
    int 3
    >=
    bz test2_next_field@7
    frame_dig 2
    itxn_field ApplicationArgs

test2_next_field@7:
    // inner_transactions/contract.py:107
    // create_app_txn = create_app_params.submit()
    itxn_submit
    int 1
    dup
    frame_bury 6
    // inner_transactions/contract.py:108
    // assert create_app_txn.app_args(0) == b"1", "correct args used 1"
    dup
    int 1
    ==
    assert // 'create_app_txn' can still be accessed
    int 0
    itxnas ApplicationArgs
    byte "1"
    ==
    assert // correct args used 1
    // inner_transactions/contract.py:109
    // assert create_app_txn.app_args(1) == b"2", "correct args used 2"
    int 1
    ==
    assert // 'create_app_txn' can still be accessed
    int 1
    itxnas ApplicationArgs
    byte "2"
    ==
    assert // correct args used 2
    // inner_transactions/contract.py:111
    // if op.Txn.num_app_args > 1:
    txn NumAppArgs
    int 1
    >
    bz test2_after_if_else@11
    // inner_transactions/contract.py:112-118
    // create_app_txn2 = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     on_completion=OnCompleteAction.DeleteApplication,
    //     app_args=(Bytes(b"42"),),
    //     fee=0,
    // ).submit()
    itxn_begin
    // inner_transactions/contract.py:116
    // app_args=(Bytes(b"42"),),
    byte "42"
    // inner_transactions/contract.py:113
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101
    // inner_transactions/contract.py:114
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    // inner_transactions/contract.py:117
    // fee=0,
    int 0
    // inner_transactions/contract.py:115
    // on_completion=OnCompleteAction.DeleteApplication,
    int DeleteApplication
    // inner_transactions/contract.py:112
    // create_app_txn2 = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    itxn_field OnCompletion
    itxn_field Fee
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApplicationArgs
    // inner_transactions/contract.py:112-118
    // create_app_txn2 = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     on_completion=OnCompleteAction.DeleteApplication,
    //     app_args=(Bytes(b"42"),),
    //     fee=0,
    // ).submit()
    itxn_submit
    int 2
    dup
    frame_bury 6
    // inner_transactions/contract.py:119
    // assert create_app_txn2.app_args(0) == b"42", "correct args used 2"
    int 2
    ==
    assert // 'create_app_txn2' can still be accessed
    int 0
    itxnas ApplicationArgs
    byte "42"
    ==
    assert // correct args used 2

test2_after_if_else@11:
    // inner_transactions/contract.py:121
    // create_app_txn.app_args(0) == b"1"
    frame_dig 6
    int 1
    ==
    assert // 'create_app_txn' can still be accessed
    int 0
    itxnas ApplicationArgs
    byte "1"
    ==
    // inner_transactions/contract.py:120-122
    // assert (
    //     create_app_txn.app_args(0) == b"1"
    // ), "this will error on access if create_app_txn2 was submitted"
    assert // this will error on access if create_app_txn2 was submitted
    retsub


// test_cases.inner_transactions.contract.MyContract.test3() -> void:
test3:
    // inner_transactions/contract.py:124-125
    // @subroutine
    // def test3(self) -> None:
    proto 0 0
    // inner_transactions/contract.py:130
    // app_args=(Bytes(b"1"),),
    byte "1"
    // inner_transactions/contract.py:127
    // approval_program=LOG_1ST_ARG_AND_APPROVE,
    byte 0x09361a00b08101
    // inner_transactions/contract.py:128
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    swap
    // inner_transactions/contract.py:131
    // fee=0,
    int 0
    cover 2
    // inner_transactions/contract.py:129
    // on_completion=OnCompleteAction.DeleteApplication,
    int DeleteApplication
    cover 3
    // inner_transactions/contract.py:126
    // app_p_1 = itxn.ApplicationCall(
    int appl
    cover 4
    // inner_transactions/contract.py:134
    // app_p_2 = app_p_1.copy().copy()
    dup
    cover 6
    dig 1
    cover 7
    dig 2
    cover 8
    dig 3
    cover 9
    dig 4
    cover 10
    // inner_transactions/contract.py:135
    // app_p_2.set(app_args=(Bytes(b"2"),))
    byte "2"
    cover 11
    // inner_transactions/contract.py:137
    // app_p_3 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:138
    // app_p_3.set(app_args=(Bytes(b"3"),))
    byte "3"
    cover 11
    // inner_transactions/contract.py:140
    // app_p_4 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:141
    // app_p_4.set(app_args=(Bytes(b"4"),))
    byte "4"
    cover 11
    // inner_transactions/contract.py:143
    // app_p_5 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:144
    // app_p_5.set(app_args=(Bytes(b"5"),))
    byte "5"
    cover 11
    // inner_transactions/contract.py:146
    // app_p_6 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:147
    // app_p_6.set(app_args=(Bytes(b"6"),))
    byte "6"
    cover 11
    // inner_transactions/contract.py:149
    // app_p_7 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:150
    // app_p_7.set(app_args=(Bytes(b"7"),))
    byte "7"
    cover 11
    // inner_transactions/contract.py:152
    // app_p_8 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:153
    // app_p_8.set(app_args=(Bytes(b"8"),))
    byte "8"
    cover 11
    // inner_transactions/contract.py:155
    // app_p_9 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:156
    // app_p_9.set(app_args=(Bytes(b"9"),))
    byte "9"
    cover 11
    // inner_transactions/contract.py:158
    // app_p_10 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:159
    // app_p_10.set(app_args=(Bytes(b"10"),))
    byte "10"
    cover 11
    // inner_transactions/contract.py:161
    // app_p_11 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:162
    // app_p_11.set(app_args=(Bytes(b"11"),))
    byte "11"
    cover 11
    // inner_transactions/contract.py:164
    // app_p_12 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:165
    // app_p_12.set(app_args=(Bytes(b"12"),))
    byte "12"
    cover 11
    // inner_transactions/contract.py:167
    // app_p_13 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:168
    // app_p_13.set(app_args=(Bytes(b"13"),))
    byte "13"
    cover 11
    // inner_transactions/contract.py:170
    // app_p_14 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:171
    // app_p_14.set(app_args=(Bytes(b"14"),))
    byte "14"
    cover 11
    // inner_transactions/contract.py:173
    // app_p_15 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:174
    // app_p_15.set(app_args=(Bytes(b"15"),))
    byte "15"
    cover 11
    // inner_transactions/contract.py:176
    // app_p_16 = app_p_1.copy()
    dup
    cover 11
    dig 1
    cover 11
    dig 2
    cover 11
    dig 3
    cover 11
    dig 4
    cover 11
    // inner_transactions/contract.py:177
    // app_p_16.set(app_args=(Bytes(b"16"),))
    byte "16"
    cover 11
    // inner_transactions/contract.py:195-212
    // ) = itxn.submit_txns(
    //     app_p_1,
    //     app_p_2,
    //     app_p_3,
    //     app_p_4,
    //     app_p_5,
    //     app_p_6,
    //     app_p_7,
    //     app_p_8,
    //     app_p_9,
    //     app_p_10,
    //     app_p_11,
    //     app_p_12,
    //     app_p_13,
    //     app_p_14,
    //     app_p_15,
    //     app_p_16,
    // )
    itxn_begin
    uncover 4
    itxn_field TypeEnum
    uncover 3
    itxn_field OnCompletion
    uncover 2
    itxn_field Fee
    swap
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApplicationArgs
    itxn_next
    uncover 4
    itxn_field TypeEnum
    uncover 3
    itxn_field OnCompletion
    uncover 2
    itxn_field Fee
    swap
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    frame_dig 0
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 5
    itxn_field TypeEnum
    frame_dig 4
    itxn_field OnCompletion
    frame_dig 3
    itxn_field Fee
    frame_dig 2
    itxn_field ClearStateProgramPages
    frame_dig 1
    itxn_field ApprovalProgramPages
    frame_dig 6
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 11
    itxn_field TypeEnum
    frame_dig 10
    itxn_field OnCompletion
    frame_dig 9
    itxn_field Fee
    frame_dig 8
    itxn_field ClearStateProgramPages
    frame_dig 7
    itxn_field ApprovalProgramPages
    frame_dig 12
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 17
    itxn_field TypeEnum
    frame_dig 16
    itxn_field OnCompletion
    frame_dig 15
    itxn_field Fee
    frame_dig 14
    itxn_field ClearStateProgramPages
    frame_dig 13
    itxn_field ApprovalProgramPages
    frame_dig 18
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 23
    itxn_field TypeEnum
    frame_dig 22
    itxn_field OnCompletion
    frame_dig 21
    itxn_field Fee
    frame_dig 20
    itxn_field ClearStateProgramPages
    frame_dig 19
    itxn_field ApprovalProgramPages
    frame_dig 24
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 29
    itxn_field TypeEnum
    frame_dig 28
    itxn_field OnCompletion
    frame_dig 27
    itxn_field Fee
    frame_dig 26
    itxn_field ClearStateProgramPages
    frame_dig 25
    itxn_field ApprovalProgramPages
    frame_dig 30
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 35
    itxn_field TypeEnum
    frame_dig 34
    itxn_field OnCompletion
    frame_dig 33
    itxn_field Fee
    frame_dig 32
    itxn_field ClearStateProgramPages
    frame_dig 31
    itxn_field ApprovalProgramPages
    frame_dig 36
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 41
    itxn_field TypeEnum
    frame_dig 40
    itxn_field OnCompletion
    frame_dig 39
    itxn_field Fee
    frame_dig 38
    itxn_field ClearStateProgramPages
    frame_dig 37
    itxn_field ApprovalProgramPages
    frame_dig 42
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 47
    itxn_field TypeEnum
    frame_dig 46
    itxn_field OnCompletion
    frame_dig 45
    itxn_field Fee
    frame_dig 44
    itxn_field ClearStateProgramPages
    frame_dig 43
    itxn_field ApprovalProgramPages
    frame_dig 48
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 53
    itxn_field TypeEnum
    frame_dig 52
    itxn_field OnCompletion
    frame_dig 51
    itxn_field Fee
    frame_dig 50
    itxn_field ClearStateProgramPages
    frame_dig 49
    itxn_field ApprovalProgramPages
    frame_dig 54
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 59
    itxn_field TypeEnum
    frame_dig 58
    itxn_field OnCompletion
    frame_dig 57
    itxn_field Fee
    frame_dig 56
    itxn_field ClearStateProgramPages
    frame_dig 55
    itxn_field ApprovalProgramPages
    frame_dig 60
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 65
    itxn_field TypeEnum
    frame_dig 64
    itxn_field OnCompletion
    frame_dig 63
    itxn_field Fee
    frame_dig 62
    itxn_field ClearStateProgramPages
    frame_dig 61
    itxn_field ApprovalProgramPages
    frame_dig 66
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 71
    itxn_field TypeEnum
    frame_dig 70
    itxn_field OnCompletion
    frame_dig 69
    itxn_field Fee
    frame_dig 68
    itxn_field ClearStateProgramPages
    frame_dig 67
    itxn_field ApprovalProgramPages
    frame_dig 72
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 77
    itxn_field TypeEnum
    frame_dig 76
    itxn_field OnCompletion
    frame_dig 75
    itxn_field Fee
    frame_dig 74
    itxn_field ClearStateProgramPages
    frame_dig 73
    itxn_field ApprovalProgramPages
    frame_dig 78
    itxn_field ApplicationArgs
    itxn_next
    frame_dig 83
    itxn_field TypeEnum
    frame_dig 82
    itxn_field OnCompletion
    frame_dig 81
    itxn_field Fee
    frame_dig 80
    itxn_field ClearStateProgramPages
    frame_dig 79
    itxn_field ApprovalProgramPages
    frame_dig 84
    itxn_field ApplicationArgs
    itxn_submit
    int 1
    // inner_transactions/contract.py:214
    // assert app1.logs(0) == b"1"
    dup
    int 1
    ==
    assert // 'app1' can still be accessed
    int 0
    gitxnas 0 Logs
    byte "1"
    ==
    assert
    // inner_transactions/contract.py:215
    // assert app2.logs(0) == b"2"
    dup
    int 1
    ==
    assert // 'app2' can still be accessed
    int 0
    gitxnas 1 Logs
    byte "2"
    ==
    assert
    // inner_transactions/contract.py:216
    // assert app3.logs(0) == b"3"
    dup
    int 1
    ==
    assert // 'app3' can still be accessed
    int 0
    gitxnas 2 Logs
    byte "3"
    ==
    assert
    // inner_transactions/contract.py:217
    // assert app4.logs(0) == b"4"
    dup
    int 1
    ==
    assert // 'app4' can still be accessed
    int 0
    gitxnas 3 Logs
    byte "4"
    ==
    assert
    // inner_transactions/contract.py:218
    // assert app5.logs(0) == b"5"
    dup
    int 1
    ==
    assert // 'app5' can still be accessed
    int 0
    gitxnas 4 Logs
    byte "5"
    ==
    assert
    // inner_transactions/contract.py:219
    // assert app6.logs(0) == b"6"
    dup
    int 1
    ==
    assert // 'app6' can still be accessed
    int 0
    gitxnas 5 Logs
    byte "6"
    ==
    assert
    // inner_transactions/contract.py:220
    // assert app7.logs(0) == b"7"
    dup
    int 1
    ==
    assert // 'app7' can still be accessed
    int 0
    gitxnas 6 Logs
    byte "7"
    ==
    assert
    // inner_transactions/contract.py:221
    // assert app8.logs(0) == b"8"
    dup
    int 1
    ==
    assert // 'app8' can still be accessed
    int 0
    gitxnas 7 Logs
    byte "8"
    ==
    assert
    // inner_transactions/contract.py:222
    // assert app9.logs(0) == b"9"
    dup
    int 1
    ==
    assert // 'app9' can still be accessed
    int 0
    gitxnas 8 Logs
    byte "9"
    ==
    assert
    // inner_transactions/contract.py:223
    // assert app10.logs(0) == b"10"
    dup
    int 1
    ==
    assert // 'app10' can still be accessed
    int 0
    gitxnas 9 Logs
    byte "10"
    ==
    assert
    // inner_transactions/contract.py:224
    // assert app11.logs(0) == b"11"
    dup
    int 1
    ==
    assert // 'app11' can still be accessed
    int 0
    gitxnas 10 Logs
    byte "11"
    ==
    assert
    // inner_transactions/contract.py:225
    // assert app12.logs(0) == b"12"
    dup
    int 1
    ==
    assert // 'app12' can still be accessed
    int 0
    gitxnas 11 Logs
    byte "12"
    ==
    assert
    // inner_transactions/contract.py:226
    // assert app13.logs(0) == b"13"
    dup
    int 1
    ==
    assert // 'app13' can still be accessed
    int 0
    gitxnas 12 Logs
    byte "13"
    ==
    assert
    // inner_transactions/contract.py:227
    // assert app14.logs(0) == b"14"
    dup
    int 1
    ==
    assert // 'app14' can still be accessed
    int 0
    gitxnas 13 Logs
    byte "14"
    ==
    assert
    // inner_transactions/contract.py:228
    // assert app15.logs(0) == b"15"
    dup
    int 1
    ==
    assert // 'app15' can still be accessed
    int 0
    gitxnas 14 Logs
    byte "15"
    ==
    assert
    // inner_transactions/contract.py:229
    // assert app16.logs(0) == b"16"
    int 1
    ==
    assert // 'app16' can still be accessed
    int 0
    itxnas Logs
    byte "16"
    ==
    assert
    retsub


// test_cases.inner_transactions.contract.MyContract.test4() -> void:
test4:
    // inner_transactions/contract.py:231-232
    // @subroutine
    // def test4(self) -> None:
    proto 0 0
    // inner_transactions/contract.py:233
    // lots_of_bytes = op.bzero(2044)
    int 2044
    bzero
    // inner_transactions/contract.py:234
    // approval_1 = Bytes(ALWAYS_APPROVE)
    byte 0x098101
    dup
    cover 2
    cover 2
    // inner_transactions/contract.py:237-238
    // b"\x80"  # pushbytes
    // b"\xFC\x0F"  # varuint 2044
    byte 0x80fc0f
    // inner_transactions/contract.py:236-240
    // Bytes(
    //     b"\x80"  # pushbytes
    //     b"\xFC\x0F"  # varuint 2044
    // )
    // + lots_of_bytes
    swap
    concat
    // inner_transactions/contract.py:241
    // + Bytes(b"\x48")  # pop
    byte "H"
    // inner_transactions/contract.py:236-241
    // Bytes(
    //     b"\x80"  # pushbytes
    //     b"\xFC\x0F"  # varuint 2044
    // )
    // + lots_of_bytes
    // + Bytes(b"\x48")  # pop
    concat
    // inner_transactions/contract.py:235-242
    // approval_2 = (
    //     Bytes(
    //         b"\x80"  # pushbytes
    //         b"\xFC\x0F"  # varuint 2044
    //     )
    //     + lots_of_bytes
    //     + Bytes(b"\x48")  # pop
    // )
    dup
    cover 2
    // inner_transactions/contract.py:247
    // app_args=(Bytes(b"1"),),
    byte "1"
    cover 2
    // inner_transactions/contract.py:235
    // approval_2 = (
    dup
    cover 2
    dup
    cover 3
    cover 3
    // inner_transactions/contract.py:245
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    // inner_transactions/contract.py:248
    // extra_program_pages=3,
    int 3
    // inner_transactions/contract.py:249
    // fee=0,
    int 0
    // inner_transactions/contract.py:246
    // on_completion=OnCompleteAction.DeleteApplication,
    int DeleteApplication
    // inner_transactions/contract.py:243
    // app_p_1 = itxn.ApplicationCall(
    int appl
    // inner_transactions/contract.py:251
    // app_1 = app_p_1.submit()
    itxn_begin
    itxn_field TypeEnum
    itxn_field OnCompletion
    itxn_field Fee
    itxn_field ExtraProgramPages
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApprovalProgramPages
    itxn_field ApplicationArgs
    itxn_submit
    int 1
    itxn ExtraProgramPages
    itxn NumApprovalProgramPages
    swap
    itxn NumClearStateProgramPages
    cover 3
    // inner_transactions/contract.py:252
    // assert app_1.extra_program_pages == 3, "extra_pages == 3"
    int 3
    ==
    assert // extra_pages == 3
    // inner_transactions/contract.py:253
    // assert app_1.num_approval_program_pages == 2, "approval_pages == 2"
    int 2
    ==
    assert // approval_pages == 2
    // inner_transactions/contract.py:255
    // app_1.approval_program_pages(0) == approval_1 + approval_2 + approval_2[:-3]
    dup
    int 1
    ==
    assert // 'app_1' can still be accessed
    int 0
    itxnas ApprovalProgramPages
    frame_dig 0
    uncover 4
    dup
    cover 2
    concat
    swap
    dup
    dup
    len
    swap
    dup
    len
    swap
    dup
    len
    int 3
    swap
    <
    uncover 2
    int 3
    uncover 2
    select
    uncover 2
    swap
    -
    swap
    int 0
    uncover 2
    substring3
    uncover 2
    swap
    concat
    uncover 2
    swap
    ==
    // inner_transactions/contract.py:254-256
    // assert (
    //     app_1.approval_program_pages(0) == approval_1 + approval_2 + approval_2[:-3]
    // ), "expected approval page 0"
    assert // expected approval page 0
    // inner_transactions/contract.py:258
    // app_1.approval_program_pages(1) == approval_2[-3:] + approval_2
    dig 1
    int 1
    ==
    assert // 'app_1' can still be accessed
    int 1
    itxnas ApprovalProgramPages
    dig 1
    dup
    len
    swap
    dup
    len
    swap
    dup
    len
    int 3
    swap
    <
    uncover 2
    int 3
    uncover 2
    select
    uncover 2
    swap
    -
    dig 1
    len
    swap
    uncover 2
    swap
    uncover 2
    substring3
    uncover 2
    concat
    ==
    // inner_transactions/contract.py:257-259
    // assert (
    //     app_1.approval_program_pages(1) == approval_2[-3:] + approval_2
    // ), "expected approval page 1"
    assert // expected approval page 1
    // inner_transactions/contract.py:260
    // assert app_1.num_clear_state_program_pages == 1, "clear_state_pages == 1"
    swap
    int 1
    ==
    assert // clear_state_pages == 1
    // inner_transactions/contract.py:261
    // assert app_1.clear_state_program_pages(0) == ALWAYS_APPROVE, "expected clear_state_pages"
    int 1
    ==
    assert // 'app_1' can still be accessed
    int 0
    itxnas ClearStateProgramPages
    byte 0x098101
    ==
    assert // expected clear_state_pages
    retsub


// test_cases.inner_transactions.contract.MyContract.__init__() -> void:
__init__:
    // inner_transactions/contract.py:23
    // def __init__(self) -> None:
    proto 0 0
    // inner_transactions/contract.py:24
    // self.name = Bytes(b"")
    byte "name"
    byte ""
    app_global_put
    retsub
