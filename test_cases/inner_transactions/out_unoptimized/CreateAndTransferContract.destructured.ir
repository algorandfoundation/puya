contract test_cases.inner_transactions.asset_transfer.CreateAndTransferContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__puya_arc4_router__() -> bool:
            block@0: // L10
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@5
            block@1: // abi_routing_L10
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create_and_transfer()void" => block@2, * => block@3}
            block@2: // create_and_transfer_route_L11
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is not NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // can only call when not creating
                test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer()
                return 1u
            block@3: // switch_case_default_L10
                goto block@4
            block@4: // switch_case_next_L10
                goto block@9
            block@5: // bare_routing_L10
                let tmp%7#0: uint64 = (txn OnCompletion)
                switch tmp%7#0 {0u => block@6, * => block@7}
            block@6: // __algopy_default_create_L1
                let tmp%8#0: uint64 = (txn ApplicationID)
                let tmp%9#0: bool = (== tmp%8#0 0u)
                (assert tmp%9#0) // can only call when creating
                test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create()
                return 1u
            block@7: // switch_case_default_L10
                goto block@8
            block@8: // switch_case_next_L10
                goto block@9
            block@9: // after_if_else_L10
                return 0u
        
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer() -> void:
            block@0: // L11
                itxn_begin
                let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field ConfigAssetClawback) inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0)
                ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
                ((itxn_field ConfigAssetDecimals) 0u)
                ((itxn_field ConfigAssetUnitName) "TST")
                ((itxn_field ConfigAssetName) "test")
                ((itxn_field ConfigAssetTotal) 1000u)
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L15
                itxn_submit
                let new_asset#0: uint64 = (itxn CreatedAssetID)
                itxn_begin
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetCreator) new_asset#0)
                (assert check%0#0) // asset exists
                let inner_txn_params%1%%param_AssetSender_idx_0#0: bytes = value%0#0
                let inner_txn_params%1%%param_AssetReceiver_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%1%%param_XferAsset_idx_0#0: uint64 = new_asset#0
                ((itxn_field XferAsset) inner_txn_params%1%%param_XferAsset_idx_0#0)
                ((itxn_field AssetAmount) 1000u)
                ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetSender) inner_txn_params%1%%param_AssetSender_idx_0#0)
                ((itxn_field TypeEnum) axfer)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L28
                itxn_submit
                return 
        
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u