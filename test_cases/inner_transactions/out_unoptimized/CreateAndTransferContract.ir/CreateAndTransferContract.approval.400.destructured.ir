main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L10
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_and_transfer()void" => block@3, * => block@4}
    block@3: // create_and_transfer_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer[routing]()
        goto block@4
    block@4: // switch_case_next_L10
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L10
        exit 0u
    block@7: // after_inlined_test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer[routing]() -> void:
    block@0: // L11
        test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer()
        exit 1u

subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer() -> void:
    block@0: // L11
        itxn_begin
        let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field ConfigAssetClawback) inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0)
        ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 0u)
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field ConfigAssetName) "test")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L15
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedAssetID)
        let new_asset#0: uint64 = tmp%0#0
        itxn_begin
        let (value%0#0: account, check%0#0: bool) = ((asset_params_get AssetCreator) new_asset#0)
        (assert check%0#0) // asset exists
        let inner_txn_params%1%%param_AssetSender_idx_0#0: account = value%0#0
        let inner_txn_params%1%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%1%%param_XferAsset_idx_0#0: uint64 = new_asset#0
        ((itxn_field XferAsset) inner_txn_params%1%%param_XferAsset_idx_0#0)
        ((itxn_field AssetAmount) 1000u)
        ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
        ((itxn_field AssetSender) inner_txn_params%1%%param_AssetSender_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L28
        itxn_submit
        return 