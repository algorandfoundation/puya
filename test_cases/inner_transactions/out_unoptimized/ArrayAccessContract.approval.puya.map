{
  "version": 3,
  "sources": [
    "../array_access.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;AACK;;;AAAA;;;AAAA;AAAA;AAAL;;;;;;AAEW;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAX;;;AAAA;;;AAC6B;AAGH;;;AAAa;;;AADH;;;AADH;;;AADJ;;;AAAA;;;;;;AAAA;;;;AAYlB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAX;;;AAAA;;;AAC2C;AAAxB;;AAA8B;AAA9B;AAAP;AAC+B;AAAxB;;AAA8B;AAA9B;AAAP;;;;;AAE+B;AAAxB;;AAA8B;;;AAA9B;AAAP;AAC+B;AAAxB;;AAA8B;;;AAA9B;AAAP;AAC+B;AAAxB;;AAA8B;;;AAA9B;AAAP;;;;AAZiB;AAIR;;;;;;;;;;;;;;;;;;;;;;;AADK;;;;;AAAa;;;;;AAAa;;;;;AADhB;;;AADH;;;AADJ;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6 2"
    },
    "7": {
      "op": "bytecblock 0x098101 0x00 0x31 0x32"
    },
    "19": {
      "op": "b block@0"
    },
    "22": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "25": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "28": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "31": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "32": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "33": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "34": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "35": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "36": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "38": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "40": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "42": {
      "op": "intc_2 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "43": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "45": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "47": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "49": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "51": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "53": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "55": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "81": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "84": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "85": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "88": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "91": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "94": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "97": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "100": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "103": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "106": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "109": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "112": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "115": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "119": {
      "op": "bz else_body@8",
      "stack_out": []
    },
    "122": {
      "op": "b __algopy_default_create@7"
    },
    "125": {
      "block": "__algopy_default_create@7",
      "stack_in": [],
      "op": "b block@21"
    },
    "128": {
      "block": "block@21",
      "stack_in": [],
      "op": "b after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create@22"
    },
    "131": {
      "block": "after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create@22",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@8",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "134": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "137": {
      "op": "pushbytes 0x89a8220a // method \"test_branching_array_call(bool)void\"",
      "defined_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(test_branching_array_call(bool)void)"
      ]
    },
    "143": {
      "op": "uncover 1",
      "stack_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%5#0"
      ]
    },
    "145": {
      "op": "match test_branching_array_call_route@3",
      "stack_out": []
    },
    "149": {
      "op": "b switch_case_default@4"
    },
    "152": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "155": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "156": {
      "block": "test_branching_array_call_route@3",
      "stack_in": [],
      "callsub": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]",
      "op": "callsub test_branching_array_call"
    },
    "159": {
      "op": "b switch_case_next@5"
    },
    "162": {
      "subroutine": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]",
      "params": {},
      "block": "test_branching_array_call",
      "stack_in": [],
      "op": "b test_branching_array_call_block@0"
    },
    "165": {
      "block": "test_branching_array_call_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "168": {
      "callsub": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "op": "callsub test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "stack_out": []
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "subroutine": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "params": {
        "maybe#0": "bytes"
      },
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "176": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_block@0"
    },
    "179": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "180": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "182": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe#0 (copy)"
      ]
    },
    "185": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "186": {
      "op": "bz test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@3",
      "stack_out": []
    },
    "189": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@1"
    },
    "192": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@1",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "193": {
      "op": "bytec_2 // 0x31",
      "defined_out": [
        "0x31"
      ],
      "stack_out": [
        "0x31"
      ]
    },
    "194": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "196": {
      "op": "bytec_3 // 0x32",
      "defined_out": [
        "0x32"
      ],
      "stack_out": [
        "0x32"
      ]
    },
    "197": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "199": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101"
      ],
      "stack_out": [
        "0x098101"
      ]
    },
    "200": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "202": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "0x098101"
      ]
    },
    "203": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "205": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "206": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "208": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "209": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "211": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@2"
    },
    "214": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "215": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5"
    },
    "218": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5",
      "stack_in": [],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "219": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "221": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "222": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe#0 (copy)"
      ]
    },
    "224": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "225": {
      "op": "bz test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@7",
      "stack_out": []
    },
    "228": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@6"
    },
    "231": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_if_body@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "232": {
      "op": "itxnas ApplicationArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "234": {
      "op": "bytec_2 // 0x31",
      "defined_out": [
        "0x31",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x31"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "236": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "238": {
      "op": "itxnas ApplicationArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "240": {
      "op": "bytec_3 // 0x32",
      "defined_out": [
        "0x32",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x32"
      ]
    },
    "241": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "242": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": []
    },
    "243": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8"
    },
    "246": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "247": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "248": {
      "op": "itxnas ApplicationArgs",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "250": {
      "op": "pushbytes 0x33",
      "defined_out": [
        "0x33",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x33"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "254": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "256": {
      "op": "itxnas ApplicationArgs",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "258": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x34"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "262": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": []
    },
    "263": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "264": {
      "op": "itxnas ApplicationArgs",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "266": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0x35"
      ]
    },
    "269": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "270": {
      "error": "correct args used 3",
      "op": "assert // correct args used 3",
      "stack_out": []
    },
    "271": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@8"
    },
    "274": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_else_body@3",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "275": {
      "op": "pushbytes 0x646966666572656e7420706172616d20736574",
      "defined_out": [
        "0x646966666572656e7420706172616d20736574"
      ],
      "stack_out": [
        "0x646966666572656e7420706172616d20736574"
      ]
    },
    "296": {
      "op": "itxn_field Note",
      "stack_out": []
    },
    "298": {
      "op": "pushbytes 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "0x33"
      ]
    },
    "301": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "303": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "0x34"
      ]
    },
    "306": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "308": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35"
      ],
      "stack_out": [
        "0x35"
      ]
    },
    "311": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "313": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101"
      ],
      "stack_out": [
        "0x098101"
      ]
    },
    "314": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "316": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "0x098101"
      ]
    },
    "317": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "319": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "320": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "323": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "325": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@4"
    },
    "328": {
      "block": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "329": {
      "op": "b test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call_after_if_else@5"
    }
  }
}