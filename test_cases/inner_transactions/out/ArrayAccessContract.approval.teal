#pragma version 10

test_cases.inner_transactions.array_access.ArrayAccessContract.approval_program:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@5
    method "test_branching_array_call(bool)void"
    txna ApplicationArgs 0
    match main_test_branching_array_call_route@2
    err // reject transaction

main_test_branching_array_call_route@2:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txna ApplicationArgs 1
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    callsub test_branching_array_call
    int 1
    return

main_bare_routing@5:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: bytes) -> void:
test_branching_array_call:
    // inner_transactions/array_access.py:21-22
    // @arc4.abimethod
    // def test_branching_array_call(self, maybe: arc4.Bool) -> None:
    proto 1 0
    // inner_transactions/array_access.py:23
    // if maybe:
    frame_dig -1
    byte 0x00
    !=
    dup
    bz test_branching_array_call_else_body@3
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:27
    // app_args=(Bytes(b"1"), Bytes(b"2")),
    byte 0x31
    itxn_field ApplicationArgs
    byte 0x32
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:26
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:25
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:24
    // create_app_txn = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_submit
    b test_branching_array_call_after_if_else@5

test_branching_array_call_else_body@3:
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:34
    // note=b"different param set",
    byte "different param set"
    itxn_field Note
    // inner_transactions/array_access.py:33
    // app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    byte 0x33
    itxn_field ApplicationArgs
    byte 0x34
    itxn_field ApplicationArgs
    byte 0x35
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:32
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:31
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:30
    // create_app_txn = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_submit

test_branching_array_call_after_if_else@5:
    // inner_transactions/array_access.py:36
    // if maybe:
    frame_dig 0
    bz test_branching_array_call_else_body@7
    // inner_transactions/array_access.py:37
    // assert create_app_txn.app_args(0) == b"1", "correct args used 1"
    itxna ApplicationArgs 0
    byte "1"
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:38
    // assert create_app_txn.app_args(1) == b"2", "correct args used 2"
    itxna ApplicationArgs 1
    byte "2"
    ==
    assert // correct args used 2
    b test_branching_array_call_after_if_else@8

test_branching_array_call_else_body@7:
    // inner_transactions/array_access.py:40
    // assert create_app_txn.app_args(0) == b"3", "correct args used 1"
    itxna ApplicationArgs 0
    byte "3"
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:41
    // assert create_app_txn.app_args(1) == b"4", "correct args used 2"
    itxna ApplicationArgs 1
    byte "4"
    ==
    assert // correct args used 2
    // inner_transactions/array_access.py:42
    // assert create_app_txn.app_args(2) == b"5", "correct args used 3"
    itxna ApplicationArgs 2
    byte "5"
    ==
    assert // correct args used 3

test_branching_array_call_after_if_else@8:
    retsub
