#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 6 0
    bytecblock 0x098101 0x31 0x32 0x33
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0x89a8220a // method "test_branching_array_call(bool)void"
    txna ApplicationArgs 0
    match main_test_branching_array_call_route@3
    err

main_test_branching_array_call_route@3:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test_branching_array_call

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]() -> void:
test_branching_array_call:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    txna ApplicationArgs 1
    // inner_transactions/array_access.py:23
    // if maybe:
    pushbytes 0x00
    !=
    dup
    bz test_branching_array_call_else_body@4
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:27
    // app_args=(Bytes(b"1"), Bytes(b"2")),
    bytec_1 // 0x31
    itxn_field ApplicationArgs
    bytec_2 // 0x32
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:26
    // clear_state_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:25
    // approval_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:24
    // create_app_txn = itxn.ApplicationCall(
    intc_0 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_submit

test_branching_array_call_after_if_else@6:
    // inner_transactions/array_access.py:36
    // if maybe:
    dup
    bz test_branching_array_call_else_body@8
    // inner_transactions/array_access.py:37
    // assert create_app_txn.app_args(0) == b"1", "correct args used 1"
    itxna ApplicationArgs 0
    bytec_1 // 0x31
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:38
    // assert create_app_txn.app_args(1) == b"2", "correct args used 2"
    itxna ApplicationArgs 1
    bytec_2 // 0x32
    ==
    assert // correct args used 2

test_branching_array_call_after_if_else@9:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    pushint 1 // 1
    return

test_branching_array_call_else_body@8:
    // inner_transactions/array_access.py:40
    // assert create_app_txn.app_args(0) == b"3", "correct args used 1"
    itxna ApplicationArgs 0
    bytec_3 // 0x33
    ==
    assert // correct args used 1
    // inner_transactions/array_access.py:41
    // assert create_app_txn.app_args(1) == b"4", "correct args used 2"
    itxna ApplicationArgs 1
    pushbytes 0x34
    ==
    assert // correct args used 2
    // inner_transactions/array_access.py:42
    // assert create_app_txn.app_args(2) == b"5", "correct args used 3"
    itxna ApplicationArgs 2
    pushbytes 0x35
    ==
    assert // correct args used 3
    b test_branching_array_call_after_if_else@9

test_branching_array_call_else_body@4:
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_begin
    // inner_transactions/array_access.py:34
    // note=b"different param set",
    pushbytes 0x646966666572656e7420706172616d20736574
    itxn_field Note
    // inner_transactions/array_access.py:33
    // app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    bytec_3 // 0x33
    itxn_field ApplicationArgs
    pushbytes 0x34
    itxn_field ApplicationArgs
    pushbytes 0x35
    itxn_field ApplicationArgs
    // inner_transactions/array_access.py:32
    // clear_state_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // inner_transactions/array_access.py:31
    // approval_program=ALWAYS_APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // inner_transactions/array_access.py:30
    // create_app_txn = itxn.ApplicationCall(
    intc_0 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_submit
    b test_branching_array_call_after_if_else@6
