contract test_cases.inner_transactions.asset_transfer.CreateAndTransferContract:
    program approval:
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.approval_program() -> bool:
            block@0: // L10
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L10
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "create_and_transfer()void" => block@2, * => fail // reject transaction}
            block@2: // create_and_transfer_route_L11
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer()
                return 1u
            block@5: // bare_routing_L10
                let tmp%5#0: uint64 = (txn OnCompletion)
                let not%tmp%5#0: bool = (! tmp%5#0)
                (assert not%tmp%5#0) // reject transaction
                let tmp%6#0: bool = (txn ApplicationID)
                let tmp%7#0: bool = (! tmp%6#0)
                (assert tmp%7#0) // is creating
                return 1u
        
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer() -> void:
            block@0: // L11
                itxn_begin
                let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field ConfigAssetClawback) inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0)
                ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
                ((itxn_field ConfigAssetDecimals) 0u)
                ((itxn_field ConfigAssetUnitName) "TST")
                ((itxn_field ConfigAssetName) "test")
                ((itxn_field ConfigAssetTotal) 1000u)
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                itxn_submit
                let new_asset#0: uint64 = (itxn CreatedAssetID)
                itxn_begin
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetCreator) new_asset#0)
                (assert check%0#0) // asset exists
                let inner_txn_params%1%%param_AssetReceiver_idx_0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field XferAsset) new_asset#0)
                ((itxn_field AssetAmount) 1000u)
                ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetSender) value%0#0)
                ((itxn_field TypeEnum) axfer)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
    
    program clear-state:
        subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.clear_state_program() -> bool:
            block@0: // L10
                return 1u