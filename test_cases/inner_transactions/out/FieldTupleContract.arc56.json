{
    "name": "FieldTupleContract",
    "structs": {},
    "methods": [
        {
            "name": "test_assign_tuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_assign_tuple_mixed",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        98
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEBQYAASYTAwmBAQIxYQIyYRNkaWZmZXJlbnQgcGFyYW0gc2V0BWhlbGxvBXdvcmxkAjNhAjRhAjVhAjNiAjRiAjViAjFiAjJiAjFjAjJjAjNjAjRjAjVjMRtBAB0xGRREMRhEggIEHKLAfgTsbNCoNhoAjgIACwFeADEZFDEYFBBEJUOBKhYlFrEpshoqshonBLIaJwWyGoABIbIaSwGyGrIaIrIZKLJCKLJAI7IQJLIBtiuyBScGshonB7IaJwiyGiKyGSiyQiiyQCOyECSyAbO4ABoAKRJEuAAaASoSRLgAGgInBBJEuAAaAycFEkS4ABoEgAEhEkS4ABoFEkS4ABoGJRYSRLUaACcGEkS1GgEnBxJEtRoCJwgSRLErsgUnCbIaJwqyGicLshoishkoskIoskAjshAksgG2JwyyGicNshoishkoskIoskAjshAksgGztRoAJwwSRLUaAScNEkS4ABoAJwkSRLgAGgEnChJEuAAaAicLEkSxJw6yGicPshoishkoskIoskAjshAksgG2K7IFJxCyGicRshonErIaIrIZKLJCKLJAI7IQJLIBs7gAGgAnDhJEuAAaAScPEkS1GgAnEBJEtRoBJxESRLUaAicSEkOxKbIaKrIaIrIZKLJCKLJAI7IQJLIBs7UaACkSRLUaASoSQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}