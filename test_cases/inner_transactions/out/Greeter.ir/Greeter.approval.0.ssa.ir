main test_cases.inner_transactions.c2c.Greeter.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.inner_transactions.c2c.Greeter.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "bootstrap()uint64" => block@2, method "log_greetings(string)void" => block@3, * => block@4}
    block@2: // bootstrap_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.inner_transactions.c2c.Greeter.bootstrap()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%7#0)
        return 1u
    block@3: // log_greetings_route_L23
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let tmp%12#0: bytes = (txna ApplicationArgs 1)
        test_cases.inner_transactions.c2c.Greeter.log_greetings(tmp%12#0)
        return 1u
    block@4: // switch_case_default_L6
        goto block@5
    block@5: // switch_case_next_L6
        goto block@10
    block@6: // bare_routing_L6
        let tmp%13#0: uint64 = (txn OnCompletion)
        switch tmp%13#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        (assert tmp%15#0) // can only call when creating
        test_cases.inner_transactions.c2c.Greeter.__algopy_default_create()
        return 1u
    block@8: // switch_case_default_L6
        goto block@9
    block@9: // switch_case_next_L6
        goto block@10
    block@10: // after_if_else_L6
        return 0u

subroutine test_cases.inner_transactions.c2c.Greeter.__init__() -> void:
    block@0: // L7
        (app_global_put "hello_app" 0u)
        return 

subroutine test_cases.inner_transactions.c2c.Greeter.bootstrap() -> uint64:
    block@0: // L10
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        let reinterpret_bool%0#0: bool = maybe_value%0#0
        let tmp%0#0: bool = (! reinterpret_bool%0#0)
        (assert tmp%0#0) // already bootstrapped
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = 0x0a8101
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 1u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L14
        itxn_submit
        let new_state_value%0#0: uint64 = itxn[itxn_group_idx(0)].CreatedApplicationID
        (app_global_put "hello_app" new_state_value%0#0)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%1#0) // check self.hello_app exists
        return maybe_value%1#0

subroutine test_cases.inner_transactions.c2c.Greeter.log_greetings(name: bytes) -> void:
    block@0: // L23
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = maybe_value%0#0
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes[4] = method "hello(string)string"
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = name#0
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 2u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L25
        itxn_submit
        let hello_call#0: itxn_group_idx = itxn_group_idx(0)
        let hello_call._is_last#0: bool = 1u
        let hello_call.Sender#0: bytes[32] = itxn[hello_call#0].Sender
        let hello_call.Fee#0: uint64 = itxn[hello_call#0].Fee
        let hello_call.FirstValid#0: uint64 = itxn[hello_call#0].FirstValid
        let hello_call.FirstValidTime#0: uint64 = itxn[hello_call#0].FirstValidTime
        let hello_call.LastValid#0: uint64 = itxn[hello_call#0].LastValid
        let hello_call.Note#0: bytes = itxn[hello_call#0].Note
        let hello_call.Lease#0: bytes = itxn[hello_call#0].Lease
        let hello_call.Receiver#0: bytes[32] = itxn[hello_call#0].Receiver
        let hello_call.Amount#0: uint64 = itxn[hello_call#0].Amount
        let hello_call.CloseRemainderTo#0: bytes[32] = itxn[hello_call#0].CloseRemainderTo
        let hello_call.VotePK#0: bytes = itxn[hello_call#0].VotePK
        let hello_call.SelectionPK#0: bytes = itxn[hello_call#0].SelectionPK
        let hello_call.VoteFirst#0: uint64 = itxn[hello_call#0].VoteFirst
        let hello_call.VoteLast#0: uint64 = itxn[hello_call#0].VoteLast
        let hello_call.VoteKeyDilution#0: uint64 = itxn[hello_call#0].VoteKeyDilution
        let hello_call.Type#0: bytes = itxn[hello_call#0].Type
        let hello_call.TypeEnum#0: uint64 = itxn[hello_call#0].TypeEnum
        let hello_call.XferAsset#0: uint64 = itxn[hello_call#0].XferAsset
        let hello_call.AssetAmount#0: uint64 = itxn[hello_call#0].AssetAmount
        let hello_call.AssetSender#0: bytes[32] = itxn[hello_call#0].AssetSender
        let hello_call.AssetReceiver#0: bytes[32] = itxn[hello_call#0].AssetReceiver
        let hello_call.AssetCloseTo#0: bytes[32] = itxn[hello_call#0].AssetCloseTo
        let hello_call.GroupIndex#0: uint64 = itxn[hello_call#0].GroupIndex
        let hello_call.TxID#0: bytes = itxn[hello_call#0].TxID
        let hello_call.ApplicationID#0: uint64 = itxn[hello_call#0].ApplicationID
        let hello_call.OnCompletion#0: uint64 = itxn[hello_call#0].OnCompletion
        let hello_call.NumAppArgs#0: uint64 = itxn[hello_call#0].NumAppArgs
        let hello_call.NumAccounts#0: uint64 = itxn[hello_call#0].NumAccounts
        let hello_call.ApprovalProgram#0: bytes = itxn[hello_call#0].ApprovalProgram
        let hello_call.ClearStateProgram#0: bytes = itxn[hello_call#0].ClearStateProgram
        let hello_call.RekeyTo#0: bytes[32] = itxn[hello_call#0].RekeyTo
        let hello_call.ConfigAsset#0: uint64 = itxn[hello_call#0].ConfigAsset
        let hello_call.ConfigAssetTotal#0: uint64 = itxn[hello_call#0].ConfigAssetTotal
        let hello_call.ConfigAssetDecimals#0: uint64 = itxn[hello_call#0].ConfigAssetDecimals
        let hello_call.ConfigAssetDefaultFrozen#0: bool = itxn[hello_call#0].ConfigAssetDefaultFrozen
        let hello_call.ConfigAssetUnitName#0: bytes = itxn[hello_call#0].ConfigAssetUnitName
        let hello_call.ConfigAssetName#0: bytes = itxn[hello_call#0].ConfigAssetName
        let hello_call.ConfigAssetURL#0: bytes = itxn[hello_call#0].ConfigAssetURL
        let hello_call.ConfigAssetMetadataHash#0: bytes = itxn[hello_call#0].ConfigAssetMetadataHash
        let hello_call.ConfigAssetManager#0: bytes[32] = itxn[hello_call#0].ConfigAssetManager
        let hello_call.ConfigAssetReserve#0: bytes[32] = itxn[hello_call#0].ConfigAssetReserve
        let hello_call.ConfigAssetFreeze#0: bytes[32] = itxn[hello_call#0].ConfigAssetFreeze
        let hello_call.ConfigAssetClawback#0: bytes[32] = itxn[hello_call#0].ConfigAssetClawback
        let hello_call.FreezeAsset#0: uint64 = itxn[hello_call#0].FreezeAsset
        let hello_call.FreezeAssetAccount#0: bytes[32] = itxn[hello_call#0].FreezeAssetAccount
        let hello_call.FreezeAssetFrozen#0: bool = itxn[hello_call#0].FreezeAssetFrozen
        let hello_call.NumAssets#0: uint64 = itxn[hello_call#0].NumAssets
        let hello_call.NumApplications#0: uint64 = itxn[hello_call#0].NumApplications
        let hello_call.GlobalNumUint#0: uint64 = itxn[hello_call#0].GlobalNumUint
        let hello_call.GlobalNumByteSlice#0: uint64 = itxn[hello_call#0].GlobalNumByteSlice
        let hello_call.LocalNumUint#0: uint64 = itxn[hello_call#0].LocalNumUint
        let hello_call.LocalNumByteSlice#0: uint64 = itxn[hello_call#0].LocalNumByteSlice
        let hello_call.ExtraProgramPages#0: uint64 = itxn[hello_call#0].ExtraProgramPages
        let hello_call.Nonparticipation#0: bool = itxn[hello_call#0].Nonparticipation
        let hello_call.NumLogs#0: uint64 = itxn[hello_call#0].NumLogs
        let hello_call.CreatedAssetID#0: uint64 = itxn[hello_call#0].CreatedAssetID
        let hello_call.CreatedApplicationID#0: uint64 = itxn[hello_call#0].CreatedApplicationID
        let hello_call.LastLog#0: bytes = itxn[hello_call#0].LastLog
        let hello_call.StateProofPK#0: bytes = itxn[hello_call#0].StateProofPK
        let hello_call.NumApprovalProgramPages#0: uint64 = itxn[hello_call#0].NumApprovalProgramPages
        let hello_call.NumClearStateProgramPages#0: uint64 = itxn[hello_call#0].NumClearStateProgramPages
        let tmp%0#0: bytes = ((extract 4 0) hello_call.LastLog#0)
        let tmp%1#0: bytes = ((extract 0 4) hello_call.LastLog#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let greeting#0: bytes = tmp%0#0
        let tmp%3#0: bytes = (concat "HelloWorld returned: " "")
        let tmp%4#0: bytes = ((extract 2 0) greeting#0)
        let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
        (log tmp%5#0)
        return 

subroutine test_cases.inner_transactions.c2c.Greeter.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__()
        return tmp%0#0