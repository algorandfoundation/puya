main test_cases.inner_transactions.c2c.Greeter.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "hello_app" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@7
    block@4: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "bootstrap()uint64" => block@5, method "log_greetings(string)void" => block@6, * => block@9}
    block@5: // bootstrap_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: uint64 = test_cases.inner_transactions.c2c.Greeter.bootstrap()
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#1)
        (log tmp%9#0)
        let test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0
        goto block@10
    block@6: // log_greetings_route_L23
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        test_cases.inner_transactions.c2c.Greeter.log_greetings(reinterpret_Encoded(len+utf8[])%0#0)
        let test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0
        goto block@10
    block@7: // bare_routing_L6
        let tmp%14#0: uint64 = (txn OnCompletion)
        goto tmp%14#0 ? block@9 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // can only call when creating
        let test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0
        goto block@10
    block@9: // after_if_else_L6
        let test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router__%0#0
        goto block@10
    block@10: // after_inlined_test_cases.inner_transactions.c2c.Greeter.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.inner_transactions.c2c.Greeter.bootstrap() -> uint64:
    block@0: // L10
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        let tmp%0#0: bool = (! maybe_value%0#0)
        (assert tmp%0#0) // already bootstrapped
        itxn_begin
        ((itxn_field ClearStateProgramPages) 0x0a8101)
        ((itxn_field ApprovalProgramPages) 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        (app_global_put "hello_app" tmp%1#0)
        return tmp%1#0

subroutine test_cases.inner_transactions.c2c.Greeter.log_greetings(name: Encoded(len+utf8[])) -> void:
    block@0: // L23
        itxn_begin
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "hello_app")
        (assert maybe_exists%0#0) // check self.hello_app exists
        ((itxn_field ApplicationArgs) method "hello(string)string")
        ((itxn_field ApplicationArgs) name#0)
        ((itxn_field ApplicationID) maybe_value%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_call.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 0 4) hello_call.LastLog#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%4#0: string = ((extract 6 0) hello_call.LastLog#0)
        let tmp%5#0: bytes = (concat "HelloWorld returned: " tmp%4#0)
        (log tmp%5#0)
        return 