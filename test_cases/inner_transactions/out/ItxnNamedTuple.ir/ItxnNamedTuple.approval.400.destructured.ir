main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@8, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21][tmp%4#0] else goto block@21
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "named_tuple_itxn(uint64)void" => block@3, method "named_tuple_itxn2(uint64)void" => block@4, method "named_tuple_itxn3(uint64)void" => block@5, * => block@7}
    block@3: // named_tuple_itxn_route_L12
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]()
        goto block@7
    block@4: // named_tuple_itxn2_route_L17
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]()
        goto block@7
    block@5: // named_tuple_itxn3_route_L22
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]()
        goto block@7
    block@7: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@21: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! hmm.bar.Amount#0)
        (assert tmp%0#1)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! txn.Amount#0)
        (assert tmp%0#1)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]() -> void:
    block@0: // L22
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! hmmm.bar.Amount#0)
        (assert tmp%0#1)
        exit 1u