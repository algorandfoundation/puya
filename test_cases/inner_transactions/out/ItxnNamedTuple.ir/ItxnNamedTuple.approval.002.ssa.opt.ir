main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@21
    block@5: // call_NoOp_L11
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "named_tuple_itxn(uint64)void" => block@6, method "named_tuple_itxn2(uint64)void" => block@7, method "named_tuple_itxn3(uint64)void" => block@8, * => block@21}
    block@6: // named_tuple_itxn_route_L12
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]()
        goto block@21
    block@7: // named_tuple_itxn2_route_L17
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]()
        goto block@21
    block@8: // named_tuple_itxn3_route_L22
        test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]()
        goto block@21
    block@17: // bare_routing_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u
    block@21: // after_if_else_L11
        fail

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! hmm.bar.Amount#0)
        (assert tmp%0#1)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! txn.Amount#0)
        (assert tmp%0#1)
        exit 1u

subroutine test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]() -> void:
    block@0: // L22
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#1: bool = (! hmmm.bar.Amount#0)
        (assert tmp%0#1)
        exit 1u