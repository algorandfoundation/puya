{
    "hints": {
        "test_assign_tuple()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_assign_tuple_mixed()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLmlubmVyX3RyYW5zYWN0aW9ucy5maWVsZF90dXBsZV9hc3NpZ25tZW50LkZpZWxkVHVwbGVDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gaW5uZXJfdHJhbnNhY3Rpb25zL2ZpZWxkX3R1cGxlX2Fzc2lnbm1lbnQucHk6MjEKICAgIC8vIGNsYXNzIEZpZWxkVHVwbGVDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FieldTupleContract",
        "methods": [
            {
                "name": "test_assign_tuple",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_assign_tuple_mixed",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}