#pragma version 10
#pragma typetrack false

// test_cases.inner_transactions.c2c.Greeter.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 6
    bytecblock "hello_app" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // inner_transactions/c2c.py:8
    // self.hello_app = Application()
    bytec_0 // "hello_app"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // inner_transactions/c2c.py:6
    // class Greeter(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x786b6291 0x33fb5d48 // method "bootstrap()uint64", method "log_greetings(string)void"
    txna ApplicationArgs 0
    match main_bootstrap_route@5 main_log_greetings_route@6

main_after_if_else@9:
    // inner_transactions/c2c.py:6
    // class Greeter(ARC4Contract):
    intc_0 // 0
    return

main_log_greetings_route@6:
    // inner_transactions/c2c.py:23
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // inner_transactions/c2c.py:6
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    // inner_transactions/c2c.py:23
    // @arc4.abimethod()
    callsub log_greetings
    intc_1 // 1
    return

main_bootstrap_route@5:
    // inner_transactions/c2c.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrap
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@7:
    // inner_transactions/c2c.py:6
    // class Greeter(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test_cases.inner_transactions.c2c.Greeter.bootstrap() -> uint64:
bootstrap:
    // inner_transactions/c2c.py:12
    // assert not self.hello_app, "already bootstrapped"
    intc_0 // 0
    bytec_0 // "hello_app"
    app_global_get_ex
    assert // check self.hello_app exists
    !
    assert // already bootstrapped
    // inner_transactions/c2c.py:14-18
    // itxn.ApplicationCall(
    //     approval_program=Bytes.from_hex(HELLO_WORLD_APPROVAL_HEX),
    //     clear_state_program=HELLO_WORLD_CLEAR,
    // )
    // .submit()
    itxn_begin
    // inner_transactions/c2c.py:16
    // clear_state_program=HELLO_WORLD_CLEAR,
    pushbytes 0x0a8101
    itxn_field ClearStateProgramPages
    // inner_transactions/c2c.py:15
    // approval_program=Bytes.from_hex(HELLO_WORLD_APPROVAL_HEX),
    pushbytes 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089
    itxn_field ApprovalProgramPages
    // inner_transactions/c2c.py:14
    // itxn.ApplicationCall(
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // inner_transactions/c2c.py:14-18
    // itxn.ApplicationCall(
    //     approval_program=Bytes.from_hex(HELLO_WORLD_APPROVAL_HEX),
    //     clear_state_program=HELLO_WORLD_CLEAR,
    // )
    // .submit()
    itxn_submit
    // inner_transactions/c2c.py:13
    // self.hello_app = (
    bytec_0 // "hello_app"
    // inner_transactions/c2c.py:14-19
    // itxn.ApplicationCall(
    //     approval_program=Bytes.from_hex(HELLO_WORLD_APPROVAL_HEX),
    //     clear_state_program=HELLO_WORLD_CLEAR,
    // )
    // .submit()
    // .created_app
    itxn CreatedApplicationID
    // inner_transactions/c2c.py:13-20
    // self.hello_app = (
    //     itxn.ApplicationCall(
    //         approval_program=Bytes.from_hex(HELLO_WORLD_APPROVAL_HEX),
    //         clear_state_program=HELLO_WORLD_CLEAR,
    //     )
    //     .submit()
    //     .created_app
    // )
    app_global_put
    // inner_transactions/c2c.py:21
    // return self.hello_app.id
    intc_0 // 0
    bytec_0 // "hello_app"
    app_global_get_ex
    assert // check self.hello_app exists
    retsub


// test_cases.inner_transactions.c2c.Greeter.log_greetings(name: bytes) -> void:
log_greetings:
    // inner_transactions/c2c.py:23-24
    // @arc4.abimethod()
    // def log_greetings(self, name: arc4.String) -> None:
    proto 1 0
    // inner_transactions/c2c.py:25-28
    // hello_call = itxn.ApplicationCall(
    //     app_id=self.hello_app,
    //     app_args=(arc4.arc4_signature("hello(string)string"), name),
    // ).submit()
    itxn_begin
    // inner_transactions/c2c.py:26
    // app_id=self.hello_app,
    intc_0 // 0
    bytec_0 // "hello_app"
    app_global_get_ex
    assert // check self.hello_app exists
    // inner_transactions/c2c.py:27
    // app_args=(arc4.arc4_signature("hello(string)string"), name),
    pushbytes 0x02bece11 // method "hello(string)string"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // inner_transactions/c2c.py:25
    // hello_call = itxn.ApplicationCall(
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // inner_transactions/c2c.py:25-28
    // hello_call = itxn.ApplicationCall(
    //     app_id=self.hello_app,
    //     app_args=(arc4.arc4_signature("hello(string)string"), name),
    // ).submit()
    itxn_submit
    itxn LastLog
    // inner_transactions/c2c.py:29
    // greeting = arc4.String.from_log(hello_call.last_log)
    dup
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // inner_transactions/c2c.py:30
    // log("HelloWorld returned: ", greeting.native)
    extract 6 0
    pushbytes "HelloWorld returned: "
    swap
    concat
    log
    retsub
