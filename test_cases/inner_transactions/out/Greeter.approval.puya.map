{
  "version": 3,
  "sources": [
    "../c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOQ;AAAiB;AAAjB;AAFR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAiBK;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAiBK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJL;;AAAA;;;;;;;;;AAIA;;;AAEmB;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEI;AAEwB;;;;;;;AADH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADrB;;;AAAA;;;AAAA;AADJ;AACI;;AADJ;AAQO;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEqB;AACF;AAAA;AAAA;AAAA;AACG;;;;;;;;;;;;;;AAFD;;;AAAA;;;AAAA;;;AAIF;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACkB;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA7B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6"
    },
    "6": {
      "op": "bytecblock \"hello_app\" 0x151f7c75"
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "28": {
      "op": "bytec_0 // \"hello_app\""
    },
    "29": {
      "op": "intc_0 // 0"
    },
    "30": {
      "op": "app_global_put"
    },
    "31": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "33": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "36": {
      "op": "pushbytess 0x786b6291 0x33fb5d48 // method \"bootstrap()uint64\", method \"log_greetings(string)void\""
    },
    "48": {
      "op": "txna ApplicationArgs 0"
    },
    "51": {
      "op": "match main_bootstrap_route@5 main_log_greetings_route@6"
    },
    "57": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "return"
    },
    "59": {
      "block": "main_log_greetings_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "69": {
      "callsub": "test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "op": "callsub log_greetings",
      "stack_out": []
    },
    "72": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "return"
    },
    "74": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "callsub": "test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "85": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "88": {
      "op": "log",
      "stack_out": []
    },
    "89": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return"
    },
    "91": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "93": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID"
    },
    "98": {
      "op": "!"
    },
    "99": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "100": {
      "op": "intc_1 // 1"
    },
    "101": {
      "op": "return"
    },
    "102": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.bootstrap",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "106": {
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "107": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "108": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "109": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "error": "already bootstrapped",
      "op": "assert // already bootstrapped",
      "stack_out": []
    },
    "111": {
      "op": "itxn_begin"
    },
    "112": {
      "op": "pushbytes 0x0a8101",
      "defined_out": [
        "0x0a8101"
      ],
      "stack_out": [
        "0x0a8101"
      ]
    },
    "117": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "119": {
      "op": "pushbytes 0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089",
      "defined_out": [
        "0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089"
      ],
      "stack_out": [
        "0x0a200101311b410026800402bece11361a008e0100010031191444311844361a018800158004151f7c754c50b02243311914443118144422438a01018bff570200800748656c6c6f2c204c504915165706004c5089"
      ]
    },
    "206": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "208": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "209": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "212": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "214": {
      "op": "itxn_submit"
    },
    "215": {
      "op": "bytec_0 // \"hello_app\""
    },
    "216": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "\"hello_app\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"hello_app\"",
        "new_state_value%0#0"
      ]
    },
    "218": {
      "op": "app_global_put",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "220": {
      "op": "bytec_0 // \"hello_app\"",
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "222": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    },
    "224": {
      "subroutine": "test_cases.inner_transactions.c2c.Greeter.log_greetings",
      "params": {
        "name#0": "bytes"
      },
      "block": "log_greetings",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "227": {
      "op": "itxn_begin"
    },
    "228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "229": {
      "op": "bytec_0 // \"hello_app\"",
      "defined_out": [
        "\"hello_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"hello_app\""
      ]
    },
    "230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "231": {
      "error": "check self.hello_app exists",
      "op": "assert // check self.hello_app exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "232": {
      "op": "pushbytes 0x02bece11 // method \"hello(string)string\"",
      "defined_out": [
        "Method(hello(string)string)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "Method(hello(string)string)"
      ]
    },
    "238": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "240": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "name#0 (copy)"
      ]
    },
    "242": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "244": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "246": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "247": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "250": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "252": {
      "op": "itxn_submit"
    },
    "253": {
      "op": "itxn LastLog"
    },
    "255": {
      "op": "dup",
      "defined_out": [
        "hello_call.LastLog#0",
        "hello_call.LastLog#0 (copy)"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "hello_call.LastLog#0 (copy)"
      ]
    },
    "256": {
      "op": "extract 4 0",
      "defined_out": [
        "greeting#0",
        "hello_call.LastLog#0"
      ],
      "stack_out": [
        "hello_call.LastLog#0",
        "greeting#0"
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "greeting#0",
        "hello_call.LastLog#0"
      ]
    },
    "260": {
      "op": "extract 0 4",
      "defined_out": [
        "greeting#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "greeting#0",
        "tmp%1#0"
      ]
    },
    "263": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "greeting#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "greeting#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "greeting#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "greeting#0",
        "tmp%2#0"
      ]
    },
    "265": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "greeting#0"
      ]
    },
    "266": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "269": {
      "op": "pushbytes \"HelloWorld returned: \"",
      "defined_out": [
        "\"HelloWorld returned: \"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"HelloWorld returned: \""
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "\"HelloWorld returned: \"",
        "tmp%4#0"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "294": {
      "op": "log",
      "stack_out": []
    },
    "295": {
      "retsub": true,
      "op": "retsub"
    }
  }
}