main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L10
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create_and_transfer()void" => block@3, * => block@5}
    block@3: // create_and_transfer_route_L11
        test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer[routing]()
        goto block@5
    block@5: // switch_case_next_L10
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L10
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create()
        exit 1u
    block@19: // switch_case_default_L10
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.create_and_transfer[routing]() -> void:
    block@0: // L11
        itxn_begin
        let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field ConfigAssetClawback) inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0)
        ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 0u)
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field ConfigAssetName) "test")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_submit
        let new_asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let (value%0#0: account, check%0#0: bool) = ((asset_params_get AssetCreator) new_asset#0)
        (assert check%0#0) // asset exists
        let inner_txn_params%1%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field XferAsset) new_asset#0)
        ((itxn_field AssetAmount) 1000u)
        ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
        ((itxn_field AssetSender) value%0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.inner_transactions.asset_transfer.CreateAndTransferContract.__algopy_default_create() -> void:
    block@0: // L1
        return 