#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    // inner_transactions/itxn_tuple.py:11
    // class ItxnNamedTuple(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // inner_transactions/itxn_tuple.py:11
    // class ItxnNamedTuple(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    // inner_transactions/itxn_tuple.py:11
    // class ItxnNamedTuple(arc4.ARC4Contract):
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // inner_transactions/itxn_tuple.py:11
    // class ItxnNamedTuple(arc4.ARC4Contract):
    pushbytess 0xdf478c6e 0x20694f7b 0xd6ca0578 // method "named_tuple_itxn(uint64)void", method "named_tuple_itxn2(uint64)void", method "named_tuple_itxn3(uint64)void"
    txna ApplicationArgs 0
    match named_tuple_itxn named_tuple_itxn2 named_tuple_itxn3
    err // this contract does not implement the given ABI method for call NoOp


// test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]() -> void:
named_tuple_itxn:
    // inner_transactions/itxn_tuple.py:12
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // inner_transactions/itxn_tuple.py:14
    // hmm = Hmmm(foo=amt, bar=itxn.Payment(receiver=Txn.sender, amount=amt).submit())
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn Amount
    // inner_transactions/itxn_tuple.py:15
    // assert hmm.bar.amount == 0
    !
    // inner_transactions/itxn_tuple.py:12
    // @arc4.abimethod()
    return


// test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]() -> void:
named_tuple_itxn2:
    // inner_transactions/itxn_tuple.py:17
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // inner_transactions/itxn_tuple.py:19
    // txn = Hmmm(foo=amt, bar=itxn.Payment(receiver=Txn.sender, amount=amt).submit()).bar
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn Amount
    // inner_transactions/itxn_tuple.py:20
    // assert txn.amount == 0
    !
    // inner_transactions/itxn_tuple.py:17
    // @arc4.abimethod()
    return


// test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]() -> void:
named_tuple_itxn3:
    // inner_transactions/itxn_tuple.py:22
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // inner_transactions/itxn_tuple.py:24
    // hmmm = Hmmm(foo=amt, bar=itxn.Payment(receiver=Txn.sender, amount=amt).submit())
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn Amount
    // inner_transactions/itxn_tuple.py:26
    // assert txn.amount == 0
    !
    // inner_transactions/itxn_tuple.py:22
    // @arc4.abimethod()
    return
