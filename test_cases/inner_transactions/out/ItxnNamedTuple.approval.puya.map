{
  "version": 3,
  "sources": [
    "../itxn_tuple.py"
  ],
  "mappings": ";;;;;;AAUA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE2B;AAAsB;;;;;;AAAtB;;;AAAA;;;AAAA;;;AACjB;AAHV;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE2B;AAAsB;;;;;;AAAtB;;;AAAA;;;AAAA;;;AACjB;AAHV;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE4B;AAAsB;;;;;;AAAtB;;;AAAA;;;AAAA;;;AAElB;AAJV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0"
    },
    "6": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "11": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "14": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "17": {
      "op": "assert",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0xdf478c6e 0x20694f7b 0xd6ca0578 // method \"named_tuple_itxn(uint64)void\", method \"named_tuple_itxn2(uint64)void\", method \"named_tuple_itxn3(uint64)void\"",
      "defined_out": [
        "Method(named_tuple_itxn(uint64)void)",
        "Method(named_tuple_itxn2(uint64)void)",
        "Method(named_tuple_itxn3(uint64)void)"
      ],
      "stack_out": [
        "Method(named_tuple_itxn(uint64)void)",
        "Method(named_tuple_itxn2(uint64)void)",
        "Method(named_tuple_itxn3(uint64)void)"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(named_tuple_itxn(uint64)void)",
        "Method(named_tuple_itxn2(uint64)void)",
        "Method(named_tuple_itxn3(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(named_tuple_itxn(uint64)void)",
        "Method(named_tuple_itxn2(uint64)void)",
        "Method(named_tuple_itxn3(uint64)void)",
        "tmp%6#0"
      ]
    },
    "38": {
      "op": "match named_tuple_itxn named_tuple_itxn2 named_tuple_itxn3",
      "stack_out": []
    },
    "46": {
      "op": "err"
    },
    "47": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "52": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "53": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "54": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "55": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "subroutine": "test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn[routing]",
      "params": {},
      "block": "named_tuple_itxn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "61": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "62": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "64": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "btoi",
      "defined_out": [
        "amt#0"
      ],
      "stack_out": [
        "amt#0"
      ]
    },
    "66": {
      "op": "itxn_begin"
    },
    "67": {
      "op": "txn Sender",
      "defined_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "69": {
      "op": "itxn_field Receiver"
    },
    "71": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "73": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "74": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "76": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "77": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "79": {
      "op": "itxn_submit"
    },
    "80": {
      "op": "itxn Amount",
      "defined_out": [
        "hmm.bar.Amount#0"
      ],
      "stack_out": [
        "hmm.bar.Amount#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "83": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "84": {
      "subroutine": "test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn2[routing]",
      "params": {},
      "block": "named_tuple_itxn2",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "88": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "89": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "90": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "91": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "amt#0"
      ],
      "stack_out": [
        "amt#0"
      ]
    },
    "93": {
      "op": "itxn_begin"
    },
    "94": {
      "op": "txn Sender",
      "defined_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "96": {
      "op": "itxn_field Receiver"
    },
    "98": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "100": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "101": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "103": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "104": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "106": {
      "op": "itxn_submit"
    },
    "107": {
      "op": "itxn Amount",
      "defined_out": [
        "txn.Amount#0"
      ],
      "stack_out": [
        "txn.Amount#0"
      ]
    },
    "109": {
      "op": "!",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "110": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "111": {
      "subroutine": "test_cases.inner_transactions.itxn_tuple.ItxnNamedTuple.named_tuple_itxn3[routing]",
      "params": {},
      "block": "named_tuple_itxn3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "115": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "116": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "117": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "118": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "btoi",
      "defined_out": [
        "amt#0"
      ],
      "stack_out": [
        "amt#0"
      ]
    },
    "120": {
      "op": "itxn_begin"
    },
    "121": {
      "op": "txn Sender",
      "defined_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "123": {
      "op": "itxn_field Receiver"
    },
    "125": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "127": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "128": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "130": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "131": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "133": {
      "op": "itxn_submit"
    },
    "134": {
      "op": "itxn Amount",
      "defined_out": [
        "hmmm.bar.Amount#0"
      ],
      "stack_out": [
        "hmmm.bar.Amount#0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "137": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    }
  }
}