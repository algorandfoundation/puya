// Op                                                                          Stack (out)
// test_cases.inner_transactions.array_access.ArrayAccessContract.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                               tmp%0#0
    return


// test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn NumAppArgs                                                             tmp%0#0
    bz __puya_arc4_router___bare_routing@5
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txna ApplicationArgs 0                                                     tmp%2#0
    method test_branching_array_call(bool)void                                 tmp%2#0,Method(test_branching_array_call(bool)void)
    l-load tmp%2#0 1                                                           Method(test_branching_array_call(bool)void),tmp%2#0
    match __puya_arc4_router___test_branching_array_call_route@2
    int 0                                                                      0
    retsub                                                                     0

__puya_arc4_router___test_branching_array_call_route@2:
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    txn OnCompletion                                                           tmp%3#0
    !                                                                          tmp%4#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                          tmp%5#0
    assert // is not creating
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txna ApplicationArgs 1                                                     tmp%7#0
    // inner_transactions/array_access.py:21
    // @arc4.abimethod
    callsub test_branching_array_call
    int 1                                                                      1
    retsub                                                                     1

__puya_arc4_router___bare_routing@5:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    txn OnCompletion                                                           tmp%8#0
    bnz __puya_arc4_router___after_if_else@9
    // Implicit fall through to __puya_arc4_router_____algopy_default_create@6

__puya_arc4_router_____algopy_default_create@6:
    txn ApplicationID                                                          tmp%9#0
    !                                                                          tmp%10#0
    assert // is creating
    int 1                                                                      1
    retsub                                                                     1

__puya_arc4_router___after_if_else@9:
    // inner_transactions/array_access.py:20
    // class ArrayAccessContract(ARC4Contract):
    int 0                                                                      0
    retsub                                                                     0


// test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: bytes) -> void:
test_branching_array_call:                                                     (洧도) maybe#0 |
    // inner_transactions/array_access.py:21-22
    // @arc4.abimethod
    // def test_branching_array_call(self, maybe: arc4.Bool) -> None:
    proto 1 0                                                                  (洧도) maybe#0 |

test_branching_array_call_block@0:                                             (洧도) maybe#0 |
    // inner_transactions/array_access.py:23
    // if maybe:
    p-load maybe#0                                                             (洧도) maybe#0 | maybe#0 (copy)
    byte 0x00                                                                  (洧도) maybe#0 | maybe#0 (copy),0x00
    !=                                                                         (洧도) maybe#0 | tmp%0#0
    l-store-copy tmp%0#0 0                                                     (洧도) maybe#0 | tmp%0#0,tmp%0#0
    f-store tmp%0#0                                                            (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%0#0
    l-load tmp%0#0 0                                                           (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%0#0
    bz test_branching_array_call_else_body@3                                   (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to test_branching_array_call_if_body@1            (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_if_body@1:                                           (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_begin                                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:27
    // app_args=(Bytes(b"1"), Bytes(b"2")),
    byte 0x31                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x31
    itxn_field ApplicationArgs                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    byte 0x32                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x32
    itxn_field ApplicationArgs                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:26
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101                                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x098101
    itxn_field ClearStateProgramPages                                          (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:25
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101                                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x098101
    itxn_field ApprovalProgramPages                                            (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:24
    // create_app_txn = itxn.ApplicationCall(
    int appl                                                                   (洧도) maybe#0 | (洧뎽) tmp%0#0 | appl
    itxn_field TypeEnum                                                        (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    int 0                                                                      (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0
    itxn_field Fee                                                             (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:24-28
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"1"), Bytes(b"2")),
    // ).submit()
    itxn_submit                                                                (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    b test_branching_array_call_after_if_else@5                                (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_else_body@3:                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_begin                                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:34
    // note=b"different param set",
    byte 0x646966666572656e7420706172616d20736574                              (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x646966666572656e7420706172616d20736574
    itxn_field Note                                                            (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:33
    // app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    byte 0x33                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x33
    itxn_field ApplicationArgs                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    byte 0x34                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x34
    itxn_field ApplicationArgs                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    byte 0x35                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x35
    itxn_field ApplicationArgs                                                 (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:32
    // clear_state_program=ALWAYS_APPROVE,
    byte 0x098101                                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x098101
    itxn_field ClearStateProgramPages                                          (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:31
    // approval_program=ALWAYS_APPROVE,
    byte 0x098101                                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0x098101
    itxn_field ApprovalProgramPages                                            (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:30
    // create_app_txn = itxn.ApplicationCall(
    int appl                                                                   (洧도) maybe#0 | (洧뎽) tmp%0#0 | appl
    itxn_field TypeEnum                                                        (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    int 0                                                                      (洧도) maybe#0 | (洧뎽) tmp%0#0 | 0
    itxn_field Fee                                                             (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:30-35
    // create_app_txn = itxn.ApplicationCall(
    //     approval_program=ALWAYS_APPROVE,
    //     clear_state_program=ALWAYS_APPROVE,
    //     app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
    //     note=b"different param set",
    // ).submit()
    itxn_submit                                                                (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to test_branching_array_call_after_if_else@5      (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_after_if_else@5:                                     (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:36
    // if maybe:
    f-load tmp%0#0                                                             (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%0#0
    bz test_branching_array_call_else_body@7                                   (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to test_branching_array_call_if_body@6            (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_if_body@6:                                           (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:37
    // assert create_app_txn.app_args(0) == b"1", "correct args used 1"
    itxna ApplicationArgs 0                                                    (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%2#0
    byte 0x31                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%2#0,0x31
    ==                                                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%3#0
    assert // correct args used 1                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:38
    // assert create_app_txn.app_args(1) == b"2", "correct args used 2"
    itxna ApplicationArgs 1                                                    (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%4#0
    byte 0x32                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%4#0,0x32
    ==                                                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%5#0
    assert // correct args used 2                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    b test_branching_array_call_after_if_else@8                                (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_else_body@7:                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:40
    // assert create_app_txn.app_args(0) == b"3", "correct args used 1"
    itxna ApplicationArgs 0                                                    (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%6#0
    byte 0x33                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%6#0,0x33
    ==                                                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%7#0
    assert // correct args used 1                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:41
    // assert create_app_txn.app_args(1) == b"4", "correct args used 2"
    itxna ApplicationArgs 1                                                    (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%8#0
    byte 0x34                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%8#0,0x34
    ==                                                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%9#0
    assert // correct args used 2                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // inner_transactions/array_access.py:42
    // assert create_app_txn.app_args(2) == b"5", "correct args used 3"
    itxna ApplicationArgs 2                                                    (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%10#0
    byte 0x35                                                                  (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%10#0,0x35
    ==                                                                         (洧도) maybe#0 | (洧뎽) tmp%0#0 | tmp%11#0
    assert // correct args used 3                                              (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to test_branching_array_call_after_if_else@8      (洧도) maybe#0 | (洧뎽) tmp%0#0 |

test_branching_array_call_after_if_else@8:                                     (洧도) maybe#0 | (洧뎽) tmp%0#0 |
    retsub


