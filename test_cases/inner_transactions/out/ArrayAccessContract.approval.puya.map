{
  "version": 3,
  "sources": [
    "../array_access.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEW;;AAAA;;;AAAA;AAAA;AAAX;;;AAC6B;AAGH;;;AAAa;;;AADH;;;AADH;;;AADJ;;;AAAA;;;AAAA;AAY7B;;AAAA;;;AACmB;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;AAA9B;AAAP;;AAEO;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;;AAZiB;AAIR;;;;;;;;;;;;;;;;;;;;;;;AADK;;;AAAa;;;;;AAAa;;;;;AADhB;;;AADH;;;AADJ;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6"
    },
    "6": {
      "op": "bytecblock 0x098101 0x31 0x32 0x33"
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "23": {
      "op": "pushbytes 0x89a8220a // method \"test_branching_array_call(bool)void\""
    },
    "29": {
      "op": "txna ApplicationArgs 0"
    },
    "32": {
      "op": "match main_test_branching_array_call_route@3"
    },
    "36": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "37": {
      "op": "return"
    },
    "38": {
      "block": "main_test_branching_array_call_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "40": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "41": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "42": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "44": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "45": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "48": {
      "callsub": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "op": "callsub test_branching_array_call",
      "stack_out": []
    },
    "51": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "return"
    },
    "53": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "55": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID"
    },
    "60": {
      "op": "!"
    },
    "61": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "62": {
      "op": "intc_1 // 1"
    },
    "63": {
      "op": "return"
    },
    "64": {
      "subroutine": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call",
      "params": {
        "maybe#0": "bytes"
      },
      "block": "test_branching_array_call",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "67": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe#0 (copy)"
      ],
      "stack_out": [
        "maybe#0 (copy)"
      ]
    },
    "69": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe#0 (copy)"
      ],
      "stack_out": [
        "maybe#0 (copy)",
        "0x00"
      ]
    },
    "72": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "74": {
      "op": "bz test_branching_array_call_else_body@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "itxn_begin"
    },
    "78": {
      "op": "bytec_1 // 0x31"
    },
    "79": {
      "op": "itxn_field ApplicationArgs"
    },
    "81": {
      "op": "bytec_2 // 0x32"
    },
    "82": {
      "op": "itxn_field ApplicationArgs"
    },
    "84": {
      "op": "bytec_0 // 0x098101"
    },
    "85": {
      "op": "itxn_field ClearStateProgramPages"
    },
    "87": {
      "op": "bytec_0 // 0x098101"
    },
    "88": {
      "op": "itxn_field ApprovalProgramPages"
    },
    "90": {
      "op": "intc_2 // appl"
    },
    "91": {
      "op": "itxn_field TypeEnum"
    },
    "93": {
      "op": "intc_0 // 0"
    },
    "94": {
      "op": "itxn_field Fee"
    },
    "96": {
      "op": "itxn_submit"
    },
    "97": {
      "block": "test_branching_array_call_after_if_else@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "bz test_branching_array_call_else_body@7",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "itxna ApplicationArgs 0"
    },
    "105": {
      "op": "bytec_1 // 0x31"
    },
    "106": {
      "op": "=="
    },
    "107": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1"
    },
    "108": {
      "op": "itxna ApplicationArgs 1"
    },
    "111": {
      "op": "bytec_2 // 0x32"
    },
    "112": {
      "op": "=="
    },
    "113": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2"
    },
    "114": {
      "retsub": true,
      "op": "retsub"
    },
    "115": {
      "block": "test_branching_array_call_else_body@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "itxna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "118": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "0x33"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "120": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "itxna ApplicationArgs 1",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "124": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "0x34"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "128": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "itxna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "132": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0",
        "0x35"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "136": {
      "error": "correct args used 3",
      "op": "assert // correct args used 3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "retsub": true,
      "op": "retsub"
    },
    "138": {
      "block": "test_branching_array_call_else_body@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "itxn_begin"
    },
    "139": {
      "op": "pushbytes 0x646966666572656e7420706172616d20736574",
      "defined_out": [
        "0x646966666572656e7420706172616d20736574"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x646966666572656e7420706172616d20736574"
      ]
    },
    "160": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x33"
      ]
    },
    "163": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x34"
      ]
    },
    "168": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x35"
      ]
    },
    "173": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x098101"
      ]
    },
    "176": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "tmp%0#0",
        "0x098101"
      ]
    },
    "179": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "tmp%0#0",
        "appl"
      ]
    },
    "182": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "184": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "185": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "itxn_submit"
    },
    "188": {
      "op": "b test_branching_array_call_after_if_else@5"
    }
  }
}