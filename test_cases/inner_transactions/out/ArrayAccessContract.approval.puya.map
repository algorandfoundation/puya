{
  "version": 3,
  "sources": [
    "../array_access.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAEM;;;AAAA;AAAA;AAAX;;;AAC6B;AAGH;;;AAAa;;;AADH;;;AADH;;;AADJ;;;AAAA;;;AAAA;AAY7B;AAAA;;;AACmB;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;AAA9B;AAAP;AAjBP;;AAAA;AAmBc;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;;;;AAZiB;AAIR;;;;;;;;;;;;;;;;;;;;;;;AADK;;;AAAa;;;;;AAAa;;;;;AADhB;;;AADH;;;AADJ;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 6 0"
    },
    "5": {
      "op": "bytecblock 0x098101 0x31 0x32 0x33"
    },
    "17": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "bz __algopy_default_create@6",
      "stack_out": []
    },
    "22": {
      "op": "pushbytes 0x89a8220a // method \"test_branching_array_call(bool)void\"",
      "defined_out": [
        "Method(test_branching_array_call(bool)void)"
      ],
      "stack_out": [
        "Method(test_branching_array_call(bool)void)"
      ]
    },
    "28": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "match test_branching_array_call_route@3",
      "stack_out": []
    },
    "35": {
      "op": "err"
    },
    "36": {
      "block": "test_branching_array_call_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "38": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "41": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "42": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "43": {
      "op": "b test_branching_array_call"
    },
    "46": {
      "block": "__algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "48": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "52": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "53": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "54": {
      "subroutine": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]",
      "params": {},
      "block": "test_branching_array_call",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "maybe#0"
      ],
      "stack_out": [
        "maybe#0"
      ]
    },
    "57": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe#0"
      ],
      "stack_out": [
        "maybe#0",
        "0x00"
      ]
    },
    "60": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "61": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "62": {
      "op": "bz test_branching_array_call_else_body@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "65": {
      "op": "itxn_begin"
    },
    "66": {
      "op": "bytec_1 // 0x31",
      "defined_out": [
        "0x31",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x31"
      ]
    },
    "67": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "69": {
      "op": "bytec_2 // 0x32",
      "defined_out": [
        "0x32",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x32"
      ]
    },
    "70": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "72": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "73": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "75": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "76": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "78": {
      "op": "intc_0 // appl",
      "defined_out": [
        "appl",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "appl"
      ]
    },
    "79": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "81": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "82": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "84": {
      "op": "itxn_submit"
    },
    "85": {
      "block": "test_branching_array_call_after_if_else@6",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "86": {
      "op": "bz test_branching_array_call_else_body@8",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "89": {
      "op": "itxna ApplicationArgs 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "92": {
      "op": "bytec_1 // 0x31",
      "defined_out": [
        "0x31",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "0x31"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "94": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "itxna ApplicationArgs 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "98": {
      "op": "bytec_2 // 0x32",
      "defined_out": [
        "0x32",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "0x32"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "100": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "101": {
      "block": "test_branching_array_call_after_if_else@9",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "104": {
      "block": "test_branching_array_call_else_body@8",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "itxna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "107": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "0x33"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "109": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "110": {
      "op": "itxna ApplicationArgs 1",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "113": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%10#0",
        "0x34"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "117": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "118": {
      "op": "itxna ApplicationArgs 2",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "121": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%12#0",
        "0x35"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0"
      ]
    },
    "125": {
      "error": "correct args used 3",
      "op": "assert // correct args used 3",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "126": {
      "op": "b test_branching_array_call_after_if_else@9"
    },
    "129": {
      "block": "test_branching_array_call_else_body@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "itxn_begin"
    },
    "130": {
      "op": "pushbytes 0x646966666572656e7420706172616d20736574",
      "defined_out": [
        "0x646966666572656e7420706172616d20736574"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x646966666572656e7420706172616d20736574"
      ]
    },
    "151": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "153": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x33"
      ]
    },
    "154": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "156": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x34"
      ]
    },
    "159": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "161": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x35"
      ]
    },
    "164": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "167": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "169": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "170": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "172": {
      "op": "intc_0 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "tmp%1#0",
        "appl"
      ]
    },
    "173": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "175": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "176": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "178": {
      "op": "itxn_submit"
    },
    "179": {
      "op": "b test_branching_array_call_after_if_else@6"
    }
  }
}