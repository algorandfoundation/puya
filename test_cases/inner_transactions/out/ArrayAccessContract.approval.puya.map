{
  "version": 3,
  "sources": [
    "../array_access.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAmBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;;AAEM;;;AAAA;AAAA;AAAX;;;AAC6B;AAGH;;;AAAa;;;AADH;;;AADH;;;AADJ;;;AAAA;;;AAAA;AAY7B;AAAA;;;AACmB;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;AAA9B;AAAP;AAjBP;AAAA;AAmBc;;;AAA8B;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;AACO;;;AAA8B;;;AAA9B;AAAP;;;;AAZiB;AAIR;;;;;;;;;;;;;;;;;;;;;;;AADK;;;AAAa;;;;;AAAa;;;;;AADhB;;;AADH;;;AADJ;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 6 0"
    },
    "6": {
      "op": "bytecblock 0x098101 0x31 0x32 0x33"
    },
    "18": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "21": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "23": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "24": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "25": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "26": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "52": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "53": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "55": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "57": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytes 0x89a8220a // method \"test_branching_array_call(bool)void\"",
      "defined_out": [
        "Method(test_branching_array_call(bool)void)"
      ],
      "stack_out": [
        "Method(test_branching_array_call(bool)void)"
      ]
    },
    "63": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(test_branching_array_call(bool)void)",
        "tmp%5#0"
      ]
    },
    "66": {
      "op": "match test_branching_array_call",
      "stack_out": []
    },
    "70": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "71": {
      "subroutine": "test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]",
      "params": {},
      "block": "test_branching_array_call",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "maybe#0"
      ],
      "stack_out": [
        "maybe#0"
      ]
    },
    "74": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe#0"
      ],
      "stack_out": [
        "maybe#0",
        "0x00"
      ]
    },
    "77": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "78": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "79": {
      "op": "bz test_branching_array_call_else_body@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "82": {
      "op": "itxn_begin"
    },
    "83": {
      "op": "bytec_1 // 0x31",
      "defined_out": [
        "0x31",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x31"
      ]
    },
    "84": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "86": {
      "op": "bytec_2 // 0x32",
      "defined_out": [
        "0x32",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x32"
      ]
    },
    "87": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "89": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "90": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "93": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "appl"
      ]
    },
    "96": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "98": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "99": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "101": {
      "op": "itxn_submit"
    },
    "102": {
      "block": "test_branching_array_call_after_if_else@6",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "103": {
      "op": "bz test_branching_array_call_else_body@8",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "106": {
      "op": "itxna ApplicationArgs 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "109": {
      "op": "bytec_1 // 0x31",
      "defined_out": [
        "0x31",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "0x31"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "111": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "112": {
      "op": "itxna ApplicationArgs 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "115": {
      "op": "bytec_2 // 0x32",
      "defined_out": [
        "0x32",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "0x32"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "117": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "118": {
      "block": "test_branching_array_call_after_if_else@9",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "119": {
      "op": "return",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "120": {
      "block": "test_branching_array_call_else_body@8",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "itxna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "123": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "0x33"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "125": {
      "error": "correct args used 1",
      "op": "assert // correct args used 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "126": {
      "op": "itxna ApplicationArgs 1",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "129": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%10#0",
        "0x34"
      ]
    },
    "132": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "133": {
      "error": "correct args used 2",
      "op": "assert // correct args used 2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "134": {
      "op": "itxna ApplicationArgs 2",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "137": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%12#0",
        "0x35"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0"
      ]
    },
    "141": {
      "error": "correct args used 3",
      "op": "assert // correct args used 3",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "142": {
      "op": "b test_branching_array_call_after_if_else@9"
    },
    "145": {
      "block": "test_branching_array_call_else_body@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "itxn_begin"
    },
    "146": {
      "op": "pushbytes 0x646966666572656e7420706172616d20736574",
      "defined_out": [
        "0x646966666572656e7420706172616d20736574"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x646966666572656e7420706172616d20736574"
      ]
    },
    "167": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "169": {
      "op": "bytec_3 // 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x33"
      ]
    },
    "170": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "172": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x34"
      ]
    },
    "175": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "177": {
      "op": "pushbytes 0x35",
      "defined_out": [
        "0x35"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x35"
      ]
    },
    "180": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "182": {
      "op": "bytec_0 // 0x098101",
      "defined_out": [
        "0x098101"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "183": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "185": {
      "op": "bytec_0 // 0x098101",
      "stack_out": [
        "tmp%1#0",
        "0x098101"
      ]
    },
    "186": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "188": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "tmp%1#0",
        "appl"
      ]
    },
    "189": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "191": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "192": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "194": {
      "op": "itxn_submit"
    },
    "195": {
      "op": "b test_branching_array_call_after_if_else@6"
    }
  }
}