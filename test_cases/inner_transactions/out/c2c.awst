contract Greeter
{
  globals {
    ['hello_app']: application
  }
  
  constructor()
  {
    GlobalState['hello_app']: application = reinterpret_cast<application>(0u)
  }
  
  abimethod bootstrap(): uint64
  {
    assert(!(reinterpret_cast<bool>(GlobalState['hello_app'])), comment="already bootstrapped")
    GlobalState['hello_app']: application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApprovalProgramPages=(hex<"0A200101311B410026800402BECE11361A008E0100010031191444311844361A018800158004151F7C754C50B02243311914443118144422438A01018BFF570200800748656C6C6F2C204C504915165706004C5089">), ClearStateProgramPages=(hex<"0A8101">))).CreatedApplicationID
    return reinterpret_cast<uint64>(GlobalState['hello_app'])
  }
  
  abimethod log_greetings(name: arc4.dynamic_array<arc4.uint8>): void
  {
    hello_call: inner_transaction_appl = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationID=GlobalState['hello_app'], ApplicationArgs=(Method("hello(string)string"), reinterpret_cast<bytes>(name))))
    greeting: arc4.dynamic_array<arc4.uint8> = checked_maybe((extract<4, 0>(SINGLE_EVAL(id=0, source=hello_call.LastLog)), extract<0, 4>(SINGLE_EVAL(id=0, source=hello_call.LastLog)) == hex<"151F7C75">))
    log(concat(concat('HelloWorld returned: ', ''), reinterpret_cast<bytes>(arc4_decode(greeting, string))))
  }
}