contract Greeter
{
  globals {
    ['hello_app']: puyapy.Application
  }
  
  constructor()
  {
    this.hello_app: puyapy.Application = reinterpret_cast<puyapy.Application>(0u)
  }
  
  abimethod bootstrap(): puyapy.UInt64
  {
    assert(!(reinterpret_cast<bool>(this.hello_app)), comment="already bootstrapped")
    this.hello_app: puyapy.Application = submit_txn(create_inner_transaction(TypeEnum=appl, ApprovalProgramPages=hex<"0A200101311B410026800402BECE11361A008E0100010031191444311844361A018800158004151F7C754C50B02243311914443118144422438A01018BFF570200800748656C6C6F2C204C504915165706004C5089">, ClearStateProgramPages=hex<"0A8101">, Fee=0u)).CreatedApplicationID
    return reinterpret_cast<puyapy.UInt64>(this.hello_app)
  }
  
  abimethod log_greetings(name: puyapy.arc4.String): None
  {
    hello_call: puyapy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(TypeEnum=appl, ApplicationID=this.hello_app, ApplicationArgs=(Method("hello(string)string"), name)))
    greeting: puyapy.arc4.String = reinterpret_cast<puyapy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=0, source=hello_call.LastLog)), extract<0, 4>(SINGLE_EVAL(id=0, source=hello_call.LastLog)) == hex<"151F7C75">)))
    log(concat(concat('HelloWorld returned: ', ''), arc4_decode(greeting, puyapy.Bytes)))
  }
}