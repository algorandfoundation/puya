LOG_1ST_ARG_AND_APPROVE = b'\t6\x1a\x00\xb0\x81\x01'
ALWAYS_APPROVE = b'\t\x81\x01'

contract ArrayAccessContract
{
  abimethod test_branching_array_call(maybe: algopy.arc4.Bool): None
  {
    if (reinterpret_cast<algopy.Bytes>(maybe) != hex<"00">) {
      create_app_txn: algopy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(TypeEnum=appl, ApprovalProgramPages=hex<"098101">, ClearStateProgramPages=hex<"098101">, ApplicationArgs=('1', '2'), Fee=0u))
    } else {
      create_app_txn: algopy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(TypeEnum=appl, ApprovalProgramPages=hex<"098101">, ClearStateProgramPages=hex<"098101">, ApplicationArgs=('3', '4', '5'), Note='different param set', Fee=0u))
    }
    if (reinterpret_cast<algopy.Bytes>(maybe) != hex<"00">) {
      assert(create_app_txn.ApplicationArgs[0u] == '1', comment="correct args used 1")
      assert(create_app_txn.ApplicationArgs[1u] == '2', comment="correct args used 2")
    } else {
      assert(create_app_txn.ApplicationArgs[0u] == '3', comment="correct args used 1")
      assert(create_app_txn.ApplicationArgs[1u] == '4', comment="correct args used 2")
      assert(create_app_txn.ApplicationArgs[2u] == '5', comment="correct args used 3")
    }
  }
}