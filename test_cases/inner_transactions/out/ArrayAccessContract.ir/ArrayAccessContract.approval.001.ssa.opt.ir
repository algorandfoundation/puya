main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_branching_array_call(bool)void" => block@3, * => block@10}
    block@3: // test_branching_array_call_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(reinterpret_bytes[1]%0#0)
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create()
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L20
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0 <- block@3, test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#1 <- block@7, test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: bytes[1]) -> void:
    block@0: // L21
        let tmp%0#0: bool = (!= maybe#0 0x00)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // if_body_L24
        itxn_begin
        ((itxn_field ApplicationArgs) 0x31)
        ((itxn_field ApplicationArgs) 0x32)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_app_txn#0: itxn_group_idx = itxn_group_idx(0)
        let create_app_txn._is_last#0: bool = 1u
        goto block@5
    block@3: // else_body_L30
        itxn_begin
        ((itxn_field Note) 0x646966666572656e7420706172616d20736574)
        ((itxn_field ApplicationArgs) 0x33)
        ((itxn_field ApplicationArgs) 0x34)
        ((itxn_field ApplicationArgs) 0x35)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_app_txn#1: itxn_group_idx = itxn_group_idx(0)
        let create_app_txn._is_last#1: bool = 1u
        goto block@5
    block@5: // after_if_else_L23
        goto tmp%0#0 ? block@6 : block@7
    block@6: // if_body_L37
        let tmp%2#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%3#0: bool = (== tmp%2#0 0x31)
        (assert tmp%3#0) // correct args used 1
        let tmp%4#0: bytes = ((itxnas ApplicationArgs) 1u)
        let tmp%5#0: bool = (== tmp%4#0 0x32)
        (assert tmp%5#0) // correct args used 2
        goto block@8
    block@7: // else_body_L40
        let tmp%6#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%7#0: bool = (== tmp%6#0 0x33)
        (assert tmp%7#0) // correct args used 1
        let tmp%8#0: bytes = ((itxnas ApplicationArgs) 1u)
        let tmp%9#0: bool = (== tmp%8#0 0x34)
        (assert tmp%9#0) // correct args used 2
        let tmp%10#0: bytes = ((itxnas ApplicationArgs) 2u)
        let tmp%11#0: bool = (== tmp%10#0 0x35)
        (assert tmp%11#0) // correct args used 3
        goto block@8
    block@8: // after_if_else_L36
        return 

subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.__algopy_default_create() -> void:
    block@0: // L1
        return 