main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L20
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_branching_array_call(bool)void" => block@3, * => block@5}
    block@3: // test_branching_array_call_route_L21
        test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]()
        goto block@5
    block@5: // switch_case_next_L20
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L20
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L20
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call[routing]() -> void:
    block@0: // L21
        let maybe#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%1#0: bool = (!= maybe#0 tmp%0#0)
        goto tmp%1#0 ? block@2 : block@4
    block@2: // if_body_L24
        itxn_begin
        ((itxn_field ApplicationArgs) 0x31)
        ((itxn_field ApplicationArgs) 0x32)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@6
    block@4: // else_body_L30
        itxn_begin
        ((itxn_field Note) 0x646966666572656e7420706172616d20736574)
        ((itxn_field ApplicationArgs) 0x33)
        ((itxn_field ApplicationArgs) 0x34)
        ((itxn_field ApplicationArgs) 0x35)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@6
    block@6: // after_if_else_L23
        goto tmp%1#0 ? block@7 : block@8
    block@7: // if_body_L37
        let tmp%4#0: bytes = (itxna ApplicationArgs 0)
        let tmp%5#0: bool = (== tmp%4#0 0x31)
        (assert tmp%5#0) // correct args used 1
        let tmp%6#0: bytes = (itxna ApplicationArgs 1)
        let tmp%7#0: bool = (== tmp%6#0 0x32)
        (assert tmp%7#0) // correct args used 2
        goto block@9
    block@8: // else_body_L40
        let tmp%8#0: bytes = (itxna ApplicationArgs 0)
        let tmp%9#0: bool = (== tmp%8#0 0x33)
        (assert tmp%9#0) // correct args used 1
        let tmp%10#0: bytes = (itxna ApplicationArgs 1)
        let tmp%11#0: bool = (== tmp%10#0 0x34)
        (assert tmp%11#0) // correct args used 2
        let tmp%12#0: bytes = (itxna ApplicationArgs 2)
        let tmp%13#0: bool = (== tmp%12#0 0x35)
        (assert tmp%13#0) // correct args used 3
        goto block@9
    block@9: // after_if_else_L36
        exit 1u