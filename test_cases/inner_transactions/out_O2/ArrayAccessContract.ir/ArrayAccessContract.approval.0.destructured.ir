main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_branching_array_call(bool)void" => block@3, * => block@10}
    block@3: // test_branching_array_call_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let maybe#0: bytes = (txna ApplicationArgs 1)
        let tmp%0#0: bool = (!= maybe#0 0x00)
        goto tmp%0#0 ? block@15 : block@16
    block@15: // if_body_L24
        itxn_begin
        ((itxn_field ApplicationArgs) 0x31)
        ((itxn_field ApplicationArgs) 0x32)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@17
    block@16: // else_body_L30
        itxn_begin
        ((itxn_field Note) 0x646966666572656e7420706172616d20736574)
        ((itxn_field ApplicationArgs) 0x33)
        ((itxn_field ApplicationArgs) 0x34)
        ((itxn_field ApplicationArgs) 0x35)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@17
    block@17: // after_if_else_L23
        goto tmp%0#0 ? block@18 : block@19
    block@18: // if_body_L37
        let tmp%2#0: bytes = (itxna ApplicationArgs 0)
        let tmp%3#1: bool = (== tmp%2#0 0x31)
        (assert tmp%3#1) // correct args used 1
        let tmp%4#1: bytes = (itxna ApplicationArgs 1)
        let tmp%5#1: bool = (== tmp%4#1 0x32)
        (assert tmp%5#1) // correct args used 2
        goto block@20
    block@19: // else_body_L40
        let tmp%6#0: bytes = (itxna ApplicationArgs 0)
        let tmp%7#1: bool = (== tmp%6#0 0x33)
        (assert tmp%7#1) // correct args used 1
        let tmp%8#1: bytes = (itxna ApplicationArgs 1)
        let tmp%9#1: bool = (== tmp%8#1 0x34)
        (assert tmp%9#1) // correct args used 2
        let tmp%10#1: bytes = (itxna ApplicationArgs 2)
        let tmp%11#0: bool = (== tmp%10#1 0x35)
        (assert tmp%11#0) // correct args used 3
        goto block@20
    block@20: // after_if_else_L36
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L20
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L20
        let test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.inner_transactions.array_access.ArrayAccessContract.__puya_arc4_router___L1
        return tmp%0#0