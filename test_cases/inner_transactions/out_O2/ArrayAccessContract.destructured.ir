contract test_cases.inner_transactions.array_access.ArrayAccessContract:
    program approval:
        subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.approval_program() -> bool:
            block@0: // L20
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L20
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_branching_array_call(bool)void" => block@2, * => fail // reject transaction}
            block@2: // test_branching_array_call_route_L21
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(tmp%5#0)
                return 1u
            block@5: // bare_routing_L20
                let tmp%6#0: uint64 = (txn OnCompletion)
                let not%tmp%6#0: bool = (! tmp%6#0)
                (assert not%tmp%6#0) // reject transaction
                let tmp%7#0: bool = (txn ApplicationID)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // is creating
                return 1u
        
        subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.test_branching_array_call(maybe: bytes) -> void:
            block@0: // L21
                let tmp%0#0: bool = (!= maybe#0 0x00)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // if_body_L23
                itxn_begin
                ((itxn_field ApplicationArgs) 0x31)
                ((itxn_field ApplicationArgs) 0x32)
                ((itxn_field ClearStateProgramPages) 0x098101)
                ((itxn_field ApprovalProgramPages) 0x098101)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                goto block@5
            block@3: // else_body_L23
                itxn_begin
                ((itxn_field Note) 0x646966666572656e7420706172616d20736574)
                ((itxn_field ApplicationArgs) 0x33)
                ((itxn_field ApplicationArgs) 0x34)
                ((itxn_field ApplicationArgs) 0x35)
                ((itxn_field ClearStateProgramPages) 0x098101)
                ((itxn_field ApprovalProgramPages) 0x098101)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                goto block@5
            block@5: // after_if_else_L23
                goto tmp%0#0 ? block@6 : block@7
            block@6: // if_body_L36
                let tmp%2#0: bytes = (itxna ApplicationArgs 0)
                let tmp%3#0: bool = (== tmp%2#0 0x31)
                (assert tmp%3#0) // correct args used 1
                let tmp%4#0: bytes = (itxna ApplicationArgs 1)
                let tmp%5#0: bool = (== tmp%4#0 0x32)
                (assert tmp%5#0) // correct args used 2
                goto block@8
            block@7: // else_body_L36
                let tmp%6#0: bytes = (itxna ApplicationArgs 0)
                let tmp%7#0: bool = (== tmp%6#0 0x33)
                (assert tmp%7#0) // correct args used 1
                let tmp%8#0: bytes = (itxna ApplicationArgs 1)
                let tmp%9#0: bool = (== tmp%8#0 0x34)
                (assert tmp%9#0) // correct args used 2
                let tmp%10#0: bytes = (itxna ApplicationArgs 2)
                let tmp%11#0: bool = (== tmp%10#0 0x35)
                (assert tmp%11#0) // correct args used 3
                goto block@8
            block@8: // after_if_else_L36
                return 
    
    program clear-state:
        subroutine test_cases.inner_transactions.array_access.ArrayAccessContract.clear_state_program() -> bool:
            block@0: // L20
                return 1u