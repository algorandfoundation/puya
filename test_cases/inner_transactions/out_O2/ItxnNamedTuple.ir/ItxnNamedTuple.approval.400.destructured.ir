main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L11
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "named_tuple_itxn(uint64)void" => block@4, method "named_tuple_itxn2(uint64)void" => block@5, method "named_tuple_itxn3(uint64)void" => block@6, * => block@10}
    block@4: // named_tuple_itxn_route_L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#3: bool = (! hmm.bar.Amount#0)
        (assert tmp%0#3)
        exit lifted%return#0
    block@5: // named_tuple_itxn2_route_L17
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.Amount#0: uint64 = (itxn Amount)
        let tmp%0#3: bool = (! txn.Amount#0)
        (assert tmp%0#3)
        exit lifted%return#0
    block@6: // named_tuple_itxn3_route_L22
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amt#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hmmm.bar.Amount#0: uint64 = (itxn Amount)
        let tmp%0#3: bool = (! hmmm.bar.Amount#0)
        (assert tmp%0#3)
        exit lifted%return#0
    block@10: // after_if_else_L11
        fail
    block@11: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        exit lifted%return#0