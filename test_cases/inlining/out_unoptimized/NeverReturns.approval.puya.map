{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAiCA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AADL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;;AAAA;AAAA;;;;AAEG",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0xa79bc532 // method \"err()void\"",
      "defined_out": [
        "Method(err()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(err()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(err()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_err_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b main_switch_case_default@4"
    },
    "39": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "b main_switch_case_next@5"
    },
    "42": {
      "block": "main_switch_case_next@5",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "45": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "46": {
      "block": "main_err_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "53": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "54": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "test_cases.inlining.contract.NeverReturns.err[routing]",
      "op": "callsub err"
    },
    "59": {
      "op": "b main_switch_case_next@5"
    },
    "62": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "65": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%7#0"
      ]
    },
    "67": {
      "op": "match main___algopy_default_create@7",
      "stack_out": []
    },
    "71": {
      "op": "b main_switch_case_default@8"
    },
    "74": {
      "block": "main_switch_case_default@8",
      "stack_in": [],
      "op": "b main_switch_case_next@9"
    },
    "77": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "80": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "82": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "83": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "84": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "85": {
      "op": "b main_block@12"
    },
    "88": {
      "block": "main_block@12",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.inlining.contract.NeverReturns.__algopy_default_create@13"
    },
    "91": {
      "block": "main_after_inlined_test_cases.inlining.contract.NeverReturns.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "92": {
      "op": "return",
      "stack_out": []
    },
    "93": {
      "subroutine": "test_cases.inlining.contract.NeverReturns.err[routing]",
      "params": {},
      "block": "err",
      "stack_in": [],
      "op": "b err_block@0"
    },
    "96": {
      "block": "err_block@0",
      "stack_in": [],
      "callsub": "test_cases.inlining.contract.NeverReturns.err",
      "op": "callsub test_cases.inlining.contract.NeverReturns.err"
    },
    "99": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "100": {
      "op": "return",
      "stack_out": []
    },
    "101": {
      "subroutine": "test_cases.inlining.contract.NeverReturns.err",
      "params": {},
      "block": "test_cases.inlining.contract.NeverReturns.err",
      "stack_in": [],
      "op": "b test_cases.inlining.contract.NeverReturns.err_block@0"
    },
    "104": {
      "block": "test_cases.inlining.contract.NeverReturns.err_block@0",
      "stack_in": [],
      "op": "err"
    }
  }
}