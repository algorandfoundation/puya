debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['loop_else'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing loop_else/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.loop_else.loop_else.test_empty_loop
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@2
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@1) in block@1
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@1, i#2 <- block@6) in block@6
debug: Sealing block@7
debug: Created Phi assignment: let result#1: uint64 = undefined while trying to resolve 'result' in block@7
debug: Added result#0 to Phi node: let result#1: uint64 = φ(result#0 <- block@0) in block@0
debug: Created Phi assignment: let result#2: uint64 = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#2: uint64 = φ(result#0 <- block@1) in block@1
debug: Added result#2 to Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) in block@6
debug: Replacing trivial Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) (result#2) with result#0
debug: Deleting Phi assignment: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6)
debug: Replaced trivial Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) (result#2) with result#0 in current definition for 4 blocks
debug: Added result#0 to Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) (result#1) with result#0
debug: Deleting Phi assignment: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5)
debug: Replaced trivial Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) (result#1) with result#0 in current definition for 1 blocks
debug: Terminated block@7
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@8
debug: Created Phi assignment: let result#4: uint64 = undefined while trying to resolve 'result' in block@8
debug: Terminated block@8
debug: Sealing block@8
debug: Added result#0 to Phi node: let result#4: uint64 = φ(result#0 <- block@3) in block@3
debug: Added result#3 to Phi node: let result#4: uint64 = φ(result#0 <- block@3, result#3 <- block@7) in block@7
debug: Building IR for function test_cases.loop_else.loop_else.LoopElseContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'arg_idx' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let arg_idx#1: uint64 = undefined while trying to resolve 'arg_idx' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0
debug: Deleting Phi assignment: let i#1: uint64 = φ(i#0 <- block@2)
debug: Replaced trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0 in current definition for 2 blocks
debug: Sealing block@7
debug: Created Phi assignment: let arg_idx#2: uint64 = undefined while trying to resolve 'arg_idx' in block@7
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3) in block@3
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1
debug: Deleting Phi assignment: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5)
debug: Replaced trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1 in current definition for 1 blocks
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let account_index#1: uint64 = undefined while trying to resolve 'account_index' in block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@9
debug: Added account_index#0 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8) in block@8
debug: Added account_index#2 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8, account_index#2 <- block@13) in block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@1
debug: Added arg_idx#0 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0) in block@0
debug: Added arg_idx#3 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0, arg_idx#3 <- block@16) in block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Looking for 'secret_index' in an unsealed block creating an incomplete Phi: block@18
debug: Created Phi assignment: let secret_index#1: uint64 = undefined while trying to resolve 'secret_index' in block@18
loop_else/loop_else.py:29:13 debug: encountered already materialized expression (itob(secret_index + 48u)), reusing result: tmp%10#0
loop_else/loop_else.py:27:9 debug: encountered already materialized expression (''), reusing result: ""
loop_else/loop_else.py:27:9 debug: encountered already materialized expression (''), reusing result: ""
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@18
debug: Created Phi assignment: let account_index#3: uint64 = undefined while trying to resolve 'account_index' in block@18
loop_else/loop_else.py:31:13 debug: encountered already materialized expression (itob(account_index + 48u)), reusing result: tmp%19#0
debug: Terminated block@18
debug: Sealing block@15
debug: Sealing block@18
debug: Created Phi assignment: let secret_index#2: uint64 = undefined while trying to resolve 'secret_index' in block@9
debug: Added secret_index#0 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8) in block@8
debug: Added secret_index#2 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0
debug: Deleting Phi assignment: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13)
debug: Replaced trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0 in current definition for 4 blocks
debug: Added secret_index#0 to Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0
debug: Deleting Phi assignment: let secret_index#1: uint64 = φ(secret_index#0 <- block@15)
debug: Replaced trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0 in current definition for 1 blocks
debug: Added account_index#1 to Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) in block@15
debug: Replacing trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1
debug: Deleting Phi assignment: let account_index#3: uint64 = φ(account_index#1 <- block@15)
debug: Replaced trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1 in current definition for 1 blocks
debug: Building IR for function test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'arg_idx' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let arg_idx#1: uint64 = undefined while trying to resolve 'arg_idx' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0
debug: Deleting Phi assignment: let i#1: uint64 = φ(i#0 <- block@2)
debug: Replaced trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0 in current definition for 2 blocks
debug: Sealing block@7
debug: Created Phi assignment: let arg_idx#2: uint64 = undefined while trying to resolve 'arg_idx' in block@7
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3) in block@3
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1
debug: Deleting Phi assignment: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5)
debug: Replaced trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1 in current definition for 1 blocks
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let account_index#1: uint64 = undefined while trying to resolve 'account_index' in block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@9
debug: Added account_index#0 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8) in block@8
debug: Added account_index#2 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8, account_index#2 <- block@13) in block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@1
debug: Added arg_idx#0 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0) in block@0
debug: Added arg_idx#3 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0, arg_idx#3 <- block@16) in block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Looking for 'secret_index' in an unsealed block creating an incomplete Phi: block@18
debug: Created Phi assignment: let secret_index#1: uint64 = undefined while trying to resolve 'secret_index' in block@18
loop_else/loop_else.py:29:13 debug: encountered already materialized expression (itob(secret_index + 48u)), reusing result: tmp%10#0
loop_else/loop_else.py:27:9 debug: encountered already materialized expression (''), reusing result: ""
loop_else/loop_else.py:27:9 debug: encountered already materialized expression (''), reusing result: ""
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@18
debug: Created Phi assignment: let account_index#3: uint64 = undefined while trying to resolve 'account_index' in block@18
loop_else/loop_else.py:31:13 debug: encountered already materialized expression (itob(account_index + 48u)), reusing result: tmp%19#0
debug: Terminated block@18
debug: Sealing block@15
debug: Sealing block@18
debug: Created Phi assignment: let secret_index#2: uint64 = undefined while trying to resolve 'secret_index' in block@9
debug: Added secret_index#0 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8) in block@8
debug: Added secret_index#2 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0
debug: Deleting Phi assignment: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13)
debug: Replaced trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0 in current definition for 4 blocks
debug: Added secret_index#0 to Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0
debug: Deleting Phi assignment: let secret_index#1: uint64 = φ(secret_index#0 <- block@15)
debug: Replaced trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0 in current definition for 1 blocks
debug: Added account_index#1 to Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) in block@15
debug: Replacing trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1
debug: Deleting Phi assignment: let account_index#3: uint64 = φ(account_index#1 <- block@15)
debug: Replaced trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1 in current definition for 1 blocks
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Building IR for function test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: removing unused subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.0.ssa.ir
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.clear.0.ssa.ir
debug: optimizing approval program of test_cases.loop_else.loop_else.LoopElseContract at level 1
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.loop_else.loop_else.test_empty_loop for inlining
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
loop_else/loop_else.py:7:9 debug: inlining call to test_cases.loop_else.loop_else.test_empty_loop in test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: max_range_item%0#0, i#1
debug: selected i#1 from equivalence set
debug: Found equivalence set: arg_idx#1, secret_index#0
debug: selected arg_idx#1 from equivalence set
debug: Copy propagation made 2 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable count#0
debug: Removing unused variable i#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (< 0u 0u) to 0u
debug: Simplified (- 0u 0u) to 0u
debug: Simplified (/ range_length_minus_one%0#0 1u) to range_length_minus_one%0#0
debug: Simplified (* 1u range_length_minus_one%0#0) to range_length_minus_one%0#0
debug: Simplified (+ 0u range_length_minus_one%0#0) to range_length_minus_one%0#0
debug: Simplified (== i#2 0u) to (! i#2)
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (< 0u 10u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (concat "found secret argument at idx=" "") to "found secret argument at idx="
debug: Simplified (concat tmp%14#0 "") to tmp%14#0
debug: Simplified (concat tmp%16#0 "") to tmp%16#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@19 from goto 0u ? block@20 : block@26 to goto block@26
debug: simplified branch on !tmp%1#1 by swapping zero and non-zero targets
debug: simplified terminator of block@21 from goto tmp%1#1 ? block@22 : block@23 to goto i#2 ? block@23 : block@22
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@1 from goto tmp%1#0 ? block@2 : block@17 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3 from goto 1u ? block@4 : block@7 to goto block@4
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4 from goto 1u ? block@5 : block@6 to goto block@5
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@9 from goto continue_looping%1#0 ? block@10 : block@14 to goto block@10
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@19 with block@0 in block@26
debug: Merged linear block@19 into block@0
debug: Replaced predecessor block@24 with block@23 in block@26
debug: Replaced predecessor block@24 with block@23 in block@25
debug: Merged linear block@24 into block@23
debug: Replaced predecessor block@28 with block@27 in block@1
debug: Merged linear block@28 into block@27
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Merged linear block@2 into block@1
debug: Replaced predecessor block@3 with block@1 in block@4
debug: Merged linear block@3 into block@1
debug: Replaced predecessor block@4 with block@1 in block@5
debug: Merged linear block@4 into block@1
debug: Replaced predecessor block@5 with block@1 in block@7
debug: Merged linear block@5 into block@1
debug: Replaced predecessor block@7 with block@1 in block@16
debug: Replaced predecessor block@7 with block@1 in block@8
debug: Merged linear block@7 into block@1
debug: Replaced predecessor block@10 with block@9 in block@12
debug: Replaced predecessor block@10 with block@9 in block@11
debug: Merged linear block@10 into block@9
debug: Replaced predecessor block@13 with block@12 in block@9
debug: Merged linear block@13 into block@12
debug: Replaced predecessor block@15 with block@11 in block@18
debug: Merged linear block@15 into block@11
debug: Merged linear block@18 into block@11
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@22 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@20, block@21, block@22, block@23, block@25, block@6, block@14, block@17
debug: Removed unreachable predecessors from block@26
debug: Removed unreachable predecessors from block@27
debug: Removing unreachable phi arguments: result#0 <- block@22
debug: Replacing trivial Phi node: let result#4: uint64 = φ(result#3 <- block@26) (result#4) with result#3
debug: Deleting Phi assignment: let result#4: uint64 = φ(result#3 <- block@26)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Optimizing subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: max_range_item%0#0, i#0
debug: selected i#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== count#0 0u) to (! count#0)
debug: Simplified (- count#0 0u) to count#0
debug: Simplified (/ range_length_minus_one%0#0 1u) to range_length_minus_one%0#0
debug: Simplified (* 1u range_length_minus_one%0#0) to range_length_minus_one%0#0
debug: Simplified (+ 0u range_length_minus_one%0#0) to range_length_minus_one%0#0
debug: Simplified (== i#1 0u) to (! i#1)
debug: Simplified (+ 0u 1u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%1#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2 from goto tmp%1#0 ? block@3 : block@4 to goto i#1 ? block@4 : block@3
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5 with block@4 in block@7
debug: Replaced predecessor block@5 with block@4 in block@6
debug: Merged linear block@5 into block@4
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: removing unused subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: Unused subroutines removed
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.1.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%14#0, tmp%15#0
debug: selected tmp%14#0 from equivalence set
debug: Found equivalence set: tmp%16#0, tmp%17#0
debug: selected tmp%16#0 from equivalence set
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#1
debug: Removing unused variable result#0
debug: Removing unused variable should_loop%0#0
debug: Removing unused variable result#3
debug: Removing unused variable continue_looping%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 1u 1u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@26 with block@0 in block@27
debug: Merged linear block@26 into block@0
debug: Replaced predecessor block@27 with block@0 in block@1
debug: Merged linear block@27 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.2.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.3.ssa.opt.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 4, ending loop
debug: optimizing clear program of test_cases.loop_else.loop_else.LoopElseContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.loop_else.loop_else.LoopElseContract
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.4.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.loop_else.loop_else.LoopElseContract
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.clear.1.ssa.array.ir
debug: optimizing approval program of test_cases.loop_else.loop_else.LoopElseContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.loop_else.loop_else.LoopElseContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.loop_else.loop_else.LoopElseContract
loop_else/loop_else.py:6 debug: auto reserving slots in test_cases.loop_else.loop_else.LoopElseContract.approval_program, []
debug: Slot allocation not required
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.5.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.loop_else.loop_else.LoopElseContract
loop_else/loop_else.py:35 debug: auto reserving slots in test_cases.loop_else.loop_else.LoopElseContract.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.clear.2.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.loop_else.loop_else.LoopElseContract.approval_program using strategy RootOperandGrouping
debug: Coalescing arg_idx#0 with [arg_idx#6, arg_idx#1, arg_idx#3]
debug: Coalescing account_index#0 with [account_index#5, account_index#1, account_index#2]
debug: Coalescing resulted in 20 replacement/s
debug: Sequentializing parallel copies in test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.approval.6.destructured.ir
debug: Performing SSA IR destructuring for test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.loop_else.loop_else.LoopElseContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to loop_else/out/LoopElseContract.ir/LoopElseContract.clear.3.destructured.ir
debug: Inserted main_while_top@1.ops[5]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_while_top@1.ops[7]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_while_top@1.ops[11]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_while_top@1.ops[13]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_while_top@1.ops[16]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_while_top@1.ops[18]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_while_top@1.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_while_top@1.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_while_top@1.ops[4]: 'l-store-copy arg_idx#0 1'
debug: Replaced main_while_top@1.ops[11]: 'v-load arg_idx#0' with 'l-load arg_idx#0'
debug: Inserted main_for_header@9.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced main_for_header@9.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted main_for_header@9.ops[15]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_for_header@9.ops[17]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_for_header@9.ops[11]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_for_header@9.ops[14]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_for_header@9.ops[9]: 'l-store-copy account#0 0'
debug: Replaced main_for_header@9.ops[14]: 'v-load account#0' with 'l-load account#0'
debug: Inserted main_for_header@9.ops[1]: 'l-store-copy account_index#0 0'
debug: Replaced main_for_header@9.ops[8]: 'v-load account_index#0' with 'l-load account_index#0'
debug: Inserted main_if_body@11.ops[3]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_if_body@11.ops[5]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_if_body@11.ops[7]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_if_body@11.ops[9]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@11.ops[11]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_if_body@11.ops[13]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_if_body@11.ops[25]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_if_body@11.ops[27]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_if_body@11.ops[34]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_if_body@11.ops[36]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_if_body@11.ops[38]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_if_body@11.ops[40]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_if_body@11.ops[42]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_if_body@11.ops[44]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_if_body@11.ops[56]: 'l-store-copy tmp%23#0 0'
debug: Replaced main_if_body@11.ops[58]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main_if_body@11.ops[16]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_if_body@11.ops[19]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_if_body@11.ops[22]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_if_body@11.ops[25]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_if_body@11.ops[49]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_if_body@11.ops[52]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_if_body@11.ops[55]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_if_body@11.ops[58]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_if_body@11.ops[10]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_if_body@11.ops[19]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@11.ops[44]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_if_body@11.ops[53]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_if_body@11.ops[33]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_if_body@11.ops[60]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Found 4 edge set/s for test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: test_cases.loop_else.loop_else.LoopElseContract.approval_program f-stack entry: ['account_index#0', 'tmp%5#0']
debug: test_cases.loop_else.loop_else.LoopElseContract.approval_program f-stack on first store: ['arg_idx#0']
loop_else/loop_else.py:6 debug: optimizing TEAL subroutine ops test_cases.loop_else.loop_else.LoopElseContract.approval_program() -> uint64:
loop_else/loop_else.py:6 debug: optimizing TEAL subroutine blocks test_cases.loop_else.loop_else.LoopElseContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_if_body@8 into main_while_top@1
debug: inlining single reference block main_if_body@11 into main_for_header@9
debug: removing explicit jump to fall-through block main_while_top@1
debug: removing explicit jump to fall-through block main_for_header@9
loop_else/loop_else.py:35 debug: optimizing TEAL subroutine ops test_cases.loop_else.loop_else.LoopElseContract.clear_state_program() -> uint64:
loop_else/loop_else.py:35 debug: optimizing TEAL subroutine blocks test_cases.loop_else.loop_else.LoopElseContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing loop_else/out/LoopElseContract.approval.teal
info: Writing loop_else/out/LoopElseContract.clear.teal
info: Writing loop_else/out/LoopElseContract.approval.bin
info: Writing loop_else/out/LoopElseContract.clear.bin
info: Writing loop_else/out/LoopElseContract.approval.puya.map
info: Writing loop_else/out/LoopElseContract.clear.puya.map