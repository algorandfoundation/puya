debug: PuyaOptions(paths=['loop_else'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@2: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L20
debug: Sealing block@3: // switch_case_0_L27
debug: Terminated block@3: // switch_case_0_L27
debug: Sealing block@4: // switch_case_1_L29
debug: Terminated block@4: // switch_case_1_L29
debug: Sealing block@5: // switch_case_default_L25
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@1: // abi_routing_L5
debug: Terminated block@1: // abi_routing_L5
debug: Sealing block@2: // bare_routing_L5
debug: Terminated block@2: // bare_routing_L5
debug: Sealing block@3: // after_if_else_L5
debug: Terminated block@3: // after_if_else_L5
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@1: // for_header_L43
debug: Terminated block@1: // for_header_L43
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@2: // for_body_L44
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@2: // for_body_L44
debug: Terminated block@2: // for_body_L44
debug: Sealing block@3: // if_body_L45
debug: Terminated block@3: // if_body_L45
debug: Sealing block@4: // after_if_else_L44
debug: Terminated block@4: // after_if_else_L44
debug: Sealing block@5: // for_footer_L43
debug: Terminated block@5: // for_footer_L43
debug: Sealing block@6: // for_increment_L43
debug: Terminated block@6: // for_increment_L43
debug: Sealing block@2: // for_body_L44
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@1) in block@1: // for_header_L43
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@1, i#2 <- block@6) in block@6: // for_increment_L43
debug: Sealing block@7: // after_for_L43
debug: Created Phi assignment: let result#1: uint64 = undefined while trying to resolve 'result' in block@7: // after_for_L43
debug: Added result#0 to Phi node: let result#1: uint64 = φ(result#0 <- block@0) in block@0: // L39
debug: Created Phi assignment: let result#2: uint64 = undefined while trying to resolve 'result' in block@2: // for_body_L44
debug: Added result#0 to Phi node: let result#2: uint64 = φ(result#0 <- block@1) in block@1: // for_header_L43
debug: Added result#2 to Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) in block@6: // for_increment_L43
debug: Replacing trivial Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) (result#2) with result#0
debug: Deleting Phi assignment: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6)
debug: Replaced trivial Phi node: let result#2: uint64 = φ(result#0 <- block@1, result#2 <- block@6) (result#2) with result#0 in current definition for 4 blocks
debug: Added result#0 to Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) in block@5: // for_footer_L43
debug: Replacing trivial Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) (result#1) with result#0
debug: Deleting Phi assignment: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5)
debug: Replaced trivial Phi node: let result#1: uint64 = φ(result#0 <- block@0, result#0 <- block@5) (result#1) with result#0 in current definition for 1 blocks
debug: Terminated block@7: // after_for_L43
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@8: // L43
debug: Created Phi assignment: let result#4: uint64 = undefined while trying to resolve 'result' in block@8: // L43
debug: Terminated block@8: // L43
debug: Sealing block@8: // L43
debug: Added result#0 to Phi node: let result#4: uint64 = φ(result#0 <- block@3) in block@3: // if_body_L45
debug: Added result#3 to Phi node: let result#4: uint64 = φ(result#0 <- block@3, result#3 <- block@7) in block@7: // after_for_L43
debug: Sealing block@0: // L6
debug: Terminated block@0: // L6
debug: Looking for 'arg_idx' in an unsealed block creating an incomplete Phi: block@1: // while_top_L10
debug: Created Phi assignment: let arg_idx#1: uint64 = undefined while trying to resolve 'arg_idx' in block@1: // while_top_L10
debug: Terminated block@1: // while_top_L10
debug: Sealing block@2: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L11
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L11
debug: Terminated block@3: // for_header_L11
debug: Sealing block@4: // for_body_L12
debug: Terminated block@4: // for_body_L12
debug: Sealing block@5: // if_body_L13
debug: Terminated block@5: // if_body_L13
debug: Sealing block@6: // after_if_else_L12
debug: Terminated block@6: // after_if_else_L12
debug: Sealing block@3: // for_header_L11
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // while_body_L11
debug: Replacing trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0
debug: Deleting Phi assignment: let i#1: uint64 = φ(i#0 <- block@2)
debug: Replaced trivial Phi node: let i#1: uint64 = φ(i#0 <- block@2) (i#1) with i#0 in current definition for 2 blocks
debug: Sealing block@7: // after_for_L11
debug: Created Phi assignment: let arg_idx#2: uint64 = undefined while trying to resolve 'arg_idx' in block@7: // after_for_L11
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3) in block@3: // for_header_L11
debug: Added arg_idx#1 to Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) in block@5: // if_body_L13
debug: Replacing trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1
debug: Deleting Phi assignment: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5)
debug: Replaced trivial Phi node: let arg_idx#2: uint64 = φ(arg_idx#1 <- block@3, arg_idx#1 <- block@5) (arg_idx#2) with arg_idx#1 in current definition for 1 blocks
debug: Terminated block@7: // after_for_L11
debug: Sealing block@8: // if_body_L16
debug: Terminated block@8: // if_body_L16
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@9: // for_header_L17
debug: Created Phi assignment: let account_index#1: uint64 = undefined while trying to resolve 'account_index' in block@9: // for_header_L17
debug: Terminated block@9: // for_header_L17
debug: Sealing block@10: // for_body_L18
debug: Terminated block@10: // for_body_L18
debug: Sealing block@11: // if_body_L20
debug: Terminated block@11: // if_body_L20
debug: Sealing block@12: // after_if_else_L19
debug: Terminated block@12: // after_if_else_L19
debug: Sealing block@13: // for_footer_L17
debug: Terminated block@13: // for_footer_L17
debug: Sealing block@9: // for_header_L17
debug: Added account_index#0 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8) in block@8: // if_body_L16
debug: Added account_index#2 to Phi node: let account_index#1: uint64 = φ(account_index#0 <- block@8, account_index#2 <- block@13) in block@13: // for_footer_L17
debug: Sealing block@14: // after_for_L17
debug: Terminated block@14: // after_for_L17
debug: Terminated block@15: // L17
debug: Sealing block@16: // after_if_else_L15
debug: Terminated block@16: // after_if_else_L15
debug: Sealing block@1: // while_top_L10
debug: Added arg_idx#0 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0) in block@0: // L6
debug: Added arg_idx#3 to Phi node: let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0, arg_idx#3 <- block@16) in block@16: // after_if_else_L15
debug: Sealing block@17: // after_while_L10
debug: Terminated block@17: // after_while_L10
debug: Looking for 'secret_index' in an unsealed block creating an incomplete Phi: block@18: // L10
debug: Created Phi assignment: let secret_index#1: uint64 = undefined while trying to resolve 'secret_index' in block@18: // L10
debug: Looking for 'account_index' in an unsealed block creating an incomplete Phi: block@18: // L10
debug: Created Phi assignment: let account_index#3: uint64 = undefined while trying to resolve 'account_index' in block@18: // L10
debug: Terminated block@18: // L10
debug: Sealing block@15: // L17
debug: Sealing block@18: // L10
debug: Created Phi assignment: let secret_index#2: uint64 = undefined while trying to resolve 'secret_index' in block@9: // for_header_L17
debug: Added secret_index#0 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8) in block@8: // if_body_L16
debug: Added secret_index#2 to Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) in block@13: // for_footer_L17
debug: Replacing trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0
debug: Deleting Phi assignment: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13)
debug: Replaced trivial Phi node: let secret_index#2: uint64 = φ(secret_index#0 <- block@8, secret_index#2 <- block@13) (secret_index#2) with secret_index#0 in current definition for 4 blocks
debug: Added secret_index#0 to Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) in block@15: // L17
debug: Replacing trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0
debug: Deleting Phi assignment: let secret_index#1: uint64 = φ(secret_index#0 <- block@15)
debug: Replaced trivial Phi node: let secret_index#1: uint64 = φ(secret_index#0 <- block@15) (secret_index#1) with secret_index#0 in current definition for 1 blocks
debug: Added account_index#1 to Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) in block@15: // L17
debug: Replacing trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1
debug: Deleting Phi assignment: let account_index#3: uint64 = φ(account_index#1 <- block@15)
debug: Replaced trivial Phi node: let account_index#3: uint64 = φ(account_index#1 <- block@15) (account_index#3) with account_index#1 in current definition for 1 blocks
debug: Sealing block@0: // L35
debug: Terminated block@0: // L35
debug: Output IR to loop_else/out/LoopElseContract.ssa.ir
info: Optimizing test_cases.loop_else.loop_else.LoopElseContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: arg_idx#1, secret_index#0
debug: Replacing {secret_index#0} with arg_idx#1 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (< 0u 10u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (concat "found secret argument at idx=" "") to "found secret argument at idx="
debug: Simplified (concat tmp%16#0 "") to tmp%16#0
debug: Simplified (concat tmp%18#0 "") to tmp%18#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable i#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@1: // while_top_L10 from goto tmp%1#0 ? block@2 : block@17 to goto block@2
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@4: // for_body_L12 from goto tmp%2#0 ? block@5 : block@6 to goto block@5
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@9: // for_header_L17 from goto continue_looping%1#0 ? block@10 : block@14 to goto block@10
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // while_body_L11 with block@1: // while_top_L10 in block@3: // for_header_L11
debug: Merged linear block@2: // while_body_L11 into block@1: // while_top_L10
debug: Replaced predecessor block@3: // for_header_L11 with block@1: // while_top_L10 in block@7: // after_for_L11
debug: Replaced predecessor block@3: // for_header_L11 with block@1: // while_top_L10 in block@4: // for_body_L12
debug: Merged linear block@3: // for_header_L11 into block@1: // while_top_L10
debug: Replaced predecessor block@5: // if_body_L13 with block@4: // for_body_L12 in block@7: // after_for_L11
debug: Merged linear block@5: // if_body_L13 into block@4: // for_body_L12
debug: Replaced predecessor block@10: // for_body_L18 with block@9: // for_header_L17 in block@12: // after_if_else_L19
debug: Replaced predecessor block@10: // for_body_L18 with block@9: // for_header_L17 in block@11: // if_body_L20
debug: Merged linear block@10: // for_body_L18 into block@9: // for_header_L17
debug: Replaced predecessor block@13: // for_footer_L17 with block@12: // after_if_else_L19 in block@9: // for_header_L17
debug: Merged linear block@13: // for_footer_L17 into block@12: // after_if_else_L19
debug: Replaced predecessor block@15: // L17 with block@11: // if_body_L20 in block@18: // L10
debug: Merged linear block@15: // L17 into block@11: // if_body_L20
debug: Merged linear block@18: // L10 into block@11: // if_body_L20
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@6: // after_if_else_L12, block@14: // after_for_L17, block@17: // after_while_L10
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%13#0: uint64 = (+ arg_idx#1 48u) with copy of existing registers (Register(source_location=loop_else/loop_else.py:29:20-37, ir_type=uint64, name='tmp%9', version=0),)
debug: Replacing redundant declaration let tmp%24#0: uint64 = (+ account_index#1 48u) with copy of existing registers (Register(source_location=loop_else/loop_else.py:31:20-38, ir_type=uint64, name='tmp%20', version=0),)
debug: Found equivalence set: tmp%9#0, tmp%13#0
debug: Replacing {tmp%13#0} with tmp%9#0 made 1 modifications
debug: Found equivalence set: tmp%16#0, tmp%17#0
debug: Replacing {tmp%17#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: tmp%18#0, tmp%19#0
debug: Replacing {tmp%19#0} with tmp%18#0 made 1 modifications
debug: Found equivalence set: tmp%20#0, tmp%24#0
debug: Replacing {tmp%24#0} with tmp%20#0 made 1 modifications
debug: Replacing redundant declaration let tmp%14#0: bytes = (itob tmp%9#0) with copy of existing registers (Register(source_location=loop_else/loop_else.py:29:12-38, ir_type=bytes, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%25#0: bytes = (itob tmp%20#0) with copy of existing registers (Register(source_location=loop_else/loop_else.py:31:12-39, ir_type=bytes, name='tmp%21', version=0),)
debug: Found equivalence set: tmp%10#0, tmp%14#0
debug: Replacing {tmp%14#0} with tmp%10#0 made 1 modifications
debug: Found equivalence set: tmp%21#0, tmp%25#0
debug: Replacing {tmp%25#0} with tmp%21#0 made 1 modifications
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: max_range_item%0#0, i#0
debug: Replacing {max_range_item%0#0} with i#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== count#0 0u) to (! count#0)
debug: Simplified (- count#0 0u) to count#0
debug: Simplified (* 1u iteration_count_minus_one%0#0) to iteration_count_minus_one%0#0
debug: Simplified (+ 0u range_delta%0#0) to range_delta%0#0
debug: Simplified (== i#1 0u) to (! i#1)
debug: Simplified (+ 0u 1u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable should_loop%0#0
debug: Removing unused variable continue_looping%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%1#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2: // for_body_L44 from goto tmp%1#0 ? block@3 : block@4 to goto i#1 ? block@4 : block@3
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5: // for_footer_L43 with block@4: // after_if_else_L44 in block@7: // after_for_L43
debug: Replaced predecessor block@5: // for_footer_L43 with block@4: // after_if_else_L44 in block@6: // for_increment_L43
debug: Merged linear block@5: // for_footer_L43 into block@4: // after_if_else_L44
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L45 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to loop_else/out/LoopElseContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable continue_looping%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1: // while_top_L10 from goto 1u ? block@4 : block@7 to goto block@4
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // for_body_L12 with block@1: // while_top_L10 in block@7: // after_for_L11
debug: Merged linear block@4: // for_body_L12 into block@1: // while_top_L10
debug: Replaced predecessor block@7: // after_for_L11 with block@1: // while_top_L10 in block@16: // after_if_else_L15
debug: Replaced predecessor block@7: // after_for_L11 with block@1: // while_top_L10 in block@8: // if_body_L16
debug: Merged linear block@7: // after_for_L11 into block@1: // while_top_L10
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: count#0, range_length%0#0
debug: Replacing {range_length%0#0} with count#0 made 1 modifications
debug: Found equivalence set: iteration_count_minus_one%0#0, range_delta%0#0, i#0
debug: Replacing {iteration_count_minus_one%0#0, range_delta%0#0} with i#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L45 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to loop_else/out/LoopElseContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.test_empty_loop
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L45 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Removing Phis from test_cases.loop_else.loop_else.test_empty_loop
debug: Removing Phis from test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Coalescing local variables in test_cases.loop_else.loop_else.LoopElseContract.approval_program using strategy RootOperandGrouping
debug: Coalescing arg_idx#0 with [arg_idx#6, arg_idx#1, arg_idx#3]
debug: Coalescing account_index#0 with [account_index#5, account_index#1, account_index#2]
debug: Coalescing resulted in 20 replacement/s
debug: Coalescing local variables in test_cases.loop_else.loop_else.test_empty_loop using strategy RootOperandGrouping
debug: Coalescing result#0 with [result#7, result#3, result#4]
debug: Coalescing i#0 with [i#5, i#1, i#2]
debug: Coalescing resulted in 16 replacement/s
debug: Coalescing local variables in test_cases.loop_else.loop_else.LoopElseContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: Sequentializing parallel copies in test_cases.loop_else.loop_else.test_empty_loop
debug: Sequentializing parallel copies in test_cases.loop_else.loop_else.LoopElseContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Removing jump block block@3: // if_body_L45 and replacing references with block@8: // L43
debug: Output IR to loop_else/out/LoopElseContract.destructured.ir
debug: Inserted main_while_top@1.ops[5]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[7]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_while_top@1.ops[11]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[13]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_while_top@1.ops[16]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[18]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_while_top@1.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_while_top@1.ops[4]: 'store arg_idx#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[11]: 'load arg_idx#0' with 'load arg_idx#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[5]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[15]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[17]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[11]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[14]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[9]: 'store account#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[14]: 'load account#0' with 'load account#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[1]: 'store account_index#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[8]: 'load account_index#0' with 'load account_index#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[3]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[5]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[7]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[9]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[11]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[13]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[16]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[18]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[30]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[32]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[39]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[41]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[43]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[45]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[47]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[49]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[52]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[54]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[66]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[68]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[26]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[29]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[63]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[66]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[21]: 'store index_plus_1%0#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[25]: 'load index_plus_1%0#0' with 'load index_plus_1%0#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[59]: 'store index_plus_1%1#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[63]: 'load index_plus_1%1#0' with 'load index_plus_1%1#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[19]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[25]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[58]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[64]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[10]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[25]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[50]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[65]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@11.ops[39]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_if_body@11.ops[72]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.loop_else.loop_else.LoopElseContract.approval_program
debug: test_cases.loop_else.loop_else.LoopElseContract.approval_program f-stack entry: ['account_index#0', 'tmp%5#0']
debug: test_cases.loop_else.loop_else.LoopElseContract.approval_program f-stack on first store: ['arg_idx#0']
debug: Inserted test_empty_loop_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_empty_loop_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_empty_loop_for_header@1.ops[3]: 'store range_length_minus_one%0#0 to l-stack (copy)'
debug: Replaced test_empty_loop_for_header@1.ops[5]: 'load range_length_minus_one%0#0' with 'load range_length_minus_one%0#0 from l-stack (no copy)'
debug: Inserted test_empty_loop_block@8.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_empty_loop_block@8.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Found 3 edge set/s for test_cases.loop_else.loop_else.test_empty_loop
debug: test_cases.loop_else.loop_else.test_empty_loop f-stack entry: ['i#0']
debug: test_cases.loop_else.loop_else.test_empty_loop f-stack on first store: ['result#0']
info: Writing loop_else/out/LoopElseContract.approval.teal
info: Writing loop_else/out/LoopElseContract.clear.teal
info: Writing loop_else/out/LoopElseContract.approval.bin
info: Writing loop_else/out/LoopElseContract.clear.bin