main test_cases.loop_else.loop_else.LoopElseContract.approval_program:
    block@0: // L6
        test_cases.loop_else.loop_else.test_empty_loop(0u)
        let arg_idx#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L10
        let arg_idx#1: uint64 = φ(arg_idx#0 <- block@0, arg_idx#3 <- block@16)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (< arg_idx#1 tmp%0#0)
        goto tmp%1#0 ? block@2 : block@17
    block@2: // while_body_L11
        (assert 1u) // Step cannot be zero
        let value_internal%0#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L11
        let continue_looping%0#0: bool = (< value_internal%0#0 10u)
        goto continue_looping%0#0 ? block@4 : block@7
    block@4: // for_body_L12
        let i#0: uint64 = value_internal%0#0
        let tmp%2#0: bool = (== i#0 0u)
        goto tmp%2#0 ? block@5 : block@6
    block@5: // if_body_L13
        goto block@7
    block@6: // after_if_else_L12
        fail // unreachable
    block@7: // after_for_L11
        let tmp%3#0: bytes = ((txnas ApplicationArgs) arg_idx#1)
        let tmp%4#0: bool = (== tmp%3#0 0x7768696c655f736563726574)
        goto tmp%4#0 ? block@8 : block@16
    block@8: // if_body_L16
        let secret_index#0: uint64 = arg_idx#1
        let tmp%5#0: uint64 = (txn NumAccounts)
        (assert 1u) // Step cannot be zero
        let value_internal%1#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L17
        let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@8, value_internal%1#2 <- block@13)
        let continue_looping%1#0: bool = (< value_internal%1#1 tmp%5#0)
        goto continue_looping%1#0 ? block@10 : block@14
    block@10: // for_body_L18
        let account_index#0: uint64 = value_internal%1#1
        let tmp%6#0: account = ((txnas Accounts) account_index#0)
        let account#0: account = tmp%6#0
        let tmp%7#0: account = (global ZeroAddress)
        let tmp%8#0: bool = (== account#0 tmp%7#0)
        goto tmp%8#0 ? block@11 : block@12
    block@11: // if_body_L20
        goto block@15
    block@12: // after_if_else_L19
        goto block@13
    block@13: // for_footer_L17
        let value_internal%1#2: uint64 = (+ value_internal%1#1 1u)
        goto block@9
    block@14: // after_for_L17
        fail // access denied, missing secret account
    block@15: // L17
        goto block@18
    block@16: // after_if_else_L15
        let tmp%9#0: uint64 = (+ arg_idx#1 1u)
        let arg_idx#3: uint64 = tmp%9#0
        goto block@1
    block@17: // after_while_L10
        fail // access denied, missing secret argument
    block@18: // L10
        let tmp%10#0: bytes = (concat "found secret argument at idx=" "")
        let tmp%11#0: uint64 = (+ secret_index#0 48u)
        let tmp%12#0: bytes = (itob tmp%11#0)
        let tmp%13#0: uint64 = (len tmp%12#0)
        let tmp%14#0: uint64 = (- tmp%13#0 1u)
        let extract%0#0: bytes = (extract3 tmp%12#0 tmp%14#0 1u)
        let tmp%15#0: bytes = (concat tmp%10#0 extract%0#0)
        let tmp%16#0: bytes = (concat tmp%15#0 "")
        let tmp%17#0: bytes = (concat tmp%16#0 " and secret account at idx=")
        let tmp%18#0: bytes = (concat tmp%17#0 "")
        let tmp%19#0: uint64 = (+ account_index#0 48u)
        let tmp%20#0: bytes = (itob tmp%19#0)
        let tmp%21#0: uint64 = (len tmp%20#0)
        let tmp%22#0: uint64 = (- tmp%21#0 1u)
        let extract%1#0: bytes = (extract3 tmp%20#0 tmp%22#0 1u)
        let tmp%23#0: bytes = (concat tmp%18#0 extract%1#0)
        (log tmp%23#0)
        return 1u

subroutine test_cases.loop_else.loop_else.test_empty_loop(count: uint64) -> void:
    block@0: // L39
        let tmp%0#0: bool = (== count#0 0u)
        (assert tmp%0#0)
        let result#0: uint64 = 0u
        (assert 1u) // Step cannot be zero
        let should_loop%0#0: bool = (< 0u count#0)
        goto should_loop%0#0 ? block@1 : block@7
    block@1: // for_header_L43
        let range_length%0#0: uint64 = (- count#0 0u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 1u)
        let range_delta%0#0: uint64 = (* 1u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 0u range_delta%0#0)
        let i#0: uint64 = max_range_item%0#0
        goto block@2
    block@2: // for_body_L44
        let i#1: uint64 = φ(i#0 <- block@1, i#2 <- block@6)
        let tmp%1#0: bool = (== i#1 0u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L45
        goto block@8
    block@4: // after_if_else_L44
        goto block@5
    block@5: // for_footer_L43
        let continue_looping%0#0: bool = (< 0u i#1)
        goto continue_looping%0#0 ? block@6 : block@7
    block@6: // for_increment_L43
        let i#2: uint64 = (- i#1 1u)
        goto block@2
    block@7: // after_for_L43
        let tmp%2#0: uint64 = (+ result#0 1u)
        let result#3: uint64 = tmp%2#0
        goto block@8
    block@8: // L43
        let result#4: uint64 = φ(result#0 <- block@3, result#3 <- block@7)
        let tmp%3#0: bool = (== result#4 1u)
        (assert tmp%3#0)
        return 