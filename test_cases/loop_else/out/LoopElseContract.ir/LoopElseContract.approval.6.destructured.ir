main test_cases.loop_else.loop_else.LoopElseContract.approval_program:
    block@0: // L6
        let arg_idx#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (< arg_idx#0 tmp%0#0)
        (assert tmp%1#0) // access denied, missing secret argument
        let tmp%3#0: bytes = ((txnas ApplicationArgs) arg_idx#0)
        let tmp%4#0: bool = (== tmp%3#0 0x7768696c655f736563726574)
        goto tmp%4#0 ? block@8 : block@16
    block@8: // if_body_L16
        let tmp%5#0: uint64 = (txn NumAccounts)
        let account_index#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L17
        let continue_looping%1#0: bool = (< account_index#0 tmp%5#0)
        (assert continue_looping%1#0) // access denied, missing secret account
        let account#0: bytes[32] = ((txnas Accounts) account_index#0)
        let tmp%7#0: bytes[32] = (global ZeroAddress)
        let tmp%8#0: bool = (== account#0 tmp%7#0)
        goto tmp%8#0 ? block@11 : block@12
    block@11: // if_body_L20
        let tmp%11#0: uint64 = (+ arg_idx#0 48u)
        let tmp%12#0: bytes = (itob tmp%11#0)
        let read_bytes%0#0: bytes = ((extract 7 1) tmp%12#0) // on error: Index access is out of bounds
        let tmp%15#0: bytes = (concat "found secret argument at idx=" read_bytes%0#0)
        let tmp%17#0: bytes = (concat tmp%15#0 " and secret account at idx=")
        let tmp%19#0: uint64 = (+ account_index#0 48u)
        let tmp%20#0: bytes = (itob tmp%19#0)
        let read_bytes%1#0: bytes = ((extract 7 1) tmp%20#0) // on error: Index access is out of bounds
        let tmp%23#0: bytes = (concat tmp%17#0 read_bytes%1#0)
        (log tmp%23#0)
        return 1u
    block@12: // after_if_else_L19
        let account_index#0: uint64 = (+ account_index#0 1u)
        goto block@9
    block@16: // after_if_else_L15
        let arg_idx#0: uint64 = (+ arg_idx#0 1u)
        goto block@1