main test_cases.loop_else.loop_else.LoopElseContract.approval_program:
    block@0: // L6
        let tmp%0#1: bool = 1u
        let result#0: uint64 = 0u
        let should_loop%0#0: bool = 0u
        goto block@26
    block@26: // after_for_L43
        let result#3: uint64 = 1u
        goto block@27
    block@27: // L43
        let tmp%2#1: bool = (== result#3 1u)
        (assert tmp%2#1)
        let arg_idx#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L10
        let arg_idx#1: uint64 = φ(arg_idx#0 <- block@27, arg_idx#3 <- block@16)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (< arg_idx#1 tmp%0#0)
        (assert tmp%1#0) // access denied, missing secret argument
        let continue_looping%0#0: bool = 1u
        let tmp%2#0: bool = 1u
        let tmp%3#0: bytes = ((txnas ApplicationArgs) arg_idx#1)
        let tmp%4#0: bool = (== tmp%3#0 0x7768696c655f736563726574)
        goto tmp%4#0 ? block@8 : block@16
    block@8: // if_body_L16
        let tmp%5#0: uint64 = (txn NumAccounts)
        let account_index#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L17
        let account_index#1: uint64 = φ(account_index#0 <- block@8, account_index#2 <- block@12)
        let continue_looping%1#0: bool = (< account_index#1 tmp%5#0)
        (assert continue_looping%1#0) // access denied, missing secret account
        let account#0: bytes[32] = ((txnas Accounts) account_index#1)
        let tmp%6#0: bytes[32] = (global ZeroAddress)
        let tmp%7#0: bool = (== account#0 tmp%6#0)
        goto tmp%7#0 ? block@11 : block@12
    block@11: // if_body_L20
        let tmp%8#0: bytes = "found secret argument at idx="
        let tmp%9#0: uint64 = (+ arg_idx#1 48u)
        let tmp%10#0: bytes = (itob tmp%9#0)
        let tmp%11#0: uint64 = 8u
        let tmp%12#0: uint64 = 7u
        let read_bytes%0#0: bytes = ((extract 7 1) tmp%10#0) // on error: Index access is out of bounds
        let tmp%13#0: bytes = (concat "found secret argument at idx=" read_bytes%0#0)
        let tmp%14#0: bytes = tmp%13#0
        let tmp%15#0: bytes = (concat tmp%13#0 " and secret account at idx=")
        let tmp%16#0: bytes = tmp%15#0
        let tmp%17#0: uint64 = (+ account_index#1 48u)
        let tmp%18#0: bytes = (itob tmp%17#0)
        let tmp%19#0: uint64 = 8u
        let tmp%20#0: uint64 = 7u
        let read_bytes%1#0: bytes = ((extract 7 1) tmp%18#0) // on error: Index access is out of bounds
        let tmp%21#0: bytes = (concat tmp%15#0 read_bytes%1#0)
        (log tmp%21#0)
        return 1u
    block@12: // after_if_else_L19
        let account_index#2: uint64 = (+ account_index#1 1u)
        goto block@9
    block@16: // after_if_else_L15
        let arg_idx#3: uint64 = (+ arg_idx#1 1u)
        goto block@1