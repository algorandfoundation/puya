debug: PuyaOptions(paths=['reversed_iteration'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Sealing block@1: // for_preamble_L8
debug: Terminated block@1: // for_preamble_L8
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_L8
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_header_L8
debug: Terminated block@2: // for_header_L8
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@3: // for_body_L8
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@3: // for_body_L8
debug: Terminated block@3: // for_body_L8
debug: Sealing block@4: // for_footer_L8
debug: Terminated block@4: // for_footer_L8
debug: Sealing block@5: // for_increment_L8
debug: Terminated block@5: // for_increment_L8
debug: Sealing block@2: // for_header_L8
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@1) in block@1: // for_preamble_L8
debug: Replacing trivial Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@1) (range_item%0#1) with range_item%0#0
debug: Deleting Phi assignment: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@1) (range_item%0#1) with range_item%0#0 in current definition for 1 blocks
debug: Sealing block@3: // for_body_L8
debug: Added range_item%0#0 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#0 <- block@2) in block@2: // for_header_L8
debug: Added range_item%0#3 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#0 <- block@2, range_item%0#3 <- block@5) in block@5: // for_increment_L8
debug: Sealing block@None: // after_for_L8
debug: Terminated block@6: // after_for_L8
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@7: // for_header_L11
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@7: // for_header_L11
debug: Terminated block@7: // for_header_L11
debug: Sealing block@None: // for_body_L11
debug: Looking for 'reverse_index_internal%0' in an unsealed block creating an incomplete Phi: block@7: // for_header_L11
debug: Created Phi assignment: let reverse_index_internal%0#1: uint64 = undefined while trying to resolve 'reverse_index_internal%0' in block@7: // for_header_L11
debug: Terminated block@8: // for_body_L11
debug: Sealing block@9: // for_footer_L11
debug: Sealing block@None: // after_for_L11
debug: Terminated block@9: // for_footer_L11
debug: Sealing block@7: // for_header_L11
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@6) in block@6: // after_for_L8
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@6, item_index_internal%0#2 <- block@9) in block@9: // for_footer_L11
debug: Added reverse_index_internal%0#0 to Phi node: let reverse_index_internal%0#1: uint64 = φ(reverse_index_internal%0#0 <- block@6) in block@6: // after_for_L8
debug: Added reverse_index_internal%0#2 to Phi node: let reverse_index_internal%0#1: uint64 = φ(reverse_index_internal%0#0 <- block@6, reverse_index_internal%0#2 <- block@9) in block@9: // for_footer_L11
debug: Terminated block@10: // after_for_L11
debug: Sealing block@11: // for_preamble_L15
debug: Terminated block@11: // for_preamble_L15
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@12: // for_header_L15
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@12: // for_header_L15
debug: Terminated block@12: // for_header_L15
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@13: // for_body_L15
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@13: // for_body_L15
debug: Looking for 'range_index%0' in an unsealed block creating an incomplete Phi: block@13: // for_body_L15
debug: Created Phi assignment: let range_index%0#1: uint64 = undefined while trying to resolve 'range_index%0' in block@13: // for_body_L15
debug: Looking for 'test_array' in an unsealed block creating an incomplete Phi: block@13: // for_body_L15
debug: Created Phi assignment: let test_array#1: bytes = undefined while trying to resolve 'test_array' in block@13: // for_body_L15
debug: Terminated block@13: // for_body_L15
debug: Sealing block@14: // for_footer_L15
debug: Terminated block@14: // for_footer_L15
debug: Sealing block@15: // for_increment_L15
debug: Terminated block@15: // for_increment_L15
debug: Sealing block@12: // for_header_L15
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@11) in block@11: // for_preamble_L15
debug: Replacing trivial Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@11) (range_item%1#1) with range_item%1#0
debug: Deleting Phi assignment: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@11)
debug: Replaced trivial Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@11) (range_item%1#1) with range_item%1#0 in current definition for 1 blocks
debug: Sealing block@13: // for_body_L15
debug: Added range_item%1#0 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#0 <- block@12) in block@12: // for_header_L15
debug: Added range_item%1#3 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#0 <- block@12, range_item%1#3 <- block@15) in block@15: // for_increment_L15
debug: Added range_index%0#0 to Phi node: let range_index%0#1: uint64 = φ(range_index%0#0 <- block@12) in block@12: // for_header_L15
debug: Added range_index%0#2 to Phi node: let range_index%0#1: uint64 = φ(range_index%0#0 <- block@12, range_index%0#2 <- block@15) in block@15: // for_increment_L15
debug: Added test_array#0 to Phi node: let test_array#1: bytes = φ(test_array#0 <- block@12) in block@12: // for_header_L15
debug: Added test_array#2 to Phi node: let test_array#1: bytes = φ(test_array#0 <- block@12, test_array#2 <- block@15) in block@15: // for_increment_L15
debug: Sealing block@None: // after_for_L15
debug: Created Phi assignment: let test_array#3: bytes = undefined while trying to resolve 'test_array' in block@16: // after_for_L15
debug: Added test_array#0 to Phi node: let test_array#3: bytes = φ(test_array#0 <- block@10) in block@10: // after_for_L11
debug: Added test_array#0 to Phi node: let test_array#3: bytes = φ(test_array#0 <- block@10, test_array#0 <- block@12) in block@12: // for_header_L15
debug: Added test_array#2 to Phi node: let test_array#3: bytes = φ(test_array#0 <- block@10, test_array#0 <- block@12, test_array#2 <- block@14) in block@14: // for_footer_L15
debug: Terminated block@16: // after_for_L15
debug: Sealing block@17: // for_preamble_L20
debug: Terminated block@17: // for_preamble_L20
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@18: // for_header_L20
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@18: // for_header_L20
debug: Terminated block@18: // for_header_L20
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@19: // for_body_L20
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@19: // for_body_L20
debug: Looking for 'range_index%1' in an unsealed block creating an incomplete Phi: block@19: // for_body_L20
debug: Created Phi assignment: let range_index%1#1: uint64 = undefined while trying to resolve 'range_index%1' in block@19: // for_body_L20
debug: Looking for 'test_array' in an unsealed block creating an incomplete Phi: block@19: // for_body_L20
debug: Created Phi assignment: let test_array#4: bytes = undefined while trying to resolve 'test_array' in block@19: // for_body_L20
debug: Terminated block@19: // for_body_L20
debug: Sealing block@None: // if_body_L23
debug: Sealing block@None: // else_body_L23
debug: Terminated block@20: // if_body_L23
debug: Sealing block@21: // after_if_else_L23
debug: Terminated block@21: // after_if_else_L23
debug: Sealing block@22: // for_footer_L20
debug: Terminated block@22: // for_footer_L20
debug: Sealing block@23: // for_increment_L20
debug: Terminated block@23: // for_increment_L20
debug: Sealing block@18: // for_header_L20
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@17) in block@17: // for_preamble_L20
debug: Added range_item%2#3 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@17, range_item%2#3 <- block@23) in block@23: // for_increment_L20
debug: Sealing block@19: // for_body_L20
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@18) in block@18: // for_header_L20
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@18) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@18)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@18) (range_item%2#2) with range_item%2#1 in current definition for 3 blocks
debug: Created Phi assignment: let range_index%1#3: uint64 = undefined while trying to resolve 'range_index%1' in block@18: // for_header_L20
debug: Added range_index%1#0 to Phi node: let range_index%1#3: uint64 = φ(range_index%1#0 <- block@17) in block@17: // for_preamble_L20
debug: Added range_index%1#2 to Phi node: let range_index%1#3: uint64 = φ(range_index%1#0 <- block@17, range_index%1#2 <- block@23) in block@23: // for_increment_L20
debug: Added range_index%1#3 to Phi node: let range_index%1#1: uint64 = φ(range_index%1#3 <- block@18) in block@18: // for_header_L20
debug: Replacing trivial Phi node: let range_index%1#1: uint64 = φ(range_index%1#3 <- block@18) (range_index%1#1) with range_index%1#3
debug: Deleting Phi assignment: let range_index%1#1: uint64 = φ(range_index%1#3 <- block@18)
debug: Replaced trivial Phi node: let range_index%1#1: uint64 = φ(range_index%1#3 <- block@18) (range_index%1#1) with range_index%1#3 in current definition for 3 blocks
debug: Created Phi assignment: let test_array#6: bytes = undefined while trying to resolve 'test_array' in block@18: // for_header_L20
debug: Added test_array#3 to Phi node: let test_array#6: bytes = φ(test_array#3 <- block@17) in block@17: // for_preamble_L20
debug: Added test_array#5 to Phi node: let test_array#6: bytes = φ(test_array#3 <- block@17, test_array#5 <- block@23) in block@23: // for_increment_L20
debug: Added test_array#6 to Phi node: let test_array#4: bytes = φ(test_array#6 <- block@18) in block@18: // for_header_L20
debug: Replacing trivial Phi node: let test_array#4: bytes = φ(test_array#6 <- block@18) (test_array#4) with test_array#6
debug: Deleting Phi assignment: let test_array#4: bytes = φ(test_array#6 <- block@18)
debug: Replaced trivial Phi node: let test_array#4: bytes = φ(test_array#6 <- block@18) (test_array#4) with test_array#6 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L20
debug: Created Phi assignment: let test_array#7: bytes = undefined while trying to resolve 'test_array' in block@24: // after_for_L20
debug: Added test_array#3 to Phi node: let test_array#7: bytes = φ(test_array#3 <- block@16) in block@16: // after_for_L15
debug: Added test_array#6 to Phi node: let test_array#7: bytes = φ(test_array#3 <- block@16, test_array#6 <- block@18) in block@18: // for_header_L20
debug: Added test_array#5 to Phi node: let test_array#7: bytes = φ(test_array#3 <- block@16, test_array#6 <- block@18, test_array#5 <- block@20) in block@20: // if_body_L23
debug: Terminated block@24: // after_for_L20
debug: Looking for 'item_index_internal%1' in an unsealed block creating an incomplete Phi: block@25: // for_header_L30
debug: Created Phi assignment: let item_index_internal%1#1: uint64 = undefined while trying to resolve 'item_index_internal%1' in block@25: // for_header_L30
debug: Terminated block@25: // for_header_L30
debug: Sealing block@None: // for_body_L30
debug: Looking for 'reverse_index_internal%1' in an unsealed block creating an incomplete Phi: block@25: // for_header_L30
debug: Created Phi assignment: let reverse_index_internal%1#1: uint64 = undefined while trying to resolve 'reverse_index_internal%1' in block@25: // for_header_L30
debug: Looking for 'some_string_reversed' in an unsealed block creating an incomplete Phi: block@25: // for_header_L30
debug: Created Phi assignment: let some_string_reversed#1: bytes = undefined while trying to resolve 'some_string_reversed' in block@25: // for_header_L30
debug: Terminated block@26: // for_body_L30
debug: Sealing block@27: // for_footer_L30
debug: Sealing block@None: // after_for_L30
debug: Terminated block@27: // for_footer_L30
debug: Sealing block@25: // for_header_L30
debug: Added item_index_internal%1#0 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@24) in block@24: // after_for_L20
debug: Added item_index_internal%1#2 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@24, item_index_internal%1#2 <- block@27) in block@27: // for_footer_L30
debug: Added reverse_index_internal%1#0 to Phi node: let reverse_index_internal%1#1: uint64 = φ(reverse_index_internal%1#0 <- block@24) in block@24: // after_for_L20
debug: Added reverse_index_internal%1#2 to Phi node: let reverse_index_internal%1#1: uint64 = φ(reverse_index_internal%1#0 <- block@24, reverse_index_internal%1#2 <- block@27) in block@27: // for_footer_L30
debug: Added some_string_reversed#0 to Phi node: let some_string_reversed#1: bytes = φ(some_string_reversed#0 <- block@24) in block@24: // after_for_L20
debug: Added some_string_reversed#2 to Phi node: let some_string_reversed#1: bytes = φ(some_string_reversed#0 <- block@24, some_string_reversed#2 <- block@27) in block@27: // for_footer_L30
debug: Terminated block@28: // after_for_L30
debug: Looking for 'item_index_internal%2' in an unsealed block creating an incomplete Phi: block@29: // for_header_L36
debug: Created Phi assignment: let item_index_internal%2#1: uint64 = undefined while trying to resolve 'item_index_internal%2' in block@29: // for_header_L36
debug: Terminated block@29: // for_header_L36
debug: Sealing block@None: // for_body_L36
debug: Looking for 'reverse_index_internal%2' in an unsealed block creating an incomplete Phi: block@29: // for_header_L36
debug: Created Phi assignment: let reverse_index_internal%2#1: uint64 = undefined while trying to resolve 'reverse_index_internal%2' in block@29: // for_header_L36
debug: Looking for 'bytes_reversed_with_index' in an unsealed block creating an incomplete Phi: block@29: // for_header_L36
debug: Created Phi assignment: let bytes_reversed_with_index#1: bytes = undefined while trying to resolve 'bytes_reversed_with_index' in block@29: // for_header_L36
debug: Terminated block@30: // for_body_L36
debug: Sealing block@31: // for_footer_L36
debug: Sealing block@None: // after_for_L36
debug: Terminated block@31: // for_footer_L36
debug: Sealing block@29: // for_header_L36
debug: Added item_index_internal%2#0 to Phi node: let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@28) in block@28: // after_for_L30
debug: Added item_index_internal%2#2 to Phi node: let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@28, item_index_internal%2#2 <- block@31) in block@31: // for_footer_L36
debug: Added reverse_index_internal%2#0 to Phi node: let reverse_index_internal%2#1: uint64 = φ(reverse_index_internal%2#0 <- block@28) in block@28: // after_for_L30
debug: Added reverse_index_internal%2#2 to Phi node: let reverse_index_internal%2#1: uint64 = φ(reverse_index_internal%2#0 <- block@28, reverse_index_internal%2#2 <- block@31) in block@31: // for_footer_L36
debug: Added bytes_reversed_with_index#0 to Phi node: let bytes_reversed_with_index#1: bytes = φ(bytes_reversed_with_index#0 <- block@28) in block@28: // after_for_L30
debug: Added bytes_reversed_with_index#2 to Phi node: let bytes_reversed_with_index#1: bytes = φ(bytes_reversed_with_index#0 <- block@28, bytes_reversed_with_index#2 <- block@31) in block@31: // for_footer_L36
debug: Terminated block@32: // after_for_L36
debug: Sealing block@33: // for_header_3_L40
debug: Terminated block@33: // for_header_3_L40
debug: Terminated block@34: // for_header_2_L40
debug: Terminated block@35: // for_header_1_L40
debug: Terminated block@36: // for_header_0_L40
debug: Sealing block@None: // for_body_L40
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@37: // for_body_L40
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@33) in block@33: // for_header_3_L40
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@34: // for_header_2_L40
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@34: // for_header_2_L40
debug: Added tuple_index%0#2 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@33, tuple_index%0#2 <- block@34) in block@34: // for_header_2_L40
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@35: // for_header_1_L40
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@35: // for_header_1_L40
debug: Added tuple_index%0#3 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@33, tuple_index%0#2 <- block@34, tuple_index%0#3 <- block@35) in block@35: // for_header_1_L40
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@36: // for_header_0_L40
debug: Created Phi assignment: let tuple_index%0#4: uint64 = undefined while trying to resolve 'tuple_index%0' in block@36: // for_header_0_L40
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@33, tuple_index%0#2 <- block@34, tuple_index%0#3 <- block@35, tuple_index%0#4 <- block@36) in block@36: // for_header_0_L40
debug: Created Phi assignment: let tuple_item#4: uint64 = undefined while trying to resolve 'tuple_item' in block@37: // for_body_L40
debug: Added tuple_item#0 to Phi node: let tuple_item#4: uint64 = φ(tuple_item#0 <- block@33) in block@33: // for_header_3_L40
debug: Added tuple_item#1 to Phi node: let tuple_item#4: uint64 = φ(tuple_item#0 <- block@33, tuple_item#1 <- block@34) in block@34: // for_header_2_L40
debug: Added tuple_item#2 to Phi node: let tuple_item#4: uint64 = φ(tuple_item#0 <- block@33, tuple_item#1 <- block@34, tuple_item#2 <- block@35) in block@35: // for_header_1_L40
debug: Added tuple_item#3 to Phi node: let tuple_item#4: uint64 = φ(tuple_item#0 <- block@33, tuple_item#1 <- block@34, tuple_item#2 <- block@35, tuple_item#3 <- block@36) in block@36: // for_header_0_L40
debug: Terminated block@37: // for_body_L40
debug: Sealing block@38: // for_footer_L40
debug: Terminated block@38: // for_footer_L40
debug: Sealing block@34: // for_header_2_L40
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@38) in block@38: // for_footer_L40
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#2) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@38)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#2) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@35: // for_header_1_L40
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@38) in block@38: // for_footer_L40
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#3) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@38)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#3) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@36: // for_header_0_L40
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@38) in block@38: // for_footer_L40
debug: Replacing trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#4) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@38)
debug: Replaced trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@38) (tuple_index%0#4) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L40
debug: Terminated block@39: // after_for_L40
debug: Sealing block@40: // for_header_0_L56
debug: Terminated block@40: // for_header_0_L56
debug: Terminated block@41: // for_header_1_L56
debug: Terminated block@42: // for_header_2_L56
debug: Terminated block@43: // for_header_3_L56
debug: Sealing block@None: // for_body_L56
debug: Created Phi assignment: let tuple_index%1#1: uint64 = undefined while trying to resolve 'tuple_index%1' in block@44: // for_body_L56
debug: Added tuple_index%1#0 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@40) in block@40: // for_header_0_L56
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@41: // for_header_1_L56
debug: Created Phi assignment: let tuple_index%1#2: uint64 = undefined while trying to resolve 'tuple_index%1' in block@41: // for_header_1_L56
debug: Added tuple_index%1#2 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@40, tuple_index%1#2 <- block@41) in block@41: // for_header_1_L56
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@42: // for_header_2_L56
debug: Created Phi assignment: let tuple_index%1#3: uint64 = undefined while trying to resolve 'tuple_index%1' in block@42: // for_header_2_L56
debug: Added tuple_index%1#3 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@40, tuple_index%1#2 <- block@41, tuple_index%1#3 <- block@42) in block@42: // for_header_2_L56
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@43: // for_header_3_L56
debug: Created Phi assignment: let tuple_index%1#4: uint64 = undefined while trying to resolve 'tuple_index%1' in block@43: // for_header_3_L56
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@40, tuple_index%1#2 <- block@41, tuple_index%1#3 <- block@42, tuple_index%1#4 <- block@43) in block@43: // for_header_3_L56
debug: Created Phi assignment: let prev_item#1: uint64 = undefined while trying to resolve 'prev_item' in block@44: // for_body_L56
debug: Added prev_item#0 to Phi node: let prev_item#1: uint64 = φ(prev_item#0 <- block@40) in block@40: // for_header_0_L56
debug: Looking for 'prev_item' in an unsealed block creating an incomplete Phi: block@41: // for_header_1_L56
debug: Created Phi assignment: let prev_item#2: uint64 = undefined while trying to resolve 'prev_item' in block@41: // for_header_1_L56
debug: Added prev_item#2 to Phi node: let prev_item#1: uint64 = φ(prev_item#0 <- block@40, prev_item#2 <- block@41) in block@41: // for_header_1_L56
debug: Looking for 'prev_item' in an unsealed block creating an incomplete Phi: block@42: // for_header_2_L56
debug: Created Phi assignment: let prev_item#3: uint64 = undefined while trying to resolve 'prev_item' in block@42: // for_header_2_L56
debug: Added prev_item#3 to Phi node: let prev_item#1: uint64 = φ(prev_item#0 <- block@40, prev_item#2 <- block@41, prev_item#3 <- block@42) in block@42: // for_header_2_L56
debug: Looking for 'prev_item' in an unsealed block creating an incomplete Phi: block@43: // for_header_3_L56
debug: Created Phi assignment: let prev_item#4: uint64 = undefined while trying to resolve 'prev_item' in block@43: // for_header_3_L56
debug: Added prev_item#4 to Phi node: let prev_item#1: uint64 = φ(prev_item#0 <- block@40, prev_item#2 <- block@41, prev_item#3 <- block@42, prev_item#4 <- block@43) in block@43: // for_header_3_L56
debug: Created Phi assignment: let tuple_item#9: uint64 = undefined while trying to resolve 'tuple_item' in block@44: // for_body_L56
debug: Added tuple_item#5 to Phi node: let tuple_item#9: uint64 = φ(tuple_item#5 <- block@40) in block@40: // for_header_0_L56
debug: Added tuple_item#6 to Phi node: let tuple_item#9: uint64 = φ(tuple_item#5 <- block@40, tuple_item#6 <- block@41) in block@41: // for_header_1_L56
debug: Added tuple_item#7 to Phi node: let tuple_item#9: uint64 = φ(tuple_item#5 <- block@40, tuple_item#6 <- block@41, tuple_item#7 <- block@42) in block@42: // for_header_2_L56
debug: Added tuple_item#8 to Phi node: let tuple_item#9: uint64 = φ(tuple_item#5 <- block@40, tuple_item#6 <- block@41, tuple_item#7 <- block@42, tuple_item#8 <- block@43) in block@43: // for_header_3_L56
debug: Created Phi assignment: let prev_index#1: uint64 = undefined while trying to resolve 'prev_index' in block@44: // for_body_L56
debug: Added prev_index#0 to Phi node: let prev_index#1: uint64 = φ(prev_index#0 <- block@40) in block@40: // for_header_0_L56
debug: Looking for 'prev_index' in an unsealed block creating an incomplete Phi: block@41: // for_header_1_L56
debug: Created Phi assignment: let prev_index#2: uint64 = undefined while trying to resolve 'prev_index' in block@41: // for_header_1_L56
debug: Added prev_index#2 to Phi node: let prev_index#1: uint64 = φ(prev_index#0 <- block@40, prev_index#2 <- block@41) in block@41: // for_header_1_L56
debug: Looking for 'prev_index' in an unsealed block creating an incomplete Phi: block@42: // for_header_2_L56
debug: Created Phi assignment: let prev_index#3: uint64 = undefined while trying to resolve 'prev_index' in block@42: // for_header_2_L56
debug: Added prev_index#3 to Phi node: let prev_index#1: uint64 = φ(prev_index#0 <- block@40, prev_index#2 <- block@41, prev_index#3 <- block@42) in block@42: // for_header_2_L56
debug: Looking for 'prev_index' in an unsealed block creating an incomplete Phi: block@43: // for_header_3_L56
debug: Created Phi assignment: let prev_index#4: uint64 = undefined while trying to resolve 'prev_index' in block@43: // for_header_3_L56
debug: Added prev_index#4 to Phi node: let prev_index#1: uint64 = φ(prev_index#0 <- block@40, prev_index#2 <- block@41, prev_index#3 <- block@42, prev_index#4 <- block@43) in block@43: // for_header_3_L56
debug: Terminated block@44: // for_body_L56
debug: Sealing block@45: // for_footer_L56
debug: Terminated block@45: // for_footer_L56
debug: Sealing block@41: // for_header_1_L56
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#2) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@45)
debug: Replaced trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#2) with tuple_index%1#5 in current definition for 1 blocks
debug: Added prev_item#5 to Phi node: let prev_item#2: uint64 = φ(prev_item#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_item#2: uint64 = φ(prev_item#5 <- block@45) (prev_item#2) with prev_item#5
debug: Deleting Phi assignment: let prev_item#2: uint64 = φ(prev_item#5 <- block@45)
debug: Replaced trivial Phi node: let prev_item#2: uint64 = φ(prev_item#5 <- block@45) (prev_item#2) with prev_item#5 in current definition for 1 blocks
debug: Added prev_index#5 to Phi node: let prev_index#2: uint64 = φ(prev_index#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_index#2: uint64 = φ(prev_index#5 <- block@45) (prev_index#2) with prev_index#5
debug: Deleting Phi assignment: let prev_index#2: uint64 = φ(prev_index#5 <- block@45)
debug: Replaced trivial Phi node: let prev_index#2: uint64 = φ(prev_index#5 <- block@45) (prev_index#2) with prev_index#5 in current definition for 1 blocks
debug: Sealing block@42: // for_header_2_L56
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#3) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@45)
debug: Replaced trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#3) with tuple_index%1#5 in current definition for 1 blocks
debug: Added prev_item#5 to Phi node: let prev_item#3: uint64 = φ(prev_item#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_item#3: uint64 = φ(prev_item#5 <- block@45) (prev_item#3) with prev_item#5
debug: Deleting Phi assignment: let prev_item#3: uint64 = φ(prev_item#5 <- block@45)
debug: Replaced trivial Phi node: let prev_item#3: uint64 = φ(prev_item#5 <- block@45) (prev_item#3) with prev_item#5 in current definition for 1 blocks
debug: Added prev_index#5 to Phi node: let prev_index#3: uint64 = φ(prev_index#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_index#3: uint64 = φ(prev_index#5 <- block@45) (prev_index#3) with prev_index#5
debug: Deleting Phi assignment: let prev_index#3: uint64 = φ(prev_index#5 <- block@45)
debug: Replaced trivial Phi node: let prev_index#3: uint64 = φ(prev_index#5 <- block@45) (prev_index#3) with prev_index#5 in current definition for 1 blocks
debug: Sealing block@43: // for_header_3_L56
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#4) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@45)
debug: Replaced trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@45) (tuple_index%1#4) with tuple_index%1#5 in current definition for 1 blocks
debug: Added prev_item#5 to Phi node: let prev_item#4: uint64 = φ(prev_item#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_item#4: uint64 = φ(prev_item#5 <- block@45) (prev_item#4) with prev_item#5
debug: Deleting Phi assignment: let prev_item#4: uint64 = φ(prev_item#5 <- block@45)
debug: Replaced trivial Phi node: let prev_item#4: uint64 = φ(prev_item#5 <- block@45) (prev_item#4) with prev_item#5 in current definition for 1 blocks
debug: Added prev_index#5 to Phi node: let prev_index#4: uint64 = φ(prev_index#5 <- block@45) in block@45: // for_footer_L56
debug: Replacing trivial Phi node: let prev_index#4: uint64 = φ(prev_index#5 <- block@45) (prev_index#4) with prev_index#5
debug: Deleting Phi assignment: let prev_index#4: uint64 = φ(prev_index#5 <- block@45)
debug: Replaced trivial Phi node: let prev_index#4: uint64 = φ(prev_index#5 <- block@45) (prev_index#4) with prev_index#5 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L56
debug: Terminated block@46: // after_for_L56
debug: Sealing block@0: // L77
debug: Terminated block@0: // L77
debug: Output IR to reversed_iteration/out/MyContract.ssa.ir
info: Optimizing test_cases.reversed_iteration.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: start%0#0, range_item%0#0
debug: Replacing {range_item%0#0} with start%0#0 made 2 modifications
debug: Found equivalence set: array_data%0#4, test_array#0
debug: Replacing {array_data%0#4} with test_array#0 made 1 modifications
debug: Found equivalence set: range_item%0#2, i#0
debug: Replacing {range_item%0#2} with i#0 made 3 modifications
debug: Found equivalence set: start%1#0, range_item%1#0
debug: Replacing {range_item%1#0} with start%1#0 made 2 modifications
debug: Found equivalence set: array_data%1#6, some_strings#0
debug: Replacing {array_data%1#6} with some_strings#0 made 1 modifications
debug: Found equivalence set: range_item%1#2, item#0
debug: Replacing {range_item%1#2} with item#0 made 3 modifications
debug: Found equivalence set: range_index%0#1, index#0
debug: Replacing {range_index%0#1} with index#0 made 2 modifications
debug: Found equivalence set: updated_target%0#0, test_array#2
debug: Replacing {updated_target%0#0} with test_array#2 made 1 modifications
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%2#0
debug: Replacing {reverse_index_internal%2#0} with bytes_length%0#0 made 1 modifications
debug: Found equivalence set: concat_result%0#0, some_string_reversed#2
debug: Replacing {concat_result%0#0} with some_string_reversed#2 made 1 modifications
debug: Found equivalence set: range_item%2#1, item#1
debug: Replacing {range_item%2#1} with item#1 made 3 modifications
debug: Found equivalence set: next_index%0#0, index#1
debug: Replacing {next_index%0#0} with index#1 made 1 modifications
debug: Found equivalence set: updated_target%1#0, test_array#5
debug: Replacing {updated_target%1#0} with test_array#5 made 1 modifications
debug: Found equivalence set: reverse_index_internal%2#2, index#2
debug: Replacing {reverse_index_internal%2#2} with index#2 made 3 modifications
debug: Found equivalence set: tuple_index%0#1, index#3
debug: Replacing {tuple_index%0#1} with index#3 made 3 modifications
debug: Found equivalence set: reversed_index%0#0, index#4, prev_index#5
debug: Replacing {reversed_index%0#0, prev_index#5} with index#4 made 4 modifications
debug: Found equivalence set: tuple_item#9, prev_item#5
debug: Replacing {prev_item#5} with tuple_item#9 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (< 0u 0u) to 0u
debug: Simplified (- 0u 0u) to 0u
debug: Simplified (* 1u iteration_count_minus_one%0#0) to iteration_count_minus_one%0#0
debug: Simplified (+ 0u range_delta%0#0) to range_delta%0#0
debug: Simplified (>= start%0#0 0u) to 1u
debug: Simplified (* reverse_index_internal%0#2 1u) to reverse_index_internal%0#2
debug: Simplified (concat 0x 0x00) to 0x00
debug: Simplified (< 0u 4u) to 1u
debug: Simplified (- 4u 0u) to 4u
debug: Simplified (* 1u iteration_count_minus_one%1#0) to iteration_count_minus_one%1#0
debug: Simplified (+ 0u range_delta%1#0) to range_delta%1#0
debug: Simplified (>= start%1#0 0u) to 1u
debug: Simplified (* index#0 1u) to index#0
debug: Simplified (< 4u 8u) to 1u
debug: Simplified (- 8u 4u) to 4u
debug: Simplified (* index#1 1u) to index#1
debug: Simplified (len "a") to 1u
debug: Simplified (len "b") to 1u
debug: Simplified (len "c") to 1u
debug: Simplified ((extract 6 2) value_as_bytes%3#0) to 0x0006
debug: Simplified (concat 0x value_as_uint16%3#0) to value_as_uint16%3#0
debug: Simplified (len "") to 0u
debug: Simplified (concat value_as_uint16%6#0 "") to value_as_uint16%6#0
debug: Simplified (len "cba") to 3u
debug: Simplified (len 0x48454c4c4f) to 5u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable stop%0#0
debug: Removing unused variable continue_looping%1#0
debug: Removing unused variable array_data%0#0
debug: Removing unused variable stop%1#0
debug: Removing unused variable array_length%0#0
debug: Removing unused variable continue_looping%4#0
debug: Removing unused variable array_length%1#0
debug: Removing unused variable array_data%1#0
debug: Removing unused variable next_offset%0#0
debug: Removing unused variable value_as_bytes%3#0
debug: Removing unused variable next_offset%0#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@45: // for_footer_L56 from goto_nth [block@41, block@42, block@43][tuple_index%1#1] else goto block@46 to goto_nth [block@41, block@42, block@43][tuple_index%1#1] else return 1u
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // for_header_L8 with block@1: // for_preamble_L8 in block@6: // after_for_L8
debug: Replaced predecessor block@2: // for_header_L8 with block@1: // for_preamble_L8 in block@3: // for_body_L8
debug: Merged linear block@2: // for_header_L8 into block@1: // for_preamble_L8
debug: Replaced predecessor block@4: // for_footer_L8 with block@3: // for_body_L8 in block@6: // after_for_L8
debug: Replaced predecessor block@4: // for_footer_L8 with block@3: // for_body_L8 in block@5: // for_increment_L8
debug: Merged linear block@4: // for_footer_L8 into block@3: // for_body_L8
debug: Replaced predecessor block@9: // for_footer_L11 with block@8: // for_body_L11 in block@7: // for_header_L11
debug: Merged linear block@9: // for_footer_L11 into block@8: // for_body_L11
debug: Replaced predecessor block@12: // for_header_L15 with block@11: // for_preamble_L15 in block@16: // after_for_L15
debug: Replaced predecessor block@12: // for_header_L15 with block@11: // for_preamble_L15 in block@13: // for_body_L15
debug: Merged linear block@12: // for_header_L15 into block@11: // for_preamble_L15
debug: Replaced predecessor block@14: // for_footer_L15 with block@13: // for_body_L15 in block@16: // after_for_L15
debug: Replaced predecessor block@14: // for_footer_L15 with block@13: // for_body_L15 in block@15: // for_increment_L15
debug: Merged linear block@14: // for_footer_L15 into block@13: // for_body_L15
debug: Replaced predecessor block@22: // for_footer_L20 with block@21: // after_if_else_L23 in block@23: // for_increment_L20
debug: Merged linear block@22: // for_footer_L20 into block@21: // after_if_else_L23
debug: Replaced predecessor block@23: // for_increment_L20 with block@21: // after_if_else_L23 in block@18: // for_header_L20
debug: Merged linear block@23: // for_increment_L20 into block@21: // after_if_else_L23
debug: Replaced predecessor block@27: // for_footer_L30 with block@26: // for_body_L30 in block@25: // for_header_L30
debug: Merged linear block@27: // for_footer_L30 into block@26: // for_body_L30
debug: Replaced predecessor block@31: // for_footer_L36 with block@30: // for_body_L36 in block@29: // for_header_L36
debug: Merged linear block@31: // for_footer_L36 into block@30: // for_body_L36
debug: Replaced predecessor block@33: // for_header_3_L40 with block@32: // after_for_L36 in block@37: // for_body_L40
debug: Merged linear block@33: // for_header_3_L40 into block@32: // after_for_L36
debug: Replaced predecessor block@38: // for_footer_L40 with block@37: // for_body_L40 in block@34: // for_header_2_L40
debug: Replaced predecessor block@38: // for_footer_L40 with block@37: // for_body_L40 in block@35: // for_header_1_L40
debug: Replaced predecessor block@38: // for_footer_L40 with block@37: // for_body_L40 in block@36: // for_header_0_L40
debug: Replaced predecessor block@38: // for_footer_L40 with block@37: // for_body_L40 in block@39: // after_for_L40
debug: Merged linear block@38: // for_footer_L40 into block@37: // for_body_L40
debug: Replaced predecessor block@40: // for_header_0_L56 with block@39: // after_for_L40 in block@44: // for_body_L56
debug: Merged linear block@40: // for_header_0_L56 into block@39: // after_for_L40
debug: Replaced predecessor block@45: // for_footer_L56 with block@44: // for_body_L56 in block@41: // for_header_1_L56
debug: Replaced predecessor block@45: // for_footer_L56 with block@44: // for_body_L56 in block@42: // for_header_2_L56
debug: Replaced predecessor block@45: // for_footer_L56 with block@44: // for_body_L56 in block@43: // for_header_3_L56
debug: Merged linear block@45: // for_footer_L56 into block@44: // for_body_L56
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@46: // after_for_L56
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: iteration_count_minus_one%0#0, range_delta%0#0, start%0#0
debug: Replacing {range_delta%0#0, start%0#0} with iteration_count_minus_one%0#0 made 1 modifications
debug: Found equivalence set: reverse_index_internal%0#2, item_index%0#0
debug: Replacing {item_index%0#0} with reverse_index_internal%0#2 made 1 modifications
debug: Found equivalence set: iteration_count_minus_one%1#0, range_delta%1#0, start%1#0
debug: Replacing {range_delta%1#0, start%1#0} with iteration_count_minus_one%1#0 made 1 modifications
debug: Found equivalence set: value_as_uint16%6#0, some_string_reversed#0
debug: Replacing {value_as_uint16%6#0} with some_string_reversed#0 made 1 modifications
debug: Found equivalence set: index#0, write_offset%0#0
debug: Replacing {write_offset%0#0} with index#0 made 1 modifications
debug: Found equivalence set: index#1, write_offset%1#0
debug: Replacing {write_offset%1#0} with index#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (% 0u 1u) to 0u
debug: Simplified (/ 0u 1u) to 0u
debug: Simplified (concat 0x00 0x00) to 0x0000
debug: Simplified (% 4u 1u) to 0u
debug: Simplified (/ 4u 1u) to 4u
debug: Simplified (% 4u 1u) to 0u
debug: Simplified (/ 4u 1u) to 4u
debug: Simplified ((extract 6 2) value_as_bytes%0#0) to 0x0001
debug: Simplified ((extract 6 2) value_as_bytes%1#0) to 0x0001
debug: Simplified ((extract 6 2) value_as_bytes%2#0) to 0x0001
debug: Simplified ((extract 6 2) value_as_bytes%6#0) to 0x0000
debug: Simplified ((extract 6 2) value_as_bytes%7#0) to 0x0003
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable should_loop%0#0
debug: Removing unused variable range_length%0#0
debug: Removing unused variable continue_looping%0#0
debug: Removing unused variable array_data%0#1
debug: Removing unused variable should_loop%1#0
debug: Removing unused variable range_length%1#0
debug: Removing unused variable continue_looping%3#0
debug: Removing unused variable should_loop%2#0
debug: Removing unused variable range_length%2#0
debug: Removing unused variable length%0#0
debug: Removing unused variable value_as_bytes%0#0
debug: Removing unused variable length%1#0
debug: Removing unused variable value_as_bytes%1#0
debug: Removing unused variable length%2#0
debug: Removing unused variable value_as_bytes%2#0
debug: Removing unused variable value_as_uint16%3#0
debug: Removing unused variable array_data%1#1
debug: Removing unused variable element_length%2#0
debug: Removing unused variable length%3#0
debug: Removing unused variable value_as_bytes%6#0
debug: Removing unused variable length%4#0
debug: Removing unused variable value_as_bytes%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L7 from goto 0u ? block@1 : block@6 to goto block@6
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1: // for_preamble_L8 from goto 1u ? block@3 : block@6 to goto block@3
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10: // after_for_L11 from goto 1u ? block@11 : block@16 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11: // for_preamble_L15 from goto 1u ? block@13 : block@16 to goto block@13
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16: // after_for_L15 from goto 1u ? block@17 : block@24 to goto block@17
debug: Replacing trivial Phi node: let test_array#3: bytes = φ(test_array#2 <- block@13) (test_array#3) with test_array#2
debug: Deleting Phi assignment: let test_array#3: bytes = φ(test_array#2 <- block@13)
debug: Replacing trivial Phi node: let test_array#3: bytes = φ(test_array#2 <- block@13) (test_array#3) with test_array#2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@11: // for_preamble_L15 with block@10: // after_for_L11 in block@13: // for_body_L15
debug: Merged linear block@11: // for_preamble_L15 into block@10: // after_for_L11
debug: Replaced predecessor block@17: // for_preamble_L20 with block@16: // after_for_L15 in block@18: // for_header_L20
debug: Merged linear block@17: // for_preamble_L20 into block@16: // after_for_L15
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@0: // L7
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // for_preamble_L8, block@3: // for_body_L8, block@5: // for_increment_L8
debug: Removed unreachable predecessors from block@6: // after_for_L8
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0000 0x00) to 0x000000
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (concat 0x0001 "a") to 0x000161
debug: Simplified (concat 0x0001 "b") to 0x000162
debug: Simplified (concat 0x0001 "c") to 0x000163
debug: Simplified (concat 0x0003 "cba") to 0x0003636261
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#2
debug: Removing unused variable range_mod_step%1#0
debug: Removing unused variable range_floor_div_step%1#0
debug: Removing unused variable range_mod_step%2#0
debug: Removing unused variable range_floor_div_step%2#0
debug: Removing unused variable value_as_uint16%0#0
debug: Removing unused variable value_as_uint16%1#0
debug: Removing unused variable value_as_uint16%2#0
debug: Removing unused variable value_as_uint16%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x000000 0x00) to 0x00000000
debug: Simplified (+ 4u 0u) to 4u
debug: Simplified (+ 4u 0u) to 4u
debug: Simplified (len 0x000161) to 3u
debug: Simplified (len 0x000162) to 3u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#3
debug: Removing unused variable range_mod_step_not_zero%1#0
debug: Removing unused variable range_mod_step_not_zero%2#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (- 4u 1u) to 3u
debug: Simplified (- 4u 1u) to 3u
debug: Simplified (+ 6u 3u) to 9u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable iteration_count%1#0
debug: Removing unused variable iteration_count%2#0
debug: Removing unused variable element_length%0#0
debug: Removing unused variable element_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified ((extract 6 2) value_as_bytes%4#0) to 0x0009
debug: Simplified (+ 9u 3u) to 12u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable iteration_count_minus_one%2#0
debug: Removing unused variable next_offset%0#1
debug: Removing unused variable value_as_bytes%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0006 0x0009) to 0x00060009
debug: Simplified ((extract 6 2) value_as_bytes%5#0) to 0x000c
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%4#0
debug: Removing unused variable next_offset%0#2
debug: Removing unused variable value_as_bytes%5#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_7.ir
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00060009 0x000c) to 0x00060009000c
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%1#2
debug: Removing unused variable value_as_uint16%5#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_8.ir
debug: Begin optimization pass 9/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00060009000c 0x000161) to 0x00060009000c000161
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%1#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_9.ir
debug: Begin optimization pass 10/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00060009000c000161 0x000162) to 0x00060009000c000161000162
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%1#4
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_10.ir
debug: Begin optimization pass 11/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00060009000c000161000162 0x000163) to 0x00060009000c000161000162000163
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%1#5
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_11.ir
debug: Begin optimization pass 12/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable some_strings#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to reversed_iteration/out/MyContract.ssa.opt_pass_12.ir
debug: Begin optimization pass 13/100
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@20: // if_body_L23 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 13, ending loop
debug: Removing Phis from test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Removing Phis from test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Coalescing local variables in test_cases.reversed_iteration.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#5, item_index_internal%0#1, item_index_internal%0#2]
debug: Coalescing reverse_index_internal%0#0 with [reverse_index_internal%0#5, reverse_index_internal%0#1, reverse_index_internal%0#2]
debug: Coalescing test_array#0 with [test_array#10, test_array#1, test_array#2, test_array#13, test_array#6, test_array#5, test_array#7]
debug: Coalescing range_index%0#0 with [range_index%0#2]
debug: Coalescing item#0 with [item#2, item#3, item#1]
debug: Coalescing index#0 with [index#5, index#1, index#2, index#7, index#3, index#4]
debug: Coalescing range_item%2#0 with [range_item%2#3]
debug: Coalescing range_index%1#0 with [range_index%1#6, range_index%1#3, range_index%1#2]
debug: Coalescing some_string_reversed#0 with [some_string_reversed#5, some_string_reversed#1, some_string_reversed#2]
debug: Coalescing item_index_internal%1#0 with [item_index_internal%1#5, item_index_internal%1#1, item_index_internal%1#2]
debug: Coalescing reverse_index_internal%1#0 with [reverse_index_internal%1#5, reverse_index_internal%1#1, reverse_index_internal%1#2]
debug: Coalescing bytes_reversed_with_index#0 with [bytes_reversed_with_index#5, bytes_reversed_with_index#1, bytes_reversed_with_index#2]
debug: Coalescing item_index_internal%2#0 with [item_index_internal%2#5, item_index_internal%2#1, item_index_internal%2#2]
debug: Coalescing reverse_index_internal%2#1 with [reverse_index_internal%2#2]
debug: Coalescing tuple_index%0#0 with [tuple_index%0#5]
debug: Coalescing tuple_item#0 with [tuple_item#14, tuple_item#1, tuple_item#2, tuple_item#3, tuple_item#4, tuple_item#5, tuple_item#22, tuple_item#6, tuple_item#7, tuple_item#8]
debug: Coalescing prev_item#0 with [prev_item#3, prev_item#1]
debug: Coalescing prev_index#0 with [prev_index#3, prev_index#1]
debug: Coalescing tuple_index%1#0 with [tuple_index%1#10, tuple_index%1#1]
debug: Coalescing resulted in 180 replacement/s
debug: Coalescing local variables in test_cases.reversed_iteration.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.reversed_iteration.contract.MyContract.approval_program
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, reverse_index_internal%0#0
debug: * to_do reverse_index_internal%0#0
debug: * to_do item_index_internal%0#0
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, reverse_index_internal%0#0
debug: * to_do reverse_index_internal%0#0
debug: * to_do item_index_internal%0#0
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, reverse_index_internal%0#0=reverse_index_internal%0#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, reverse_index_internal%0#0
debug: * to_do reverse_index_internal%0#0
debug: * to_do item_index_internal%0#0
debug: loc: {item#0=None, index#0=None, test_array#0=test_array#0, iteration_count_minus_one%1#0=iteration_count_minus_one%1#0, range_index%0#0=range_index%0#0}
debug: pred: {item#0=iteration_count_minus_one%1#0, index#0=range_index%0#0, test_array#0=test_array#0}
debug: ready: item#0, index#0
debug: to_do: item#0, index#0, test_array#0
debug: * avail index#0
debug: * avail range_index%0#0
debug: * avail item#0
debug: * avail iteration_count_minus_one%1#0
debug: * to_do test_array#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=item#0, index#0=index#0, test_array#0=test_array#0}
debug: pred: {item#0=item#0, index#0=index#0, test_array#0=test_array#0}
debug: ready: 
debug: to_do: item#0, index#0, test_array#0
debug: * to_do test_array#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=None, index#0=None, test_array#0=test_array#0, range_item%1#3=range_item%1#3, range_index%0#0=range_index%0#0}
debug: pred: {item#0=range_item%1#3, index#0=range_index%0#0, test_array#0=test_array#0}
debug: ready: item#0, index#0
debug: to_do: item#0, index#0, test_array#0
debug: * avail index#0
debug: * avail range_index%0#0
debug: * avail item#0
debug: * avail range_item%1#3
debug: * to_do test_array#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=None, range_index%1#0=range_index%1#0, test_array#0=test_array#0, range_item%2#0=range_item%2#0}
debug: pred: {item#0=range_item%2#0, range_index%1#0=range_index%1#0, test_array#0=test_array#0}
debug: ready: item#0
debug: to_do: item#0, range_index%1#0, test_array#0
debug: * avail item#0
debug: * avail range_item%2#0
debug: * to_do test_array#0
debug: * to_do range_index%1#0
debug: * to_do item#0
debug: loc: {item#0=item#0, range_index%1#0=range_index%1#0, test_array#0=test_array#0}
debug: pred: {item#0=item#0, range_index%1#0=range_index%1#0, test_array#0=test_array#0}
debug: ready: 
debug: to_do: item#0, range_index%1#0, test_array#0
debug: * to_do test_array#0
debug: * to_do range_index%1#0
debug: * to_do item#0
debug: loc: {item#0=None, range_index%1#0=range_index%1#0, test_array#0=test_array#0, range_item%2#0=range_item%2#0}
debug: pred: {item#0=range_item%2#0, range_index%1#0=range_index%1#0, test_array#0=test_array#0}
debug: ready: item#0
debug: to_do: item#0, range_index%1#0, test_array#0
debug: * avail item#0
debug: * avail range_item%2#0
debug: * to_do test_array#0
debug: * to_do range_index%1#0
debug: * to_do item#0
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, reverse_index_internal%1#0, some_string_reversed#0
debug: * to_do some_string_reversed#0
debug: * to_do reverse_index_internal%1#0
debug: * to_do item_index_internal%1#0
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, reverse_index_internal%1#0, some_string_reversed#0
debug: * to_do some_string_reversed#0
debug: * to_do reverse_index_internal%1#0
debug: * to_do item_index_internal%1#0
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, reverse_index_internal%1#0=reverse_index_internal%1#0, some_string_reversed#0=some_string_reversed#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, reverse_index_internal%1#0, some_string_reversed#0
debug: * to_do some_string_reversed#0
debug: * to_do reverse_index_internal%1#0
debug: * to_do item_index_internal%1#0
debug: loc: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=None, bytes_reversed_with_index#0=bytes_reversed_with_index#0, bytes_length%0#0=bytes_length%0#0}
debug: pred: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=bytes_length%0#0, bytes_reversed_with_index#0=bytes_reversed_with_index#0}
debug: ready: reverse_index_internal%2#1
debug: to_do: item_index_internal%2#0, reverse_index_internal%2#1, bytes_reversed_with_index#0
debug: * avail reverse_index_internal%2#1
debug: * avail bytes_length%0#0
debug: * to_do bytes_reversed_with_index#0
debug: * to_do reverse_index_internal%2#1
debug: * to_do item_index_internal%2#0
debug: loc: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=reverse_index_internal%2#1, bytes_reversed_with_index#0=bytes_reversed_with_index#0}
debug: pred: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=reverse_index_internal%2#1, bytes_reversed_with_index#0=bytes_reversed_with_index#0}
debug: ready: 
debug: to_do: item_index_internal%2#0, reverse_index_internal%2#1, bytes_reversed_with_index#0
debug: * to_do bytes_reversed_with_index#0
debug: * to_do reverse_index_internal%2#1
debug: * to_do item_index_internal%2#0
debug: loc: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=None, bytes_reversed_with_index#0=bytes_reversed_with_index#0, index#0=index#0}
debug: pred: {item_index_internal%2#0=item_index_internal%2#0, reverse_index_internal%2#1=index#0, bytes_reversed_with_index#0=bytes_reversed_with_index#0}
debug: ready: reverse_index_internal%2#1
debug: to_do: item_index_internal%2#0, reverse_index_internal%2#1, bytes_reversed_with_index#0
debug: * avail reverse_index_internal%2#1
debug: * avail index#0
debug: * to_do bytes_reversed_with_index#0
debug: * to_do reverse_index_internal%2#1
debug: * to_do item_index_internal%2#0
debug: loc: {index#0=None, tuple_item#0=tuple_item#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, tuple_item#0=tuple_item#0}
debug: ready: index#0
debug: to_do: index#0, tuple_item#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do tuple_item#0
debug: * to_do index#0
debug: loc: {index#0=None, tuple_item#0=tuple_item#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, tuple_item#0=tuple_item#0}
debug: ready: index#0
debug: to_do: index#0, tuple_item#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do tuple_item#0
debug: * to_do index#0
debug: loc: {index#0=None, tuple_item#0=tuple_item#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, tuple_item#0=tuple_item#0}
debug: ready: index#0
debug: to_do: index#0, tuple_item#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do tuple_item#0
debug: * to_do index#0
debug: loc: {index#0=None, tuple_item#0=tuple_item#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, tuple_item#0=tuple_item#0}
debug: ready: index#0
debug: to_do: index#0, tuple_item#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do tuple_item#0
debug: * to_do index#0
debug: loc: {index#0=index#0, tuple_item#0=tuple_item#0}
debug: pred: {index#0=index#0, tuple_item#0=tuple_item#0}
debug: ready: 
debug: to_do: index#0, tuple_item#0
debug: * to_do tuple_item#0
debug: * to_do index#0
debug: loc: {tuple_index%1#0=tuple_index%1#0, prev_item#0=prev_item#0, tuple_item#0=tuple_item#0, prev_index#0=prev_index#0}
debug: pred: {tuple_index%1#0=tuple_index%1#0, prev_item#0=prev_item#0, tuple_item#0=tuple_item#0, prev_index#0=prev_index#0}
debug: ready: 
debug: to_do: tuple_index%1#0, prev_item#0, tuple_item#0, prev_index#0
debug: * to_do prev_index#0
debug: * to_do tuple_item#0
debug: * to_do prev_item#0
debug: * to_do tuple_index%1#0
debug: loc: {tuple_index%1#0=None, prev_item#0=None, tuple_item#0=tuple_item#0, prev_index#0=None, tuple_index%1#5=tuple_index%1#5, tuple_item#9=tuple_item#9, index#0=index#0}
debug: pred: {tuple_index%1#0=tuple_index%1#5, prev_item#0=tuple_item#9, tuple_item#0=tuple_item#0, prev_index#0=index#0}
debug: ready: tuple_index%1#0, prev_item#0, prev_index#0
debug: to_do: tuple_index%1#0, prev_item#0, tuple_item#0, prev_index#0
debug: * avail prev_index#0
debug: * avail index#0
debug: * avail prev_item#0
debug: * avail tuple_item#9
debug: * avail tuple_index%1#0
debug: * avail tuple_index%1#5
debug: * to_do prev_index#0
debug: * to_do tuple_item#0
debug: * to_do prev_item#0
debug: * to_do tuple_index%1#0
debug: loc: {tuple_index%1#0=None, prev_item#0=None, tuple_item#0=tuple_item#0, prev_index#0=None, tuple_index%1#5=tuple_index%1#5, tuple_item#9=tuple_item#9, index#0=index#0}
debug: pred: {tuple_index%1#0=tuple_index%1#5, prev_item#0=tuple_item#9, tuple_item#0=tuple_item#0, prev_index#0=index#0}
debug: ready: tuple_index%1#0, prev_item#0, prev_index#0
debug: to_do: tuple_index%1#0, prev_item#0, tuple_item#0, prev_index#0
debug: * avail prev_index#0
debug: * avail index#0
debug: * avail prev_item#0
debug: * avail tuple_item#9
debug: * avail tuple_index%1#0
debug: * avail tuple_index%1#5
debug: * to_do prev_index#0
debug: * to_do tuple_item#0
debug: * to_do prev_item#0
debug: * to_do tuple_index%1#0
debug: loc: {tuple_index%1#0=None, prev_item#0=None, tuple_item#0=tuple_item#0, prev_index#0=None, tuple_index%1#5=tuple_index%1#5, tuple_item#9=tuple_item#9, index#0=index#0}
debug: pred: {tuple_index%1#0=tuple_index%1#5, prev_item#0=tuple_item#9, tuple_item#0=tuple_item#0, prev_index#0=index#0}
debug: ready: tuple_index%1#0, prev_item#0, prev_index#0
debug: to_do: tuple_index%1#0, prev_item#0, tuple_item#0, prev_index#0
debug: * avail prev_index#0
debug: * avail index#0
debug: * avail prev_item#0
debug: * avail tuple_item#9
debug: * avail tuple_index%1#0
debug: * avail tuple_index%1#5
debug: * to_do prev_index#0
debug: * to_do tuple_item#0
debug: * to_do prev_item#0
debug: * to_do tuple_index%1#0
debug: loc: {tuple_index%1#0=tuple_index%1#0, prev_item#0=prev_item#0, tuple_item#9=None, prev_index#0=prev_index#0, tuple_item#0=tuple_item#0}
debug: pred: {tuple_index%1#0=tuple_index%1#0, prev_item#0=prev_item#0, tuple_item#9=tuple_item#0, prev_index#0=prev_index#0}
debug: ready: tuple_item#9
debug: to_do: tuple_index%1#0, prev_item#0, tuple_item#9, prev_index#0
debug: * avail tuple_item#9
debug: * avail tuple_item#0
debug: * to_do prev_index#0
debug: * to_do tuple_item#9
debug: * to_do prev_item#0
debug: * to_do tuple_index%1#0
debug: Sequentializing parallel copies in test_cases.reversed_iteration.contract.MyContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to reversed_iteration/out/MyContract.destructured.ir
debug: Inserted main_for_header@7.ops[3]: 'store continue_looping%2#0 to l-stack (copy)'
debug: Replaced main_for_header@7.ops[5]: 'load continue_looping%2#0' with 'load continue_looping%2#0 from l-stack (no copy)'
debug: Inserted main_for_body@8.ops[8]: 'store x#0 to l-stack (copy)'
debug: Replaced main_for_body@8.ops[10]: 'load x#0' with 'load x#0 from l-stack (no copy)'
debug: Inserted main_for_body@8.ops[3]: 'store reverse_index_internal%0#0 to l-stack (copy)'
debug: Replaced main_for_body@8.ops[6]: 'load reverse_index_internal%0#0' with 'load reverse_index_internal%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@10.ops[5]: 'store range_index%0#0 to l-stack (copy)'
debug: Replaced main_after_for@10.ops[7]: 'load range_index%0#0' with 'load range_index%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@10.ops[3]: 'store iteration_count_minus_one%1#0 to l-stack (copy)'
debug: Replaced main_after_for@10.ops[10]: 'load iteration_count_minus_one%1#0' with 'load iteration_count_minus_one%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@13.ops[2]: 'store val_as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_for_body@13.ops[4]: 'load val_as_bytes%0#0' with 'load val_as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@13.ops[10]: 'store index_is_in_bounds%0#0 to l-stack (copy)'
debug: Replaced main_for_body@13.ops[12]: 'load index_is_in_bounds%0#0' with 'load index_is_in_bounds%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@13.ops[8]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@13.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@13.ops[6]: 'store assigned_value%0#0 to l-stack (copy)'
debug: Replaced main_for_body@13.ops[18]: 'load assigned_value%0#0' with 'load assigned_value%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@13.ops[1]: 'store item#0 to l-stack (copy)'
debug: Replaced main_for_body@13.ops[22]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted main_for_increment@15.ops[7]: 'store range_index%0#0 to l-stack (copy)'
debug: Replaced main_for_increment@15.ops[9]: 'load range_index%0#0' with 'load range_index%0#0 from l-stack (no copy)'
debug: Inserted main_for_increment@15.ops[3]: 'store range_item%1#3 to l-stack (copy)'
debug: Replaced main_for_increment@15.ops[12]: 'load range_item%1#3' with 'load range_item%1#3 from l-stack (no copy)'
debug: Inserted main_after_for@16.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_after_for@16.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_after_for@16.ops[8]: 'store range_item%2#0 to l-stack (copy)'
debug: Replaced main_after_for@16.ops[12]: 'load range_item%2#0' with 'load range_item%2#0 from l-stack (no copy)'
debug: Inserted main_for_header@18.ops[3]: 'store continue_looping%5#0 to l-stack (copy)'
debug: Replaced main_for_header@18.ops[7]: 'load continue_looping%5#0' with 'load continue_looping%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[6]: 'store val_as_bytes%1#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[8]: 'load val_as_bytes%1#0' with 'load val_as_bytes%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[14]: 'store index_is_in_bounds%1#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[16]: 'load index_is_in_bounds%1#0' with 'load index_is_in_bounds%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[26]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[28]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[20]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[24]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[3]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[12]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[13]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[21]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@19.ops[11]: 'store assigned_value%1#0 to l-stack (copy)'
debug: Replaced main_for_body@19.ops[24]: 'load assigned_value%1#0' with 'load assigned_value%1#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@21.ops[3]: 'store range_item%2#0 to l-stack (copy)'
debug: Replaced main_after_if_else@21.ops[9]: 'load range_item%2#0' with 'load range_item%2#0 from l-stack (no copy)'
debug: Inserted main_after_for@24.ops[1]: 'store test_array#0 to l-stack (copy)'
debug: Replaced main_after_for@24.ops[3]: 'load test_array#0' with 'load test_array#0 from l-stack (no copy)'
debug: Inserted main_after_for@24.ops[6]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_for@24.ops[8]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_for_header@25.ops[3]: 'store continue_looping%6#0 to l-stack (copy)'
debug: Replaced main_for_header@25.ops[5]: 'load continue_looping%6#0' with 'load continue_looping%6#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[3]: 'store reverse_index_internal%1#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[5]: 'load reverse_index_internal%1#0' with 'load reverse_index_internal%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[16]: 'store item_length%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[18]: 'load item_length%0#0' with 'load item_length%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[36]: 'store concatenated%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[38]: 'load concatenated%0#0' with 'load concatenated%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[40]: 'store len_%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[42]: 'load len_%0#0' with 'load len_%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[44]: 'store len_bytes%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[46]: 'load len_bytes%0#0' with 'load len_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[48]: 'store len_16_bit%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[50]: 'load len_16_bit%0#0' with 'load len_16_bit%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[8]: 'store item_index_index%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[11]: 'load item_index_index%0#0' with 'load item_index_index%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[13]: 'store item_index%1#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[16]: 'load item_index%1#0' with 'load item_index%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[34]: 'store expr_value_trimmed%1#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[37]: 'load expr_value_trimmed%1#0' with 'load expr_value_trimmed%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[23]: 'store item_length_plus_2%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[27]: 'load item_length_plus_2%0#0' with 'load item_length_plus_2%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[29]: 'store str_item#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[34]: 'load str_item#0' with 'load str_item#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[33]: 'store expr_value_trimmed%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[39]: 'load expr_value_trimmed%0#0' with 'load expr_value_trimmed%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[17]: 'store item_index%1#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[27]: 'load item_index%1#0' with 'load item_index%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[46]: 'store concatenated%0#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[59]: 'load concatenated%0#0' with 'load concatenated%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@28.ops[3]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_after_for@28.ops[5]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_after_for@28.ops[10]: 'store bytes_length%0#0 to l-stack (copy)'
debug: Replaced main_after_for@28.ops[14]: 'load bytes_length%0#0' with 'load bytes_length%0#0 from l-stack (no copy)'
debug: Inserted main_for_header@29.ops[3]: 'store continue_looping%7#0 to l-stack (copy)'
debug: Replaced main_for_header@29.ops[5]: 'load continue_looping%7#0' with 'load continue_looping%7#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[11]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[13]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[33]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[35]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[3]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[6]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[16]: 'store length%5#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[19]: 'load length%5#0' with 'load length%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[26]: 'store bounded_offset%0#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[29]: 'load bounded_offset%0#0' with 'load bounded_offset%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[31]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[34]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[42]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[45]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[21]: 'store is_out_of_bounds%0#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[25]: 'load is_out_of_bounds%0#0' with 'load is_out_of_bounds%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[7]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[11]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[21]: 'store length%5#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[26]: 'load length%5#0' with 'load length%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[27]: 'store length%5#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[32]: 'load length%5#0' with 'load length%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[33]: 'store length%5#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[40]: 'load length%5#0' with 'load length%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[16]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[39]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[10]: 'store bytes_item#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[47]: 'load bytes_item#0' with 'load bytes_item#0 from l-stack (no copy)'
debug: Inserted main_for_body@30.ops[13]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@30.ops[60]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_after_for@32.ops[3]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_after_for@32.ops[5]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_after_for@32.ops[8]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced main_after_for@32.ops[12]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@37.ops[3]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_for_body@37.ops[5]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_for_body@37.ops[8]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_for_body@37.ops[10]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_for_body@37.ops[13]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@37.ops[17]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@37.ops[1]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@37.ops[13]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[9]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[11]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[16]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[18]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[23]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[25]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[28]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[30]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[33]: 'store tuple_index%1#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[37]: 'load tuple_index%1#0' with 'load tuple_index%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[15]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[21]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[1]: 'store tuple_item#9 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[8]: 'load tuple_item#9' with 'load tuple_item#9 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[6]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[10]: 'store tuple_item#9 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[25]: 'load tuple_item#9' with 'load tuple_item#9 from l-stack (no copy)'
debug: Inserted main_for_body@44.ops[5]: 'store tuple_index%1#0 to l-stack (copy)'
debug: Replaced main_for_body@44.ops[37]: 'load tuple_index%1#0' with 'load tuple_index%1#0 from l-stack (no copy)'
debug: Found 15 edge set/s for test_cases.reversed_iteration.contract.MyContract.approval_program
debug: Allocated 2 variable/s to x-stack: prev_item#0, tuple_index%1#0
debug: shared x-stack for main_after_for@39 -> main_for_body@44: tuple_index%1#0, prev_item#0
debug: shared x-stack for main_for_header_1@41 -> main_for_body@44: tuple_index%1#0, prev_item#0
debug: shared x-stack for main_for_header_2@42 -> main_for_body@44: tuple_index%1#0, prev_item#0
debug: shared x-stack for main_for_header_3@43 -> main_for_body@44: tuple_index%1#0, prev_item#0
debug: test_cases.reversed_iteration.contract.MyContract.approval_program f-stack entry: ['bytes_reversed_with_index#0', 'some_string_reversed#0', 'test_array#0', 'test_array#16', 'index#0', 'item#0', 'item_index_internal%1#0', 'item_index_internal%2#0', 'prev_index#0', 'range_index%1#0', 'reverse_index_internal%1#0', 'reverse_index_internal%2#1', 'tuple_index%0#0', 'tuple_index%1#5', 'tuple_item#0', 'tuple_item#9']
debug: test_cases.reversed_iteration.contract.MyContract.approval_program f-stack on first store: ['item_index_internal%0#0', 'reverse_index_internal%0#0']
info: Writing reversed_iteration/out/MyContract.approval.teal
info: Writing reversed_iteration/out/MyContract.clear.teal