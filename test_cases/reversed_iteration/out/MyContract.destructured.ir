contract test_cases.reversed_iteration.contract.MyContract:
    program approval:
        subroutine test_cases.reversed_iteration.contract.MyContract.approval_program() -> bool:
            block@6: // after_for_L8
                let item_index_internal%0#0: uint64 = 0u
                let reverse_index_internal%0#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L11
                let continue_looping%2#0: bool = (< item_index_internal%0#0 0u)
                goto continue_looping%2#0 ? block@8 : block@10
            block@8: // for_body_L11
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let x#0: bytes = (extract3 0x reverse_index_internal%0#0 1u)
                (log x#0)
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@7
            block@10: // after_for_L11
                let test_array#0: bytes = 0x00000000
                let iteration_count_minus_one%1#0: uint64 = 3u
                let range_index%0#0: uint64 = 0u
                let index#0: uint64 = range_index%0#0
                let item#0: uint64 = iteration_count_minus_one%1#0
                goto block@13
            block@13: // for_body_L15
                let val_as_bytes%0#0: bytes = (itob item#0)
                let assigned_value%0#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let index_is_in_bounds%0#0: bool = (< index#0 4u)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let test_array#0: bytes = (replace3 test_array#0 index#0 assigned_value%0#0)
                goto item#0 ? block@15 : block@16
            block@15: // for_increment_L15
                let range_item%1#3: uint64 = (- item#0 1u)
                let range_index%0#0: uint64 = (+ index#0 1u)
                let index#0: uint64 = range_index%0#0
                let item#0: uint64 = range_item%1#3
                goto block@13
            block@16: // after_for_L15
                let tmp%1#0: bool = (== test_array#0 0x03020100)
                (assert tmp%1#0)
                let range_item%2#0: uint64 = 4u
                let range_index%1#0: uint64 = 0u
                let item#0: uint64 = range_item%2#0
                goto block@18
            block@18: // for_header_L20
                let continue_looping%5#0: bool = (< item#0 8u)
                let test_array#16: bytes = test_array#0
                goto continue_looping%5#0 ? block@19 : block@24
            block@19: // for_body_L20
                let index#0: uint64 = (- 3u range_index%1#0)
                let val_as_bytes%1#0: bytes = (itob item#0)
                let assigned_value%1#0: bytes = ((extract 7 1) val_as_bytes%1#0)
                let index_is_in_bounds%1#0: bool = (< index#0 4u)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let test_array#0: bytes = (replace3 test_array#0 index#0 assigned_value%1#0)
                let tmp%2#0: bool = (== index#0 2u)
                goto tmp%2#0 ? block@20 : block@21
            block@20: // if_body_L23
                let test_array#16: bytes = test_array#0
                goto block@24
            block@21: // after_if_else_L23
                let range_item%2#0: uint64 = (+ item#0 1u)
                let range_index%1#0: uint64 = (+ range_index%1#0 1u)
                let item#0: uint64 = range_item%2#0
                goto block@18
            block@24: // after_for_L20
                let test_array#0: bytes = test_array#16
                let tmp%3#0: bool = (== test_array#0 0x03020504)
                (assert tmp%3#0)
                let some_string_reversed#0: bytes = 0x0000
                let item_index_internal%1#0: uint64 = 0u
                let reverse_index_internal%1#0: uint64 = 3u
                goto block@25
            block@25: // for_header_L30
                let continue_looping%6#0: bool = (< item_index_internal%1#0 3u)
                goto continue_looping%6#0 ? block@26 : block@28
            block@26: // for_body_L30
                let reverse_index_internal%1#0: uint64 = (- reverse_index_internal%1#0 1u)
                let item_index_index%0#0: uint64 = (* reverse_index_internal%1#0 2u)
                let item_index%1#0: uint64 = (extract_uint16 0x00060009000c000161000162000163 item_index_index%0#0)
                let item_length%0#0: uint64 = (extract_uint16 0x00060009000c000161000162000163 item_index%1#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let str_item#0: bytes = (extract3 0x00060009000c000161000162000163 item_index%1#0 item_length_plus_2%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) some_string_reversed#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) str_item#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let some_string_reversed#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@25
            block@28: // after_for_L30
                let tmp%8#0: bool = (== some_string_reversed#0 0x0003636261)
                (assert tmp%8#0)
                let bytes_reversed_with_index#0: bytes = ""
                let bytes_length%0#0: uint64 = 5u
                let item_index_internal%2#0: uint64 = 0u
                let reverse_index_internal%2#1: uint64 = bytes_length%0#0
                goto block@29
            block@29: // for_header_L36
                let continue_looping%7#0: bool = (< item_index_internal%2#0 5u)
                goto continue_looping%7#0 ? block@30 : block@32
            block@30: // for_body_L36
                let index#0: uint64 = (- reverse_index_internal%2#1 1u)
                let bytes_item#0: bytes = (extract3 "HELLO" index#0 1u)
                let tmp%9#0: bytes = (itob index#0)
                let length%5#0: uint64 = (len tmp%9#0)
                let is_out_of_bounds%0#0: bool = (>= 1u length%5#0)
                let bounded_offset%0#0: uint64 = (select 1u length%5#0 is_out_of_bounds%0#0)
                let bounded_index%0#0: uint64 = (- length%5#0 bounded_offset%0#0)
                let tmp%10#0: bytes = (substring3 tmp%9#0 bounded_index%0#0 length%5#0)
                let tmp%11#0: bytes = (concat tmp%10#0 bytes_item#0)
                let bytes_reversed_with_index#0: bytes = (concat bytes_reversed_with_index#0 tmp%11#0)
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                let reverse_index_internal%2#1: uint64 = index#0
                goto block@29
            block@32: // after_for_L36
                let tmp%12#0: bool = (== bytes_reversed_with_index#0 "\x04O\x03L\x02L\x01E\x00H")
                (assert tmp%12#0)
                let tuple_index%0#0: uint64 = 0u
                let tuple_item#0: uint64 = 3u
                let index#0: uint64 = tuple_index%0#0
                goto block@37
            block@34: // for_header_2_L40
                let tuple_item#0: uint64 = 2u
                let index#0: uint64 = tuple_index%0#0
                goto block@37
            block@35: // for_header_1_L40
                let tuple_item#0: uint64 = 1u
                let index#0: uint64 = tuple_index%0#0
                goto block@37
            block@36: // for_header_0_L40
                let tuple_item#0: uint64 = 0u
                let index#0: uint64 = tuple_index%0#0
                goto block@37
            block@37: // for_body_L40
                let tmp%13#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%14#0: bool = (== tmp%13#0 3u)
                (assert tmp%14#0)
                let tuple_index%0#0: uint64 = (+ index#0 1u)
                goto_nth [block@34, block@35, block@36][index#0] else goto block@39
            block@39: // after_for_L40
                let prev_item#0: uint64 = 0u
                let prev_index#0: uint64 = 99u
                let tuple_index%1#0: uint64 = 0u
                let tuple_item#0: uint64 = 5u
                goto block@44
            block@41: // for_header_1_L56
                let tuple_item#0: uint64 = 6u
                let prev_index#0: uint64 = index#0
                let prev_item#0: uint64 = tuple_item#9
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@42: // for_header_2_L56
                let tuple_item#0: uint64 = 7u
                let prev_index#0: uint64 = index#0
                let prev_item#0: uint64 = tuple_item#9
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@43: // for_header_3_L56
                let tuple_item#0: uint64 = 8u
                let prev_index#0: uint64 = index#0
                let prev_item#0: uint64 = tuple_item#9
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@44: // for_body_L56
                let tuple_item#9: uint64 = tuple_item#0
                let index#0: uint64 = (- 3u tuple_index%1#0)
                let tmp%15#0: bool = (< prev_item#0 tuple_item#9)
                (assert tmp%15#0)
                let tmp%16#0: bool = (> prev_index#0 index#0)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (+ index#0 tuple_item#9)
                let tmp%18#0: bool = (== tmp%17#0 8u)
                (assert tmp%18#0)
                let tuple_index%1#5: uint64 = (+ tuple_index%1#0 1u)
                goto_nth [block@41, block@42, block@43][tuple_index%1#0] else return 1u
    
    program clear-state:
        subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program() -> bool:
            block@0: // L77
                return 1u