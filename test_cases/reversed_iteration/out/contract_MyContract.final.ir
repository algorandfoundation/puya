contract test_cases.reversed_iteration.contract.MyContract:
    program approval:
        subroutine test_cases.reversed_iteration.contract.MyContract.approval_program() -> uint64:
            block@6: // after_for_L9
                let item_index_internal%14#0: uint64 = 0u
                let reverse_index_internal%15#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L11
                let continue_looping%16#0: uint64 = (< item_index_internal%14#0 0u)
                goto continue_looping%16#0 ? block@8 : block@10
            block@8: // for_body_L11
                let reverse_index_internal%15#0: uint64 = (- reverse_index_internal%15#0 1u)
                let x#0: bytes = (extract3 0x reverse_index_internal%15#0 1u)
                (log x#0)
                let item_index_internal%14#0: uint64 = (+ item_index_internal%14#0 1u)
                goto block@7
            block@10: // after_for_L11
                let test_array#0: bytes = 0x00000000
                let iteration_count_minus_one%25#0: uint64 = 3u
                let range_index%30#0: uint64 = 0u
                let item#0: uint64 = iteration_count_minus_one%25#0
                let index#0: uint64 = range_index%30#0
                goto block@13
            block@13: // for_body_L16
                let val_as_bytes%32#0: bytes = (itob item#0)
                let assigned_value%33#0: bytes = ((extract 7 1) val_as_bytes%32#0)
                let index_is_in_bounds%35#0: uint64 = (< index#0 4u)
                (assert index_is_in_bounds%35#0) // Index access is out of bounds
                let test_array#0: bytes = (replace3 test_array#0 index#0 assigned_value%33#0)
                let continue_looping%38#0: uint64 = (> item#0 0u)
                goto continue_looping%38#0 ? block@15 : block@16
            block@15: // for_increment_L16
                let range_item%29#3: uint64 = (- item#0 1u)
                let range_index%30#0: uint64 = (+ index#0 1u)
                let item#0: uint64 = range_item%29#3
                let index#0: uint64 = range_index%30#0
                goto block@13
            block@16: // after_for_L16
                let tmp%39#0: uint64 = (== test_array#0 0x03020100)
                (assert tmp%39#0)
                let range_item%47#0: uint64 = 4u
                let range_index%48#0: uint64 = 0u
                let item#0: uint64 = range_item%47#0
                goto block@18
            block@18: // for_header_L21
                let continue_looping%49#0: uint64 = (< item#0 8u)
                let test_array#16: bytes = test_array#0
                goto continue_looping%49#0 ? block@19 : block@24
            block@19: // for_body_L21
                let index#0: uint64 = (- 3u range_index%48#0)
                let val_as_bytes%51#0: bytes = (itob item#0)
                let assigned_value%52#0: bytes = ((extract 7 1) val_as_bytes%51#0)
                let index_is_in_bounds%54#0: uint64 = (< index#0 4u)
                (assert index_is_in_bounds%54#0) // Index access is out of bounds
                let test_array#0: bytes = (replace3 test_array#0 index#0 assigned_value%52#0)
                let tmp%57#0: uint64 = (== index#0 2u)
                goto tmp%57#0 ? block@20 : block@21
            block@20: // if_body_L23
                let test_array#16: bytes = test_array#0
                goto block@24
            block@21: // after_if_else_L23
                let range_item%47#0: uint64 = (+ item#0 1u)
                let range_index%48#0: uint64 = (+ range_index%48#0 1u)
                let item#0: uint64 = range_item%47#0
                goto block@18
            block@24: // after_for_L21
                let test_array#0: bytes = test_array#16
                let tmp%58#0: uint64 = (== test_array#0 0x03020504)
                (assert tmp%58#0)
                let value_as_bytes%61#0: bytes = (itob 6u)
                let value_as_uint16%62#0: bytes = ((extract 6 2) value_as_bytes%61#0)
                let value_as_bytes%64#0: bytes = (itob 9u)
                let value_as_uint16%65#0: bytes = ((extract 6 2) value_as_bytes%64#0)
                let array_data%59#2: bytes = (concat value_as_uint16%62#0 value_as_uint16%65#0)
                let value_as_bytes%67#0: bytes = (itob 12u)
                let value_as_uint16%68#0: bytes = ((extract 6 2) value_as_bytes%67#0)
                let array_data%59#2: bytes = (concat array_data%59#2 value_as_uint16%68#0)
                let array_data%59#2: bytes = (concat array_data%59#2 "\x00\x01a")
                let array_data%59#2: bytes = (concat array_data%59#2 "\x00\x01b")
                let some_strings#0: bytes = (concat array_data%59#2 "\x00\x01c")
                let some_string_reversed#0: bytes = "\x00\x00"
                let item_index_internal%70#0: uint64 = 0u
                let reverse_index_internal%71#0: uint64 = 3u
                goto block@25
            block@25: // for_header_L30
                let continue_looping%72#0: uint64 = (< item_index_internal%70#0 3u)
                goto continue_looping%72#0 ? block@26 : block@28
            block@26: // for_body_L30
                let reverse_index_internal%71#0: uint64 = (- reverse_index_internal%71#0 1u)
                let item_index_index%73#0: uint64 = (* reverse_index_internal%71#0 2u)
                let item_index%74#0: uint64 = (extract_uint16 some_strings#0 item_index_index%73#0)
                let item_length%75#0: uint64 = (extract_uint16 some_strings#0 item_index%74#0)
                let item_length_plus_2%76#0: uint64 = (+ item_length%75#0 2u)
                let str_item#0: bytes = (extract3 some_strings#0 item_index%74#0 item_length_plus_2%76#0)
                let expr_value_trimmed%77#0: bytes = ((extract 2 0) some_string_reversed#0)
                let expr_value_trimmed%78#0: bytes = ((extract 2 0) str_item#0)
                let concatenated%79#0: bytes = (concat expr_value_trimmed%77#0 expr_value_trimmed%78#0)
                let len_%80#0: uint64 = (len concatenated%79#0)
                let len_bytes%81#0: bytes = (itob len_%80#0)
                let len_16_bit%82#0: bytes = ((extract 6 0) len_bytes%81#0)
                let some_string_reversed#0: bytes = (concat len_16_bit%82#0 concatenated%79#0)
                let item_index_internal%70#0: uint64 = (+ item_index_internal%70#0 1u)
                goto block@25
            block@28: // after_for_L30
                let tmp%84#0: uint64 = (== some_string_reversed#0 "\x00\x03cba")
                (assert tmp%84#0)
                let bytes_reversed_with_index#0: bytes = ""
                let item_index_internal%86#0: uint64 = 0u
                let reverse_index_internal%87#0: uint64 = 5u
                goto block@29
            block@29: // for_header_L36
                let continue_looping%88#0: uint64 = (< item_index_internal%86#0 5u)
                goto continue_looping%88#0 ? block@30 : block@35
            block@30: // for_body_L36
                let index#0: uint64 = (- reverse_index_internal%87#0 1u)
                let bytes_item#0: bytes = (extract3 "HELLO" index#0 1u)
                let tmp%89#0: bytes = (itob index#0)
                let tmp%90#0: bytes = (itob index#0)
                let awst_tmp%91#0: uint64 = (len tmp%90#0)
                let tmp%92#0: uint64 = (< 1u awst_tmp%91#0)
                goto tmp%92#0 ? block@31 : block@32
            block@31: // ternary_true_L37
                let ternary_result%93#0: uint64 = (- awst_tmp%91#0 1u)
                goto block@33
            block@32: // ternary_false_L37
                let ternary_result%93#0: uint64 = 0u
                goto block@33
            block@33: // ternary_merge_L37
                let base_length%94#0: uint64 = (len tmp%89#0)
                let tmp%95#0: bytes = (substring3 tmp%89#0 ternary_result%93#0 base_length%94#0)
                let tmp%96#0: bytes = (concat tmp%95#0 bytes_item#0)
                let bytes_reversed_with_index#0: bytes = (concat bytes_reversed_with_index#0 tmp%96#0)
                let item_index_internal%86#0: uint64 = (+ item_index_internal%86#0 1u)
                let reverse_index_internal%87#0: uint64 = index#0
                goto block@29
            block@35: // after_for_L36
                let tmp%97#0: uint64 = (== bytes_reversed_with_index#0 "\x04O\x03L\x02L\x01E\x00H")
                (assert tmp%97#0)
                let tuple_index%98#0: uint64 = 0u
                let tuple_item#0: uint64 = 3u
                let index#0: uint64 = tuple_index%98#0
                goto block@40
            block@37: // for_header_2_L41
                let tuple_item#0: uint64 = 2u
                let index#0: uint64 = tuple_index%98#0
                goto block@40
            block@38: // for_header_1_L41
                let tuple_item#0: uint64 = 1u
                let index#0: uint64 = tuple_index%98#0
                goto block@40
            block@39: // for_header_0_L41
                let tuple_item#0: uint64 = 0u
                let index#0: uint64 = tuple_index%98#0
                goto block@40
            block@40: // for_body_L41
                let tmp%99#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%100#0: uint64 = (== tmp%99#0 3u)
                (assert tmp%100#0)
                let tuple_index%98#0: uint64 = (+ index#0 1u)
                goto [block@37, block@38, block@39, ...block@42][index#0]
            block@42: // after_for_L41
                let prev_item#0: uint64 = 0u
                let prev_index#0: uint64 = 99u
                let tuple_index%101#0: uint64 = 0u
                let tuple_item#0: uint64 = 5u
                goto block@47
            block@44: // for_header_1_L56
                let tuple_item#0: uint64 = 6u
                let tuple_index%101#0: uint64 = tuple_index%101#5
                let prev_item#0: uint64 = tuple_item#9
                let prev_index#0: uint64 = index#0
                goto block@47
            block@45: // for_header_2_L56
                let tuple_item#0: uint64 = 7u
                let tuple_index%101#0: uint64 = tuple_index%101#5
                let prev_item#0: uint64 = tuple_item#9
                let prev_index#0: uint64 = index#0
                goto block@47
            block@46: // for_header_3_L56
                let tuple_item#0: uint64 = 8u
                let tuple_index%101#0: uint64 = tuple_index%101#5
                let prev_item#0: uint64 = tuple_item#9
                let prev_index#0: uint64 = index#0
                goto block@47
            block@47: // for_body_L56
                let tuple_item#9: uint64 = tuple_item#0
                let index#0: uint64 = (- 3u tuple_index%101#0)
                let tmp%103#0: uint64 = (< prev_item#0 tuple_item#9)
                (assert tmp%103#0)
                let tmp%104#0: uint64 = (> prev_index#0 index#0)
                (assert tmp%104#0)
                let tmp%105#0: uint64 = (+ index#0 tuple_item#9)
                let tmp%106#0: uint64 = (== tmp%105#0 8u)
                (assert tmp%106#0)
                let tuple_index%101#5: uint64 = (+ tuple_index%101#0 1u)
                goto [block@44, block@45, block@46, ...block@49][tuple_index%101#0]
            block@49: // after_for_L56
                return 1u
    
    program clear-state:
        subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L77
                return 1u