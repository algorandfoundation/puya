contract MyContract
{
  approval_program(): bool
  {
    for i in reversed(range(0u, 0u, 1u)) {
      log(itob(i))
    }
    for x in reversed(new arc4.static_array<arc4.uint8, 0>()) {
      log(reinterpret_cast<bytes>(x))
    }
    test_array: arc4.static_array<arc4.uint8, 4> = new arc4.static_array<arc4.uint8, 4>(0arc4u8, 0arc4u8, 0arc4u8, 0arc4u8)
    for (index, item) in enumerate(reversed(range(0u, 4u, 1u))) {
      test_array[index]: arc4.uint8 = arc4_encode(item, arc4.uint8)
    }
    assert(reinterpret_cast<bytes>(test_array) == hex<"03020100">)
    for (index, item) in reversed(enumerate(reversed(range(4u, 8u, 1u)))) {
      test_array[index]: arc4.uint8 = arc4_encode(item, arc4.uint8)
      if (index == 2u) {
        break
      }
    }
    assert(reinterpret_cast<bytes>(test_array) == hex<"03020504">)
    some_strings: arc4.static_array<arc4.string, 3> = new arc4.static_array<arc4.string, 3>(arc4_encode('a', arc4.string), arc4_encode('b', arc4.string), arc4_encode('c', arc4.string))
    some_string_reversed: arc4.string = arc4_encode('', arc4.string)
    for str_item in reversed(some_strings) {
      some_string_reversed.extend(str_item)
    }
    assert(reinterpret_cast<bytes>(some_string_reversed) == reinterpret_cast<bytes>(arc4_encode('cba', arc4.string)))
    bytes_reversed_with_index: bytes = hex<"">
    for (index, bytes_item) in reversed(enumerate(hex<"48454C4C4F">)) {
      bytes_reversed_with_index += itob(index)[-1:] + bytes_item
    }
    assert(bytes_reversed_with_index == '\x04O\x03L\x02L\x01E\x00H')
    for (index, tuple_item) in enumerate(reversed((0u, 1u, 2u, 3u))) {
      assert(index + tuple_item == 3u)
    }
    prev_item: uint64 = 0u
    prev_index: uint64 = 99u
    for (index, tuple_item) in reversed(enumerate(reversed((5u, 6u, 7u, 8u)))) {
      assert(prev_item < tuple_item)
      assert(prev_index > index)
      assert(index + tuple_item == 8u)
      prev_item: uint64 = tuple_item
      prev_index: uint64 = index
    }
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}