contract test_cases.reversed_iteration.contract.MyContract:
    program approval:
        subroutine test_cases.reversed_iteration.contract.MyContract.approval_program() -> uint64:
            block@0: // L7
                (assert 1u) // Step cannot be zero
                let should_loop%0#0: uint64 = (< 0u 0u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L9
                let range_length%1#0: uint64 = (- 0u 0u)
                let range_mod_step%2#0: uint64 = (% range_length%1#0 1u)
                let range_mod_step_not_zero%3#0: uint64 = (!= range_mod_step%2#0 0u)
                let range_floor_div_step%4#0: uint64 = (/ range_length%1#0 1u)
                let iteration_count%5#0: uint64 = (+ range_floor_div_step%4#0 range_mod_step_not_zero%3#0)
                let iteration_count_minus_one%6#0: uint64 = (- iteration_count%5#0 1u)
                let range_delta%7#0: uint64 = (* 1u iteration_count_minus_one%6#0)
                let stop%8#0: uint64 = 0u
                let start%9#0: uint64 = (+ 0u range_delta%7#0)
                let range_item%10#0: uint64 = start%9#0
                goto block@2
            block@2: // for_header_L9
                let continue_looping%11#0: uint64 = (>= range_item%10#0 stop%8#0)
                goto continue_looping%11#0 ? block@3 : block@6
            block@3: // for_body_L9
                let i#0: uint64 = range_item%10#0
                let tmp%12#0: bytes = (itob i#0)
                (log tmp%12#0)
                goto block@4
            block@4: // for_footer_L9
                let continue_looping%13#0: uint64 = (> range_item%10#0 stop%8#0)
                goto continue_looping%13#0 ? block@5 : block@6
            block@5: // for_increment_L9
                let range_item%10#0: uint64 = (- range_item%10#0 1u)
                goto block@3
            block@6: // after_for_L9
                let item_index_internal%14#0: uint64 = 0u
                let reverse_index_internal%15#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L11
                let continue_looping%16#0: uint64 = (< item_index_internal%14#0 0u)
                goto continue_looping%16#0 ? block@8 : block@10
            block@8: // for_body_L11
                let reverse_index_internal%15#0: uint64 = (- reverse_index_internal%15#0 1u)
                let item_index%17#0: uint64 = (* reverse_index_internal%15#0 1u)
                let x#0: bytes = (extract3 0x item_index%17#0 1u)
                (log x#0)
                goto block@9
            block@9: // for_footer_L11
                let item_index_internal%14#0: uint64 = (+ item_index_internal%14#0 1u)
                goto block@7
            block@10: // after_for_L11
                let array_data%18#0: bytes = 0x
                let array_data%18#0: bytes = (concat array_data%18#0 0x00)
                let array_data%18#0: bytes = (concat array_data%18#0 0x00)
                let array_data%18#0: bytes = (concat array_data%18#0 0x00)
                let array_data%18#0: bytes = (concat array_data%18#0 0x00)
                let test_array#0: bytes = array_data%18#0
                (assert 1u) // Step cannot be zero
                let should_loop%19#0: uint64 = (< 0u 4u)
                let test_array#14: bytes = test_array#0
                goto should_loop%19#0 ? block@11 : block@16
            block@11: // for_preamble_L16
                let range_length%20#0: uint64 = (- 4u 0u)
                let range_mod_step%21#0: uint64 = (% range_length%20#0 1u)
                let range_mod_step_not_zero%22#0: uint64 = (!= range_mod_step%21#0 0u)
                let range_floor_div_step%23#0: uint64 = (/ range_length%20#0 1u)
                let iteration_count%24#0: uint64 = (+ range_floor_div_step%23#0 range_mod_step_not_zero%22#0)
                let iteration_count_minus_one%25#0: uint64 = (- iteration_count%24#0 1u)
                let range_delta%26#0: uint64 = (* 1u iteration_count_minus_one%25#0)
                let stop%27#0: uint64 = 0u
                let start%28#0: uint64 = (+ 0u range_delta%26#0)
                let range_item%29#0: uint64 = start%28#0
                let range_index%30#0: uint64 = 0u
                goto block@12
            block@12: // for_header_L16
                let continue_looping%31#0: uint64 = (>= range_item%29#0 stop%27#0)
                let test_array#14: bytes = test_array#0
                goto continue_looping%31#0 ? block@13 : block@16
            block@13: // for_body_L16
                let item#0: uint64 = range_item%29#0
                let index#0: uint64 = range_index%30#0
                let val_as_bytes%32#0: bytes = (itob item#0)
                let assigned_value%33#0: bytes = ((extract 7 1) val_as_bytes%32#0)
                let array_length%34#0: uint64 = 4u
                let index_is_in_bounds%35#0: uint64 = (< index#0 array_length%34#0)
                (assert index_is_in_bounds%35#0) // Index access is out of bounds
                let write_offset%36#0: uint64 = (* index#0 1u)
                let updated_target%37#0: bytes = (replace3 test_array#0 write_offset%36#0 assigned_value%33#0)
                let test_array#0: bytes = updated_target%37#0
                goto block@14
            block@14: // for_footer_L16
                let continue_looping%38#0: uint64 = (> range_item%29#0 stop%27#0)
                let test_array#14: bytes = test_array#0
                goto continue_looping%38#0 ? block@15 : block@16
            block@15: // for_increment_L16
                let range_item%29#0: uint64 = (- range_item%29#0 1u)
                let range_index%30#0: uint64 = (+ range_index%30#0 1u)
                goto block@13
            block@16: // after_for_L16
                let test_array#0: bytes = test_array#14
                let tmp%39#0: uint64 = (== test_array#0 0x03020100)
                (assert tmp%39#0)
                (assert 1u) // Step cannot be zero
                let should_loop%40#0: uint64 = (< 4u 8u)
                let test_array#14: bytes = test_array#0
                goto should_loop%40#0 ? block@17 : block@24
            block@17: // for_preamble_L21
                let range_length%41#0: uint64 = (- 8u 4u)
                let range_mod_step%42#0: uint64 = (% range_length%41#0 1u)
                let range_mod_step_not_zero%43#0: uint64 = (!= range_mod_step%42#0 0u)
                let range_floor_div_step%44#0: uint64 = (/ range_length%41#0 1u)
                let iteration_count%45#0: uint64 = (+ range_floor_div_step%44#0 range_mod_step_not_zero%43#0)
                let iteration_count_minus_one%46#0: uint64 = (- iteration_count%45#0 1u)
                let range_item%47#0: uint64 = 4u
                let range_index%48#0: uint64 = 0u
                goto block@18
            block@18: // for_header_L21
                let continue_looping%49#0: uint64 = (< range_item%47#0 8u)
                let test_array#14: bytes = test_array#0
                goto continue_looping%49#0 ? block@19 : block@24
            block@19: // for_body_L21
                let item#0: uint64 = range_item%47#0
                let next_index%50#0: uint64 = (- iteration_count_minus_one%46#0 range_index%48#0)
                let index#0: uint64 = next_index%50#0
                let val_as_bytes%51#0: bytes = (itob item#0)
                let assigned_value%52#0: bytes = ((extract 7 1) val_as_bytes%51#0)
                let array_length%53#0: uint64 = 4u
                let index_is_in_bounds%54#0: uint64 = (< index#0 array_length%53#0)
                (assert index_is_in_bounds%54#0) // Index access is out of bounds
                let write_offset%55#0: uint64 = (* index#0 1u)
                let updated_target%56#0: bytes = (replace3 test_array#0 write_offset%55#0 assigned_value%52#0)
                let test_array#0: bytes = updated_target%56#0
                let tmp%57#0: uint64 = (== index#0 2u)
                goto tmp%57#0 ? block@20 : block@21
            block@20: // if_body_L23
                let test_array#14: bytes = test_array#0
                goto block@24
            block@21: // after_if_else_L23
                goto block@22
            block@22: // for_footer_L21
                goto block@23
            block@23: // for_increment_L21
                let range_item%47#0: uint64 = (+ range_item%47#0 1u)
                let range_index%48#0: uint64 = (+ range_index%48#0 1u)
                goto block@18
            block@24: // after_for_L21
                let test_array#0: bytes = test_array#14
                let tmp%58#0: uint64 = (== test_array#0 0x03020504)
                (assert tmp%58#0)
                let array_data%59#0: bytes = 0x
                let next_offset%60#0: uint64 = 6u
                let value_as_bytes%61#0: bytes = (itob next_offset%60#0)
                let value_as_uint16%62#0: bytes = ((extract 6 2) value_as_bytes%61#0)
                let array_data%59#0: bytes = (concat array_data%59#0 value_as_uint16%62#0)
                let element_length%63#0: uint64 = (len "\x00\x01a")
                let next_offset%60#0: uint64 = (+ next_offset%60#0 element_length%63#0)
                let value_as_bytes%64#0: bytes = (itob next_offset%60#0)
                let value_as_uint16%65#0: bytes = ((extract 6 2) value_as_bytes%64#0)
                let array_data%59#0: bytes = (concat array_data%59#0 value_as_uint16%65#0)
                let element_length%66#0: uint64 = (len "\x00\x01b")
                let next_offset%60#0: uint64 = (+ next_offset%60#0 element_length%66#0)
                let value_as_bytes%67#0: bytes = (itob next_offset%60#0)
                let value_as_uint16%68#0: bytes = ((extract 6 2) value_as_bytes%67#0)
                let array_data%59#0: bytes = (concat array_data%59#0 value_as_uint16%68#0)
                let element_length%69#0: uint64 = (len "\x00\x01c")
                let next_offset%60#0: uint64 = (+ next_offset%60#0 element_length%69#0)
                let array_data%59#0: bytes = (concat array_data%59#0 "\x00\x01a")
                let array_data%59#0: bytes = (concat array_data%59#0 "\x00\x01b")
                let array_data%59#0: bytes = (concat array_data%59#0 "\x00\x01c")
                let some_strings#0: bytes = array_data%59#0
                let some_string_reversed#0: bytes = "\x00\x00"
                let item_index_internal%70#0: uint64 = 0u
                let reverse_index_internal%71#0: uint64 = 3u
                goto block@25
            block@25: // for_header_L30
                let continue_looping%72#0: uint64 = (< item_index_internal%70#0 3u)
                goto continue_looping%72#0 ? block@26 : block@28
            block@26: // for_body_L30
                let reverse_index_internal%71#0: uint64 = (- reverse_index_internal%71#0 1u)
                let item_index_index%73#0: uint64 = (* reverse_index_internal%71#0 2u)
                let item_index%74#0: uint64 = (extract_uint16 some_strings#0 item_index_index%73#0)
                let item_length%75#0: uint64 = (extract_uint16 some_strings#0 item_index%74#0)
                let item_length_plus_2%76#0: uint64 = (+ item_length%75#0 2u)
                let str_item#0: bytes = (extract3 some_strings#0 item_index%74#0 item_length_plus_2%76#0)
                let array_length%77#0: uint64 = (extract_uint16 str_item#0 0u)
                let data%78#0: bytes = ((extract 2 0) str_item#0)
                let concat_result%79#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(some_string_reversed#0, data%78#0, array_length%77#0)
                let some_string_reversed#0: bytes = concat_result%79#0
                goto block@27
            block@27: // for_footer_L30
                let item_index_internal%70#0: uint64 = (+ item_index_internal%70#0 1u)
                goto block@25
            block@28: // after_for_L30
                let tmp%80#0: uint64 = (== some_string_reversed#0 "\x00\x03cba")
                (assert tmp%80#0)
                let bytes_reversed_with_index#0: bytes = ""
                let bytes_length%81#0: uint64 = (len "HELLO")
                let item_index_internal%82#0: uint64 = 0u
                let reverse_index_internal%83#0: uint64 = bytes_length%81#0
                goto block@29
            block@29: // for_header_L36
                let continue_looping%84#0: uint64 = (< item_index_internal%82#0 bytes_length%81#0)
                goto continue_looping%84#0 ? block@30 : block@35
            block@30: // for_body_L36
                let reverse_index_internal%83#0: uint64 = (- reverse_index_internal%83#0 1u)
                let bytes_item#0: bytes = (extract3 "HELLO" reverse_index_internal%83#0 1u)
                let index#0: uint64 = reverse_index_internal%83#0
                let tmp%85#0: bytes = (itob index#0)
                let tmp%86#0: bytes = (itob index#0)
                let awst_tmp%87#0: uint64 = (len tmp%86#0)
                let tmp%88#0: uint64 = (< 1u awst_tmp%87#0)
                goto tmp%88#0 ? block@31 : block@32
            block@31: // ternary_true_L37
                let ternary_result%89#0: uint64 = (- awst_tmp%87#0 1u)
                goto block@33
            block@32: // ternary_false_L37
                let ternary_result%89#0: uint64 = 0u
                goto block@33
            block@33: // ternary_merge_L37
                let base_length%90#0: uint64 = (len tmp%85#0)
                let tmp%91#0: bytes = (substring3 tmp%85#0 ternary_result%89#0 base_length%90#0)
                let tmp%92#0: bytes = (concat tmp%91#0 bytes_item#0)
                let bytes_reversed_with_index#0: bytes = (concat bytes_reversed_with_index#0 tmp%92#0)
                goto block@34
            block@34: // for_footer_L36
                let item_index_internal%82#0: uint64 = (+ item_index_internal%82#0 1u)
                goto block@29
            block@35: // after_for_L36
                let tmp%93#0: uint64 = (== bytes_reversed_with_index#0 "\x04O\x03L\x02L\x01E\x00H")
                (assert tmp%93#0)
                goto block@36
            block@36: // for_header_3_L41
                let tuple_index%94#0: uint64 = 0u
                let tuple_item#0: uint64 = 3u
                goto block@40
            block@37: // for_header_2_L41
                let tuple_item#0: uint64 = 2u
                let tuple_index%94#0: uint64 = tuple_index%94#5
                goto block@40
            block@38: // for_header_1_L41
                let tuple_item#0: uint64 = 1u
                let tuple_index%94#0: uint64 = tuple_index%94#5
                goto block@40
            block@39: // for_header_0_L41
                let tuple_item#0: uint64 = 0u
                let tuple_index%94#0: uint64 = tuple_index%94#5
                goto block@40
            block@40: // for_body_L41
                let index#0: uint64 = tuple_index%94#0
                let tmp%95#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%96#0: uint64 = (== tmp%95#0 3u)
                (assert tmp%96#0)
                goto block@41
            block@41: // for_footer_L41
                let tuple_index%94#5: uint64 = (+ tuple_index%94#0 1u)
                goto [block@37, block@38, block@39, ...block@42][tuple_index%94#0]
            block@42: // after_for_L41
                let prev_item#0: uint64 = 0u
                let prev_index#0: uint64 = 99u
                goto block@43
            block@43: // for_header_0_L56
                let tuple_index%97#0: uint64 = 0u
                let tuple_item#0: uint64 = 5u
                goto block@47
            block@44: // for_header_1_L56
                let tuple_item#0: uint64 = 6u
                let tuple_index%97#0: uint64 = tuple_index%97#5
                goto block@47
            block@45: // for_header_2_L56
                let tuple_item#0: uint64 = 7u
                let tuple_index%97#0: uint64 = tuple_index%97#5
                goto block@47
            block@46: // for_header_3_L56
                let tuple_item#0: uint64 = 8u
                let tuple_index%97#0: uint64 = tuple_index%97#5
                goto block@47
            block@47: // for_body_L56
                let reversed_index%98#0: uint64 = (- 3u tuple_index%97#0)
                let index#0: uint64 = reversed_index%98#0
                let tmp%99#0: uint64 = (< prev_item#0 tuple_item#0)
                (assert tmp%99#0)
                let tmp%100#0: uint64 = (> prev_index#0 index#0)
                (assert tmp%100#0)
                let tmp%101#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%102#0: uint64 = (== tmp%101#0 8u)
                (assert tmp%102#0)
                let prev_item#0: uint64 = tuple_item#0
                let prev_index#0: uint64 = index#0
                goto block@48
            block@48: // for_footer_L56
                let tuple_index%97#5: uint64 = (+ tuple_index%97#0 1u)
                goto [block@44, block@45, block@46, ...block@49][tuple_index%97#0]
            block@49: // after_for_L56
                return 1u
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_fixed_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L190
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let tmp%0#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%1#0: bytes = (itob tmp%0#0)
                let tmp%2#0: bytes = (substring3 tmp%1#0 6u 8u)
                let source#0: bytes = (replace3 source#0 0u tmp%2#0)
                let source#0: bytes = (concat source#0 new_items_bytes#0)
                return source#0
    
    program clear-state:
        subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L77
                return 1u