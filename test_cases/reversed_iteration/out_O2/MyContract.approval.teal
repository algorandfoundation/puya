#pragma version 10

test_cases.reversed_iteration.contract.MyContract.approval_program:
    int 0
    dupn 6
    byte ""
    dupn 12
    int 0
    int 0

main_for_header@7:
    dig 1
    int 0
    <
    bz main_after_for@10
    dup
    int 1
    -
    dup
    bury 2
    byte 0x
    swap
    int 1
    extract3
    log
    dig 1
    int 1
    +
    bury 2
    b main_for_header@7

main_after_for@10:
    byte 0x00000000
    bury 18
    int 3
    int 0
    bury 15
    bury 13

main_for_body@13:
    dig 12
    dup
    itob
    extract 7 1
    dig 15
    dup
    int 4
    <
    assert // Index access is out of bounds
    dig 20
    swap
    uncover 2
    replace3
    bury 19
    int 0
    >
    bz main_after_for@16
    dig 12
    int 1
    -
    dig 14
    int 1
    +
    bury 15
    bury 13
    b main_for_body@13

main_after_for@16:
    dig 17
    byte 0x03020100
    ==
    assert
    int 4
    int 0
    bury 10
    bury 13

main_for_header@18:
    dig 12
    int 8
    <
    dig 18
    bury 18
    bz main_after_for@24
    int 3
    dig 9
    -
    dig 13
    itob
    extract 7 1
    swap
    dup
    int 4
    <
    assert // Index access is out of bounds
    dig 19
    dig 1
    uncover 3
    replace3
    bury 19
    int 2
    ==
    bz main_after_if_else@21
    dig 17
    bury 17
    b main_after_for@24

main_after_if_else@21:
    dig 12
    int 1
    +
    dig 9
    int 1
    +
    bury 10
    bury 13
    b main_for_header@18

main_after_for@24:
    dig 16
    byte 0x03020504
    ==
    assert
    int 6
    itob
    extract 6 2
    int 9
    itob
    extract 6 2
    concat
    int 12
    itob
    extract 6 2
    concat
    byte "\x00\x01a"
    concat
    byte "\x00\x01b"
    concat
    byte "\x00\x01c"
    concat
    bury 19
    byte "\x00\x00"
    bury 20
    int 0
    bury 12
    int 3
    bury 8

main_for_header@25:
    dig 11
    int 3
    <
    bz main_after_for@28
    dig 7
    int 1
    -
    dup
    bury 9
    int 2
    *
    dig 19
    dup
    uncover 2
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    dig 20
    extract 2 0
    swap
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    bury 20
    dig 11
    int 1
    +
    bury 12
    b main_for_header@25

main_after_for@28:
    dig 19
    byte "\x00\x03cba"
    ==
    assert
    byte ""
    bury 21
    int 0
    bury 11
    int 5
    bury 7

main_for_header@29:
    dig 10
    int 5
    <
    bz main_after_for@35
    dig 6
    int 1
    -
    dup
    bury 15
    byte "HELLO"
    dig 1
    int 1
    extract3
    bury 23
    itob
    dup
    bury 17
    len
    dup
    bury 16
    int 1
    >
    bz main_ternary_false@32
    dig 14
    int 1
    -
    b main_ternary_merge@33

main_ternary_false@32:
    int 0

main_ternary_merge@33:
    dig 16
    swap
    dig 16
    substring3
    dig 22
    concat
    dig 21
    swap
    concat
    bury 21
    dig 10
    int 1
    +
    bury 11
    dig 13
    bury 7
    b main_for_header@29

main_after_for@35:
    dig 20
    byte "\x04O\x03L\x02L\x01E\x00H"
    ==
    assert
    int 0
    int 3
    bury 5
    bury 14
    b main_for_body@40

main_for_header_2@37:
    int 2
    bury 4
    dig 4
    bury 14
    b main_for_body@40

main_for_header_1@38:
    int 1
    bury 4
    dig 4
    bury 14
    b main_for_body@40

main_for_header_0@39:
    int 0
    bury 4
    dig 4
    bury 14

main_for_body@40:
    dig 13
    dup
    dig 5
    +
    int 3
    ==
    assert
    dup
    int 1
    +
    bury 6
    switch main_for_header_2@37 main_for_header_1@38 main_for_header_0@39
    int 0
    int 99
    bury 11
    int 0
    swap
    int 5
    bury 6
    b main_for_body@47

main_for_header_1@44:
    int 6
    bury 4
    dig 13
    bury 10
    dig 5
    dig 3
    b main_for_body@47

main_for_header_2@45:
    int 7
    bury 4
    dig 13
    bury 10
    dig 5
    dig 3
    b main_for_body@47

main_for_header_3@46:
    int 8
    bury 4
    dig 13
    bury 10
    dig 5
    dig 3

main_for_body@47:
    dig 5
    dup
    bury 6
    int 3
    uncover 3
    dup
    cover 3
    -
    dup
    cover 2
    bury 18
    uncover 3
    dig 1
    <
    assert
    dig 12
    dig 2
    >
    assert
    +
    int 8
    ==
    assert
    dup
    int 1
    +
    bury 7
    switch main_for_header_1@44 main_for_header_2@45 main_for_header_3@46
    int 1
    return
