contract test_cases.reversed_iteration.contract.MyContract:
    program approval:
        subroutine test_cases.reversed_iteration.contract.MyContract.approval_program() -> bool:
            block@0: // L7
                (assert 1u) // Step cannot be zero
                let should_loop%0#0: bool = (< 0u 0u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L8
                let range_length%0#0: uint64 = (- 0u 0u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 1u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 1u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_delta%0#0: uint64 = (* 1u iteration_count_minus_one%0#0)
                let start%0#0: uint64 = (+ 0u range_delta%0#0)
                let range_item%0#0: uint64 = start%0#0
                goto block@2
            block@2: // for_header_L8
                let continue_looping%0#0: bool = (>= range_item%0#0 0u)
                goto continue_looping%0#0 ? block@3 : block@6
            block@3: // for_body_L8
                let i#0: uint64 = range_item%0#0
                let tmp%0#0: bytes = (itob i#0)
                (log tmp%0#0)
                goto block@4
            block@4: // for_footer_L8
                let continue_looping%1#0: bool = (> range_item%0#0 0u)
                goto continue_looping%1#0 ? block@5 : block@6
            block@5: // for_increment_L8
                let range_item%0#0: uint64 = (- range_item%0#0 1u)
                goto block@3
            block@6: // after_for_L8
                let item_index_internal%0#0: uint64 = 0u
                let reverse_index_internal%0#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L11
                let continue_looping%2#0: bool = (< item_index_internal%0#0 0u)
                goto continue_looping%2#0 ? block@8 : block@10
            block@8: // for_body_L11
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let item_offset%0#0: uint64 = (* reverse_index_internal%0#0 1u)
                let x#0: bytes = (extract3 0x item_offset%0#0 1u) // on error: Index access is out of bounds
                (log x#0)
                goto block@9
            block@9: // for_footer_L11
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@7
            block@10: // after_for_L11
                let array_data%0#1: bytes = (concat 0x 0x00)
                let array_data%0#1: bytes = (concat array_data%0#1 0x00)
                let array_data%0#1: bytes = (concat array_data%0#1 0x00)
                let array_data%0#1: bytes = (concat array_data%0#1 0x00)
                let test_array#0: bytes = array_data%0#1
                (assert 1u) // Step cannot be zero
                let should_loop%1#0: bool = (< 0u 4u)
                let test_array#14: bytes = test_array#0
                goto should_loop%1#0 ? block@11 : block@16
            block@11: // for_preamble_L15
                let range_length%1#0: uint64 = (- 4u 0u)
                let range_mod_step%1#0: uint64 = (% range_length%1#0 1u)
                let range_mod_step_not_zero%1#0: bool = (!= range_mod_step%1#0 0u)
                let range_floor_div_step%1#0: uint64 = (/ range_length%1#0 1u)
                let iteration_count%1#0: uint64 = (+ range_floor_div_step%1#0 range_mod_step_not_zero%1#0)
                let iteration_count_minus_one%1#0: uint64 = (- iteration_count%1#0 1u)
                let range_delta%1#0: uint64 = (* 1u iteration_count_minus_one%1#0)
                let start%1#0: uint64 = (+ 0u range_delta%1#0)
                let range_item%1#0: uint64 = start%1#0
                let range_index%0#0: uint64 = 0u
                goto block@12
            block@12: // for_header_L15
                let continue_looping%3#0: bool = (>= range_item%1#0 0u)
                let test_array#14: bytes = test_array#0
                let test_array#0: bytes = test_array#14
                goto continue_looping%3#0 ? block@13 : block@16
            block@13: // for_body_L15
                let item#0: uint64 = range_item%1#0
                let index#0: uint64 = range_index%0#0
                let val_as_bytes%0#0: bytes = (itob item#0)
                let assigned_value%0#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let index_is_in_bounds%0#0: bool = (< index#0 4u)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let write_offset%0#0: uint64 = (* index#0 1u)
                let updated_target%0#0: bytes = (replace3 test_array#0 write_offset%0#0 assigned_value%0#0)
                let test_array#0: bytes = updated_target%0#0
                goto block@14
            block@14: // for_footer_L15
                let continue_looping%4#0: bool = (> range_item%1#0 0u)
                let test_array#14: bytes = test_array#0
                goto continue_looping%4#0 ? block@15 : block@16
            block@15: // for_increment_L15
                let range_item%1#0: uint64 = (- range_item%1#0 1u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@13
            block@16: // after_for_L15
                let test_array#0: bytes = test_array#14
                let tmp%1#0: bool = (== test_array#0 0x03020100)
                (assert tmp%1#0)
                (assert 1u) // Step cannot be zero
                let should_loop%2#0: bool = (< 4u 8u)
                let test_array#14: bytes = test_array#0
                goto should_loop%2#0 ? block@17 : block@24
            block@17: // for_preamble_L20
                let range_length%2#0: uint64 = (- 8u 4u)
                let range_mod_step%2#0: uint64 = (% range_length%2#0 1u)
                let range_mod_step_not_zero%2#0: bool = (!= range_mod_step%2#0 0u)
                let range_floor_div_step%2#0: uint64 = (/ range_length%2#0 1u)
                let iteration_count%2#0: uint64 = (+ range_floor_div_step%2#0 range_mod_step_not_zero%2#0)
                let iteration_count_minus_one%2#0: uint64 = (- iteration_count%2#0 1u)
                let range_item%2#0: uint64 = 4u
                let range_index%1#0: uint64 = 0u
                goto block@18
            block@18: // for_header_L20
                let continue_looping%5#0: bool = (< range_item%2#0 8u)
                let test_array#14: bytes = test_array#0
                goto continue_looping%5#0 ? block@19 : block@24
            block@19: // for_body_L20
                let item#0: uint64 = range_item%2#0
                let next_index%0#0: uint64 = (- iteration_count_minus_one%2#0 range_index%1#0)
                let index#0: uint64 = next_index%0#0
                let val_as_bytes%1#0: bytes = (itob item#0)
                let assigned_value%1#0: bytes = ((extract 7 1) val_as_bytes%1#0)
                let index_is_in_bounds%1#0: bool = (< index#0 4u)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let write_offset%1#0: uint64 = (* index#0 1u)
                let updated_target%1#0: bytes = (replace3 test_array#0 write_offset%1#0 assigned_value%1#0)
                let test_array#0: bytes = updated_target%1#0
                let tmp%2#0: bool = (== index#0 2u)
                goto tmp%2#0 ? block@20 : block@21
            block@20: // if_body_L23
                let test_array#14: bytes = test_array#0
                goto block@24
            block@21: // after_if_else_L23
                goto block@22
            block@22: // for_footer_L20
                goto block@23
            block@23: // for_increment_L20
                let range_item%2#0: uint64 = (+ range_item%2#0 1u)
                let range_index%1#0: uint64 = (+ range_index%1#0 1u)
                goto block@18
            block@24: // after_for_L20
                let test_array#0: bytes = test_array#14
                let tmp%3#0: bool = (== test_array#0 0x03020504)
                (assert tmp%3#0)
                let value_as_bytes%0#0: bytes = (itob 6u)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let array_data%1#1: bytes = (concat 0x value_as_uint16%0#0)
                let element_length%0#0: uint64 = (len "\x00\x01a")
                let next_offset%0#1: uint64 = (+ 6u element_length%0#0)
                let value_as_bytes%1#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%1#0)
                let element_length%1#0: uint64 = (len "\x00\x01b")
                let next_offset%0#1: uint64 = (+ next_offset%0#1 element_length%1#0)
                let value_as_bytes%2#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%2#0)
                let array_data%1#1: bytes = (concat array_data%1#1 "\x00\x01a")
                let array_data%1#1: bytes = (concat array_data%1#1 "\x00\x01b")
                let array_data%1#1: bytes = (concat array_data%1#1 "\x00\x01c")
                let some_strings#0: bytes = array_data%1#1
                let some_string_reversed#0: bytes = "\x00\x00"
                let item_index_internal%1#0: uint64 = 0u
                let reverse_index_internal%1#0: uint64 = 3u
                goto block@25
            block@25: // for_header_L30
                let continue_looping%6#0: bool = (< item_index_internal%1#0 3u)
                goto continue_looping%6#0 ? block@26 : block@28
            block@26: // for_body_L30
                let reverse_index_internal%1#0: uint64 = (- reverse_index_internal%1#0 1u)
                let array_head_and_tail%1#0: bytes = some_strings#0
                let item_offset_offset%0#0: uint64 = (* reverse_index_internal%1#0 2u)
                let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%0#0)
                let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset%1#0)
                let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 1u)
                let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
                let str_item#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 item_head_tail_length%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) some_string_reversed#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) str_item#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let some_string_reversed#0: bytes = concat_result%0#0
                goto block@27
            block@27: // for_footer_L30
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@25
            block@28: // after_for_L30
                let tmp%4#0: bool = (== some_string_reversed#0 "\x00\x03cba")
                (assert tmp%4#0)
                let bytes_reversed_with_index#0: bytes = ""
                let bytes_length%0#0: uint64 = (len "HELLO")
                let item_index_internal%2#0: uint64 = 0u
                let reverse_index_internal%2#0: uint64 = bytes_length%0#0
                goto block@29
            block@29: // for_header_L36
                let continue_looping%7#0: bool = (< item_index_internal%2#0 bytes_length%0#0)
                goto continue_looping%7#0 ? block@30 : block@32
            block@30: // for_body_L36
                let reverse_index_internal%2#0: uint64 = (- reverse_index_internal%2#0 1u)
                let bytes_item#0: bytes = (extract3 "HELLO" reverse_index_internal%2#0 1u)
                let index#0: uint64 = reverse_index_internal%2#0
                let tmp%5#0: bytes = (itob index#0)
                let length%0#0: uint64 = (len tmp%5#0)
                let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
                let bounded_offset%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
                let bounded_index%0#0: uint64 = (- length%0#0 bounded_offset%0#0)
                let tmp%6#0: bytes = (substring3 tmp%5#0 bounded_index%0#0 length%0#0)
                let tmp%7#0: bytes = (concat tmp%6#0 bytes_item#0)
                let bytes_reversed_with_index#0: bytes = (concat bytes_reversed_with_index#0 tmp%7#0)
                goto block@31
            block@31: // for_footer_L36
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                goto block@29
            block@32: // after_for_L36
                let tmp%8#0: bool = (== bytes_reversed_with_index#0 "\x04O\x03L\x02L\x01E\x00H")
                (assert tmp%8#0)
                goto block@33
            block@33: // for_header_3_L40
                let tuple_index%0#0: uint64 = 0u
                let tuple_item#0: uint64 = 3u
                goto block@37
            block@34: // for_header_2_L40
                let tuple_item#0: uint64 = 2u
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@37
            block@35: // for_header_1_L40
                let tuple_item#0: uint64 = 1u
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@37
            block@36: // for_header_0_L40
                let tuple_item#0: uint64 = 0u
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@37
            block@37: // for_body_L40
                let index#0: uint64 = tuple_index%0#0
                let tmp%9#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%10#0: bool = (== tmp%9#0 3u)
                (assert tmp%10#0)
                goto block@38
            block@38: // for_footer_L40
                let tuple_index%0#5: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@34, block@35, block@36][tuple_index%0#0] else goto block@39
            block@39: // after_for_L40
                let prev_item#0: uint64 = 0u
                let prev_index#0: uint64 = 99u
                goto block@40
            block@40: // for_header_0_L56
                let tuple_index%1#0: uint64 = 0u
                let tuple_item#0: uint64 = 5u
                goto block@44
            block@41: // for_header_1_L56
                let tuple_item#0: uint64 = 6u
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@42: // for_header_2_L56
                let tuple_item#0: uint64 = 7u
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@43: // for_header_3_L56
                let tuple_item#0: uint64 = 8u
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@44
            block@44: // for_body_L56
                let reversed_index%0#0: uint64 = (- 3u tuple_index%1#0)
                let index#0: uint64 = reversed_index%0#0
                let tmp%11#0: bool = (< prev_item#0 tuple_item#0)
                (assert tmp%11#0)
                let tmp%12#0: bool = (> prev_index#0 index#0)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (+ index#0 tuple_item#0)
                let tmp%14#0: bool = (== tmp%13#0 8u)
                (assert tmp%14#0)
                let prev_item#0: uint64 = tuple_item#0
                let prev_index#0: uint64 = index#0
                goto block@45
            block@45: // for_footer_L56
                let tuple_index%1#5: uint64 = (+ tuple_index%1#0 1u)
                goto_nth [block@41, block@42, block@43][tuple_index%1#0] else goto block@46
            block@46: // after_for_L56
                return 1u
    
    program clear-state:
        subroutine test_cases.reversed_iteration.contract.MyContract.clear_state_program() -> bool:
            block@0: // L77
                return 1u