debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['less_simple'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.less_simple.contract.MyContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.less_simple.contract.MyContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Looking for 'sum_of_evens' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sum_of_evens#1: uint64 = undefined while trying to resolve 'sum_of_evens' in block@1
debug: Terminated block@7
debug: Sealing block@8
debug: Looking for 'product_of_odds' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let product_of_odds#1: uint64 = undefined while trying to resolve 'product_of_odds' in block@1
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@12
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7) in block@7
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@11
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9) in block@9
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) in block@10
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1 in current definition for 1 blocks
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) in block@11
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3
debug: Added a#4 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#4 <- block@12) in block@12
debug: Added sum_of_evens#0 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0) in block@0
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3) in block@3
debug: Created Phi assignment: let sum_of_evens#3: uint64 = undefined while trying to resolve 'sum_of_evens' in block@12
debug: Added sum_of_evens#2 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7) in block@7
debug: Created Phi assignment: let sum_of_evens#4: uint64 = undefined while trying to resolve 'sum_of_evens' in block@11
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9) in block@9
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) in block@10
debug: Replacing trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10)
debug: Replaced trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1 in current definition for 1 blocks
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7, sum_of_evens#1 <- block@11) in block@11
debug: Added sum_of_evens#3 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3, sum_of_evens#3 <- block@12) in block@12
debug: Added product_of_odds#0 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0) in block@0
debug: Added product_of_odds#1 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3) in block@3
debug: Created Phi assignment: let product_of_odds#4: uint64 = undefined while trying to resolve 'product_of_odds' in block@12
debug: Added product_of_odds#1 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7) in block@7
debug: Created Phi assignment: let product_of_odds#5: uint64 = undefined while trying to resolve 'product_of_odds' in block@11
debug: Added product_of_odds#2 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9) in block@9
debug: Added product_of_odds#3 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9, product_of_odds#3 <- block@10) in block@10
debug: Added product_of_odds#5 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7, product_of_odds#5 <- block@11) in block@11
debug: Added product_of_odds#4 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3, product_of_odds#4 <- block@12) in block@12
debug: Sealing block@13
debug: Created Phi assignment: let product_of_odds#6: uint64 = undefined while trying to resolve 'product_of_odds' in block@13
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1) in block@1
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1
debug: Deleting Phi assignment: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5)
debug: Replaced trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1 in current definition for 1 blocks
debug: Created Phi assignment: let sum_of_evens#5: uint64 = undefined while trying to resolve 'sum_of_evens' in block@13
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1) in block@1
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5)
debug: Replaced trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1 in current definition for 1 blocks
debug: Terminated block@13
debug: Building IR for function test_cases.less_simple.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Looking for 'sum_of_squares' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sum_of_squares#1: uint64 = undefined while trying to resolve 'sum_of_squares' in block@1
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let sum_of_squares#3: uint64 = undefined while trying to resolve 'sum_of_squares' in block@4
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2) in block@2
debug: Added sum_of_squares#2 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2, sum_of_squares#2 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@1
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@7) in block@7
debug: Added sum_of_squares#0 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0) in block@0
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0, sum_of_squares#3 <- block@7) in block@7
debug: Sealing block@8
debug: Created Phi assignment: let sum_of_squares#4: uint64 = undefined while trying to resolve 'sum_of_squares' in block@8
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1) in block@1
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1, sum_of_squares#3 <- block@5) in block@5
debug: Terminated block@8
debug: Building IR for function test_cases.less_simple.contract.MyContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Looking for 'sum_of_evens' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sum_of_evens#1: uint64 = undefined while trying to resolve 'sum_of_evens' in block@1
debug: Terminated block@7
debug: Sealing block@8
debug: Looking for 'product_of_odds' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let product_of_odds#1: uint64 = undefined while trying to resolve 'product_of_odds' in block@1
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@12
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7) in block@7
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@11
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9) in block@9
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) in block@10
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1 in current definition for 1 blocks
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) in block@11
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3
debug: Added a#4 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#4 <- block@12) in block@12
debug: Added sum_of_evens#0 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0) in block@0
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3) in block@3
debug: Created Phi assignment: let sum_of_evens#3: uint64 = undefined while trying to resolve 'sum_of_evens' in block@12
debug: Added sum_of_evens#2 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7) in block@7
debug: Created Phi assignment: let sum_of_evens#4: uint64 = undefined while trying to resolve 'sum_of_evens' in block@11
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9) in block@9
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) in block@10
debug: Replacing trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10)
debug: Replaced trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1 in current definition for 1 blocks
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7, sum_of_evens#1 <- block@11) in block@11
debug: Added sum_of_evens#3 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3, sum_of_evens#3 <- block@12) in block@12
debug: Added product_of_odds#0 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0) in block@0
debug: Added product_of_odds#1 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3) in block@3
debug: Created Phi assignment: let product_of_odds#4: uint64 = undefined while trying to resolve 'product_of_odds' in block@12
debug: Added product_of_odds#1 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7) in block@7
debug: Created Phi assignment: let product_of_odds#5: uint64 = undefined while trying to resolve 'product_of_odds' in block@11
debug: Added product_of_odds#2 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9) in block@9
debug: Added product_of_odds#3 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9, product_of_odds#3 <- block@10) in block@10
debug: Added product_of_odds#5 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7, product_of_odds#5 <- block@11) in block@11
debug: Added product_of_odds#4 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3, product_of_odds#4 <- block@12) in block@12
debug: Sealing block@13
debug: Created Phi assignment: let product_of_odds#6: uint64 = undefined while trying to resolve 'product_of_odds' in block@13
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1) in block@1
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1
debug: Deleting Phi assignment: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5)
debug: Replaced trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1 in current definition for 1 blocks
debug: Created Phi assignment: let sum_of_evens#5: uint64 = undefined while trying to resolve 'sum_of_evens' in block@13
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1) in block@1
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5)
debug: Replaced trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1 in current definition for 1 blocks
debug: Terminated block@13
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Building IR for function test_cases.less_simple.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Looking for 'sum_of_squares' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sum_of_squares#1: uint64 = undefined while trying to resolve 'sum_of_squares' in block@1
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let sum_of_squares#3: uint64 = undefined while trying to resolve 'sum_of_squares' in block@4
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2) in block@2
debug: Added sum_of_squares#2 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2, sum_of_squares#2 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@1
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@7) in block@7
debug: Added sum_of_squares#0 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0) in block@0
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0, sum_of_squares#3 <- block@7) in block@7
debug: Sealing block@8
debug: Created Phi assignment: let sum_of_squares#4: uint64 = undefined while trying to resolve 'sum_of_squares' in block@8
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1) in block@1
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1, sum_of_squares#3 <- block@5) in block@5
debug: Terminated block@8
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: removing unused subroutine test_cases.less_simple.contract.MyContract.clear_state_program
info: optimizing approval program of test_cases.less_simple.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#1, product_of_odds#2
debug: Copy propagation made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 0u) to (! tmp%1#0)
debug: Simplified (== tmp%3#0 0u) to (! tmp%3#0)
debug: Simplified (== tmp%5#0 0u) to (! tmp%5#0)
debug: Simplified (== product_of_odds#1 0u) to (! product_of_odds#1)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2 from goto tmp%2#0 ? block@3 : block@4 to goto tmp%1#0 ? block@4 : block@3
debug: simplified branch on !tmp%4#0 by swapping zero and non-zero targets
debug: simplified terminator of block@4 from goto tmp%4#0 ? block@5 : block@6 to goto tmp%3#0 ? block@6 : block@5
debug: simplified branch on !tmp%6#0 by swapping zero and non-zero targets
debug: simplified terminator of block@6 from goto tmp%6#0 ? block@7 : block@8 to goto tmp%5#0 ? block@8 : block@7
debug: simplified branch on !tmp%7#0 by swapping zero and non-zero targets
debug: simplified terminator of block@8 from goto tmp%7#0 ? block@9 : block@10 to goto product_of_odds#1 ? block@10 : block@9
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3 because it's used by phi nodes
debug: Removed empty block: block@5
debug: Not removing empty block block@9 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3 because it's used by phi nodes
debug: Not removing empty block block@9 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3 because it's used by phi nodes
debug: Not removing empty block block@9 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for test_cases.less_simple.contract.MyContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#8, a#1, a#4]
debug: Coalescing sum_of_evens#0 with [sum_of_evens#7, sum_of_evens#1, sum_of_evens#2, sum_of_evens#10, sum_of_evens#3]
debug: Coalescing product_of_odds#0 with [product_of_odds#9, product_of_odds#1, product_of_odds#14, product_of_odds#11, product_of_odds#3, product_of_odds#5, product_of_odds#4]
debug: Coalescing resulted in 54 replacement/s
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.approval_program
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: Performing post-SSA optimizations at level 2
debug: Removing jump block block@3
debug: Removing jump block block@11
debug: branching to block@3 will be replaced with block@1
debug: branching to block@11 will be replaced with block@12
debug: Output IR to less_simple/out_O2/MyContract.ir/MyContract.approval.0.destructured.ir
info: optimizing clear program of test_cases.less_simple.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@7 with block@6 in block@1
debug: Merged linear block@7 into block@6
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 2, ending loop
debug: Performing SSA IR destructuring for test_cases.less_simple.contract.MyContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing sum_of_squares#0 with [sum_of_squares#7, sum_of_squares#1, sum_of_squares#2, sum_of_squares#3, sum_of_squares#4]
debug: Coalescing sum_of_squares#10 with [sum_of_squares#13]
debug: Coalescing i#0 with [i#5, i#1, i#2]
debug: Coalescing resulted in 29 replacement/s
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.clear_state_program
debug: loc: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: pred: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: 
debug: to_do: i#0, sum_of_squares#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: loc: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: pred: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: 
debug: to_do: i#0, sum_of_squares#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: loc: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: pred: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: 
debug: to_do: i#0, sum_of_squares#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: Performing post-SSA optimizations at level 2
debug: Output IR to less_simple/out_O2/MyContract.ir/MyContract.clear.0.destructured.ir
debug: Inserted main_while_top@1.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_while_top@1.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_while_body@2.ops[3]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_while_body@2.ops[5]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_after_if_else@4.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_after_if_else@4.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_after_if_else@6.ops[3]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_after_if_else@6.ops[5]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_after_while@13.ops[3]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_after_while@13.ops[5]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Found 5 edge set/s for test_cases.less_simple.contract.MyContract.approval_program
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack entry: []
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack on first store: ['a#0', 'sum_of_evens#0', 'product_of_odds#0']
debug: Inserted main_for_header@1.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@1.ops[7]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_for_body@2.ops[2]: 'l-store-copy square_root#0 0'
debug: Replaced main_for_body@2.ops[4]: 'v-load square_root#0' with 'l-load square_root#0'
debug: Inserted main_for_body@2.ops[5]: 'l-store-copy square_root#0 0'
debug: Replaced main_for_body@2.ops[6]: 'v-load square_root#0' with 'l-load square_root#0'
debug: Inserted main_for_body@2.ops[8]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_for_body@2.ops[10]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_for_body@2.ops[13]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_for_body@2.ops[17]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_for_body@2.ops[1]: 'l-store-copy i#0 0'
debug: Replaced main_for_body@2.ops[12]: 'v-load i#0' with 'l-load i#0'
debug: Inserted main_if_body@3.ops[3]: 'l-store-copy sum_of_squares#0 0'
debug: Replaced main_if_body@3.ops[5]: 'v-load sum_of_squares#0' with 'l-load sum_of_squares#0'
debug: Inserted main_after_if_else@4.ops[1]: 'l-store-copy sum_of_squares#0 0'
debug: Replaced main_after_if_else@4.ops[3]: 'v-load sum_of_squares#0' with 'l-load sum_of_squares#0'
debug: Inserted main_after_if_else@4.ops[6]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_after_if_else@4.ops[8]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_after_for@8.ops[1]: 'l-store-copy sum_of_squares#0 0'
debug: Replaced main_after_for@8.ops[3]: 'v-load sum_of_squares#0' with 'l-load sum_of_squares#0'
debug: Found 4 edge set/s for test_cases.less_simple.contract.MyContract.clear_state_program
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack entry: ['sum_of_squares#10']
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack on first store: ['sum_of_squares#0', 'i#0']
less_simple/contract.py:8 debug: optimizing TEAL subroutine test_cases.less_simple.contract.MyContract.approval_program() -> uint64:
debug: inlining single reference block main_while_body@2 into main_while_top@1
debug: inlining single reference block main_after_if_else@4 into main_while_top@1
debug: inlining single reference block main_after_if_else@6 into main_while_top@1
debug: inlining single reference block main_if_body@7 into main_while_top@1
debug: inlining single reference block main_if_body@9 into main_else_body@8
debug: removing explicit jump to fall-through block main_while_top@1
debug: removing explicit jump to fall-through block main_after_if_else@12
less_simple/contract.py:27 debug: optimizing TEAL subroutine test_cases.less_simple.contract.MyContract.clear_state_program() -> uint64:
debug: inlining single reference block main_for_body@2 into main_for_header@1
debug: inlining single reference block main_if_body@3 into main_for_header@1
debug: inlining single reference block main_if_body@5 into main_after_if_else@4
debug: removing explicit jump to fall-through block main_for_header@1
debug: removing explicit jump to fall-through block main_after_if_else@4
debug: removing explicit jump to fall-through block main_after_for@8
info: Writing less_simple/out_O2/MyContract.approval.teal
info: Writing less_simple/out_O2/MyContract.clear.teal
info: Writing less_simple/out_O2/MyContract.approval.bin
info: Writing less_simple/out_O2/MyContract.clear.bin
info: Writing less_simple/out_O2/MyContract.approval.puya.map
info: Writing less_simple/out_O2/MyContract.clear.puya.map