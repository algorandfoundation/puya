contract test_cases.less_simple.contract.MyContract:
    program approval:
        subroutine test_cases.less_simple.contract.MyContract.approval_program() -> uint64:
            block@0: // L7
                let a#0: uint64 = 1u
                let sum_of_evens#0: uint64 = 0u
                let product_of_odds#0: uint64 = 0u
                let a#8: uint64 = a#0
                let sum_of_evens#7: uint64 = sum_of_evens#0
                let product_of_odds#9: uint64 = product_of_odds#0
                goto block@1
            block@1: // while_top_L11
                let a#1: uint64 = a#8
                let sum_of_evens#1: uint64 = sum_of_evens#7
                let product_of_odds#1: uint64 = product_of_odds#9
                let tmp%0#0: uint64 = (< a#1 100u)
                goto tmp%0#0 ? block@2 : block@13
            block@2: // while_body_L11
                let tmp%1#0: uint64 = (% a#1 5u)
                let tmp%2#0: uint64 = (! tmp%1#0)
                goto tmp%2#0 ? block@3 : block@4
            block@3: // if_body_L12
                let a#8: uint64 = a#1
                let sum_of_evens#7: uint64 = sum_of_evens#1
                let product_of_odds#9: uint64 = product_of_odds#1
                goto block@1
            block@4: // after_if_else_L12
                let tmp%3#0: uint64 = (% a#1 21u)
                goto tmp%3#0 ? block@6 : block@13
            block@6: // after_if_else_L14
                let tmp%4#0: uint64 = (% a#1 2u)
                let tmp%5#0: uint64 = (! tmp%4#0)
                goto tmp%5#0 ? block@7 : block@8
            block@7: // if_body_L16
                let sum_of_evens#2: uint64 = (+ sum_of_evens#1 a#1)
                let sum_of_evens#10: uint64 = sum_of_evens#2
                let product_of_odds#14: uint64 = product_of_odds#1
                goto block@12
            block@8: // else_body_L16
                let tmp%6#0: uint64 = (! product_of_odds#1)
                goto tmp%6#0 ? block@9 : block@10
            block@9: // if_body_L19
                let product_of_odds#11: uint64 = a#1
                goto block@11
            block@10: // else_body_L19
                let product_of_odds#3: uint64 = (* product_of_odds#1 a#1)
                let product_of_odds#11: uint64 = product_of_odds#3
                goto block@11
            block@11: // after_if_else_L19
                let product_of_odds#5: uint64 = product_of_odds#11
                let sum_of_evens#10: uint64 = sum_of_evens#1
                let product_of_odds#14: uint64 = product_of_odds#5
                goto block@12
            block@12: // after_if_else_L16
                let sum_of_evens#3: uint64 = sum_of_evens#10
                let product_of_odds#4: uint64 = product_of_odds#14
                let a#4: uint64 = (+ a#1 1u)
                let a#8: uint64 = a#4
                let sum_of_evens#7: uint64 = sum_of_evens#3
                let product_of_odds#9: uint64 = product_of_odds#4
                goto block@1
            block@13: // after_while_L11
                let tmp%7#0: uint64 = (- product_of_odds#1 sum_of_evens#1)
                return tmp%7#0
    
    program clear-state:
        subroutine test_cases.less_simple.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L26
                let sum_of_squares#0: uint64 = 0u
                let range_item%0#0: uint64 = 1u
                let i#1: uint64 = range_item%0#0
                let sum_of_squares#7: uint64 = sum_of_squares#0
                goto block@1
            block@1: // for_header_L28
                let i#0: uint64 = i#1
                let sum_of_squares#1: uint64 = sum_of_squares#7
                let continue_looping%1#0: uint64 = (< i#0 100u)
                let sum_of_squares#13: uint64 = sum_of_squares#1
                goto continue_looping%1#0 ? block@2 : block@8
            block@2: // for_body_L28
                let square_root#0: uint64 = (sqrt i#0)
                let tmp%2#0: uint64 = (* square_root#0 square_root#0)
                let tmp%3#0: uint64 = (== tmp%2#0 i#0)
                let sum_of_squares#10: uint64 = sum_of_squares#1
                goto tmp%3#0 ? block@3 : block@4
            block@3: // if_body_L30
                let sum_of_squares#2: uint64 = (+ sum_of_squares#1 i#0)
                let sum_of_squares#10: uint64 = sum_of_squares#2
                goto block@4
            block@4: // after_if_else_L30
                let sum_of_squares#3: uint64 = sum_of_squares#10
                let tmp%4#0: uint64 = (> sum_of_squares#3 200u)
                goto tmp%4#0 ? block@5 : block@6
            block@5: // if_body_L32
                let sum_of_squares#13: uint64 = sum_of_squares#3
                goto block@8
            block@6: // after_if_else_L32
                let range_item%0#3: uint64 = (+ i#0 1u)
                let i#1: uint64 = range_item%0#3
                let sum_of_squares#7: uint64 = sum_of_squares#3
                goto block@1
            block@8: // after_for_L28
                let sum_of_squares#4: uint64 = sum_of_squares#13
                return sum_of_squares#4