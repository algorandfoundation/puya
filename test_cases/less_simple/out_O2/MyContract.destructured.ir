contract test_cases.less_simple.contract.MyContract:
    program approval:
        subroutine test_cases.less_simple.contract.MyContract.approval_program() -> uint64:
            block@0: // L8
                let a#0: uint64 = 1u
                let sum_of_evens#0: uint64 = 0u
                let product_of_odds#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L12
                let tmp%0#0: bool = (< a#0 100u)
                goto tmp%0#0 ? block@2 : block@13
            block@2: // while_body_L13
                let tmp%1#0: uint64 = (% a#0 5u)
                goto tmp%1#0 ? block@4 : block@1
            block@4: // after_if_else_L13
                let reinterpret_bool%0#0: bool = (% a#0 21u)
                goto reinterpret_bool%0#0 ? block@6 : block@13
            block@6: // after_if_else_L15
                let tmp%3#0: uint64 = (% a#0 2u)
                goto tmp%3#0 ? block@8 : block@7
            block@7: // if_body_L18
                let sum_of_evens#0: uint64 = (+ sum_of_evens#0 a#0)
                goto block@12
            block@8: // else_body_L20
                goto product_of_odds#0 ? block@10 : block@9
            block@9: // if_body_L21
                let product_of_odds#0: uint64 = a#0
                goto block@12
            block@10: // else_body_L23
                let product_of_odds#0: uint64 = (* product_of_odds#0 a#0)
                goto block@12
            block@12: // after_if_else_L17
                let a#0: uint64 = (+ a#0 1u)
                goto block@1
            block@13: // after_while_L12
                let tmp%6#0: uint64 = (- product_of_odds#0 sum_of_evens#0)
                return tmp%6#0
    
    program clear-state:
        subroutine test_cases.less_simple.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L27
                let sum_of_squares#0: uint64 = 0u
                let i#0: uint64 = 1u
                goto block@1
            block@1: // for_header_L29
                let continue_looping%0#0: bool = (< i#0 100u)
                let sum_of_squares#10: uint64 = sum_of_squares#0
                goto continue_looping%0#0 ? block@2 : block@8
            block@2: // for_body_L30
                let square_root#0: uint64 = (sqrt i#0)
                let tmp%0#0: uint64 = (* square_root#0 square_root#0)
                let tmp%1#0: bool = (== tmp%0#0 i#0)
                let sum_of_squares#10: uint64 = sum_of_squares#0
                goto tmp%1#0 ? block@3 : block@4
            block@3: // if_body_L32
                let sum_of_squares#0: uint64 = (+ sum_of_squares#0 i#0)
                let sum_of_squares#10: uint64 = sum_of_squares#0
                goto block@4
            block@4: // after_if_else_L31
                let sum_of_squares#0: uint64 = sum_of_squares#10
                let tmp%2#0: bool = (> sum_of_squares#0 200u)
                goto tmp%2#0 ? block@5 : block@6
            block@5: // if_body_L34
                let sum_of_squares#10: uint64 = sum_of_squares#0
                goto block@8
            block@6: // after_if_else_L33
                let i#0: uint64 = (+ i#0 1u)
                goto block@1
            block@8: // after_for_L29
                let sum_of_squares#0: uint64 = sum_of_squares#10
                return sum_of_squares#0