debug: PuyaOptions(paths=['less_simple'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // while_top_L12
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1: // while_top_L12
debug: Terminated block@1: // while_top_L12
debug: Sealing block@None: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@None: // if_body_L13
debug: Sealing block@None: // else_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L13
debug: Terminated block@4: // after_if_else_L13
debug: Sealing block@None: // if_body_L15
debug: Sealing block@None: // else_body_L15
debug: Terminated block@5: // if_body_L15
debug: Sealing block@6: // after_if_else_L15
debug: Terminated block@6: // after_if_else_L15
debug: Sealing block@None: // if_body_L17
debug: Sealing block@None: // else_body_L17
debug: Looking for 'sum_of_evens' in an unsealed block creating an incomplete Phi: block@1: // while_top_L12
debug: Created Phi assignment: let sum_of_evens#1: uint64 = undefined while trying to resolve 'sum_of_evens' in block@1: // while_top_L12
debug: Terminated block@7: // if_body_L17
debug: Looking for 'product_of_odds' in an unsealed block creating an incomplete Phi: block@1: // while_top_L12
debug: Created Phi assignment: let product_of_odds#1: uint64 = undefined while trying to resolve 'product_of_odds' in block@1: // while_top_L12
debug: Terminated block@8: // else_body_L17
debug: Sealing block@None: // if_body_L20
debug: Sealing block@None: // else_body_L20
debug: Terminated block@9: // if_body_L20
debug: Terminated block@10: // else_body_L20
debug: Sealing block@11: // after_if_else_L20
debug: Terminated block@11: // after_if_else_L20
debug: Sealing block@12: // after_if_else_L17
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@12: // after_if_else_L17
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7) in block@7: // if_body_L17
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@11: // after_if_else_L20
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9) in block@9: // if_body_L20
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) in block@10: // else_body_L20
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1 in current definition for 1 blocks
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) in block@11: // after_if_else_L20
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1 in current definition for 1 blocks
debug: Terminated block@12: // after_if_else_L17
debug: Sealing block@1: // while_top_L12
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0: // L8
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3: // if_body_L13
debug: Added a#4 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#4 <- block@12) in block@12: // after_if_else_L17
debug: Added sum_of_evens#0 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0) in block@0: // L8
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let sum_of_evens#3: uint64 = undefined while trying to resolve 'sum_of_evens' in block@12: // after_if_else_L17
debug: Added sum_of_evens#2 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7) in block@7: // if_body_L17
debug: Created Phi assignment: let sum_of_evens#4: uint64 = undefined while trying to resolve 'sum_of_evens' in block@11: // after_if_else_L20
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9) in block@9: // if_body_L20
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) in block@10: // else_body_L20
debug: Replacing trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10)
debug: Replaced trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1 in current definition for 1 blocks
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7, sum_of_evens#1 <- block@11) in block@11: // after_if_else_L20
debug: Added sum_of_evens#3 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3, sum_of_evens#3 <- block@12) in block@12: // after_if_else_L17
debug: Added product_of_odds#0 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0) in block@0: // L8
debug: Added product_of_odds#1 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let product_of_odds#4: uint64 = undefined while trying to resolve 'product_of_odds' in block@12: // after_if_else_L17
debug: Added product_of_odds#1 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7) in block@7: // if_body_L17
debug: Created Phi assignment: let product_of_odds#5: uint64 = undefined while trying to resolve 'product_of_odds' in block@11: // after_if_else_L20
debug: Added product_of_odds#2 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9) in block@9: // if_body_L20
debug: Added product_of_odds#3 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9, product_of_odds#3 <- block@10) in block@10: // else_body_L20
debug: Added product_of_odds#5 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7, product_of_odds#5 <- block@11) in block@11: // after_if_else_L20
debug: Added product_of_odds#4 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3, product_of_odds#4 <- block@12) in block@12: // after_if_else_L17
debug: Sealing block@None: // after_while_L12
debug: Created Phi assignment: let product_of_odds#6: uint64 = undefined while trying to resolve 'product_of_odds' in block@13: // after_while_L12
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1) in block@1: // while_top_L12
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) in block@5: // if_body_L15
debug: Replacing trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1
debug: Deleting Phi assignment: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5)
debug: Replaced trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1 in current definition for 1 blocks
debug: Created Phi assignment: let sum_of_evens#5: uint64 = undefined while trying to resolve 'sum_of_evens' in block@13: // after_while_L12
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1) in block@1: // while_top_L12
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) in block@5: // if_body_L15
debug: Replacing trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5)
debug: Replaced trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1 in current definition for 1 blocks
debug: Terminated block@13: // after_while_L12
debug: Sealing block@0: // L27
debug: Terminated block@0: // L27
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L29
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L29
debug: Terminated block@1: // for_header_L29
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L29
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L29
debug: Terminated block@2: // for_body_L29
debug: Sealing block@None: // if_body_L31
debug: Sealing block@None: // else_body_L31
debug: Looking for 'sum_of_squares' in an unsealed block creating an incomplete Phi: block@2: // for_body_L29
debug: Created Phi assignment: let sum_of_squares#1: uint64 = undefined while trying to resolve 'sum_of_squares' in block@2: // for_body_L29
debug: Terminated block@3: // if_body_L31
debug: Sealing block@4: // after_if_else_L31
debug: Created Phi assignment: let sum_of_squares#3: uint64 = undefined while trying to resolve 'sum_of_squares' in block@4: // after_if_else_L31
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2) in block@2: // for_body_L29
debug: Added sum_of_squares#2 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2, sum_of_squares#2 <- block@3) in block@3: // if_body_L31
debug: Terminated block@4: // after_if_else_L31
debug: Sealing block@None: // if_body_L33
debug: Sealing block@None: // else_body_L33
debug: Terminated block@5: // if_body_L33
debug: Sealing block@6: // after_if_else_L33
debug: Terminated block@6: // after_if_else_L33
debug: Sealing block@7: // for_footer_L29
debug: Terminated block@7: // for_footer_L29
debug: Sealing block@8: // for_increment_L29
debug: Created Phi assignment: let range_item%0#3: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // after_if_else_L31
debug: Added range_item%0#2 to Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@2) in block@2: // for_body_L29
debug: Added range_item%0#2 to Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@2, range_item%0#2 <- block@3) in block@3: // if_body_L31
debug: Replacing trivial Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@2, range_item%0#2 <- block@3) (range_item%0#3) with range_item%0#2
debug: Deleting Phi assignment: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@2, range_item%0#2 <- block@3)
debug: Replaced trivial Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@2, range_item%0#2 <- block@3) (range_item%0#3) with range_item%0#2 in current definition for 1 blocks
debug: Terminated block@8: // for_increment_L29
debug: Sealing block@1: // for_header_L29
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L27
debug: Added range_item%0#4 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#4 <- block@8) in block@8: // for_increment_L29
debug: Sealing block@2: // for_body_L29
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L29
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 5 blocks
debug: Created Phi assignment: let sum_of_squares#4: uint64 = undefined while trying to resolve 'sum_of_squares' in block@1: // for_header_L29
debug: Added sum_of_squares#0 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#0 <- block@0) in block@0: // L27
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#0 <- block@0, sum_of_squares#3 <- block@8) in block@8: // for_increment_L29
debug: Added sum_of_squares#4 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#4 <- block@1) in block@1: // for_header_L29
debug: Replacing trivial Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#4 <- block@1) (sum_of_squares#1) with sum_of_squares#4
debug: Deleting Phi assignment: let sum_of_squares#1: uint64 = φ(sum_of_squares#4 <- block@1)
debug: Replaced trivial Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#4 <- block@1) (sum_of_squares#1) with sum_of_squares#4 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L29
debug: Created Phi assignment: let sum_of_squares#5: uint64 = undefined while trying to resolve 'sum_of_squares' in block@9: // after_for_L29
debug: Added sum_of_squares#4 to Phi node: let sum_of_squares#5: uint64 = φ(sum_of_squares#4 <- block@1) in block@1: // for_header_L29
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#5: uint64 = φ(sum_of_squares#4 <- block@1, sum_of_squares#3 <- block@5) in block@5: // if_body_L33
debug: Terminated block@9: // after_for_L29
debug: Output IR to less_simple/out/MyContract.ssa.ir
info: Optimizing test_cases.less_simple.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#1, product_of_odds#2
debug: Replacing {product_of_odds#2} with a#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 0u) to (! tmp%1#0)
debug: Simplified (== tmp%4#0 0u) to (! tmp%4#0)
debug: Simplified (== product_of_odds#1 0u) to (! product_of_odds#1)
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2: // while_body_L12 from goto tmp%2#0 ? block@3 : block@4 to goto tmp%1#0 ? block@4 : block@3
debug: simplified branch on !tmp%5#0 by swapping zero and non-zero targets
debug: simplified terminator of block@6: // after_if_else_L15 from goto tmp%5#0 ? block@7 : block@8 to goto tmp%4#0 ? block@8 : block@7
debug: simplified branch on !tmp%6#0 by swapping zero and non-zero targets
debug: simplified terminator of block@8: // else_body_L17 from goto tmp%6#0 ? block@9 : block@10 to goto product_of_odds#1 ? block@10 : block@9
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L13 because it's used by phi nodes
debug: Removed empty block: block@5: // if_body_L15
debug: Not removing empty block block@9: // if_body_L20 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, i#0
debug: Replacing {range_item%0#1} with i#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@7: // for_footer_L29 with block@6: // after_if_else_L33 in block@8: // for_increment_L29
debug: Merged linear block@7: // for_footer_L29 into block@6: // after_if_else_L33
debug: Replaced predecessor block@8: // for_increment_L29 with block@6: // after_if_else_L33 in block@1: // for_header_L29
debug: Merged linear block@8: // for_increment_L29 into block@6: // after_if_else_L33
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5: // if_body_L33 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to less_simple/out/MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L13 because it's used by phi nodes
debug: Not removing empty block block@9: // if_body_L20 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5: // if_body_L33 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to less_simple/out/MyContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L13 because it's used by phi nodes
debug: Not removing empty block block@9: // if_body_L20 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5: // if_body_L33 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.less_simple.contract.MyContract.approval_program
debug: Removing Phis from test_cases.less_simple.contract.MyContract.clear_state_program
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#8, a#1, a#4]
debug: Coalescing sum_of_evens#0 with [sum_of_evens#7, sum_of_evens#1, sum_of_evens#2, sum_of_evens#10, sum_of_evens#3]
debug: Coalescing product_of_odds#0 with [product_of_odds#9, product_of_odds#1, product_of_odds#14, product_of_odds#11, product_of_odds#3, product_of_odds#5, product_of_odds#4]
debug: Coalescing resulted in 54 replacement/s
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing sum_of_squares#0 with [sum_of_squares#8, sum_of_squares#4, sum_of_squares#2, sum_of_squares#3, sum_of_squares#5]
debug: Coalescing sum_of_squares#11 with [sum_of_squares#14]
debug: Coalescing range_item%0#0 with [range_item%0#4]
debug: Coalescing i#0 with [i#1]
debug: Coalescing resulted in 23 replacement/s
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.approval_program
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: loc: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: pred: {a#0=a#0, sum_of_evens#0=sum_of_evens#0, product_of_odds#0=product_of_odds#0}
debug: ready: 
debug: to_do: a#0, sum_of_evens#0, product_of_odds#0
debug: * to_do product_of_odds#0
debug: * to_do sum_of_evens#0
debug: * to_do a#0
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.clear_state_program
debug: loc: {i#0=None, sum_of_squares#0=sum_of_squares#0, range_item%0#0=range_item%0#0}
debug: pred: {i#0=range_item%0#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: i#0
debug: to_do: i#0, sum_of_squares#0
debug: * avail i#0
debug: * avail range_item%0#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: loc: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: pred: {i#0=i#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: 
debug: to_do: i#0, sum_of_squares#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: loc: {i#0=None, sum_of_squares#0=sum_of_squares#0, range_item%0#0=range_item%0#0}
debug: pred: {i#0=range_item%0#0, sum_of_squares#0=sum_of_squares#0}
debug: ready: i#0
debug: to_do: i#0, sum_of_squares#0
debug: * avail i#0
debug: * avail range_item%0#0
debug: * to_do sum_of_squares#0
debug: * to_do i#0
debug: Performing post-SSA optimizations
debug: Removing jump block block@3: // if_body_L13 and replacing references with block@1: // while_top_L12
debug: Removing jump block block@11: // after_if_else_L20 and replacing references with block@12: // after_if_else_L17
debug: Output IR to less_simple/out/MyContract.destructured.ir
debug: Inserted main_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_while_body@2.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_while_body@2.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_after_while@13.ops[3]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_while@13.ops[5]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Found 5 edge set/s for test_cases.less_simple.contract.MyContract.approval_program
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack entry: []
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack on first store: ['a#0', 'sum_of_evens#0', 'product_of_odds#0']
debug: Inserted main_block@0.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_for_header@1.ops[3]: 'store continue_looping%0#0 to l-stack (copy)'
debug: Replaced main_for_header@1.ops[7]: 'load continue_looping%0#0' with 'load continue_looping%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[2]: 'store square_root#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[4]: 'load square_root#0' with 'load square_root#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[5]: 'store square_root#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[6]: 'load square_root#0' with 'load square_root#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[8]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[10]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[13]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[17]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[1]: 'store i#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[12]: 'load i#0' with 'load i#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[3]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[5]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[3]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[8]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@9.ops[1]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_after_for@9.ops[3]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.less_simple.contract.MyContract.clear_state_program
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack entry: ['sum_of_squares#11']
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack on first store: ['sum_of_squares#0', 'i#0']
info: Writing less_simple/out/MyContract.approval.teal
info: Writing less_simple/out/MyContract.clear.teal