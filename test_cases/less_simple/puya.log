debug: PuyaOptions(paths=(Path('less_simple'),), output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, out_dir=None, debug_level=0, optimization_level=1, log_level=<LogLevel.info: 20>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@6: // for_header_L105
debug: Terminated block@6: // for_header_L105
debug: Sealing block@None: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@6: // for_header_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L105
debug: Terminated block@7: // for_body_L105
debug: Sealing block@8: // for_footer_L105
debug: Sealing block@None: // after_for_L105
debug: Terminated block@8: // for_footer_L105
debug: Sealing block@6: // for_header_L105
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5, range_item%10#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#6: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#6: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3) in block@3: // ternary_true_L105
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6
debug: Deleting Phi assignment: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4)
debug: Replaced trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6 in current definition for 1 blocks
debug: Added source#6 to Phi node: let source#3: bytes = φ(source#6 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#4 to Phi node: let source#3: bytes = φ(source#6 <- block@5, source#4 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Terminated block@9: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L246
debug: Terminated block@4: // for_header_L246
debug: Sealing block@None: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L246
debug: Terminated block@5: // for_body_L246
debug: Sealing block@6: // for_footer_L246
debug: Sealing block@None: // after_for_L246
debug: Terminated block@6: // for_footer_L246
debug: Sealing block@4: // for_header_L246
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L241
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3) in block@3: // after_if_else_L241
debug: Added tail_cursor#3 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3, tail_cursor#3 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0
debug: Deleting Phi assignment: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#2 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L241
debug: Added header_cursor#2 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@6) in block@6: // for_footer_L246
debug: Terminated block@7: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@None: // if_body_L14
debug: Sealing block@None: // else_body_L14
debug: Terminated block@5: // if_body_L14
debug: Sealing block@6: // after_if_else_L14
debug: Terminated block@6: // after_if_else_L14
debug: Sealing block@None: // if_body_L16
debug: Sealing block@None: // else_body_L16
debug: Looking for 'sum_of_evens' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sum_of_evens#1: uint64 = undefined while trying to resolve 'sum_of_evens' in block@1: // while_top_L11
debug: Terminated block@7: // if_body_L16
debug: Looking for 'product_of_odds' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let product_of_odds#1: uint64 = undefined while trying to resolve 'product_of_odds' in block@1: // while_top_L11
debug: Terminated block@8: // else_body_L16
debug: Sealing block@None: // if_body_L19
debug: Sealing block@None: // else_body_L19
debug: Terminated block@9: // if_body_L19
debug: Terminated block@10: // else_body_L19
debug: Sealing block@11: // after_if_else_L19
debug: Terminated block@11: // after_if_else_L19
debug: Sealing block@12: // after_if_else_L16
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@12: // after_if_else_L16
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7) in block@7: // if_body_L16
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@11: // after_if_else_L19
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9) in block@9: // if_body_L19
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) in block@10: // else_body_L19
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@9, a#1 <- block@10) (a#3) with a#1 in current definition for 1 blocks
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) in block@11: // after_if_else_L19
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#1 <- block@7, a#1 <- block@11) (a#2) with a#1 in current definition for 1 blocks
debug: Terminated block@12: // after_if_else_L16
debug: Sealing block@1: // while_top_L11
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0: // L7
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3: // if_body_L12
debug: Added a#4 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#4 <- block@12) in block@12: // after_if_else_L16
debug: Added sum_of_evens#0 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0) in block@0: // L7
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3) in block@3: // if_body_L12
debug: Created Phi assignment: let sum_of_evens#3: uint64 = undefined while trying to resolve 'sum_of_evens' in block@12: // after_if_else_L16
debug: Added sum_of_evens#2 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7) in block@7: // if_body_L16
debug: Created Phi assignment: let sum_of_evens#4: uint64 = undefined while trying to resolve 'sum_of_evens' in block@11: // after_if_else_L19
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9) in block@9: // if_body_L19
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) in block@10: // else_body_L19
debug: Replacing trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10)
debug: Replaced trivial Phi node: let sum_of_evens#4: uint64 = φ(sum_of_evens#1 <- block@9, sum_of_evens#1 <- block@10) (sum_of_evens#4) with sum_of_evens#1 in current definition for 1 blocks
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#3: uint64 = φ(sum_of_evens#2 <- block@7, sum_of_evens#1 <- block@11) in block@11: // after_if_else_L19
debug: Added sum_of_evens#3 to Phi node: let sum_of_evens#1: uint64 = φ(sum_of_evens#0 <- block@0, sum_of_evens#1 <- block@3, sum_of_evens#3 <- block@12) in block@12: // after_if_else_L16
debug: Added product_of_odds#0 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0) in block@0: // L7
debug: Added product_of_odds#1 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3) in block@3: // if_body_L12
debug: Created Phi assignment: let product_of_odds#4: uint64 = undefined while trying to resolve 'product_of_odds' in block@12: // after_if_else_L16
debug: Added product_of_odds#1 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7) in block@7: // if_body_L16
debug: Created Phi assignment: let product_of_odds#5: uint64 = undefined while trying to resolve 'product_of_odds' in block@11: // after_if_else_L19
debug: Added product_of_odds#2 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9) in block@9: // if_body_L19
debug: Added product_of_odds#3 to Phi node: let product_of_odds#5: uint64 = φ(product_of_odds#2 <- block@9, product_of_odds#3 <- block@10) in block@10: // else_body_L19
debug: Added product_of_odds#5 to Phi node: let product_of_odds#4: uint64 = φ(product_of_odds#1 <- block@7, product_of_odds#5 <- block@11) in block@11: // after_if_else_L19
debug: Added product_of_odds#4 to Phi node: let product_of_odds#1: uint64 = φ(product_of_odds#0 <- block@0, product_of_odds#1 <- block@3, product_of_odds#4 <- block@12) in block@12: // after_if_else_L16
debug: Sealing block@None: // after_while_L11
debug: Created Phi assignment: let product_of_odds#6: uint64 = undefined while trying to resolve 'product_of_odds' in block@13: // after_while_L11
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1) in block@1: // while_top_L11
debug: Added product_of_odds#1 to Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) in block@5: // if_body_L14
debug: Replacing trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1
debug: Deleting Phi assignment: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5)
debug: Replaced trivial Phi node: let product_of_odds#6: uint64 = φ(product_of_odds#1 <- block@1, product_of_odds#1 <- block@5) (product_of_odds#6) with product_of_odds#1 in current definition for 1 blocks
debug: Created Phi assignment: let sum_of_evens#5: uint64 = undefined while trying to resolve 'sum_of_evens' in block@13: // after_while_L11
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1) in block@1: // while_top_L11
debug: Added sum_of_evens#1 to Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) in block@5: // if_body_L14
debug: Replacing trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1
debug: Deleting Phi assignment: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5)
debug: Replaced trivial Phi node: let sum_of_evens#5: uint64 = φ(sum_of_evens#1 <- block@1, sum_of_evens#1 <- block@5) (sum_of_evens#5) with sum_of_evens#1 in current definition for 1 blocks
debug: Terminated block@13: // after_while_L11
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L28
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L28
debug: Terminated block@1: // for_header_L28
debug: Sealing block@None: // for_body_L28
debug: Terminated block@2: // for_body_L28
debug: Sealing block@None: // if_body_L30
debug: Sealing block@None: // else_body_L30
debug: Looking for 'sum_of_squares' in an unsealed block creating an incomplete Phi: block@1: // for_header_L28
debug: Created Phi assignment: let sum_of_squares#1: uint64 = undefined while trying to resolve 'sum_of_squares' in block@1: // for_header_L28
debug: Terminated block@3: // if_body_L30
debug: Sealing block@4: // after_if_else_L30
debug: Created Phi assignment: let sum_of_squares#3: uint64 = undefined while trying to resolve 'sum_of_squares' in block@4: // after_if_else_L30
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2) in block@2: // for_body_L28
debug: Added sum_of_squares#2 to Phi node: let sum_of_squares#3: uint64 = φ(sum_of_squares#1 <- block@2, sum_of_squares#2 <- block@3) in block@3: // if_body_L30
debug: Terminated block@4: // after_if_else_L30
debug: Sealing block@None: // if_body_L32
debug: Sealing block@None: // else_body_L32
debug: Terminated block@5: // if_body_L32
debug: Sealing block@6: // after_if_else_L32
debug: Terminated block@6: // after_if_else_L32
debug: Sealing block@7: // for_footer_L28
debug: Sealing block@None: // after_for_L28
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // after_if_else_L30
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2) in block@2: // for_body_L28
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#1 <- block@3) in block@3: // if_body_L30
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#1 <- block@3) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#1 <- block@3)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#1 <- block@3) (range_item%0#2) with range_item%0#1 in current definition for 1 blocks
debug: Terminated block@7: // for_footer_L28
debug: Sealing block@1: // for_header_L28
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L26
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@7) in block@7: // for_footer_L28
debug: Added sum_of_squares#0 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0) in block@0: // L26
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#1: uint64 = φ(sum_of_squares#0 <- block@0, sum_of_squares#3 <- block@7) in block@7: // for_footer_L28
debug: Created Phi assignment: let sum_of_squares#4: uint64 = undefined while trying to resolve 'sum_of_squares' in block@8: // after_for_L28
debug: Added sum_of_squares#1 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1) in block@1: // for_header_L28
debug: Added sum_of_squares#3 to Phi node: let sum_of_squares#4: uint64 = φ(sum_of_squares#1 <- block@1, sum_of_squares#3 <- block@5) in block@5: // if_body_L32
debug: Terminated block@8: // after_for_L28
debug: Output IR to less_simple/out/contract_MyContract.ssa.ir
info: Optimizing test_cases.less_simple.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#1, product_of_odds#2
debug: Replacing {product_of_odds#2} with a#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L12 because it's used by phi nodes
debug: Removed empty block: block@5: // if_body_L14
debug: Not removing empty block block@9: // if_body_L19 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, i#0
debug: Replacing {range_item%0#1} with i#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@7: // for_footer_L28 with block@6: // after_if_else_L32 in block@1: // for_header_L28
debug: Merged linear block@7: // for_footer_L28 into block@6: // after_if_else_L32
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5: // if_body_L32 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to less_simple/out/contract_MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L12 because it's used by phi nodes
debug: Not removing empty block block@9: // if_body_L19 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.less_simple.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@5: // if_body_L32 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to less_simple/out/contract_MyContract.cssa.ir
debug: Removing Phis from test_cases.less_simple.contract.MyContract.approval_program
debug: Removing Phis from test_cases.less_simple.contract.MyContract.clear_state_program
debug: Output IR to less_simple/out/contract_MyContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.approval_program
debug: loc: {product_of_odds#9=None, sum_of_evens#7=None, a#8=None, product_of_odds#0=product_of_odds#0, sum_of_evens#0=sum_of_evens#0, a#0=a#0}
debug: pred: {product_of_odds#9=product_of_odds#0, sum_of_evens#7=sum_of_evens#0, a#8=a#0}
debug: ready: product_of_odds#9, sum_of_evens#7, a#8
debug: to_do: product_of_odds#9, sum_of_evens#7, a#8
debug: * avail a#8
debug: * avail a#0
debug: * avail sum_of_evens#7
debug: * avail sum_of_evens#0
debug: * avail product_of_odds#9
debug: * avail product_of_odds#0
debug: * to_do a#8
debug: * to_do sum_of_evens#7
debug: * to_do product_of_odds#9
debug: loc: {product_of_odds#1=None, sum_of_evens#1=None, a#1=None, product_of_odds#9=product_of_odds#9, sum_of_evens#7=sum_of_evens#7, a#8=a#8}
debug: pred: {product_of_odds#1=product_of_odds#9, sum_of_evens#1=sum_of_evens#7, a#1=a#8}
debug: ready: product_of_odds#1, sum_of_evens#1, a#1
debug: to_do: product_of_odds#1, sum_of_evens#1, a#1
debug: * avail a#1
debug: * avail a#8
debug: * avail sum_of_evens#1
debug: * avail sum_of_evens#7
debug: * avail product_of_odds#1
debug: * avail product_of_odds#9
debug: * to_do a#1
debug: * to_do sum_of_evens#1
debug: * to_do product_of_odds#1
debug: loc: {product_of_odds#9=None, sum_of_evens#7=None, a#8=None, product_of_odds#1=product_of_odds#1, sum_of_evens#1=sum_of_evens#1, a#1=a#1}
debug: pred: {product_of_odds#9=product_of_odds#1, sum_of_evens#7=sum_of_evens#1, a#8=a#1}
debug: ready: product_of_odds#9, sum_of_evens#7, a#8
debug: to_do: product_of_odds#9, sum_of_evens#7, a#8
debug: * avail a#8
debug: * avail a#1
debug: * avail sum_of_evens#7
debug: * avail sum_of_evens#1
debug: * avail product_of_odds#9
debug: * avail product_of_odds#1
debug: * to_do a#8
debug: * to_do sum_of_evens#7
debug: * to_do product_of_odds#9
debug: loc: {product_of_odds#14=None, sum_of_evens#10=None, product_of_odds#1=product_of_odds#1, sum_of_evens#2=sum_of_evens#2}
debug: pred: {product_of_odds#14=product_of_odds#1, sum_of_evens#10=sum_of_evens#2}
debug: ready: product_of_odds#14, sum_of_evens#10
debug: to_do: product_of_odds#14, sum_of_evens#10
debug: * avail sum_of_evens#10
debug: * avail sum_of_evens#2
debug: * avail product_of_odds#14
debug: * avail product_of_odds#1
debug: * to_do sum_of_evens#10
debug: * to_do product_of_odds#14
debug: loc: {product_of_odds#14=None, sum_of_evens#10=None, product_of_odds#5=product_of_odds#5, sum_of_evens#1=sum_of_evens#1}
debug: pred: {product_of_odds#14=product_of_odds#5, sum_of_evens#10=sum_of_evens#1}
debug: ready: product_of_odds#14, sum_of_evens#10
debug: to_do: product_of_odds#14, sum_of_evens#10
debug: * avail sum_of_evens#10
debug: * avail sum_of_evens#1
debug: * avail product_of_odds#14
debug: * avail product_of_odds#5
debug: * to_do sum_of_evens#10
debug: * to_do product_of_odds#14
debug: loc: {product_of_odds#4=None, sum_of_evens#3=None, product_of_odds#14=product_of_odds#14, sum_of_evens#10=sum_of_evens#10}
debug: pred: {product_of_odds#4=product_of_odds#14, sum_of_evens#3=sum_of_evens#10}
debug: ready: product_of_odds#4, sum_of_evens#3
debug: to_do: product_of_odds#4, sum_of_evens#3
debug: * avail sum_of_evens#3
debug: * avail sum_of_evens#10
debug: * avail product_of_odds#4
debug: * avail product_of_odds#14
debug: * to_do sum_of_evens#3
debug: * to_do product_of_odds#4
debug: loc: {product_of_odds#9=None, sum_of_evens#7=None, a#8=None, product_of_odds#4=product_of_odds#4, sum_of_evens#3=sum_of_evens#3, a#4=a#4}
debug: pred: {product_of_odds#9=product_of_odds#4, sum_of_evens#7=sum_of_evens#3, a#8=a#4}
debug: ready: product_of_odds#9, sum_of_evens#7, a#8
debug: to_do: product_of_odds#9, sum_of_evens#7, a#8
debug: * avail a#8
debug: * avail a#4
debug: * avail sum_of_evens#7
debug: * avail sum_of_evens#3
debug: * avail product_of_odds#9
debug: * avail product_of_odds#4
debug: * to_do a#8
debug: * to_do sum_of_evens#7
debug: * to_do product_of_odds#9
debug: Sequentializing parallel copies in test_cases.less_simple.contract.MyContract.clear_state_program
debug: loc: {sum_of_squares#7=None, i#1=None, sum_of_squares#0=sum_of_squares#0, range_item%0#0=range_item%0#0}
debug: pred: {sum_of_squares#7=sum_of_squares#0, i#1=range_item%0#0}
debug: ready: sum_of_squares#7, i#1
debug: to_do: sum_of_squares#7, i#1
debug: * avail i#1
debug: * avail range_item%0#0
debug: * avail sum_of_squares#7
debug: * avail sum_of_squares#0
debug: * to_do i#1
debug: * to_do sum_of_squares#7
debug: loc: {sum_of_squares#1=None, i#0=None, sum_of_squares#7=sum_of_squares#7, i#1=i#1}
debug: pred: {sum_of_squares#1=sum_of_squares#7, i#0=i#1}
debug: ready: sum_of_squares#1, i#0
debug: to_do: sum_of_squares#1, i#0
debug: * avail i#0
debug: * avail i#1
debug: * avail sum_of_squares#1
debug: * avail sum_of_squares#7
debug: * to_do i#0
debug: * to_do sum_of_squares#1
debug: loc: {sum_of_squares#7=None, i#1=None, sum_of_squares#3=sum_of_squares#3, range_item%0#3=range_item%0#3}
debug: pred: {sum_of_squares#7=sum_of_squares#3, i#1=range_item%0#3}
debug: ready: sum_of_squares#7, i#1
debug: to_do: sum_of_squares#7, i#1
debug: * avail i#1
debug: * avail range_item%0#3
debug: * avail sum_of_squares#7
debug: * avail sum_of_squares#3
debug: * to_do i#1
debug: * to_do sum_of_squares#7
debug: Output IR to less_simple/out/contract_MyContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#8, a#1, a#4]
debug: Coalescing sum_of_evens#0 with [sum_of_evens#7, sum_of_evens#1, sum_of_evens#2, sum_of_evens#10, sum_of_evens#3]
debug: Coalescing product_of_odds#0 with [product_of_odds#9, product_of_odds#1, product_of_odds#14, product_of_odds#11, product_of_odds#3, product_of_odds#5, product_of_odds#4]
debug: Coalescing resulted in 54 replacement/s
debug: Coalescing local variables in test_cases.less_simple.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing sum_of_squares#0 with [sum_of_squares#7, sum_of_squares#1, sum_of_squares#2, sum_of_squares#3, sum_of_squares#4]
debug: Coalescing sum_of_squares#10 with [sum_of_squares#13]
debug: Coalescing range_item%0#0 with [range_item%0#3]
debug: Coalescing i#0 with [i#1]
debug: Coalescing resulted in 23 replacement/s
debug: Output IR to less_simple/out/contract_MyContract.final.ir
debug: Inserted main_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_while_body@2.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_while_body@2.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_while_body@2.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_while_body@2.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[7]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[9]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_else_body@8.ops[2]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_else_body@8.ops[4]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_after_while@13.ops[3]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_while@13.ops[5]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Found 7 edge set/s for test_cases.less_simple.contract.MyContract.approval_program
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack entry: []
debug: test_cases.less_simple.contract.MyContract.approval_program f-stack on first store: ['a#0', 'sum_of_evens#0', 'product_of_odds#0']
debug: Inserted main_block@0.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_for_header@1.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced main_for_header@1.ops[7]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[2]: 'store square_root#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[4]: 'load square_root#0' with 'load square_root#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[5]: 'store square_root#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[6]: 'load square_root#0' with 'load square_root#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[8]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[10]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[17]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[1]: 'store i#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[12]: 'load i#0' with 'load i#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[3]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[5]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[3]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@8.ops[1]: 'store sum_of_squares#0 to l-stack (copy)'
debug: Replaced main_after_for@8.ops[3]: 'load sum_of_squares#0' with 'load sum_of_squares#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.less_simple.contract.MyContract.clear_state_program
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack entry: ['sum_of_squares#10']
debug: test_cases.less_simple.contract.MyContract.clear_state_program f-stack on first store: ['sum_of_squares#0', 'i#0']
info: Writing less_simple/out/contract.approval.teal
info: Writing less_simple/out/contract.approval.debug.teal
info: Writing less_simple/out/contract.clear.teal
info: Writing less_simple/out/contract.clear.debug.teal