contract test_cases.regression_118.contract.Contract:
    program approval:
        subroutine test_cases.regression_118.contract.Contract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L5
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "verify(uint256[])(bool,string)" => block@2, * => fail // reject transaction}
            block@2: // verify_route_L6
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = test_cases.regression_118.contract.Contract.verify(tmp%5#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
                (log tmp%7#0)
                return 1u
            block@5: // bare_routing_L5
                let tmp%8#0: uint64 = (txn OnCompletion)
                let not%tmp%8#0: bool = (! tmp%8#0)
                (assert not%tmp%8#0) // reject transaction
                let tmp%9#0: bool = (txn ApplicationID)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // is creating
                return 1u
        
        subroutine test_cases.regression_118.contract.Contract.verify(values: bytes) -> bytes:
            block@0: // L6
                let reinterpret_bool%0#0: bool = (txn NumAppArgs)
                let val1#0: bytes = (setbit 0x00 0u reinterpret_bool%0#0)
                let tmp%0#0: uint64 = (extract_uint16 values#0 0u)
                let tmp%1#0: bool = (!= tmp%0#0 2u)
                goto tmp%1#0 ? block@1 : block@2
            block@1: // if_body_L11
                let encoded_tuple_buffer%0#2: bytes = (concat val1#0 0x0003)
                let encoded_tuple_buffer%0#3: bytes = (concat encoded_tuple_buffer%0#2 0x0000)
                return encoded_tuple_buffer%0#3
            block@2: // after_if_else_L11
                let encoded_tuple_buffer%1#2: bytes = (concat val1#0 0x0003)
                let encoded_tuple_buffer%1#3: bytes = (concat encoded_tuple_buffer%1#2 0x0000)
                return encoded_tuple_buffer%1#3
    
    program clear-state:
        subroutine test_cases.regression_118.contract.Contract.clear_state_program() -> bool:
            block@0: // L5
                return 1u