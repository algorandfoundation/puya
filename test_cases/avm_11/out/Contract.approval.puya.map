{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AADL;;AAAA;;;;;;;;;AAIe;AAAP;AAC0D;;AAAT;AAA1C;;AAAA;AAQ0B;AAAtB;;AAAJ;;AAAA;AAAP;AACmC;AAA5B;;AAAP;AAC0B;AAAnB;;AAAP;AAE6B;AAAtB;;AAAA;;AAAA;AAAP;AAC6B;AAAtB;;AAAA;AAAP;AACgC;AAAzB;;AAAP;AACoC;AAA7B;;AAAP;AAGO;;AAAP;AACO;;AAAP;AACO;;AAAP;AACO;;AAAP;AACO;;AAAP;AAGuC;AAAhC;;AAAA;;AAC2C;AAA3C;;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "10": {
      "op": "pushbytes 0xc2b8dd8a // method \"test_new_ops()void\"",
      "defined_out": [
        "Method(test_new_ops()void)"
      ],
      "stack_out": [
        "Method(test_new_ops()void)"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "match main_test_new_ops_route@3",
      "stack_out": []
    },
    "23": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "24": {
      "op": "return",
      "stack_out": []
    },
    "25": {
      "block": "main_test_new_ops_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "28": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "29": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "31": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "32": {
      "callsub": "test_cases.avm_11.contract.Contract.test_new_ops",
      "op": "callsub test_new_ops"
    },
    "35": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    },
    "37": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "39": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "42": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "45": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "46": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "47": {
      "op": "return",
      "stack_out": []
    },
    "48": {
      "subroutine": "test_cases.avm_11.contract.Contract.test_new_ops",
      "params": {},
      "block": "test_new_ops",
      "stack_in": [],
      "op": "online_stake",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "49": {
      "op": "assert",
      "stack_out": []
    },
    "50": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "32"
      ]
    },
    "52": {
      "op": "bzero",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "mimc BN254Mp110",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "55": {
      "op": "pop",
      "stack_out": []
    },
    "56": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "57": {
      "op": "block BlkProposer",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "59": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "61": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "62": {
      "error": "proposer",
      "op": "assert // proposer",
      "stack_out": []
    },
    "63": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "64": {
      "op": "block BlkFeesCollected",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "66": {
      "error": "fees collected",
      "op": "assert // fees collected",
      "stack_out": []
    },
    "67": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "68": {
      "op": "block BlkBonus",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "70": {
      "error": "bonus",
      "op": "assert // bonus",
      "stack_out": []
    },
    "71": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "72": {
      "op": "block BlkFeeSink",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "74": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "76": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "77": {
      "error": "fee sink",
      "op": "assert // fee sink",
      "stack_out": []
    },
    "78": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "79": {
      "op": "block BlkProtocol",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "81": {
      "op": "len",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "82": {
      "error": "protocol",
      "op": "assert // protocol",
      "stack_out": []
    },
    "83": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "84": {
      "op": "block BlkTxnCounter",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "86": {
      "error": "txn counter",
      "op": "assert // txn counter",
      "stack_out": []
    },
    "87": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "88": {
      "op": "block BlkProposerPayout",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "90": {
      "error": "proposer payout",
      "op": "assert // proposer payout",
      "stack_out": []
    },
    "91": {
      "op": "global PayoutsEnabled",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "93": {
      "error": "payouts_enabled",
      "op": "assert // payouts_enabled",
      "stack_out": []
    },
    "94": {
      "op": "global PayoutsGoOnlineFee",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "96": {
      "error": "payouts_go_online_fee",
      "op": "assert // payouts_go_online_fee",
      "stack_out": []
    },
    "97": {
      "op": "global PayoutsPercent",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "99": {
      "error": "payouts_percent",
      "op": "assert // payouts_percent",
      "stack_out": []
    },
    "100": {
      "op": "global PayoutsMinBalance",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "102": {
      "error": "payouts_min_balance",
      "op": "assert // payouts_min_balance",
      "stack_out": []
    },
    "103": {
      "op": "global PayoutsMaxBalance",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "105": {
      "error": "payouts_max_balance",
      "op": "assert // payouts_max_balance",
      "stack_out": []
    },
    "106": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "107": {
      "op": "voter_params_get VoterBalance",
      "defined_out": [
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "g#0",
        "h#0"
      ]
    },
    "109": {
      "op": "popn 2",
      "stack_out": []
    },
    "111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "112": {
      "op": "voter_params_get VoterIncentiveEligible",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0"
      ]
    },
    "114": {
      "op": "popn 2",
      "stack_out": []
    },
    "116": {
      "retsub": true,
      "op": "retsub"
    }
  }
}