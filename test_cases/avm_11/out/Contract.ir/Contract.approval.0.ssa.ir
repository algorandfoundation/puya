main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.avm_11.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_new_ops()void" => block@2, * => block@3}
    block@2: // test_new_ops_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.avm_11.contract.Contract.test_new_ops()
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        test_cases.avm_11.contract.Contract.__algopy_default_create()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine test_cases.avm_11.contract.Contract.test_new_ops() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = online_stake
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: bytes = (bzero 32u)
        let tmp%3#0: bytes = ((mimc BN254Mp110) tmp%2#0)
        let tmp%4#0: uint64 = (len tmp%3#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%5#0)
        let tmp%6#0: bytes[32] = (txn Sender)
        let (tmp%7#0: bool, tmp%8#0: bool) = ((acct_params_get AcctIncentiveEligible) tmp%6#0)
        let a#0: bool = tmp%7#0
        let b#0: bool = tmp%8#0
        let tmp%9#0: bytes[32] = (txn Sender)
        let (tmp%10#0: uint64, tmp%11#0: bool) = ((acct_params_get AcctLastProposed) tmp%9#0)
        let c#0: uint64 = tmp%10#0
        let d#0: bool = tmp%11#0
        let tmp%12#0: bytes[32] = (txn Sender)
        let (tmp%13#0: uint64, tmp%14#0: bool) = ((acct_params_get AcctLastHeartbeat) tmp%12#0)
        let e#0: uint64 = tmp%13#0
        let f#0: bool = tmp%14#0
        let tmp%15#0: bytes[32] = ((block BlkProposer) 0u)
        let tmp%16#0: bytes[32] = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // proposer
        let tmp%18#0: uint64 = ((block BlkFeesCollected) 0u)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // fees collected
        let tmp%20#0: uint64 = ((block BlkBonus) 0u)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // bonus
        let tmp%22#0: bytes = ((block BlkBranch) 0u)
        let tmp%23#0: uint64 = (len tmp%22#0)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // branch
        let tmp%25#0: bytes[32] = ((block BlkFeeSink) 0u)
        let tmp%26#0: bytes[32] = (global ZeroAddress)
        let tmp%27#0: bool = (!= tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // fee sink
        let tmp%28#0: bytes = ((block BlkProtocol) 0u)
        let tmp%29#0: uint64 = (len tmp%28#0)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // protocol
        let tmp%31#0: uint64 = ((block BlkTxnCounter) 0u)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // txn counter
        let tmp%33#0: uint64 = ((block BlkProposerPayout) 0u)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // proposer payout
        let tmp%35#0: bool = (global PayoutsEnabled)
        (assert tmp%35#0) // payouts_enabled
        let tmp%36#0: uint64 = (global PayoutsGoOnlineFee)
        let tmp%37#0: bool = (!= tmp%36#0 0u)
        (assert tmp%37#0) // payouts_go_online_fee
        let tmp%38#0: uint64 = (global PayoutsPercent)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        (assert tmp%39#0) // payouts_percent
        let tmp%40#0: uint64 = (global PayoutsMinBalance)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // payouts_min_balance
        let tmp%42#0: uint64 = (global PayoutsMaxBalance)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // payouts_max_balance
        let (tmp%44#0: uint64, tmp%45#0: bool) = ((voter_params_get VoterBalance) 0u)
        let g#0: uint64 = tmp%44#0
        let h#0: bool = tmp%45#0
        let (tmp%46#0: bool, tmp%47#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
        let i#0: bool = tmp%46#0
        let j#0: bool = tmp%47#0
        return 

subroutine test_cases.avm_11.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 