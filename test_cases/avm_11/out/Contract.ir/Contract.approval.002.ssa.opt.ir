main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_new_ops()void" => block@3, * => block@5}
    block@3: // test_new_ops_route_L5
        test_cases.avm_11.contract.Contract.test_new_ops[routing]()
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.avm_11.contract.Contract.test_new_ops[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = online_stake
        (assert tmp%0#0)
        let tmp%2#0: bytes = (bzero 32u)
        let tmp%3#0: bytes = ((mimc BN254Mp110) tmp%2#0)
        let tmp%15#0: account = ((block BlkProposer) 0u)
        let tmp%16#0: account = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // proposer
        let tmp%18#0: uint64 = ((block BlkFeesCollected) 0u)
        (assert tmp%18#0) // fees collected
        let tmp%20#0: uint64 = ((block BlkBonus) 0u)
        (assert tmp%20#0) // bonus
        let tmp%25#0: account = ((block BlkFeeSink) 0u)
        let tmp%26#0: account = (global ZeroAddress)
        let tmp%27#0: bool = (!= tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // fee sink
        let tmp%28#0: bytes = ((block BlkProtocol) 0u)
        let tmp%29#0: uint64 = (len tmp%28#0)
        (assert tmp%29#0) // protocol
        let tmp%31#0: uint64 = ((block BlkTxnCounter) 0u)
        (assert tmp%31#0) // txn counter
        let tmp%33#0: uint64 = ((block BlkProposerPayout) 0u)
        (assert tmp%33#0) // proposer payout
        let tmp%35#0: bool = (global PayoutsEnabled)
        (assert tmp%35#0) // payouts_enabled
        let tmp%36#0: uint64 = (global PayoutsGoOnlineFee)
        (assert tmp%36#0) // payouts_go_online_fee
        let tmp%38#0: uint64 = (global PayoutsPercent)
        (assert tmp%38#0) // payouts_percent
        let tmp%40#0: uint64 = (global PayoutsMinBalance)
        (assert tmp%40#0) // payouts_min_balance
        let tmp%42#0: uint64 = (global PayoutsMaxBalance)
        (assert tmp%42#0) // payouts_max_balance
        let (g#0: uint64, h#0: bool) = ((voter_params_get VoterBalance) 0u)
        let (i#0: bool, j#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
        exit 1u