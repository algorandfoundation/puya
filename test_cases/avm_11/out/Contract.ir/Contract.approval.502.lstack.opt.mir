// Op                                                                                    Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // avm_11/contract.py:4
        // class Contract(ARC4Contract, avm_version=11):
        txn NumAppArgs                                                                   tmp%0#1
        bz main_bare_routing@6 ; b main_abi_routing@2

    main_abi_routing@2:
        // avm_11/contract.py:4
        // class Contract(ARC4Contract, avm_version=11):
        txna ApplicationArgs 0                                                           tmp%2#0
        method test_new_ops()void                                                        tmp%2#0,Method(test_new_ops()void)
        l-load tmp%2#0 1                                                                 Method(test_new_ops()void),tmp%2#0
        match main_test_new_ops_route@3 ; b main_after_if_else@10

    main_test_new_ops_route@3:
        // avm_11/contract.py:5
        // @arc4.abimethod
        txn OnCompletion                                                                 tmp%3#0
        !                                                                                tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                tmp%5#0
        assert // can only call when not creating
        callsub test_new_ops
        int 1                                                                            test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11

    main_bare_routing@6:
        // avm_11/contract.py:4
        // class Contract(ARC4Contract, avm_version=11):
        txn OnCompletion                                                                 tmp%7#0
        bz main___algopy_default_create@7 ; b main_after_if_else@10

    main___algopy_default_create@7:
        txn ApplicationID                                                                tmp%8#0
        !                                                                                tmp%9#0
        assert // can only call when creating
        int 1                                                                            test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11

    main_after_if_else@10:
        // avm_11/contract.py:4
        // class Contract(ARC4Contract, avm_version=11):
        int 0                                                                            test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11

    main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11:
        v-load tmp%0#0                                                                   tmp%0#0
        return


// test_cases.avm_11.contract.Contract.test_new_ops() -> void:
subroutine test_new_ops:
    test_new_ops_block@0:
        // avm_11/contract.py:8
        // assert op.online_stake()
        online_stake                                                                     tmp%0#0
        assert
        // avm_11/contract.py:9
        // assert op.mimc(op.MiMCConfigurations.BN254Mp110, op.bzero(32))
        int 32                                                                           32
        bzero                                                                            tmp%2#0
        mimc BN254Mp110                                                                  tmp%3#0
        pop 1
        // avm_11/contract.py:17
        // assert not op.Block.blk_proposer(0), "proposer"
        int 0                                                                            0
        block BlkProposer                                                                tmp%15#0
        global ZeroAddress                                                               tmp%15#0,tmp%16#0
        l-load tmp%15#0 1                                                                tmp%16#0,tmp%15#0
        l-load tmp%16#0 1                                                                tmp%15#0,tmp%16#0
        ==                                                                               tmp%17#0
        assert // proposer
        // avm_11/contract.py:18
        // assert op.Block.blk_fees_collected(0), "fees collected"
        int 0                                                                            0
        block BlkFeesCollected                                                           tmp%18#0
        assert // fees collected
        // avm_11/contract.py:19
        // assert op.Block.blk_bonus(0), "bonus"
        int 0                                                                            0
        block BlkBonus                                                                   tmp%20#0
        assert // bonus
        // avm_11/contract.py:21
        // assert op.Block.blk_fee_sink(0), "fee sink"
        int 0                                                                            0
        block BlkFeeSink                                                                 tmp%25#0
        global ZeroAddress                                                               tmp%25#0,tmp%26#0
        l-load tmp%25#0 1                                                                tmp%26#0,tmp%25#0
        l-load tmp%26#0 1                                                                tmp%25#0,tmp%26#0
        !=                                                                               tmp%27#0
        assert // fee sink
        // avm_11/contract.py:22
        // assert op.Block.blk_protocol(0), "protocol"
        int 0                                                                            0
        block BlkProtocol                                                                tmp%28#0
        len                                                                              tmp%29#0
        assert // protocol
        // avm_11/contract.py:23
        // assert op.Block.blk_txn_counter(0), "txn counter"
        int 0                                                                            0
        block BlkTxnCounter                                                              tmp%31#0
        assert // txn counter
        // avm_11/contract.py:24
        // assert op.Block.blk_proposer_payout(0), "proposer payout"
        int 0                                                                            0
        block BlkProposerPayout                                                          tmp%33#0
        assert // proposer payout
        // avm_11/contract.py:27
        // assert op.Global.payouts_enabled, "payouts_enabled"
        global PayoutsEnabled                                                            tmp%35#0
        assert // payouts_enabled
        // avm_11/contract.py:28
        // assert op.Global.payouts_go_online_fee, "payouts_go_online_fee"
        global PayoutsGoOnlineFee                                                        tmp%36#0
        assert // payouts_go_online_fee
        // avm_11/contract.py:29
        // assert op.Global.payouts_percent, "payouts_percent"
        global PayoutsPercent                                                            tmp%38#0
        assert // payouts_percent
        // avm_11/contract.py:30
        // assert op.Global.payouts_min_balance, "payouts_min_balance"
        global PayoutsMinBalance                                                         tmp%40#0
        assert // payouts_min_balance
        // avm_11/contract.py:31
        // assert op.Global.payouts_max_balance, "payouts_max_balance"
        global PayoutsMaxBalance                                                         tmp%42#0
        assert // payouts_max_balance
        // avm_11/contract.py:34
        // g, h = op.VoterParamsGet.voter_balance(0)
        int 0                                                                            0
        voter_params_get VoterBalance                                                    g#0,h#0
        pop 1                                                                            g#0
        pop 1
        // avm_11/contract.py:35
        // i, j = op.VoterParamsGet.voter_incentive_eligible(0)
        int 0                                                                            0
        voter_params_get VoterIncentiveEligible                                          i#0,j#0
        pop 1                                                                            i#0
        pop 1
        retsub


