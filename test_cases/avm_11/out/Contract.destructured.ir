contract test_cases.avm_11.contract.Contract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.avm_11.contract.Contract.__puya_arc4_router__() -> bool:
            block@0: // L9
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L9
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_new_ops()void" => block@2, * => return 0u}
            block@2: // test_new_ops_route_L11
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is not NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // can only call when not creating
                test_cases.avm_11.contract.Contract.test_new_ops()
                return 1u
            block@5: // bare_routing_L9
                let tmp%7#0: uint64 = (txn OnCompletion)
                goto tmp%7#0 ? block@9 : block@6
            block@6: // __algopy_default_create_L1
                let tmp%8#0: uint64 = (txn ApplicationID)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // can only call when creating
                return 1u
            block@9: // after_if_else_L9
                return 0u
        
        subroutine test_cases.avm_11.contract.Contract.test_new_ops() -> void:
            block@0: // L11
                let tmp%0#0: bytes = (bzero 1793u)
                let tmp%1#0: bool = (falcon_verify 0x 0x tmp%0#0)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (sumhash512 0x)
                let tmp%4#0: uint64 = (len tmp%3#0)
                (assert tmp%4#0)
                let tmp%6#0: uint64 = online_stake
                (assert tmp%6#0)
                let tmp%11#0: bytes = ((block BlkProposer) 0u)
                let tmp%12#0: bytes = (global ZeroAddress)
                let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
                (assert tmp%13#0) // proposer
                let tmp%14#0: uint64 = ((block BlkFeesCollected) 0u)
                (assert tmp%14#0) // fees collected
                let tmp%16#0: uint64 = ((block BlkBonus) 0u)
                (assert tmp%16#0) // bonus
                let tmp%18#0: bytes = ((block BlkBranch) 0u)
                let tmp%19#0: uint64 = (len tmp%18#0)
                (assert tmp%19#0) // branch
                let tmp%21#0: bytes = ((block BlkFeeSink) 0u)
                let tmp%22#0: bytes = (global ZeroAddress)
                let tmp%23#0: bool = (!= tmp%21#0 tmp%22#0)
                (assert tmp%23#0) // fee sink
                let tmp%24#0: bytes = ((block BlkProtocol) 0u)
                let tmp%25#0: uint64 = (len tmp%24#0)
                (assert tmp%25#0) // protocol
                let tmp%27#0: uint64 = ((block BlkTxnCounter) 0u)
                (assert tmp%27#0) // txn counter
                let tmp%29#0: uint64 = ((block BlkProposerPayout) 0u)
                (assert tmp%29#0) // proposer payout
                let tmp%31#0: bool = (global PayoutsEnabled)
                (assert tmp%31#0) // payouts_enabled
                let tmp%32#0: uint64 = (global PayoutsGoOnlineFee)
                (assert tmp%32#0) // payouts_go_online_fee
                let tmp%34#0: uint64 = (global PayoutsPercent)
                (assert tmp%34#0) // payouts_percent
                let tmp%36#0: uint64 = (global PayoutsMinBalance)
                (assert tmp%36#0) // payouts_min_balance
                let tmp%38#0: uint64 = (global PayoutsMaxBalance)
                (assert tmp%38#0) // payouts_max_balance
                let (g#0: uint64, h#0: bool) = ((voter_params_get VoterBalance) 0u)
                let (i#0: bool, j#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u