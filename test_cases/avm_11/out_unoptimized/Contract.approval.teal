#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    intc_0 // 0
    intc_1 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

create_ClearState:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

call_ClearState:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

create_OptIn:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

call_OptIn:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    b *NOT_IMPLEMENTED

create_NoOp:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    txn NumAppArgs
    intc_0 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.avm_11.contract.Contract.__algopy_default_create@22

after_inlined_test_cases.avm_11.contract.Contract.__algopy_default_create@22:
    intc_1 // 1
    return

else_body@8:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    txna ApplicationArgs 0
    pushbytes 0xc2b8dd8a // method "test_new_ops()void"
    uncover 1
    match test_new_ops_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    err // this contract does not implement the given ABI method for call NoOp

test_new_ops_route@3:
    // avm_11/contract.py:4
    // class Contract(ARC4Contract, avm_version=11):
    callsub test_new_ops
    b switch_case_next@5


// test_cases.avm_11.contract.Contract.test_new_ops[routing]() -> void:
test_new_ops:
    b test_new_ops_block@0

test_new_ops_block@0:
    // avm_11/contract.py:5
    // @arc4.abimethod
    callsub test_cases.avm_11.contract.Contract.test_new_ops
    intc_1 // 1
    return


// test_cases.avm_11.contract.Contract.test_new_ops() -> void:
test_cases.avm_11.contract.Contract.test_new_ops:
    // avm_11/contract.py:5-6
    // @arc4.abimethod
    // def test_new_ops(self) -> None:
    proto 0 0
    b test_cases.avm_11.contract.Contract.test_new_ops_block@0

test_cases.avm_11.contract.Contract.test_new_ops_block@0:
    // avm_11/contract.py:7-8
    // # op functions
    // assert op.online_stake()
    online_stake
    intc_0 // 0
    !=
    assert
    // avm_11/contract.py:9
    // assert op.mimc(op.MiMCConfigurations.BN254Mp110, op.bzero(32))
    pushint 32 // 32
    bzero
    mimc BN254Mp110
    len
    intc_0 // 0
    !=
    assert
    // avm_11/contract.py:16-17
    // # Block
    // assert not op.Block.blk_proposer(0), "proposer"
    intc_0 // 0
    block BlkProposer
    global ZeroAddress
    ==
    assert // proposer
    // avm_11/contract.py:18
    // assert op.Block.blk_fees_collected(0), "fees collected"
    intc_0 // 0
    block BlkFeesCollected
    intc_0 // 0
    !=
    assert // fees collected
    // avm_11/contract.py:19
    // assert op.Block.blk_bonus(0), "bonus"
    intc_0 // 0
    block BlkBonus
    intc_0 // 0
    !=
    assert // bonus
    // avm_11/contract.py:20
    // assert op.Block.blk_branch(0), "branch"
    intc_0 // 0
    block BlkBranch
    len
    intc_0 // 0
    !=
    assert // branch
    // avm_11/contract.py:21
    // assert op.Block.blk_fee_sink(0), "fee sink"
    intc_0 // 0
    block BlkFeeSink
    global ZeroAddress
    !=
    assert // fee sink
    // avm_11/contract.py:22
    // assert op.Block.blk_protocol(0), "protocol"
    intc_0 // 0
    block BlkProtocol
    len
    intc_0 // 0
    !=
    assert // protocol
    // avm_11/contract.py:23
    // assert op.Block.blk_txn_counter(0), "txn counter"
    intc_0 // 0
    block BlkTxnCounter
    intc_0 // 0
    !=
    assert // txn counter
    // avm_11/contract.py:24
    // assert op.Block.blk_proposer_payout(0), "proposer payout"
    intc_0 // 0
    block BlkProposerPayout
    intc_0 // 0
    !=
    assert // proposer payout
    // avm_11/contract.py:26-27
    // # Global
    // assert op.Global.payouts_enabled, "payouts_enabled"
    global PayoutsEnabled
    assert // payouts_enabled
    // avm_11/contract.py:28
    // assert op.Global.payouts_go_online_fee, "payouts_go_online_fee"
    global PayoutsGoOnlineFee
    intc_0 // 0
    !=
    assert // payouts_go_online_fee
    // avm_11/contract.py:29
    // assert op.Global.payouts_percent, "payouts_percent"
    global PayoutsPercent
    intc_0 // 0
    !=
    assert // payouts_percent
    // avm_11/contract.py:30
    // assert op.Global.payouts_min_balance, "payouts_min_balance"
    global PayoutsMinBalance
    intc_0 // 0
    !=
    assert // payouts_min_balance
    // avm_11/contract.py:31
    // assert op.Global.payouts_max_balance, "payouts_max_balance"
    global PayoutsMaxBalance
    intc_0 // 0
    !=
    assert // payouts_max_balance
    // avm_11/contract.py:33-34
    // # Voter params
    // g, h = op.VoterParamsGet.voter_balance(0)
    intc_0 // 0
    voter_params_get VoterBalance
    cover 1
    // avm_11/contract.py:35
    // i, j = op.VoterParamsGet.voter_incentive_eligible(0)
    intc_0 // 0
    voter_params_get VoterIncentiveEligible
    cover 1
    retsub
