#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1

main_block@1:
    // avm_11/contract.py:9
    // class Contract(ARC4Contract, avm_version=11):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // avm_11/contract.py:9
    // class Contract(ARC4Contract, avm_version=11):
    txna ApplicationArgs 0
    pushbytes 0xc2b8dd8a // method "test_new_ops()void"
    swap
    match main_test_new_ops_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // avm_11/contract.py:9
    // class Contract(ARC4Contract, avm_version=11):
    intc_0 // 0

main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11:
    return

main_test_new_ops_route@3:
    // avm_11/contract.py:10
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_new_ops
    intc_1 // 1
    b main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11

main_bare_routing@6:
    // avm_11/contract.py:9
    // class Contract(ARC4Contract, avm_version=11):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@12:

main_after_inlined_test_cases.avm_11.contract.Contract.__algopy_default_create@13:
    intc_1 // 1
    b main_after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router__@11


// test_cases.avm_11.contract.Contract.test_new_ops() -> void:
test_new_ops:
    // avm_11/contract.py:10-11
    // @arc4.abimethod
    // def test_new_ops(self) -> None:
    proto 0 0
    // avm_11/contract.py:12-13
    // # op functions
    // assert not op.falcon_verify(b"", b"", op.bzero(1793))
    pushint 1793 // 1793
    bzero
    pushbytes 0x
    dup
    uncover 2
    falcon_verify
    !
    assert
    // avm_11/contract.py:14
    // assert op.sumhash512(b"")
    pushbytes 0x
    sumhash512
    len
    intc_0 // 0
    !=
    assert
    // avm_11/contract.py:15
    // assert op.online_stake()
    online_stake
    intc_0 // 0
    !=
    assert
    // avm_11/contract.py:22-23
    // # Block
    // assert not op.Block.blk_proposer(0), "proposer"
    intc_0 // 0
    block BlkProposer
    global ZeroAddress
    ==
    assert // proposer
    // avm_11/contract.py:24
    // assert op.Block.blk_fees_collected(0), "fees collected"
    intc_0 // 0
    block BlkFeesCollected
    intc_0 // 0
    !=
    assert // fees collected
    // avm_11/contract.py:25
    // assert op.Block.blk_bonus(0), "bonus"
    intc_0 // 0
    block BlkBonus
    intc_0 // 0
    !=
    assert // bonus
    // avm_11/contract.py:26
    // assert op.Block.blk_branch(0), "branch"
    intc_0 // 0
    block BlkBranch
    len
    intc_0 // 0
    !=
    assert // branch
    // avm_11/contract.py:27
    // assert op.Block.blk_fee_sink(0), "fee sink"
    intc_0 // 0
    block BlkFeeSink
    global ZeroAddress
    !=
    assert // fee sink
    // avm_11/contract.py:28
    // assert op.Block.blk_protocol(0), "protocol"
    intc_0 // 0
    block BlkProtocol
    len
    intc_0 // 0
    !=
    assert // protocol
    // avm_11/contract.py:29
    // assert op.Block.blk_txn_counter(0), "txn counter"
    intc_0 // 0
    block BlkTxnCounter
    intc_0 // 0
    !=
    assert // txn counter
    // avm_11/contract.py:30
    // assert op.Block.blk_proposer_payout(0), "proposer payout"
    intc_0 // 0
    block BlkProposerPayout
    intc_0 // 0
    !=
    assert // proposer payout
    // avm_11/contract.py:32-33
    // # Global
    // assert op.Global.payouts_enabled, "payouts_enabled"
    global PayoutsEnabled
    assert // payouts_enabled
    // avm_11/contract.py:34
    // assert op.Global.payouts_go_online_fee, "payouts_go_online_fee"
    global PayoutsGoOnlineFee
    intc_0 // 0
    !=
    assert // payouts_go_online_fee
    // avm_11/contract.py:35
    // assert op.Global.payouts_percent, "payouts_percent"
    global PayoutsPercent
    intc_0 // 0
    !=
    assert // payouts_percent
    // avm_11/contract.py:36
    // assert op.Global.payouts_min_balance, "payouts_min_balance"
    global PayoutsMinBalance
    intc_0 // 0
    !=
    assert // payouts_min_balance
    // avm_11/contract.py:37
    // assert op.Global.payouts_max_balance, "payouts_max_balance"
    global PayoutsMaxBalance
    intc_0 // 0
    !=
    assert // payouts_max_balance
    // avm_11/contract.py:39-40
    // # Voter params
    // g, h = op.VoterParamsGet.voter_balance(0)
    intc_0 // 0
    voter_params_get VoterBalance
    popn 2
    // avm_11/contract.py:41
    // i, j = op.VoterParamsGet.voter_incentive_eligible(0)
    intc_0 // 0
    voter_params_get VoterIncentiveEligible
    popn 2
    retsub
