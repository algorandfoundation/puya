contract test_cases.avm_11.contract.Contract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.avm_11.contract.Contract.__puya_arc4_router__() -> bool:
            block@0: // L9
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@5
            block@1: // abi_routing_L9
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_new_ops()void" => block@2, * => block@3}
            block@2: // test_new_ops_route_L11
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                test_cases.avm_11.contract.Contract.test_new_ops()
                return 1u
            block@3: // switch_case_default_L9
                goto block@4
            block@4: // switch_case_next_L9
                goto block@9
            block@5: // bare_routing_L9
                let tmp%7#0: uint64 = (txn OnCompletion)
                switch tmp%7#0 {0u => block@6, * => block@7}
            block@6: // __algopy_default_create_L1
                let tmp%8#0: uint64 = (txn ApplicationID)
                let tmp%9#0: bool = (== tmp%8#0 0u)
                (assert tmp%9#0) // is creating
                test_cases.avm_11.contract.Contract.__algopy_default_create()
                return 1u
            block@7: // switch_case_default_L9
                goto block@8
            block@8: // switch_case_next_L9
                goto block@9
            block@9: // after_if_else_L9
                return 0u
        
        subroutine test_cases.avm_11.contract.Contract.test_new_ops() -> void:
            block@0: // L11
                let tmp%0#0: bytes = (bzero 1793u)
                let tmp%1#0: bool = (falcon_verify 0x 0x tmp%0#0)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (sumhash512 0x)
                let tmp%4#0: uint64 = (len tmp%3#0)
                let tmp%5#0: bool = (!= tmp%4#0 0u)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = online_stake
                let tmp%7#0: bool = (!= tmp%6#0 0u)
                (assert tmp%7#0)
                let tmp%11#0: bytes = ((block BlkProposer) 0u)
                let tmp%12#0: bytes = (global ZeroAddress)
                let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
                (assert tmp%13#0) // proposer
                let tmp%14#0: uint64 = ((block BlkFeesCollected) 0u)
                let tmp%15#0: bool = (!= tmp%14#0 0u)
                (assert tmp%15#0) // fees collected
                let tmp%16#0: uint64 = ((block BlkBonus) 0u)
                let tmp%17#0: bool = (!= tmp%16#0 0u)
                (assert tmp%17#0) // bonus
                let tmp%18#0: bytes = ((block BlkBranch) 0u)
                let tmp%19#0: uint64 = (len tmp%18#0)
                let tmp%20#0: bool = (!= tmp%19#0 0u)
                (assert tmp%20#0) // branch
                let tmp%21#0: bytes = ((block BlkFeeSink) 0u)
                let tmp%22#0: bytes = (global ZeroAddress)
                let tmp%23#0: bool = (!= tmp%21#0 tmp%22#0)
                (assert tmp%23#0) // fee sink
                let tmp%24#0: bytes = ((block BlkProtocol) 0u)
                let tmp%25#0: uint64 = (len tmp%24#0)
                let tmp%26#0: bool = (!= tmp%25#0 0u)
                (assert tmp%26#0) // protocol
                let tmp%27#0: uint64 = ((block BlkTxnCounter) 0u)
                let tmp%28#0: bool = (!= tmp%27#0 0u)
                (assert tmp%28#0) // txn counter
                let tmp%29#0: uint64 = ((block BlkProposerPayout) 0u)
                let tmp%30#0: bool = (!= tmp%29#0 0u)
                (assert tmp%30#0) // proposer payout
                let tmp%31#0: bool = (global PayoutsEnabled)
                (assert tmp%31#0) // payouts_enabled
                let tmp%32#0: uint64 = (global PayoutsGoOnlineFee)
                let tmp%33#0: bool = (!= tmp%32#0 0u)
                (assert tmp%33#0) // payouts_go_online_fee
                let tmp%34#0: uint64 = (global PayoutsPercent)
                let tmp%35#0: bool = (!= tmp%34#0 0u)
                (assert tmp%35#0) // payouts_percent
                let tmp%36#0: uint64 = (global PayoutsMinBalance)
                let tmp%37#0: bool = (!= tmp%36#0 0u)
                (assert tmp%37#0) // payouts_min_balance
                let tmp%38#0: uint64 = (global PayoutsMaxBalance)
                let tmp%39#0: bool = (!= tmp%38#0 0u)
                (assert tmp%39#0) // payouts_max_balance
                let (tuple_assignment%6#0: uint64, tuple_assignment%7#0: bool) = ((voter_params_get VoterBalance) 0u)
                let (tuple_assignment%8#0: bool, tuple_assignment%9#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
                return 
        
        subroutine test_cases.avm_11.contract.Contract.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u