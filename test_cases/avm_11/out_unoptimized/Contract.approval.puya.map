{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAL;;;;;;AAGe;AAAA;AAAA;AAAP;AAC0D;;AAAT;AAA1C;;AAAA;AAAA;AAAA;AAAP;AAQiC;AAAtB;;AAAJ;;AAAA;AAAP;AACmC;AAA5B;;AAAA;AAAA;AAAP;AAC0B;AAAnB;;AAAA;AAAA;AAAP;AAC2B;AAApB;;AAAA;AAAA;AAAA;AAAP;AAC6B;AAAtB;;AAAA;;AAAA;AAAP;AAC6B;AAAtB;;AAAA;AAAA;AAAA;AAAP;AACgC;AAAzB;;AAAA;AAAA;AAAP;AACoC;AAA7B;;AAAA;AAAA;AAAP;AAGO;;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AAGuC;AAAhC;;AAAA;;AAC2C;AAA3C;;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b block@0"
    },
    "8": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "11": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz __algopy_default_create@6",
      "stack_out": []
    },
    "18": {
      "op": "b abi_routing@2"
    },
    "21": {
      "block": "abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0xc2b8dd8a // method \"test_new_ops()void\"",
      "defined_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_new_ops()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match test_new_ops_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b switch_case_default@4"
    },
    "39": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "42": {
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "b after_if_else@7"
    },
    "45": {
      "block": "after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "46": {
      "block": "test_new_ops_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "52": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "53": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "54": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "test_cases.avm_11.contract.Contract.test_new_ops[routing]",
      "op": "callsub test_new_ops"
    },
    "59": {
      "op": "b switch_case_next@5"
    },
    "62": {
      "block": "__algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "64": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "66": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "69": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "70": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "71": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "72": {
      "op": "b block@9"
    },
    "75": {
      "block": "block@9",
      "stack_in": [],
      "op": "b after_inlined_test_cases.avm_11.contract.Contract.__algopy_default_create@10"
    },
    "78": {
      "block": "after_inlined_test_cases.avm_11.contract.Contract.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "subroutine": "test_cases.avm_11.contract.Contract.test_new_ops[routing]",
      "params": {},
      "block": "test_new_ops",
      "stack_in": [],
      "op": "b test_new_ops_block@0"
    },
    "83": {
      "block": "test_new_ops_block@0",
      "stack_in": [],
      "callsub": "test_cases.avm_11.contract.Contract.test_new_ops",
      "op": "callsub test_cases.avm_11.contract.Contract.test_new_ops"
    },
    "86": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    },
    "88": {
      "subroutine": "test_cases.avm_11.contract.Contract.test_new_ops",
      "params": {},
      "block": "test_cases.avm_11.contract.Contract.test_new_ops",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "91": {
      "op": "b test_cases.avm_11.contract.Contract.test_new_ops_block@0"
    },
    "94": {
      "block": "test_cases.avm_11.contract.Contract.test_new_ops_block@0",
      "stack_in": [],
      "op": "online_stake",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "96": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "97": {
      "op": "assert",
      "stack_out": []
    },
    "98": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "32"
      ]
    },
    "100": {
      "op": "bzero",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "101": {
      "op": "mimc BN254Mp110",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "103": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "104": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "105": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "106": {
      "op": "assert",
      "stack_out": []
    },
    "107": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "108": {
      "op": "block BlkProposer",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "110": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "113": {
      "error": "proposer",
      "op": "assert // proposer",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "115": {
      "op": "block BlkFeesCollected",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "118": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "119": {
      "error": "fees collected",
      "op": "assert // fees collected",
      "stack_out": []
    },
    "120": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "121": {
      "op": "block BlkBonus",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "124": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "125": {
      "error": "bonus",
      "op": "assert // bonus",
      "stack_out": []
    },
    "126": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "127": {
      "op": "block BlkBranch",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "129": {
      "op": "len",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "131": {
      "op": "!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "132": {
      "error": "branch",
      "op": "assert // branch",
      "stack_out": []
    },
    "133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "134": {
      "op": "block BlkFeeSink",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "136": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "138": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "139": {
      "error": "fee sink",
      "op": "assert // fee sink",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "141": {
      "op": "block BlkProtocol",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "143": {
      "op": "len",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "145": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "146": {
      "error": "protocol",
      "op": "assert // protocol",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "148": {
      "op": "block BlkTxnCounter",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%31#0",
        "0"
      ]
    },
    "151": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "152": {
      "error": "txn counter",
      "op": "assert // txn counter",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "154": {
      "op": "block BlkProposerPayout",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "157": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "158": {
      "error": "proposer payout",
      "op": "assert // proposer payout",
      "stack_out": []
    },
    "159": {
      "op": "global PayoutsEnabled",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "161": {
      "error": "payouts_enabled",
      "op": "assert // payouts_enabled",
      "stack_out": []
    },
    "162": {
      "op": "global PayoutsGoOnlineFee",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "0"
      ]
    },
    "165": {
      "op": "!=",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "166": {
      "error": "payouts_go_online_fee",
      "op": "assert // payouts_go_online_fee",
      "stack_out": []
    },
    "167": {
      "op": "global PayoutsPercent",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%38#0",
        "0"
      ]
    },
    "170": {
      "op": "!=",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "171": {
      "error": "payouts_percent",
      "op": "assert // payouts_percent",
      "stack_out": []
    },
    "172": {
      "op": "global PayoutsMinBalance",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "174": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "175": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "176": {
      "error": "payouts_min_balance",
      "op": "assert // payouts_min_balance",
      "stack_out": []
    },
    "177": {
      "op": "global PayoutsMaxBalance",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%42#0",
        "0"
      ]
    },
    "180": {
      "op": "!=",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "181": {
      "error": "payouts_max_balance",
      "op": "assert // payouts_max_balance",
      "stack_out": []
    },
    "182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "183": {
      "op": "voter_params_get VoterBalance",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "185": {
      "op": "cover 1",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0"
      ]
    },
    "187": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "0"
      ]
    },
    "188": {
      "op": "voter_params_get VoterIncentiveEligible",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "190": {
      "op": "cover 1",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%46#0"
      ]
    },
    "192": {
      "retsub": true,
      "op": "retsub"
    }
  }
}