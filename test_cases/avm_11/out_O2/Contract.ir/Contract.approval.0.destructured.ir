main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_new_ops()void" => block@3, * => block@10}
    block@3: // test_new_ops_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#1: uint64 = online_stake
        (assert tmp%0#1)
        let tmp%2#0: bytes = (bzero 32u)
        let tmp%3#1: bytes = ((mimc BN254Mp110) tmp%2#0)
        let tmp%15#0: bytes[32] = ((block BlkProposer) 0u)
        let tmp%16#0: bytes[32] = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // proposer
        let tmp%18#0: uint64 = ((block BlkFeesCollected) 0u)
        (assert tmp%18#0) // fees collected
        let tmp%20#0: uint64 = ((block BlkBonus) 0u)
        (assert tmp%20#0) // bonus
        let tmp%25#0: bytes[32] = ((block BlkFeeSink) 0u)
        let tmp%26#0: bytes[32] = (global ZeroAddress)
        let tmp%27#0: bool = (!= tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // fee sink
        let tmp%28#0: bytes = ((block BlkProtocol) 0u)
        let tmp%29#0: uint64 = (len tmp%28#0)
        (assert tmp%29#0) // protocol
        let tmp%31#0: uint64 = ((block BlkTxnCounter) 0u)
        (assert tmp%31#0) // txn counter
        let tmp%33#0: uint64 = ((block BlkProposerPayout) 0u)
        (assert tmp%33#0) // proposer payout
        let tmp%35#0: bool = (global PayoutsEnabled)
        (assert tmp%35#0) // payouts_enabled
        let tmp%36#0: uint64 = (global PayoutsGoOnlineFee)
        (assert tmp%36#0) // payouts_go_online_fee
        let tmp%38#0: uint64 = (global PayoutsPercent)
        (assert tmp%38#0) // payouts_percent
        let tmp%40#0: uint64 = (global PayoutsMinBalance)
        (assert tmp%40#0) // payouts_min_balance
        let tmp%42#0: uint64 = (global PayoutsMaxBalance)
        (assert tmp%42#0) // payouts_max_balance
        let (g#0: uint64, h#0: bool) = ((voter_params_get VoterBalance) 0u)
        let (i#0: bool, j#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
        let test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L4
        let test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.avm_11.contract.Contract.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.avm_11.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0