main test_cases.literals.folding.LiteralFolding.approval_program:
    block@0: // L94
        test_cases.literals.folding.unary_str()
        test_cases.literals.folding.compare_str()
        test_cases.literals.folding.binary_op_str()
        test_cases.literals.folding.unary_bytes()
        test_cases.literals.folding.unary_int()
        test_cases.literals.folding.compare_int()
        test_cases.literals.folding.unary_bool()
        test_cases.literals.folding.tuples()
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#0 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%4#0: uint64 = (len item#0)
        let tmp%5#0: uint64 = (+ start#0 tmp%4#0)
        let tmp%6#0: bytes = (substring3 sequence#0 start#0 tmp%5#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let tmp%8#0: uint64 = (+ start#0 1u)
        let start#0: uint64 = tmp%8#0
        goto block@1
    block@5: // after_while_L11
        return 0u

subroutine test_cases.literals.folding.unary_str() -> void:
    block@0: // L5
        return 

subroutine test_cases.literals.folding.compare_str() -> void:
    block@0: // L11
        let tmp%0#0: bool = (! 0u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (! 0u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (! 0u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (! 0u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== "b" "a")
        let tmp%5#0: bool = (! tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: bool = (!= "b" "a")
        (assert tmp%6#0)
        let tmp%7#0: bool = _puya_lib.bytes_.is_substring("a", "b")
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = _puya_lib.bytes_.is_substring("a", "b")
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: bool = _puya_lib.bytes_.is_substring("a", "abc")
        (assert tmp%11#0)
        return 

subroutine test_cases.literals.folding.binary_op_str() -> void:
    block@0: // L31
        return 

subroutine test_cases.literals.folding.unary_bytes() -> void:
    block@0: // L41
        return 

subroutine test_cases.literals.folding.unary_int() -> void:
    block@0: // L47
        return 

subroutine test_cases.literals.folding.compare_int() -> void:
    block@0: // L56
        let tmp%0#0: bool = (! 0u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (! 0u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (! 0u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== 1u 0u)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (!= 1u 0u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (> 1u 0u)
        (assert tmp%6#0)
        let tmp%7#0: bool = (>= 1u 0u)
        (assert tmp%7#0)
        let tmp%8#0: bool = (< 1u 0u)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0)
        let tmp%10#0: bool = (<= 1u 0u)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.literals.folding.unary_bool() -> void:
    block@0: // L74
        return 

subroutine test_cases.literals.folding.tuples() -> void:
    block@0: // L83
        let tmp%0#0: bool = (== 98u 98u)
        let tmp%1#0: bool = (&& 1u tmp%0#0)
        let tmp%2#0: bool = (&& tmp%1#0 1u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (&& 1u 1u)
        let tmp%4#0: bool = (&& tmp%3#0 1u)
        (assert tmp%4#0)
        let aggregate%encoded%0#1: bytes = (concat 0x 0x0000000000000061)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 0x0000000000000062)
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 0x0000000000000063)
        let aggregate%as_Encoded(uint64[3])%0#1: Encoded(uint64[3]) = aggregate%encoded%2#1
        let encoded_array%0#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#1
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 encoded_array%0#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let reinterpret_biguint%0#0: biguint = array_item%0#0
        let tmp%5#0: bool = (b== reinterpret_biguint%0#0 0x0000000000000061)
        let aggregate%bytes_offset%1#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 encoded_array%0#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let reinterpret_biguint%2#0: biguint = array_item%1#0
        let tmp%6#0: biguint = (itob 98u)
        let tmp%7#0: bool = (b== reinterpret_biguint%2#0 tmp%6#0)
        let tmp%8#0: bool = (&& tmp%5#0 tmp%7#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 encoded_array%0#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let reinterpret_biguint%3#0: biguint = array_item%2#0
        let tmp%9#0: bool = (b== reinterpret_biguint%3#0 0x0000000000000063)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: bool = (&& 1u 1u)
        (assert tmp%11#0)
        return 