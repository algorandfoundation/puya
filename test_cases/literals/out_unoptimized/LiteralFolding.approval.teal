#pragma version 10

test_cases.literals.folding.LiteralFolding.approval_program:
    // literals/folding.py:89
    // unary_str()
    callsub unary_str
    // literals/folding.py:90
    // compare_str()
    callsub compare_str
    // literals/folding.py:91
    // binary_op_str()
    callsub binary_op_str
    // literals/folding.py:92
    // unary_bytes()
    callsub unary_bytes
    // literals/folding.py:93
    // unary_int()
    callsub unary_int
    // literals/folding.py:94
    // compare_int()
    callsub compare_int
    // literals/folding.py:95
    // unary_bool()
    callsub unary_bool
    // literals/folding.py:96
    // return True
    int 1
    return


// test_cases.literals.folding.unary_str() -> void:
unary_str:
    // literals/folding.py:5-6
    // @subroutine
    // def unary_str() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_str() -> void:
compare_str:
    // literals/folding.py:11-12
    // @subroutine
    // def compare_str() -> None:
    proto 0 0
    // literals/folding.py:13
    // assert not ("a" == "b")  # type: ignore[comparison-overlap]
    int 0
    !
    assert
    // literals/folding.py:17
    // assert not ("a" > "b")
    int 0
    !
    assert
    // literals/folding.py:18
    // assert not ("a" >= "b")
    int 0
    !
    assert
    // literals/folding.py:19
    // assert "a" not in "b"
    int 0
    !
    assert
    // literals/folding.py:20
    // assert not ("a" in "b")
    int 0
    !
    assert
    // literals/folding.py:23
    // b = String("b")
    byte "b"
    // literals/folding.py:24
    // assert not ("a" == b)
    byte "a"
    ==
    !
    assert
    // literals/folding.py:23
    // b = String("b")
    byte "b"
    // literals/folding.py:25
    // assert "a" != b
    byte "a"
    !=
    assert
    // literals/folding.py:26
    // assert "a" not in b
    byte "a"
    // literals/folding.py:23
    // b = String("b")
    byte "b"
    // literals/folding.py:26
    // assert "a" not in b
    callsub is_substring
    !
    assert
    // literals/folding.py:27
    // assert not ("a" in b)
    byte "a"
    // literals/folding.py:23
    // b = String("b")
    byte "b"
    // literals/folding.py:27
    // assert not ("a" in b)
    callsub is_substring
    !
    assert
    // literals/folding.py:28
    // assert "a" in String("abc")
    byte "a"
    byte "abc"
    callsub is_substring
    assert
    retsub


// algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    // <algopy>/algopy_lib_bytes.py:4-5
    proto 2 1
    // <algopy>/algopy_lib_bytes.py:10
    int 0

is_substring_while_top@1:
    // <algopy>/algopy_lib_bytes.py:11
    frame_dig -2
    len
    frame_dig 0
    swap
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    // <algopy>/algopy_lib_bytes.py:12
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    swap
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    swap
    ==
    bz is_substring_after_if_else@4
    // <algopy>/algopy_lib_bytes.py:13
    int 1
    swap
    retsub

is_substring_after_if_else@4:
    // <algopy>/algopy_lib_bytes.py:14
    frame_dig 0
    int 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    // <algopy>/algopy_lib_bytes.py:15
    int 0
    swap
    retsub


// test_cases.literals.folding.binary_op_str() -> void:
binary_op_str:
    // literals/folding.py:33-34
    // @subroutine
    // def binary_op_str() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_bytes() -> void:
unary_bytes:
    // literals/folding.py:43-44
    // @subroutine
    // def unary_bytes() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_int() -> void:
unary_int:
    // literals/folding.py:49-50
    // @subroutine
    // def unary_int() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_int() -> void:
compare_int:
    // literals/folding.py:58-59
    // @subroutine
    // def compare_int() -> None:
    proto 0 0
    // literals/folding.py:60
    // assert not (0 == 1)  # type: ignore[comparison-overlap]
    int 0
    !
    assert
    // literals/folding.py:64
    // assert not (0 > 1)
    int 0
    !
    assert
    // literals/folding.py:65
    // assert not (0 >= 1)
    int 0
    !
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:68
    // assert not (0 == one)
    int 0
    ==
    !
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:69
    // assert 0 != one
    int 0
    !=
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:70
    // assert 0 < one
    int 0
    >
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:71
    // assert 0 <= one
    int 0
    >=
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:72
    // assert not (0 > one)
    int 0
    <
    !
    assert
    // literals/folding.py:67
    // one = UInt64(1)
    int 1
    // literals/folding.py:73
    // assert not (0 >= one)
    int 0
    <=
    !
    assert
    retsub


// test_cases.literals.folding.unary_bool() -> void:
unary_bool:
    // literals/folding.py:77-78
    // @subroutine
    // def unary_bool() -> None:
    proto 0 0
    retsub
