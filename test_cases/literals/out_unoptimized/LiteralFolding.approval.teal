#pragma version 10

test_cases.literals.folding.LiteralFolding.approval_program:
    intcblock 0 1 8 98
    bytecblock "a" "b" 0x 0x0000000000000061 0x0000000000000063
    // literals/folding.py:95
    // unary_str()
    callsub unary_str
    // literals/folding.py:96
    // compare_str()
    callsub compare_str
    // literals/folding.py:97
    // binary_op_str()
    callsub binary_op_str
    // literals/folding.py:98
    // unary_bytes()
    callsub unary_bytes
    // literals/folding.py:99
    // unary_int()
    callsub unary_int
    // literals/folding.py:100
    // compare_int()
    callsub compare_int
    // literals/folding.py:101
    // unary_bool()
    callsub unary_bool
    // literals/folding.py:102
    // tuples()
    callsub tuples
    // literals/folding.py:103
    // return True
    intc_1 // 1
    return


// test_cases.literals.folding.unary_str() -> void:
unary_str:
    // literals/folding.py:5-6
    // @subroutine
    // def unary_str() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_str() -> void:
compare_str:
    // literals/folding.py:11-12
    // @subroutine
    // def compare_str() -> None:
    proto 0 0
    // literals/folding.py:13
    // assert not ("a" == "b")  # type: ignore[comparison-overlap]
    intc_0 // 0
    !
    assert
    // literals/folding.py:17
    // assert not ("a" > "b")
    intc_0 // 0
    !
    assert
    // literals/folding.py:18
    // assert not ("a" >= "b")
    intc_0 // 0
    !
    assert
    // literals/folding.py:20
    // assert not ("a" in "b")
    intc_0 // 0
    !
    assert
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:24
    // assert not ("a" == b)
    bytec_0 // "a"
    ==
    !
    assert
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:25
    // assert "a" != b
    bytec_0 // "a"
    !=
    assert
    // literals/folding.py:26
    // assert "a" not in b
    bytec_0 // "a"
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:26
    // assert "a" not in b
    callsub is_substring
    !
    assert
    // literals/folding.py:27
    // assert not ("a" in b)
    bytec_0 // "a"
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:27
    // assert not ("a" in b)
    callsub is_substring
    !
    assert
    // literals/folding.py:28
    // assert "a" in String("abc")
    bytec_0 // "a"
    pushbytes "abc"
    callsub is_substring
    assert
    retsub


// test_cases.literals.folding.binary_op_str() -> void:
binary_op_str:
    // literals/folding.py:31-32
    // @subroutine
    // def binary_op_str() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_bytes() -> void:
unary_bytes:
    // literals/folding.py:41-42
    // @subroutine
    // def unary_bytes() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_int() -> void:
unary_int:
    // literals/folding.py:47-48
    // @subroutine
    // def unary_int() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_int() -> void:
compare_int:
    // literals/folding.py:56-57
    // @subroutine
    // def compare_int() -> None:
    proto 0 0
    // literals/folding.py:58
    // assert not (0 == 1)  # type: ignore[comparison-overlap]
    intc_0 // 0
    !
    assert
    // literals/folding.py:62
    // assert not (0 > 1)
    intc_0 // 0
    !
    assert
    // literals/folding.py:63
    // assert not (0 >= 1)
    intc_0 // 0
    !
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:66
    // assert not (0 == one)
    intc_0 // 0
    ==
    !
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:67
    // assert 0 != one
    intc_0 // 0
    !=
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:68
    // assert 0 < one
    intc_0 // 0
    >
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:69
    // assert 0 <= one
    intc_0 // 0
    >=
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:70
    // assert not (0 > one)
    intc_0 // 0
    <
    !
    assert
    // literals/folding.py:65
    // one = UInt64(1)
    intc_1 // 1
    // literals/folding.py:71
    // assert not (0 >= one)
    intc_0 // 0
    <=
    !
    assert
    retsub


// test_cases.literals.folding.unary_bool() -> void:
unary_bool:
    // literals/folding.py:74-75
    // @subroutine
    // def unary_bool() -> None:
    proto 0 0
    retsub


// test_cases.literals.folding.tuples() -> void:
tuples:
    // literals/folding.py:83-84
    // @subroutine
    // def tuples() -> None:
    proto 0 0
    // literals/folding.py:85
    // assert (97, UInt64(98), 99) == tuple(b"abc")  # type: ignore[comparison-overlap]
    intc_3 // 98
    dup
    ==
    intc_1 // 1
    &&
    intc_1 // 1
    &&
    assert
    // literals/folding.py:86
    // assert ("a", "b", "c") == tuple("abc")
    intc_1 // 1
    dup
    &&
    intc_1 // 1
    &&
    assert
    // literals/folding.py:88
    // arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    bytec_2 // 0x
    bytec_3 // 0x0000000000000061
    concat
    pushbytes 0x0000000000000062
    concat
    bytec 4 // 0x0000000000000063
    concat
    bytec_2 // 0x
    swap
    concat
    dup
    intc_0 // 0
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    // literals/folding.py:87
    // assert (97, UInt64(98), 99) == tuple(
    bytec_3 // 0x0000000000000061
    // literals/folding.py:87-89
    // assert (97, UInt64(98), 99) == tuple(
    //     arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    // )  # type: ignore[comparison-overlap]
    b==
    swap
    // literals/folding.py:88
    // arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    dup
    intc_1 // 1
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    // literals/folding.py:87
    // assert (97, UInt64(98), 99) == tuple(
    intc_3 // 98
    // literals/folding.py:87-89
    // assert (97, UInt64(98), 99) == tuple(
    //     arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    // )  # type: ignore[comparison-overlap]
    itob
    b==
    uncover 2
    &&
    // literals/folding.py:88
    // arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    swap
    pushint 2 // 2
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    // literals/folding.py:87
    // assert (97, UInt64(98), 99) == tuple(
    bytec 4 // 0x0000000000000063
    // literals/folding.py:87-89
    // assert (97, UInt64(98), 99) == tuple(
    //     arc4.StaticArray(arc4.UInt64(97), arc4.UInt64(98), arc4.UInt64(99))
    // )  # type: ignore[comparison-overlap]
    b==
    &&
    assert
    // literals/folding.py:90
    // assert (1, 2) == tuple((1, 2))
    intc_1 // 1
    dup
    &&
    assert
    retsub


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    intc_0 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 0
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4
    intc_1 // 1
    swap
    retsub

is_substring_after_if_else@4:
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_0 // 0
    swap
    retsub
