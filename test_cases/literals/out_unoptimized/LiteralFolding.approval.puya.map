{
  "version": 3,
  "sources": [
    "../folding.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FQ;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACO;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1FQ;AAAL;AAAP;AAIY;AAAL;AAAP;AACY;AAAL;AAAP;AAEY;AAAL;AAAP;AAGI;AACQ;AAAA;AAAL;AAAP;AADI;AAEG;AAAA;AAAP;AACO;AAHH;AAGG;;;AAAA;AAAP;AACY;AAJR;AAIQ;;;AAAL;AAAP;AACO;AAAO;;;;;AAAP;;;AAAP;;;;;;;;;;;;;;;;;AA8BY;AAAL;AAAP;AAIY;AAAL;AAAP;AACY;AAAL;AAAP;AAEM;AACM;AAAA;AAAL;AAAP;AADM;AAEC;AAAA;AAAP;AAFM;AAGC;AAAA;AAAP;AAHM;AAIC;AAAA;AAAP;AAJM;AAKM;AAAA;AAAL;AAAP;AALM;AAMM;AAAA;AAAL;AAAP;;;;;;;;;AAcY;AAAyB;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAEI;;AAAiB;AAAjB;AAAkC;;;;;;;;;;AAAlC;AAAmD;AAAnD;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AADI;AAAD;AAAA;;AACH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AADQ;AAAL;AAAA;AAAA;;AAAA;AACH;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AADoB;AAAjB;AAAA;AAAP;AAGO;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.literals.folding.LiteralFolding.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 98"
    },
    "7": {
      "op": "bytecblock \"a\" \"b\" 0x0000000000000061 0x0000000000000063"
    },
    "31": {
      "op": "b block@0"
    },
    "34": {
      "block": "block@0",
      "stack_in": [],
      "callsub": "test_cases.literals.folding.unary_str",
      "op": "callsub unary_str"
    },
    "37": {
      "callsub": "test_cases.literals.folding.compare_str",
      "op": "callsub compare_str"
    },
    "40": {
      "callsub": "test_cases.literals.folding.binary_op_str",
      "op": "callsub binary_op_str"
    },
    "43": {
      "callsub": "test_cases.literals.folding.unary_bytes",
      "op": "callsub unary_bytes"
    },
    "46": {
      "callsub": "test_cases.literals.folding.unary_int",
      "op": "callsub unary_int"
    },
    "49": {
      "callsub": "test_cases.literals.folding.compare_int",
      "op": "callsub compare_int"
    },
    "52": {
      "callsub": "test_cases.literals.folding.unary_bool",
      "op": "callsub unary_bool"
    },
    "55": {
      "callsub": "test_cases.literals.folding.tuples",
      "op": "callsub tuples"
    },
    "58": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "59": {
      "op": "return",
      "stack_out": []
    },
    "60": {
      "subroutine": "_puya_lib.bytes_.is_substring",
      "params": {
        "item#0": "bytes",
        "sequence#0": "bytes"
      },
      "block": "is_substring",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "63": {
      "op": "b is_substring_block@0"
    },
    "66": {
      "block": "is_substring_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [],
      "stack_out": [
        "start#0"
      ]
    },
    "67": {
      "op": "b is_substring_while_top@1"
    },
    "70": {
      "block": "is_substring_while_top@1",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "item#0 (copy)"
      ]
    },
    "72": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "frame_dig 0",
      "defined_out": [
        "start#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%0#0",
        "start#0"
      ]
    },
    "75": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0"
      ]
    },
    "76": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0",
        "sequence#0 (copy)"
      ]
    },
    "78": {
      "op": "len",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "<=",
      "defined_out": [
        "start#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%3#0"
      ]
    },
    "80": {
      "op": "bz is_substring_after_while@5",
      "stack_out": [
        "start#0"
      ]
    },
    "83": {
      "op": "b is_substring_while_body@2"
    },
    "86": {
      "block": "is_substring_while_body@2",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "item#0 (copy)"
      ]
    },
    "88": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0"
      ]
    },
    "89": {
      "op": "frame_dig 0",
      "defined_out": [
        "start#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0",
        "start#0"
      ]
    },
    "91": {
      "op": "dup",
      "defined_out": [
        "start#0",
        "start#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0",
        "start#0 (copy)",
        "start#0 (copy)"
      ]
    },
    "92": {
      "op": "cover 2",
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%4#0",
        "start#0 (copy)"
      ]
    },
    "94": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%5#0"
      ]
    },
    "95": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%5#0",
        "sequence#0 (copy)"
      ]
    },
    "97": {
      "op": "uncover 2",
      "stack_out": [
        "start#0",
        "tmp%5#0",
        "sequence#0 (copy)",
        "start#0"
      ]
    },
    "99": {
      "op": "uncover 2",
      "stack_out": [
        "start#0",
        "sequence#0 (copy)",
        "start#0",
        "tmp%5#0"
      ]
    },
    "101": {
      "op": "substring3",
      "defined_out": [
        "start#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%6#0"
      ]
    },
    "102": {
      "op": "frame_dig -2",
      "stack_out": [
        "start#0",
        "tmp%6#0",
        "item#0 (copy)"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "start#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%7#0"
      ]
    },
    "105": {
      "op": "bz is_substring_after_if_else@4",
      "stack_out": [
        "start#0"
      ]
    },
    "108": {
      "op": "b is_substring_if_body@3"
    },
    "111": {
      "block": "is_substring_if_body@3",
      "stack_in": [
        "start#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "start#0",
        "1"
      ]
    },
    "112": {
      "op": "uncover 1"
    },
    "114": {
      "retsub": true,
      "op": "retsub"
    },
    "115": {
      "block": "is_substring_after_if_else@4",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "start#0"
      ]
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "1"
      ]
    },
    "118": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%8#0"
      ]
    },
    "119": {
      "op": "frame_bury 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0"
      ]
    },
    "121": {
      "op": "b is_substring_while_top@1"
    },
    "124": {
      "block": "is_substring_after_while@5",
      "stack_in": [
        "start#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "start#0",
        "0"
      ]
    },
    "125": {
      "op": "uncover 1"
    },
    "127": {
      "retsub": true,
      "op": "retsub"
    },
    "128": {
      "subroutine": "test_cases.literals.folding.unary_str",
      "params": {},
      "block": "unary_str",
      "stack_in": [],
      "op": "b unary_str_block@0"
    },
    "131": {
      "block": "unary_str_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "132": {
      "subroutine": "test_cases.literals.folding.compare_str",
      "params": {},
      "block": "compare_str",
      "stack_in": [],
      "op": "b compare_str_block@0"
    },
    "135": {
      "block": "compare_str_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "assert",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "140": {
      "op": "assert",
      "stack_out": []
    },
    "141": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "143": {
      "op": "assert",
      "stack_out": []
    },
    "144": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "145": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "146": {
      "op": "assert",
      "stack_out": []
    },
    "147": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "148": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "\"b\""
      ],
      "stack_out": [
        "\"b\"",
        "\"a\""
      ]
    },
    "149": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "151": {
      "op": "assert",
      "stack_out": []
    },
    "152": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "153": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"b\"",
        "\"a\""
      ]
    },
    "154": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "155": {
      "op": "assert",
      "stack_out": []
    },
    "156": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "157": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "158": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "162": {
      "op": "assert",
      "stack_out": []
    },
    "163": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "164": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "165": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": []
    },
    "170": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "171": {
      "op": "pushbytes \"abc\"",
      "defined_out": [
        "\"a\"",
        "\"abc\""
      ],
      "stack_out": [
        "\"a\"",
        "\"abc\""
      ]
    },
    "176": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "179": {
      "op": "assert",
      "stack_out": []
    },
    "180": {
      "retsub": true,
      "op": "retsub"
    },
    "181": {
      "subroutine": "test_cases.literals.folding.binary_op_str",
      "params": {},
      "block": "binary_op_str",
      "stack_in": [],
      "op": "b binary_op_str_block@0"
    },
    "184": {
      "block": "binary_op_str_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "185": {
      "subroutine": "test_cases.literals.folding.unary_bytes",
      "params": {},
      "block": "unary_bytes",
      "stack_in": [],
      "op": "b unary_bytes_block@0"
    },
    "188": {
      "block": "unary_bytes_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "189": {
      "subroutine": "test_cases.literals.folding.unary_int",
      "params": {},
      "block": "unary_int",
      "stack_in": [],
      "op": "b unary_int_block@0"
    },
    "192": {
      "block": "unary_int_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "193": {
      "subroutine": "test_cases.literals.folding.compare_int",
      "params": {},
      "block": "compare_int",
      "stack_in": [],
      "op": "b compare_int_block@0"
    },
    "196": {
      "block": "compare_int_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "assert",
      "stack_out": []
    },
    "199": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "201": {
      "op": "assert",
      "stack_out": []
    },
    "202": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "203": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "204": {
      "op": "assert",
      "stack_out": []
    },
    "205": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "206": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "208": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "209": {
      "op": "assert",
      "stack_out": []
    },
    "210": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "211": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "212": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "213": {
      "op": "assert",
      "stack_out": []
    },
    "214": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "215": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "216": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "217": {
      "op": "assert",
      "stack_out": []
    },
    "218": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "219": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "220": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "221": {
      "op": "assert",
      "stack_out": []
    },
    "222": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "223": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "224": {
      "op": "<",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "226": {
      "op": "assert",
      "stack_out": []
    },
    "227": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "228": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "229": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "230": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "231": {
      "op": "assert",
      "stack_out": []
    },
    "232": {
      "retsub": true,
      "op": "retsub"
    },
    "233": {
      "subroutine": "test_cases.literals.folding.unary_bool",
      "params": {},
      "block": "unary_bool",
      "stack_in": [],
      "op": "b unary_bool_block@0"
    },
    "236": {
      "block": "unary_bool_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "237": {
      "subroutine": "test_cases.literals.folding.tuples",
      "params": {},
      "block": "tuples",
      "stack_in": [],
      "op": "b tuples_block@0"
    },
    "240": {
      "block": "tuples_block@0",
      "stack_in": [],
      "op": "intc_3 // 98",
      "defined_out": [
        "98"
      ],
      "stack_out": [
        "98"
      ]
    },
    "241": {
      "op": "intc_3 // 98",
      "stack_out": [
        "98",
        "98"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "243": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "244": {
      "op": "&&",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "245": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "246": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "247": {
      "op": "assert",
      "stack_out": []
    },
    "248": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "249": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "250": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "251": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "252": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "253": {
      "op": "assert",
      "stack_out": []
    },
    "254": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "256": {
      "op": "bytec_2 // 0x0000000000000061",
      "defined_out": [
        "0x",
        "0x0000000000000061"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000061"
      ]
    },
    "257": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "258": {
      "op": "pushbytes 0x0000000000000062",
      "defined_out": [
        "0x0000000000000062",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "0x0000000000000062"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "269": {
      "op": "bytec_3 // 0x0000000000000063",
      "defined_out": [
        "0x0000000000000063",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x0000000000000063"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "271": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0"
      ]
    },
    "272": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0",
        "8"
      ]
    },
    "273": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "274": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%bytes_offset%0#0",
        "encoded_array%0#0 (copy)"
      ]
    },
    "276": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "278": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "279": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "280": {
      "op": "bytec_2 // 0x0000000000000061",
      "stack_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000061"
      ]
    },
    "281": {
      "op": "b==",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%5#0"
      ]
    },
    "282": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0"
      ]
    },
    "284": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "1"
      ]
    },
    "285": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "1",
        "8"
      ]
    },
    "286": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "encoded_array%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "287": {
      "op": "dig 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%1#0",
        "encoded_array%0#0 (copy)"
      ]
    },
    "289": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "291": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%1#0",
        "8"
      ]
    },
    "292": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "293": {
      "op": "intc_3 // 98",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "98"
      ]
    },
    "294": {
      "op": "itob",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%6#0"
      ]
    },
    "295": {
      "op": "b==",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "tmp%7#0"
      ]
    },
    "296": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%7#0",
        "tmp%5#0"
      ]
    },
    "298": {
      "op": "&&",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0"
      ]
    },
    "299": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "2"
      ]
    },
    "301": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "2",
        "8"
      ]
    },
    "302": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "303": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "aggregate%bytes_offset%2#0",
        "encoded_array%0#0"
      ]
    },
    "305": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "307": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%8#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%2#0",
        "8"
      ]
    },
    "308": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "309": {
      "op": "bytec_3 // 0x0000000000000063",
      "stack_out": [
        "tmp%8#0",
        "reinterpret_biguint%3#0",
        "0x0000000000000063"
      ]
    },
    "310": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "311": {
      "op": "&&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "312": {
      "op": "assert",
      "stack_out": []
    },
    "313": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "314": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "315": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "316": {
      "op": "assert",
      "stack_out": []
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    }
  }
}