{
  "version": 3,
  "sources": [
    "../folding.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FQ;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACA;;;AACO;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1FQ;AAAL;AAAP;AAIY;AAAL;AAAP;AACY;AAAL;AAAP;AAEY;AAAL;AAAP;AAGI;AACQ;AAAA;AAAL;AAAP;AADI;AAEG;AAAA;AAAP;AACO;AAHH;AAGG;;;AAAA;AAAP;AACY;AAJR;AAIQ;;;AAAL;AAAP;AACO;AAAO;;;;;AAAP;;;AAAP;;;;;AA8BY;AAAL;AAAP;AAIY;AAAL;AAAP;AACY;AAAL;AAAP;AAEM;AACM;AAAA;AAAL;AAAP;AADM;AAEC;AAAA;AAAP;AAFM;AAGC;AAAA;AAAP;AAHM;AAIC;AAAA;AAAP;AAJM;AAKM;AAAA;AAAL;AAAP;AALM;AAMM;AAAA;AAAL;AAAP;;;AAcY;AAAyB;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAEI;;AAAiB;AAAjB;AAAkC;;;;;;;;;;AAAlC;AAAmD;AAAnD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADI;AAAD;AAAA;AACH;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADQ;AAAL;AAAA;AAAA;;AAAA;AACH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADoB;AAAjB;AAAA;AAAP;AAGO;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.literals.folding.LiteralFolding.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 98"
    },
    "7": {
      "op": "bytecblock \"a\" \"b\" 0x0000000000000061 0x0000000000000063"
    },
    "31": {
      "block": "main_block@0",
      "stack_in": [],
      "callsub": "test_cases.literals.folding.unary_str",
      "op": "callsub unary_str"
    },
    "34": {
      "callsub": "test_cases.literals.folding.compare_str",
      "op": "callsub compare_str"
    },
    "37": {
      "callsub": "test_cases.literals.folding.binary_op_str",
      "op": "callsub binary_op_str"
    },
    "40": {
      "callsub": "test_cases.literals.folding.unary_bytes",
      "op": "callsub unary_bytes"
    },
    "43": {
      "callsub": "test_cases.literals.folding.unary_int",
      "op": "callsub unary_int"
    },
    "46": {
      "callsub": "test_cases.literals.folding.compare_int",
      "op": "callsub compare_int"
    },
    "49": {
      "callsub": "test_cases.literals.folding.unary_bool",
      "op": "callsub unary_bool"
    },
    "52": {
      "callsub": "test_cases.literals.folding.tuples",
      "op": "callsub tuples"
    },
    "55": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "subroutine": "_puya_lib.bytes_.is_substring",
      "params": {
        "item#0": "bytes",
        "sequence#0": "bytes"
      },
      "block": "is_substring",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "60": {
      "block": "is_substring_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0"
      ]
    },
    "61": {
      "block": "is_substring_while_top@1",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "item#0 (copy)"
      ]
    },
    "63": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "frame_dig 0",
      "defined_out": [
        "start#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%0#0",
        "start#0"
      ]
    },
    "66": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0"
      ]
    },
    "67": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0",
        "sequence#0 (copy)"
      ]
    },
    "69": {
      "op": "len",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "70": {
      "op": "<=",
      "defined_out": [
        "start#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%3#0"
      ]
    },
    "71": {
      "op": "bz is_substring_after_while@5",
      "stack_out": [
        "start#0"
      ]
    },
    "74": {
      "block": "is_substring_while_body@2",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "item#0 (copy)"
      ]
    },
    "76": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0"
      ]
    },
    "77": {
      "op": "frame_dig 0",
      "defined_out": [
        "start#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0",
        "start#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "start#0",
        "start#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%4#0",
        "start#0 (copy)",
        "start#0 (copy)"
      ]
    },
    "80": {
      "op": "cover 2",
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%4#0",
        "start#0 (copy)"
      ]
    },
    "82": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%5#0"
      ]
    },
    "83": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "tmp%5#0",
        "sequence#0 (copy)"
      ]
    },
    "85": {
      "op": "uncover 2",
      "stack_out": [
        "start#0",
        "tmp%5#0",
        "sequence#0 (copy)",
        "start#0"
      ]
    },
    "87": {
      "op": "uncover 2",
      "stack_out": [
        "start#0",
        "sequence#0 (copy)",
        "start#0",
        "tmp%5#0"
      ]
    },
    "89": {
      "op": "substring3",
      "defined_out": [
        "start#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%6#0"
      ]
    },
    "90": {
      "op": "frame_dig -2",
      "stack_out": [
        "start#0",
        "tmp%6#0",
        "item#0 (copy)"
      ]
    },
    "92": {
      "op": "==",
      "defined_out": [
        "start#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "start#0",
        "tmp%7#0"
      ]
    },
    "93": {
      "op": "bz is_substring_after_if_else@4",
      "stack_out": [
        "start#0"
      ]
    },
    "96": {
      "block": "is_substring_if_body@3",
      "stack_in": [
        "start#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "start#0",
        "1"
      ]
    },
    "97": {
      "op": "swap"
    },
    "98": {
      "retsub": true,
      "op": "retsub"
    },
    "99": {
      "block": "is_substring_after_if_else@4",
      "stack_in": [
        "start#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "start#0"
      ]
    },
    "101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "start#0",
        "1"
      ]
    },
    "102": {
      "op": "+",
      "stack_out": [
        "start#0",
        "start#0"
      ]
    },
    "103": {
      "op": "frame_bury 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0"
      ]
    },
    "105": {
      "op": "b is_substring_while_top@1"
    },
    "108": {
      "block": "is_substring_after_while@5",
      "stack_in": [
        "start#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "start#0",
        "0"
      ]
    },
    "109": {
      "op": "swap"
    },
    "110": {
      "retsub": true,
      "op": "retsub"
    },
    "111": {
      "subroutine": "test_cases.literals.folding.unary_str",
      "params": {},
      "block": "unary_str_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "112": {
      "subroutine": "test_cases.literals.folding.compare_str",
      "params": {},
      "block": "compare_str_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "116": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "117": {
      "op": "assert",
      "stack_out": []
    },
    "118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "119": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "120": {
      "op": "assert",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "122": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "123": {
      "op": "assert",
      "stack_out": []
    },
    "124": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "125": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "\"b\""
      ],
      "stack_out": [
        "\"b\"",
        "\"a\""
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "127": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "128": {
      "op": "assert",
      "stack_out": []
    },
    "129": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "130": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"b\"",
        "\"a\""
      ]
    },
    "131": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "132": {
      "op": "assert",
      "stack_out": []
    },
    "133": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "134": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "135": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "139": {
      "op": "assert",
      "stack_out": []
    },
    "140": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "141": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "142": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "145": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "146": {
      "op": "assert",
      "stack_out": []
    },
    "147": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "148": {
      "op": "pushbytes \"abc\"",
      "defined_out": [
        "\"a\"",
        "\"abc\""
      ],
      "stack_out": [
        "\"a\"",
        "\"abc\""
      ]
    },
    "153": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "156": {
      "op": "assert",
      "stack_out": []
    },
    "157": {
      "retsub": true,
      "op": "retsub"
    },
    "158": {
      "subroutine": "test_cases.literals.folding.binary_op_str",
      "params": {},
      "block": "binary_op_str_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "159": {
      "subroutine": "test_cases.literals.folding.unary_bytes",
      "params": {},
      "block": "unary_bytes_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "160": {
      "subroutine": "test_cases.literals.folding.unary_int",
      "params": {},
      "block": "unary_int_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "161": {
      "subroutine": "test_cases.literals.folding.compare_int",
      "params": {},
      "block": "compare_int_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "162": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "163": {
      "op": "assert",
      "stack_out": []
    },
    "164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "165": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": []
    },
    "167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": []
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "173": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "174": {
      "op": "assert",
      "stack_out": []
    },
    "175": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "177": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "178": {
      "op": "assert",
      "stack_out": []
    },
    "179": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "180": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "181": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "182": {
      "op": "assert",
      "stack_out": []
    },
    "183": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "185": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "186": {
      "op": "assert",
      "stack_out": []
    },
    "187": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "189": {
      "op": "<",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": []
    },
    "192": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "194": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "196": {
      "op": "assert",
      "stack_out": []
    },
    "197": {
      "retsub": true,
      "op": "retsub"
    },
    "198": {
      "subroutine": "test_cases.literals.folding.unary_bool",
      "params": {},
      "block": "unary_bool_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "subroutine": "test_cases.literals.folding.tuples",
      "params": {},
      "block": "tuples_block@0",
      "stack_in": [],
      "op": "intc_3 // 98",
      "defined_out": [
        "98"
      ],
      "stack_out": [
        "98"
      ]
    },
    "200": {
      "op": "dup",
      "stack_out": [
        "98",
        "98"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "202": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "203": {
      "op": "&&",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "204": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "205": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "assert",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "208": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "209": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "210": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "211": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "212": {
      "op": "assert",
      "stack_out": []
    },
    "213": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "215": {
      "op": "bytec_2 // 0x0000000000000061",
      "defined_out": [
        "0x",
        "0x0000000000000061"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000061"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#1"
      ],
      "stack_out": [
        "aggregate%head%0#1"
      ]
    },
    "217": {
      "op": "pushbytes 0x0000000000000062",
      "defined_out": [
        "0x0000000000000062",
        "aggregate%head%0#1"
      ],
      "stack_out": [
        "aggregate%head%0#1",
        "0x0000000000000062"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#1"
      ],
      "stack_out": [
        "aggregate%head%1#1"
      ]
    },
    "228": {
      "op": "bytec_3 // 0x0000000000000063",
      "defined_out": [
        "0x0000000000000063",
        "aggregate%head%1#1"
      ],
      "stack_out": [
        "aggregate%head%1#1",
        "0x0000000000000063"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0"
      ]
    },
    "231": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0",
        "8"
      ]
    },
    "232": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%bytes_offset%0#1"
      ]
    },
    "233": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%bytes_offset%0#1",
        "encoded_array%0#0 (copy)"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%0#1"
      ]
    },
    "236": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%0#1",
        "8"
      ]
    },
    "237": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "238": {
      "op": "bytec_2 // 0x0000000000000061",
      "stack_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000061"
      ]
    },
    "239": {
      "op": "b==",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%5#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0"
      ]
    },
    "241": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "1"
      ]
    },
    "242": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "1",
        "8"
      ]
    },
    "243": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#1",
        "encoded_array%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%1#1"
      ]
    },
    "244": {
      "op": "dig 1",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%1#1",
        "encoded_array%0#0 (copy)"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%1#1"
      ]
    },
    "247": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)",
        "aggregate%bytes_offset%1#1",
        "8"
      ]
    },
    "248": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "249": {
      "op": "intc_3 // 98",
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "98"
      ]
    },
    "250": {
      "op": "itob",
      "defined_out": [
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "reinterpret_biguint%2#0",
        "tmp%6#0"
      ]
    },
    "251": {
      "op": "b==",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_array%0#0",
        "tmp%7#0"
      ]
    },
    "252": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%7#0",
        "tmp%5#0"
      ]
    },
    "254": {
      "op": "&&",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0"
      ]
    },
    "255": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "2"
      ]
    },
    "257": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "2",
        "8"
      ]
    },
    "258": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#1",
        "encoded_array%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%8#0",
        "aggregate%bytes_offset%2#1"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "aggregate%bytes_offset%2#1",
        "encoded_array%0#0"
      ]
    },
    "261": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%2#1"
      ]
    },
    "262": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%8#0",
        "encoded_array%0#0",
        "aggregate%bytes_offset%2#1",
        "8"
      ]
    },
    "263": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "264": {
      "op": "bytec_3 // 0x0000000000000063",
      "stack_out": [
        "tmp%8#0",
        "reinterpret_biguint%3#0",
        "0x0000000000000063"
      ]
    },
    "265": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "266": {
      "op": "&&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "267": {
      "op": "assert",
      "stack_out": []
    },
    "268": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "269": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "270": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "271": {
      "op": "assert",
      "stack_out": []
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    }
  }
}