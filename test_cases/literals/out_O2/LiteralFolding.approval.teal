#pragma version 10

test_cases.literals.folding.LiteralFolding.approval_program:
    callsub unary_str
    callsub compare_str
    callsub binary_op_str
    callsub unary_bytes
    callsub unary_int
    callsub compare_int
    callsub unary_bool
    int 1
    return


// test_cases.literals.folding.unary_str() -> void:
unary_str:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_str() -> void:
compare_str:
    proto 0 0
    byte "a"
    byte "b"
    callsub is_substring
    !
    assert
    byte "a"
    byte "b"
    callsub is_substring
    !
    assert
    byte "a"
    byte "abc"
    callsub is_substring
    assert
    retsub


// algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    byte ""
    int 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 1
    +
    dup
    frame_bury 0
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -1
    frame_dig 1
    frame_dig 0
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4
    int 1
    frame_bury 0
    retsub

is_substring_after_if_else@4:
    frame_dig 1
    int 1
    +
    frame_bury 1
    b is_substring_while_top@1

is_substring_after_while@5:
    int 0
    frame_bury 0
    retsub


// test_cases.literals.folding.binary_op_str() -> void:
binary_op_str:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_bytes() -> void:
unary_bytes:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_int() -> void:
unary_int:
    proto 0 0
    retsub


// test_cases.literals.folding.compare_int() -> void:
compare_int:
    proto 0 0
    retsub


// test_cases.literals.folding.unary_bool() -> void:
unary_bool:
    proto 0 0
    retsub
