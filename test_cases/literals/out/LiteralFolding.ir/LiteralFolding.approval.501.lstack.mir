// Op                                                               Stack (out)
// test_cases.literals.folding.LiteralFolding.approval_program() -> uint64:
subroutine main:
    block@0:
        // literals/folding.py:26
        // assert "a" not in b
        byte "a"                                                    "a"
        // literals/folding.py:23
        // b = String("b")
        byte "b"                                                    "a","b"
        // literals/folding.py:26
        // assert "a" not in b
        callsub is_substring                                        tmp%7#0
        l-load tmp%7#0 0                                            tmp%7#0
        !                                                           tmp%8#0
        l-load tmp%8#0 0                                            tmp%8#0
        assert
        // literals/folding.py:27
        // assert not ("a" in b)
        byte "a"                                                    "a"
        // literals/folding.py:23
        // b = String("b")
        byte "b"                                                    "a","b"
        // literals/folding.py:27
        // assert not ("a" in b)
        callsub is_substring                                        tmp%9#0
        l-load tmp%9#0 0                                            tmp%9#0
        !                                                           tmp%10#0
        l-load tmp%10#0 0                                           tmp%10#0
        assert
        // literals/folding.py:28
        // assert "a" in String("abc")
        byte "a"                                                    "a"
        byte "abc"                                                  "a","abc"
        callsub is_substring                                        tmp%11#0
        l-load tmp%11#0 0                                           tmp%11#0
        assert
        // literals/folding.py:103
        // return True
        int 1                                                       1
        return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
subroutine is_substring:
    is_substring_block@0:                                           (洧도) item#0,sequence#0 |
        int 0                                                       (洧도) item#0,sequence#0 | 0
        v-store start#0                                             (洧도) item#0,sequence#0 |
        b is_substring_while_top@1                                  (洧도) item#0,sequence#0 |

    is_substring_while_top@1:                                       (洧도) item#0,sequence#0 |
        p-load item#0                                               (洧도) item#0,sequence#0 | item#0 (copy)
        len                                                         (洧도) item#0,sequence#0 | tmp%0#0
        v-load start#0                                              (洧도) item#0,sequence#0 | tmp%0#0,start#0
        l-load tmp%0#0 1                                            (洧도) item#0,sequence#0 | start#0,tmp%0#0
        +                                                           (洧도) item#0,sequence#0 | tmp%1#0
        l-store-copy tmp%1#0 0                                      (洧도) item#0,sequence#0 | tmp%1#0,tmp%1#0 (copy)
        v-store tmp%1#0                                             (洧도) item#0,sequence#0 | tmp%1#0
        p-load sequence#0                                           (洧도) item#0,sequence#0 | tmp%1#0,sequence#0 (copy)
        len                                                         (洧도) item#0,sequence#0 | tmp%1#0,tmp%2#0
        l-load tmp%1#0 1                                            (洧도) item#0,sequence#0 | tmp%2#0,tmp%1#0
        l-load tmp%2#0 1                                            (洧도) item#0,sequence#0 | tmp%1#0,tmp%2#0
        <=                                                          (洧도) item#0,sequence#0 | tmp%3#0
        l-load tmp%3#0 0                                            (洧도) item#0,sequence#0 | tmp%3#0
        bz is_substring_after_while@5 ; b is_substring_while_body@2 (洧도) item#0,sequence#0 |

    is_substring_while_body@2:                                      (洧도) item#0,sequence#0 |
        p-load sequence#0                                           (洧도) item#0,sequence#0 | sequence#0 (copy)
        v-load start#0                                              (洧도) item#0,sequence#0 | sequence#0 (copy),start#0
        v-load tmp%1#0                                              (洧도) item#0,sequence#0 | sequence#0 (copy),start#0,tmp%1#0
        substring3                                                  (洧도) item#0,sequence#0 | tmp%6#0
        p-load item#0                                               (洧도) item#0,sequence#0 | tmp%6#0,item#0 (copy)
        l-load tmp%6#0 1                                            (洧도) item#0,sequence#0 | item#0 (copy),tmp%6#0
        ==                                                          (洧도) item#0,sequence#0 | tmp%7#0
        l-load tmp%7#0 0                                            (洧도) item#0,sequence#0 | tmp%7#0
        bz is_substring_after_if_else@4 ; b is_substring_if_body@3  (洧도) item#0,sequence#0 |

    is_substring_if_body@3:                                         (洧도) item#0,sequence#0 |
        int 1                                                       (洧도) item#0,sequence#0 | 1
        retsub                                                      1

    is_substring_after_if_else@4:                                   (洧도) item#0,sequence#0 |
        v-load start#0                                              (洧도) item#0,sequence#0 | start#0
        int 1                                                       (洧도) item#0,sequence#0 | start#0,1
        +                                                           (洧도) item#0,sequence#0 | start#0
        v-store start#0                                             (洧도) item#0,sequence#0 |
        b is_substring_while_top@1                                  (洧도) item#0,sequence#0 |

    is_substring_after_while@5:                                     (洧도) item#0,sequence#0 |
        int 0                                                       (洧도) item#0,sequence#0 | 0
        retsub                                                      0


