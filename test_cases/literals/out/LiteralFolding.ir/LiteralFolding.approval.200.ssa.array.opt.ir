main test_cases.literals.folding.LiteralFolding.approval_program:
    block@0: // L94
        let tmp%7#0: bool = _puya_lib.bytes_.is_substring("a", "b")
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = _puya_lib.bytes_.is_substring("a", "b")
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: bool = _puya_lib.bytes_.is_substring("a", "abc")
        (assert tmp%11#0)
        let aggregate%head%0#0: bytes = 0x0000000000000061
        let aggregate%head%1#0: bytes = 0x00000000000000610000000000000062
        let aggregate%head%2#0: bytes = 0x000000000000006100000000000000620000000000000063
        let aggregate%bytes_offset%0#0: uint64 = 0u
        let aggregate%encoded_element%0#0: bytes = 0x0000000000000061
        let tmp%5#2: bool = 1u
        let aggregate%bytes_offset%1#0: uint64 = 8u
        let aggregate%encoded_element%1#0: bytes = 0x0000000000000062
        let tmp%6#2: biguint = (itob 98u)
        let tmp%7#2: bool = 1u
        let tmp%8#2: bool = 1u
        let aggregate%bytes_offset%2#0: uint64 = 16u
        let aggregate%encoded_element%2#0: bytes = 0x0000000000000063
        let tmp%9#2: bool = 1u
        let tmp%10#2: bool = 1u
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let start#1: uint64 = Ï†(start#0 <- block@0, start#2 <- block@4)
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let start#2: uint64 = (+ start#1 1u)
        goto block@1
    block@5: // after_while_L11
        return 0u