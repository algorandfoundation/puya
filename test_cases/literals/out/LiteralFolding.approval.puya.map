{
  "version": 3,
  "sources": [
    "../folding.py"
  ],
  "mappings": ";;;;;;;;;;;AAyBW;AAHH;AAGG;;;AAAA;AAAP;AACY;AAJR;AAIQ;;;AAAL;AAAP;AACO;AAAO;;;;;AAAP;;;AAAP;AA2EW;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.literals.folding.LiteralFolding.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"a\" \"b\""
    },
    "11": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "12": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"a\"",
        "\"b\""
      ],
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "13": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "16": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "17": {
      "op": "assert",
      "stack_out": []
    },
    "18": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "19": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "\"a\"",
        "\"b\""
      ]
    },
    "20": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "24": {
      "op": "assert",
      "stack_out": []
    },
    "25": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "26": {
      "op": "pushbytes \"abc\"",
      "defined_out": [
        "\"a\"",
        "\"abc\""
      ],
      "stack_out": [
        "\"a\"",
        "\"abc\""
      ]
    },
    "31": {
      "callsub": "_puya_lib.bytes_.is_substring",
      "op": "callsub is_substring",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "34": {
      "op": "assert",
      "stack_out": []
    },
    "35": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    },
    "37": {
      "subroutine": "_puya_lib.bytes_.is_substring",
      "params": {
        "item#0": "bytes",
        "sequence#0": "bytes"
      },
      "block": "is_substring",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "40": {
      "op": "pushbytes \"\""
    },
    "42": {
      "op": "intc_1 // 0",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "43": {
      "block": "is_substring_while_top@1",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "item#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "item#0 (copy)"
      ]
    },
    "45": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "frame_dig 1",
      "defined_out": [
        "start#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%0#0",
        "start#0"
      ]
    },
    "48": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0"
      ]
    },
    "49": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "50": {
      "op": "frame_bury 0",
      "defined_out": [
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0"
      ]
    },
    "52": {
      "op": "frame_dig -1",
      "defined_out": [
        "sequence#0 (copy)",
        "start#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "sequence#0 (copy)"
      ]
    },
    "54": {
      "op": "len",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "55": {
      "op": "<=",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%3#0"
      ]
    },
    "56": {
      "op": "bz is_substring_after_while@5",
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "59": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "sequence#0 (copy)"
      ]
    },
    "61": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "sequence#0 (copy)",
        "start#0"
      ]
    },
    "63": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "sequence#0 (copy)",
        "start#0",
        "tmp%1#0"
      ]
    },
    "65": {
      "op": "substring3",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%6#0"
      ]
    },
    "66": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%6#0",
        "item#0 (copy)"
      ]
    },
    "68": {
      "op": "==",
      "defined_out": [
        "start#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "tmp%7#0"
      ]
    },
    "69": {
      "op": "bz is_substring_after_if_else@4",
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "72": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "1"
      ]
    },
    "73": {
      "op": "frame_bury 0"
    },
    "75": {
      "retsub": true,
      "op": "retsub"
    },
    "76": {
      "block": "is_substring_after_if_else@4",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0"
      ]
    },
    "78": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0",
        "1"
      ]
    },
    "79": {
      "op": "+",
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "start#0"
      ]
    },
    "80": {
      "op": "frame_bury 1",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0"
      ]
    },
    "82": {
      "op": "b is_substring_while_top@1"
    },
    "85": {
      "block": "is_substring_after_while@5",
      "stack_in": [
        "tmp%1#0",
        "start#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "start#0",
        "0"
      ]
    },
    "86": {
      "op": "frame_bury 0"
    },
    "88": {
      "retsub": true,
      "op": "retsub"
    }
  }
}