#pragma version 10

test_cases.literals.folding.LiteralFolding.approval_program:
    intcblock 1 0
    bytecblock "a" "b"
    // literals/folding.py:95
    // compare_str()
    callsub compare_str
    // literals/folding.py:102
    // return True
    intc_0 // 1
    return


// test_cases.literals.folding.compare_str() -> void:
compare_str:
    // literals/folding.py:11-12
    // @subroutine
    // def compare_str() -> None:
    proto 0 0
    // literals/folding.py:26
    // assert "a" not in b
    bytec_0 // "a"
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:26
    // assert "a" not in b
    callsub is_substring
    !
    assert
    // literals/folding.py:27
    // assert not ("a" in b)
    bytec_0 // "a"
    // literals/folding.py:23
    // b = String("b")
    bytec_1 // "b"
    // literals/folding.py:27
    // assert not ("a" in b)
    callsub is_substring
    !
    assert
    // literals/folding.py:28
    // assert "a" in String("abc")
    bytec_0 // "a"
    pushbytes "abc"
    callsub is_substring
    assert
    retsub


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    pushbytes ""
    intc_1 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 1
    +
    dup
    frame_bury 0
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -1
    frame_dig 1
    frame_dig 0
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4
    intc_0 // 1
    frame_bury 0
    retsub

is_substring_after_if_else@4:
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_1 // 0
    frame_bury 0
    retsub
