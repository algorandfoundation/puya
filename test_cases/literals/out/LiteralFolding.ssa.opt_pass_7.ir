contract test_cases.literals.folding.LiteralFolding:
    program approval:
        subroutine test_cases.literals.folding.LiteralFolding.approval_program() -> bool:
            block@0: // L94
                test_cases.literals.folding.compare_str()
                test_cases.literals.folding.tuples()
                return 1u
        
        subroutine test_cases.literals.folding.compare_str() -> void:
            block@0: // L11
                let tmp%7#0: bool = _puya_lib.bytes_.is_substring("a", "b")
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0)
                let tmp%9#0: bool = _puya_lib.bytes_.is_substring("a", "b")
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0)
                let tmp%11#0: bool = _puya_lib.bytes_.is_substring("a", "abc")
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.literals.folding.tuples() -> void:
            block@0: // L83
                let tmp%10#0: bool = 1u
                (assert tmp%10#0)
                return 
        
        subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = Ï†(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L12
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
                let tmp%7#0: bool = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L13
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.literals.folding.LiteralFolding.clear_state_program() -> bool:
            block@0: // L105
                return 1u