subroutine unary_str(): void
{
  assert(true)
  assert(true)
}

subroutine compare_str(): void
{
  assert(!(false))
  assert(true)
  assert(true)
  assert(true)
  assert(!(false))
  assert(!(false))
  assert(true)
  assert(!(false))
  assert(true)
  b: string = 'b'
  assert(!(b == 'a'))
  assert(b != 'a')
  assert(!(_puya_lib.bytes_.is_substring('a', b)))
  assert(!(_puya_lib.bytes_.is_substring('a', b)))
  assert(_puya_lib.bytes_.is_substring('a', 'abc'))
}

subroutine binary_op_str(): void
{
  assert(true)
  assert(true)
  assert(true)
  assert(true)
  assert(true)
  assert(true)
}

subroutine unary_bytes(): void
{
  assert(true)
  assert(true)
}

subroutine unary_int(): void
{
  assert(true)
  assert(true)
  assert(true)
  assert(true)
  assert(true)
}

subroutine compare_int(): void
{
  assert(!(false))
  assert(true)
  assert(true)
  assert(true)
  assert(!(false))
  assert(!(false))
  one: uint64 = 1u
  assert(!(one == 0u))
  assert(one != 0u)
  assert(one > 0u)
  assert(one >= 0u)
  assert(!(one < 0u))
  assert(!(one <= 0u))
}

subroutine unary_bool(): void
{
  assert(true)
  assert(true)
  assert(true)
  assert(true)
  assert(true)
}

subroutine tuples(): void
{
  assert(&&(&&(true, 98u == 98u), true))
  assert(&&(&&(true, true), true))
  assert(&&(&&(reinterpret_cast<biguint>(SINGLE_EVAL(id=0, source=new arc4.static_array<arc4.uint64, 3>(97arc4u64, 98arc4u64, 99arc4u64))[0u]) == reinterpret_cast<biguint>(97arc4u64), reinterpret_cast<biguint>(SINGLE_EVAL(id=0)[1u]) == itob(98u)), reinterpret_cast<biguint>(SINGLE_EVAL(id=0)[2u]) == reinterpret_cast<biguint>(99arc4u64)))
  assert(&&(true, true))
}

contract LiteralFolding
{
  method_resolution_order: (
  )
  
  subroutine test_cases.literals.folding.LiteralFolding.approval_program(): bool
  {
    test_cases.literals.folding.unary_str()
    test_cases.literals.folding.compare_str()
    test_cases.literals.folding.binary_op_str()
    test_cases.literals.folding.unary_bytes()
    test_cases.literals.folding.unary_int()
    test_cases.literals.folding.compare_int()
    test_cases.literals.folding.unary_bool()
    test_cases.literals.folding.tuples()
    return true
  }
  
  subroutine test_cases.literals.folding.LiteralFolding.clear_state_program(): bool
  {
    return true
  }
}