main test_cases.compile.apps.HelloTmpl.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloTmpl.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.HelloTmpl.create[routing]() -> void:
    block@0: // L62
        test_cases.compile.apps.HelloTmpl.create()
        exit 1u

subroutine test_cases.compile.apps.HelloBase.delete[routing]() -> void:
    block@0: // L24
        test_cases.compile.apps.HelloBase.delete()
        exit 1u

subroutine test_cases.compile.apps.HelloBase.greet[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%1#0: string = test_cases.compile.apps.HelloBase.greet(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.compile.apps.HelloTmpl.__init__() -> void:
    block@0: // L59
        (app_global_put "greeting" TemplateVar[string](TMPL_GREETING))
        return 

subroutine test_cases.compile.apps.HelloTmpl.create() -> void:
    block@0: // L62
        return 

subroutine test_cases.compile.apps.HelloBase.delete() -> void:
    block@0: // L24
        return 

subroutine test_cases.compile.apps.HelloBase.update() -> void:
    block@0: // L28
        return 

subroutine test_cases.compile.apps.HelloBase.greet(name: string) -> string:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L58
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@15
    block@2: // abi_routing_L58
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@3, * => block@4}
    block@3: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        test_cases.compile.apps.HelloBase.delete[routing]()
        goto block@5
    block@4: // switch_case_default_L58
        goto block@5
    block@5: // switch_case_next_L58
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion must be NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        goto tmp%11#0 ? block@6 : block@10
    block@6: // call_NoOp_L58
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "greet(string)string" => block@7, * => block@8}
    block@7: // greet_route_L32
        test_cases.compile.apps.HelloBase.greet[routing]()
        goto block@9
    block@8: // switch_case_default_L58
        goto block@9
    block@9: // switch_case_next_L58
        goto block@14
    block@10: // create_NoOp_L58
        let tmp%13#0: bytes = (txna ApplicationArgs 0)
        switch tmp%13#0 {method "create()void" => block@11, * => block@12}
    block@11: // create_route_L62
        test_cases.compile.apps.HelloTmpl.create[routing]()
        goto block@13
    block@12: // switch_case_default_L58
        goto block@13
    block@13: // switch_case_next_L58
        goto block@14
    block@14: // after_if_else_L58
        goto block@16
    block@15: // update_L28
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 UpdateApplication)
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        let tmp%18#0: bool = (&& tmp%15#0 tmp%17#0)
        (assert tmp%18#0) // OnCompletion must be UpdateApplication && can only call when not creating
        test_cases.compile.apps.HelloBase.update()
        exit 1u
    block@16: // after_if_else_L58
        exit 0u
    block@17: // after_inlined_test_cases.compile.apps.HelloTmpl.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0