main test_cases.compile.apps.HelloOtherConstants.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloOtherConstants.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.HelloOtherConstants.create[routing]() -> void:
    block@0: // L83
        let tmp%0#0: uint64 = test_cases.compile.apps.HelloOtherConstants.create()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.compile.apps.HelloOtherConstants.delete[routing]() -> void:
    block@0: // L87
        test_cases.compile.apps.HelloOtherConstants.delete()
        exit 1u

subroutine test_cases.compile.apps.HelloOtherConstants.greet[routing]() -> void:
    block@0: // L91
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%1#0: bytes = test_cases.compile.apps.HelloOtherConstants.greet(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.compile.apps.HelloOtherConstants.__init__() -> void:
    block@0: // L77
        (app_global_put "greeting" TemplateVar[string](TMPL_GREETING))
        (app_global_put "num" TemplateVar[biguint](TMPL_NUM))
        (app_global_put "address" TemplateVar[account](TMPL_ACCOUNT))
        (app_global_put "method" TemplateVar[bytes](TMPL_METHOD))
        return 

subroutine test_cases.compile.apps.HelloOtherConstants.create() -> uint64:
    block@0: // L83
        return 1u

subroutine test_cases.compile.apps.HelloOtherConstants.delete() -> void:
    block@0: // L87
        return 

subroutine test_cases.compile.apps.HelloOtherConstants.greet(name: string) -> bytes:
    block@0: // L91
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num")
        (assert maybe_exists%0#0) // check self.num exists
        let tmp%0#0: biguint = (b+ maybe_value%0#0 48b)
        let tmp%1#0: uint64 = (len tmp%0#0)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let extract%0#0: bytes = (extract3 tmp%0#0 tmp%2#0 1u)
        let num_alpha#0: bytes = extract%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%1#0) // check self.greeting exists
        let tmp%3#0: bytes = (concat maybe_value%1#0 0x20)
        let tmp%4#0: bytes = (concat tmp%3#0 name#0)
        let tmp%5#0: bytes = (concat tmp%4#0 num_alpha#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "address")
        (assert maybe_exists%2#0) // check self.address exists
        let tmp%6#0: bytes = (concat tmp%5#0 maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "method")
        (assert maybe_exists%3#0) // check self.method exists
        let tmp%7#0: bytes = (concat tmp%6#0 maybe_value%3#0)
        return tmp%7#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L76
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@6, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@22, * => block@23}
    block@2: // switch_case_0_L76
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "greet(string)byte[]" => block@3, * => block@4}
    block@3: // greet_route_L91
        test_cases.compile.apps.HelloOtherConstants.greet[routing]()
        goto block@5
    block@4: // switch_case_default_L76
        goto block@5
    block@5: // switch_case_next_L76
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L76
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create()uint64" => block@7, * => block@8}
    block@7: // create_route_L83
        test_cases.compile.apps.HelloOtherConstants.create[routing]()
        goto block@9
    block@8: // switch_case_default_L76
        goto block@9
    block@9: // switch_case_next_L76
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L76
        goto block@23
    block@11: // switch_case_3_L76
        goto block@23
    block@12: // switch_case_4_L76
        goto block@23
    block@13: // switch_case_5_L76
        goto block@23
    block@14: // switch_case_6_L76
        goto block@23
    block@15: // switch_case_7_L76
        goto block@23
    block@16: // switch_case_8_L76
        goto block@23
    block@17: // switch_case_9_L76
        goto block@23
    block@18: // switch_case_10_L76
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "delete()void" => block@19, * => block@20}
    block@19: // delete_route_L87
        test_cases.compile.apps.HelloOtherConstants.delete[routing]()
        goto block@21
    block@20: // switch_case_default_L76
        goto block@21
    block@21: // switch_case_next_L76
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@22: // switch_case_11_L76
        goto block@23
    block@23: // switch_case_default_L76
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@24: // after_inlined_test_cases.compile.apps.HelloOtherConstants.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0