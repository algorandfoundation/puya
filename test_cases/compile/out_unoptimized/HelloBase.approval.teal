#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "greeting"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // compile/apps.py:20
    // class HelloBase(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@8
    b main_abi_routing@4

main_abi_routing@4:
    // compile/apps.py:20
    // class HelloBase(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x24378d3c // method "delete()void"
    pushbytes 0xd0a28200 // method "greet(string)string"
    uncover 2
    match main_delete_route@5 main_greet_route@6
    b main_switch_case_next@7

main_switch_case_next@7:
    b main_after_if_else@12

main_after_if_else@12:
    // compile/apps.py:20
    // class HelloBase(ARC4Contract):
    err

main_greet_route@6:
    // compile/apps.py:32
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub greet
    b main_switch_case_next@7

main_delete_route@5:
    // compile/apps.py:24
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be DeleteApplication && can only call when not creating
    callsub delete
    b main_switch_case_next@7

main_bare_routing@8:
    // compile/apps.py:20
    // class HelloBase(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    pushint 4 // UpdateApplication
    uncover 2
    match main___algopy_default_create@9 main_update@10
    b main_switch_case_next@11

main_switch_case_next@11:
    b main_after_if_else@12

main_update@10:
    // compile/apps.py:28
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub update
    intc_1 // 1
    return

main___algopy_default_create@9:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    b main_block@14

main_block@14:
    b main_after_inlined_test_cases.compile.apps.HelloBase.__algopy_default_create@15

main_after_inlined_test_cases.compile.apps.HelloBase.__algopy_default_create@15:
    intc_1 // 1
    return


// test_cases.compile.apps.HelloBase.delete[routing]() -> void:
delete:
    b delete_block@0

delete_block@0:
    // compile/apps.py:24
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    callsub test_cases.compile.apps.HelloBase.delete
    intc_1 // 1
    return


// test_cases.compile.apps.HelloBase.greet[routing]() -> void:
greet:
    b greet_block@0

greet_block@0:
    // compile/apps.py:32
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 1
    *
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    callsub test_cases.compile.apps.HelloBase.greet
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.compile.apps.HelloBase.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // compile/apps.py:22
    // self.greeting = String()
    bytec_0 // "greeting"
    pushbytes ""
    app_global_put
    retsub


// test_cases.compile.apps.HelloBase.delete() -> void:
test_cases.compile.apps.HelloBase.delete:
    b test_cases.compile.apps.HelloBase.delete_block@0

test_cases.compile.apps.HelloBase.delete_block@0:
    retsub


// test_cases.compile.apps.HelloBase.update() -> void:
update:
    b update_block@0

update_block@0:
    retsub


// test_cases.compile.apps.HelloBase.greet(name: bytes) -> bytes:
test_cases.compile.apps.HelloBase.greet:
    // compile/apps.py:32-33
    // @arc4.abimethod()
    // def greet(self, name: String) -> String:
    proto 1 1
    b test_cases.compile.apps.HelloBase.greet_block@0

test_cases.compile.apps.HelloBase.greet_block@0:
    // compile/apps.py:34
    // return self.greeting + " " + name
    intc_0 // 0
    bytec_0 // "greeting"
    app_global_get_ex
    assert // check self.greeting exists
    pushbytes " "
    concat
    frame_dig -1
    concat
    retsub
