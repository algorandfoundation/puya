main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L25
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@20
    block@2: // abi_routing_L25
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@18
    block@3: // call_NoOp_L25
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_logicsig()address" => block@4, method "test_compile_contract()void" => block@5, method "test_compile_contract_tmpl()void" => block@6, method "test_compile_contract_prfx()void" => block@7, method "test_compile_contract_large()void" => block@8, method "test_arc4_create()void" => block@9, method "test_arc4_create_tmpl()void" => block@10, method "test_arc4_create_prfx()void" => block@11, method "test_arc4_create_large()void" => block@12, method "test_arc4_create_modified_compiled()void" => block@13, method "test_arc4_update()void" => block@14, method "test_other_constants()void" => block@15, method "test_abi_call_create_params()void" => block@16, * => block@17}
    block@4: // test_logicsig_route_L26
        test_cases.compile.factory.HelloFactory.test_logicsig[routing]()
        goto block@17
    block@5: // test_compile_contract_route_L30
        test_cases.compile.factory.HelloFactory.test_compile_contract[routing]()
        goto block@17
    block@6: // test_compile_contract_tmpl_route_L61
        test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl[routing]()
        goto block@17
    block@7: // test_compile_contract_prfx_route_L96
        test_cases.compile.factory.HelloFactory.test_compile_contract_prfx[routing]()
        goto block@17
    block@8: // test_compile_contract_large_route_L129
        test_cases.compile.factory.HelloFactory.test_compile_contract_large[routing]()
        goto block@17
    block@9: // test_arc4_create_route_L160
        test_cases.compile.factory.HelloFactory.test_arc4_create[routing]()
        goto block@17
    block@10: // test_arc4_create_tmpl_route_L177
        test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl[routing]()
        goto block@17
    block@11: // test_arc4_create_prfx_route_L198
        test_cases.compile.factory.HelloFactory.test_arc4_create_prfx[routing]()
        goto block@17
    block@12: // test_arc4_create_large_route_L221
        test_cases.compile.factory.HelloFactory.test_arc4_create_large[routing]()
        goto block@17
    block@13: // test_arc4_create_modified_compiled_route_L236
        test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled[routing]()
        goto block@17
    block@14: // test_arc4_update_route_L263
        test_cases.compile.factory.HelloFactory.test_arc4_update[routing]()
        goto block@17
    block@15: // test_other_constants_route_L297
        test_cases.compile.factory.HelloFactory.test_other_constants[routing]()
        goto block@17
    block@16: // test_abi_call_create_params_route_L323
        test_cases.compile.factory.HelloFactory.test_abi_call_create_params[routing]()
        goto block@17
    block@17: // switch_case_next_L25
        goto block@19
    block@18: // create_NoOp_L25
        goto block@19
    block@19: // after_if_else_L25
        goto block@21
    block@20: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.compile.factory.HelloFactory.__algopy_default_create_L1
        exit 1u
    block@21: // after_if_else_L25
        exit 0u
    block@22: // after_inlined_test_cases.compile.factory.HelloFactory.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.compile.factory.HelloFactory.test_logicsig[routing]() -> void:
    block@0: // L26
        let tmp%0#0: Encoded(uint8[32]) = test_cases.compile.factory.HelloFactory.test_logicsig()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract[routing]() -> void:
    block@0: // L30
        test_cases.compile.factory.HelloFactory.test_compile_contract()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl[routing]() -> void:
    block@0: // L61
        test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_prfx[routing]() -> void:
    block@0: // L96
        test_cases.compile.factory.HelloFactory.test_compile_contract_prfx()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_large[routing]() -> void:
    block@0: // L129
        test_cases.compile.factory.HelloFactory.test_compile_contract_large()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create[routing]() -> void:
    block@0: // L160
        test_cases.compile.factory.HelloFactory.test_arc4_create()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl[routing]() -> void:
    block@0: // L177
        test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_prfx[routing]() -> void:
    block@0: // L198
        test_cases.compile.factory.HelloFactory.test_arc4_create_prfx()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_large[routing]() -> void:
    block@0: // L221
        test_cases.compile.factory.HelloFactory.test_arc4_create_large()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled[routing]() -> void:
    block@0: // L236
        test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_arc4_update[routing]() -> void:
    block@0: // L263
        test_cases.compile.factory.HelloFactory.test_arc4_update()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_other_constants[routing]() -> void:
    block@0: // L297
        test_cases.compile.factory.HelloFactory.test_other_constants()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_abi_call_create_params[routing]() -> void:
    block@0: // L323
        test_cases.compile.factory.HelloFactory.test_abi_call_create_params()
        exit 1u

subroutine test_cases.compile.factory.HelloFactory.test_logicsig() -> Encoded(uint8[32]):
    block@0: // L26
        return addr VCL4NDEJ7R36LBVHNHBIIE3XTJADGC4XG36OTB45LHF3RBKFUEVC6JQH4I

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract() -> void:
    block@0: // L30
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAQhncmVldGluZ0IAADEYQAAJQgAAiADOQgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAFVC//M2GgCABCDfOlRPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAIUL/pjEZgQQSMRgiExBEiABQI0NCAAA2GgFXAgCIACsjQ0IAAIgANiNDQgAANhoBVwIAiAAwSRUWVwYCTwFQgAQVH3x1TwFQsCNDigEAQgAAKIv/Z4lCAAAogABniUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L35
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%1#0
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L46
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%4#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%3#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L53
        itxn_submit
        let aggregate%length%2#0: uint64 = (len "hello world")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "hello world")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let tmp%7#0: bool = (== result#0 tmp%6#0)
        (assert tmp%7#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl() -> void:
    block@0: // L61
        itxn_begin
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAghncmVldGluZwR0bXBsQgAAMRhAAAlCAACIAL1CAABCAAAxGyITQQBvQgAANhoAgAQkN408TwGOAQBMQgAAMRkiEkQxGCITQQAiQgAANhoAgATQooIATwGOAQAKQgAAQgAAQgAAAIgAT0L/8zYaAIAETFxhuk8BjgEABkIAAEL/4YgAJEL/9zEZgQUSMRgiExBEiAAbQv+mMRmBBBIxGCITEESIAEIjQ0IAAIgAMiNDQgAAiAAuI0NCAAA2GgFXAgCIAChJFRZXBgJPAVCABBUffHVPAVCwI0NCAAAoKWeJQgAAiUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L67
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "world")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "world")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L81
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%3#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%2#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L88
        itxn_submit
        let aggregate%length%1#0: uint64 = (len "hey world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "hey world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%6#0: bool = (== result#0 tmp%5#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_prfx() -> void:
    block@0: // L96
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAghncmVldGluZwJoaUIAADEYQAAJQgAAiAC9QgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAE9C//M2GgCABExcYbpPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAG0L/pjEZgQQSMRgiExBEiABCI0NCAACIADIjQ0IAAIgALiNDQgAANhoBVwIAiAAoSRUWVwYCTwFQgAQVH3x1TwFQsCNDQgAAKClniUIAAIlCAACJQgAAiYoBAUIAACIoZUSAASBQi/9QiQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L103
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "world")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "world")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L114
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%3#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%2#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L121
        itxn_submit
        let aggregate%length%1#0: uint64 = (len "hi world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "hi world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%6#0: bool = (== result#0 tmp%5#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_large() -> void:
    block@0: // L129
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 2u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAFCAABCAAAxGyITQQBCQgAANhoAgAQkN408gAT15P1NTwKOAgAXAAdCAABCAAAAMRkiEjEYIhMQRIgQLUL/7DEZgQUSMRgiExBEiBAvQv/bMRkiEjEYIhIQREIAAEIAACNDQgAAgIAg
        ((itxn_field ApprovalProgramPages) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiUIAAIgAFRaABBUffHVPAVCwI0NCAACIAAojQ0IAAIjv2BWJQgAAiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L134
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L145
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded(uint64) = ((extract 4 0) txn.LastLog#0)
        let tmp%2#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result#0: Encoded(uint64) = tmp%1#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L152
        itxn_submit
        let reinterpret_biguint%0#0: biguint = result#0
        let tmp%4#0: bool = (b== reinterpret_biguint%0#0 0x0000000000001000)
        (assert tmp%4#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create() -> void:
    block@0: // L160
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAQhncmVldGluZ0IAADEYQAAJQgAAiADOQgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAFVC//M2GgCABCDfOlRPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAIUL/pjEZgQQSMRgiExBEiABQI0NCAAA2GgFXAgCIACsjQ0IAAIgANiNDQgAANhoBVwIAiAAwSRUWVwYCTwFQgAQVH3x1TwFQsCNDigEAQgAAKIv/Z4lCAAAogABniUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L163
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%1#0
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L166
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let tmp%6#0: string = ((extract 2 0) tmp%3#0)
        let result#0: string = tmp%6#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L169
        itxn_submit
        let tmp%7#0: bool = (== result#0 "hello world")
        (assert tmp%7#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl() -> void:
    block@0: // L177
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAghncmVldGluZwR0bXBsQgAAMRhAAAlCAACIAL1CAABCAAAxGyITQQBvQgAANhoAgAQkN408TwGOAQBMQgAAMRkiEkQxGCITQQAiQgAANhoAgATQooIATwGOAQAKQgAAQgAAQgAAAIgAT0L/8zYaAIAETFxhuk8BjgEABkIAAEL/4YgAJEL/9zEZgQUSMRgiExBEiAAbQv+mMRmBBBIxGCITEESIAEIjQ0IAAIgAMiNDQgAAiAAuI0NCAAA2GgFXAgCIAChJFRZXBgJPAVCABBUffHVPAVCwI0NCAAAoKWeJQgAAiUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L181
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "world")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "world")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L187
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: string = ((extract 2 0) tmp%2#0)
        let result#0: string = tmp%5#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L190
        itxn_submit
        let tmp%6#0: bool = (== result#0 "tmpl2 world")
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_prfx() -> void:
    block@0: // L198
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAghncmVldGluZwVwcmZ4MkIAADEYQAAJQgAAiAC9QgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAE9C//M2GgCABExcYbpPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAG0L/pjEZgQQSMRgiExBEiABCI0NCAACIADIjQ0IAAIgALiNDQgAANhoBVwIAiAAoSRUWVwYCTwFQgAQVH3x1TwFQsCNDQgAAKClniUIAAIlCAACJQgAAiYoBAUIAACIoZUSAASBQi/9QiQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L204
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let hello_app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "world")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "world")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L210
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: string = ((extract 2 0) tmp%2#0)
        let result#0: string = tmp%5#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L213
        itxn_submit
        let tmp%6#0: bool = (== result#0 "prfx2 world")
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_large() -> void:
    block@0: // L221
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 2u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAFCAABCAAAxGyITQQBCQgAANhoAgAQkN408gAT15P1NTwKOAgAXAAdCAABCAAAAMRkiEjEYIhMQRIgQLUL/7DEZgQUSMRgiExBEiBAvQv/bMRkiEjEYIhIQREIAAEIAACNDQgAAgIAg
        ((itxn_field ApprovalProgramPages) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiUIAAIgAFRaABBUffHVPAVCwI0NCAACIAAojQ0IAAIjv2BWJQgAAiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L224
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L227
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let tmp%4#0: uint64 = (btoi tmp%1#0)
        let result#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== result#0 4096u)
        (assert tmp%5#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L231
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled() -> void:
    block@0: // L236
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "hey")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hey")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field LocalNumUint) 3u)
        ((itxn_field LocalNumByteSlice) 5u)
        ((itxn_field GlobalNumUint) 4u)
        ((itxn_field GlobalNumByteSlice) 6u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAQhncmVldGluZ0IAADEYQAAJQgAAiADOQgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAFVC//M2GgCABCDfOlRPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAIUL/pjEZgQQSMRgiExBEiABQI0NCAAA2GgFXAgCIACsjQ0IAAIgANiNDQgAANhoBVwIAiAAwSRUWVwYCTwFQgAQVH3x1TwFQsCNDigEAQgAAKIv/Z4lCAAAogABniUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L245
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%1#0
        let (value%0#0: uint64, check%0#0: bool) = ((app_params_get AppLocalNumUint) app#0)
        (assert check%0#0) // application exists
        let tmp%2#0: bool = (== value%0#0 3u)
        (assert tmp%2#0)
        let (value%1#0: uint64, check%1#0: bool) = ((app_params_get AppGlobalNumUint) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bool = (== value%1#0 4u)
        (assert tmp%3#0)
        let (value%2#0: uint64, check%2#0: bool) = ((app_params_get AppLocalNumByteSlice) app#0)
        (assert check%2#0) // application exists
        let tmp%4#0: bool = (== value%2#0 5u)
        (assert tmp%4#0)
        let (value%3#0: uint64, check%3#0: bool) = ((app_params_get AppGlobalNumByteSlice) app#0)
        (assert check%3#0) // application exists
        let tmp%5#0: bool = (== value%3#0 6u)
        (assert tmp%5#0)
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "there")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "there")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%6#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L256
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let tmp%10#0: string = ((extract 2 0) tmp%7#0)
        let result#0: string = tmp%10#0
        let tmp%11#0: bool = (== result#0 "hey there")
        (assert tmp%11#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L261
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_update() -> void:
    block@0: // L263
        itxn_begin
        ((itxn_field LocalNumUint) 2u)
        ((itxn_field LocalNumByteSlice) 2u)
        ((itxn_field GlobalNumUint) 2u)
        ((itxn_field GlobalNumByteSlice) 2u)
        ((itxn_field ExtraProgramPages) 1u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAghncmVldGluZwR0bXBsQgAAMRhAAAlCAACIAL1CAABCAAAxGyITQQBvQgAANhoAgAQkN408TwGOAQBMQgAAMRkiEkQxGCITQQAiQgAANhoAgATQooIATwGOAQAKQgAAQgAAQgAAAIgAT0L/8zYaAIAETFxhuk8BjgEABkIAAEL/4YgAJEL/9zEZgQUSMRgiExBEiAAbQv+mMRmBBBIxGCITEESIAEIjQ0IAAIgAMiNDQgAAiAAuI0NCAAA2GgFXAgCIAChJFRZXBgJPAVCABBUffHVPAVCwI0NCAAAoKWeJQgAAiUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L266
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "there")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "there")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L280
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: string = ((extract 2 0) tmp%2#0)
        let result#0: string = tmp%5#0
        let tmp%6#0: bool = (== result#0 "hi there")
        (assert tmp%6#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAQhncmVldGluZ0IAADEYQAAJQgAAiADOQgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAFVC//M2GgCABCDfOlRPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAIUL/pjEZgQQSMRgiExBEiABQI0NCAAA2GgFXAgCIACsjQ0IAAIgANiNDQgAANhoBVwIAiAAwSRUWVwYCTwFQgAQVH3x1TwFQsCNDigEAQgAAKIv/Z4lCAAAogABniUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) UpdateApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L284
        itxn_submit
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "there")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "there")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%7#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L287
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%11#0: string = ((extract 2 0) tmp%8#0)
        let result#0: string = tmp%11#0
        let tmp%12#0: bool = (== result#0 "hi there")
        (assert tmp%12#0)
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L291
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_other_constants() -> void:
    block@0: // L297
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 4u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmCQQVH3x1CGdyZWV0aW5nA251bQdhZGRyZXNzBm1ldGhvZAR0bXBsAUIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAEIAADEYQAAJQgAAiAChQgAAQgAANhoAgAQkN408TwGOAQBJQgAAMRkiEkQxGCITQQAfQgAANhoAgARbDCN1TwGOAQAHQgAAQgAAAIgARUL/9jYaAIAE2ShadE8BjgEABkIAAEL/5IgAFEL/9zEZgQUSMRgiExBEiAARQv+pQgAAiABBFihPAVCwI0NCAACIADgjQ0IAADYaAVcCAIgALkkVFlcGAk8BUChPAVCwI0NCAAApJwVnKicGZysnB2cnBCcIZ4lCAAAjiUIAAImKAQFCAAAiKmVEgAEwoEkVIwkjWCIpZUSAASBQi/9QTwFQIitlRFAiJwRlRFCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L299
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "Johnny")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Johnny")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)byte[]")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L314
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: bytes = ((extract 2 0) tmp%2#0)
        let result#0: bytes = tmp%5#0
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bytes = (concat 0x68656c6c6f204a6f686e6e7935 tmp%6#0)
        let tmp%8#0: bytes = (concat tmp%7#0 method "something()void")
        let tmp%9#0: bool = (== result#0 tmp%8#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L321
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_abi_call_create_params() -> void:
    block@0: // L323
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "hey")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hey")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAEmAQhncmVldGluZ0IAADEYQAAJQgAAiADOQgAAQgAAMRsiE0EAb0IAADYaAIAEJDeNPE8BjgEATEIAADEZIhJEMRgiE0EAIkIAADYaAIAE0KKCAE8BjgEACkIAAEIAAEIAAACIAFVC//M2GgCABCDfOlRPAY4BAAZCAABC/+GIACRC//cxGYEFEjEYIhMQRIgAIUL/pjEZgQQSMRgiExBEiABQI0NCAAA2GgFXAgCIACsjQ0IAAIgANiNDQgAANhoBVwIAiAAwSRUWVwYCTwFQgAQVH3x1TwFQsCNDigEAQgAAKIv/Z4lCAAAogABniUIAAIlCAACJigEBQgAAIihlRIABIFCL/1CJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L326
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%1#0
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "there")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "there")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L338
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let tmp%6#0: string = ((extract 2 0) tmp%3#0)
        let result#0: string = tmp%6#0
        let tmp%7#0: bool = (== result#0 "hey there")
        (assert tmp%7#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L343
        itxn_submit
        return 