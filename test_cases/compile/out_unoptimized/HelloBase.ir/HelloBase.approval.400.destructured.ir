main test_cases.compile.apps.HelloBase.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloBase.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.HelloBase.delete[routing]() -> void:
    block@0: // L24
        test_cases.compile.apps.HelloBase.delete()
        exit 1u

subroutine test_cases.compile.apps.HelloBase.greet[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%1#0: string = test_cases.compile.apps.HelloBase.greet(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.compile.apps.HelloBase.__init__() -> void:
    block@0: // L21
        (app_global_put "greeting" "")
        return 

subroutine test_cases.compile.apps.HelloBase.delete() -> void:
    block@0: // L24
        return 

subroutine test_cases.compile.apps.HelloBase.update() -> void:
    block@0: // L28
        return 

subroutine test_cases.compile.apps.HelloBase.greet(name: string) -> string:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L20
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@6, 2u => block@11, 3u => block@12, 4u => block@13, 5u => block@14, 6u => block@15, 7u => block@16, 8u => block@17, 9u => block@20, 10u => block@21, 11u => block@25, * => block@26}
    block@2: // switch_case_0_L20
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "greet(string)string" => block@3, * => block@4}
    block@3: // greet_route_L32
        test_cases.compile.apps.HelloBase.greet[routing]()
        goto block@5
    block@4: // switch_case_default_L20
        goto block@5
    block@5: // switch_case_next_L20
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L20
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@7 : block@10
    block@7: // __algopy_default_create_L1
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.compile.apps.HelloBase.__algopy_default_create_L1
        exit 1u
    block@10: // else_body_L20
        fail // this contract does not implement the given ABI method for create NoOp
    block@11: // switch_case_2_L20
        goto block@26
    block@12: // switch_case_3_L20
        goto block@26
    block@13: // switch_case_4_L20
        goto block@26
    block@14: // switch_case_5_L20
        goto block@26
    block@15: // switch_case_6_L20
        goto block@26
    block@16: // switch_case_7_L20
        goto block@26
    block@17: // switch_case_8_L20
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        goto tmp%9#0 ? block@18 : block@19
    block@18: // update_L28
        test_cases.compile.apps.HelloBase.update()
        exit 1u
    block@19: // else_body_L20
        fail // this contract does not implement the given ABI method for call UpdateApplication
    block@20: // switch_case_9_L20
        goto block@26
    block@21: // switch_case_10_L20
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "delete()void" => block@22, * => block@23}
    block@22: // delete_route_L24
        test_cases.compile.apps.HelloBase.delete[routing]()
        goto block@24
    block@23: // switch_case_default_L20
        goto block@24
    block@24: // switch_case_next_L20
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@25: // switch_case_11_L20
        goto block@26
    block@26: // switch_case_default_L20
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@27: // after_inlined_test_cases.compile.apps.HelloBase.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0