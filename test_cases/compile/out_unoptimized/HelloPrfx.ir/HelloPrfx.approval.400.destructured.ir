main test_cases.compile.apps.HelloPrfx.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloPrfx.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.HelloPrfx.__init__() -> void:
    block@0: // L68
        (app_global_put "greeting" TemplateVar[string](PRFX_GREETING))
        return 

subroutine test_cases.compile.apps.HelloPrfx.create() -> void:
    block@0: // L71
        return 

subroutine test_cases.compile.apps.HelloBase.delete() -> void:
    block@0: // L24
        return 

subroutine test_cases.compile.apps.HelloBase.update() -> void:
    block@0: // L28
        return 

subroutine test_cases.compile.apps.HelloBase.greet(name: string) -> string:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L67
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L67
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@3, method "delete()void" => block@4, method "greet(string)string" => block@5, * => block@6}
    block@3: // create_route_L71
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        test_cases.compile.apps.HelloPrfx.create()
        let test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0
        goto block@13
    block@4: // delete_route_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 DeleteApplication)
        (assert tmp%8#0) // OnCompletion is not DeleteApplication
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.compile.apps.HelloBase.delete()
        let test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0
        goto block@13
    block@5: // greet_route_L32
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%15#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%16#0: string = test_cases.compile.apps.HelloBase.greet(tmp%15#0)
        let aggregate%length%0#1: uint64 = (len tmp%16#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 tmp%16#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%17#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0
        goto block@13
    block@6: // switch_case_default_L67
        goto block@7
    block@7: // switch_case_next_L67
        goto block@12
    block@8: // bare_routing_L67
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {4u => block@9, * => block@10}
    block@9: // update_L28
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        test_cases.compile.apps.HelloBase.update()
        let test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0
        goto block@13
    block@10: // switch_case_default_L67
        goto block@11
    block@11: // switch_case_next_L67
        goto block@12
    block@12: // after_if_else_L67
        let test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__%0#0
        goto block@13
    block@13: // after_inlined_test_cases.compile.apps.HelloPrfx.__puya_arc4_router___L1
        return tmp%0#0