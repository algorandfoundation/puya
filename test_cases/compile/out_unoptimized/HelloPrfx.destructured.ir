contract test_cases.compile.apps.HelloPrfx:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L73
                test_cases.compile.apps.HelloPrfx.__init__()
                goto block@2
            block@2: // after_if_else_L73
                let tmp%0#0: bool = test_cases.compile.apps.HelloPrfx.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.compile.apps.HelloPrfx.__puya_arc4_router__() -> bool:
            block@0: // L71
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@7
            block@1: // abi_routing_L71
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create()void" => block@2, method "delete()void" => block@3, method "greet(string)string" => block@4, * => block@5}
            block@2: // create_route_L76
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (== tmp%5#0 0u)
                (assert tmp%6#0) // is creating
                test_cases.compile.apps.HelloPrfx.create()
                return 1u
            block@3: // delete_route_L25
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 DeleteApplication)
                (assert tmp%8#0) // OnCompletion is DeleteApplication
                let tmp%9#0: uint64 = (txn ApplicationID)
                let tmp%10#0: bool = (!= tmp%9#0 0u)
                (assert tmp%10#0) // is not creating
                test_cases.compile.apps.HelloBase.delete()
                return 1u
            block@4: // greet_route_L33
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (== tmp%11#0 NoOp)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: uint64 = (txn ApplicationID)
                let tmp%14#0: bool = (!= tmp%13#0 0u)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                let tmp%16#0: bytes = ((extract 2 0) tmp%15#0)
                let to_encode%0#0: bytes = test_cases.compile.apps.HelloBase.greet(tmp%16#0)
                let length%0#0: uint64 = (len to_encode%0#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
                let tmp%17#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
                (log tmp%17#0)
                return 1u
            block@5: // switch_case_default_L71
                goto block@6
            block@6: // switch_case_next_L71
                goto block@11
            block@7: // bare_routing_L71
                let tmp%18#0: uint64 = (txn OnCompletion)
                switch tmp%18#0 {4u => block@8, * => block@9}
            block@8: // update_L29
                let tmp%19#0: uint64 = (txn ApplicationID)
                let tmp%20#0: bool = (!= tmp%19#0 0u)
                (assert tmp%20#0) // is not creating
                test_cases.compile.apps.HelloBase.update()
                return 1u
            block@9: // switch_case_default_L71
                goto block@10
            block@10: // switch_case_next_L71
                goto block@11
            block@11: // after_if_else_L71
                return 0u
        
        subroutine test_cases.compile.apps.HelloPrfx.create() -> void:
            block@0: // L76
                return 
        
        subroutine test_cases.compile.apps.HelloBase.delete() -> void:
            block@0: // L25
                return 
        
        subroutine test_cases.compile.apps.HelloBase.greet(name: bytes) -> bytes:
            block@0: // L33
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
                (assert maybe_exists%0#0) // check self.greeting exists
                let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
                let tmp%1#0: bytes = (concat tmp%0#0 name#0)
                return tmp%1#0
        
        subroutine test_cases.compile.apps.HelloBase.update() -> void:
            block@0: // L29
                return 
        
        subroutine test_cases.compile.apps.HelloPrfx.__init__() -> void:
            block@0: // L73
                (app_global_put "greeting" TemplateVar[bytes](PRFX_GREETING))
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u