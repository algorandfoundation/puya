{
  "version": 3,
  "sources": [
    "../apps.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAqBQ;AAAgB;;AAAhB;AAFR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAYK;;AAAA;AAAA;AAAA;;AAAA;AAZL;;;AAAA;;;AAce;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJL;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAQK;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.compile.apps.HelloBase.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"greeting\""
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "21": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\""
      ]
    },
    "22": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\"",
        "\"\""
      ]
    },
    "24": {
      "op": "app_global_put",
      "stack_out": []
    },
    "25": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "27": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "30": {
      "op": "pushbytess 0x24378d3c 0xd0a28200 // method \"delete()void\", method \"greet(string)string\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(greet(string)string)"
      ],
      "stack_out": [
        "Method(delete()void)",
        "Method(greet(string)string)"
      ]
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "Method(greet(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete()void)",
        "Method(greet(string)string)",
        "tmp%2#0"
      ]
    },
    "45": {
      "op": "match main_delete_route@5 main_greet_route@6",
      "stack_out": []
    },
    "51": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "return",
      "stack_out": []
    },
    "53": {
      "block": "main_greet_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "56": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "59": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "60": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "63": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "66": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "67": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"greeting\""
      ]
    },
    "68": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "69": {
      "error": "check self.greeting exists",
      "op": "assert // check self.greeting exists",
      "stack_out": [
        "name#0",
        "maybe_value%0#0"
      ]
    },
    "70": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "maybe_value%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "\" \""
      ]
    },
    "73": {
      "op": "concat",
      "defined_out": [
        "name#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#3"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "name#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "76": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "77": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length%0#1"
      ]
    },
    "78": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "79": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length_uint16%0#1"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "tmp%1#1"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#1"
      ]
    },
    "84": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#1",
        "0x151f7c75"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#1"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": []
    },
    "95": {
      "block": "main_delete_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "97": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    },
    "106": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "108": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "4"
      ],
      "stack_out": [
        "4",
        "0"
      ]
    },
    "109": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "4",
        "tmp%15#0"
      ],
      "stack_out": [
        "4",
        "0",
        "tmp%15#0"
      ]
    },
    "111": {
      "op": "match main_update@8 main___algopy_default_create@9",
      "stack_out": []
    },
    "117": {
      "op": "b main_after_if_else@10"
    },
    "120": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "122": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "123": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "block": "main_update@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "128": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "130": {
      "op": "return",
      "stack_out": []
    }
  }
}