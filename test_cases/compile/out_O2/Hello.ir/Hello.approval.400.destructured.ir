main test_cases.compile.apps.Hello.__algopy_entrypoint_with_init:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" "")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@12
    block@4: // abi_routing_L52
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@5, * => block@6}
    block@5: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        exit lifted%return#0
    block@6: // switch_case_next_L52
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: bool = (txn ApplicationID)
        goto tmp%10#0 ? block@7 : block@9
    block@7: // call_NoOp_L52
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "greet(string)string" => block@8, * => block@11}
    block@8: // greet_route_L32
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#5: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#2: bytes = (concat tmp%0#5 name#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#2)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#2)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%3#1)
        exit lifted%return#0
    block@9: // create_NoOp_L52
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "create(string)void" => block@10, * => block@11}
    block@10: // create_route_L53
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let greeting#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        (app_global_put "greeting" greeting#0)
        exit lifted%return#0
    block@11: // after_if_else_L52
        fail
    block@12: // update_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 UpdateApplication)
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%17#0) // OnCompletion must be UpdateApplication && can only call when not creating
        exit lifted%return#0