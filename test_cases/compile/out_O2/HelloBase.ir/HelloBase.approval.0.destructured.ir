main test_cases.compile.apps.HelloBase.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" "")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@7
    block@4: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@5, method "greet(string)string" => block@6, * => block@10}
    block@5: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0
        goto block@11
    block@6: // greet_route_L32
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#3: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#1: bytes = (concat tmp%0#3 name#0)
        let length%0#0: uint64 = (len tmp%1#1)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%1#1)
        let tmp%13#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%13#0)
        let test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0
        goto block@11
    block@7: // bare_routing_L20
        let tmp%14#0: uint64 = (txn OnCompletion)
        switch tmp%14#0 {4u => block@8, 0u => block@9, * => block@10}
    block@8: // update_L28
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0
        goto block@11
    block@9: // __algopy_default_create_L1
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // can only call when creating
        let test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L20
        let test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.compile.apps.HelloBase.__puya_arc4_router___L1
        return tmp%0#0