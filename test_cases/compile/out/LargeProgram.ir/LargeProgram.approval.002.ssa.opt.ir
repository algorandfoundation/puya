main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@3, method "get_big_bytes_length()uint64" => block@4, * => block@5}
    block@3: // delete_route_L42
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        exit 1u
    block@4: // get_big_bytes_length_route_L38
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.compile.apps.LargeProgram.get_big_bytes_length[routing]()
        fail
    block@5: // switch_case_default_L37
        fail
    block@7: // bare_routing_L37
        let tmp%11#0: uint64 = (txn OnCompletion)
        let not%tmp%11#0: bool = (! tmp%11#0)
        (assert not%tmp%11#0)
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        exit 1u

subroutine test_cases.compile.apps.LargeProgram.get_big_bytes_length[routing]() -> void:
    block@0: // L38
        let tmp%1#1: uint64 = 4096u
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(4096u)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u