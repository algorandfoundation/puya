contract test_cases.compile.factory.HelloFactory:
    program approval:
        subroutine test_cases.compile.factory.HelloFactory.approval_program() -> bool:
            block@0: // L14
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@14
            block@1: // abi_routing_L14
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_logicsig()address" => block@2, method "test_compile_contract()void" => block@3, method "test_compile_contract_tmpl()void" => block@4, method "test_compile_contract_prfx()void" => block@5, method "test_compile_contract_large()void" => block@6, method "test_arc4_create()void" => block@7, method "test_arc4_create_tmpl()void" => block@8, method "test_arc4_create_prfx()void" => block@9, method "test_arc4_create_large()void" => block@10, method "test_arc4_update()void" => block@11, * => fail // reject transaction}
            block@2: // test_logicsig_route_L16
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = test_cases.compile.factory.HelloFactory.test_logicsig()
                let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
                (log tmp%6#0)
                return 1u
            block@3: // test_compile_contract_route_L20
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract()
                return 1u
            block@4: // test_compile_contract_tmpl_route_L51
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: bool = (! tmp%10#0)
                (assert tmp%11#0) // OnCompletion is NoOp
                let tmp%12#0: bool = (txn ApplicationID)
                (assert tmp%12#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl()
                return 1u
            block@5: // test_compile_contract_prfx_route_L86
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: bool = (txn ApplicationID)
                (assert tmp%15#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_prfx()
                return 1u
            block@6: // test_compile_contract_large_route_L119
                let tmp%16#0: uint64 = (txn OnCompletion)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // OnCompletion is NoOp
                let tmp%18#0: bool = (txn ApplicationID)
                (assert tmp%18#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_large()
                return 1u
            block@7: // test_arc4_create_route_L150
                let tmp%19#0: uint64 = (txn OnCompletion)
                let tmp%20#0: bool = (! tmp%19#0)
                (assert tmp%20#0) // OnCompletion is NoOp
                let tmp%21#0: bool = (txn ApplicationID)
                (assert tmp%21#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create()
                return 1u
            block@8: // test_arc4_create_tmpl_route_L167
                let tmp%22#0: uint64 = (txn OnCompletion)
                let tmp%23#0: bool = (! tmp%22#0)
                (assert tmp%23#0) // OnCompletion is NoOp
                let tmp%24#0: bool = (txn ApplicationID)
                (assert tmp%24#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl()
                return 1u
            block@9: // test_arc4_create_prfx_route_L188
                let tmp%25#0: uint64 = (txn OnCompletion)
                let tmp%26#0: bool = (! tmp%25#0)
                (assert tmp%26#0) // OnCompletion is NoOp
                let tmp%27#0: bool = (txn ApplicationID)
                (assert tmp%27#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_prfx()
                return 1u
            block@10: // test_arc4_create_large_route_L211
                let tmp%28#0: uint64 = (txn OnCompletion)
                let tmp%29#0: bool = (! tmp%28#0)
                (assert tmp%29#0) // OnCompletion is NoOp
                let tmp%30#0: bool = (txn ApplicationID)
                (assert tmp%30#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_large()
                return 1u
            block@11: // test_arc4_update_route_L226
                let tmp%31#0: uint64 = (txn OnCompletion)
                let tmp%32#0: bool = (! tmp%31#0)
                (assert tmp%32#0) // OnCompletion is NoOp
                let tmp%33#0: bool = (txn ApplicationID)
                (assert tmp%33#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_update()
                return 1u
            block@14: // bare_routing_L14
                let tmp%34#0: uint64 = (txn OnCompletion)
                let not%tmp%34#0: bool = (! tmp%34#0)
                (assert not%tmp%34#0) // reject transaction
                let tmp%35#0: bool = (txn ApplicationID)
                let tmp%36#0: bool = (! tmp%35#0)
                (assert tmp%36#0) // is creating
                return 1u
        
        subroutine test_cases.compile.factory.HelloFactory.test_logicsig() -> bytes:
            block@0: // L16
                return addr U3ZXEUNFRSUDPPNFC6U7OBYO4S4AUOEP4RDBI23L2Q5TX3K5LTSVWQOKFM
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract() -> void:
            block@0: // L20
                itxn_begin
                let encoded_value%0#0: bytes = 0x000568656c6c6f
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAJcxG0EAYYIDBCDfOlQEJDeNPATQooIANhoAjgMAAQAUACIAMRkURDEYFEQ2GgFXAgCIAEQiQzEZgQUSRDEYRIgAPiJDMRkURDEYRDYaAVcCAIgAMEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIAB4iQ4oBACiL/2eJigAAiYoBAYEAKGVEgAEgUIv/UImKAACJigAAKIAAZ4k=)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%1#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let encoded_value%2#0: bytes = 0x000b68656c6c6f20776f726c64
                let tmp%3#0: bool = (== result#0 encoded_value%2#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl() -> void:
            block@0: // L51
                itxn_begin
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAI0xG0EAW4IDBExcYboEJDeNPATQooIANhoAjgMAAQAOABwAMRkURDEYFESIAEQiQzEZgQUSRDEYRIgAOiJDMRkURDEYRDYaAVcCAIgALEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIABoiQ4oAAImKAACJigEBgQAoZUSAASBQi/9QiYoAAImKAAAogANoZXlniQ==)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%0#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let encoded_value%1#0: bytes = 0x000968657920776f726c64
                let tmp%3#0: bool = (== result#0 encoded_value%1#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_prfx() -> void:
            block@0: // L86
                itxn_begin
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAI0xG0EAW4IDBExcYboEJDeNPATQooIANhoAjgMAAQAOABwAMRkURDEYFESIAEQiQzEZgQUSRDEYRIgAOiJDMRkURDEYRDYaAVcCAIgALEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIABoiQ4oAAImKAACJigEBgQAoZUSAASBQi/9QiYoAAImKAAAogAJoaWeJ)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%0#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let encoded_value%1#0: bytes = 0x0008686920776f726c64
                let tmp%3#0: bool = (== result#0 encoded_value%1#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_large() -> void:
            block@0: // L119
                itxn_begin
                ((itxn_field ExtraProgramPages) 2u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABATEbQQA6ggIE9eT9TQQkN408NhoAjgIAAQAXADEZFEQxGESIACQWgAQVH3x1TFCwIkMxGYEFEkQxGESIEBsiQzEZFEQxGBREIkOKAAGIAAIViYo
                ((itxn_field ApprovalProgramPages) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAImKAACJ)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (b== result#0 0x0000000000001000)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create() -> void:
            block@0: // L150
                itxn_begin
                let encoded_value%0#0: bytes = 0x000568656c6c6f
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAJcxG0EAYYIDBCDfOlQEJDeNPATQooIANhoAjgMAAQAUACIAMRkURDEYFEQ2GgFXAgCIAEQiQzEZgQUSRDEYRIgAPiJDMRkURDEYRDYaAVcCAIgAMEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIAB4iQ4oBACiL/2eJigAAiYoBAYEAKGVEgAEgUIv/UImKAACJigAAKIAAZ4k=)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%1#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%14#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%14#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%14#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "hello world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl() -> void:
            block@0: // L167
                itxn_begin
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAI0xG0EAW4IDBExcYboEJDeNPATQooIANhoAjgMAAQAOABwAMRkURDEYFESIAEQiQzEZgQUSRDEYRIgAOiJDMRkURDEYRDYaAVcCAIgALEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIABoiQ4oAAImKAACJigEBgQAoZUSAASBQi/9QiYoAAImKAAAogAV0bXBsMmeJ)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%0#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "tmpl2 world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_prfx() -> void:
            block@0: // L188
                itxn_begin
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAI0xG0EAW4IDBExcYboEJDeNPATQooIANhoAjgMAAQAOABwAMRkURDEYFESIAEQiQzEZgQUSRDEYRIgAOiJDMRkURDEYRDYaAVcCAIgALEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIABoiQ4oAAImKAACJigEBgQAoZUSAASBQi/9QiYoAAImKAAAogAVwcmZ4MmeJ)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%0#0: bytes = 0x0005776f726c64
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "prfx2 world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_large() -> void:
            block@0: // L211
                itxn_begin
                ((itxn_field ExtraProgramPages) 2u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABATEbQQA6ggIE9eT9TQQkN408NhoAjgIAAQAXADEZFEQxGESIACQWgAQVH3x1TFCwIkMxGYEFEkQxGESIEBsiQzEZFEQxGBREIkOKAAGIAAIViYo
                ((itxn_field ApprovalProgramPages) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAImKAACJ)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%14#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%14#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%14#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: uint64 = (btoi tmp%0#0)
                let tmp%3#0: bool = (== result#0 4096u)
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_update() -> void:
            block@0: // L226
                itxn_begin
                ((itxn_field LocalNumUint) 2u)
                ((itxn_field LocalNumByteSlice) 2u)
                ((itxn_field GlobalNumUint) 2u)
                ((itxn_field GlobalNumByteSlice) 2u)
                ((itxn_field ExtraProgramPages) 1u)
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAI0xG0EAW4IDBExcYboEJDeNPATQooIANhoAjgMAAQAOABwAMRkURDEYFESIAEQiQzEZgQUSRDEYRIgAOiJDMRkURDEYRDYaAVcCAIgALEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIABoiQ4oAAImKAACJigEBgQAoZUSAASBQi/9QiYoAAImKAAAogAJoaWeJ)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let encoded_value%0#0: bytes = 0x00057468657265
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%14#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%14#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%14#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result#0 "hi there")
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field ClearStateProgramPages) CoEBQw==)
                ((itxn_field ApprovalProgramPages) CiABASYBCGdyZWV0aW5nMRhAAAOIAJcxG0EAYYIDBCDfOlQEJDeNPATQooIANhoAjgMAAQAUACIAMRkURDEYFEQ2GgFXAgCIAEQiQzEZgQUSRDEYRIgAPiJDMRkURDEYRDYaAVcCAIgAMEkVFlcGAkxQgAQVH3x1TFCwIkOBBDEZjgEAAQAxGESIAB4iQ4oBACiL/2eJigAAiYoBAYEAKGVEgAEgUIv/UImKAACJigAAKIAAZ4k=)
                ((itxn_field OnCompletion) UpdateApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                itxn_begin
                let encoded_value%1#0: bytes = 0x00057468657265
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%29#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%29#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%29#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result#1: bytes = ((extract 2 0) tmp%4#0)
                let tmp%7#0: bool = (== result#1 "hi there")
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
    
    program clear-state:
        subroutine test_cases.compile.factory.HelloFactory.clear_state_program() -> bool:
            block@0: // L14
                return 1u