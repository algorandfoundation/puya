main test_cases.compile.apps.HelloOtherConstants.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" TemplateVar[bytes](TMPL_GREETING))
        (app_global_put "num" TemplateVar[biguint](TMPL_NUM))
        (app_global_put "address" TemplateVar[bytes[32]](TMPL_ACCOUNT))
        (app_global_put "method" TemplateVar[bytes](TMPL_METHOD))
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.compile.apps.HelloOtherConstants.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.compile.apps.HelloOtherConstants.__puya_arc4_router__() -> bool:
    block@0: // L76
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@8
    block@1: // abi_routing_L76
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()uint64" => block@2, method "delete()void" => block@3, method "greet(string)byte[]" => block@4, * => block@8}
    block@2: // create_route_L83
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let tmp%7#0: bytes = 0x151f7c750000000000000001
        (log 0x151f7c750000000000000001)
        return 1u
    block@3: // delete_route_L87
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 DeleteApplication)
        (assert tmp%9#0) // OnCompletion is not DeleteApplication
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%10#0) // can only call when not creating
        return 1u
    block@4: // greet_route_L91
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let tmp%16#0: bytes = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = ((extract 2 0) tmp%16#0)
        let to_encode%1#0: bytes = test_cases.compile.apps.HelloOtherConstants.greet(tmp%17#0)
        let length%0#0: uint64 = (len to_encode%1#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%18#0)
        return 1u
    block@8: // after_if_else_L76
        return 0u

subroutine test_cases.compile.apps.HelloOtherConstants.greet(name: bytes) -> bytes:
    block@0: // L91
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num")
        (assert maybe_exists%0#0) // check self.num exists
        let tmp%0#0: biguint = (b+ maybe_value%0#0 48b)
        let tmp%1#0: uint64 = (len tmp%0#0)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let num_alpha#0: bytes = (extract3 tmp%0#0 tmp%2#0 1u)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%1#0) // check self.greeting exists
        let tmp%3#0: bytes = (concat maybe_value%1#0 0x20)
        let tmp%4#0: bytes = (concat tmp%3#0 name#0)
        let tmp%5#0: bytes = (concat tmp%4#0 num_alpha#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "address")
        (assert maybe_exists%2#0) // check self.address exists
        let tmp%6#0: bytes = (concat tmp%5#0 maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "method")
        (assert maybe_exists%3#0) // check self.method exists
        let tmp%7#0: bytes = (concat tmp%6#0 maybe_value%3#0)
        return tmp%7#0