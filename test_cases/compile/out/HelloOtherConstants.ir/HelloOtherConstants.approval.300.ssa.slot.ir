main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" TemplateVar[string](TMPL_GREETING))
        (app_global_put "num" TemplateVar[biguint](TMPL_NUM))
        (app_global_put "address" TemplateVar[account](TMPL_ACCOUNT))
        (app_global_put "method" TemplateVar[bytes](TMPL_METHOD))
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bytes = (txna ApplicationArgs 0)
        switch tmp%0#1 {method "delete()void" => block@4, * => block@5}
    block@4: // delete_route_L87
        let tmp%1#1: uint64 = (txn OnCompletion)
        let tmp%2#0: bool = (== tmp%1#1 DeleteApplication)
        let tmp%3#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (&& tmp%2#0 tmp%3#0)
        (assert tmp%5#0) // OnCompletion must be DeleteApplication && can only call when not creating
        exit 1u
    block@5: // switch_case_next_L76
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        goto tmp%8#0 ? block@6 : block@9
    block@6: // call_NoOp_L76
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "greet(string)byte[]" => block@7, * => block@12}
    block@7: // greet_route_L91
        test_cases.compile.apps.HelloOtherConstants.greet[routing]()
        goto block@12
    block@9: // create_NoOp_L76
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "create()uint64" => block@10, * => block@12}
    block@10: // create_route_L83
        (log 0x151f7c750000000000000001)
        exit 1u
    block@12: // after_if_else_L76
        fail

subroutine test_cases.compile.apps.HelloOtherConstants.greet[routing]() -> void:
    block@0: // L91
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num")
        (assert maybe_exists%0#0) // check self.num exists
        let tmp%0#1: biguint = (b+ maybe_value%0#0 48b)
        let tmp%1#1: uint64 = (len tmp%0#1)
        let tmp%2#1: uint64 = (- tmp%1#1 1u)
        let num_alpha#0: bytes = (extract3 tmp%0#1 tmp%2#1 1u)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%1#0) // check self.greeting exists
        let tmp%3#1: bytes = (concat maybe_value%1#0 0x20)
        let tmp%4#0: bytes = (concat tmp%3#1 name#0)
        let tmp%5#0: bytes = (concat tmp%4#0 num_alpha#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "address")
        (assert maybe_exists%2#0) // check self.address exists
        let tmp%6#0: bytes = (concat tmp%5#0 maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "method")
        (assert maybe_exists%3#0) // check self.method exists
        let tmp%7#0: bytes = (concat tmp%6#0 maybe_value%3#0)
        let aggregate%length%0#0: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%7#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%3#0)
        exit 1u