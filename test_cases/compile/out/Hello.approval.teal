#pragma version 10
#pragma typetrack false

// test_cases.compile.apps.Hello.__algopy_entrypoint_with_init() -> uint64:
main:
    bytecblock "greeting"
    // compile/apps.py:24
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    pushint 1 // 1
    txn ApplicationID
    bnz main_after_if_else@2
    // compile/apps.py:22
    // self.greeting = String()
    bytec_0 // "greeting"
    pushbytes ""
    app_global_put

main_after_if_else@2:
    // compile/apps.py:52
    // class Hello(HelloBase):
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytes 0x24378d3c // method "delete()void"
    txna ApplicationArgs 0
    match main_delete_route@5
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz main_create_NoOp@9
    pushbytes 0xd0a28200 // method "greet(string)string"
    txna ApplicationArgs 0
    match greet
    err

main_create_NoOp@9:
    // compile/apps.py:52
    // class Hello(HelloBase):
    pushbytes 0x20df3a54 // method "create(string)void"
    txna ApplicationArgs 0
    match create
    err

main_delete_route@5:
    // compile/apps.py:24
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    return

main_bare_routing@11:
    // compile/apps.py:52
    // class Hello(HelloBase):
    pushint 4 // 4
    txn OnCompletion
    match main_update@12
    err

main_update@12:
    // compile/apps.py:28
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // can only call when not creating
    return


// test_cases.compile.apps.Hello.create[routing]() -> void:
create:
    // compile/apps.py:53
    // @arc4.abimethod(create="require")
    txna ApplicationArgs 1
    extract 2 0
    // compile/apps.py:55
    // self.greeting = greeting
    bytec_0 // "greeting"
    swap
    app_global_put
    // compile/apps.py:53
    // @arc4.abimethod(create="require")
    pushint 1 // 1
    return


// test_cases.compile.apps.HelloBase.greet[routing]() -> void:
greet:
    // compile/apps.py:32
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    // compile/apps.py:34
    // return self.greeting + " " + name
    pushint 0 // 0
    bytec_0 // "greeting"
    app_global_get_ex
    assert // check self.greeting exists
    pushbytes " "
    concat
    swap
    concat
    // compile/apps.py:32
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
