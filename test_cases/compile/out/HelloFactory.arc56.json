{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_logicsig",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_modified_compiled",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_other_constants",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_abi_call_create_params",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        456
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1603,
                        1611,
                        1619,
                        1626
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        665,
                        756,
                        978,
                        1056,
                        1142,
                        1230,
                        1454,
                        1536,
                        1656,
                        1748,
                        1804,
                        2135,
                        2264
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        606
                    ],
                    "errorMessage": "can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEBgABBSYQBAqBAUMEFR98dQQkN408BNCiggAHAAV3b3JsZJEBCiYBCGdyZWV0aW5ngQExGEAABCiAAGcxG0EAO4AEJDeNPDYaAI4BACUxGRREMRhBAA42GgCABNCiggASREIALDYaAIAEIN86VBJEQgASMRmBBRJEMRhDMRmBBBJEMRhDNhoBVwIAKExngQFDNhoBVwIAgQAoZUSAASBQTFBJFRZXBgJMUIAEFR98dUxQsIEBQwRMXGG6BCDfOlQHAAV0aGVyZYYBCiYCCGdyZWV0aW5nBHRtcGyBATEYQAADKClnMRtBADiABCQ3jTw2GgCOAQAiMRkURDEYQQAONhoAgATQooIAEkRCAB02GgCABExcYboSQzEZgQUSRDEYQzEZgQQSRDEYQzYaAVcCAIEAKGVEgAEgUExQSRUWVwYCTFCABBUffHVMULCBAUMHAAVoZWxsb0YKgQExG0EANoICBCQ3jTwE9eT9TTYaAI4CABgAAQAxGRREMRhEgAwVH3x1AAAAAAAAEACwQzEZgQUSRDEYQzEZFEQxGBRDBPXk/U0FAANoZXkJaGV5IHRoZXJlCGhpIHRoZXJlJDEbQQCSMRkURDEYRIINBGD/opUEKheZXATrp0LqBDNaZDgEApR8ogSuHuhABHuQc/UEhUpoygQdoAShBMGZWr0Ef0519QQBllk3BH+/jMo2GgCODQABADEAkADpAcYCEgJuAsYDpgPrBGQE+AZ0AIAkFR98dabzclGljKg3vaUXqfcHDuS4CjiP5EYUa2vUOzvtXVzlsEMxGRREMRgUQ7EksjUoskInBbJAJweyGicKshoishAjsgGztD2xSbIYK7IaJwSyGiKyECOyAbO0PklXBABMVwAEKRJEsSWyGSqyGkyyGCKyECOyAbOADQALaGVsbG8gd29ybGQSRCRDsSSyNSiyQicJskAnBrIaIrIQI7IBs7Q9sUmyGCuyGicEshoishAjsgGztD5JVwQATFcABCkSRLElshkqshpMshgishAjsgGzgAsACWhleSB3b3JsZBJEJEOxJLI1KLJCgIQBCiYCCGdyZWV0aW5nAmhpgQExGEAAAygpZzEbQQA4gAQkN408NhoAjgEAIjEZFEQxGEEADjYaAIAE0KKCABJEQgAdNhoAgARMXGG6EkMxGYEFEkQxGEMxGYEEEkQxGEM2GgFXAgCBAChlRIABIFBMUEkVFlcGAkxQgAQVH3x1TFCwgQFDskAnBrIaIrIQI7IBs7Q9sUmyGCuyGicEshoishAjsgGztD5JVwQATFcABCkSRLElshkqshpMshgishAjsgGzgAoACGhpIHdvcmxkEkQkQ7EoskInC7JAIrIQI7IBs7Q9sUmyGCcMshoishAjsgGztD5JVwQATFcABCkSRLElshkqshpMshgishAjsgGzgAgAAAAAAAAQAKhEJEOxJLI1KLJCJwWyQCcHshonCrIaIrIQI7IBs7Q9sUmyGCuyGicEshoishAjsgGztD5JVwAEKRJEVwYAsSWyGUyyGCqyGiKyECOyAbOAC2hlbGxvIHdvcmxkEkQkQ7EksjUoskInCbJAJwayGiKyECOyAbO0PbFJshgrshonBLIaIrIQI7IBs7Q+SVcABCkSRFcGALElshlMshgqshoishAjsgGzgAt0bXBsMiB3b3JsZBJEJEOxJLI1KLJCgIcBCiYCCGdyZWV0aW5nBXByZngygQExGEAAAygpZzEbQQA4gAQkN408NhoAjgEAIjEZFEQxGEEADjYaAIAE0KKCABJEQgAdNhoAgARMXGG6EkMxGYEFEkQxGEMxGYEEEkQxGEM2GgFXAgCBAChlRIABIFBMUEkVFlcGAkxQgAQVH3x1TFCwgQFDskAnBrIaIrIQI7IBs7Q9sUmyGCuyGicEshoishAjsgGztD5JVwAEKRJEVwYAsSWyGUyyGCqyGiKyECOyAbOAC3ByZngyIHdvcmxkEkQkQ7EoskInC7JAIrIQI7IBs7Q9sUmyGCcMshoishAjsgGztD5JVwQATFcABCkSRBeBgCASRLElshmyGCqyGiKyECOyAbMkQ7GBA7I2JbI3gQSyNCKyNSiyQicFskAnB7IaJw2yGiKyECOyAbO0PUlyBESBAxJESXICRIEEEkRJcgVEJRJESXIDRCISRLFJshgrshonCLIaIrIQI7IBs7Q+SVcABCkSRFcGACcOEkSxJbIZshgqshoishAjsgGzJEOxgQKyNoECsjeBArI0gQKyNSSyOCiyQicJskAnBrIaIrIQI7IBs7Q9sUmyGCuyGicIshoishAjsgGztD5JVwAEKRJEVwYAJw8SRLEoskInBbJAgQSyGUmyGCKyECOyAbOxSbIYK7IaJwiyGiKyECOyAbO0PklXAAQpEkRXBgAnDxJEsSWyGbIYKrIaIrIQI7IBsyRDsYEEsjUoskKA7AEKIAIBACYICGdyZWV0aW5nA251bQdhZGRyZXNzBm1ldGhvZAR0bXBsAUIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAACIxGEAAECgnBGcpJwVnKicGZysnB2eABCQ3jTw2GgCOAQAyMRkURDEYQQAONhoAgARbDCN1EkRCACQ2GgCABNkoWnQSRIAMFR98dQAAAAAAAAABsEMxGYEFEkQxGEM2GgFXAgAjKWVEgAEwoEkVIgkiWCMoZUSAASBQTwJQTFAjKmVEUCMrZURQSRUWVwYCTFCABBUffHVMULAiQ7JAgATZKFp0shoishAjsgGztD2xSbIYgARbDCN1shqACAAGSm9obm55shoishAjsgGztD5JVwAEKRJEVwYAgDFoZWxsbyBKb2hubnk1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA4zUyEkSxJbIZshgqshoishAjsgGzJEOxJLI1KLJCJwWyQCcHshonDbIaIrIQI7IBs7Q9sUmyGCuyGicIshoishAjsgGztD5JVwAEKRJEVwYAJw4SRLElshmyGCqyGiKyECOyAbMkQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}