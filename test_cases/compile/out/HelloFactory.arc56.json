{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_logicsig",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_modified_compiled",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_other_constants",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_abi_call_create_params",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        457
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        608
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1599,
                        1607,
                        1615,
                        1622
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        667,
                        756,
                        980,
                        1056,
                        1140,
                        1226,
                        1452,
                        1532,
                        1652,
                        1744,
                        1800,
                        2134,
                        2263
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}