{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_logicsig",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_modified_compiled",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_other_constants",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_abi_call_create_params",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        610
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1601,
                        1609,
                        1617,
                        1624
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        669,
                        758,
                        982,
                        1058,
                        1142,
                        1228,
                        1454,
                        1534,
                        1654,
                        1746,
                        1802,
                        2136,
                        2265
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}