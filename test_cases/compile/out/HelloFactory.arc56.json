{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_logicsig",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_tmpl",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_prfx",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_create_modified_compiled",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_other_constants",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_abi_call_create_params",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        491
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        642
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1747,
                        1755,
                        1763,
                        1771
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        711,
                        811,
                        1058,
                        1141,
                        1239,
                        1339,
                        1591,
                        1678,
                        1814,
                        1916,
                        1985,
                        2344,
                        2487
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        2337
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        704,
                        804,
                        1051,
                        1232,
                        1332,
                        1584,
                        1807,
                        1909,
                        1978,
                        2480
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        1134,
                        1671
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}