main test_cases.compile.apps.HelloBase.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloBase.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.HelloBase.__puya_arc4_router__() -> bool:
    block@0: // L20
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@2, method "greet(string)string" => block@3, * => block@4}
    block@2: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.compile.apps.HelloBase.delete()
        return 1u
    block@3: // greet_route_L32
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: bytes = (txna ApplicationArgs 1)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        let to_encode%0#0: bytes = test_cases.compile.apps.HelloBase.greet(tmp%12#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%13#0)
        return 1u
    block@4: // switch_case_default_L20
        goto block@5
    block@5: // switch_case_next_L20
        goto block@11
    block@6: // bare_routing_L20
        let tmp%14#0: uint64 = (txn OnCompletion)
        switch tmp%14#0 {4u => block@7, 0u => block@8, * => block@9}
    block@7: // update_L28
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        test_cases.compile.apps.HelloBase.update()
        return 1u
    block@8: // __algopy_default_create_L1
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (== tmp%17#0 0u)
        (assert tmp%18#0) // can only call when creating
        test_cases.compile.apps.HelloBase.__algopy_default_create()
        return 1u
    block@9: // switch_case_default_L20
        goto block@10
    block@10: // switch_case_next_L20
        goto block@11
    block@11: // after_if_else_L20
        return 0u

subroutine test_cases.compile.apps.HelloBase.__init__() -> void:
    block@0: // L21
        (app_global_put "greeting" "")
        return 

subroutine test_cases.compile.apps.HelloBase.delete() -> void:
    block@0: // L24
        return 

subroutine test_cases.compile.apps.HelloBase.update() -> void:
    block@0: // L28
        return 

subroutine test_cases.compile.apps.HelloBase.greet(name: bytes) -> bytes:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0

subroutine test_cases.compile.apps.HelloBase.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__()
        return tmp%0#0