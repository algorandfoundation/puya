main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@18
    block@2: // abi_routing_L25
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_logicsig()address" => block@3, method "test_compile_contract()void" => block@4, method "test_compile_contract_tmpl()void" => block@5, method "test_compile_contract_prfx()void" => block@6, method "test_compile_contract_large()void" => block@7, method "test_arc4_create()void" => block@8, method "test_arc4_create_tmpl()void" => block@9, method "test_arc4_create_prfx()void" => block@10, method "test_arc4_create_large()void" => block@11, method "test_arc4_create_modified_compiled()void" => block@12, method "test_arc4_update()void" => block@13, method "test_other_constants()void" => block@14, method "test_abi_call_create_params()void" => block@15, * => block@22}
    block@3: // test_logicsig_route_L26
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log CUPXY5NG6NZFDJMMVA333JIXVH3QODXEXAFDRD7EIYKGW26UHM562XK44U)
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#0: bool = 1u
        goto block@23
    block@4: // test_compile_contract_route_L30
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_compile_contract()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#1: bool = 1u
        goto block@23
    block@5: // test_compile_contract_tmpl_route_L61
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#2: bool = 1u
        goto block@23
    block@6: // test_compile_contract_prfx_route_L96
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_compile_contract_prfx()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#3: bool = 1u
        goto block@23
    block@7: // test_compile_contract_large_route_L129
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_compile_contract_large()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#4: bool = 1u
        goto block@23
    block@8: // test_arc4_create_route_L160
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_create()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#5: bool = 1u
        goto block@23
    block@9: // test_arc4_create_tmpl_route_L177
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#6: bool = 1u
        goto block@23
    block@10: // test_arc4_create_prfx_route_L198
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_create_prfx()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#7: bool = 1u
        goto block@23
    block@11: // test_arc4_create_large_route_L221
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_create_large()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#8: bool = 1u
        goto block@23
    block@12: // test_arc4_create_modified_compiled_route_L236
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#9: bool = 1u
        goto block@23
    block@13: // test_arc4_update_route_L263
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_arc4_update()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#10: bool = 1u
        goto block@23
    block@14: // test_other_constants_route_L297
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_other_constants()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#11: bool = 1u
        goto block@23
    block@15: // test_abi_call_create_params_route_L323
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        test_cases.compile.factory.HelloFactory.test_abi_call_create_params()
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#12: bool = 1u
        goto block@23
    block@18: // bare_routing_L25
        let tmp%57#0: uint64 = (txn OnCompletion)
        goto tmp%57#0 ? block@22 : block@19
    block@19: // __algopy_default_create_L1
        let tmp%58#0: uint64 = (txn ApplicationID)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // can only call when creating
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#13: bool = 1u
        goto block@23
    block@22: // after_if_else_L25
        let test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#14: bool = 0u
        goto block@23
    block@23: // after_inlined_test_cases.compile.factory.HelloFactory.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#0 <- block@3, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#1 <- block@4, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#2 <- block@5, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#3 <- block@6, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#4 <- block@7, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#5 <- block@8, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#6 <- block@9, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#7 <- block@10, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#8 <- block@11, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#9 <- block@12, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#10 <- block@13, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#11 <- block@14, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#12 <- block@15, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#13 <- block@19, test_cases.compile.factory.HelloFactory.__puya_arc4_router__%0#14 <- block@22)
        return tmp%0#0

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract() -> void:
    block@0: // L30
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwAwACUAAiNDMRkURDEYRDYaAVcCAIgASUkVFlcGAkxQgAQVH3x1TFCwIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAASIkOBBDEZjgEAA0L/sjEYRCJDigEAKIv/Z4mKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%4#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let aggregate%length%2#1: uint64 = (len "hello world")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "hello world")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let tmp%7#0: bool = (== result#0 tmp%6#0)
        (assert tmp%7#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl() -> void:
    block@0: // L61
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAghncmVldGluZwR0bXBsMRhAAAMoKWcxG0EAVoIDBExcYboEJDeNPATQooIANhoAjgMAMAAlAAIjQzEZFEQxGEQ2GgFXAgCIADhJFRZXBgJMUIAEFR98dUxQsCJDMRmBBRJEMRhEIkMxGRREMRgURCJDgQQxGY4BAANC/7sxGEQiQ4oBASMoZUSAASBQi/9QiQ==)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%3#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let aggregate%length%1#1: uint64 = (len "hey world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "hey world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%6#0: bool = (== result#0 tmp%5#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_prfx() -> void:
    block@0: // L96
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAghncmVldGluZwJoaTEYQAADKClnMRtBAFaCAwRMXGG6BCQ3jTwE0KKCADYaAI4DADAAJQACI0MxGRREMRhENhoBVwIAiAA4SRUWVwYCTFCABBUffHVMULAiQzEZgQUSRDEYRCJDMRkURDEYFEQiQ4EEMRmOAQADQv+7MRhEIkOKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+utf8[]) = ((extract 4 0) txn.LastLog#0)
        let tmp%3#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let aggregate%length%1#1: uint64 = (len "hi world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "hi world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%6#0: bool = (== result#0 tmp%5#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_large() -> void:
    block@0: // L129
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQA9ggIE9eT9TQQkN408NhoAjgIADwADgQBDMRmBBRJEMRhEgQFDMRkURDEYRIAMFR98dQAAAAAAABAAsIEBQzEZQP/TMRgURIEBQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let result#0: Encoded(uint64) = ((extract 4 0) txn.LastLog#0)
        let tmp%2#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%4#0: bool = (b== result#0 0x0000000000001000)
        (assert tmp%4#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create() -> void:
    block@0: // L160
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwAwACUAAiNDMRkURDEYRDYaAVcCAIgASUkVFlcGAkxQgAQVH3x1TFCwIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAASIkOBBDEZjgEAA0L/sjEYRCJDigEAKIv/Z4mKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%3#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%7#0: bool = (== result#0 "hello world")
        (assert tmp%7#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl() -> void:
    block@0: // L177
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAghncmVldGluZwR0bXBsMRhAAAMoKWcxG0EAVoIDBExcYboEJDeNPATQooIANhoAjgMAMAAlAAIjQzEZFEQxGEQ2GgFXAgCIADhJFRZXBgJMUIAEFR98dUxQsCJDMRmBBRJEMRhEIkMxGRREMRgURCJDgQQxGY4BAANC/7sxGEQiQ4oBASMoZUSAASBQi/9QiQ==)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%2#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%6#0: bool = (== result#0 "tmpl2 world")
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_prfx() -> void:
    block@0: // L198
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAghncmVldGluZwVwcmZ4MjEYQAADKClnMRtBAFaCAwRMXGG6BCQ3jTwE0KKCADYaAI4DADAAJQACI0MxGRREMRhENhoBVwIAiAA4SRUWVwYCTFCABBUffHVMULAiQzEZgQUSRDEYRCJDMRkURDEYFEQiQ4EEMRmOAQADQv+7MRhEIkOKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let hello_app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%2#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) hello_app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%6#0: bool = (== result#0 "prfx2 world")
        (assert tmp%6#0)
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_large() -> void:
    block@0: // L221
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQA9ggIE9eT9TQQkN408NhoAjgIADwADgQBDMRmBBRJEMRhEgQFDMRkURDEYRIAMFR98dQAAAAAAABAAsIEBQzEZQP/TMRgURIEBQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result#0: uint64 = (btoi tmp%1#0)
        let tmp%5#0: bool = (== result#0 4096u)
        (assert tmp%5#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_modified_compiled() -> void:
    block@0: // L236
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hey")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hey")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field LocalNumUint) 3u)
        ((itxn_field LocalNumByteSlice) 5u)
        ((itxn_field GlobalNumUint) 4u)
        ((itxn_field GlobalNumByteSlice) 6u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwAwACUAAiNDMRkURDEYRDYaAVcCAIgASUkVFlcGAkxQgAQVH3x1TFCwIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAASIkOBBDEZjgEAA0L/sjEYRCJDigEAKIv/Z4mKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let (value%0#0: uint64, check%0#0: bool) = ((app_params_get AppLocalNumUint) app#0)
        (assert check%0#0) // application exists
        let tmp%2#0: bool = (== value%0#0 3u)
        (assert tmp%2#0)
        let (value%1#0: uint64, check%1#0: bool) = ((app_params_get AppGlobalNumUint) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bool = (== value%1#0 4u)
        (assert tmp%3#0)
        let (value%2#0: uint64, check%2#0: bool) = ((app_params_get AppLocalNumByteSlice) app#0)
        (assert check%2#0) // application exists
        let tmp%4#0: bool = (== value%2#0 5u)
        (assert tmp%4#0)
        let (value%3#0: uint64, check%3#0: bool) = ((app_params_get AppGlobalNumByteSlice) app#0)
        (assert check%3#0) // application exists
        let tmp%5#0: bool = (== value%3#0 6u)
        (assert tmp%5#0)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "there")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "there")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%6#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%7#0)
        let tmp%11#0: bool = (== result#0 "hey there")
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_arc4_update() -> void:
    block@0: // L263
        itxn_begin
        ((itxn_field LocalNumUint) 2u)
        ((itxn_field LocalNumByteSlice) 2u)
        ((itxn_field GlobalNumUint) 2u)
        ((itxn_field GlobalNumByteSlice) 2u)
        ((itxn_field ExtraProgramPages) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAghncmVldGluZwR0bXBsMRhAAAMoKWcxG0EAVoIDBExcYboEJDeNPATQooIANhoAjgMAMAAlAAIjQzEZFEQxGEQ2GgFXAgCIADhJFRZXBgJMUIAEFR98dUxQsCJDMRmBBRJEMRhEIkMxGRREMRgURCJDgQQxGY4BAANC/7sxGEQiQ4oBASMoZUSAASBQi/9QiQ==)
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "there")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "there")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%2#0)
        let tmp%6#0: bool = (== result#0 "hi there")
        (assert tmp%6#0)
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwAwACUAAiNDMRkURDEYRDYaAVcCAIgASUkVFlcGAkxQgAQVH3x1TFCwIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAASIkOBBDEZjgEAA0L/sjEYRCJDigEAKIv/Z4mKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field OnCompletion) UpdateApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let result#1: string = ((extract 2 0) tmp%8#0)
        let tmp%12#0: bool = (== result#1 "hi there")
        (assert tmp%12#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_other_constants() -> void:
    block@0: // L297
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 4u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAAEmCAhncmVldGluZwNudW0HYWRkcmVzcwZtZXRob2QEdG1wbAFCIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAxGEAAECgnBGcpJwVnKicGZysnB2cxG0EAHIIDBNkoWnQEJDeNPARbDCN1NhoAjgMAMAAlAAIiQzEZFEQxGEQ2GgFXAgCIADdJFRZXBgJMUIAEFR98dUxQsCNDMRmBBRJEMRhEI0MxGRREMRgURIAMFR98dQAAAAAAAAABsCNDigEBIillRIABMKBJFSMJI1giKGVEgAEgUIv/UExQIiplRFAiK2VEUIk=)
        ((itxn_field ApplicationArgs) method "create()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "Johnny")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "Johnny")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "greet(string)byte[]")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: bytes = ((extract 2 0) tmp%2#0)
        let tmp%9#0: bool = (== result#0 NBSWY3DPEBFG62DONZ4TKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDRTKMQ)
        (assert tmp%9#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.compile.factory.HelloFactory.test_abi_call_create_params() -> void:
    block@0: // L323
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hey")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hey")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwAwACUAAiNDMRkURDEYRDYaAVcCAIgASUkVFlcGAkxQgAQVH3x1TFCwIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAASIkOBBDEZjgEAA0L/sjEYRCJDigEAKIv/Z4mKAQEjKGVEgAEgUIv/UIk=)
        ((itxn_field ApplicationArgs) method "create(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "there")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "there")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let result#0: string = ((extract 2 0) tmp%3#0)
        let tmp%7#0: bool = (== result#0 "hey there")
        (assert tmp%7#0)
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 