contract test_cases.compile.factory.HelloFactory:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L-1
                let tmp%0#0: bool = test_cases.compile.factory.HelloFactory.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.compile.factory.HelloFactory.__puya_arc4_router__() -> bool:
            block@0: // L24
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@15
            block@1: // abi_routing_L24
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_logicsig()address" => block@2, method "test_compile_contract()void" => block@3, method "test_compile_contract_tmpl()void" => block@4, method "test_compile_contract_prfx()void" => block@5, method "test_compile_contract_large()void" => block@6, method "test_arc4_create()void" => block@7, method "test_arc4_create_tmpl()void" => block@8, method "test_arc4_create_prfx()void" => block@9, method "test_arc4_create_large()void" => block@10, method "test_arc4_update()void" => block@11, method "test_other_constants()void" => block@12, * => return 0u}
            block@2: // test_logicsig_route_L26
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = test_cases.compile.factory.HelloFactory.test_logicsig()
                let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
                (log tmp%8#0)
                return 1u
            block@3: // test_compile_contract_route_L30
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                (assert tmp%11#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract()
                return 1u
            block@4: // test_compile_contract_tmpl_route_L61
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: uint64 = (txn ApplicationID)
                (assert tmp%15#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl()
                return 1u
            block@5: // test_compile_contract_prfx_route_L96
                let tmp%17#0: uint64 = (txn OnCompletion)
                let tmp%18#0: bool = (! tmp%17#0)
                (assert tmp%18#0) // OnCompletion is NoOp
                let tmp%19#0: uint64 = (txn ApplicationID)
                (assert tmp%19#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_prfx()
                return 1u
            block@6: // test_compile_contract_large_route_L129
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: bool = (! tmp%21#0)
                (assert tmp%22#0) // OnCompletion is NoOp
                let tmp%23#0: uint64 = (txn ApplicationID)
                (assert tmp%23#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_compile_contract_large()
                return 1u
            block@7: // test_arc4_create_route_L160
                let tmp%25#0: uint64 = (txn OnCompletion)
                let tmp%26#0: bool = (! tmp%25#0)
                (assert tmp%26#0) // OnCompletion is NoOp
                let tmp%27#0: uint64 = (txn ApplicationID)
                (assert tmp%27#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create()
                return 1u
            block@8: // test_arc4_create_tmpl_route_L177
                let tmp%29#0: uint64 = (txn OnCompletion)
                let tmp%30#0: bool = (! tmp%29#0)
                (assert tmp%30#0) // OnCompletion is NoOp
                let tmp%31#0: uint64 = (txn ApplicationID)
                (assert tmp%31#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl()
                return 1u
            block@9: // test_arc4_create_prfx_route_L198
                let tmp%33#0: uint64 = (txn OnCompletion)
                let tmp%34#0: bool = (! tmp%33#0)
                (assert tmp%34#0) // OnCompletion is NoOp
                let tmp%35#0: uint64 = (txn ApplicationID)
                (assert tmp%35#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_prfx()
                return 1u
            block@10: // test_arc4_create_large_route_L221
                let tmp%37#0: uint64 = (txn OnCompletion)
                let tmp%38#0: bool = (! tmp%37#0)
                (assert tmp%38#0) // OnCompletion is NoOp
                let tmp%39#0: uint64 = (txn ApplicationID)
                (assert tmp%39#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_create_large()
                return 1u
            block@11: // test_arc4_update_route_L236
                let tmp%41#0: uint64 = (txn OnCompletion)
                let tmp%42#0: bool = (! tmp%41#0)
                (assert tmp%42#0) // OnCompletion is NoOp
                let tmp%43#0: uint64 = (txn ApplicationID)
                (assert tmp%43#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_arc4_update()
                return 1u
            block@12: // test_other_constants_route_L270
                let tmp%45#0: uint64 = (txn OnCompletion)
                let tmp%46#0: bool = (! tmp%45#0)
                (assert tmp%46#0) // OnCompletion is NoOp
                let tmp%47#0: uint64 = (txn ApplicationID)
                (assert tmp%47#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_other_constants()
                return 1u
            block@15: // bare_routing_L24
                let tmp%49#0: uint64 = (txn OnCompletion)
                goto tmp%49#0 ? block@19 : block@16
            block@16: // __algopy_default_create_L24
                let tmp%50#0: uint64 = (txn ApplicationID)
                let tmp%51#0: bool = (! tmp%50#0)
                (assert tmp%51#0) // is creating
                return 1u
            block@19: // after_if_else_L24
                return 0u
        
        subroutine test_cases.compile.factory.HelloFactory.test_logicsig() -> bytes:
            block@0: // L26
                return addr U3ZXEUNFRSUDPPNFC6U7OBYO4S4AUOEP4RDBI23L2Q5TX3K5LTSVWQOKFM
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract() -> void:
            block@0: // L30
                let compiled.0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACRiAABQ4oAATEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwACABUAICOJMRkURDEYFEQ2GgFXAgCIAD8iiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAKkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQAoi/9niYoBASMoZUSAASBQi/9QiYoAACiAAGeJ
                let compiled.1#0: bytes = 
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "hello")
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%1#0: uint64 = 5u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let length%2#0: uint64 = 11u
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "hello world")
                let tmp%3#0: bool = (== result#0 encoded_value%2#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_tmpl() -> void:
            block@0: // L61
                let compiled.0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACAiAABQ4oAATEbQQBWggMETFxhugQkN408BNCiggA2GgCOAwACAAwAFyOJMRkURDEYFEQiiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAIkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQEjKGVEgAEgUIv/UImKAAAogAR0bXBsZ4k=
                let compiled.1#0: bytes = 
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                let compiled.5#0: uint64 = 0u
                let compiled.6#0: uint64 = 1u
                let compiled.7#0: uint64 = 0u
                let compiled.8#0: uint64 = 0u
                itxn_begin
                ((itxn_field LocalNumByteSlice) compiled.8#0)
                ((itxn_field LocalNumUint) compiled.7#0)
                ((itxn_field GlobalNumByteSlice) compiled.6#0)
                ((itxn_field GlobalNumUint) compiled.5#0)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let length%1#0: uint64 = 9u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "hey world")
                let tmp%3#0: bool = (== result#0 encoded_value%1#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_prfx() -> void:
            block@0: // L96
                let compiled.0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACAiAABQ4oAATEbQQBWggMETFxhugQkN408BNCiggA2GgCOAwACAAwAFyOJMRkURDEYFEQiiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAIkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQEjKGVEgAEgUIv/UImKAAAogAJoaWeJ
                let compiled.1#0: bytes = 
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                let compiled.6#0: uint64 = 1u
                itxn_begin
                ((itxn_field GlobalNumByteSlice) compiled.6#0)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let length%1#0: uint64 = 8u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "hi world")
                let tmp%3#0: bool = (== result#0 encoded_value%1#0)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_compile_contract_large() -> void:
            block@0: // L129
                let compiled.0#0: bytes = CiACAQCIAAFDigABMRtBADiCAgT15P1NBCQ3jTw2GgCOAgACABgjiTEZFEQxGESIACQWgAQVH3x1TFCwIokxGYEFEkQxGEQiiTEZQAAGMRgURCKJI4mKAAGIAAIViYo
                let compiled.1#0: bytes = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIk=
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                let compiled.4#0: uint64 = 2u
                let compiled.6#0: uint64 = 0u
                itxn_begin
                ((itxn_field GlobalNumByteSlice) compiled.6#0)
                ((itxn_field ExtraProgramPages) compiled.4#0)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (b== result#0 0x0000000000001000)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create() -> void:
            block@0: // L160
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "hello")
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACRiAABQ4oAATEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwACABUAICOJMRkURDEYFEQ2GgFXAgCIAD8iiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAKkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQAoi/9niYoBASMoZUSAASBQi/9QiYoAACiAAGeJ
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = CoEBQw==
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 1u
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%1#0: uint64 = 5u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "hello world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_tmpl() -> void:
            block@0: // L177
                let compiled.0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACAiAABQ4oAATEbQQBWggMETFxhugQkN408BNCiggA2GgCOAwACAAwAFyOJMRkURDEYFEQiiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAIkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQEjKGVEgAEgUIv/UImKAAAogAR0bXBsZ4k=
                let compiled.1#0: bytes = 
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                let compiled.4#0: uint64 = 0u
                let compiled.5#0: uint64 = 0u
                let compiled.6#0: uint64 = 1u
                let compiled.7#0: uint64 = 0u
                let compiled.8#0: uint64 = 0u
                itxn_begin
                ((itxn_field LocalNumUint) compiled.7#0)
                ((itxn_field LocalNumByteSlice) compiled.8#0)
                ((itxn_field GlobalNumUint) compiled.5#0)
                ((itxn_field GlobalNumByteSlice) compiled.6#0)
                ((itxn_field ExtraProgramPages) compiled.4#0)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "tmpl2 world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_prfx() -> void:
            block@0: // L198
                let compiled.0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACAiAABQ4oAATEbQQBWggMETFxhugQkN408BNCiggA2GgCOAwACAAwAFyOJMRkURDEYFEQiiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAIkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQEjKGVEgAEgUIv/UImKAAAogAVwcmZ4MmeJ
                let compiled.1#0: bytes = 
                let compiled.2#0: bytes = CoEBQw==
                let compiled.3#0: bytes = 
                let compiled.4#0: uint64 = 0u
                let compiled.5#0: uint64 = 0u
                let compiled.6#0: uint64 = 1u
                let compiled.7#0: uint64 = 0u
                let compiled.8#0: uint64 = 0u
                itxn_begin
                ((itxn_field LocalNumUint) compiled.7#0)
                ((itxn_field LocalNumByteSlice) compiled.8#0)
                ((itxn_field GlobalNumUint) compiled.5#0)
                ((itxn_field GlobalNumByteSlice) compiled.6#0)
                ((itxn_field ExtraProgramPages) compiled.4#0)
                ((itxn_field ClearStateProgramPages) compiled.2#0)
                ((itxn_field ClearStateProgramPages) compiled.3#0)
                ((itxn_field ApprovalProgramPages) compiled.0#0)
                ((itxn_field ApprovalProgramPages) compiled.1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "world")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "prfx2 world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_create_large() -> void:
            block@0: // L221
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CiACAQCIAAFDigABMRtBADiCAgT15P1NBCQ3jTw2GgCOAgACABgjiTEZFEQxGESIACQWgAQVH3x1TFCwIokxGYEFEkQxGEQiiTEZQAAGMRgURCKJI4mKAAGIAAIViYo
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIk=
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = CoEBQw==
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 2u
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "get_big_bytes_length()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: uint64 = (btoi tmp%0#0)
                let tmp%3#0: bool = (== result#0 4096u)
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_arc4_update() -> void:
            block@0: // L236
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACAiAABQ4oAATEbQQBWggMETFxhugQkN408BNCiggA2GgCOAwACAAwAFyOJMRkURDEYFEQiiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAIkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQEjKGVEgAEgUIv/UImKAAAogAR0bXBsZ4k=
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = CoEBQw==
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
                ((itxn_field LocalNumUint) 2u)
                ((itxn_field LocalNumByteSlice) 2u)
                ((itxn_field GlobalNumUint) 2u)
                ((itxn_field GlobalNumByteSlice) 2u)
                ((itxn_field ExtraProgramPages) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "there")
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result#0 "hi there")
                (assert tmp%3#0)
                itxn_begin
                let inner_txn_params%2%%param_ApprovalProgramPages_idx_0#0: bytes = CiACAQAmAQhncmVldGluZzEYQAADiACRiAABQ4oAATEbQQBfggMEIN86VAQkN408BNCiggA2GgCOAwACABUAICOJMRkURDEYFEQ2GgFXAgCIAD8iiTEZgQUSRDEYRCKJMRkURDEYRDYaAVcCAIgAKkkVFlcGAkxQgAQVH3x1TFCwIomBBDEZjgEAAiOJMRhEIomKAQAoi/9niYoBASMoZUSAASBQi/9QiYoAACiAAGeJ
                let inner_txn_params%2%%param_ApprovalProgramPages_idx_1#0: bytes = 
                let inner_txn_params%2%%param_ClearStateProgramPages_idx_0#0: bytes = CoEBQw==
                let inner_txn_params%2%%param_ClearStateProgramPages_idx_1#0: bytes = 
                ((itxn_field ClearStateProgramPages) inner_txn_params%2%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%2%%param_ClearStateProgramPages_idx_1#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%2%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%2%%param_ApprovalProgramPages_idx_1#0)
                ((itxn_field OnCompletion) UpdateApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                itxn_begin
                let length%1#0: uint64 = 5u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "there")
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result#1: bytes = ((extract 2 0) tmp%4#0)
                let tmp%7#0: bool = (== result#1 "hi there")
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_other_constants() -> void:
            block@0: // L270
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CiACAAEmBQNudW0BMAhncmVldGluZwdhZGRyZXNzBm1ldGhvZDEYQAADiACXiAABQ4oAATEbQQBWggMETFxhugQkN408BFsMI3U2GgCOAwACAAwAFyKJMRkURDEYFEQjiTEZgQUSRDEYRCOJMRkURDEYRDYaAVcCAIgAFUkVFlcGAkxQgAQVH3x1TFCwI4kiiYoBASIoZUQpoBUjCSIoZUQpoEsBIwhMTgJSIiplRIABIFCL/1BMUCIrZURQIicEZURQiYoAACqABHRtcGxnKIABQmcrgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGcnBIAEAAAAAGeJ
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = CoEBQw==
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 4u
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let length%0#0: uint64 = 6u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Johnny")
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "greet(string)byte[]")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%4#0: bytes = NBSWY3DPEBFG62DONZ4TKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                let tmp%5#0: bytes = (concat tmp%4#0 method "something()void")
                let tmp%6#0: bool = (== result#0 tmp%5#0)
                (assert tmp%6#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u