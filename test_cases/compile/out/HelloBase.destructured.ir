contract test_cases.compile.apps.HelloBase:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L22
                test_cases.compile.apps.HelloBase.__init__()
                goto block@2
            block@2: // entrypoint_L22
                let tmp%0#0: bool = test_cases.compile.apps.HelloBase.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.compile.apps.HelloBase.__puya_arc4_router__() -> bool:
            block@0: // L20
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L20
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "delete()void" => block@2, method "greet(string)string" => block@3, * => return 0u}
            block@2: // delete_route_L25
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
                (assert tmp%4#0) // OnCompletion is DeleteApplication
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                return 1u
            block@3: // greet_route_L33
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
                let tmp%13#0: bytes = test_cases.compile.apps.HelloBase.greet(tmp%12#0)
                let length%0#0: uint64 = (len tmp%13#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%13#0)
                let tmp%14#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
                (log tmp%14#0)
                return 1u
            block@6: // bare_routing_L20
                let tmp%15#0: uint64 = (txn OnCompletion)
                switch tmp%15#0 {0u => block@7, 4u => block@8, * => return 0u}
            block@7: // __algopy_default_create_L20
                let tmp%16#0: uint64 = (txn ApplicationID)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // is creating
                return 1u
            block@8: // update_L29
                let tmp%18#0: uint64 = (txn ApplicationID)
                (assert tmp%18#0) // is not creating
                return 1u
        
        subroutine test_cases.compile.apps.HelloBase.greet(name: bytes) -> bytes:
            block@0: // L33
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
                (assert maybe_exists%0#0) // check self.greeting exists
                let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
                let tmp%1#0: bytes = (concat tmp%0#0 name#0)
                return tmp%1#0
        
        subroutine test_cases.compile.apps.HelloBase.__init__() -> void:
            block@0: // L22
                (app_global_put "greeting" "")
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u