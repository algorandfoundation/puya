// Op                                                                        Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                    tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // compile/apps.py:22
        // self.greeting = String()
        byte "greeting"                                                      "greeting"
        byte ""                                                              "greeting",""
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // compile/apps.py:52
        // class Hello(HelloBase):
        txn NumAppArgs                                                       tmp%0#1
        bz main_update@14 ; b main_abi_routing@4

    main_abi_routing@4:
        // compile/apps.py:52
        // class Hello(HelloBase):
        txna ApplicationArgs 0                                               tmp%2#0
        method delete()void                                                  tmp%2#0,Method(delete()void)
        l-load tmp%2#0 1                                                     Method(delete()void),tmp%2#0
        match main_delete_route@5 ; b main_switch_case_next@6

    main_delete_route@5:
        // compile/apps.py:24
        // @arc4.abimethod(allow_actions=["DeleteApplication"])
        txn OnCompletion                                                     tmp%3#0
        int DeleteApplication                                                tmp%3#0,DeleteApplication
        ==                                                                   tmp%4#0
        txn ApplicationID                                                    tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                     tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                     tmp%4#0,tmp%5#0
        &&                                                                   tmp%7#0
        assert // OnCompletion must be DeleteApplication && can only call when not creating 
        int 1                                                                1
        return

    main_switch_case_next@6:
        // compile/apps.py:52
        // class Hello(HelloBase):
        txn OnCompletion                                                     tmp%8#0
        !                                                                    tmp%9#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                    tmp%10#0
        bz main_create_NoOp@10 ; b main_call_NoOp@7

    main_call_NoOp@7:
        // compile/apps.py:52
        // class Hello(HelloBase):
        txna ApplicationArgs 0                                               tmp%12#0
        method greet(string)string                                           tmp%12#0,Method(greet(string)string)
        l-load tmp%12#0 1                                                    Method(greet(string)string),tmp%12#0
        match main_greet_route@8 ; b main_after_if_else@13

    main_greet_route@8:
        // compile/apps.py:32
        // @arc4.abimethod()
        callsub greet
        b main_after_if_else@13

    main_create_NoOp@10:
        // compile/apps.py:52
        // class Hello(HelloBase):
        txna ApplicationArgs 0                                               tmp%13#0
        method create(string)void                                            tmp%13#0,Method(create(string)void)
        l-load tmp%13#0 1                                                    Method(create(string)void),tmp%13#0
        match main_create_route@11 ; b main_after_if_else@13

    main_create_route@11:
        // compile/apps.py:53
        // @arc4.abimethod(create="require")
        callsub create
        b main_after_if_else@13

    main_after_if_else@13:
        // compile/apps.py:52
        // class Hello(HelloBase):
        err

    main_update@14:
        // compile/apps.py:28
        // @arc4.baremethod(allow_actions=["UpdateApplication"])
        txn OnCompletion                                                     tmp%14#0
        int UpdateApplication                                                tmp%14#0,UpdateApplication
        ==                                                                   tmp%15#0
        txn ApplicationID                                                    tmp%15#0,tmp%16#0
        l-load tmp%15#0 1                                                    tmp%16#0,tmp%15#0
        l-load tmp%16#0 1                                                    tmp%15#0,tmp%16#0
        &&                                                                   tmp%18#0
        assert // OnCompletion must be UpdateApplication && can only call when not creating 
        int 1                                                                1
        return


// test_cases.compile.apps.Hello.create[routing]() -> void:
subroutine create:
    create_block@0:
        // compile/apps.py:53
        // @arc4.abimethod(create="require")
        txna ApplicationArgs 1                                               tmp%0#0
        l-load-copy tmp%0#0 0                                                tmp%0#0,tmp%0#0 (copy)
        int 0                                                                tmp%0#0,tmp%0#0 (copy),0
        extract_uint16 // on error: invalid array length header              tmp%0#0,aggregate%array_length%0#0
        int 2                                                                tmp%0#0,aggregate%array_length%0#0,2
        +                                                                    tmp%0#0,add%0#0
        l-load-copy tmp%0#0 1                                                tmp%0#0,add%0#0,tmp%0#0 (copy)
        len                                                                  tmp%0#0,add%0#0,len%0#0
        l-load add%0#0 1                                                     tmp%0#0,len%0#0,add%0#0
        ==                                                                   tmp%0#0,eq%0#0
        assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8> tmp%0#0
        l-load tmp%0#0 0                                                     tmp%0#0
        extract 2 0                                                          greeting#0
        // compile/apps.py:55
        // self.greeting = greeting
        byte "greeting"                                                      greeting#0,"greeting"
        l-load greeting#0 1                                                  "greeting",greeting#0
        app_global_put
        // compile/apps.py:53
        // @arc4.abimethod(create="require")
        int 1                                                                1
        return


// test_cases.compile.apps.HelloBase.greet[routing]() -> void:
subroutine greet:
    greet_block@0:
        // compile/apps.py:32
        // @arc4.abimethod()
        txna ApplicationArgs 1                                               tmp%0#0
        l-load-copy tmp%0#0 0                                                tmp%0#0,tmp%0#0 (copy)
        int 0                                                                tmp%0#0,tmp%0#0 (copy),0
        extract_uint16 // on error: invalid array length header              tmp%0#0,aggregate%array_length%0#0
        int 2                                                                tmp%0#0,aggregate%array_length%0#0,2
        +                                                                    tmp%0#0,add%0#0
        l-load-copy tmp%0#0 1                                                tmp%0#0,add%0#0,tmp%0#0 (copy)
        len                                                                  tmp%0#0,add%0#0,len%0#0
        l-load add%0#0 1                                                     tmp%0#0,len%0#0,add%0#0
        ==                                                                   tmp%0#0,eq%0#0
        assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8> tmp%0#0
        l-load tmp%0#0 0                                                     tmp%0#0
        extract 2 0                                                          name#0
        // compile/apps.py:34
        // return self.greeting + " " + name
        int 0                                                                name#0,0
        byte "greeting"                                                      name#0,0,"greeting"
        app_global_get_ex                                                    name#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.greeting exists                                 name#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                             name#0,maybe_value%0#0
        byte " "                                                             name#0,maybe_value%0#0," "
        concat                                                               name#0,tmp%0#0
        l-load name#0 1                                                      tmp%0#0,name#0
        concat                                                               tmp%1#1
        // compile/apps.py:32
        // @arc4.abimethod()
        l-load-copy tmp%1#1 0                                                tmp%1#1,tmp%1#1 (copy)
        len                                                                  tmp%1#1,aggregate%length%0#0
        itob                                                                 tmp%1#1,aggregate%as_bytes%0#0
        extract 6 2                                                          tmp%1#1,aggregate%length_uint16%0#0
        l-load tmp%1#1 1                                                     aggregate%length_uint16%0#0,tmp%1#1
        concat                                                               aggregate%encoded_value%0#0
        byte 0x151f7c75                                                      aggregate%encoded_value%0#0,0x151f7c75
        l-load aggregate%encoded_value%0#0 1                                 0x151f7c75,aggregate%encoded_value%0#0
        concat                                                               tmp%4#0
        log
        int 1                                                                1
        return


