main test_cases.compile.apps.Hello.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.compile.apps.HelloBase.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.compile.apps.Hello.__puya_arc4_router__() -> bool:
    block@0: // L52
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@14
    block@1: // abi_routing_L52
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@2, * => block@3}
    block@2: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        test_cases.compile.apps.HelloBase.delete[routing]()
        goto block@4
    block@3: // switch_case_default_L52
        goto block@4
    block@4: // switch_case_next_L52
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion must be NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        goto tmp%11#0 ? block@5 : block@9
    block@5: // call_NoOp_L52
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "greet(string)string" => block@6, * => block@7}
    block@6: // greet_route_L32
        test_cases.compile.apps.HelloBase.greet[routing]()
        goto block@8
    block@7: // switch_case_default_L52
        goto block@8
    block@8: // switch_case_next_L52
        goto block@13
    block@9: // create_NoOp_L52
        let tmp%13#0: bytes = (txna ApplicationArgs 0)
        switch tmp%13#0 {method "create(string)void" => block@10, * => block@11}
    block@10: // create_route_L53
        test_cases.compile.apps.Hello.create[routing]()
        goto block@12
    block@11: // switch_case_default_L52
        goto block@12
    block@12: // switch_case_next_L52
        goto block@13
    block@13: // after_if_else_L52
        goto block@15
    block@14: // update_L28
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 UpdateApplication)
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        let tmp%18#0: bool = (&& tmp%15#0 tmp%17#0)
        (assert tmp%18#0) // OnCompletion must be UpdateApplication && can only call when not creating
        test_cases.compile.apps.HelloBase.update()
        exit 1u
    block@15: // after_if_else_L52
        exit 0u

subroutine test_cases.compile.apps.Hello.create[routing]() -> void:
    block@0: // L53
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        test_cases.compile.apps.Hello.create(tmp%0#0)
        exit 1u

subroutine test_cases.compile.apps.HelloBase.delete[routing]() -> void:
    block@0: // L24
        test_cases.compile.apps.HelloBase.delete()
        exit 1u

subroutine test_cases.compile.apps.HelloBase.greet[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%1#0: string = test_cases.compile.apps.HelloBase.greet(tmp%0#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.compile.apps.Hello.create(greeting: string) -> void:
    block@0: // L53
        (app_global_put "greeting" greeting#0)
        return 

subroutine test_cases.compile.apps.HelloBase.__init__() -> void:
    block@0: // L21
        (app_global_put "greeting" "")
        return 

subroutine test_cases.compile.apps.HelloBase.delete() -> void:
    block@0: // L24
        return 

subroutine test_cases.compile.apps.HelloBase.update() -> void:
    block@0: // L28
        return 

subroutine test_cases.compile.apps.HelloBase.greet(name: string) -> string:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.compile.apps.Hello.__puya_arc4_router__()
        return tmp%0#0