{
  "version": 3,
  "sources": [
    "../apps.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBQ;AAAgB;;AAAhB;AA8BR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;AApBK;;AAAA;AAAA;AAAA;;AAAA;AAoBL;;;AAAA;;;AApBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA6BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADL;;;AAAA;;;AAGQ;AAAA;AAAA;AAFH;;AADL;;AAAA;;AAAA;;;;AAAA;;;AAxBK;;AAAA;AAAA;;AAIL;;;AAEe;;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.compile.apps.Hello.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock \"greeting\""
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "17": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "20": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\""
      ]
    },
    "21": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\"",
        "\"\""
      ]
    },
    "23": {
      "op": "app_global_put",
      "stack_out": []
    },
    "24": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x20df3a54 0x24378d3c 0xd0a28200 // method \"create(string)void\", method \"delete()void\", method \"greet(string)string\"",
      "defined_out": [
        "Method(create(string)void)",
        "Method(delete()void)",
        "Method(greet(string)string)"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "Method(delete()void)",
        "Method(greet(string)string)"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(string)void)",
        "Method(delete()void)",
        "Method(greet(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "Method(delete()void)",
        "Method(greet(string)string)",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "match main_create_route@5 main_delete_route@6 main_greet_route@7",
      "stack_out": []
    },
    "57": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "58": {
      "block": "main_greet_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "60": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "61": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "64": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "65": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "68": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "71": {
      "callsub": "test_cases.compile.apps.HelloBase.greet",
      "op": "callsub greet",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "74": {
      "op": "dup",
      "defined_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "75": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "aggregate%length%0#0"
      ]
    },
    "76": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "77": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%17#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "82": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "90": {
      "op": "log",
      "stack_out": []
    },
    "91": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "return",
      "stack_out": []
    },
    "93": {
      "block": "main_delete_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "95": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "DeleteApplication"
      ]
    },
    "97": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "98": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "111": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "115": {
      "op": "extract 2 0",
      "defined_out": [
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0"
      ]
    },
    "118": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0",
        "\"greeting\""
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "\"greeting\"",
        "greeting#0"
      ]
    },
    "120": {
      "op": "app_global_put",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "125": {
      "op": "txn OnCompletion",
      "defined_out": [
        "4",
        "tmp%20#0"
      ],
      "stack_out": [
        "4",
        "tmp%20#0"
      ]
    },
    "127": {
      "op": "match main_update@9",
      "stack_out": []
    },
    "131": {
      "op": "b main_after_if_else@10"
    },
    "134": {
      "block": "main_update@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    },
    "139": {
      "subroutine": "test_cases.compile.apps.HelloBase.greet",
      "params": {
        "name#0": "bytes"
      },
      "block": "greet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "142": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "144": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"greeting\""
      ]
    },
    "145": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "146": {
      "error": "check self.greeting exists",
      "op": "assert // check self.greeting exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "147": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\" \""
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "frame_dig -1",
      "defined_out": [
        "name#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "name#0 (copy)"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    }
  }
}