{
  "version": 3,
  "sources": [
    "../apps.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBQ;AAAgB;;AAAhB;AA8BR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AA5BK;AAAA;AA4BL;;AAAA;AAxBK;AAwBL;;;;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;;AAAA;;;AAEG;AAAA;AAAA;AAFH;AAAA;AArBA;;;AAAA;;;AAEU;;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.compile.apps.Hello.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock \"greeting\""
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "17": {
      "op": "bnz after_if_else@2",
      "stack_out": []
    },
    "20": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\""
      ]
    },
    "21": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\"",
        "\"\""
      ]
    },
    "23": {
      "op": "app_global_put",
      "stack_out": []
    },
    "24": {
      "block": "after_if_else@2",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "29": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "30": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "31": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "32": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED call_UpdateApplication *NOT_IMPLEMENTED call_DeleteApplication *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "58": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "59": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)"
      ],
      "stack_out": [
        "Method(delete()void)"
      ]
    },
    "65": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "tmp%9#0"
      ],
      "stack_out": [
        "Method(delete()void)",
        "tmp%9#0"
      ]
    },
    "68": {
      "op": "match delete_route@12",
      "stack_out": []
    },
    "72": {
      "error": "this contract does not implement the given ABI method for call DeleteApplication",
      "op": "err // this contract does not implement the given ABI method for call DeleteApplication"
    },
    "73": {
      "block": "delete_route@12",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "74": {
      "op": "return",
      "stack_out": []
    },
    "75": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "78": {
      "error": "this contract does not implement the given ABI method for call UpdateApplication",
      "op": "return // on error: this contract does not implement the given ABI method for call UpdateApplication",
      "defined_out": [],
      "stack_out": []
    },
    "79": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "pushbytes 0x20df3a54 // method \"create(string)void\"",
      "defined_out": [
        "Method(create(string)void)"
      ],
      "stack_out": [
        "Method(create(string)void)"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(string)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "tmp%6#0"
      ]
    },
    "88": {
      "op": "match create",
      "stack_out": []
    },
    "92": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "93": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytes 0xd0a28200 // method \"greet(string)string\"",
      "defined_out": [
        "Method(greet(string)string)"
      ],
      "stack_out": [
        "Method(greet(string)string)"
      ]
    },
    "99": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(greet(string)string)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(greet(string)string)",
        "tmp%5#0"
      ]
    },
    "102": {
      "op": "match greet",
      "stack_out": []
    },
    "106": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "107": {
      "subroutine": "test_cases.compile.apps.Hello.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "110": {
      "op": "extract 2 0",
      "defined_out": [
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0"
      ]
    },
    "113": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "greeting#0"
      ],
      "stack_out": [
        "greeting#0",
        "\"greeting\""
      ]
    },
    "114": {
      "op": "swap",
      "stack_out": [
        "\"greeting\"",
        "greeting#0"
      ]
    },
    "115": {
      "op": "app_global_put",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "subroutine": "test_cases.compile.apps.HelloBase.greet[routing]",
      "params": {},
      "block": "greet",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "121": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "124": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "126": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"greeting\""
      ]
    },
    "127": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "128": {
      "error": "check self.greeting exists",
      "op": "assert // check self.greeting exists",
      "stack_out": [
        "name#0",
        "maybe_value%0#0"
      ]
    },
    "129": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "maybe_value%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "\" \""
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "name#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "name#0"
      ]
    },
    "134": {
      "op": "concat",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "136": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length%0#0"
      ]
    },
    "137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "138": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#1"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "143": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "151": {
      "op": "log",
      "stack_out": []
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    }
  }
}