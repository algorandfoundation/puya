{
  "version": 3,
  "sources": [
    "../apps.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EQ;AAAgB;;AAAhB;AACA;AAAW;;AAAX;AACA;AAAe;;AAAf;AACA;AAAc;;AAAd;AALR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;AAeK;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;;;AAeK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAQL;;;AAEqB;AAAA;AAAA;AAAA;AAAW;;;AAAX;AAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAER;AAAA;AAAA;AAAA;AAAsB;;;AAAtB;AAAA;;AAAA;AAAA;AAAA;AAAsD;AAAA;AAAA;AAAA;AAAtD;AAA2E;AAAA;AAAA;AAAA;AAA3E;AADJ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.compile.apps.HelloOtherConstants.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"greeting\" \"num\" \"address\" \"method\" TMPL_GREETING TMPL_NUM TMPL_ACCOUNT TMPL_METHOD"
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "85": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\""
      ],
      "stack_out": [
        "\"greeting\""
      ]
    },
    "86": {
      "op": "bytec 4 // TMPL_GREETING",
      "defined_out": [
        "\"greeting\"",
        "TMPL_GREETING"
      ],
      "stack_out": [
        "\"greeting\"",
        "TMPL_GREETING"
      ]
    },
    "88": {
      "op": "app_global_put",
      "stack_out": []
    },
    "89": {
      "op": "bytec_1 // \"num\"",
      "defined_out": [
        "\"num\""
      ],
      "stack_out": [
        "\"num\""
      ]
    },
    "90": {
      "op": "bytec 5 // TMPL_NUM",
      "defined_out": [
        "\"num\"",
        "TMPL_NUM"
      ],
      "stack_out": [
        "\"num\"",
        "TMPL_NUM"
      ]
    },
    "92": {
      "op": "app_global_put",
      "stack_out": []
    },
    "93": {
      "op": "bytec_2 // \"address\"",
      "defined_out": [
        "\"address\""
      ],
      "stack_out": [
        "\"address\""
      ]
    },
    "94": {
      "op": "bytec 6 // TMPL_ACCOUNT",
      "defined_out": [
        "\"address\"",
        "TMPL_ACCOUNT"
      ],
      "stack_out": [
        "\"address\"",
        "TMPL_ACCOUNT"
      ]
    },
    "96": {
      "op": "app_global_put",
      "stack_out": []
    },
    "97": {
      "op": "bytec_3 // \"method\"",
      "defined_out": [
        "\"method\""
      ],
      "stack_out": [
        "\"method\""
      ]
    },
    "98": {
      "op": "bytec 7 // TMPL_METHOD",
      "defined_out": [
        "\"method\"",
        "TMPL_METHOD"
      ],
      "stack_out": [
        "\"method\"",
        "TMPL_METHOD"
      ]
    },
    "100": {
      "op": "app_global_put",
      "stack_out": []
    },
    "101": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "103": {
      "op": "bz main_after_if_else@8",
      "stack_out": []
    },
    "106": {
      "op": "pushbytess 0xd9285a74 0x24378d3c 0x5b0c2375 // method \"create()uint64\", method \"delete()void\", method \"greet(string)byte[]\"",
      "defined_out": [
        "Method(create()uint64)",
        "Method(delete()void)",
        "Method(greet(string)byte[])"
      ],
      "stack_out": [
        "Method(create()uint64)",
        "Method(delete()void)",
        "Method(greet(string)byte[])"
      ]
    },
    "123": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()uint64)",
        "Method(delete()void)",
        "Method(greet(string)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()uint64)",
        "Method(delete()void)",
        "Method(greet(string)byte[])",
        "tmp%2#0"
      ]
    },
    "126": {
      "op": "match main_create_route@5 main_delete_route@6 main_greet_route@7",
      "stack_out": []
    },
    "134": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "135": {
      "block": "main_greet_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "142": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "145": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "148": {
      "callsub": "test_cases.compile.apps.HelloOtherConstants.greet",
      "op": "callsub greet",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "151": {
      "op": "dup",
      "defined_out": [
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "152": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "aggregate%length%0#0"
      ]
    },
    "153": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "154": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%19#0"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "159": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "block": "main_delete_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "172": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "DeleteApplication"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "return",
      "stack_out": []
    },
    "181": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "187": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "188": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "189": {
      "op": "pushbytes 0x151f7c750000000000000001",
      "defined_out": [
        "0x151f7c750000000000000001"
      ],
      "stack_out": [
        "0x151f7c750000000000000001"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "subroutine": "test_cases.compile.apps.HelloOtherConstants.greet",
      "params": {
        "name#0": "bytes"
      },
      "block": "greet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "209": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "210": {
      "op": "bytec_1 // \"num\"",
      "defined_out": [
        "\"num\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num\""
      ]
    },
    "211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "212": {
      "error": "check self.num exists",
      "op": "assert // check self.num exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "213": {
      "op": "pushbytes 0x30",
      "defined_out": [
        "0x30",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x30"
      ]
    },
    "216": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "220": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "221": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "1"
      ]
    },
    "222": {
      "op": "extract3",
      "defined_out": [
        "num_alpha#0"
      ],
      "stack_out": [
        "num_alpha#0"
      ]
    },
    "223": {
      "op": "intc_1 // 0",
      "stack_out": [
        "num_alpha#0",
        "0"
      ]
    },
    "224": {
      "op": "bytec_0 // \"greeting\"",
      "defined_out": [
        "\"greeting\"",
        "0",
        "num_alpha#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "0",
        "\"greeting\""
      ]
    },
    "225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "num_alpha#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "226": {
      "error": "check self.greeting exists",
      "op": "assert // check self.greeting exists",
      "stack_out": [
        "num_alpha#0",
        "maybe_value%1#0"
      ]
    },
    "227": {
      "op": "pushbytes 0x20",
      "defined_out": [
        "0x20",
        "maybe_value%1#0",
        "num_alpha#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "maybe_value%1#0",
        "0x20"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "num_alpha#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "tmp%3#0"
      ]
    },
    "231": {
      "op": "frame_dig -1",
      "defined_out": [
        "name#0 (copy)",
        "num_alpha#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "tmp%3#0",
        "name#0 (copy)"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "num_alpha#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "num_alpha#0",
        "tmp%4#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "num_alpha#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "236": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "237": {
      "op": "bytec_2 // \"address\"",
      "defined_out": [
        "\"address\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"address\""
      ]
    },
    "238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "239": {
      "error": "check self.address exists",
      "op": "assert // check self.address exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "241": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "242": {
      "op": "bytec_3 // \"method\"",
      "defined_out": [
        "\"method\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"method\""
      ]
    },
    "243": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "244": {
      "error": "check self.method exists",
      "op": "assert // check self.method exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "246": {
      "retsub": true,
      "op": "retsub"
    }
  }
}