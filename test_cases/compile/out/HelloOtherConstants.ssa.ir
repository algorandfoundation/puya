contract test_cases.compile.apps.HelloOtherConstants:
    program approval:
        subroutine test_cases.compile.apps.HelloOtherConstants.approval_program() -> bool:
            block@0: // L81
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L83
                test_cases.compile.apps.HelloOtherConstants.__init__()
                goto block@2
            block@2: // entrypoint_L83
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create()void" => block@3, method "delete()void" => block@4, method "greet(string)byte[]" => block@5, * => block@6}
            block@3: // create_route_L89
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (== tmp%1#0 NoOp)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bool = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                test_cases.compile.apps.HelloOtherConstants.create()
                return 1u
            block@4: // delete_route_L93
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: bool = (== tmp%5#0 DeleteApplication)
                (assert tmp%6#0) // OnCompletion is DeleteApplication
                let tmp%7#0: bool = (txn ApplicationID)
                (assert tmp%7#0) // is not creating
                test_cases.compile.apps.HelloOtherConstants.delete()
                return 1u
            block@5: // greet_route_L97
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
                let tmp%13#0: bytes = test_cases.compile.apps.HelloOtherConstants.greet(tmp%12#0)
                let length%0#0: uint64 = (len tmp%13#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%13#0)
                let tmp%14#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
                (log tmp%14#0)
                return 1u
            block@6: // switch_case_default_L81
                goto block@7
            block@7: // switch_case_next_L81
                fail // reject transaction
        
        subroutine test_cases.compile.apps.HelloOtherConstants.create() -> void:
            block@0: // L89
                return 
        
        subroutine test_cases.compile.apps.HelloOtherConstants.delete() -> void:
            block@0: // L93
                return 
        
        subroutine test_cases.compile.apps.HelloOtherConstants.greet(name: bytes) -> bytes:
            block@0: // L97
                let (maybe_value%0#0: biguint, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num")
                (assert maybe_exists%0#0) // check self.num exists
                let reinterpret_bytes%0#0: bytes = (b+ maybe_value%0#0 48b)
                let tmp%0#0: uint64 = (len reinterpret_bytes%0#0)
                let tmp%1#0: uint64 = (- tmp%0#0 1u)
                let (maybe_value%1#0: biguint, maybe_exists%1#0: bool) = (app_global_get_ex 0u "num")
                (assert maybe_exists%1#0) // check self.num exists
                let reinterpret_bytes%1#0: bytes = (b+ maybe_value%1#0 48b)
                let index_plus_1%0#0: uint64 = (+ tmp%1#0 1u)
                let num_alpha#0: bytes = (substring3 reinterpret_bytes%1#0 tmp%1#0 index_plus_1%0#0)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "greeting")
                (assert maybe_exists%2#0) // check self.greeting exists
                let tmp%2#0: bytes = (concat maybe_value%2#0 0x20)
                let tmp%3#0: bytes = (concat tmp%2#0 name#0)
                let tmp%4#0: bytes = (concat tmp%3#0 num_alpha#0)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "address")
                (assert maybe_exists%3#0) // check self.address exists
                let tmp%5#0: bytes = (concat tmp%4#0 maybe_value%3#0)
                let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "method")
                (assert maybe_exists%4#0) // check self.method exists
                let tmp%6#0: bytes = (concat tmp%5#0 maybe_value%4#0)
                return tmp%6#0
        
        subroutine test_cases.compile.apps.HelloOtherConstants.__init__() -> void:
            block@0: // L83
                (app_global_put "greeting" TemplateVar[bytes](TMPL_GREETING))
                (app_global_put "num" TemplateVar[biguint](TMPL_NUM))
                (app_global_put "address" TemplateVar[bytes](TMPL_ACCOUNT))
                (app_global_put "method" TemplateVar[bytes](TMPL_METHOD))
                return 
    
    program clear-state:
        subroutine test_cases.compile.apps.HelloOtherConstants.clear_state_program() -> bool:
            block@0: // L81
                return 1u