main test_cases.compile.apps.HelloTmpl.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" TemplateVar[string](TMPL_GREETING))
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@11
    block@4: // abi_routing_L58
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@5, * => block@6}
    block@5: // delete_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        exit 1u
    block@6: // route_NoOp_L58
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%10#0: bool = (txn ApplicationID)
        goto tmp%10#0 ? block@7 : block@9
    block@7: // call_NoOp_L58
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%11#0: bool = (== tmp%11#0 method "greet(string)string")
        (assert eq%tmp%11#0)
        test_cases.compile.apps.HelloBase.greet[routing]()
        goto block@13
    block@9: // create_NoOp_L58
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%12#0: bool = (== tmp%12#0 method "create()void")
        (assert eq%tmp%12#0)
        exit 1u
    block@11: // bare_routing_L58
        let tmp%13#0: uint64 = (txn OnCompletion)
        let eq%tmp%13#0: bool = (== tmp%13#0 4u)
        (assert eq%tmp%13#0)
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        exit 1u
    block@13: // after_if_else_L58
        fail

subroutine test_cases.compile.apps.HelloBase.greet[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#1: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#1: bytes = (concat tmp%0#1 name#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%1#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u