main test_cases.compile.apps.HelloTmpl.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "greeting" TemplateVar[bytes](TMPL_GREETING))
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@8
    block@4: // abi_routing_L58
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, method "delete()void" => block@6, method "greet(string)string" => block@7, * => block@10}
    block@5: // create_route_L62
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0
        goto block@11
    block@6: // delete_route_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 DeleteApplication)
        (assert tmp%8#0) // OnCompletion is not DeleteApplication
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0
        goto block@11
    block@7: // greet_route_L32
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let tmp%15#0: bytes = (txna ApplicationArgs 1)
        let tmp%16#0: bytes = ((extract 2 0) tmp%15#0)
        let to_encode%0#0: bytes = test_cases.compile.apps.HelloBase.greet(tmp%16#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%17#0)
        let test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0
        goto block@11
    block@8: // bare_routing_L58
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {4u => block@9, * => block@10}
    block@9: // update_L28
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L58
        let test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.compile.apps.HelloTmpl.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.compile.apps.HelloTmpl.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.compile.apps.HelloBase.greet(name: bytes) -> bytes:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check self.greeting exists
        let tmp%0#0: bytes = (concat maybe_value%0#0 " ")
        let tmp%1#0: bytes = (concat tmp%0#0 name#0)
        return tmp%1#0