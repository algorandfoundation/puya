{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAiBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;AA4BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAPL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x151f7c750101"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0x3d694b70 0x7fb34e8a 0x8ba7c4c2 0x46dadea3 // method \"get_one()(uint8,uint8)\", method \"get_two()(uint8,uint8)\", method \"get_three()(uint8,uint8)\", method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ],
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_get_one_route@3 main_get_two_route@4 main_get_three_route@5 main_compare_route@6",
      "stack_out": []
    },
    "53": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    },
    "56": {
      "block": "main_compare_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "58": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "59": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "62": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "70": {
      "op": "log",
      "stack_out": []
    },
    "71": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "72": {
      "op": "return",
      "stack_out": []
    },
    "73": {
      "block": "main_get_three_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "75": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "op": "bytec_0 // 0x151f7c750101",
      "defined_out": [
        "0x151f7c750101"
      ],
      "stack_out": [
        "0x151f7c750101"
      ]
    },
    "81": {
      "op": "log",
      "stack_out": []
    },
    "82": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "block": "main_get_two_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "87": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "90": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "91": {
      "op": "bytec_0 // 0x151f7c750101",
      "defined_out": [
        "0x151f7c750101"
      ],
      "stack_out": [
        "0x151f7c750101"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": []
    },
    "95": {
      "block": "main_get_one_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "98": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "op": "bytec_0 // 0x151f7c750101",
      "defined_out": [
        "0x151f7c750101"
      ],
      "stack_out": [
        "0x151f7c750101"
      ]
    },
    "103": {
      "op": "log",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    },
    "106": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "108": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "114": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    }
  }
}