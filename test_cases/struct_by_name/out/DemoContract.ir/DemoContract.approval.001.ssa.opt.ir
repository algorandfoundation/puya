main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L18
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        goto tmp%4#0 ? block@3 : block@11
    block@3: // call_NoOp_L18
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_one()(uint8,uint8)" => block@4, method "get_two()(uint8,uint8)" => block@5, method "get_three()(uint8,uint8)" => block@6, method "compare()bool" => block@7, * => block@11}
    block@4: // get_one_route_L25
        test_cases.struct_by_name.contract.DemoContract.get_one[routing]()
        goto block@11
    block@5: // get_two_route_L32
        test_cases.struct_by_name.contract.DemoContract.get_two[routing]()
        goto block@11
    block@6: // get_three_route_L39
        test_cases.struct_by_name.contract.DemoContract.get_three[routing]()
        goto block@11
    block@7: // compare_route_L46
        test_cases.struct_by_name.contract.DemoContract.compare[routing]()
        goto block@11
    block@11: // after_if_else_L18
        fail
    block@12: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.struct_by_name.contract.DemoContract.__algopy_default_create()
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_one[routing]() -> void:
    block@0: // L25
        let tmp%2#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(0x01, 0x01)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_two[routing]() -> void:
    block@0: // L32
        let tmp%2#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(0x01, 0x01)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_three[routing]() -> void:
    block@0: // L39
        let tmp%2#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(0x01, 0x01)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.compare[routing]() -> void:
    block@0: // L46
        let (awst_tmp%0#0: Encoded(uint8), awst_tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_one()
        let (awst_tmp%2#0: Encoded(uint8), awst_tmp%3#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let tmp%0#1: bool = (b== awst_tmp%0#0 awst_tmp%2#0)
        let tmp%1#1: bool = (b== awst_tmp%1#0 awst_tmp%3#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        goto tmp%2#1 ? block@2 : block@4
    block@2: // and_contd_L48
        let (awst_tmp%4#0: Encoded(uint8), awst_tmp%5#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let (awst_tmp%6#0: Encoded(uint8), awst_tmp%7#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_three()
        let tmp%3#0: bool = (b== awst_tmp%4#0 awst_tmp%6#0)
        let tmp%4#0: bool = (b== awst_tmp%5#0 awst_tmp%7#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        goto tmp%5#0 ? block@3 : block@4
    block@3: // bool_true_L48
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L48
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L48
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(and_result%0#2)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_one() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L25
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_two() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L32
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_three() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L39
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.__algopy_default_create() -> void:
    block@0: // L1
        return 