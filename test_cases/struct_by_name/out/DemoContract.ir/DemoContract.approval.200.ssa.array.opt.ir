main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@9, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22][tmp%4#0] else goto block@22
    block@2: // switch_case_0_L18
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_one()(uint8,uint8)" => block@3, method "get_two()(uint8,uint8)" => block@4, method "get_three()(uint8,uint8)" => block@5, method "compare()bool" => block@6, * => block@8}
    block@3: // get_one_route_L25
        test_cases.struct_by_name.contract.DemoContract.get_one[routing]()
        goto block@8
    block@4: // get_two_route_L32
        test_cases.struct_by_name.contract.DemoContract.get_two[routing]()
        goto block@8
    block@5: // get_three_route_L39
        test_cases.struct_by_name.contract.DemoContract.get_three[routing]()
        goto block@8
    block@6: // compare_route_L46
        test_cases.struct_by_name.contract.DemoContract.compare[routing]()
        goto block@8
    block@8: // switch_case_next_L18
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L18
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@22: // switch_case_default_L18
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.struct_by_name.contract.DemoContract.get_one[routing]() -> void:
    block@0: // L25
        let aggregate%head%0#0: bytes = 0x01
        let aggregate%head%1#0: bytes = 0x0101
        let tmp%3#0: bytes = 0x151f7c750101
        (log 0x151f7c750101)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_two[routing]() -> void:
    block@0: // L32
        let aggregate%head%0#0: bytes = 0x01
        let aggregate%head%1#0: bytes = 0x0101
        let tmp%3#0: bytes = 0x151f7c750101
        (log 0x151f7c750101)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_three[routing]() -> void:
    block@0: // L39
        let aggregate%head%0#0: bytes = 0x01
        let aggregate%head%1#0: bytes = 0x0101
        let tmp%3#0: bytes = 0x151f7c750101
        (log 0x151f7c750101)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.compare[routing]() -> void:
    block@0: // L46
        let aggregate%encoded_bool%0#0: bytes[1] = 0x80
        let tmp%2#0: bytes = 0x151f7c7580
        (log 0x151f7c7580)
        exit 1u