main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__() -> bool:
    block@0: // L18
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "get_one()(uint8,uint8)" => block@2, method "get_two()(uint8,uint8)" => block@3, method "get_three()(uint8,uint8)" => block@4, method "compare()bool" => block@5, * => block@6}
    block@2: // get_one_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let (tmp%7#0: Encoded(uint8), tmp%8#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_one()
        let tmp%9#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(tmp%7#0, tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // get_two_route_L32
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let (tmp%15#0: Encoded(uint8), tmp%16#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let tmp%17#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(tmp%15#0, tmp%16#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        return 1u
    block@4: // get_three_route_L39
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let (tmp%23#0: Encoded(uint8), tmp%24#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_three()
        let tmp%25#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(tmp%23#0, tmp%24#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
        (log tmp%26#0)
        return 1u
    block@5: // compare_route_L46
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let tmp%31#0: bool = test_cases.struct_by_name.contract.DemoContract.compare()
        let tmp%32#0: Encoded(bool8) = bytes_encode<bool8>(tmp%31#0)
        let tmp%33#0: bytes = (concat 0x151f7c75 tmp%32#0)
        (log tmp%33#0)
        return 1u
    block@6: // switch_case_default_L18
        goto block@7
    block@7: // switch_case_next_L18
        goto block@12
    block@8: // bare_routing_L18
        let tmp%34#0: uint64 = (txn OnCompletion)
        switch tmp%34#0 {0u => block@9, * => block@10}
    block@9: // __algopy_default_create_L1
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (== tmp%35#0 0u)
        (assert tmp%36#0) // can only call when creating
        test_cases.struct_by_name.contract.DemoContract.__algopy_default_create()
        return 1u
    block@10: // switch_case_default_L18
        goto block@11
    block@11: // switch_case_next_L18
        goto block@12
    block@12: // after_if_else_L18
        return 0u

subroutine test_cases.struct_by_name.contract.DemoContract.get_one() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L25
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_two() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L32
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_three() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L39
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.compare() -> bool:
    block@0: // L46
        let (awst_tmp%0#0: Encoded(uint8), awst_tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_one()
        let reinterpret_biguint%0#0: biguint = awst_tmp%0#0
        let (awst_tmp%2#0: Encoded(uint8), awst_tmp%3#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let reinterpret_biguint%1#0: biguint = awst_tmp%2#0
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        let reinterpret_biguint%2#0: biguint = awst_tmp%1#0
        let reinterpret_biguint%3#0: biguint = awst_tmp%3#0
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // and_contd_L48
        let (awst_tmp%4#0: Encoded(uint8), awst_tmp%5#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let reinterpret_biguint%4#0: biguint = awst_tmp%4#0
        let (awst_tmp%6#0: Encoded(uint8), awst_tmp%7#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_three()
        let reinterpret_biguint%5#0: biguint = awst_tmp%6#0
        let tmp%3#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        let reinterpret_biguint%6#0: biguint = awst_tmp%5#0
        let reinterpret_biguint%7#0: biguint = awst_tmp%7#0
        let tmp%4#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L48
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L48
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L48
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        return and_result%0#2

subroutine test_cases.struct_by_name.contract.DemoContract.__algopy_default_create() -> void:
    block@0: // L1
        return 