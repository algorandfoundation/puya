{
    "hints": {
        "get_one()(uint8,uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "StructOne",
                    "elements": [
                        [
                            "x",
                            "uint8"
                        ],
                        [
                            "y",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "get_two()(uint8,uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "StructTwo",
                    "elements": [
                        [
                            "x",
                            "uint8"
                        ],
                        [
                            "y",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "compare()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnN0cnVjdF9ieV9uYW1lLmNvbnRyYWN0LkRlbW9Db250cmFjdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDEgMAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDEKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuc3RydWN0X2J5X25hbWUuY29udHJhY3QuRGVtb0NvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjE2CiAgICAvLyBjbGFzcyBEZW1vQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHByb3RvIDAgMQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A3CiAgICBwdXNoYnl0ZXNzIDB4M2Q2OTRiNzAgMHg3ZmIzNGU4YSAweDQ2ZGFkZWEzIC8vIG1ldGhvZCAiZ2V0X29uZSgpKHVpbnQ4LHVpbnQ4KSIsIG1ldGhvZCAiZ2V0X3R3bygpKHVpbnQ4LHVpbnQ4KSIsIG1ldGhvZCAiY29tcGFyZSgpYm9vbCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9vbmVfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfdHdvX3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fY29tcGFyZV9yb3V0ZUA0CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfb25lX3JvdXRlQDI6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToyMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfb25lCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF90d29fcm91dGVAMzoKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF90d28KICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fY29tcGFyZV9yb3V0ZUA0OgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY29tcGFyZQogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDc6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToxNgogICAgLy8gY2xhc3MgRGVtb0NvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToxNgogICAgLy8gY2xhc3MgRGVtb0NvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5zdHJ1Y3RfYnlfbmFtZS5jb250cmFjdC5EZW1vQ29udHJhY3QuZ2V0X29uZSgpIC0+IGJ5dGVzLCBieXRlczoKZ2V0X29uZToKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjIzLTI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGdldF9vbmUoc2VsZikgLT4gU3RydWN0T25lOgogICAgcHJvdG8gMCAyCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToyNgogICAgLy8geD1hcmM0LlVJbnQ4KDEpLAogICAgYnl0ZWNfMSAvLyAweDAxCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToyNwogICAgLy8geT1hcmM0LlVJbnQ4KDEpLAogICAgZHVwCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToyNS0yOAogICAgLy8gcmV0dXJuIFN0cnVjdE9uZSgKICAgIC8vICAgICB4PWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgeT1hcmM0LlVJbnQ4KDEpLAogICAgLy8gKQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5zdHJ1Y3RfYnlfbmFtZS5jb250cmFjdC5EZW1vQ29udHJhY3QuZ2V0X3R3bygpIC0+IGJ5dGVzLCBieXRlczoKZ2V0X3R3bzoKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjMwLTMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGdldF90d28oc2VsZikgLT4gU3RydWN0VHdvOgogICAgcHJvdG8gMCAyCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTozMwogICAgLy8geD1hcmM0LlVJbnQ4KDEpLAogICAgYnl0ZWNfMSAvLyAweDAxCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTozNAogICAgLy8geT1hcmM0LlVJbnQ4KDEpLAogICAgZHVwCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTozMi0zNQogICAgLy8gcmV0dXJuIFN0cnVjdFR3bygKICAgIC8vICAgICB4PWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgeT1hcmM0LlVJbnQ4KDEpLAogICAgLy8gKQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5zdHJ1Y3RfYnlfbmFtZS5jb250cmFjdC5EZW1vQ29udHJhY3QuY29tcGFyZSgpIC0+IHVpbnQ2NDoKY29tcGFyZToKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjM3LTM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGNvbXBhcmUoc2VsZikgLT4gYm9vbDoKICAgIHByb3RvIDAgMQogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzkKICAgIC8vIHJldHVybiBzZWxmLmdldF9vbmUoKSA9PSBzZWxmLmdldF90d28oKQogICAgY2FsbHN1YiBnZXRfb25lCiAgICBjYWxsc3ViIGdldF90d28KICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBiPT0KICAgIGNvdmVyIDIKICAgIGI9PQogICAgJiYKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnN0cnVjdF9ieV9uYW1lLmNvbnRyYWN0LkRlbW9Db250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DemoContract",
        "desc": "\n    Verify that even though named tuples with different names, but the same structure should be\n    considered 'comparable' in the type system, they should be output separately when being\n    interpreted as an arc4 Struct in an abi method\n    ",
        "methods": [
            {
                "name": "get_one",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint8,uint8)"
                }
            },
            {
                "name": "get_two",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint8,uint8)"
                }
            },
            {
                "name": "compare",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}