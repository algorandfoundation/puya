{
    "name": "DemoContract",
    "structs": {
        "StructOne": [
            {
                "name": "x",
                "type": "uint8"
            },
            {
                "name": "y",
                "type": "uint8"
            }
        ],
        "StructTwo": [
            {
                "name": "x",
                "type": "uint8"
            },
            {
                "name": "y",
                "type": "uint8"
            }
        ],
        "test_cases.struct_by_name.mod.StructTwo": [
            {
                "name": "x",
                "type": "uint8"
            },
            {
                "name": "y",
                "type": "uint8"
            }
        ]
    },
    "methods": [
        {
            "name": "get_one",
            "args": [],
            "returns": {
                "type": "(uint8,uint8)",
                "struct": "StructOne"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_two",
            "args": [],
            "returns": {
                "type": "(uint8,uint8)",
                "struct": "StructTwo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_three",
            "args": [],
            "returns": {
                "type": "(uint8,uint8)",
                "struct": "test_cases.struct_by_name.mod.StructTwo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "compare",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Verify that even though named tuples with different names but the same structure should be\n    considered 'comparable' in the type system, they should be output separately when being\n    interpreted as an arc4 Struct in an abi method\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        66,
                        83,
                        100,
                        117
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        145
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        69,
                        86,
                        103,
                        120
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnN0cnVjdF9ieV9uYW1lLmNvbnRyYWN0LkRlbW9Db250cmFjdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDEgMAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDEKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuc3RydWN0X2J5X25hbWUuY29udHJhY3QuRGVtb0NvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBjbGFzcyBEZW1vQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHByb3RvIDAgMQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A4CiAgICBwdXNoYnl0ZXNzIDB4M2Q2OTRiNzAgMHg3ZmIzNGU4YSAweDhiYTdjNGMyIDB4NDZkYWRlYTMgLy8gbWV0aG9kICJnZXRfb25lKCkodWludDgsdWludDgpIiwgbWV0aG9kICJnZXRfdHdvKCkodWludDgsdWludDgpIiwgbWV0aG9kICJnZXRfdGhyZWUoKSh1aW50OCx1aW50OCkiLCBtZXRob2QgImNvbXBhcmUoKWJvb2wiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfb25lX3JvdXRlQDIgX19wdXlhX2FyYzRfcm91dGVyX19fZ2V0X3R3b19yb3V0ZUAzIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF90aHJlZV9yb3V0ZUA0IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2NvbXBhcmVfcm91dGVANQogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fZ2V0X29uZV9yb3V0ZUAyOgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X29uZQogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfdHdvX3JvdXRlQDM6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTozMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfdHdvCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF90aHJlZV9yb3V0ZUA0OgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3RocmVlCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2NvbXBhcmVfcm91dGVANToKICAgIC8vIHN0cnVjdF9ieV9uYW1lL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGNvbXBhcmUKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A4OgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MTgKICAgIC8vIGNsYXNzIERlbW9Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MTgKICAgIC8vIGNsYXNzIERlbW9Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuc3RydWN0X2J5X25hbWUuY29udHJhY3QuRGVtb0NvbnRyYWN0LmdldF9vbmUoKSAtPiBieXRlcywgYnl0ZXM6CmdldF9vbmU6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weToyNS0yNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBnZXRfb25lKHNlbGYpIC0+IFN0cnVjdE9uZToKICAgIHByb3RvIDAgMgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MjgKICAgIC8vIHg9YXJjNC5VSW50OCgxKSwKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MjkKICAgIC8vIHk9YXJjNC5VSW50OCgxKSwKICAgIGR1cAogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MjctMzAKICAgIC8vIHJldHVybiBTdHJ1Y3RPbmUoCiAgICAvLyAgICAgeD1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIHk9YXJjNC5VSW50OCgxKSwKICAgIC8vICkKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuc3RydWN0X2J5X25hbWUuY29udHJhY3QuRGVtb0NvbnRyYWN0LmdldF90d28oKSAtPiBieXRlcywgYnl0ZXM6CmdldF90d286CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTozMi0zMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBnZXRfdHdvKHNlbGYpIC0+IFN0cnVjdFR3bzoKICAgIHByb3RvIDAgMgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzUKICAgIC8vIHg9YXJjNC5VSW50OCgxKSwKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzYKICAgIC8vIHk9YXJjNC5VSW50OCgxKSwKICAgIGR1cAogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzQtMzcKICAgIC8vIHJldHVybiBTdHJ1Y3RUd28oCiAgICAvLyAgICAgeD1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIHk9YXJjNC5VSW50OCgxKSwKICAgIC8vICkKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuc3RydWN0X2J5X25hbWUuY29udHJhY3QuRGVtb0NvbnRyYWN0LmdldF90aHJlZSgpIC0+IGJ5dGVzLCBieXRlczoKZ2V0X3RocmVlOgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6MzktNDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgZ2V0X3RocmVlKHNlbGYpIC0+IFN0cnVjdFRocmVlOgogICAgcHJvdG8gMCAyCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTo0MgogICAgLy8geD1hcmM0LlVJbnQ4KDEpLAogICAgYnl0ZWNfMSAvLyAweDAxCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTo0MwogICAgLy8geT1hcmM0LlVJbnQ4KDEpLAogICAgZHVwCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTo0MS00NAogICAgLy8gcmV0dXJuIFN0cnVjdFRocmVlKAogICAgLy8gICAgIHg9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICB5PWFyYzQuVUludDgoMSksCiAgICAvLyApCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnN0cnVjdF9ieV9uYW1lLmNvbnRyYWN0LkRlbW9Db250cmFjdC5jb21wYXJlKCkgLT4gdWludDY0Ogpjb21wYXJlOgogICAgLy8gc3RydWN0X2J5X25hbWUvY29udHJhY3QucHk6NDYtNDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgY29tcGFyZShzZWxmKSAtPiBib29sOgogICAgcHJvdG8gMCAxCiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTo0OAogICAgLy8gcmV0dXJuIHNlbGYuZ2V0X29uZSgpID09IHNlbGYuZ2V0X3R3bygpIGFuZCBzZWxmLmdldF90d28oKSA9PSBzZWxmLmdldF90aHJlZSgpCiAgICBjYWxsc3ViIGdldF9vbmUKICAgIGNhbGxzdWIgZ2V0X3R3bwogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIGI9PQogICAgY292ZXIgMgogICAgYj09CiAgICAmJgogICAgYnogY29tcGFyZV9ib29sX2ZhbHNlQDMKICAgIGNhbGxzdWIgZ2V0X3R3bwogICAgY2FsbHN1YiBnZXRfdGhyZWUKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBiPT0KICAgIGNvdmVyIDIKICAgIGI9PQogICAgJiYKICAgIGJ6IGNvbXBhcmVfYm9vbF9mYWxzZUAzCiAgICBpbnRjXzAgLy8gMQogICAgYiBjb21wYXJlX2Jvb2xfbWVyZ2VANAoKY29tcGFyZV9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzEgLy8gMAoKY29tcGFyZV9ib29sX21lcmdlQDQ6CiAgICAvLyBzdHJ1Y3RfYnlfbmFtZS9jb250cmFjdC5weTo0OAogICAgLy8gcmV0dXJuIHNlbGYuZ2V0X29uZSgpID09IHNlbGYuZ2V0X3R3bygpIGFuZCBzZWxmLmdldF90d28oKSA9PSBzZWxmLmdldF90aHJlZSgpCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnN0cnVjdF9ieV9uYW1lLmNvbnRyYWN0LkRlbW9Db250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiACAQAmAgQVH3x1AQGIAAFDigABMRtBAG+CBAQ9aUtwBH+zTooEi6fEwgRG2t6jNhoAjgQAAgATACQANSOJMRkURDEYRIgATVAoTFCwIokxGRREMRhEiABCUChMULAiiTEZFEQxGESIADdQKExQsCKJMRkURDEYRIgALIABACNPAlQoTFCwIokxGUAABjEYFEQiiSOJigACKUmJigACKUmJigACKUmJigABiP/oiP/rTwNPAqhOAqgQQQAWiP/ciP/fTwNPAqhOAqgQQQAEIkIAASOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}