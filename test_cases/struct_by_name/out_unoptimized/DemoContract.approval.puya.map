{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AAOK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAlBS;AACA;AAFN;;;;AAQM;AACA;AAFN;;;;AAQM;AACA;AAFN;AAKR;;;;;;;AAEe;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAAA;;;AAAA;;;AAAqC;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAArC;;;AAAA;;;;;;;;;AAAP;;AAAA;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x01 0x 0x151f7c75"
    },
    "15": {
      "op": "b block@0"
    },
    "18": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "21": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "24": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "27": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "28": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "29": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "30": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "31": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "33": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "35": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "37": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "39": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "41": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "43": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "45": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "47": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "49": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "51": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "53": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "79": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "82": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "83": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "86": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "89": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "92": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "95": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "98": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "101": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "104": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "107": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "110": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "113": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "115": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "117": {
      "op": "bz else_body@11",
      "stack_out": []
    },
    "120": {
      "op": "b __algopy_default_create@10"
    },
    "123": {
      "block": "__algopy_default_create@10",
      "stack_in": [],
      "op": "b block@24"
    },
    "126": {
      "block": "block@24",
      "stack_in": [],
      "op": "b after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@25"
    },
    "129": {
      "block": "after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@25",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "130": {
      "op": "return",
      "stack_out": []
    },
    "131": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@11",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "132": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "135": {
      "op": "pushbytes 0x3d694b70 // method \"get_one()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_one()(uint8,uint8))"
      ]
    },
    "141": {
      "op": "pushbytes 0x7fb34e8a // method \"get_two()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ]
    },
    "147": {
      "op": "pushbytes 0x8ba7c4c2 // method \"get_three()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))"
      ]
    },
    "153": {
      "op": "pushbytes 0x46dadea3 // method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "159": {
      "op": "uncover 4",
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%5#0"
      ]
    },
    "161": {
      "op": "match get_one_route@3 get_two_route@4 get_three_route@5 compare_route@6",
      "stack_out": []
    },
    "171": {
      "op": "b switch_case_default@7"
    },
    "174": {
      "block": "switch_case_default@7",
      "stack_in": [],
      "op": "b switch_case_next@8"
    },
    "177": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@8",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "178": {
      "block": "compare_route@6",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "op": "callsub compare"
    },
    "181": {
      "op": "b switch_case_next@8"
    },
    "184": {
      "block": "get_three_route@5",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "op": "callsub get_three"
    },
    "187": {
      "op": "b switch_case_next@8"
    },
    "190": {
      "block": "get_two_route@4",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "op": "callsub get_two"
    },
    "193": {
      "op": "b switch_case_next@8"
    },
    "196": {
      "block": "get_one_route@3",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "op": "callsub get_one"
    },
    "199": {
      "op": "b switch_case_next@8"
    },
    "202": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "params": {},
      "block": "get_one",
      "stack_in": [],
      "op": "b get_one_block@0"
    },
    "205": {
      "block": "get_one_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "208": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "211": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "214": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "217": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "221": {
      "op": "log",
      "stack_out": []
    },
    "222": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "223": {
      "op": "return",
      "stack_out": []
    },
    "224": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "params": {},
      "block": "get_two",
      "stack_in": [],
      "op": "b get_two_block@0"
    },
    "227": {
      "block": "get_two_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "230": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "233": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "236": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "239": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "240": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "243": {
      "op": "log",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "params": {},
      "block": "get_three",
      "stack_in": [],
      "op": "b get_three_block@0"
    },
    "249": {
      "block": "get_three_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "252": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "255": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "258": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "261": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "262": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "265": {
      "op": "log",
      "stack_out": []
    },
    "266": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "params": {},
      "block": "compare",
      "stack_in": [],
      "op": "b compare_block@0"
    },
    "271": {
      "block": "compare_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.compare",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "277": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "278": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "280": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "281": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "282": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "285": {
      "op": "log",
      "stack_out": []
    },
    "286": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "287": {
      "op": "return",
      "stack_out": []
    },
    "288": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_one_block@0"
    },
    "291": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "292": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "293": {
      "retsub": true,
      "op": "retsub"
    },
    "294": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_two_block@0"
    },
    "297": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "298": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "299": {
      "retsub": true,
      "op": "retsub"
    },
    "300": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_three_block@0"
    },
    "303": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "304": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "305": {
      "retsub": true,
      "op": "retsub"
    },
    "306": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.compare",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "309": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "310": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_block@0"
    },
    "313": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "316": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "318": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "321": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "323": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%3#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "326": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "328": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "329": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%2#0"
      ]
    },
    "330": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "333": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1"
    },
    "336": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ]
    },
    "339": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "341": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0"
      ]
    },
    "344": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "346": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ]
    },
    "347": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%7#0",
        "reinterpret_biguint%6#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%7#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "349": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "351": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "352": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%5#0"
      ]
    },
    "353": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "356": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2"
    },
    "359": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "1"
      ]
    },
    "360": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "362": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    },
    "365": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%0#0"
      ]
    },
    "367": {
      "op": "uncover 1"
    },
    "369": {
      "retsub": true,
      "op": "retsub"
    },
    "370": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "0"
      ]
    },
    "371": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "373": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    }
  }
}