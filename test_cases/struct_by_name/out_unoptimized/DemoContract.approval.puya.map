{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAiBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AA4BK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAUc;AACA;AAFN;AAQM;AACA;AAFN;AAQM;AACA;AAFN;AAOO;;;AAAA;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAAA;;;AAAqC;;;AAAA;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAArC;;;;AAAP;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x151f7c75 0x01"
    },
    "15": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "18": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "22": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "pushbytes 0x3d694b70 // method \"get_one()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))"
      ]
    },
    "31": {
      "op": "pushbytes 0x7fb34e8a // method \"get_two()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ]
    },
    "37": {
      "op": "pushbytes 0x8ba7c4c2 // method \"get_three()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))"
      ]
    },
    "43": {
      "op": "pushbytes 0x46dadea3 // method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "49": {
      "op": "uncover 4",
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%2#0"
      ]
    },
    "51": {
      "op": "match main_get_one_route@3 main_get_two_route@4 main_get_three_route@5 main_compare_route@6",
      "stack_out": []
    },
    "61": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "63": {
      "block": "main_compare_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "65": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "66": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "70": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "71": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "72": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "73": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare",
      "op": "callsub compare",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "76": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x00"
      ]
    },
    "79": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%31#0",
        "0x00",
        "0"
      ]
    },
    "80": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%31#0"
      ]
    },
    "82": {
      "op": "setbit",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "83": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "84": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "85": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "86": {
      "op": "log",
      "stack_out": []
    },
    "87": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "91": {
      "block": "main_get_three_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "93": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "98": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "99": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub get_three",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "104": {
      "op": "swap",
      "stack_out": [
        "tmp%24#0",
        "tmp%23#0"
      ]
    },
    "105": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%23#0",
        "0x"
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "tmp%24#0",
        "0x",
        "tmp%23#0"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "aggregate%encoded%6#1"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%6#1",
        "tmp%24#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1"
      ]
    },
    "110": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%7#1",
        "0x"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "112": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "115": {
      "op": "log",
      "stack_out": []
    },
    "116": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "120": {
      "block": "main_get_two_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "122": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "128": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tmp%15#0"
      ]
    },
    "134": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%15#0",
        "0x"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "0x",
        "tmp%15#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%encoded%3#1"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%3#1",
        "tmp%16#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1"
      ],
      "stack_out": [
        "aggregate%encoded%4#1"
      ]
    },
    "139": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%4#1",
        "0x"
      ]
    },
    "140": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "141": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": []
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "149": {
      "block": "main_get_one_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "151": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "157": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "159": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub get_one",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0"
      ]
    },
    "163": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "0x"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "0x",
        "tmp%7#0"
      ]
    },
    "165": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%encoded%0#1"
      ]
    },
    "166": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%0#1",
        "tmp%8#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "168": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "170": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "173": {
      "op": "log",
      "stack_out": []
    },
    "174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "178": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "180": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%34#0"
      ]
    },
    "182": {
      "op": "match main___algopy_default_create@10",
      "stack_out": []
    },
    "186": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "189": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "192": {
      "op": "==",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "193": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "194": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "198": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "params": {},
      "block": "get_one_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "199": {
      "op": "dup",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "200": {
      "retsub": true,
      "op": "retsub"
    },
    "201": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "params": {},
      "block": "get_two_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "202": {
      "op": "dup",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "203": {
      "retsub": true,
      "op": "retsub"
    },
    "204": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "params": {},
      "block": "get_three_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "205": {
      "op": "dup",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    },
    "207": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare",
      "params": {},
      "block": "compare_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub get_one",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "210": {
      "op": "swap",
      "defined_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "211": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "214": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "216": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "219": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "221": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "223": {
      "op": "bz compare_bool_false@3",
      "stack_out": []
    },
    "226": {
      "block": "compare_and_contd@1",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ]
    },
    "229": {
      "op": "swap",
      "defined_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "230": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub get_three",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0"
      ]
    },
    "233": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "235": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ]
    },
    "236": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%7#0",
        "reinterpret_biguint%6#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%7#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "238": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "240": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "241": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "242": {
      "op": "bz compare_bool_false@3",
      "stack_out": []
    },
    "245": {
      "block": "compare_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "246": {
      "block": "compare_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "247": {
      "block": "compare_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "248": {
      "op": "b compare_bool_merge@4"
    }
  }
}