{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA4BK;;;;;;AAPA;;;;;;AAPA;;;;;;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAlBS;AACA;AAFN;;;;AAQM;AACA;AAFN;;;;AAQM;AACA;AAFN;AAKR;;;;;;;AAEe;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAAA;;;AAAA;;;AAAqC;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAArC;;;AAAA;;;;;;;;;AAAP;;AAAA;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x01 0x 0x151f7c75"
    },
    "15": {
      "op": "b main_block@0"
    },
    "18": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "21": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "24": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "25": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "28": {
      "op": "b main_abi_routing@2"
    },
    "31": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "34": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "36": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "39": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "40": {
      "op": "bz main_create_NoOp@9",
      "stack_out": []
    },
    "43": {
      "op": "b main_call_NoOp@3"
    },
    "46": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "49": {
      "op": "pushbytes 0x3d694b70 // method \"get_one()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_one()(uint8,uint8))"
      ]
    },
    "55": {
      "op": "pushbytes 0x7fb34e8a // method \"get_two()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ]
    },
    "61": {
      "op": "pushbytes 0x8ba7c4c2 // method \"get_three()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))"
      ]
    },
    "67": {
      "op": "pushbytes 0x46dadea3 // method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "73": {
      "op": "uncover 4",
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%6#0"
      ]
    },
    "75": {
      "op": "match main_get_one_route@4 main_get_two_route@5 main_get_three_route@6 main_compare_route@7",
      "stack_out": []
    },
    "85": {
      "op": "b main_switch_case_next@8"
    },
    "88": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "91": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "94": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "95": {
      "block": "main_compare_route@7",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "op": "callsub compare"
    },
    "98": {
      "op": "b main_switch_case_next@8"
    },
    "101": {
      "block": "main_get_three_route@6",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "op": "callsub get_three"
    },
    "104": {
      "op": "b main_switch_case_next@8"
    },
    "107": {
      "block": "main_get_two_route@5",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "op": "callsub get_two"
    },
    "110": {
      "op": "b main_switch_case_next@8"
    },
    "113": {
      "block": "main_get_one_route@4",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "op": "callsub get_one"
    },
    "116": {
      "op": "b main_switch_case_next@8"
    },
    "119": {
      "block": "main_create_NoOp@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "122": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "124": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "125": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "126": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "130": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "131": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "132": {
      "op": "b main_block@14"
    },
    "135": {
      "block": "main_block@14",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@15"
    },
    "138": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "params": {},
      "block": "get_one",
      "stack_in": [],
      "op": "b get_one_block@0"
    },
    "143": {
      "block": "get_one_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "146": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "149": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "152": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "155": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "156": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "159": {
      "op": "log",
      "stack_out": []
    },
    "160": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "params": {},
      "block": "get_two",
      "stack_in": [],
      "op": "b get_two_block@0"
    },
    "165": {
      "block": "get_two_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "168": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "171": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "174": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "178": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "180": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "181": {
      "op": "log",
      "stack_out": []
    },
    "182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "params": {},
      "block": "get_three",
      "stack_in": [],
      "op": "b get_three_block@0"
    },
    "187": {
      "block": "get_three_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "190": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "193": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "196": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "199": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "200": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "params": {},
      "block": "compare",
      "stack_in": [],
      "op": "b compare_block@0"
    },
    "209": {
      "block": "compare_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.compare",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "212": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "215": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "216": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "219": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "223": {
      "op": "log",
      "stack_out": []
    },
    "224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_one_block@0"
    },
    "229": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "230": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "231": {
      "retsub": true,
      "op": "retsub"
    },
    "232": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_two_block@0"
    },
    "235": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "236": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "237": {
      "retsub": true,
      "op": "retsub"
    },
    "238": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_three_block@0"
    },
    "241": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "242": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "243": {
      "retsub": true,
      "op": "retsub"
    },
    "244": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.compare",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "247": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "248": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_block@0"
    },
    "251": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "254": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "256": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "259": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "261": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "262": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%3#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "264": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "266": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "267": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%2#0"
      ]
    },
    "268": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "271": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1"
    },
    "274": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ]
    },
    "277": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "279": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0"
      ]
    },
    "282": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "284": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ]
    },
    "285": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%7#0",
        "reinterpret_biguint%6#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%7#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "287": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "289": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "290": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%5#0"
      ]
    },
    "291": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "294": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2"
    },
    "297": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "1"
      ]
    },
    "298": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "300": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    },
    "303": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%0#0"
      ]
    },
    "305": {
      "op": "uncover 1"
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "0"
      ]
    },
    "309": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "311": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    }
  }
}