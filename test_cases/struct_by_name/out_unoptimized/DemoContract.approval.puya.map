{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AA4BK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAPL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUc;AACA;AAFN;;;;AAQM;AACA;AAFN;;;;AAQM;AACA;AAFN;AAKR;;;;;;;AAEe;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAAA;;;AAAA;;;AAAqC;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAArC;;;AAAA;;;;;;;;;AAAP;;AAAA;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x01 0x 0x151f7c75"
    },
    "15": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "16": {
      "op": "b main_block@0"
    },
    "19": {
      "block": "main_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_block@1"
    },
    "22": {
      "block": "main_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "25": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@9",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "b main_abi_routing@2"
    },
    "32": {
      "block": "main_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "pushbytes 0x3d694b70 // method \"get_one()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))"
      ]
    },
    "41": {
      "op": "pushbytes 0x7fb34e8a // method \"get_two()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ]
    },
    "47": {
      "op": "pushbytes 0x8ba7c4c2 // method \"get_three()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))"
      ]
    },
    "53": {
      "op": "pushbytes 0x46dadea3 // method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "59": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%2#0"
      ]
    },
    "61": {
      "op": "match main_get_one_route@3 main_get_two_route@4 main_get_three_route@5 main_compare_route@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "b main_switch_case_default@7"
    },
    "74": {
      "block": "main_switch_case_default@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@8"
    },
    "77": {
      "block": "main_switch_case_next@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@13"
    },
    "80": {
      "block": "main_after_if_else@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "81": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "86": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "block": "main_compare_route@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0"
      ]
    },
    "89": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "NoOp"
      ]
    },
    "90": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0"
      ]
    },
    "91": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0"
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0",
        "0"
      ]
    },
    "95": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0"
      ]
    },
    "96": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare",
      "op": "callsub compare",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0"
      ]
    },
    "100": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0",
        "0x00"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0",
        "0x00",
        "0"
      ]
    },
    "104": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "tmp%31#0"
      ]
    },
    "106": {
      "op": "setbit",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0"
      ]
    },
    "107": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "108": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%33#0"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "113": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "118": {
      "block": "main_get_three_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "120": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0",
        "NoOp"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "0"
      ]
    },
    "126": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub get_three",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "131": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "tmp%23#0"
      ]
    },
    "133": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "tmp%23#0",
        "0x"
      ]
    },
    "134": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "0x",
        "tmp%23#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "aggregate%head%4#0"
      ]
    },
    "137": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%4#0",
        "tmp%24#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "140": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "141": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "146": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "151": {
      "block": "main_get_two_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "153": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0",
        "NoOp"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "158": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "0"
      ]
    },
    "159": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "164": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%15#0"
      ]
    },
    "166": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%15#0",
        "0x"
      ]
    },
    "167": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "0x",
        "tmp%15#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "aggregate%head%2#0"
      ]
    },
    "170": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "tmp%16#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "173": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "174": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%18#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "179": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "184": {
      "block": "main_get_one_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "186": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "NoOp"
      ]
    },
    "187": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "188": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "192": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "193": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub get_one",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "197": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%7#0"
      ]
    },
    "199": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%7#0",
        "0x"
      ]
    },
    "200": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "0x",
        "tmp%7#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "aggregate%head%0#0"
      ]
    },
    "203": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "tmp%8#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "206": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "207": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "210": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "212": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "217": {
      "block": "main_bare_routing@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%34#0"
      ]
    },
    "219": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%34#0",
        "0"
      ]
    },
    "220": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%34#0"
      ]
    },
    "222": {
      "op": "match main___algopy_default_create@10",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "226": {
      "op": "b main_switch_case_default@11"
    },
    "229": {
      "block": "main_switch_case_default@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@12"
    },
    "232": {
      "block": "main_switch_case_next@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@13"
    },
    "235": {
      "block": "main___algopy_default_create@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%35#0"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%35#0",
        "0"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%36#0"
      ]
    },
    "239": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "240": {
      "op": "b main_block@15"
    },
    "243": {
      "block": "main_block@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@16"
    },
    "246": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__%0#0"
      ]
    },
    "247": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14"
    },
    "252": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "params": {},
      "block": "get_one",
      "stack_in": [],
      "op": "b get_one_block@0"
    },
    "255": {
      "block": "get_one_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "256": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "params": {},
      "block": "get_two",
      "stack_in": [],
      "op": "b get_two_block@0"
    },
    "261": {
      "block": "get_two_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "262": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "263": {
      "retsub": true,
      "op": "retsub"
    },
    "264": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "params": {},
      "block": "get_three",
      "stack_in": [],
      "op": "b get_three_block@0"
    },
    "267": {
      "block": "get_three_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "268": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "269": {
      "retsub": true,
      "op": "retsub"
    },
    "270": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare",
      "params": {},
      "block": "compare",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "273": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "274": {
      "op": "b compare_block@0"
    },
    "277": {
      "block": "compare_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub get_one",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "280": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "282": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "285": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "287": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%3#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "290": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "292": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "293": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%2#0"
      ]
    },
    "294": {
      "op": "bz compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "297": {
      "op": "b compare_and_contd@1"
    },
    "300": {
      "block": "compare_and_contd@1",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub get_two",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ]
    },
    "303": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "305": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub get_three",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0"
      ]
    },
    "308": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "310": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ]
    },
    "311": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%7#0",
        "reinterpret_biguint%6#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%7#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "313": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "315": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "316": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%5#0"
      ]
    },
    "317": {
      "op": "bz compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "320": {
      "op": "b compare_bool_true@2"
    },
    "323": {
      "block": "compare_bool_true@2",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "1"
      ]
    },
    "324": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "326": {
      "op": "b compare_bool_merge@4"
    },
    "329": {
      "block": "compare_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%0#0"
      ]
    },
    "331": {
      "op": "uncover 1"
    },
    "333": {
      "retsub": true,
      "op": "retsub"
    },
    "334": {
      "block": "compare_bool_false@3",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "0"
      ]
    },
    "335": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "337": {
      "op": "b compare_bool_merge@4"
    }
  }
}