{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AA4BK;;;;;;AAPA;;;;;;AAPA;;;;;;AAPA;;;;;;AAPL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAOK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAlBS;AACA;AAFN;;;;AAQM;AACA;AAFN;;;;AAQM;AACA;AAFN;AAKR;;;;;;;AAEe;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAAA;;;AAAA;;;AAAqC;;;AAAA;;AAAkB;;;AAAA;;AAAlB;AAAA;;AAAkB;;AAAlB;AAAA;AAArC;;;AAAA;;;;;;;;;AAAP;;AAAA;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x01 0x 0x151f7c75"
    },
    "15": {
      "op": "b main_block@0"
    },
    "18": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "21": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "24": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "28": {
      "op": "b main_abi_routing@2"
    },
    "31": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "34": {
      "op": "match",
      "stack_out": []
    },
    "36": {
      "op": "b main_route_NoOp@3"
    },
    "39": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "41": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "42": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "47": {
      "op": "match",
      "stack_out": []
    },
    "49": {
      "op": "b main_switch_case_default@4"
    },
    "52": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "54": {
      "op": "bz main_create_NoOp@12",
      "stack_out": []
    },
    "57": {
      "op": "b main_call_NoOp@5"
    },
    "60": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "63": {
      "op": "pushbytes 0x3d694b70 // method \"get_one()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_one()(uint8,uint8))"
      ]
    },
    "69": {
      "op": "pushbytes 0x7fb34e8a // method \"get_two()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))"
      ]
    },
    "75": {
      "op": "pushbytes 0x8ba7c4c2 // method \"get_three()(uint8,uint8)\"",
      "defined_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))"
      ]
    },
    "81": {
      "op": "pushbytes 0x46dadea3 // method \"compare()bool\"",
      "defined_out": [
        "Method(compare()bool)",
        "Method(get_one()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)"
      ]
    },
    "87": {
      "op": "uncover 4",
      "stack_out": [
        "Method(get_one()(uint8,uint8))",
        "Method(get_two()(uint8,uint8))",
        "Method(get_three()(uint8,uint8))",
        "Method(compare()bool)",
        "tmp%7#0"
      ]
    },
    "89": {
      "op": "match main_get_one_route@6 main_get_two_route@7 main_get_three_route@8 main_compare_route@9",
      "stack_out": []
    },
    "99": {
      "op": "b main_switch_case_default@10"
    },
    "102": {
      "block": "main_switch_case_default@10",
      "stack_in": [],
      "op": "b main_switch_case_next@11"
    },
    "105": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "108": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "b main_switch_case_next@16"
    },
    "111": {
      "block": "main_switch_case_next@16",
      "stack_in": [],
      "op": "b main_switch_case_next@17"
    },
    "114": {
      "block": "main_switch_case_next@17",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "117": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "118": {
      "block": "main_compare_route@9",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "op": "callsub compare"
    },
    "121": {
      "op": "b main_switch_case_next@11"
    },
    "124": {
      "block": "main_get_three_route@8",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "op": "callsub get_three"
    },
    "127": {
      "op": "b main_switch_case_next@11"
    },
    "130": {
      "block": "main_get_two_route@7",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "op": "callsub get_two"
    },
    "133": {
      "op": "b main_switch_case_next@11"
    },
    "136": {
      "block": "main_get_one_route@6",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "op": "callsub get_one"
    },
    "139": {
      "op": "b main_switch_case_next@11"
    },
    "142": {
      "block": "main_create_NoOp@12",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "145": {
      "op": "match",
      "stack_out": []
    },
    "147": {
      "op": "b main_switch_case_default@13"
    },
    "150": {
      "block": "main_switch_case_default@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "153": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "156": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "158": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "159": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "161": {
      "op": "match main___algopy_default_create@19",
      "stack_out": []
    },
    "165": {
      "op": "b main_switch_case_default@20"
    },
    "168": {
      "block": "main_switch_case_default@20",
      "stack_in": [],
      "op": "b main_switch_case_next@21"
    },
    "171": {
      "block": "main_switch_case_next@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "174": {
      "block": "main___algopy_default_create@19",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "178": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "179": {
      "op": "b main_block@24"
    },
    "182": {
      "block": "main_block@24",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@25"
    },
    "185": {
      "block": "main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@25",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one[routing]",
      "params": {},
      "block": "get_one",
      "stack_in": [],
      "op": "b get_one_block@0"
    },
    "190": {
      "block": "get_one_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "193": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "196": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "199": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "202": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "203": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two[routing]",
      "params": {},
      "block": "get_two",
      "stack_in": [],
      "op": "b get_two_block@0"
    },
    "212": {
      "block": "get_two_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "221": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "224": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "225": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "228": {
      "op": "log",
      "stack_out": []
    },
    "229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three[routing]",
      "params": {},
      "block": "get_three",
      "stack_in": [],
      "op": "b get_three_block@0"
    },
    "234": {
      "block": "get_three_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "237": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "240": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "243": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "246": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "247": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "250": {
      "op": "log",
      "stack_out": []
    },
    "251": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "252": {
      "op": "return",
      "stack_out": []
    },
    "253": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare[routing]",
      "params": {},
      "block": "compare",
      "stack_in": [],
      "op": "b compare_block@0"
    },
    "256": {
      "block": "compare_block@0",
      "stack_in": [],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.compare",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.compare",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "262": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "263": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "267": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "270": {
      "op": "log",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_one_block@0"
    },
    "276": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_one_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "277": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "278": {
      "retsub": true,
      "op": "retsub"
    },
    "279": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_two_block@0"
    },
    "282": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_two_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "283": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "284": {
      "retsub": true,
      "op": "retsub"
    },
    "285": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "stack_in": [],
      "op": "b test_cases.struct_by_name.contract.DemoContract.get_three_block@0"
    },
    "288": {
      "block": "test_cases.struct_by_name.contract.DemoContract.get_three_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "289": {
      "op": "bytec_0 // 0x01",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "290": {
      "retsub": true,
      "op": "retsub"
    },
    "291": {
      "subroutine": "test_cases.struct_by_name.contract.DemoContract.compare",
      "params": {},
      "block": "test_cases.struct_by_name.contract.DemoContract.compare",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "294": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "295": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_block@0"
    },
    "298": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_one",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_one",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "301": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "303": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "306": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "308": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "309": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%3#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "311": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "313": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "314": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%2#0"
      ]
    },
    "315": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "318": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1"
    },
    "321": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_and_contd@1",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_two",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_two",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%4#0",
        "awst_tmp%5#0"
      ]
    },
    "324": {
      "op": "cover 1",
      "defined_out": [
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "326": {
      "callsub": "test_cases.struct_by_name.contract.DemoContract.get_three",
      "op": "callsub test_cases.struct_by_name.contract.DemoContract.get_three",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%6#0",
        "awst_tmp%7#0"
      ]
    },
    "329": {
      "op": "cover 2",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "331": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%5#0",
        "awst_tmp%7#0",
        "tmp%3#0"
      ]
    },
    "332": {
      "op": "uncover 2",
      "defined_out": [
        "awst_tmp%7#0",
        "reinterpret_biguint%6#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "awst_tmp%7#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "334": {
      "op": "uncover 2",
      "defined_out": [
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "336": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "337": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "tmp%5#0"
      ]
    },
    "338": {
      "op": "bz test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "341": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2"
    },
    "344": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_true@2",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "1"
      ]
    },
    "345": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "347": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    },
    "350": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%0#0"
      ]
    },
    "352": {
      "op": "uncover 1"
    },
    "354": {
      "retsub": true,
      "op": "retsub"
    },
    "355": {
      "block": "test_cases.struct_by_name.contract.DemoContract.compare_bool_false@3",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "0"
      ]
    },
    "356": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "358": {
      "op": "b test_cases.struct_by_name.contract.DemoContract.compare_bool_merge@4"
    }
  }
}