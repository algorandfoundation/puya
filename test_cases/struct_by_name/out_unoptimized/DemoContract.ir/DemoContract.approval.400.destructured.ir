main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L18
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@9, 2u => block@12, 3u => block@13, 4u => block@14, 5u => block@15, 6u => block@16, 7u => block@17, 8u => block@18, 9u => block@19, 10u => block@20, 11u => block@21, * => block@22}
    block@2: // switch_case_0_L18
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_one()(uint8,uint8)" => block@3, method "get_two()(uint8,uint8)" => block@4, method "get_three()(uint8,uint8)" => block@5, method "compare()bool" => block@6, * => block@7}
    block@3: // get_one_route_L25
        test_cases.struct_by_name.contract.DemoContract.get_one[routing]()
        goto block@8
    block@4: // get_two_route_L32
        test_cases.struct_by_name.contract.DemoContract.get_two[routing]()
        goto block@8
    block@5: // get_three_route_L39
        test_cases.struct_by_name.contract.DemoContract.get_three[routing]()
        goto block@8
    block@6: // compare_route_L46
        test_cases.struct_by_name.contract.DemoContract.compare[routing]()
        goto block@8
    block@7: // switch_case_default_L18
        goto block@8
    block@8: // switch_case_next_L18
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L18
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@10 : block@11
    block@10: // __algopy_default_create_L1
        goto block@24
    block@24: // L1
        goto block@25
    block@25: // after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create_L1
        exit 1u
    block@11: // else_body_L18
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L18
        goto block@22
    block@13: // switch_case_3_L18
        goto block@22
    block@14: // switch_case_4_L18
        goto block@22
    block@15: // switch_case_5_L18
        goto block@22
    block@16: // switch_case_6_L18
        goto block@22
    block@17: // switch_case_7_L18
        goto block@22
    block@18: // switch_case_8_L18
        goto block@22
    block@19: // switch_case_9_L18
        goto block@22
    block@20: // switch_case_10_L18
        goto block@22
    block@21: // switch_case_11_L18
        goto block@22
    block@22: // switch_case_default_L18
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@23: // after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.struct_by_name.contract.DemoContract.get_one[routing]() -> void:
    block@0: // L25
        let (tmp%0#0: Encoded(uint8), tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_one()
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%1#0)
        let aggregate%as_Encoded(uint8,uint8)%0#0: Encoded(uint8,uint8) = aggregate%head%1#0
        let tmp%2#0: Encoded(uint8,uint8) = aggregate%as_Encoded(uint8,uint8)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_two[routing]() -> void:
    block@0: // L32
        let (tmp%0#0: Encoded(uint8), tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%1#0)
        let aggregate%as_Encoded(uint8,uint8)%0#0: Encoded(uint8,uint8) = aggregate%head%1#0
        let tmp%2#0: Encoded(uint8,uint8) = aggregate%as_Encoded(uint8,uint8)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_three[routing]() -> void:
    block@0: // L39
        let (tmp%0#0: Encoded(uint8), tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_three()
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%1#0)
        let aggregate%as_Encoded(uint8,uint8)%0#0: Encoded(uint8,uint8) = aggregate%head%1#0
        let tmp%2#0: Encoded(uint8,uint8) = aggregate%as_Encoded(uint8,uint8)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.compare[routing]() -> void:
    block@0: // L46
        let tmp%0#0: bool = test_cases.struct_by_name.contract.DemoContract.compare()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.struct_by_name.contract.DemoContract.get_one() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L25
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_two() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L32
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.get_three() -> <Encoded(uint8), Encoded(uint8)>:
    block@0: // L39
        return 0x01 0x01

subroutine test_cases.struct_by_name.contract.DemoContract.compare() -> bool:
    block@0: // L46
        let (awst_tmp%0#0: Encoded(uint8), awst_tmp%1#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_one()
        let reinterpret_biguint%0#0: biguint = awst_tmp%0#0
        let (awst_tmp%2#0: Encoded(uint8), awst_tmp%3#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let reinterpret_biguint%1#0: biguint = awst_tmp%2#0
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        let reinterpret_biguint%2#0: biguint = awst_tmp%1#0
        let reinterpret_biguint%3#0: biguint = awst_tmp%3#0
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // and_contd_L48
        let (awst_tmp%4#0: Encoded(uint8), awst_tmp%5#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_two()
        let reinterpret_biguint%4#0: biguint = awst_tmp%4#0
        let (awst_tmp%6#0: Encoded(uint8), awst_tmp%7#0: Encoded(uint8)) = test_cases.struct_by_name.contract.DemoContract.get_three()
        let reinterpret_biguint%5#0: biguint = awst_tmp%6#0
        let tmp%3#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        let reinterpret_biguint%6#0: biguint = awst_tmp%5#0
        let reinterpret_biguint%7#0: biguint = awst_tmp%7#0
        let tmp%4#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L48
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L48
        let and_result%0#0: bool = 0u
        goto block@4
    block@4: // bool_merge_L48
        return and_result%0#0