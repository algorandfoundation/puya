#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 0x 0x01

main_block@1:
    // struct_by_name/contract.py:18
    // class DemoContract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@9

main_abi_routing@2:
    // struct_by_name/contract.py:18
    // class DemoContract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x3d694b70 // method "get_one()(uint8,uint8)"
    pushbytes 0x7fb34e8a // method "get_two()(uint8,uint8)"
    pushbytes 0x8ba7c4c2 // method "get_three()(uint8,uint8)"
    pushbytes 0x46dadea3 // method "compare()bool"
    uncover 4
    match main_get_one_route@3 main_get_two_route@4 main_get_three_route@5 main_compare_route@6

main_switch_case_default@7:

main_switch_case_next@8:

main_after_if_else@13:
    // struct_by_name/contract.py:18
    // class DemoContract(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14:
    return

main_compare_route@6:
    // struct_by_name/contract.py:46
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub compare
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14

main_get_three_route@5:
    // struct_by_name/contract.py:39
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub get_three
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14

main_get_two_route@4:
    // struct_by_name/contract.py:32
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub get_two
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14

main_get_one_route@3:
    // struct_by_name/contract.py:25
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub get_one
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14

main_bare_routing@9:
    // struct_by_name/contract.py:18
    // class DemoContract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@10

main_switch_case_default@11:

main_switch_case_next@12:
    b main_after_if_else@13

main___algopy_default_create@10:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@15:

main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__algopy_default_create@16:
    intc_1 // 1
    b main_after_inlined_test_cases.struct_by_name.contract.DemoContract.__puya_arc4_router__@14


// test_cases.struct_by_name.contract.DemoContract.get_one() -> bytes, bytes:
get_one:
    // struct_by_name/contract.py:25-26
    // @arc4.abimethod()
    // def get_one(self) -> StructOne:
    proto 0 2
    // struct_by_name/contract.py:28
    // x=arc4.UInt8(1),
    bytec_2 // 0x01
    // struct_by_name/contract.py:29
    // y=arc4.UInt8(1),
    dup
    // struct_by_name/contract.py:27-30
    // return StructOne(
    //     x=arc4.UInt8(1),
    //     y=arc4.UInt8(1),
    // )
    retsub


// test_cases.struct_by_name.contract.DemoContract.get_two() -> bytes, bytes:
get_two:
    // struct_by_name/contract.py:32-33
    // @arc4.abimethod()
    // def get_two(self) -> StructTwo:
    proto 0 2
    // struct_by_name/contract.py:35
    // x=arc4.UInt8(1),
    bytec_2 // 0x01
    // struct_by_name/contract.py:36
    // y=arc4.UInt8(1),
    dup
    // struct_by_name/contract.py:34-37
    // return StructTwo(
    //     x=arc4.UInt8(1),
    //     y=arc4.UInt8(1),
    // )
    retsub


// test_cases.struct_by_name.contract.DemoContract.get_three() -> bytes, bytes:
get_three:
    // struct_by_name/contract.py:39-40
    // @arc4.abimethod()
    // def get_three(self) -> StructThree:
    proto 0 2
    // struct_by_name/contract.py:42
    // x=arc4.UInt8(1),
    bytec_2 // 0x01
    // struct_by_name/contract.py:43
    // y=arc4.UInt8(1),
    dup
    // struct_by_name/contract.py:41-44
    // return StructThree(
    //     x=arc4.UInt8(1),
    //     y=arc4.UInt8(1),
    // )
    retsub


// test_cases.struct_by_name.contract.DemoContract.compare() -> uint64:
compare:
    // struct_by_name/contract.py:46-47
    // @arc4.abimethod()
    // def compare(self) -> bool:
    proto 0 1
    // struct_by_name/contract.py:48
    // return self.get_one() == self.get_two() and self.get_two() == self.get_three()
    callsub get_one
    swap
    callsub get_two
    cover 2
    b==
    uncover 2
    uncover 2
    b==
    &&
    bz compare_bool_false@3

compare_and_contd@1:
    // struct_by_name/contract.py:48
    // return self.get_one() == self.get_two() and self.get_two() == self.get_three()
    callsub get_two
    swap
    callsub get_three
    cover 2
    b==
    uncover 2
    uncover 2
    b==
    &&
    bz compare_bool_false@3

compare_bool_true@2:
    intc_1 // 1

compare_bool_merge@4:
    // struct_by_name/contract.py:48
    // return self.get_one() == self.get_two() and self.get_two() == self.get_three()
    retsub

compare_bool_false@3:
    intc_0 // 0
    b compare_bool_merge@4
