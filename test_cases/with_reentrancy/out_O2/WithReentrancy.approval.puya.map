{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAO8B;;AAAV;;;AAAR;AAAJ;AACM;AAAN;;;;AACO;AAAP;AAMR;;;AAIO;;AADK;AACL;AAAP;;;AAFa;AAGE;;AAAA;AAAA;AAAP;AACQ;;AAHJ;AAGI;AAAL;;;AAA0B;;AAHzB;AAGyB;AAJxB;AAIiB;AAAA;AAAA;AAAnB;AAAP;AAGJ;;;AAEO;;AAAK;AAAL;AAAP;;;AACQ;;AAAA;AACa;;AAAI;AAAJ;AAAV;;;AAA6B;;AAAI;AAAJ;AAAV;;;AAAnB;AAAP;AAGJ;;;;;AAEI;;AAAQ;AAAJ;;AAAJ;;AAQQ;AAAJ;AAAJ;;AAQc;AAAJ;AAAA;AAAA;;AACF;AAAJ;AAAJ;AACJ;;;AACQ;;AAAa;AAAJ;AAAT;AAAA;;AACc;AAAV;AAAc;AAAd;AAAJ;;AAIR;;AAAA;;;;;;;AAE8B;;AAAA;AAAA;;;AAAtB;;;;;;;;;;;AAAA;AAAA;AAAJ;AAhB0B;;;AAAtB;;;;;;;;;;;AAAA;AAAA;AAAJ;AARyB;;AAAA;;;AAArB;;;;;;;;;;AAAA;AAAA;AAAJ;AACA;AAmBI;;AAAS;;;AAAT;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.with_reentrancy.contract.WithReentrancy.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 1 10"
    },
    "6": {
      "op": "bytecblock 0x30313233343536373839"
    },
    "19": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "21": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "24": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "25": {
      "op": "log",
      "stack_out": []
    },
    "26": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "27": {
      "callsub": "test_cases.with_reentrancy.contract.silly",
      "op": "callsub silly",
      "defined_out": [
        "{silly}"
      ],
      "stack_out": [
        "{silly}"
      ]
    },
    "30": {
      "op": "pop",
      "stack_out": []
    },
    "31": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "32": {
      "op": "return",
      "stack_out": []
    },
    "33": {
      "subroutine": "test_cases.with_reentrancy.contract.itoa",
      "params": {
        "i#0": "uint64"
      },
      "block": "itoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "36": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "38": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "10"
      ]
    },
    "39": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "op": "bz itoa_after_if_else@2",
      "stack_out": []
    },
    "43": {
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "0x30313233343536373839"
      ]
    },
    "44": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x30313233343536373839",
        "i#0 (copy)"
      ]
    },
    "46": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "0x30313233343536373839",
        "i#0 (copy)",
        "1"
      ]
    },
    "47": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "read_bytes%0#0"
      ],
      "stack_out": [
        "read_bytes%0#0"
      ]
    },
    "48": {
      "retsub": true,
      "op": "retsub"
    },
    "49": {
      "block": "itoa_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "51": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "10"
      ]
    },
    "52": {
      "op": "/",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "53": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "56": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "i#0 (copy)"
      ]
    },
    "58": {
      "op": "intc_2 // 10",
      "stack_out": [
        "tmp%2#0",
        "i#0 (copy)",
        "10"
      ]
    },
    "59": {
      "op": "%",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "60": {
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x30313233343536373839"
      ]
    },
    "61": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "0x30313233343536373839",
        "tmp%3#0"
      ]
    },
    "62": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x30313233343536373839",
        "tmp%3#0",
        "1"
      ]
    },
    "63": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "read_bytes%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "read_bytes%1#0"
      ]
    },
    "64": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "65": {
      "retsub": true,
      "op": "retsub"
    },
    "66": {
      "subroutine": "test_cases.with_reentrancy.contract.fibonacci",
      "params": {
        "n#0": "uint64"
      },
      "block": "fibonacci",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "69": {
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "71": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "1"
      ]
    },
    "72": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "bz fibonacci_after_if_else@2",
      "stack_out": []
    },
    "76": {
      "op": "frame_dig -1",
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "78": {
      "retsub": true,
      "op": "retsub"
    },
    "79": {
      "block": "fibonacci_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "81": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "1"
      ]
    },
    "82": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "83": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "86": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "n#0 (copy)"
      ]
    },
    "88": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "n#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "n#0 (copy)",
        "2"
      ]
    },
    "89": {
      "op": "-",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "90": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "94": {
      "retsub": true,
      "op": "retsub"
    },
    "95": {
      "subroutine": "test_cases.with_reentrancy.contract.silly",
      "params": {
        "x#0": "uint64"
      },
      "block": "silly",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "98": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "result#2"
      ]
    },
    "100": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#2",
        "x#0 (copy)"
      ]
    },
    "102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#2",
        "x#0 (copy)",
        "1"
      ]
    },
    "103": {
      "op": "+",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "result#2",
        "x#0"
      ]
    },
    "104": {
      "op": "dup"
    },
    "105": {
      "op": "frame_bury -1",
      "stack_out": [
        "result#2",
        "x#0 (copy)"
      ]
    },
    "107": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#2",
        "x#0 (copy)",
        "2"
      ]
    },
    "108": {
      "op": "+",
      "defined_out": [
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3"
      ]
    },
    "109": {
      "op": "dupn 2",
      "defined_out": [
        "x#3",
        "x#3 (copy)"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "x#3",
        "x#3 (copy)"
      ]
    },
    "111": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#2",
        "x#3",
        "x#3",
        "x#3 (copy)",
        "2"
      ]
    },
    "112": {
      "op": "%",
      "defined_out": [
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "x#3",
        "tmp%0#2"
      ]
    },
    "113": {
      "op": "dup",
      "stack_out": [
        "result#2",
        "x#3",
        "x#3",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "114": {
      "op": "uncover 2",
      "defined_out": [
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "tmp%0#2",
        "x#3"
      ]
    },
    "116": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "tmp%0#2",
        "x#3",
        "2"
      ]
    },
    "117": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "tmp%0#2",
        "a#0"
      ]
    },
    "118": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#2"
      ]
    },
    "119": {
      "op": "bnz silly_else_body@3",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "122": {
      "op": "frame_dig 3",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "a#0"
      ]
    },
    "124": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "a#0",
        "2"
      ]
    },
    "125": {
      "op": "*",
      "defined_out": [
        "a#0",
        "result#2",
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2"
      ]
    },
    "126": {
      "op": "dup",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2",
        "result#2"
      ]
    },
    "127": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "result#2",
        "tmp%0#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2"
      ]
    },
    "129": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2",
        "2"
      ]
    },
    "130": {
      "op": "/",
      "defined_out": [
        "a#0",
        "result#2",
        "tmp%0#2",
        "tmp%1#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%1#2"
      ]
    },
    "131": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%1#2",
        "2"
      ]
    },
    "132": {
      "op": "-",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "a#0"
      ]
    },
    "133": {
      "op": "frame_bury 3",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "135": {
      "block": "silly_after_if_else@4",
      "stack_in": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#2"
      ]
    },
    "137": {
      "op": "bnz silly_after_if_else@6",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "140": {
      "op": "frame_dig 3",
      "defined_out": [
        "result#2",
        "tmp%0#2"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2"
      ]
    },
    "142": {
      "op": "frame_bury 0",
      "defined_out": [
        "result#2",
        "tmp%0#2"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "144": {
      "block": "silly_after_if_else@6",
      "stack_in": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3"
      ]
    },
    "146": {
      "op": "dup",
      "defined_out": [
        "x#3",
        "x#3 (copy)"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3",
        "x#3 (copy)"
      ]
    },
    "147": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "tmp%2#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3",
        "tmp%2#0"
      ]
    },
    "150": {
      "op": "pushbytes 0x73696c6c7933203d20",
      "defined_out": [
        "0x73696c6c7933203d20",
        "tmp%2#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3",
        "tmp%2#0",
        "0x73696c6c7933203d20"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3",
        "0x73696c6c7933203d20",
        "tmp%2#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3",
        "tmp%3#0"
      ]
    },
    "163": {
      "op": "log",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3"
      ]
    },
    "164": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "tmp%0#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#0"
      ]
    },
    "167": {
      "op": "pushbytes 0x73696c6c7932203d20",
      "defined_out": [
        "0x73696c6c7932203d20",
        "tmp%0#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#0",
        "0x73696c6c7932203d20"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "0x73696c6c7932203d20",
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%1#0"
      ]
    },
    "180": {
      "op": "log",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "181": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#0 (copy)"
      ]
    },
    "183": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "pushbytes 0x73696c6c79203d20",
      "defined_out": [
        "0x73696c6c79203d20",
        "tmp%0#0",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%0#0",
        "0x73696c6c79203d20"
      ]
    },
    "196": {
      "op": "swap",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "0x73696c6c79203d20",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "concat",
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "log",
      "defined_out": [
        "result#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2"
      ]
    },
    "199": {
      "retsub": true,
      "op": "retsub"
    },
    "200": {
      "block": "silly_else_body@3",
      "stack_in": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "x#3"
      ]
    },
    "202": {
      "callsub": "test_cases.with_reentrancy.contract.silly",
      "op": "callsub silly",
      "defined_out": [
        "result#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0",
        "result#2"
      ]
    },
    "205": {
      "op": "frame_bury 0",
      "defined_out": [
        "result#2",
        "x#3"
      ],
      "stack_out": [
        "result#2",
        "x#3",
        "tmp%0#2",
        "a#0"
      ]
    },
    "207": {
      "op": "b silly_after_if_else@4"
    }
  }
}