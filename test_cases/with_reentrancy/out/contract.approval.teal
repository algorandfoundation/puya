#pragma version 8

// test_cases.with_reentrancy.contract.WithReentrancy.approval_program() -> uint64:
main_block@0:
        int 5
        callsub fibonacci
        itob
        log
        int 2
        callsub silly
        pop
        int 1
        return


// test_cases.with_reentrancy.contract.fibonacci(n#0: uint64) -> uint64:
fibonacci:
        proto 1 1

fibonacci_block@0:
        frame_dig -1
        int 1
        <=
        bz fibonacci_after_if_else@2

fibonacci_if_body@1:
        frame_dig -1
        retsub

fibonacci_after_if_else@2:
        frame_dig -1
        int 1
        -
        callsub fibonacci
        frame_dig -1
        int 2
        -
        callsub fibonacci
        +
        retsub


// test_cases.with_reentrancy.contract.silly(x#0: uint64) -> uint64:
silly:
        proto 1 1

silly_block@0:
        frame_dig -1
        int 1
        +
        dup
        frame_bury -1
        callsub silly2
        frame_dig -1
        callsub itoa
        byte "silly = "
        swap
        concat
        log
        retsub


// test_cases.with_reentrancy.contract.silly2(x#0: uint64) -> uint64:
silly2:
        proto 1 1

silly2_block@0:
        frame_dig -1
        int 2
        +
        dup
        frame_bury -1
        callsub silly3
        frame_dig -1
        callsub itoa
        byte "silly2 = "
        swap
        concat
        log
        retsub


// test_cases.with_reentrancy.contract.silly3(x#0: uint64) -> uint64:
silly3:
        proto 1 1
        byte ""

silly3_block@0:
        frame_dig -1
        int 2
        %
        !
        dup
        swap
        frame_dig -1
        int 2
        +
        swap
        bz silly3_else_body@2

silly3_if_body@1:
        frame_dig 2
        int 2
        *
        dup
        frame_bury 0
        int 2
        /
        int 2
        -
        frame_bury 2
        b silly3_after_if_else@3

silly3_else_body@2:
        frame_dig -1
        callsub silly
        frame_bury 0

silly3_after_if_else@3:
        frame_dig 1
        bz silly3_after_if_else@5

silly3_if_body@4:
        frame_dig 2
        frame_bury 0

silly3_after_if_else@5:
        frame_dig -1
        callsub itoa
        byte "silly3 = "
        swap
        concat
        log
        retsub


// test_cases.with_reentrancy.contract.itoa(i#0: uint64) -> bytes:
itoa:
        proto 1 1

itoa_block@0:
        frame_dig -1
        int 10
        <
        bz itoa_after_if_else@2

itoa_if_body@1:
        frame_dig -1
        int 1
        +
        byte "0123456789"
        frame_dig -1
        uncover 2
        substring3
        retsub

itoa_after_if_else@2:
        frame_dig -1
        int 10
        /
        callsub itoa
        frame_dig -1
        int 10
        %
        dup
        int 1
        +
        byte "0123456789"
        cover 2
        substring3
        concat
        retsub

