main test_cases.with_reentrancy.contract.WithReentrancy.approval_program:
    block@0: // L7
        let tmp%0#0: uint64 = test_cases.with_reentrancy.contract.fibonacci(5u)
        let tmp%1#0: bytes = (itob tmp%0#0)
        (log tmp%1#0)
        test_cases.with_reentrancy.contract.silly(2u)
        return 1u

subroutine test_cases.with_reentrancy.contract.itoa(i: uint64) -> bytes:
    block@0: // L16
        let tmp%1#0: bool = (< i#0 10u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L21
        let read_bytes%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u) // on error: Index access is out of bounds
        return read_bytes%0#0
    block@2: // after_if_else_L20
        let tmp%2#0: uint64 = (/ i#0 10u)
        let tmp%3#0: bytes = test_cases.with_reentrancy.contract.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 10u)
        let read_bytes%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u) // on error: Index access is out of bounds
        let tmp%5#0: bytes = (concat tmp%3#0 read_bytes%1#0)
        return tmp%5#0

subroutine test_cases.with_reentrancy.contract.fibonacci(n: uint64) -> uint64:
    block@0: // L25
        let tmp%0#0: bool = (<= n#0 1u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L28
        return n#0
    block@2: // after_if_else_L27
        let tmp%1#0: uint64 = (- n#0 1u)
        let tmp%2#0: uint64 = test_cases.with_reentrancy.contract.fibonacci(tmp%1#0)
        let tmp%3#0: uint64 = (- n#0 2u)
        let tmp%4#0: uint64 = test_cases.with_reentrancy.contract.fibonacci(tmp%3#0)
        let tmp%5#0: uint64 = (+ tmp%2#0 tmp%4#0)
        return tmp%5#0

subroutine test_cases.with_reentrancy.contract.silly(x: uint64) -> uint64:
    block@0: // L32
        let x#1: uint64 = (+ x#0 1u)
        let x#3: uint64 = (+ x#1 2u)
        let tmp%0#0: uint64 = (% x#3 2u)
        let a#0: uint64 = (+ x#3 2u)
        goto tmp%0#0 ? block@3 : block@2
    block@2: // if_body_L53
        let result#2: uint64 = (* a#0 2u)
        let tmp%4#0: uint64 = (/ result#2 2u)
        let a#1: uint64 = (- tmp%4#0 2u)
        goto block@4
    block@3: // else_body_L56
        let result#3: uint64 = test_cases.with_reentrancy.contract.silly(x#3)
        goto block@4
    block@4: // after_if_else_L52
        let a#2: uint64 = φ(a#1 <- block@2, a#0 <- block@3)
        let result#6: uint64 = φ(result#2 <- block@2, result#3 <- block@3)
        goto tmp%0#0 ? block@6 : block@5
    block@5: // if_body_L59
        goto block@6
    block@6: // after_if_else_L58
        let result#5: uint64 = φ(result#6 <- block@4, a#2 <- block@5)
        let tmp%7#0: bytes = test_cases.with_reentrancy.contract.itoa(x#3)
        let tmp%8#0: bytes = (concat 0x73696c6c7933203d20 tmp%7#0)
        (log tmp%8#0)
        let tmp%2#1: bytes = test_cases.with_reentrancy.contract.itoa(x#3)
        let tmp%3#1: bytes = (concat 0x73696c6c7932203d20 tmp%2#1)
        (log tmp%3#1)
        let tmp%2#0: bytes = test_cases.with_reentrancy.contract.itoa(x#1)
        let tmp%3#0: bytes = (concat 0x73696c6c79203d20 tmp%2#0)
        (log tmp%3#0)
        return result#5