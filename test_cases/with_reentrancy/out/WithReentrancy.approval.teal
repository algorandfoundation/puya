#pragma version 10
#pragma typetrack false

// test_cases.with_reentrancy.contract.WithReentrancy.approval_program() -> uint64:
main:
    intcblock 2 1 10
    bytecblock 0x30313233343536373839
    // with_reentrancy/contract.py:8
    // log(op.itob(fibonacci(UInt64(5))))
    pushint 5 // 5
    callsub fibonacci
    itob
    log
    // with_reentrancy/contract.py:9
    // silly(UInt64(2))
    intc_0 // 2
    callsub silly
    pop
    // with_reentrancy/contract.py:10
    // return True
    intc_1 // 1
    return


// test_cases.with_reentrancy.contract.itoa(i: uint64) -> bytes:
itoa:
    // with_reentrancy/contract.py:16-17
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // with_reentrancy/contract.py:20
    // if i < radix:
    frame_dig -1
    // with_reentrancy/contract.py:19
    // radix = digits.length
    intc_2 // 10
    // with_reentrancy/contract.py:20
    // if i < radix:
    <
    bz itoa_after_if_else@2
    // with_reentrancy/contract.py:18
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // with_reentrancy/contract.py:21
    // return digits[i]
    frame_dig -1
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    retsub

itoa_after_if_else@2:
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    // with_reentrancy/contract.py:19
    // radix = digits.length
    intc_2 // 10
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    /
    callsub itoa
    frame_dig -1
    // with_reentrancy/contract.py:19
    // radix = digits.length
    intc_2 // 10
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    %
    // with_reentrancy/contract.py:18
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    concat
    retsub


// test_cases.with_reentrancy.contract.fibonacci(n: uint64) -> uint64:
fibonacci:
    // with_reentrancy/contract.py:25-26
    // @subroutine
    // def fibonacci(n: UInt64) -> UInt64:
    proto 1 1
    // with_reentrancy/contract.py:27
    // if n <= 1:
    frame_dig -1
    intc_1 // 1
    <=
    bz fibonacci_after_if_else@2
    // with_reentrancy/contract.py:28
    // return n
    frame_dig -1
    retsub

fibonacci_after_if_else@2:
    // with_reentrancy/contract.py:29
    // return fibonacci(n - 1) + fibonacci(n - 2)
    frame_dig -1
    intc_1 // 1
    -
    callsub fibonacci
    frame_dig -1
    intc_0 // 2
    -
    callsub fibonacci
    +
    retsub


// test_cases.with_reentrancy.contract.silly(x: uint64) -> uint64:
silly:
    // with_reentrancy/contract.py:32-33
    // @subroutine
    // def silly(x: UInt64) -> UInt64:
    proto 1 1
    pushbytes ""
    // with_reentrancy/contract.py:34
    // x = x + 1
    frame_dig -1
    intc_1 // 1
    +
    dup
    frame_bury -1
    // with_reentrancy/contract.py:42
    // x = x + 2
    intc_0 // 2
    +
    dupn 2
    // with_reentrancy/contract.py:50
    // is_even = x % 2 == 0
    intc_0 // 2
    %
    dup
    uncover 2
    // with_reentrancy/contract.py:51
    // a = x + 2
    intc_0 // 2
    +
    swap
    // with_reentrancy/contract.py:52
    // if is_even:
    bnz silly_else_body@3
    // with_reentrancy/contract.py:53
    // result = a * 2
    frame_dig 3
    intc_0 // 2
    *
    dup
    frame_bury 0
    // with_reentrancy/contract.py:54
    // a = result // 2 - 2
    intc_0 // 2
    /
    intc_0 // 2
    -
    frame_bury 3

silly_after_if_else@4:
    // with_reentrancy/contract.py:58
    // if is_even:
    frame_dig 2
    bnz silly_after_if_else@6
    frame_dig 3
    frame_bury 0

silly_after_if_else@6:
    // with_reentrancy/contract.py:60
    // log(Bytes(b"silly3 = ") + itoa(x))
    frame_dig 1
    dup
    callsub itoa
    pushbytes 0x73696c6c7933203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:44
    // log(Bytes(b"silly2 = ") + itoa(x))
    callsub itoa
    pushbytes 0x73696c6c7932203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:36
    // log(Bytes(b"silly = ") + itoa(x))
    frame_dig -1
    callsub itoa
    pushbytes 0x73696c6c79203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:37
    // return result
    retsub

silly_else_body@3:
    // with_reentrancy/contract.py:56
    // result = silly(x)
    frame_dig 1
    callsub silly
    frame_bury 0
    b silly_after_if_else@4
