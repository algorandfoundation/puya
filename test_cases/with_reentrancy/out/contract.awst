contract WithReentrancy
{
  approval_program(): bool
  {
    log(itob(test_cases.with_reentrancy.contract::fibonacci(5u)))
    test_cases.with_reentrancy.contract::silly(2u)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine itoa(i: puyapy.UInt64): puyapy.Bytes
{
  digits: puyapy.Bytes = '0123456789'
  radix: puyapy.UInt64 = len(digits)
  if (i < radix) {
    return digits[i]
  }
  return test_cases.with_reentrancy.contract::itoa(i // radix) + digits[i % radix]
}

subroutine fibonacci(n: puyapy.UInt64): puyapy.UInt64
{
  if (n <= 1u) {
    return n
  }
  return test_cases.with_reentrancy.contract::fibonacci(n - 1u) + test_cases.with_reentrancy.contract::fibonacci(n - 2u)
}

subroutine silly(x: puyapy.UInt64): puyapy.UInt64
{
  x: puyapy.UInt64 = x + 1u
  result: puyapy.UInt64 = test_cases.with_reentrancy.contract::silly2(x)
  log('silly = ' + test_cases.with_reentrancy.contract::itoa(x))
  return result
}

subroutine silly2(x: puyapy.UInt64): puyapy.UInt64
{
  x: puyapy.UInt64 = x + 2u
  result: puyapy.UInt64 = test_cases.with_reentrancy.contract::silly3(x)
  log('silly2 = ' + test_cases.with_reentrancy.contract::itoa(x))
  return result
}

subroutine silly3(x: puyapy.UInt64): puyapy.UInt64
{
  is_even: bool = x % 2u == 0u
  a: puyapy.UInt64 = x + 2u
  if (is_even) {
    result: puyapy.UInt64 = a * 2u
    a: puyapy.UInt64 = result // 2u - 2u
  } else {
    result: puyapy.UInt64 = test_cases.with_reentrancy.contract::silly(x)
  }
  if (is_even) {
    result: puyapy.UInt64 = a
  }
  log('silly3 = ' + test_cases.with_reentrancy.contract::itoa(x))
  return result
}