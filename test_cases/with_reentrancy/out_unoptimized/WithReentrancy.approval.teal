#pragma version 10
#pragma typetrack false

// test_cases.with_reentrancy.contract.WithReentrancy.approval_program() -> uint64:
main:
    intcblock 2 1
    bytecblock 0x30313233343536373839

main_block@0:
    // with_reentrancy/contract.py:8
    // log(op.itob(fibonacci(UInt64(5))))
    pushint 5 // 5
    callsub fibonacci
    itob
    log
    // with_reentrancy/contract.py:9
    // silly(UInt64(2))
    intc_0 // 2
    callsub silly
    pop
    // with_reentrancy/contract.py:10
    // return True
    intc_1 // 1
    return


// test_cases.with_reentrancy.contract.itoa(i: uint64) -> bytes:
itoa:
    // with_reentrancy/contract.py:16-17
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1

itoa_block@0:
    // with_reentrancy/contract.py:18
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // with_reentrancy/contract.py:19
    // radix = digits.length
    len
    dup
    // with_reentrancy/contract.py:20
    // if i < radix:
    frame_dig -1
    >
    bz itoa_after_if_else@2

itoa_if_body@1:
    // with_reentrancy/contract.py:18
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // with_reentrancy/contract.py:21
    // return digits[i]
    frame_dig -1
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    swap
    retsub

itoa_after_if_else@2:
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    /
    callsub itoa
    swap
    frame_dig -1
    swap
    %
    // with_reentrancy/contract.py:18
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // with_reentrancy/contract.py:22
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    concat
    swap
    retsub


// test_cases.with_reentrancy.contract.fibonacci(n: uint64) -> uint64:
fibonacci:
    // with_reentrancy/contract.py:25-26
    // @subroutine
    // def fibonacci(n: UInt64) -> UInt64:
    proto 1 1

fibonacci_block@0:
    // with_reentrancy/contract.py:27
    // if n <= 1:
    frame_dig -1
    intc_1 // 1
    <=
    bz fibonacci_after_if_else@2

fibonacci_if_body@1:
    // with_reentrancy/contract.py:28
    // return n
    frame_dig -1
    retsub

fibonacci_after_if_else@2:
    // with_reentrancy/contract.py:29
    // return fibonacci(n - 1) + fibonacci(n - 2)
    frame_dig -1
    intc_1 // 1
    -
    callsub fibonacci
    frame_dig -1
    intc_0 // 2
    -
    callsub fibonacci
    +
    retsub


// test_cases.with_reentrancy.contract.silly(x: uint64) -> uint64:
silly:
    // with_reentrancy/contract.py:32-33
    // @subroutine
    // def silly(x: UInt64) -> UInt64:
    proto 1 1

silly_block@0:
    // with_reentrancy/contract.py:34
    // x = x + 1
    frame_dig -1
    intc_1 // 1
    +
    dup
    frame_bury -1
    // with_reentrancy/contract.py:35
    // result = silly2(x)
    callsub silly2
    // with_reentrancy/contract.py:36
    // log(Bytes(b"silly = ") + itoa(x))
    frame_dig -1
    callsub itoa
    pushbytes 0x73696c6c79203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:37
    // return result
    retsub


// test_cases.with_reentrancy.contract.silly2(x: uint64) -> uint64:
silly2:
    // with_reentrancy/contract.py:40-41
    // @subroutine
    // def silly2(x: UInt64) -> UInt64:
    proto 1 1

silly2_block@0:
    // with_reentrancy/contract.py:42
    // x = x + 2
    frame_dig -1
    intc_0 // 2
    +
    dup
    frame_bury -1
    // with_reentrancy/contract.py:43
    // result = silly3(x)
    callsub silly3
    // with_reentrancy/contract.py:44
    // log(Bytes(b"silly2 = ") + itoa(x))
    frame_dig -1
    callsub itoa
    pushbytes 0x73696c6c7932203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:45
    // return result
    retsub


// test_cases.with_reentrancy.contract.silly3(x: uint64) -> uint64:
silly3:
    // with_reentrancy/contract.py:48-49
    // @subroutine
    // def silly3(x: UInt64) -> UInt64:
    proto 1 1
    pushbytes ""

silly3_block@0:
    // with_reentrancy/contract.py:50
    // is_even = x % 2 == 0
    frame_dig -1
    intc_0 // 2
    %
    pushint 0 // 0
    ==
    dup
    // with_reentrancy/contract.py:51
    // a = x + 2
    frame_dig -1
    intc_0 // 2
    +
    swap
    // with_reentrancy/contract.py:52
    // if is_even:
    bz silly3_else_body@2

silly3_if_body@1:
    // with_reentrancy/contract.py:53
    // result = a * 2
    frame_dig 2
    intc_0 // 2
    *
    dup
    frame_bury 0
    // with_reentrancy/contract.py:54
    // a = result // 2 - 2
    intc_0 // 2
    /
    intc_0 // 2
    -
    frame_bury 2

silly3_after_if_else@3:
    // with_reentrancy/contract.py:58
    // if is_even:
    frame_dig 1
    bz silly3_after_if_else@5

silly3_if_body@4:
    // with_reentrancy/contract.py:59
    // result = a
    frame_dig 2
    frame_bury 0

silly3_after_if_else@5:
    // with_reentrancy/contract.py:60
    // log(Bytes(b"silly3 = ") + itoa(x))
    frame_dig -1
    callsub itoa
    pushbytes 0x73696c6c7933203d20
    swap
    concat
    log
    // with_reentrancy/contract.py:61
    // return result
    retsub

silly3_else_body@2:
    // with_reentrancy/contract.py:56
    // result = silly(x)
    frame_dig -1
    callsub silly
    frame_bury 0
    b silly3_after_if_else@3
