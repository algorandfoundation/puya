{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAO8B;;AAAV;;;AAAR;AAAJ;AACM;AAAN;;;;AACO;AAAP;AAMP;;;;;;AAEY;AACD;AAAR;AACG;;AAAA;AAAP;;;AAAA;;;AAFa;AAGE;;AAAA;AAAA;AAAP;;AAAA;AACQ;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;AAAA;;AAA0B;;AAAA;;AAAA;AAJxB;AAIiB;;AAAA;AAAA;AAAnB;AAAP;;AAAA;AAGH;;;;;;AAEM;;AAAK;AAAL;AAAP;;;AAAA;;;AACQ;;AAAA;AACa;;AAAI;AAAJ;AAAV;;;AAA6B;;AAAI;AAAJ;AAAV;;;AAAnB;AAAP;AAGH;;;;;;AAEO;;AAAI;AAAJ;;AAAJ;;AACS;;;AACgB;;AAAA;;;AAArB;;;;;;;;;;AAAA;;AAAA;AAAJ;AACA;AAGH;;;;;;AAEO;;AAAI;AAAJ;;AAAJ;;AACS;;;AACiB;;AAAA;;;AAAtB;;;;;;;;;;;AAAA;;AAAA;AAAJ;AACA;AAGH;;;;;;;;AAEa;;AAAI;AAAJ;AAAS;;AAAT;AAAV;AACI;;AAAI;AAAJ;AAAJ;;AACJ;;;AAAA;;;AACiB;;AAAI;AAAJ;AAAT;AAAA;;AACc;AAAV;AAAc;AAAd;AAAJ;;;;;AAIR;;AAAA;;;AAAA;;;AACQ;;AAAA;;;;;AACsB;;AAAA;;;AAAtB;;;;;;;;;;;AAAA;;AAAA;AAAJ;AACA;AALa;;AAAA;;;AAAT;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.with_reentrancy.contract.WithReentrancy.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 1"
    },
    "5": {
      "op": "bytecblock 0x30313233343536373839"
    },
    "18": {
      "op": "b main_block@0"
    },
    "21": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "23": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "log",
      "stack_out": []
    },
    "28": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "29": {
      "callsub": "test_cases.with_reentrancy.contract.silly",
      "op": "callsub silly",
      "defined_out": [
        "{silly}"
      ],
      "stack_out": [
        "{silly}"
      ]
    },
    "32": {
      "op": "pop",
      "stack_out": []
    },
    "33": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "34": {
      "op": "return",
      "stack_out": []
    },
    "35": {
      "subroutine": "test_cases.with_reentrancy.contract.itoa",
      "params": {
        "i#0": "uint64"
      },
      "block": "itoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "38": {
      "op": "b itoa_block@0"
    },
    "41": {
      "block": "itoa_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "0x30313233343536373839"
      ]
    },
    "42": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "43": {
      "op": "dup",
      "defined_out": [
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0"
      ]
    },
    "44": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)",
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "46": {
      "op": ">",
      "defined_out": [
        "radix#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%1#0"
      ]
    },
    "47": {
      "op": "bz itoa_after_if_else@2",
      "stack_out": [
        "radix#0"
      ]
    },
    "50": {
      "op": "b itoa_if_body@1"
    },
    "53": {
      "block": "itoa_if_body@1",
      "stack_in": [
        "radix#0"
      ],
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839"
      ]
    },
    "54": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x30313233343536373839",
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839",
        "i#0 (copy)"
      ]
    },
    "56": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839",
        "i#0 (copy)",
        "1"
      ]
    },
    "57": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0"
      ],
      "stack_out": [
        "radix#0",
        "extract%0#0"
      ]
    },
    "58": {
      "op": "uncover 1"
    },
    "60": {
      "retsub": true,
      "op": "retsub"
    },
    "61": {
      "block": "itoa_after_if_else@2",
      "stack_in": [
        "radix#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "63": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0 (copy)",
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)",
        "radix#0"
      ]
    },
    "65": {
      "op": "dup",
      "defined_out": [
        "i#0 (copy)",
        "radix#0",
        "radix#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)",
        "radix#0 (copy)",
        "radix#0 (copy)"
      ]
    },
    "66": {
      "op": "cover 2",
      "stack_out": [
        "radix#0",
        "radix#0",
        "i#0 (copy)",
        "radix#0 (copy)"
      ]
    },
    "68": {
      "op": "/",
      "defined_out": [
        "radix#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "tmp%2#0"
      ]
    },
    "69": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "radix#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "tmp%3#0"
      ]
    },
    "72": {
      "op": "cover 1",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "radix#0"
      ]
    },
    "74": {
      "op": "frame_dig -1",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "76": {
      "op": "uncover 1",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "i#0 (copy)",
        "radix#0"
      ]
    },
    "78": {
      "op": "%",
      "defined_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "79": {
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839",
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0",
        "0x30313233343536373839"
      ]
    },
    "80": {
      "op": "uncover 1",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "0x30313233343536373839",
        "tmp%4#0"
      ]
    },
    "82": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "0x30313233343536373839",
        "tmp%4#0",
        "1"
      ]
    },
    "83": {
      "op": "extract3",
      "defined_out": [
        "extract%1#0",
        "radix#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "extract%1#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "radix#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%5#0"
      ]
    },
    "85": {
      "op": "uncover 1"
    },
    "87": {
      "retsub": true,
      "op": "retsub"
    },
    "88": {
      "subroutine": "test_cases.with_reentrancy.contract.fibonacci",
      "params": {
        "n#0": "uint64"
      },
      "block": "fibonacci",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "91": {
      "op": "b fibonacci_block@0"
    },
    "94": {
      "block": "fibonacci_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "96": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "1"
      ]
    },
    "97": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "98": {
      "op": "bz fibonacci_after_if_else@2",
      "stack_out": []
    },
    "101": {
      "op": "b fibonacci_if_body@1"
    },
    "104": {
      "block": "fibonacci_if_body@1",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "106": {
      "retsub": true,
      "op": "retsub"
    },
    "107": {
      "block": "fibonacci_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "1"
      ]
    },
    "110": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "111": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "114": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "n#0 (copy)"
      ]
    },
    "116": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "n#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "n#0 (copy)",
        "2"
      ]
    },
    "117": {
      "op": "-",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "118": {
      "callsub": "test_cases.with_reentrancy.contract.fibonacci",
      "op": "callsub fibonacci",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "121": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "122": {
      "retsub": true,
      "op": "retsub"
    },
    "123": {
      "subroutine": "test_cases.with_reentrancy.contract.silly",
      "params": {
        "x#0": "uint64"
      },
      "block": "silly",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "126": {
      "op": "b silly_block@0"
    },
    "129": {
      "block": "silly_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "131": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "132": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "133": {
      "op": "dup"
    },
    "134": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "136": {
      "callsub": "test_cases.with_reentrancy.contract.silly2",
      "op": "callsub silly2",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "139": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "x#0 (copy)"
      ]
    },
    "141": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "144": {
      "op": "pushbytes 0x73696c6c79203d20",
      "defined_out": [
        "0x73696c6c79203d20",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "0x73696c6c79203d20"
      ]
    },
    "154": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "0x73696c6c79203d20",
        "tmp%2#0"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "157": {
      "op": "log",
      "stack_out": [
        "result#0"
      ]
    },
    "158": {
      "retsub": true,
      "op": "retsub"
    },
    "159": {
      "subroutine": "test_cases.with_reentrancy.contract.silly2",
      "params": {
        "x#0": "uint64"
      },
      "block": "silly2",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "162": {
      "op": "b silly2_block@0"
    },
    "165": {
      "block": "silly2_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "167": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "2"
      ]
    },
    "168": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "dup"
    },
    "170": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "172": {
      "callsub": "test_cases.with_reentrancy.contract.silly3",
      "op": "callsub silly3",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "175": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "x#0 (copy)"
      ]
    },
    "177": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "180": {
      "op": "pushbytes 0x73696c6c7932203d20",
      "defined_out": [
        "0x73696c6c7932203d20",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "0x73696c6c7932203d20"
      ]
    },
    "191": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "0x73696c6c7932203d20",
        "tmp%2#0"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "194": {
      "op": "log",
      "stack_out": [
        "result#0"
      ]
    },
    "195": {
      "retsub": true,
      "op": "retsub"
    },
    "196": {
      "subroutine": "test_cases.with_reentrancy.contract.silly3",
      "params": {
        "x#0": "uint64"
      },
      "block": "silly3",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "199": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "result#0"
      ]
    },
    "201": {
      "op": "b silly3_block@0"
    },
    "204": {
      "block": "silly3_block@0",
      "stack_in": [
        "result#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "x#0 (copy)"
      ]
    },
    "206": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "x#0 (copy)",
        "2"
      ]
    },
    "207": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%0#0",
        "0"
      ]
    },
    "210": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%1#0"
      ]
    },
    "211": {
      "op": "dup",
      "defined_out": [
        "is_even#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "is_even#0"
      ]
    },
    "212": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "is_even#0",
        "is_even#0",
        "x#0 (copy)"
      ]
    },
    "214": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#0",
        "is_even#0",
        "is_even#0",
        "x#0 (copy)",
        "2"
      ]
    },
    "215": {
      "op": "+",
      "defined_out": [
        "is_even#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "is_even#0",
        "tmp%2#0"
      ]
    },
    "216": {
      "op": "cover 1",
      "defined_out": [
        "is_even#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "is_even#0"
      ]
    },
    "218": {
      "op": "bz silly3_else_body@2",
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0"
      ]
    },
    "221": {
      "op": "b silly3_if_body@1"
    },
    "224": {
      "block": "silly3_if_body@1",
      "stack_in": [
        "result#0",
        "is_even#0",
        "a#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "a#0"
      ]
    },
    "226": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "a#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "a#0",
        "2"
      ]
    },
    "227": {
      "op": "*",
      "defined_out": [
        "a#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%3#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "229": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "result#0"
      ]
    },
    "231": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "result#0",
        "2"
      ]
    },
    "232": {
      "op": "/",
      "defined_out": [
        "a#0",
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%4#0"
      ]
    },
    "233": {
      "op": "intc_0 // 2",
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%4#0",
        "2"
      ]
    },
    "234": {
      "op": "-",
      "defined_out": [
        "a#0",
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%5#0"
      ]
    },
    "235": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0"
      ]
    },
    "237": {
      "op": "b silly3_after_if_else@3"
    },
    "240": {
      "block": "silly3_after_if_else@3",
      "stack_in": [
        "result#0",
        "is_even#0",
        "a#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "is_even#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "is_even#0"
      ]
    },
    "242": {
      "op": "bz silly3_after_if_else@5",
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0"
      ]
    },
    "245": {
      "op": "b silly3_if_body@4"
    },
    "248": {
      "block": "silly3_if_body@4",
      "stack_in": [
        "result#0",
        "is_even#0",
        "a#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "a#0"
      ]
    },
    "250": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0"
      ]
    },
    "252": {
      "op": "b silly3_after_if_else@5"
    },
    "255": {
      "block": "silly3_after_if_else@5",
      "stack_in": [
        "result#0",
        "is_even#0",
        "a#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "x#0 (copy)"
      ]
    },
    "257": {
      "callsub": "test_cases.with_reentrancy.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%7#0"
      ]
    },
    "260": {
      "op": "pushbytes 0x73696c6c7933203d20",
      "defined_out": [
        "0x73696c6c7933203d20",
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%7#0",
        "0x73696c6c7933203d20"
      ]
    },
    "271": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "0x73696c6c7933203d20",
        "tmp%7#0"
      ]
    },
    "273": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%8#0"
      ]
    },
    "274": {
      "op": "log",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "result#0"
      ]
    },
    "275": {
      "retsub": true,
      "op": "retsub"
    },
    "276": {
      "block": "silly3_else_body@2",
      "stack_in": [
        "result#0",
        "is_even#0",
        "a#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "x#0 (copy)"
      ]
    },
    "278": {
      "callsub": "test_cases.with_reentrancy.contract.silly",
      "op": "callsub silly",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "281": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "result#0",
        "is_even#0",
        "a#0"
      ]
    },
    "283": {
      "op": "b silly3_after_if_else@3"
    }
  }
}