#pragma version 8

// test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
main_block@0:
        txna ApplicationArgs 0
        txn NumAppArgs
        int 1
        >
        bz main_bool_false@3

main_and_contd@1:
        txna ApplicationArgs 1
        btoi
        int 0
        >
        bz main_bool_false@3

main_bool_true@2:
        int 1
        b main_bool_merge@4

main_bool_false@3:
        int 0

main_bool_merge@4:
        bz main_else_body@12

main_if_body@5:
        dup
        byte "uint"
        ==
        bz main_else_body@7

main_if_body@6:
        int 1
        int 0
        callsub test_uint_undefined
        int 10
        ==
        assert
        int 0
        int 1
        callsub test_uint_undefined
        int 8
        ==
        assert
        b main_after_if_else@19

main_else_body@7:
        dup
        byte "bytes"
        ==
        bz main_else_body@9

main_if_body@8:
        int 1
        int 0
        callsub test_bytes_undefined
        byte 0x0a
        b==
        assert
        int 0
        int 1
        callsub test_bytes_undefined
        byte 0x08
        b==
        assert
        b main_after_if_else@19

main_else_body@9:
        int 1
        int 0
        callsub test_mixed_undefined
        byte 0x0a
        b==
        assert
        int 0
        int 1
        callsub test_mixed_undefined
        byte 0x08
        b==
        assert
        b main_after_if_else@19

main_else_body@12:
        dup
        byte "uint"
        ==
        bz main_else_body@14

main_if_body@13:
        int 1
        int 1
        callsub test_uint_undefined
        int 8
        ==
        assert
        int 0
        int 0
        callsub test_uint_undefined
        int 10
        ==
        assert
        b main_after_if_else@19

main_else_body@14:
        dup
        byte "bytes"
        ==
        bz main_else_body@16

main_if_body@15:
        int 1
        int 1
        callsub test_bytes_undefined
        byte 0x08
        b==
        assert
        int 0
        int 0
        callsub test_bytes_undefined
        byte 0x0a
        b==
        assert
        b main_after_if_else@19

main_else_body@16:
        int 1
        int 1
        callsub test_mixed_undefined
        byte 0x08
        b==
        assert
        int 0
        int 0
        callsub test_mixed_undefined
        byte 0x0a
        b==
        assert

main_after_if_else@19:
        int 1
        return


// test_cases.undefined_phi_args.baddie.test_uint_undefined(x#0: uint64, y#0: uint64) -> uint64:
test_uint_undefined:
        proto 2 1
        byte ""
        dup

test_uint_undefined_block@0:
        frame_dig -2
        bz test_uint_undefined_after_if_else@2

test_uint_undefined_if_body@1:
        int 7
        frame_bury 0

test_uint_undefined_after_if_else@2:
        frame_dig -2
        bz test_uint_undefined_else_body@4

test_uint_undefined_if_body@3:
        int 11
        frame_bury 1
        b test_uint_undefined_after_if_else@5

test_uint_undefined_else_body@4:
        int 11
        frame_bury 1

test_uint_undefined_after_if_else@5:
        frame_dig -1
        bz test_uint_undefined_else_body@7

test_uint_undefined_if_body@6:
        frame_dig 0
        int 1
        +
        b test_uint_undefined_after_if_else@8

test_uint_undefined_else_body@7:
        frame_dig 1
        int 1
        -

test_uint_undefined_after_if_else@8:
        frame_bury 0
        retsub


// test_cases.undefined_phi_args.baddie.test_bytes_undefined(x#0: uint64, y#0: uint64) -> bytes:
test_bytes_undefined:
        proto 2 1
        int 0
        dup

test_bytes_undefined_block@0:
        frame_dig -2
        bz test_bytes_undefined_after_if_else@2

test_bytes_undefined_if_body@1:
        byte 0x07
        frame_bury 0

test_bytes_undefined_after_if_else@2:
        frame_dig -2
        bz test_bytes_undefined_else_body@4

test_bytes_undefined_if_body@3:
        byte 0x0b
        frame_bury 1
        b test_bytes_undefined_after_if_else@5

test_bytes_undefined_else_body@4:
        byte 0x0b
        frame_bury 1

test_bytes_undefined_after_if_else@5:
        frame_dig -1
        bz test_bytes_undefined_else_body@7

test_bytes_undefined_if_body@6:
        frame_dig 0
        byte 0x01
        b+
        b test_bytes_undefined_after_if_else@8

test_bytes_undefined_else_body@7:
        frame_dig 1
        byte 0x01
        b-

test_bytes_undefined_after_if_else@8:
        frame_bury 0
        retsub


// test_cases.undefined_phi_args.baddie.test_mixed_undefined(x#0: uint64, y#0: uint64) -> bytes:
test_mixed_undefined:
        proto 2 1
        int 0
        byte ""

test_mixed_undefined_block@0:
        frame_dig -2
        bz test_mixed_undefined_after_if_else@2

test_mixed_undefined_if_body@1:
        int 7
        frame_bury 1

test_mixed_undefined_after_if_else@2:
        frame_dig -2
        bz test_mixed_undefined_else_body@4

test_mixed_undefined_if_body@3:
        byte 0x0b
        frame_bury 0
        b test_mixed_undefined_after_if_else@5

test_mixed_undefined_else_body@4:
        byte 0x0b
        frame_bury 0

test_mixed_undefined_after_if_else@5:
        frame_dig -1
        bz test_mixed_undefined_else_body@7

test_mixed_undefined_if_body@6:
        frame_dig 1
        itob
        byte 0x01
        b+
        b test_mixed_undefined_after_if_else@8

test_mixed_undefined_else_body@7:
        frame_dig 0
        byte 0x01
        b-

test_mixed_undefined_after_if_else@8:
        frame_bury 0
        retsub

