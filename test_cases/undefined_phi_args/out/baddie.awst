contract Baddie
{
  approval_program(): bool
  {
    test_case: bytes = txna<ApplicationArgs, 0>()
    invert_second_condition: bool = txn<NumAppArgs>() > 1u and btoi(txna<ApplicationArgs, 1>()) > 0u
    if (invert_second_condition) {
      if (test_case == hex<"75696E74">) {
        assert(test_cases.undefined_phi_args.baddie::test_uint_undefined(true, false) == 10u)
        assert(test_cases.undefined_phi_args.baddie::test_uint_undefined(false, true) == 8u)
      } else {
        if (test_case == hex<"6279746573">) {
          assert(test_cases.undefined_phi_args.baddie::test_bytes_undefined(true, false) == 10n)
          assert(test_cases.undefined_phi_args.baddie::test_bytes_undefined(false, true) == 8n)
        } else {
          assert(test_cases.undefined_phi_args.baddie::test_mixed_undefined(true, false) == 10n)
          assert(test_cases.undefined_phi_args.baddie::test_mixed_undefined(false, true) == 8n)
        }
      }
    } else {
      if (test_case == hex<"75696E74">) {
        assert(test_cases.undefined_phi_args.baddie::test_uint_undefined(true, true) == 8u)
        assert(test_cases.undefined_phi_args.baddie::test_uint_undefined(false, false) == 10u)
      } else {
        if (test_case == hex<"6279746573">) {
          assert(test_cases.undefined_phi_args.baddie::test_bytes_undefined(true, true) == 8n)
          assert(test_cases.undefined_phi_args.baddie::test_bytes_undefined(false, false) == 10n)
        } else {
          assert(test_cases.undefined_phi_args.baddie::test_mixed_undefined(true, true) == 8n)
          assert(test_cases.undefined_phi_args.baddie::test_mixed_undefined(false, false) == 10n)
        }
      }
    }
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine test_uint_undefined(x: bool, y: bool): uint64
{
  if (x) {
    a: uint64 = 7u
  }
  if (x) {
    b: uint64 = 11u
  } else {
    b: uint64 = 11u
  }
  if (y) {
    c: uint64 = a + 1u
  } else {
    c: uint64 = b - 1u
  }
  return c
}

subroutine test_bytes_undefined(x: bool, y: bool): biguint
{
  if (x) {
    a: biguint = 7n
  }
  if (x) {
    b: biguint = 11n
  } else {
    b: biguint = 11n
  }
  if (y) {
    c: biguint = a b+ 1n
  } else {
    c: biguint = b b- 1n
  }
  return c
}

subroutine test_mixed_undefined(x: bool, y: bool): biguint
{
  if (x) {
    a: uint64 = 7u
  }
  if (x) {
    b: biguint = 11n
  } else {
    b: biguint = 11n
  }
  if (y) {
    c: biguint = itob(a) b+ 1n
  } else {
    c: biguint = b b- 1n
  }
  return c
}