#pragma version 10
#pragma typetrack false

// test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
main:
    intcblock 1 0 10 8
    bytecblock 0x0a 0x08 0x75696e74 0x6279746573
    // undefined_phi_args/baddie.py:6
    // test_case = op.Txn.application_args(0)
    txna ApplicationArgs 0
    // undefined_phi_args/baddie.py:8
    // op.Txn.num_app_args > 1 and op.btoi(op.Txn.application_args(1)) > 0
    txn NumAppArgs
    intc_0 // 1
    >
    bz bool_false@3
    txna ApplicationArgs 1
    btoi
    bz bool_false@3
    intc_0 // 1

bool_merge@4:
    // undefined_phi_args/baddie.py:11
    // if invert_second_condition:
    bz else_body@12
    // undefined_phi_args/baddie.py:12
    // if test_case == b"uint":
    dup
    bytec_2 // 0x75696e74
    ==
    bz else_body@7
    // undefined_phi_args/baddie.py:13
    // assert test_uint_undefined(True, False) == 10
    intc_0 // 1
    intc_1 // 0
    callsub test_uint_undefined
    intc_2 // 10
    ==
    assert
    // undefined_phi_args/baddie.py:14
    // assert test_uint_undefined(False, True) == 8  # should fail
    intc_1 // 0
    intc_0 // 1
    callsub test_uint_undefined
    intc_3 // 8
    ==
    assert

after_if_else@19:
    // undefined_phi_args/baddie.py:31
    // return True
    intc_0 // 1
    return

else_body@7:
    // undefined_phi_args/baddie.py:15
    // elif test_case == b"bytes":
    dup
    bytec_3 // 0x6279746573
    ==
    bz else_body@9
    // undefined_phi_args/baddie.py:16
    // assert test_bytes_undefined(True, False) == 10
    intc_0 // 1
    intc_1 // 0
    callsub test_bytes_undefined
    bytec_0 // 0x0a
    b==
    assert
    // undefined_phi_args/baddie.py:17
    // assert test_bytes_undefined(False, True) == 8  # should fail
    intc_1 // 0
    intc_0 // 1
    callsub test_bytes_undefined
    bytec_1 // 0x08
    b==
    assert
    b after_if_else@19

else_body@9:
    // undefined_phi_args/baddie.py:19
    // assert test_mixed_undefined(True, False) == 10
    intc_0 // 1
    intc_1 // 0
    callsub test_mixed_undefined
    bytec_0 // 0x0a
    b==
    assert
    // undefined_phi_args/baddie.py:20
    // assert test_mixed_undefined(False, True) == 8  # should fail
    intc_1 // 0
    intc_0 // 1
    callsub test_mixed_undefined
    bytec_1 // 0x08
    b==
    assert
    b after_if_else@19

else_body@12:
    // undefined_phi_args/baddie.py:22
    // if test_case == b"uint":
    dup
    bytec_2 // 0x75696e74
    ==
    bz else_body@14
    // undefined_phi_args/baddie.py:23
    // assert test_uint_undefined(True, True) == 8
    intc_0 // 1
    dup
    callsub test_uint_undefined
    intc_3 // 8
    ==
    assert
    // undefined_phi_args/baddie.py:24
    // assert test_uint_undefined(False, False) == 10
    intc_1 // 0
    dup
    callsub test_uint_undefined
    intc_2 // 10
    ==
    assert
    b after_if_else@19

else_body@14:
    // undefined_phi_args/baddie.py:25
    // elif test_case == b"bytes":
    dup
    bytec_3 // 0x6279746573
    ==
    bz else_body@16
    // undefined_phi_args/baddie.py:26
    // assert test_bytes_undefined(True, True) == 8
    intc_0 // 1
    dup
    callsub test_bytes_undefined
    bytec_1 // 0x08
    b==
    assert
    // undefined_phi_args/baddie.py:27
    // assert test_bytes_undefined(False, False) == 10
    intc_1 // 0
    dup
    callsub test_bytes_undefined
    bytec_0 // 0x0a
    b==
    assert
    b after_if_else@19

else_body@16:
    // undefined_phi_args/baddie.py:29
    // assert test_mixed_undefined(True, True) == 8
    intc_0 // 1
    dup
    callsub test_mixed_undefined
    bytec_1 // 0x08
    b==
    assert
    // undefined_phi_args/baddie.py:30
    // assert test_mixed_undefined(False, False) == 10
    intc_1 // 0
    dup
    callsub test_mixed_undefined
    bytec_0 // 0x0a
    b==
    assert
    b after_if_else@19

bool_false@3:
    intc_1 // 0
    b bool_merge@4


// test_cases.undefined_phi_args.baddie.test_uint_undefined(x: uint64, y: uint64) -> uint64:
test_uint_undefined:
    // undefined_phi_args/baddie.py:37-38
    // @subroutine
    // def test_uint_undefined(x: bool, y: bool) -> UInt64:
    proto 2 1
    pushbytes ""
    // undefined_phi_args/baddie.py:39
    // if x:
    frame_dig -2
    bz test_uint_undefined_after_if_else@2
    // undefined_phi_args/baddie.py:40
    // a = UInt64(7)
    pushint 7 // 7
    frame_bury 0

test_uint_undefined_after_if_else@2:
    // undefined_phi_args/baddie.py:45
    // if y:
    frame_dig -1
    bz test_uint_undefined_else_body@7
    // undefined_phi_args/baddie.py:46
    // c = a + 1  # ðŸ’¥
    frame_dig 0
    intc_0 // 1
    +

test_uint_undefined_after_if_else@8:
    // undefined_phi_args/baddie.py:49
    // return c
    swap
    retsub

test_uint_undefined_else_body@7:
    // undefined_phi_args/baddie.py:48
    // c = b - 1
    intc_2 // 10
    b test_uint_undefined_after_if_else@8


// test_cases.undefined_phi_args.baddie.test_bytes_undefined(x: uint64, y: uint64) -> bytes:
test_bytes_undefined:
    // undefined_phi_args/baddie.py:52-53
    // @subroutine
    // def test_bytes_undefined(x: bool, y: bool) -> BigUInt:
    proto 2 1
    intc_1 // 0
    // undefined_phi_args/baddie.py:54
    // if x:
    frame_dig -2
    bz test_bytes_undefined_after_if_else@2
    // undefined_phi_args/baddie.py:55
    // a = BigUInt(7)
    pushbytes 0x07
    frame_bury 0

test_bytes_undefined_after_if_else@2:
    // undefined_phi_args/baddie.py:60
    // if y:
    frame_dig -1
    bz test_bytes_undefined_else_body@7
    // undefined_phi_args/baddie.py:61
    // c = a + 1  # ðŸ’¥
    frame_dig 0
    pushbytes 0x01
    b+

test_bytes_undefined_after_if_else@8:
    // undefined_phi_args/baddie.py:64
    // return c
    swap
    retsub

test_bytes_undefined_else_body@7:
    // undefined_phi_args/baddie.py:63
    // c = b - 1
    bytec_0 // 0x0a
    b test_bytes_undefined_after_if_else@8


// test_cases.undefined_phi_args.baddie.test_mixed_undefined(x: uint64, y: uint64) -> bytes:
test_mixed_undefined:
    // undefined_phi_args/baddie.py:67-68
    // @subroutine
    // def test_mixed_undefined(x: bool, y: bool) -> BigUInt:
    proto 2 1
    pushbytes ""
    // undefined_phi_args/baddie.py:69
    // if x:
    frame_dig -2
    bz test_mixed_undefined_after_if_else@2
    // undefined_phi_args/baddie.py:70
    // a = UInt64(7)
    pushint 7 // 7
    frame_bury 0

test_mixed_undefined_after_if_else@2:
    // undefined_phi_args/baddie.py:75
    // if y:
    frame_dig -1
    bz test_mixed_undefined_else_body@7
    // undefined_phi_args/baddie.py:76
    // c = BigUInt(a) + BigUInt(1)  # ðŸ’¥
    frame_dig 0
    itob
    pushbytes 0x01
    b+

test_mixed_undefined_after_if_else@8:
    // undefined_phi_args/baddie.py:79
    // return c
    swap
    retsub

test_mixed_undefined_else_body@7:
    // undefined_phi_args/baddie.py:78
    // c = b - 1
    bytec_0 // 0x0a
    b test_mixed_undefined_after_if_else@8
