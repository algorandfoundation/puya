main test_cases.undefined_phi_args.baddie.Baddie.approval_program:
    block@0: // L5
        let test_case#0: bytes = (txna ApplicationArgs 0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: bool = (> tmp%1#0 1u)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // and_contd_L8
        let tmp%3#0: bytes = (txna ApplicationArgs 1)
        let tmp%4#0: uint64 = (btoi tmp%3#0)
        let tmp%5#0: bool = (> tmp%4#0 0u)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // bool_true_L8
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L8
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L8
        let invert_second_condition#0: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        goto invert_second_condition#0 ? block@5 : block@12
    block@5: // if_body_L12
        let tmp%6#0: bool = (== test_case#0 0x75696e74)
        goto tmp%6#0 ? block@6 : block@7
    block@6: // if_body_L13
        let tmp%7#0: uint64 = test_cases.undefined_phi_args.baddie.test_uint_undefined(1u, 0u)
        let tmp%8#0: bool = (== tmp%7#0 10u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = test_cases.undefined_phi_args.baddie.test_uint_undefined(0u, 1u)
        let tmp%10#0: bool = (== tmp%9#0 8u)
        (assert tmp%10#0)
        goto block@19
    block@7: // else_body_L15
        let tmp%11#0: bool = (== test_case#0 0x6279746573)
        goto tmp%11#0 ? block@8 : block@9
    block@8: // if_body_L16
        let tmp%12#0: biguint = test_cases.undefined_phi_args.baddie.test_bytes_undefined(1u, 0u)
        let tmp%13#0: bool = (b== tmp%12#0 10b)
        (assert tmp%13#0)
        let tmp%14#0: biguint = test_cases.undefined_phi_args.baddie.test_bytes_undefined(0u, 1u)
        let tmp%15#0: bool = (b== tmp%14#0 8b)
        (assert tmp%15#0)
        goto block@19
    block@9: // else_body_L19
        let tmp%16#0: biguint = test_cases.undefined_phi_args.baddie.test_mixed_undefined(1u, 0u)
        let tmp%17#0: bool = (b== tmp%16#0 10b)
        (assert tmp%17#0)
        let tmp%18#0: biguint = test_cases.undefined_phi_args.baddie.test_mixed_undefined(0u, 1u)
        let tmp%19#0: bool = (b== tmp%18#0 8b)
        (assert tmp%19#0)
        goto block@19
    block@12: // else_body_L22
        let tmp%20#0: bool = (== test_case#0 0x75696e74)
        goto tmp%20#0 ? block@13 : block@14
    block@13: // if_body_L23
        let tmp%21#0: uint64 = test_cases.undefined_phi_args.baddie.test_uint_undefined(1u, 1u)
        let tmp%22#0: bool = (== tmp%21#0 8u)
        (assert tmp%22#0)
        let tmp%23#0: uint64 = test_cases.undefined_phi_args.baddie.test_uint_undefined(0u, 0u)
        let tmp%24#0: bool = (== tmp%23#0 10u)
        (assert tmp%24#0)
        goto block@19
    block@14: // else_body_L25
        let tmp%25#0: bool = (== test_case#0 0x6279746573)
        goto tmp%25#0 ? block@15 : block@16
    block@15: // if_body_L26
        let tmp%26#0: biguint = test_cases.undefined_phi_args.baddie.test_bytes_undefined(1u, 1u)
        let tmp%27#0: bool = (b== tmp%26#0 8b)
        (assert tmp%27#0)
        let tmp%28#0: biguint = test_cases.undefined_phi_args.baddie.test_bytes_undefined(0u, 0u)
        let tmp%29#0: bool = (b== tmp%28#0 10b)
        (assert tmp%29#0)
        goto block@19
    block@16: // else_body_L29
        let tmp%30#0: biguint = test_cases.undefined_phi_args.baddie.test_mixed_undefined(1u, 1u)
        let tmp%31#0: bool = (b== tmp%30#0 8b)
        (assert tmp%31#0)
        let tmp%32#0: biguint = test_cases.undefined_phi_args.baddie.test_mixed_undefined(0u, 0u)
        let tmp%33#0: bool = (b== tmp%32#0 10b)
        (assert tmp%33#0)
        goto block@19
    block@19: // after_if_else_L11
        return 1u

subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined(x: bool, y: bool) -> uint64:
    block@0: // L37
        let a#3: uint64 = undefined
        goto x#0 ? block@1 : block@2
    block@1: // if_body_L40
        let a#0: uint64 = 7u
        goto block@2
    block@2: // after_if_else_L39
        let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1)
        goto block@5
    block@5: // after_if_else_L41
        goto y#0 ? block@6 : block@7
    block@6: // if_body_L46
        let c#0: uint64 = (+ a#2 1u)
        goto block@8
    block@7: // else_body_L48
        let c#1: uint64 = 10u
        goto block@8
    block@8: // after_if_else_L45
        let c#2: uint64 = φ(c#0 <- block@6, c#1 <- block@7)
        return c#2

subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined(x: bool, y: bool) -> biguint:
    block@0: // L52
        let a#3: biguint = undefined
        goto x#0 ? block@1 : block@2
    block@1: // if_body_L55
        let a#0: biguint = 7b
        goto block@2
    block@2: // after_if_else_L54
        let a#2: biguint = φ(a#3 <- block@0, a#0 <- block@1)
        goto block@5
    block@5: // after_if_else_L56
        goto y#0 ? block@6 : block@7
    block@6: // if_body_L61
        let c#0: biguint = (b+ a#2 1b)
        goto block@8
    block@7: // else_body_L63
        let c#1: biguint = 10b
        goto block@8
    block@8: // after_if_else_L60
        let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7)
        return c#2

subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined(x: bool, y: bool) -> biguint:
    block@0: // L67
        let a#3: uint64 = undefined
        goto x#0 ? block@1 : block@2
    block@1: // if_body_L70
        let a#0: uint64 = 7u
        goto block@2
    block@2: // after_if_else_L69
        let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1)
        goto block@5
    block@5: // after_if_else_L71
        goto y#0 ? block@6 : block@7
    block@6: // if_body_L76
        let tmp%0#0: biguint = (itob a#2)
        let c#0: biguint = (b+ tmp%0#0 1b)
        goto block@8
    block@7: // else_body_L78
        let c#1: biguint = 10b
        goto block@8
    block@8: // after_if_else_L75
        let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7)
        return c#2