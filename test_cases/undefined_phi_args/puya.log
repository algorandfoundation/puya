debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['undefined_phi_args'], output_awst=True, output_awst_json=False, output_source_annotations_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing undefined_phi_args/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: uint64 = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: biguint = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: biguint = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: biguint = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: biguint = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: biguint = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: biguint = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: biguint = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: biguint = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: biguint = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: biguint = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: biguint = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: biguint = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: biguint = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: biguint = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: biguint = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: biguint = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.000.ssa.ir
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.clear.000.ssa.ir
debug: optimizing approval program of test_cases.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, invert_second_condition#0
debug: selected invert_second_condition#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@10
debug: Removed empty block: block@11
debug: Removed empty block: block@17
debug: Removed empty block: block@18
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (- 11u 1u) to 10u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b- 11b 1b) to 10b
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b- 11b 1b) to 10b
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.001.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#0
debug: Removing unused variable b#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3
debug: replaced goto x#0 ? block@5 : block@5 with goto block@5
debug: Removed empty block: block@4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#0
debug: Removing unused variable b#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3
debug: replaced goto x#0 ? block@5 : block@5 with goto block@5
debug: Removed empty block: block@4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#0
debug: Removing unused variable b#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3
debug: replaced goto x#0 ? block@5 : block@5 with goto block@5
debug: Removed empty block: block@4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.002.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5 with block@2 in block@7
debug: Replaced predecessor block@5 with block@2 in block@6
debug: Merged linear block@5 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5 with block@2 in block@7
debug: Replaced predecessor block@5 with block@2 in block@6
debug: Merged linear block@5 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5 with block@2 in block@7
debug: Replaced predecessor block@5 with block@2 in block@6
debug: Merged linear block@5 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.003.ssa.opt.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 4, ending loop
debug: optimizing clear program of test_cases.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.undefined_phi_args.baddie.Baddie
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.100.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.undefined_phi_args.baddie.Baddie
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.clear.100.ssa.array.ir
debug: optimizing approval program of test_cases.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.undefined_phi_args.baddie.Baddie
undefined_phi_args/baddie.py:5 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.Baddie.approval_program, []
undefined_phi_args/baddie.py:37 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.test_uint_undefined, []
undefined_phi_args/baddie.py:52 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.test_bytes_undefined, []
undefined_phi_args/baddie.py:67 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.test_mixed_undefined, []
debug: Slot allocation not required
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.300.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.undefined_phi_args.baddie.Baddie
undefined_phi_args/baddie.py:33 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.clear.300.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing invert_second_condition#0 with [invert_second_condition#1]
debug: Coalescing resulted in 5 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Performing post-SSA optimizations at level 1
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_uint_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#3, a#6, a#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 14 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Performing post-SSA optimizations at level 1
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_bytes_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#3, a#6, a#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 14 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Performing post-SSA optimizations at level 1
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_mixed_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#3, a#6, a#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 14 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Performing post-SSA optimizations at level 1
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to undefined_phi_args/out/Baddie.ir/Baddie.clear.400.destructured.ir
debug: Inserted main_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_block@0.ops[8]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_block@0.ops[10]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_and_contd@1.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_and_contd@1.ops[3]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_and_contd@1.ops[5]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_and_contd@1.ops[7]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_bool_true@2.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_true@2.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_false@3.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_false@3.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_if_body@5.ops[3]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_if_body@5.ops[5]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_if_body@6.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_if_body@6.ops[5]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_if_body@6.ops[8]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_if_body@6.ops[10]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_if_body@6.ops[15]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_if_body@6.ops[17]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_if_body@6.ops[20]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_if_body@6.ops[22]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_else_body@7.ops[3]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_else_body@7.ops[5]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@8.ops[3]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_if_body@8.ops[5]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_if_body@8.ops[8]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_if_body@8.ops[10]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_if_body@8.ops[15]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_if_body@8.ops[17]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_if_body@8.ops[20]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_if_body@8.ops[22]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_else_body@9.ops[3]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_else_body@9.ops[5]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_else_body@9.ops[8]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_else_body@9.ops[10]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_else_body@9.ops[15]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_else_body@9.ops[17]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_else_body@9.ops[20]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@9.ops[22]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_else_body@12.ops[3]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_else_body@12.ops[5]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_if_body@13.ops[3]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_if_body@13.ops[5]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_if_body@13.ops[8]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_if_body@13.ops[10]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_if_body@13.ops[15]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_if_body@13.ops[17]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_if_body@13.ops[20]: 'l-store-copy tmp%23#0 0'
debug: Replaced main_if_body@13.ops[22]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main_else_body@14.ops[3]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_else_body@14.ops[5]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_if_body@15.ops[3]: 'l-store-copy tmp%25#0 0'
debug: Replaced main_if_body@15.ops[5]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted main_if_body@15.ops[8]: 'l-store-copy tmp%26#0 0'
debug: Replaced main_if_body@15.ops[10]: 'v-load tmp%26#0' with 'l-load tmp%26#0'
debug: Inserted main_if_body@15.ops[15]: 'l-store-copy tmp%27#0 0'
debug: Replaced main_if_body@15.ops[17]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted main_if_body@15.ops[20]: 'l-store-copy tmp%28#0 0'
debug: Replaced main_if_body@15.ops[22]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted main_else_body@16.ops[3]: 'l-store-copy tmp%29#0 0'
debug: Replaced main_else_body@16.ops[5]: 'v-load tmp%29#0' with 'l-load tmp%29#0'
debug: Inserted main_else_body@16.ops[8]: 'l-store-copy tmp%30#0 0'
debug: Replaced main_else_body@16.ops[10]: 'v-load tmp%30#0' with 'l-load tmp%30#0'
debug: Inserted main_else_body@16.ops[15]: 'l-store-copy tmp%31#0 0'
debug: Replaced main_else_body@16.ops[17]: 'v-load tmp%31#0' with 'l-load tmp%31#0'
debug: Inserted main_else_body@16.ops[20]: 'l-store-copy tmp%32#0 0'
debug: Replaced main_else_body@16.ops[22]: 'v-load tmp%32#0' with 'l-load tmp%32#0'
debug: Inserted test_mixed_undefined_if_body@6.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_mixed_undefined_if_body@6.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Found 8 edge set/s for test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Allocated 1 variable/s to x-stack: invert_second_condition#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: invert_second_condition#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: invert_second_condition#0
debug: Found 3 edge set/s for test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_uint_undefined_if_body@6 -> test_uint_undefined_after_if_else@8: c#0
debug: shared x-stack for test_uint_undefined_else_body@7 -> test_uint_undefined_after_if_else@8: c#0
debug: Found 3 edge set/s for test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_bytes_undefined_if_body@6 -> test_bytes_undefined_after_if_else@8: c#0
debug: shared x-stack for test_bytes_undefined_else_body@7 -> test_bytes_undefined_after_if_else@8: c#0
debug: Found 3 edge set/s for test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_mixed_undefined_if_body@6 -> test_mixed_undefined_after_if_else@8: c#0
debug: shared x-stack for test_mixed_undefined_else_body@7 -> test_mixed_undefined_after_if_else@8: c#0
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack on first store: ['test_case#0']
debug: test_cases.undefined_phi_args.baddie.test_uint_undefined f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.test_uint_undefined f-stack on first store: ['a#0']
debug: test_cases.undefined_phi_args.baddie.test_bytes_undefined f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.test_bytes_undefined f-stack on first store: ['a#0']
debug: test_cases.undefined_phi_args.baddie.test_mixed_undefined f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.test_mixed_undefined f-stack on first store: ['a#0']
undefined_phi_args/baddie.py:5 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
undefined_phi_args/baddie.py:37 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.test_uint_undefined(x: uint64, y: uint64) -> uint64:
undefined_phi_args/baddie.py:52 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.test_bytes_undefined(x: uint64, y: uint64) -> bytes:
undefined_phi_args/baddie.py:67 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.test_mixed_undefined(x: uint64, y: uint64) -> bytes:
undefined_phi_args/baddie.py:5 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_and_contd@1 into main
debug: inlining single reference block main_bool_true@2 into main
debug: inlining single reference block main_if_body@5 into main_bool_merge@4
debug: inlining single reference block main_if_body@6 into main_bool_merge@4
debug: inlining single reference block main_if_body@8 into main_else_body@7
debug: inlining single reference block main_if_body@13 into main_else_body@12
debug: inlining single reference block main_if_body@15 into main_else_body@14
debug: removing explicit jump to fall-through block main_bool_merge@4
debug: removing explicit jump to fall-through block main_after_if_else@19
undefined_phi_args/baddie.py:37 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.test_uint_undefined(x: uint64, y: uint64) -> uint64:
debug: inlining single reference block test_uint_undefined_block@0 into test_uint_undefined
debug: inlining single reference block test_uint_undefined_if_body@1 into test_uint_undefined
debug: inlining single reference block test_uint_undefined_if_body@6 into test_uint_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_uint_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_uint_undefined_after_if_else@8
undefined_phi_args/baddie.py:52 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.test_bytes_undefined(x: uint64, y: uint64) -> bytes:
debug: inlining single reference block test_bytes_undefined_block@0 into test_bytes_undefined
debug: inlining single reference block test_bytes_undefined_if_body@1 into test_bytes_undefined
debug: inlining single reference block test_bytes_undefined_if_body@6 into test_bytes_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_bytes_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_bytes_undefined_after_if_else@8
undefined_phi_args/baddie.py:67 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.test_mixed_undefined(x: uint64, y: uint64) -> bytes:
debug: inlining single reference block test_mixed_undefined_block@0 into test_mixed_undefined
debug: inlining single reference block test_mixed_undefined_if_body@1 into test_mixed_undefined
debug: inlining single reference block test_mixed_undefined_if_body@6 into test_mixed_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_mixed_undefined_after_if_else@2
debug: removing explicit jump to fall-through block test_mixed_undefined_after_if_else@8
undefined_phi_args/baddie.py:33 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.Baddie.clear_state_program() -> uint64:
undefined_phi_args/baddie.py:33 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.Baddie.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing undefined_phi_args/out/Baddie.approval.teal
info: Writing undefined_phi_args/out/Baddie.clear.teal
info: Writing undefined_phi_args/out/Baddie.approval.bin
info: Writing undefined_phi_args/out/Baddie.clear.bin
info: Writing undefined_phi_args/out/Baddie.approval.stats.txt
info: Writing undefined_phi_args/out/Baddie.clear.stats.txt
info: Writing undefined_phi_args/out/Baddie.approval.puya.map
info: Writing undefined_phi_args/out/Baddie.clear.puya.map