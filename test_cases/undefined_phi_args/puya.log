debug: PuyaOptions(paths=['undefined_phi_args'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@6: // for_header_L105
debug: Terminated block@6: // for_header_L105
debug: Sealing block@None: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@6: // for_header_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L105
debug: Terminated block@7: // for_body_L105
debug: Sealing block@8: // for_footer_L105
debug: Sealing block@None: // after_for_L105
debug: Terminated block@8: // for_footer_L105
debug: Sealing block@6: // for_header_L105
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5, range_item%10#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#6: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#6: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3) in block@3: // ternary_true_L105
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6
debug: Deleting Phi assignment: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4)
debug: Replaced trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6 in current definition for 1 blocks
debug: Added source#6 to Phi node: let source#3: bytes = φ(source#6 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#4 to Phi node: let source#3: bytes = φ(source#6 <- block@5, source#4 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Terminated block@9: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L246
debug: Terminated block@4: // for_header_L246
debug: Sealing block@None: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L246
debug: Terminated block@5: // for_body_L246
debug: Sealing block@6: // for_footer_L246
debug: Sealing block@None: // after_for_L246
debug: Terminated block@6: // for_footer_L246
debug: Sealing block@4: // for_header_L246
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L241
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3) in block@3: // after_if_else_L241
debug: Added tail_cursor#3 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3, tail_cursor#3 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0
debug: Deleting Phi assignment: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#2 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L241
debug: Added header_cursor#2 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@6) in block@6: // for_footer_L246
debug: Terminated block@7: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Sealing block@None: // if_body_L39
debug: Sealing block@None: // else_body_L39
debug: Terminated block@1: // if_body_L39
debug: Sealing block@2: // after_if_else_L39
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L39
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L38
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L39
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L39
debug: Sealing block@None: // if_body_L41
debug: Sealing block@None: // else_body_L41
debug: Terminated block@3: // if_body_L41
debug: Terminated block@4: // else_body_L41
debug: Sealing block@5: // after_if_else_L41
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L41
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L39
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L38
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L39
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L41
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L41
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L41
debug: Sealing block@None: // if_body_L45
debug: Sealing block@None: // else_body_L45
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5: // after_if_else_L41
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L39
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0: // L38
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0: // L38
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L39
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3: // if_body_L41
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L41
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L45
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@5: // after_if_else_L41
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@3) in block@3: // if_body_L41
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L41
debug: Terminated block@7: // else_body_L45
debug: Sealing block@8: // after_if_else_L45
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@8: // after_if_else_L45
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@6) in block@6: // if_body_L45
debug: Added c#1 to Phi node: let c#2: uint64 = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L45
debug: Terminated block@8: // after_if_else_L45
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@None: // if_body_L58
debug: Sealing block@None: // else_body_L58
debug: Terminated block@1: // if_body_L58
debug: Sealing block@2: // after_if_else_L58
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L58
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L57
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L58
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L58
debug: Sealing block@None: // if_body_L60
debug: Sealing block@None: // else_body_L60
debug: Terminated block@3: // if_body_L60
debug: Terminated block@4: // else_body_L60
debug: Sealing block@5: // after_if_else_L60
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L60
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L58
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L57
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L58
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L60
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L60
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L60
debug: Sealing block@None: // if_body_L64
debug: Sealing block@None: // else_body_L64
debug: Created Phi assignment: let a#1: bytes = undefined while trying to resolve 'a' in block@5: // after_if_else_L60
debug: Created Phi assignment: let a#2: bytes = undefined while trying to resolve 'a' in block@2: // after_if_else_L58
debug: Created Phi assignment: let a#3: bytes = undefined while trying to resolve 'a' in block@0: // L57
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: bytes = φ(a#3 <- block@0) in block@0: // L57
debug: Added a#0 to Phi node: let a#2: bytes = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L58
debug: Added a#2 to Phi node: let a#1: bytes = φ(a#2 <- block@3) in block@3: // if_body_L60
debug: Added a#2 to Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L60
debug: Replacing trivial Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L64
debug: Created Phi assignment: let b#2: bytes = undefined while trying to resolve 'b' in block@5: // after_if_else_L60
debug: Added b#0 to Phi node: let b#2: bytes = φ(b#0 <- block@3) in block@3: // if_body_L60
debug: Added b#1 to Phi node: let b#2: bytes = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L60
debug: Terminated block@7: // else_body_L64
debug: Sealing block@8: // after_if_else_L64
debug: Created Phi assignment: let c#2: bytes = undefined while trying to resolve 'c' in block@8: // after_if_else_L64
debug: Added c#0 to Phi node: let c#2: bytes = φ(c#0 <- block@6) in block@6: // if_body_L64
debug: Added c#1 to Phi node: let c#2: bytes = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L64
debug: Terminated block@8: // after_if_else_L64
debug: Sealing block@0: // L76
debug: Terminated block@0: // L76
debug: Sealing block@None: // if_body_L77
debug: Sealing block@None: // else_body_L77
debug: Terminated block@1: // if_body_L77
debug: Sealing block@2: // after_if_else_L77
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L77
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L76
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L77
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L77
debug: Sealing block@None: // if_body_L79
debug: Sealing block@None: // else_body_L79
debug: Terminated block@3: // if_body_L79
debug: Terminated block@4: // else_body_L79
debug: Sealing block@5: // after_if_else_L79
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L79
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L77
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L76
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L77
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L79
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L79
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L79
debug: Sealing block@None: // if_body_L83
debug: Sealing block@None: // else_body_L83
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5: // after_if_else_L79
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L77
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0: // L76
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0: // L76
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L77
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3: // if_body_L79
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L79
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L83
debug: Created Phi assignment: let b#2: bytes = undefined while trying to resolve 'b' in block@5: // after_if_else_L79
debug: Added b#0 to Phi node: let b#2: bytes = φ(b#0 <- block@3) in block@3: // if_body_L79
debug: Added b#1 to Phi node: let b#2: bytes = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L79
debug: Terminated block@7: // else_body_L83
debug: Sealing block@8: // after_if_else_L83
debug: Created Phi assignment: let c#2: bytes = undefined while trying to resolve 'c' in block@8: // after_if_else_L83
debug: Added c#0 to Phi node: let c#2: bytes = φ(c#0 <- block@6) in block@6: // if_body_L83
debug: Added c#1 to Phi node: let c#2: bytes = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L83
debug: Terminated block@8: // after_if_else_L83
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // and_contd_L8
debug: Terminated block@1: // and_contd_L8
debug: Sealing block@None: // bool_true_L8
debug: Sealing block@None: // bool_false_L8
debug: Terminated block@2: // bool_true_L8
debug: Terminated block@3: // bool_false_L8
debug: Sealing block@4: // bool_merge_L8
debug: Created Phi assignment: let and_result%5#2: uint64 = undefined while trying to resolve 'and_result%5' in block@4: // bool_merge_L8
debug: Added and_result%5#0 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2) in block@2: // bool_true_L8
debug: Added and_result%5#1 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2, and_result%5#1 <- block@3) in block@3: // bool_false_L8
debug: Terminated block@4: // bool_merge_L8
debug: Sealing block@None: // if_body_L11
debug: Sealing block@None: // else_body_L11
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4: // bool_merge_L8
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2: // bool_true_L8
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3: // bool_false_L8
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0: // L5
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1: // and_contd_L8
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3: // bool_false_L8
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5: // if_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@6: // if_body_L12
debug: Terminated block@7: // else_body_L12
debug: Sealing block@None: // if_body_L15
debug: Sealing block@None: // else_body_L15
debug: Terminated block@8: // if_body_L15
debug: Terminated block@9: // else_body_L15
debug: Sealing block@10: // after_if_else_L15
debug: Terminated block@10: // after_if_else_L15
debug: Sealing block@11: // after_if_else_L12
debug: Terminated block@11: // after_if_else_L12
debug: Terminated block@12: // else_body_L11
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@13: // if_body_L22
debug: Terminated block@14: // else_body_L22
debug: Sealing block@None: // if_body_L25
debug: Sealing block@None: // else_body_L25
debug: Terminated block@15: // if_body_L25
debug: Terminated block@16: // else_body_L25
debug: Sealing block@17: // after_if_else_L25
debug: Terminated block@17: // after_if_else_L25
debug: Sealing block@18: // after_if_else_L22
debug: Terminated block@18: // after_if_else_L22
debug: Sealing block@19: // after_if_else_L11
debug: Terminated block@19: // after_if_else_L11
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Output IR to undefined_phi_args/out/baddie_Baddie.ssa.ir
info: Optimizing test_cases.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%5#2, invert_second_condition#0
debug: Replacing {and_result%5#2} with invert_second_condition#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@10: // after_if_else_L15
debug: Removed empty block: block@17: // after_if_else_L25
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to undefined_phi_args/out/baddie_Baddie.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@11: // after_if_else_L12
debug: Removed empty block: block@18: // after_if_else_L22
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to undefined_phi_args/out/baddie_Baddie.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 3, ending loop
debug: Output IR to undefined_phi_args/out/baddie_Baddie.cssa.ir
debug: Removing Phis from test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Removing Phis from test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Removing Phis from test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Removing Phis from test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Removing Phis from test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Output IR to undefined_phi_args/out/baddie_Baddie.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Output IR to undefined_phi_args/out/baddie_Baddie.parallel_copies.ir
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%5#0 with [and_result%5#1]
debug: Coalescing invert_second_condition#0 with [invert_second_condition#1]
debug: Coalescing resulted in 5 replacement/s
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_uint_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_bytes_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.test_mixed_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to undefined_phi_args/out/baddie_Baddie.final.ir
debug: Inserted main_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_bool_true@2.ops[1]: 'store and_result%5#0 to l-stack (copy)'
debug: Replaced main_bool_true@2.ops[3]: 'load and_result%5#0' with 'load and_result%5#0 from l-stack (no copy)'
debug: Inserted main_bool_false@3.ops[1]: 'store and_result%5#0 to l-stack (copy)'
debug: Replaced main_bool_false@3.ops[3]: 'load and_result%5#0' with 'load and_result%5#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[5]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[3]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[5]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[8]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[10]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[15]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[17]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[20]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[22]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_else_body@7.ops[3]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_else_body@7.ops[5]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[3]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[5]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[8]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[10]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[15]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[17]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[20]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[22]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[3]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[5]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[8]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[10]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[15]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[17]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[20]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[22]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_else_body@12.ops[3]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_else_body@12.ops[5]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[3]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[5]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[8]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[10]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[15]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[17]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[20]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[22]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_else_body@14.ops[3]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_else_body@14.ops[5]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[3]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[5]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[8]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[10]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[15]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[17]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[20]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[22]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[3]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[5]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[8]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[10]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[15]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[17]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[20]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[22]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Found 8 edge set/s for test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Allocated 1 variable/s to x-stack: invert_second_condition#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: invert_second_condition#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: invert_second_condition#0
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack on first store: ['test_case#0']
debug: Found 5 edge set/s for test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_uint_undefined_if_body@6 -> test_uint_undefined_after_if_else@8: c#0
debug: shared x-stack for test_uint_undefined_else_body@7 -> test_uint_undefined_after_if_else@8: c#0
debug: test_cases.undefined_phi_args.baddie.test_uint_undefined f-stack entry: ['a#0', 'b#0']
debug: test_cases.undefined_phi_args.baddie.test_uint_undefined f-stack on first store: []
debug: Found 5 edge set/s for test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_bytes_undefined_if_body@6 -> test_bytes_undefined_after_if_else@8: c#0
debug: shared x-stack for test_bytes_undefined_else_body@7 -> test_bytes_undefined_after_if_else@8: c#0
debug: test_cases.undefined_phi_args.baddie.test_bytes_undefined f-stack entry: ['a#0', 'b#0']
debug: test_cases.undefined_phi_args.baddie.test_bytes_undefined f-stack on first store: []
debug: Inserted test_mixed_undefined_if_body@6.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_mixed_undefined_if_body@6.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 5 edge set/s for test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_mixed_undefined_if_body@6 -> test_mixed_undefined_after_if_else@8: c#0
debug: shared x-stack for test_mixed_undefined_else_body@7 -> test_mixed_undefined_after_if_else@8: c#0
debug: test_cases.undefined_phi_args.baddie.test_mixed_undefined f-stack entry: ['b#0', 'a#0']
debug: test_cases.undefined_phi_args.baddie.test_mixed_undefined f-stack on first store: []
info: Writing undefined_phi_args/out/baddie.approval.teal
info: Writing undefined_phi_args/out/baddie.approval.debug.teal
info: Writing undefined_phi_args/out/baddie.clear.teal
info: Writing undefined_phi_args/out/baddie.clear.debug.teal