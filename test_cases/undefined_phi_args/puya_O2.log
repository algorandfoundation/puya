debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['undefined_phi_args'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: uint64 = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: biguint = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: biguint = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: biguint = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: biguint = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: biguint = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: biguint = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: biguint = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: biguint = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: biguint = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: biguint = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: biguint = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: biguint = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let x#1: bool = undefined while trying to resolve 'x' in block@2
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0) in block@0
debug: Added x#0 to Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: bool = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let y#1: bool = undefined while trying to resolve 'y' in block@5
debug: Created Phi assignment: let y#2: bool = undefined while trying to resolve 'y' in block@2
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0) in block@0
debug: Added y#0 to Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: bool = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3) in block@3
debug: Added y#0 to Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) in block@4
debug: Replacing trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: bool = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Created Phi assignment: let b#2: biguint = undefined while trying to resolve 'b' in block@5
debug: Added b#0 to Phi node: let b#2: biguint = φ(b#0 <- block@3) in block@3
debug: Added b#1 to Phi node: let b#2: biguint = φ(b#0 <- block@3, b#1 <- block@4) in block@4
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let c#2: biguint = undefined while trying to resolve 'c' in block@8
debug: Added c#0 to Phi node: let c#2: biguint = φ(c#0 <- block@6) in block@6
debug: Added c#1 to Phi node: let c#2: biguint = φ(c#0 <- block@6, c#1 <- block@7) in block@7
debug: Terminated block@8
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Building IR for function test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.__puya_arc4_router__
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: optimizing approval program of test_cases.undefined_phi_args.baddie.Baddie at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
undefined_phi_args/baddie.py:29:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_mixed_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:30:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_mixed_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:26:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_bytes_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:27:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_bytes_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:23:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_uint_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:24:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_uint_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:19:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_mixed_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:20:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_mixed_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:16:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_bytes_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:17:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_bytes_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:13:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_uint_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
undefined_phi_args/baddie.py:14:24 debug: constant function call to test_cases.undefined_phi_args.baddie.test_uint_undefined in test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, invert_second_condition#0
debug: Found equivalence set: c#32, tmp%6#0
debug: Found equivalence set: c#35, tmp%8#0
debug: Found equivalence set: c#26, tmp%11#0
debug: Found equivalence set: c#29, tmp%13#0
debug: Found equivalence set: c#20, tmp%15#0
debug: Found equivalence set: c#23, tmp%17#0
debug: Found equivalence set: c#14, tmp%20#0
debug: Found equivalence set: c#17, tmp%22#0
debug: Found equivalence set: c#8, tmp%25#0
debug: Found equivalence set: c#11, tmp%27#0
debug: Found equivalence set: c#2, tmp%29#0
debug: Found equivalence set: c#5, tmp%31#0
debug: Copy propagation made 13 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#32
debug: Removing unused variable b#35
debug: Removing unused variable b#26
debug: Removing unused variable b#29
debug: Removing unused variable b#20
debug: Removing unused variable b#23
debug: Removing unused variable b#14
debug: Removing unused variable b#17
debug: Removing unused variable b#8
debug: Removing unused variable b#11
debug: Removing unused variable b#2
debug: Removing unused variable b#5
debug: Removing unused variable x#10
debug: Removing unused variable y#10
debug: Removing unused variable x#11
debug: Removing unused variable y#11
debug: Removing unused variable x#8
debug: Removing unused variable y#8
debug: Removing unused variable x#9
debug: Removing unused variable y#9
debug: Removing unused variable x#6
debug: Removing unused variable y#6
debug: Removing unused variable x#7
debug: Removing unused variable y#7
debug: Removing unused variable x#4
debug: Removing unused variable y#4
debug: Removing unused variable x#5
debug: Removing unused variable y#5
debug: Removing unused variable x#2
debug: Removing unused variable y#2
debug: Removing unused variable x#3
debug: Removing unused variable y#3
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Removing unused variable x#1
debug: Removing unused variable y#1
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (- 11u 1u) to 10u
debug: Simplified (- 11u 1u) to 10u
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (- 11u 1u) to 10u
debug: Simplified (- 11u 1u) to 10u
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Simplified (b- 11b 1b) to 10b
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@120 from goto 1u ? block@121 : block@122 to goto block@121
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@122 from goto 1u ? block@123 : block@124 to goto block@123
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@125 from goto 0u ? block@126 : block@127 to goto block@127
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@130 from goto 0u ? block@131 : block@132 to goto block@132
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@132 from goto 0u ? block@133 : block@134 to goto block@134
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@135 from goto 1u ? block@136 : block@137 to goto block@136
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@100 from goto 1u ? block@101 : block@102 to goto block@101
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@102 from goto 1u ? block@103 : block@104 to goto block@103
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@105 from goto 0u ? block@106 : block@107 to goto block@107
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@110 from goto 0u ? block@111 : block@112 to goto block@112
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@112 from goto 0u ? block@113 : block@114 to goto block@114
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@115 from goto 1u ? block@116 : block@117 to goto block@116
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@80 from goto 1u ? block@81 : block@82 to goto block@81
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@82 from goto 1u ? block@83 : block@84 to goto block@83
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@85 from goto 0u ? block@86 : block@87 to goto block@87
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@90 from goto 0u ? block@91 : block@92 to goto block@92
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@92 from goto 0u ? block@93 : block@94 to goto block@94
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@95 from goto 1u ? block@96 : block@97 to goto block@96
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@60 from goto 1u ? block@61 : block@62 to goto block@61
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@62 from goto 1u ? block@63 : block@64 to goto block@63
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@65 from goto 1u ? block@66 : block@67 to goto block@66
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@70 from goto 0u ? block@71 : block@72 to goto block@72
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@72 from goto 0u ? block@73 : block@74 to goto block@74
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@75 from goto 0u ? block@76 : block@77 to goto block@77
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@40 from goto 1u ? block@41 : block@42 to goto block@41
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@42 from goto 1u ? block@43 : block@44 to goto block@43
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@45 from goto 1u ? block@46 : block@47 to goto block@46
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@50 from goto 0u ? block@51 : block@52 to goto block@52
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@52 from goto 0u ? block@53 : block@54 to goto block@54
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@55 from goto 0u ? block@56 : block@57 to goto block@57
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@20 from goto 1u ? block@21 : block@22 to goto block@21
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@22 from goto 1u ? block@23 : block@24 to goto block@23
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@25 from goto 1u ? block@26 : block@27 to goto block@26
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@30 from goto 0u ? block@31 : block@32 to goto block@32
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32 from goto 0u ? block@33 : block@34 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@35 from goto 0u ? block@36 : block@37 to goto block@37
debug: Replacing trivial Phi node: let a#42: uint64 = φ(a#40 <- block@121) (a#42) with a#40
debug: Deleting Phi assignment: let a#42: uint64 = φ(a#40 <- block@121)
debug: Replacing trivial Phi node: let a#34: biguint = φ(a#32 <- block@101) (a#34) with a#32
debug: Deleting Phi assignment: let a#34: biguint = φ(a#32 <- block@101)
debug: Replacing trivial Phi node: let a#26: uint64 = φ(a#24 <- block@81) (a#26) with a#24
debug: Deleting Phi assignment: let a#26: uint64 = φ(a#24 <- block@81)
debug: Replacing trivial Phi node: let a#18: uint64 = φ(a#16 <- block@61) (a#18) with a#16
debug: Deleting Phi assignment: let a#18: uint64 = φ(a#16 <- block@61)
debug: Replacing trivial Phi node: let a#10: biguint = φ(a#8 <- block@41) (a#10) with a#8
debug: Deleting Phi assignment: let a#10: biguint = φ(a#8 <- block@41)
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#0 <- block@21) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#0 <- block@21)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@120 with block@6 in block@121
debug: Merged linear block@120 into block@6
debug: Replaced predecessor block@121 with block@6 in block@122
debug: Merged linear block@121 into block@6
debug: Replaced predecessor block@122 with block@6 in block@123
debug: Merged linear block@122 into block@6
debug: Replaced predecessor block@123 with block@6 in block@125
debug: Merged linear block@123 into block@6
debug: Replaced predecessor block@127 with block@125 in block@128
debug: Merged linear block@127 into block@125
debug: Replaced predecessor block@129 with block@128 in block@130
debug: Merged linear block@129 into block@128
debug: Replaced predecessor block@130 with block@128 in block@132
debug: Merged linear block@130 into block@128
debug: Replaced predecessor block@134 with block@132 in block@135
debug: Merged linear block@134 into block@132
debug: Replaced predecessor block@136 with block@135 in block@138
debug: Merged linear block@136 into block@135
debug: Replaced predecessor block@139 with block@138 in block@11
debug: Merged linear block@139 into block@138
debug: Replaced predecessor block@100 with block@8 in block@101
debug: Merged linear block@100 into block@8
debug: Replaced predecessor block@101 with block@8 in block@102
debug: Merged linear block@101 into block@8
debug: Replaced predecessor block@102 with block@8 in block@103
debug: Merged linear block@102 into block@8
debug: Replaced predecessor block@103 with block@8 in block@105
debug: Merged linear block@103 into block@8
debug: Replaced predecessor block@107 with block@105 in block@108
debug: Merged linear block@107 into block@105
debug: Replaced predecessor block@109 with block@108 in block@110
debug: Merged linear block@109 into block@108
debug: Replaced predecessor block@110 with block@108 in block@112
debug: Merged linear block@110 into block@108
debug: Replaced predecessor block@114 with block@112 in block@115
debug: Merged linear block@114 into block@112
debug: Replaced predecessor block@116 with block@115 in block@118
debug: Merged linear block@116 into block@115
debug: Replaced predecessor block@119 with block@118 in block@10
debug: Merged linear block@119 into block@118
debug: Replaced predecessor block@80 with block@9 in block@81
debug: Merged linear block@80 into block@9
debug: Replaced predecessor block@81 with block@9 in block@82
debug: Merged linear block@81 into block@9
debug: Replaced predecessor block@82 with block@9 in block@83
debug: Merged linear block@82 into block@9
debug: Replaced predecessor block@83 with block@9 in block@85
debug: Merged linear block@83 into block@9
debug: Replaced predecessor block@87 with block@85 in block@88
debug: Merged linear block@87 into block@85
debug: Replaced predecessor block@89 with block@88 in block@90
debug: Merged linear block@89 into block@88
debug: Replaced predecessor block@90 with block@88 in block@92
debug: Merged linear block@90 into block@88
debug: Replaced predecessor block@94 with block@92 in block@95
debug: Merged linear block@94 into block@92
debug: Replaced predecessor block@96 with block@95 in block@98
debug: Merged linear block@96 into block@95
debug: Replaced predecessor block@99 with block@98 in block@10
debug: Merged linear block@99 into block@98
debug: Replaced predecessor block@60 with block@13 in block@61
debug: Merged linear block@60 into block@13
debug: Replaced predecessor block@61 with block@13 in block@62
debug: Merged linear block@61 into block@13
debug: Replaced predecessor block@62 with block@13 in block@63
debug: Merged linear block@62 into block@13
debug: Replaced predecessor block@63 with block@13 in block@65
debug: Merged linear block@63 into block@13
debug: Replaced predecessor block@66 with block@65 in block@68
debug: Merged linear block@66 into block@65
debug: Replaced predecessor block@69 with block@68 in block@70
debug: Merged linear block@69 into block@68
debug: Replaced predecessor block@70 with block@68 in block@72
debug: Merged linear block@70 into block@68
debug: Replaced predecessor block@74 with block@72 in block@75
debug: Merged linear block@74 into block@72
debug: Replaced predecessor block@77 with block@75 in block@78
debug: Merged linear block@77 into block@75
debug: Replaced predecessor block@79 with block@78 in block@18
debug: Merged linear block@79 into block@78
debug: Replaced predecessor block@40 with block@15 in block@41
debug: Merged linear block@40 into block@15
debug: Replaced predecessor block@41 with block@15 in block@42
debug: Merged linear block@41 into block@15
debug: Replaced predecessor block@42 with block@15 in block@43
debug: Merged linear block@42 into block@15
debug: Replaced predecessor block@43 with block@15 in block@45
debug: Merged linear block@43 into block@15
debug: Replaced predecessor block@46 with block@45 in block@48
debug: Merged linear block@46 into block@45
debug: Replaced predecessor block@49 with block@48 in block@50
debug: Merged linear block@49 into block@48
debug: Replaced predecessor block@50 with block@48 in block@52
debug: Merged linear block@50 into block@48
debug: Replaced predecessor block@54 with block@52 in block@55
debug: Merged linear block@54 into block@52
debug: Replaced predecessor block@57 with block@55 in block@58
debug: Merged linear block@57 into block@55
debug: Replaced predecessor block@59 with block@58 in block@17
debug: Merged linear block@59 into block@58
debug: Replaced predecessor block@20 with block@16 in block@21
debug: Merged linear block@20 into block@16
debug: Replaced predecessor block@21 with block@16 in block@22
debug: Merged linear block@21 into block@16
debug: Replaced predecessor block@22 with block@16 in block@23
debug: Merged linear block@22 into block@16
debug: Replaced predecessor block@23 with block@16 in block@25
debug: Merged linear block@23 into block@16
debug: Replaced predecessor block@26 with block@25 in block@28
debug: Merged linear block@26 into block@25
debug: Replaced predecessor block@29 with block@28 in block@30
debug: Merged linear block@29 into block@28
debug: Replaced predecessor block@30 with block@28 in block@32
debug: Merged linear block@30 into block@28
debug: Replaced predecessor block@34 with block@32 in block@35
debug: Merged linear block@34 into block@32
debug: Replaced predecessor block@37 with block@35 in block@38
debug: Merged linear block@37 into block@35
debug: Replaced predecessor block@39 with block@38 in block@17
debug: Merged linear block@39 into block@38
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@10
debug: Removed empty block: block@11
debug: Removed empty block: block@17
debug: Removed empty block: block@18
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@124, block@126, block@131, block@133, block@137, block@104, block@106, block@111, block@113, block@117, block@84, block@86, block@91, block@93, block@97, block@64, block@67, block@71, block@73, block@76, block@44, block@47, block@51, block@53, block@56, block@24, block@27, block@31, block@33, block@36
debug: Removed unreachable predecessors from block@125
debug: Removed unreachable predecessors from block@128
debug: Removed unreachable predecessors from block@132
debug: Removed unreachable predecessors from block@135
debug: Removed unreachable predecessors from block@138
debug: Removed unreachable predecessors from block@105
debug: Removed unreachable predecessors from block@108
debug: Removed unreachable predecessors from block@112
debug: Removed unreachable predecessors from block@115
debug: Removed unreachable predecessors from block@118
debug: Removed unreachable predecessors from block@85
debug: Removed unreachable predecessors from block@88
debug: Removed unreachable predecessors from block@92
debug: Removed unreachable predecessors from block@95
debug: Removed unreachable predecessors from block@98
debug: Removed unreachable predecessors from block@65
debug: Removed unreachable predecessors from block@68
debug: Removed unreachable predecessors from block@72
debug: Removed unreachable predecessors from block@75
debug: Removed unreachable predecessors from block@78
debug: Removed unreachable predecessors from block@45
debug: Removed unreachable predecessors from block@48
debug: Removed unreachable predecessors from block@52
debug: Removed unreachable predecessors from block@55
debug: Removed unreachable predecessors from block@58
debug: Removed unreachable predecessors from block@25
debug: Removed unreachable predecessors from block@28
debug: Removed unreachable predecessors from block@32
debug: Removed unreachable predecessors from block@35
debug: Removed unreachable predecessors from block@38
debug: Removing unreachable phi arguments: c#30 <- block@126
debug: Replacing trivial Phi node: let c#32: uint64 = φ(c#31 <- block@125) (c#32) with c#31
debug: Deleting Phi assignment: let c#32: uint64 = φ(c#31 <- block@125)
debug: Removing unreachable phi arguments: a#44 <- block@131
debug: Replacing trivial Phi node: let a#46: uint64 = φ(a#47 <- block@128) (a#46) with a#47
debug: Deleting Phi assignment: let a#46: uint64 = φ(a#47 <- block@128)
debug: Removing unreachable phi arguments: c#34 <- block@137
debug: Replacing trivial Phi node: let c#35: uint64 = φ(c#33 <- block@135) (c#35) with c#33
debug: Deleting Phi assignment: let c#35: uint64 = φ(c#33 <- block@135)
debug: Removing unreachable phi arguments: c#24 <- block@106
debug: Replacing trivial Phi node: let c#26: biguint = φ(c#25 <- block@105) (c#26) with c#25
debug: Deleting Phi assignment: let c#26: biguint = φ(c#25 <- block@105)
debug: Removing unreachable phi arguments: a#36 <- block@111
debug: Replacing trivial Phi node: let a#38: biguint = φ(a#39 <- block@108) (a#38) with a#39
debug: Deleting Phi assignment: let a#38: biguint = φ(a#39 <- block@108)
debug: Removing unreachable phi arguments: c#28 <- block@117
debug: Replacing trivial Phi node: let c#29: biguint = φ(c#27 <- block@115) (c#29) with c#27
debug: Deleting Phi assignment: let c#29: biguint = φ(c#27 <- block@115)
debug: Removing unreachable phi arguments: c#18 <- block@86
debug: Replacing trivial Phi node: let c#20: biguint = φ(c#19 <- block@85) (c#20) with c#19
debug: Deleting Phi assignment: let c#20: biguint = φ(c#19 <- block@85)
debug: Removing unreachable phi arguments: a#28 <- block@91
debug: Replacing trivial Phi node: let a#30: uint64 = φ(a#31 <- block@88) (a#30) with a#31
debug: Deleting Phi assignment: let a#30: uint64 = φ(a#31 <- block@88)
debug: Removing unreachable phi arguments: c#22 <- block@97
debug: Replacing trivial Phi node: let c#23: biguint = φ(c#21 <- block@95) (c#23) with c#21
debug: Deleting Phi assignment: let c#23: biguint = φ(c#21 <- block@95)
debug: Removing unreachable phi arguments: c#13 <- block@67
debug: Replacing trivial Phi node: let c#14: uint64 = φ(c#12 <- block@65) (c#14) with c#12
debug: Deleting Phi assignment: let c#14: uint64 = φ(c#12 <- block@65)
debug: Removing unreachable phi arguments: a#20 <- block@71
debug: Replacing trivial Phi node: let a#22: uint64 = φ(a#23 <- block@68) (a#22) with a#23
debug: Deleting Phi assignment: let a#22: uint64 = φ(a#23 <- block@68)
debug: Removing unreachable phi arguments: c#15 <- block@76
debug: Replacing trivial Phi node: let c#17: uint64 = φ(c#16 <- block@75) (c#17) with c#16
debug: Deleting Phi assignment: let c#17: uint64 = φ(c#16 <- block@75)
debug: Removing unreachable phi arguments: c#7 <- block@47
debug: Replacing trivial Phi node: let c#8: biguint = φ(c#6 <- block@45) (c#8) with c#6
debug: Deleting Phi assignment: let c#8: biguint = φ(c#6 <- block@45)
debug: Removing unreachable phi arguments: a#12 <- block@51
debug: Replacing trivial Phi node: let a#14: biguint = φ(a#15 <- block@48) (a#14) with a#15
debug: Deleting Phi assignment: let a#14: biguint = φ(a#15 <- block@48)
debug: Removing unreachable phi arguments: c#9 <- block@56
debug: Replacing trivial Phi node: let c#11: biguint = φ(c#10 <- block@55) (c#11) with c#10
debug: Deleting Phi assignment: let c#11: biguint = φ(c#10 <- block@55)
debug: Removing unreachable phi arguments: c#1 <- block@27
debug: Replacing trivial Phi node: let c#2: biguint = φ(c#0 <- block@25) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: biguint = φ(c#0 <- block@25)
debug: Removing unreachable phi arguments: a#4 <- block@31
debug: Replacing trivial Phi node: let a#6: uint64 = φ(a#7 <- block@28) (a#6) with a#7
debug: Deleting Phi assignment: let a#6: uint64 = φ(a#7 <- block@28)
debug: Removing unreachable phi arguments: c#3 <- block@36
debug: Replacing trivial Phi node: let c#5: biguint = φ(c#4 <- block@35) (c#5) with c#4
debug: Deleting Phi assignment: let c#5: biguint = φ(c#4 <- block@35)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (- 11u 1u) to 10u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b- 11b 1b) to 10b
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#2
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b- 11b 1b) to 10b
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_uint_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_bytes_undefined
debug: removing unused subroutine test_cases.undefined_phi_args.baddie.test_mixed_undefined
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Removing unused variable a#43
debug: Removing unused variable a#40
debug: Removing unused variable b#30
debug: Removing unused variable c#31
debug: Removing unused variable b#34
debug: Removing unused variable a#35
debug: Removing unused variable a#32
debug: Removing unused variable b#24
debug: Removing unused variable c#25
debug: Removing unused variable b#28
debug: Removing unused variable a#27
debug: Removing unused variable a#24
debug: Removing unused variable b#18
debug: Removing unused variable c#19
debug: Removing unused variable b#22
debug: Removing unused variable a#19
debug: Removing unused variable a#16
debug: Removing unused variable b#12
debug: Removing unused variable a#23
debug: Removing unused variable b#16
debug: Removing unused variable c#16
debug: Removing unused variable a#11
debug: Removing unused variable a#8
debug: Removing unused variable b#6
debug: Removing unused variable a#15
debug: Removing unused variable b#10
debug: Removing unused variable c#10
debug: Removing unused variable a#3
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable a#7
debug: Removing unused variable b#4
debug: Removing unused variable c#4
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 10u 10u) to 1u
debug: Simplified (b== 10b 10b) to 1u
debug: Simplified (b== 10b 10b) to 1u
debug: Simplified (+ 7u 1u) to 8u
debug: Simplified (== 8u 8u) to 1u
debug: Simplified (== 10u 10u) to 1u
debug: Simplified (b+ 7b 1b) to 8b
debug: Simplified (b== 8b 8b) to 1u
debug: Simplified (b== 10b 10b) to 1u
debug: Simplified (b+ tmp%0#1 1b) to 8b
debug: Simplified (b== 8b 8b) to 1u
debug: Simplified (b== 10b 10b) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@125 with block@6 in block@128
debug: Merged linear block@125 into block@6
debug: Replaced predecessor block@128 with block@6 in block@132
debug: Merged linear block@128 into block@6
debug: Replaced predecessor block@132 with block@6 in block@135
debug: Merged linear block@132 into block@6
debug: Replaced predecessor block@135 with block@6 in block@138
debug: Merged linear block@135 into block@6
debug: Replaced predecessor block@138 with block@6 in block@19
debug: Merged linear block@138 into block@6
debug: Replaced predecessor block@105 with block@8 in block@108
debug: Merged linear block@105 into block@8
debug: Replaced predecessor block@108 with block@8 in block@112
debug: Merged linear block@108 into block@8
debug: Replaced predecessor block@112 with block@8 in block@115
debug: Merged linear block@112 into block@8
debug: Replaced predecessor block@115 with block@8 in block@118
debug: Merged linear block@115 into block@8
debug: Replaced predecessor block@118 with block@8 in block@19
debug: Merged linear block@118 into block@8
debug: Replaced predecessor block@85 with block@9 in block@88
debug: Merged linear block@85 into block@9
debug: Replaced predecessor block@88 with block@9 in block@92
debug: Merged linear block@88 into block@9
debug: Replaced predecessor block@92 with block@9 in block@95
debug: Merged linear block@92 into block@9
debug: Replaced predecessor block@95 with block@9 in block@98
debug: Merged linear block@95 into block@9
debug: Replaced predecessor block@98 with block@9 in block@19
debug: Merged linear block@98 into block@9
debug: Replaced predecessor block@65 with block@13 in block@68
debug: Merged linear block@65 into block@13
debug: Replaced predecessor block@68 with block@13 in block@72
debug: Merged linear block@68 into block@13
debug: Replaced predecessor block@72 with block@13 in block@75
debug: Merged linear block@72 into block@13
debug: Replaced predecessor block@75 with block@13 in block@78
debug: Merged linear block@75 into block@13
debug: Replaced predecessor block@78 with block@13 in block@19
debug: Merged linear block@78 into block@13
debug: Replaced predecessor block@45 with block@15 in block@48
debug: Merged linear block@45 into block@15
debug: Replaced predecessor block@48 with block@15 in block@52
debug: Merged linear block@48 into block@15
debug: Replaced predecessor block@52 with block@15 in block@55
debug: Merged linear block@52 into block@15
debug: Replaced predecessor block@55 with block@15 in block@58
debug: Merged linear block@55 into block@15
debug: Replaced predecessor block@58 with block@15 in block@19
debug: Merged linear block@58 into block@15
debug: Replaced predecessor block@25 with block@16 in block@28
debug: Merged linear block@25 into block@16
debug: Replaced predecessor block@28 with block@16 in block@32
debug: Merged linear block@28 into block@16
debug: Replaced predecessor block@32 with block@16 in block@35
debug: Merged linear block@32 into block@16
debug: Replaced predecessor block@35 with block@16 in block@38
debug: Merged linear block@35 into block@16
debug: Replaced predecessor block@38 with block@16 in block@19
debug: Merged linear block@38 into block@16
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable c#12
debug: Removing unused variable tmp%21#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable c#6
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%0#1
debug: Removing unused variable c#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%32#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@13
debug: Removed empty block: block@15
debug: replaced goto tmp%24#0 ? block@19 : block@19 with goto block@19
debug: Removed empty block: block@16
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%24#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: replaced goto tmp%19#0 ? block@19 : block@19 with goto block@19
debug: Removed empty block: block@14
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%19#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@12
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 6, ending loop
debug: optimizing clear program of test_cases.undefined_phi_args.baddie.Baddie at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.undefined_phi_args.baddie.Baddie
debug: lowering array IR nodes in clear program of test_cases.undefined_phi_args.baddie.Baddie
debug: optimizing approval program of test_cases.undefined_phi_args.baddie.Baddie at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.undefined_phi_args.baddie.Baddie at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Redundant Slot Op Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.undefined_phi_args.baddie.Baddie
undefined_phi_args/baddie.py:5 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.Baddie.approval_program, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.undefined_phi_args.baddie.Baddie
undefined_phi_args/baddie.py:33 debug: auto reserving slots in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing invert_second_condition#0 with [invert_second_condition#1]
debug: Coalescing a#31 with [a#47]
debug: Coalescing c#21 with [c#27]
debug: Coalescing resulted in 9 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to undefined_phi_args/out_O2/Baddie.ir/Baddie.approval.0.destructured.ir
debug: Performing SSA IR destructuring for test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to undefined_phi_args/out_O2/Baddie.ir/Baddie.clear.0.destructured.ir
debug: Inserted main.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[8]: 'l-store-copy tmp%1#0 0'
debug: Replaced main.ops[10]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_and_contd@1.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_and_contd@1.ops[3]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_and_contd@1.ops[5]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_and_contd@1.ops[7]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_bool_true@2.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_true@2.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_false@3.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_false@3.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_if_body@5.ops[3]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_if_body@5.ops[5]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_if_body@6.ops[1]: 'l-store-copy a#31 0'
debug: Replaced main_if_body@6.ops[3]: 'v-load a#31' with 'l-load a#31'
debug: Inserted main_if_body@6.ops[6]: 'l-store-copy c#33 0'
debug: Replaced main_if_body@6.ops[8]: 'v-load c#33' with 'l-load c#33'
debug: Inserted main_if_body@6.ops[11]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_if_body@6.ops[13]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_else_body@7.ops[3]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_else_body@7.ops[5]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@8.ops[1]: 'l-store-copy a#39 0'
debug: Replaced main_if_body@8.ops[3]: 'v-load a#39' with 'l-load a#39'
debug: Inserted main_if_body@8.ops[6]: 'l-store-copy c#21 0'
debug: Replaced main_if_body@8.ops[8]: 'v-load c#21' with 'l-load c#21'
debug: Inserted main_if_body@8.ops[11]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_if_body@8.ops[13]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_else_body@9.ops[1]: 'l-store-copy a#31 0'
debug: Replaced main_else_body@9.ops[3]: 'v-load a#31' with 'l-load a#31'
debug: Inserted main_else_body@9.ops[5]: 'l-store-copy tmp%0#4 0'
debug: Replaced main_else_body@9.ops[7]: 'v-load tmp%0#4' with 'l-load tmp%0#4'
debug: Inserted main_else_body@9.ops[10]: 'l-store-copy c#21 0'
debug: Replaced main_else_body@9.ops[12]: 'v-load c#21' with 'l-load c#21'
debug: Inserted main_else_body@9.ops[15]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@9.ops[17]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Found 5 edge set/s for test_cases.undefined_phi_args.baddie.Baddie.approval_program
debug: Allocated 1 variable/s to x-stack: invert_second_condition#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: invert_second_condition#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: invert_second_condition#0
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack entry: []
debug: test_cases.undefined_phi_args.baddie.Baddie.approval_program f-stack on first store: ['test_case#0']
undefined_phi_args/baddie.py:5 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
undefined_phi_args/baddie.py:5 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.Baddie.approval_program() -> uint64:
debug: inlining single reference block main_and_contd@1 into main
debug: inlining single reference block main_bool_true@2 into main
debug: inlining single reference block main_if_body@5 into main_bool_merge@4
debug: inlining single reference block main_if_body@6 into main_bool_merge@4
debug: inlining single reference block main_if_body@8 into main_else_body@7
debug: removing explicit jump to fall-through block main_bool_merge@4
debug: removing explicit jump to fall-through block main_after_if_else@19
undefined_phi_args/baddie.py:33 debug: optimizing TEAL subroutine ops test_cases.undefined_phi_args.baddie.Baddie.clear_state_program() -> uint64:
undefined_phi_args/baddie.py:33 debug: optimizing TEAL subroutine blocks test_cases.undefined_phi_args.baddie.Baddie.clear_state_program() -> uint64:
info: Writing undefined_phi_args/out_O2/Baddie.approval.teal
info: Writing undefined_phi_args/out_O2/Baddie.clear.teal
info: Writing undefined_phi_args/out_O2/Baddie.approval.bin
info: Writing undefined_phi_args/out_O2/Baddie.clear.bin
info: Writing undefined_phi_args/out_O2/Baddie.approval.puya.map
info: Writing undefined_phi_args/out_O2/Baddie.clear.puya.map