{
  "version": 3,
  "sources": [
    "../baddie.py"
  ],
  "mappings": ";;;;;;;;;;;;AAKoB;;;AAER;;AAAsB;AAAtB;AAAA;;;AAAoC;;;AAAR;AAA5B;;;;AAGZ;;;AACe;AAAa;;;;;;AAAb;AAAf;;;;AAkCgB;AAAJ;AAhC+C;;AAApC;AAAP;AAiBD;AAAP;AAhBS;AAAa;;;;;;;AAAb;AAAjB;;;;AA8CgB;AAAJ;AA5CgD;AAArC;AAAP;;;;;AA2DJ;AAAa;AAAb;AAxDgD;AAArC;AAAP;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.undefined_phi_args.baddie.Baddie.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"\" 0x01 0x08"
    },
    "12": {
      "op": "txna ApplicationArgs 0"
    },
    "15": {
      "op": "txn NumAppArgs"
    },
    "17": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "test_case#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%0#0",
        "1"
      ]
    },
    "18": {
      "op": ">",
      "defined_out": [
        "test_case#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "test_case#0"
      ]
    },
    "22": {
      "op": "txna ApplicationArgs 1"
    },
    "25": {
      "op": "btoi"
    },
    "26": {
      "op": "bz main_bool_false@3"
    },
    "29": {
      "op": "intc_0 // 1"
    },
    "30": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "test_case#0",
        "invert_second_condition#0"
      ],
      "op": "bz main_after_if_else@19",
      "defined_out": [],
      "stack_out": [
        "test_case#0"
      ]
    },
    "33": {
      "op": "dup"
    },
    "34": {
      "op": "pushbytes 0x75696e74"
    },
    "40": {
      "op": "=="
    },
    "41": {
      "op": "bz main_else_body@7"
    },
    "44": {
      "op": "bytec_0 // \"\""
    },
    "45": {
      "op": "intc_0 // 1"
    },
    "46": {
      "op": "+"
    },
    "47": {
      "op": "pushint 8 // 8"
    },
    "49": {
      "op": "=="
    },
    "50": {
      "op": "assert"
    },
    "51": {
      "block": "main_after_if_else@19",
      "stack_in": [
        "test_case#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "test_case#0",
        "1"
      ]
    },
    "52": {
      "op": "return",
      "stack_out": [
        "test_case#0"
      ]
    },
    "53": {
      "block": "main_else_body@7",
      "stack_in": [
        "test_case#0"
      ],
      "op": "dup",
      "defined_out": [
        "test_case#0"
      ],
      "stack_out": [
        "test_case#0",
        "test_case#0"
      ]
    },
    "54": {
      "op": "pushbytes 0x6279746573",
      "defined_out": [
        "0x6279746573",
        "test_case#0"
      ],
      "stack_out": [
        "test_case#0",
        "test_case#0",
        "0x6279746573"
      ]
    },
    "61": {
      "op": "==",
      "defined_out": [
        "test_case#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%10#0"
      ]
    },
    "62": {
      "op": "bz main_else_body@9",
      "stack_out": [
        "test_case#0"
      ]
    },
    "65": {
      "op": "intc_1 // 0"
    },
    "66": {
      "op": "bytec_1 // 0x01"
    },
    "67": {
      "op": "b+"
    },
    "68": {
      "op": "bytec_2 // 0x08"
    },
    "69": {
      "op": "b=="
    },
    "70": {
      "op": "assert"
    },
    "71": {
      "op": "b main_after_if_else@19"
    },
    "74": {
      "block": "main_else_body@9",
      "stack_in": [
        "test_case#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "a#31"
      ],
      "stack_out": [
        "test_case#0",
        "a#31"
      ]
    },
    "75": {
      "op": "itob",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%0#4"
      ]
    },
    "76": {
      "op": "bytec_1 // 0x01",
      "defined_out": [
        "0x01",
        "tmp%0#4"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%0#4",
        "0x01"
      ]
    },
    "77": {
      "op": "b+",
      "defined_out": [
        "c#21"
      ],
      "stack_out": [
        "test_case#0",
        "c#21"
      ]
    },
    "78": {
      "op": "bytec_2 // 0x08",
      "defined_out": [
        "0x08",
        "c#21"
      ],
      "stack_out": [
        "test_case#0",
        "c#21",
        "0x08"
      ]
    },
    "79": {
      "op": "b==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "test_case#0",
        "tmp%18#0"
      ]
    },
    "80": {
      "op": "assert",
      "stack_out": [
        "test_case#0"
      ]
    },
    "81": {
      "op": "b main_after_if_else@19"
    },
    "84": {
      "block": "main_bool_false@3",
      "stack_in": [
        "test_case#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "invert_second_condition#0"
      ],
      "stack_out": [
        "test_case#0",
        "invert_second_condition#0"
      ]
    },
    "85": {
      "op": "b main_bool_merge@4"
    }
  }
}