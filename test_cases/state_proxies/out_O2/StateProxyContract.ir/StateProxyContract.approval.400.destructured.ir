main test_cases.state_proxies.contract.StateProxyContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put 0x6732 0u)
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let funky_town#0: bytes = (select "town" "funky" tmp%0#2)
        (app_global_put funky_town#0 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: bytes = (txna ApplicationArgs 0)
        switch tmp%0#3 {method "create()void" => block@4, * => block@5}
    block@4: // create_route_L31
        let tmp%1#2: uint64 = (txn OnCompletion)
        let tmp%2#0: bool = (== tmp%1#2 OptIn)
        let tmp%3#0: uint64 = (txn ApplicationID)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: bool = (&& tmp%2#0 tmp%4#0)
        (assert tmp%5#0) // OnCompletion must be OptIn && can only call when creating
        (app_global_put "g1" 1u)
        let tmp%0#5: account = (txn Sender)
        (app_local_put tmp%0#5 "l1" 2u)
        let tmp%1#6: account = (txn Sender)
        (app_local_put tmp%1#6 0x6c32 3u)
        exit 1u
    block@5: // switch_case_next_L17
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "clear()void" => block@7, method "order_of_eval_global()void" => block@8, method "order_of_eval_local()void" => block@9, method "order_of_eval_box()void" => block@10, * => block@11}
    block@7: // clear_route_L37
        (app_global_del "g1")
        let tmp%0#5: account = (txn Sender)
        (app_local_del tmp%0#5 "l1")
        let tmp%1#6: account = (txn Sender)
        (app_local_del tmp%1#6 0x6c32)
        let materialized_values%0#0: bytes = test_cases.state_proxies.contract.get_key()
        let box_prefixed_key%0#0: bytes = (concat "box_map" materialized_values%0#0)
        (box_del box_prefixed_key%0#0)
        exit 1u
    block@8: // order_of_eval_global_route_L44
        let tmp%0#2: uint64 = test_cases.state_proxies.contract.default_value()
        let (maybe_value%0#1: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "g1")
        let val#0: uint64 = (select tmp%0#2 maybe_value%0#1 maybe_exists%0#0)
        let tmp%1#3: bool = (== val#0 42u)
        (assert tmp%1#3)
        exit 1u
    block@9: // order_of_eval_local_route_L49
        let tmp%0#5: account = test_cases.state_proxies.contract.get_account()
        let tmp%1#2: uint64 = test_cases.state_proxies.contract.default_value()
        let (maybe_value%0#1: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#5 0u "l1")
        let val#0: uint64 = (select tmp%1#2 maybe_value%0#1 maybe_exists%0#0)
        let tmp%2#0: bool = (== val#0 42u)
        (assert tmp%2#0)
        exit 1u
    block@10: // order_of_eval_box_route_L54
        let materialized_values%0#0: bytes = test_cases.state_proxies.contract.get_key()
        let box_prefixed_key%0#0: bytes = (concat "box_map" materialized_values%0#0)
        let tmp%0#2: uint64 = test_cases.state_proxies.contract.default_value()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let val#0: uint64 = (select tmp%0#2 maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%1#3: bool = (== val#0 42u)
        (assert tmp%1#3)
        exit 1u
    block@11: // after_if_else_L17
        fail

subroutine test_cases.state_proxies.contract.get_key() -> bytes:
    block@0: // L60
        (log "key")
        return 0x626f78

subroutine test_cases.state_proxies.contract.get_account() -> account:
    block@0: // L66
        (log "account")
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.state_proxies.contract.default_value() -> uint64:
    block@0: // L72
        (log "default")
        return 42u