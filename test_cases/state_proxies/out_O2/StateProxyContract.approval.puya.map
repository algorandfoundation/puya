{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqB0D;;;;AAAf;AAAnC;AAIiC;;;;;;;;;;;;;AAD1B;;AADH;AAIe;;AAAnB;AAXR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;AAqCK;;AAAA;AAAA;AAAA;;AAAA;AAE0B;;;AAAjB;AAAA;AAAA;AAAoC;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ;AAAP;AAAP;AAHH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEyB;;;AAAuB;;;AAAvC;AAAA;AAAA;AAAA;AAAA;AACQ;AAAP;AAAP;AAHH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEkC;;;AAAzB;AAAA;AAAA;AAAA;AACQ;AAAP;AAAP;AAHH;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAEO;AAAJ;AACgB;;AAAZ;AAAJ;AACgB;;AAAZ;AAAJ;AACiB;;;AAAb;AAAA;AAAA;AAAJ;;AALH;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAAqB;AAArB;AACY;;AAAZ;AAA0B;;AAA1B;AACY;;AAAZ;AAA0B;;AAA1B;AAJH;;AA+BG;;;;;AAAJ;AACO;;;;;AAAP;AAKI;;;;;;;;;AAAJ;AACO;;AAAP;AAKI;;;;;;;;;AAAJ;AACO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.state_proxies.contract.StateProxyContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 42 0"
    },
    "6": {
      "op": "bytecblock \"l1\" \"g1\" \"box_map\" 0x6c32"
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "30": {
      "op": "pushbytes 0x6732",
      "defined_out": [
        "0x6732"
      ],
      "stack_out": [
        "0x6732"
      ]
    },
    "34": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x6732"
      ],
      "stack_out": [
        "0x6732",
        "0"
      ]
    },
    "35": {
      "op": "app_global_put",
      "stack_out": []
    },
    "36": {
      "op": "pushbytess \"town\" \"funky\" // \"town\", \"funky\"",
      "defined_out": [
        "\"funky\"",
        "\"town\""
      ],
      "stack_out": [
        "\"town\"",
        "\"funky\""
      ]
    },
    "49": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "\"funky\"",
        "\"town\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"town\"",
        "\"funky\"",
        "tmp%0#2"
      ]
    },
    "51": {
      "op": "select",
      "defined_out": [
        "funky_town#0"
      ],
      "stack_out": [
        "funky_town#0"
      ]
    },
    "52": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "funky_town#0"
      ],
      "stack_out": [
        "funky_town#0",
        "123"
      ]
    },
    "54": {
      "op": "app_global_put",
      "stack_out": []
    },
    "55": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "57": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "60": {
      "op": "pushbytess 0x4c5c61ba 0x44977246 0xbd8868b9 0xd0e289b0 0x74445702 // method \"create()void\", method \"clear()void\", method \"order_of_eval_global()void\", method \"order_of_eval_local()void\", method \"order_of_eval_box()void\"",
      "defined_out": [
        "Method(clear()void)",
        "Method(create()void)",
        "Method(order_of_eval_box()void)",
        "Method(order_of_eval_global()void)",
        "Method(order_of_eval_local()void)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(clear()void)",
        "Method(order_of_eval_global()void)",
        "Method(order_of_eval_local()void)",
        "Method(order_of_eval_box()void)"
      ]
    },
    "87": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clear()void)",
        "Method(create()void)",
        "Method(order_of_eval_box()void)",
        "Method(order_of_eval_global()void)",
        "Method(order_of_eval_local()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(clear()void)",
        "Method(order_of_eval_global()void)",
        "Method(order_of_eval_local()void)",
        "Method(order_of_eval_box()void)",
        "tmp%2#0"
      ]
    },
    "90": {
      "op": "match main_create_route@5 main_clear_route@6 main_order_of_eval_global_route@7 main_order_of_eval_local_route@8 main_order_of_eval_box_route@9",
      "stack_out": []
    },
    "102": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "103": {
      "block": "main_order_of_eval_box_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "callsub": "test_cases.state_proxies.contract.get_key",
      "op": "callsub get_key",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "113": {
      "op": "bytec_2 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"box_map\""
      ]
    },
    "114": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "materialized_values%0#0"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "116": {
      "callsub": "test_cases.state_proxies.contract.default_value",
      "op": "callsub default_value",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#2"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "box_prefixed_key%0#0"
      ]
    },
    "120": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "122": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "124": {
      "op": "select",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "125": {
      "op": "intc_1 // 42",
      "defined_out": [
        "42",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "42"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "tmp%1#3"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_order_of_eval_local_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "132": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "callsub": "test_cases.state_proxies.contract.get_account",
      "op": "callsub get_account",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "140": {
      "callsub": "test_cases.state_proxies.contract.default_value",
      "op": "callsub default_value",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#4"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%1#4"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "tmp%1#4",
        "tmp%0#5"
      ]
    },
    "144": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#5",
        "tmp%1#4"
      ],
      "stack_out": [
        "tmp%1#4",
        "tmp%0#5",
        "0"
      ]
    },
    "145": {
      "op": "bytec_0 // \"l1\"",
      "defined_out": [
        "\"l1\"",
        "0",
        "tmp%0#5",
        "tmp%1#4"
      ],
      "stack_out": [
        "tmp%1#4",
        "tmp%0#5",
        "0",
        "\"l1\""
      ]
    },
    "146": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%1#4"
      ],
      "stack_out": [
        "tmp%1#4",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "147": {
      "op": "select",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "148": {
      "op": "intc_1 // 42",
      "defined_out": [
        "42",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "42"
      ]
    },
    "149": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "150": {
      "op": "assert",
      "stack_out": []
    },
    "151": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_order_of_eval_global_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "callsub": "test_cases.state_proxies.contract.default_value",
      "op": "callsub default_value",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "163": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "0"
      ]
    },
    "164": {
      "op": "bytec_1 // \"g1\"",
      "defined_out": [
        "\"g1\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "0",
        "\"g1\""
      ]
    },
    "165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "166": {
      "op": "select",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "167": {
      "op": "intc_1 // 42",
      "defined_out": [
        "42",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "42"
      ]
    },
    "168": {
      "op": "==",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "tmp%1#3"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_clear_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "174": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "bytec_1 // \"g1\"",
      "defined_out": [
        "\"g1\""
      ],
      "stack_out": [
        "\"g1\""
      ]
    },
    "180": {
      "op": "app_global_del",
      "stack_out": []
    },
    "181": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "183": {
      "op": "bytec_0 // \"l1\"",
      "defined_out": [
        "\"l1\"",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "\"l1\""
      ]
    },
    "184": {
      "op": "app_local_del",
      "stack_out": []
    },
    "185": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#6"
      ],
      "stack_out": [
        "tmp%1#6"
      ]
    },
    "187": {
      "op": "bytec_3 // 0x6c32",
      "defined_out": [
        "0x6c32",
        "tmp%1#6"
      ],
      "stack_out": [
        "tmp%1#6",
        "0x6c32"
      ]
    },
    "188": {
      "op": "app_local_del",
      "stack_out": []
    },
    "189": {
      "callsub": "test_cases.state_proxies.contract.get_key",
      "op": "callsub get_key",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "192": {
      "op": "bytec_2 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"box_map\""
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "materialized_values%0#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "195": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "196": {
      "op": "pop",
      "stack_out": []
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "201": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "203": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "206": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "207": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "208": {
      "op": "bytec_1 // \"g1\"",
      "defined_out": [
        "\"g1\""
      ],
      "stack_out": [
        "\"g1\""
      ]
    },
    "209": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"g1\"",
        "1"
      ],
      "stack_out": [
        "\"g1\"",
        "1"
      ]
    },
    "210": {
      "op": "app_global_put",
      "stack_out": []
    },
    "211": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "213": {
      "op": "bytec_0 // \"l1\"",
      "defined_out": [
        "\"l1\"",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "\"l1\""
      ]
    },
    "214": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "\"l1\"",
        "2",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "\"l1\"",
        "2"
      ]
    },
    "216": {
      "op": "app_local_put",
      "stack_out": []
    },
    "217": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#6"
      ],
      "stack_out": [
        "tmp%1#6"
      ]
    },
    "219": {
      "op": "bytec_3 // 0x6c32",
      "defined_out": [
        "0x6c32",
        "tmp%1#6"
      ],
      "stack_out": [
        "tmp%1#6",
        "0x6c32"
      ]
    },
    "220": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0x6c32",
        "3",
        "tmp%1#6"
      ],
      "stack_out": [
        "tmp%1#6",
        "0x6c32",
        "3"
      ]
    },
    "222": {
      "op": "app_local_put",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "subroutine": "test_cases.state_proxies.contract.get_key",
      "params": {},
      "block": "get_key",
      "stack_in": [],
      "op": "pushbytes \"key\"",
      "defined_out": [
        "\"key\""
      ],
      "stack_out": [
        "\"key\""
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "pushbytes 0x626f78",
      "defined_out": [
        "0x626f78"
      ],
      "stack_out": [
        "0x626f78"
      ]
    },
    "236": {
      "retsub": true,
      "op": "retsub"
    },
    "237": {
      "subroutine": "test_cases.state_proxies.contract.get_account",
      "params": {},
      "block": "get_account",
      "stack_in": [],
      "op": "pushbytes \"account\"",
      "defined_out": [
        "\"account\""
      ],
      "stack_out": [
        "\"account\""
      ]
    },
    "246": {
      "op": "log",
      "stack_out": []
    },
    "247": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "249": {
      "retsub": true,
      "op": "retsub"
    },
    "250": {
      "subroutine": "test_cases.state_proxies.contract.default_value",
      "params": {},
      "block": "default_value",
      "stack_in": [],
      "op": "pushbytes \"default\"",
      "defined_out": [
        "\"default\""
      ],
      "stack_out": [
        "\"default\""
      ]
    },
    "259": {
      "op": "log",
      "stack_out": []
    },
    "260": {
      "op": "intc_1 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "261": {
      "retsub": true,
      "op": "retsub"
    }
  }
}