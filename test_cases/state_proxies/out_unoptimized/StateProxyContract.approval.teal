#pragma version 10
#pragma typetrack false

// test_cases.state_proxies.contract.StateProxyContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.state_proxies.contract.StateProxyContract.__init__() -> void:
__init__:
    // state_proxies/contract.py:13
    // def __init__(self) -> None:
    proto 0 0
    // state_proxies/contract.py:17
    // self.global2 = GlobalState[UInt64](UInt64(0), key=b"g2", description="g2 description")
    pushbytes 0x6732
    intc_0 // 0
    app_global_put
    // state_proxies/contract.py:20
    // if Txn.num_app_args
    txn NumAppArgs
    intc_0 // 0
    !=
    // state_proxies/contract.py:21
    // else GlobalState(UInt64, key="town")
    pushbytes "town"
    // state_proxies/contract.py:19
    // GlobalState(UInt64, key="funky")
    pushbytes "funky"
    // state_proxies/contract.py:18-22
    // funky_town = (
    //     GlobalState(UInt64, key="funky")
    //     if Txn.num_app_args
    //     else GlobalState(UInt64, key="town")
    // )
    uncover 2
    // state_proxies/contract.py:19-21
    // GlobalState(UInt64, key="funky")
    // if Txn.num_app_args
    // else GlobalState(UInt64, key="town")
    select
    // state_proxies/contract.py:23
    // funky_town.value = UInt64(123)
    pushint 123 // 123
    app_global_put
    retsub


// test_cases.state_proxies.contract.StateProxyContract.create() -> void:
create:
    // state_proxies/contract.py:25-26
    // @arc4.abimethod(allow_actions=["OptIn"], create="require")
    // def create(self) -> None:
    proto 0 0
    // state_proxies/contract.py:27
    // self.global1.value = UInt64(1)
    pushbytes "g1"
    intc_1 // 1
    app_global_put
    // state_proxies/contract.py:28
    // self.local1[Txn.sender] = UInt64(2)
    txn Sender
    pushbytes "l1"
    pushint 2 // 2
    app_local_put
    // state_proxies/contract.py:29
    // self.local2[Txn.sender] = UInt64(3)
    txn Sender
    pushbytes 0x6c32
    pushint 3 // 3
    app_local_put
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    proto 0 1

approval_program_block@1:
    // state_proxies/contract.py:12
    // class StateProxyContract(ARC4Contract, state_totals=StateTotals(global_uints=3)):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@6

approval_program_abi_routing@2:
    // state_proxies/contract.py:12
    // class StateProxyContract(ARC4Contract, state_totals=StateTotals(global_uints=3)):
    txna ApplicationArgs 0
    pushbytes 0x4c5c61ba // method "create()void"
    swap
    match approval_program_create_route@3

approval_program_switch_case_default@4:

approval_program_switch_case_next@5:

approval_program_after_if_else@7:
    // state_proxies/contract.py:12
    // class StateProxyContract(ARC4Contract, state_totals=StateTotals(global_uints=3)):
    intc_0 // 0

approval_program_after_inlined_test_cases.state_proxies.contract.StateProxyContract.__puya_arc4_router__@8:
    retsub

approval_program_create_route@3:
    // state_proxies/contract.py:25
    // @arc4.abimethod(allow_actions=["OptIn"], create="require")
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub create
    intc_1 // 1
    b approval_program_after_inlined_test_cases.state_proxies.contract.StateProxyContract.__puya_arc4_router__@8

approval_program_bare_routing@6:
    b approval_program_after_if_else@7
