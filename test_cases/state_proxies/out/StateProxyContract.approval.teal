#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 42 0
    bytecblock "g1" "l1" 0x6c32 "box_map"
    txn ApplicationID
    bnz main_after_if_else@2
    // state_proxies/contract.py:22
    // self.global2 = GlobalState[UInt64](UInt64(0), key=b"g2", description="g2 description")
    pushbytes 0x6732
    intc_2 // 0
    app_global_put
    // state_proxies/contract.py:26
    // else GlobalState(UInt64, key="town")
    pushbytess "town" "funky" // "town", "funky"
    // state_proxies/contract.py:25
    // if Txn.num_app_args
    txn NumAppArgs
    // state_proxies/contract.py:24-26
    // GlobalState(UInt64, key="funky")
    // if Txn.num_app_args
    // else GlobalState(UInt64, key="town")
    select
    // state_proxies/contract.py:28
    // funky_town.value = UInt64(123)
    pushint 123 // 123
    app_global_put

main_after_if_else@2:
    // state_proxies/contract.py:17
    // class StateProxyContract(ARC4Contract, state_totals=StateTotals(global_uints=3)):
    pushbytes 0x4c5c61ba // method "create()void"
    txna ApplicationArgs 0
    match main_create_route@4

main_switch_case_next@5:
    // state_proxies/contract.py:17
    // class StateProxyContract(ARC4Contract, state_totals=StateTotals(global_uints=3)):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x44977246 0xbd8868b9 0xd0e289b0 0x74445702 // method "clear()void", method "order_of_eval_global()void", method "order_of_eval_local()void", method "order_of_eval_box()void"
    txna ApplicationArgs 0
    match clear order_of_eval_global order_of_eval_local order_of_eval_box
    err

main_create_route@4:
    // state_proxies/contract.py:31
    // @arc4.abimethod(allow_actions=["OptIn"], create="require")
    txn OnCompletion
    intc_0 // OptIn
    ==
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be OptIn && can only call when creating
    b create


// test_cases.state_proxies.contract.get_key() -> bytes:
get_key:
    // state_proxies/contract.py:62
    // log("key")
    pushbytes "key"
    log
    // state_proxies/contract.py:63
    // return Bytes(b"box")
    pushbytes 0x626f78
    retsub


// test_cases.state_proxies.contract.get_account() -> bytes:
get_account:
    // state_proxies/contract.py:68
    // log("account")
    pushbytes "account"
    log
    // state_proxies/contract.py:69
    // return Txn.sender
    txn Sender
    retsub


// test_cases.state_proxies.contract.default_value() -> uint64:
default_value:
    // state_proxies/contract.py:74
    // log("default")
    pushbytes "default"
    log
    // state_proxies/contract.py:75
    // return UInt64(42)
    intc_1 // 42
    retsub


// test_cases.state_proxies.contract.StateProxyContract.create[routing]() -> void:
create:
    // state_proxies/contract.py:33
    // self.global1.value = UInt64(1)
    bytec_0 // "g1"
    intc_0 // 1
    app_global_put
    // state_proxies/contract.py:34
    // self.local1[Txn.sender] = UInt64(2)
    txn Sender
    bytec_1 // "l1"
    pushint 2 // 2
    app_local_put
    // state_proxies/contract.py:35
    // self.local2[Txn.sender] = UInt64(3)
    txn Sender
    bytec_2 // 0x6c32
    pushint 3 // 3
    app_local_put
    // state_proxies/contract.py:31
    // @arc4.abimethod(allow_actions=["OptIn"], create="require")
    intc_0 // 1
    return


// test_cases.state_proxies.contract.StateProxyContract.clear[routing]() -> void:
clear:
    // state_proxies/contract.py:39
    // del self.global1.value
    bytec_0 // "g1"
    app_global_del
    // state_proxies/contract.py:40
    // del self.local1[Txn.sender]
    txn Sender
    bytec_1 // "l1"
    app_local_del
    // state_proxies/contract.py:41
    // del self.local2[Txn.sender]
    txn Sender
    bytec_2 // 0x6c32
    app_local_del
    // state_proxies/contract.py:42
    // del self.box_map[get_key()]
    callsub get_key
    bytec_3 // "box_map"
    swap
    concat
    box_del
    pop
    // state_proxies/contract.py:37
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.state_proxies.contract.StateProxyContract.order_of_eval_global[routing]() -> void:
order_of_eval_global:
    // state_proxies/contract.py:46
    // val = self.global1.get(default=default_value())
    callsub default_value
    intc_2 // 0
    bytec_0 // "g1"
    app_global_get_ex
    select
    // state_proxies/contract.py:47
    // assert val == 42
    intc_1 // 42
    ==
    // state_proxies/contract.py:44
    // @arc4.abimethod()
    return


// test_cases.state_proxies.contract.StateProxyContract.order_of_eval_local[routing]() -> void:
order_of_eval_local:
    // state_proxies/contract.py:51
    // val = self.local1.get(get_account(), default=default_value())
    callsub get_account
    callsub default_value
    swap
    intc_2 // 0
    bytec_1 // "l1"
    app_local_get_ex
    select
    // state_proxies/contract.py:52
    // assert val == 42
    intc_1 // 42
    ==
    // state_proxies/contract.py:49
    // @arc4.abimethod()
    return


// test_cases.state_proxies.contract.StateProxyContract.order_of_eval_box[routing]() -> void:
order_of_eval_box:
    // state_proxies/contract.py:56
    // val = self.box_map.get(get_key(), default=default_value())
    callsub get_key
    bytec_3 // "box_map"
    swap
    concat
    callsub default_value
    swap
    box_get
    swap
    btoi
    swap
    select
    // state_proxies/contract.py:57
    // assert val == 42
    intc_1 // 42
    ==
    // state_proxies/contract.py:54
    // @arc4.abimethod()
    return
