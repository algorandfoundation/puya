main test_cases.state_proxies.contract.StateProxyContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.state_proxies.contract.StateProxyContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.state_proxies.contract.StateProxyContract.__init__() -> void:
    block@0: // L13
        (app_global_put 0x6732 0u)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let funky_town#0: bytes = (select "town" "funky" tmp%1#0)
        (app_global_put funky_town#0 123u)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.state_proxies.contract.StateProxyContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.state_proxies.contract.StateProxyContract.__puya_arc4_router__() -> bool:
    block@0: // L12
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@2, * => block@3}
    block@2: // create_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        test_cases.state_proxies.contract.StateProxyContract.create()
        return 1u
    block@3: // switch_case_default_L12
        goto block@4
    block@4: // switch_case_next_L12
        goto block@6
    block@5: // bare_routing_L12
        goto block@6
    block@6: // after_if_else_L12
        return 0u

subroutine test_cases.state_proxies.contract.StateProxyContract.create() -> void:
    block@0: // L25
        (app_global_put "g1" 1u)
        let tmp%0#0: bytes = (txn Sender)
        (app_local_put tmp%0#0 "l1" 2u)
        let tmp%1#0: bytes = (txn Sender)
        (app_local_put tmp%1#0 0x6c32 3u)
        return 