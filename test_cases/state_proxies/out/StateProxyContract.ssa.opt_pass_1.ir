contract test_cases.state_proxies.contract.StateProxyContract:
    program approval:
        subroutine test_cases.state_proxies.contract.StateProxyContract.approval_program() -> bool:
            block@0: // L12
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L13
                test_cases.state_proxies.contract.StateProxyContract.__init__()
                goto block@2
            block@2: // entrypoint_L13
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create()void" => block@3, * => fail // reject transaction}
            block@3: // create_route_L25
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (== tmp%1#0 OptIn)
                (assert tmp%2#0) // OnCompletion is OptIn
                let tmp%3#0: bool = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                test_cases.state_proxies.contract.StateProxyContract.create()
                return 1u
        
        subroutine test_cases.state_proxies.contract.StateProxyContract.create() -> void:
            block@0: // L25
                (app_global_put "g1" 1u)
                let tmp%0#0: bytes = (txn Sender)
                (app_local_put tmp%0#0 "l1" 2u)
                let tmp%1#0: bytes = (txn Sender)
                (app_local_put tmp%1#0 0x6c32 3u)
                return 
        
        subroutine test_cases.state_proxies.contract.StateProxyContract.__init__() -> void:
            block@0: // L13
                (app_global_put 0x6732 0u)
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // ternary_true_L19
                let ternary_result%0#0: bytes = "funky"
                goto block@3
            block@2: // ternary_false_L19
                let ternary_result%0#1: bytes = "town"
                goto block@3
            block@3: // ternary_merge_L19
                let funky_town#0: bytes = Ï†(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                (app_global_put funky_town#0 123u)
                return 
    
    program clear-state:
        subroutine test_cases.state_proxies.contract.StateProxyContract.clear_state_program() -> bool:
            block@0: // L12
                return 1u