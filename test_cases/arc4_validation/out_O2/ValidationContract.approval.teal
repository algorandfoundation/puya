#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 9
    bytecblock "v"
    intc_1 // 0
    dup
    pushbytes ""
    dupn 4
    txn NumAppArgs
    bz main___algopy_default_create@34
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x557b8fdf 0x6197bbb1 0xa51cf941 0x8ecee90f 0x42ebf71c 0x96fa5040 0x0604cf1b 0x0fd16d98 0x0e97f8b4 0x3f68b7d1 0x175ba5ae 0x02d56afc 0x1c470dc0 0x248f6960 0xf00c449a 0xd2ee4351 0x5f9e13fa 0x34d0ceaf 0x8acfe94d 0x004c8235 0x42ea7c81 0xc221da6b 0x566d8ab5 0xebd36778 0x7690fe6b 0xf721e7e8 0x7c90f6e2 // method "validate_uint64(byte[])void", method "validate_uint8(byte[])void", method "validate_uint512(byte[])void", method "validate_ufixed64(byte[])void", method "validate_uint8_arr(byte[])void", method "validate_uint8_arr3(byte[])void", method "validate_bool(byte[])void", method "validate_byte(byte[])void", method "validate_string(byte[])void", method "validate_bytes(byte[])void", method "validate_address(byte[])void", method "validate_bool_arr(byte[])void", method "validate_bool_arr3(byte[])void", method "validate_static_tuple(byte[])void", method "validate_dynamic_tuple(byte[])void", method "validate_static_struct(byte[])void", method "validate_dynamic_struct(byte[])void", method "validate_static_struct_arr(byte[])void", method "validate_static_struct_arr3(byte[])void", method "validate_dynamic_struct_arr(byte[])void", method "validate_dynamic_struct_arr3(byte[])void", method "validate_native_static_struct(byte[])void", method "validate_native_dynamic_struct(byte[])void", method "validate_native_static_struct_arr(byte[])void", method "validate_native_static_struct_arr3(byte[])void", method "validate_native_dynamic_struct_arr(byte[])void", method "validate_native_dynamic_struct_arr3(byte[])void"
    txna ApplicationArgs 0
    match main_validate_uint64_route@4 main_validate_uint8_route@5 main_validate_uint512_route@6 main_validate_ufixed64_route@7 main_validate_uint8_arr_route@8 main_validate_uint8_arr3_route@9 main_validate_bool_route@10 main_validate_uint8_route@5 main_validate_string_route@12 main_validate_bytes_route@13 main_validate_address_route@14 main_validate_bool_arr_route@15 main_validate_bool_arr3_route@16 main_validate_static_tuple_route@17 main_validate_dynamic_tuple_route@18 main_validate_static_struct_route@19 main_validate_dynamic_struct_route@20 main_validate_static_struct_arr_route@21 main_validate_static_struct_arr3_route@22 main_validate_dynamic_struct_arr_route@23 main_validate_dynamic_struct_arr3_route@24 main_validate_native_static_struct_route@25 main_validate_native_dynamic_struct_route@26 main_validate_native_static_struct_arr_route@27 main_validate_native_static_struct_arr3_route@28 main_validate_native_dynamic_struct_arr_route@29 main_validate_native_dynamic_struct_arr3_route@30
    err

main_validate_native_dynamic_struct_arr3_route@30:
    txna ApplicationArgs 1
    extract 2 0
    dup
    bury 7
    bytec_0 // "v"
    swap
    app_global_put
    pushint 6 // 6
    bury 2
    intc_1 // 0
    bury 3

main_for_header@38:
    dig 2
    pushint 3 // 3
    <
    bz main_after_for@40
    dig 2
    dup
    intc_2 // 2
    *
    dig 7
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    swap
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    swap
    cover 3
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 3
    b main_for_header@38

main_after_for@40:
    dig 5
    len
    dig 2
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>
    intc_0 // 1
    return

main_validate_native_dynamic_struct_arr_route@29:
    txna ApplicationArgs 1
    dup
    extract 2 0
    bytec_0 // "v"
    dig 1
    app_global_put
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 8
    intc_2 // 2
    *
    bury 4
    len
    bury 2
    extract 4 0
    bury 7
    intc_1 // 0
    bury 3

main_for_header@43:
    dig 2
    dig 5
    <
    bz main_after_for@45
    dig 2
    dup
    intc_2 // 2
    *
    dig 8
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    swap
    intc_0 // 1
    +
    dig 8
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    swap
    cover 3
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 3
    b main_for_header@43

main_after_for@45:
    dig 1
    intc_2 // 2
    +
    dig 1
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>
    intc_0 // 1
    return

main_validate_native_static_struct_arr3_route@28:
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // "v"
    dig 1
    app_global_put
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>
    intc_0 // 1
    return

main_validate_native_static_struct_arr_route@27:
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // "v"
    dig 1
    app_global_put
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>
    intc_0 // 1
    return

main_validate_native_dynamic_struct_route@26:
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // "v"
    dig 1
    app_global_put
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct
    intc_0 // 1
    return

main_validate_native_static_struct_route@25:
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // "v"
    dig 1
    app_global_put
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct
    intc_0 // 1
    return

main_validate_dynamic_struct_arr3_route@24:
    txna ApplicationArgs 1
    extract 2 0
    bury 6
    pushint 6 // 6
    bury 2
    intc_1 // 0
    bury 3

main_for_header@56:
    dig 2
    pushint 3 // 3
    <
    bz main_after_for@58
    dig 2
    dup
    intc_2 // 2
    *
    dig 7
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    swap
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    swap
    cover 3
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 3
    b main_for_header@56

main_after_for@58:
    dig 5
    len
    dig 2
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>
    intc_0 // 1
    return

main_validate_dynamic_struct_arr_route@23:
    txna ApplicationArgs 1
    dup
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 7
    intc_2 // 2
    *
    bury 4
    len
    bury 2
    extract 4 0
    bury 7
    intc_1 // 0
    bury 3

main_for_header@61:
    dig 2
    dig 4
    <
    bz main_after_for@63
    dig 2
    dup
    intc_2 // 2
    *
    dig 8
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    swap
    intc_0 // 1
    +
    dig 7
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    swap
    cover 3
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 3
    b main_for_header@61

main_after_for@63:
    dig 1
    intc_2 // 2
    +
    dig 1
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>
    intc_0 // 1
    return

main_validate_static_struct_arr3_route@22:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>
    intc_0 // 1
    return

main_validate_static_struct_arr_route@21:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>
    intc_0 // 1
    return

main_validate_dynamic_struct_route@20:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct
    intc_0 // 1
    return

main_validate_static_struct_route@19:
    txna ApplicationArgs 1
    extract 2 0
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct
    intc_0 // 1
    return

main_validate_dynamic_tuple_route@18:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
    intc_0 // 1
    return

main_validate_static_tuple_route@17:
    txna ApplicationArgs 1
    extract 2 0
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
    intc_0 // 1
    return

main_validate_bool_arr3_route@16:
    txna ApplicationArgs 1
    extract 2 0
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.bool, 3>
    intc_0 // 1
    return

main_validate_bool_arr_route@15:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 7 // 7
    +
    pushint 8 // 8
    /
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.bool>
    intc_0 // 1
    return

main_validate_address_route@14:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    intc_0 // 1
    return

main_validate_bytes_route@13:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    intc_0 // 1
    return

main_validate_string_route@12:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    intc_0 // 1
    return

main_validate_uint8_route@5:
    txna ApplicationArgs 1
    extract 2 0
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.uint8
    intc_0 // 1
    return

main_validate_bool_route@10:
    txna ApplicationArgs 1
    extract 2 0
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    intc_0 // 1
    return

main_validate_uint8_arr3_route@9:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 3 // 3
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
    intc_0 // 1
    return

main_validate_uint8_arr_route@8:
    txna ApplicationArgs 1
    extract 2 0
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    intc_0 // 1
    return

main_validate_ufixed64_route@7:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.ufixed64x2
    intc_0 // 1
    return

main_validate_uint512_route@6:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for arc4.uint512
    intc_0 // 1
    return

main_validate_uint64_route@4:
    txna ApplicationArgs 1
    extract 2 0
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    intc_0 // 1
    return

main___algopy_default_create@34:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return
