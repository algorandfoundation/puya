main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@34
    block@2: // abi_routing_L43
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "validate_uint64(byte[])void" => block@4, method "validate_uint8(byte[])void" => block@5, method "validate_uint512(byte[])void" => block@6, method "validate_ufixed64(byte[])void" => block@7, method "validate_uint8_arr(byte[])void" => block@8, method "validate_uint8_arr3(byte[])void" => block@9, method "validate_bool(byte[])void" => block@10, method "validate_byte(byte[])void" => block@5, method "validate_string(byte[])void" => block@12, method "validate_bytes(byte[])void" => block@13, method "validate_address(byte[])void" => block@14, method "validate_bool_arr(byte[])void" => block@15, method "validate_bool_arr3(byte[])void" => block@16, method "validate_static_tuple(byte[])void" => block@17, method "validate_dynamic_tuple(byte[])void" => block@18, method "validate_static_struct(byte[])void" => block@19, method "validate_dynamic_struct(byte[])void" => block@20, method "validate_static_struct_arr(byte[])void" => block@21, method "validate_static_struct_arr3(byte[])void" => block@22, method "validate_dynamic_struct_arr(byte[])void" => block@23, method "validate_dynamic_struct_arr3(byte[])void" => block@24, method "validate_native_static_struct(byte[])void" => block@25, method "validate_native_dynamic_struct(byte[])void" => block@26, method "validate_native_static_struct_arr(byte[])void" => block@27, method "validate_native_static_struct_arr3(byte[])void" => block@28, method "validate_native_dynamic_struct_arr(byte[])void" => block@29, method "validate_native_dynamic_struct_arr3(byte[])void" => block@30, * => block@33}
    block@4: // validate_uint64_route_L44
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        exit 1u
    block@5: // validate_uint8_route_L48
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        exit 1u
    block@6: // validate_uint512_route_L52
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        exit 1u
    block@7: // validate_ufixed64_route_L56
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.ufixed64x2
        exit 1u
    block@8: // validate_uint8_arr_route_L60
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#2: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#2)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@9: // validate_uint8_arr3_route_L64
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 3u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        exit 1u
    block@10: // validate_bool_route_L68
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        exit 1u
    block@12: // validate_string_route_L76
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#2: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#2)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@13: // validate_bytes_route_L80
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#2: uint64 = (+ aggregate%array_length%2#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#2)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@14: // validate_address_route_L84
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        exit 1u
    block@15: // validate_bool_arr_route_L88
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#2: uint64 = (+ aggregate%array_length%3#0 7u)
        let div_floor%0#0: uint64 = (/ add%0#2 8u)
        let add%1#0: uint64 = (+ div_floor%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%1#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.bool>
        exit 1u
    block@16: // validate_bool_arr3_route_L92
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.bool, 3>
        exit 1u
    block@17: // validate_static_tuple_route_L96
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
        exit 1u
    block@18: // validate_dynamic_tuple_route_L100
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%0#0: uint64 = (len value#0)
        let aggregate%substring3%0#0: bytes = (substring3 value#0 extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%4#0 13u)
        let eq%1#0: bool = (== aggregate%len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        exit 1u
    block@19: // validate_static_struct_route_L104
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct
        exit 1u
    block@20: // validate_dynamic_struct_route_L108
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%1#0: uint64 = (len value#0)
        let aggregate%substring3%1#0: bytes = (substring3 value#0 extract_uint16%0#0 aggregate%len%1#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 aggregate%substring3%1#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%5#0 13u)
        let eq%1#0: bool = (== aggregate%len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct
        exit 1u
    block@21: // validate_static_struct_arr_route_L112
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let mul%0#1: uint64 = (* aggregate%array_length%6#0 9u)
        let add%0#2: uint64 = (+ mul%0#1 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#2)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>
        exit 1u
    block@22: // validate_static_struct_arr3_route_L116
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>
        exit 1u
    block@23: // validate_dynamic_struct_arr_route_L120
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* aggregate%array_length%7#0 2u)
        let total_length%0#0: uint64 = (len value#0)
        let array_data%0#0: bytes = ((extract 4 0) tmp%0#2)
        let index%0#0: uint64 = 0u
        goto block@61
    block@61: // for_header_L122
        let continue_looping%0#0: bool = (< index%0#0 aggregate%array_length%7#0)
        goto continue_looping%0#0 ? block@62 : block@63
    block@62: // for_body_L122
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%7#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len array_data%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 array_data%0#0 item_offset%0#0 aggregate%end_offset%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 aggregate%substring3%2#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%2#0: uint64 = (len aggregate%substring3%2#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%substring3%2#0 extract_uint16%0#0 aggregate%len%2#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 aggregate%substring3%4#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%10#0 13u)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        let index%0#0: uint64 = aggregate%next_index%0#0
        goto block@61
    block@63: // after_for_L122
        let num_bytes%1#0: uint64 = (+ num_bytes%0#0 2u)
        let eq%1#0: bool = (== total_length%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>
        exit 1u
    block@24: // validate_dynamic_struct_arr3_route_L124
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        let num_bytes%0#0: uint64 = 6u
        let index%0#0: uint64 = 0u
        goto block@56
    block@56: // for_header_L126
        let continue_looping%0#0: bool = (< index%0#0 3u)
        goto continue_looping%0#0 ? block@57 : block@58
    block@57: // for_body_L126
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let aggregate%next_index%2#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%2#0: uint64 = (- 3u aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len value#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 value#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%5#0: bytes = (substring3 value#0 item_offset%0#0 aggregate%end_offset%2#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 aggregate%substring3%5#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%5#0)
        let aggregate%substring3%7#0: bytes = (substring3 aggregate%substring3%5#0 extract_uint16%0#0 aggregate%len%3#0)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 aggregate%substring3%7#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%11#0 13u)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        let index%0#0: uint64 = aggregate%next_index%2#0
        goto block@56
    block@58: // after_for_L126
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>
        exit 1u
    block@25: // validate_native_static_struct_route_L128
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct
        exit 1u
    block@26: // validate_native_dynamic_struct_route_L135
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%4#0: uint64 = (len value#0)
        let aggregate%substring3%8#0: bytes = (substring3 value#0 extract_uint16%0#0 aggregate%len%4#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 aggregate%substring3%8#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%12#0 13u)
        let eq%1#0: bool = (== aggregate%len%4#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct
        exit 1u
    block@27: // validate_native_static_struct_arr_route_L142
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let mul%0#1: uint64 = (* aggregate%array_length%13#0 9u)
        let add%0#2: uint64 = (+ mul%0#1 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#2)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>
        exit 1u
    block@28: // validate_native_static_struct_arr3_route_L149
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>
        exit 1u
    block@29: // validate_native_dynamic_struct_arr_route_L156
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* aggregate%array_length%14#0 2u)
        let total_length%0#0: uint64 = (len value#0)
        let array_data%0#0: bytes = ((extract 4 0) tmp%0#2)
        let index%0#0: uint64 = 0u
        goto block@43
    block@43: // for_header_L161
        let continue_looping%0#0: bool = (< index%0#0 aggregate%array_length%14#0)
        goto continue_looping%0#0 ? block@44 : block@45
    block@44: // for_body_L161
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let aggregate%next_index%4#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%4#0: uint64 = (- aggregate%array_length%14#0 aggregate%next_index%4#0) // on error: index access is out of bounds
        let aggregate%end_of_array%4#0: uint64 = (len array_data%0#0)
        let aggregate%next_item_offset_offset%4#0: uint64 = (* aggregate%next_index%4#0 2u)
        let aggregate%next_item_offset%4#0: uint64 = (extract_uint16 array_data%0#0 aggregate%next_item_offset_offset%4#0)
        let aggregate%end_offset%4#0: uint64 = (select aggregate%end_of_array%4#0 aggregate%next_item_offset%4#0 aggregate%has_next%4#0)
        let aggregate%substring3%9#0: bytes = (substring3 array_data%0#0 item_offset%0#0 aggregate%end_offset%4#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 aggregate%substring3%9#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%5#0: uint64 = (len aggregate%substring3%9#0)
        let aggregate%substring3%11#0: bytes = (substring3 aggregate%substring3%9#0 extract_uint16%0#0 aggregate%len%5#0)
        let aggregate%array_length%17#0: uint64 = (extract_uint16 aggregate%substring3%11#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%17#0 13u)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        let index%0#0: uint64 = aggregate%next_index%4#0
        goto block@43
    block@45: // after_for_L161
        let num_bytes%1#0: uint64 = (+ num_bytes%0#0 2u)
        let eq%1#0: bool = (== total_length%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>
        exit 1u
    block@30: // validate_native_dynamic_struct_arr3_route_L163
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) tmp%0#2)
        (app_global_put "v" value#0)
        let num_bytes%0#0: uint64 = 6u
        let index%0#0: uint64 = 0u
        goto block@38
    block@38: // for_header_L168
        let continue_looping%0#0: bool = (< index%0#0 3u)
        goto continue_looping%0#0 ? block@39 : block@40
    block@39: // for_body_L168
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let aggregate%next_index%6#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%6#0: uint64 = (- 3u aggregate%next_index%6#0) // on error: index access is out of bounds
        let aggregate%end_of_array%6#0: uint64 = (len value#0)
        let aggregate%next_item_offset_offset%6#0: uint64 = (* aggregate%next_index%6#0 2u)
        let aggregate%next_item_offset%6#0: uint64 = (extract_uint16 value#0 aggregate%next_item_offset_offset%6#0)
        let aggregate%end_offset%6#0: uint64 = (select aggregate%end_of_array%6#0 aggregate%next_item_offset%6#0 aggregate%has_next%6#0)
        let aggregate%substring3%12#0: bytes = (substring3 value#0 item_offset%0#0 aggregate%end_offset%6#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 aggregate%substring3%12#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%len%6#0: uint64 = (len aggregate%substring3%12#0)
        let aggregate%substring3%14#0: bytes = (substring3 aggregate%substring3%12#0 extract_uint16%0#0 aggregate%len%6#0)
        let aggregate%array_length%18#0: uint64 = (extract_uint16 aggregate%substring3%14#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%18#0 13u)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        let index%0#0: uint64 = aggregate%next_index%6#0
        goto block@38
    block@40: // after_for_L168
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>
        exit 1u
    block@33: // after_if_else_L43
        fail
    block@34: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u