{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AA0CA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAwHK;;;;;;AAPA;;;;;;AAPA;;;;;;AAPA;;;;;;AAPA;;;;;;AAPA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAvwC;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEH;;;;;;AAE8B;AAC3B;;AAAA;AAEA;AADyC;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEH;;;;;;AAE8B;AAC3B;;AAAA;AAEA;AAD+C;AAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEH;;;;;;AAE8B;AAC3B;;AAAA;AAEA;AADuE;AACvE;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEH;;;;;;AAE8B;AAC3B;;AAAA;AAEA;AADgD;AAChwE;AACxE;AAAA;AAAA;;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 0 9"
    },
    "7": {
      "op": "bytecblock \"v\""
    },
    "11": {
      "op": "b main_block@0"
    },
    "14": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "17": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "20": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "21": {
      "op": "bz main___algopy_default_create@34",
      "stack_out": []
    },
    "24": {
      "op": "b main_abi_routing@2"
    },
    "27": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "29": {
      "op": "intc_2 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "30": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "31": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "32": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "34": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "35": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "36": {
      "op": "bz main_create_NoOp@32",
      "stack_out": []
    },
    "39": {
      "op": "b main_call_NoOp@3"
    },
    "42": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "45": {
      "op": "pushbytes 0x557b8fdf // method \"validate_uint64(byte[])void\"",
      "defined_out": [
        "Method(validate_uint64(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)"
      ]
    },
    "51": {
      "op": "pushbytes 0x6197bbb1 // method \"validate_uint8(byte[])void\"",
      "defined_out": [
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)"
      ]
    },
    "57": {
      "op": "pushbytes 0xa51cf941 // method \"validate_uint512(byte[])void\"",
      "defined_out": [
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)"
      ]
    },
    "63": {
      "op": "pushbytes 0x8ecee90f // method \"validate_ufixed64(byte[])void\"",
      "defined_out": [
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)"
      ]
    },
    "69": {
      "op": "pushbytes 0x42ebf71c // method \"validate_uint8_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)"
      ]
    },
    "75": {
      "op": "pushbytes 0x96fa5040 // method \"validate_uint8_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)"
      ]
    },
    "81": {
      "op": "pushbytes 0x0604cf1b // method \"validate_bool(byte[])void\"",
      "defined_out": [
        "Method(validate_bool(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)"
      ]
    },
    "87": {
      "op": "pushbytes 0x0fd16d98 // method \"validate_byte(byte[])void\"",
      "defined_out": [
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)"
      ]
    },
    "93": {
      "op": "pushbytes 0x0e97f8b4 // method \"validate_string(byte[])void\"",
      "defined_out": [
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)"
      ]
    },
    "99": {
      "op": "pushbytes 0x3f68b7d1 // method \"validate_bytes(byte[])void\"",
      "defined_out": [
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)"
      ]
    },
    "105": {
      "op": "pushbytes 0x175ba5ae // method \"validate_address(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)"
      ]
    },
    "111": {
      "op": "pushbytes 0x02d56afc // method \"validate_bool_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)"
      ]
    },
    "117": {
      "op": "pushbytes 0x1c470dc0 // method \"validate_bool_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)"
      ]
    },
    "123": {
      "op": "pushbytes 0x248f6960 // method \"validate_static_tuple(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)"
      ]
    },
    "129": {
      "op": "pushbytes 0xf00c449a // method \"validate_dynamic_tuple(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)"
      ]
    },
    "135": {
      "op": "pushbytes 0xd2ee4351 // method \"validate_static_struct(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)"
      ]
    },
    "141": {
      "op": "pushbytes 0x5f9e13fa // method \"validate_dynamic_struct(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)"
      ]
    },
    "147": {
      "op": "pushbytes 0x34d0ceaf // method \"validate_static_struct_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)"
      ]
    },
    "153": {
      "op": "pushbytes 0x8acfe94d // method \"validate_static_struct_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)"
      ]
    },
    "159": {
      "op": "pushbytes 0x004c8235 // method \"validate_dynamic_struct_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)"
      ]
    },
    "165": {
      "op": "pushbytes 0x42ea7c81 // method \"validate_dynamic_struct_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)"
      ]
    },
    "171": {
      "op": "pushbytes 0xc221da6b // method \"validate_native_static_struct(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)"
      ]
    },
    "177": {
      "op": "pushbytes 0x566d8ab5 // method \"validate_native_dynamic_struct(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)"
      ]
    },
    "183": {
      "op": "pushbytes 0xebd36778 // method \"validate_native_static_struct_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)"
      ]
    },
    "189": {
      "op": "pushbytes 0x7690fe6b // method \"validate_native_static_struct_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)"
      ]
    },
    "195": {
      "op": "pushbytes 0xf721e7e8 // method \"validate_native_dynamic_struct_arr(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)"
      ]
    },
    "201": {
      "op": "pushbytes 0x7c90f6e2 // method \"validate_native_dynamic_struct_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)"
      ]
    },
    "207": {
      "op": "uncover 27",
      "stack_out": [
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)",
        "tmp%6#0"
      ]
    },
    "209": {
      "op": "match main_validate_uint64_route@4 main_validate_uint8_route@5 main_validate_uint512_route@6 main_validate_ufixed64_route@7 main_validate_uint8_arr_route@8 main_validate_uint8_arr3_route@9 main_validate_bool_route@10 main_validate_byte_route@11 main_validate_string_route@12 main_validate_bytes_route@13 main_validate_address_route@14 main_validate_bool_arr_route@15 main_validate_bool_arr3_route@16 main_validate_static_tuple_route@17 main_validate_dynamic_tuple_route@18 main_validate_static_struct_route@19 main_validate_dynamic_struct_route@20 main_validate_static_struct_arr_route@21 main_validate_static_struct_arr3_route@22 main_validate_dynamic_struct_arr_route@23 main_validate_dynamic_struct_arr3_route@24 main_validate_native_static_struct_route@25 main_validate_native_dynamic_struct_route@26 main_validate_native_static_struct_arr_route@27 main_validate_native_static_struct_arr3_route@28 main_validate_native_dynamic_struct_arr_route@29 main_validate_native_dynamic_struct_arr3_route@30",
      "stack_out": []
    },
    "265": {
      "op": "b main_switch_case_next@31"
    },
    "268": {
      "block": "main_switch_case_next@31",
      "stack_in": [],
      "op": "b main_after_if_else@33"
    },
    "271": {
      "block": "main_after_if_else@33",
      "stack_in": [],
      "op": "b main_after_if_else@35"
    },
    "274": {
      "block": "main_after_if_else@35",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "275": {
      "block": "main_validate_native_dynamic_struct_arr3_route@30",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]",
      "op": "callsub validate_native_dynamic_struct_arr3"
    },
    "278": {
      "op": "b main_switch_case_next@31"
    },
    "281": {
      "block": "main_validate_native_dynamic_struct_arr_route@29",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]",
      "op": "callsub validate_native_dynamic_struct_arr"
    },
    "284": {
      "op": "b main_switch_case_next@31"
    },
    "287": {
      "block": "main_validate_native_static_struct_arr3_route@28",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]",
      "op": "callsub validate_native_static_struct_arr3"
    },
    "290": {
      "op": "b main_switch_case_next@31"
    },
    "293": {
      "block": "main_validate_native_static_struct_arr_route@27",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]",
      "op": "callsub validate_native_static_struct_arr"
    },
    "296": {
      "op": "b main_switch_case_next@31"
    },
    "299": {
      "block": "main_validate_native_dynamic_struct_route@26",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]",
      "op": "callsub validate_native_dynamic_struct"
    },
    "302": {
      "op": "b main_switch_case_next@31"
    },
    "305": {
      "block": "main_validate_native_static_struct_route@25",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]",
      "op": "callsub validate_native_static_struct"
    },
    "308": {
      "op": "b main_switch_case_next@31"
    },
    "311": {
      "block": "main_validate_dynamic_struct_arr3_route@24",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]",
      "op": "callsub validate_dynamic_struct_arr3"
    },
    "314": {
      "op": "b main_switch_case_next@31"
    },
    "317": {
      "block": "main_validate_dynamic_struct_arr_route@23",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]",
      "op": "callsub validate_dynamic_struct_arr"
    },
    "320": {
      "op": "b main_switch_case_next@31"
    },
    "323": {
      "block": "main_validate_static_struct_arr3_route@22",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]",
      "op": "callsub validate_static_struct_arr3"
    },
    "326": {
      "op": "b main_switch_case_next@31"
    },
    "329": {
      "block": "main_validate_static_struct_arr_route@21",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]",
      "op": "callsub validate_static_struct_arr"
    },
    "332": {
      "op": "b main_switch_case_next@31"
    },
    "335": {
      "block": "main_validate_dynamic_struct_route@20",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]",
      "op": "callsub validate_dynamic_struct"
    },
    "338": {
      "op": "b main_switch_case_next@31"
    },
    "341": {
      "block": "main_validate_static_struct_route@19",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]",
      "op": "callsub validate_static_struct"
    },
    "344": {
      "op": "b main_switch_case_next@31"
    },
    "347": {
      "block": "main_validate_dynamic_tuple_route@18",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]",
      "op": "callsub validate_dynamic_tuple"
    },
    "350": {
      "op": "b main_switch_case_next@31"
    },
    "353": {
      "block": "main_validate_static_tuple_route@17",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]",
      "op": "callsub validate_static_tuple"
    },
    "356": {
      "op": "b main_switch_case_next@31"
    },
    "359": {
      "block": "main_validate_bool_arr3_route@16",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]",
      "op": "callsub validate_bool_arr3"
    },
    "362": {
      "op": "b main_switch_case_next@31"
    },
    "365": {
      "block": "main_validate_bool_arr_route@15",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]",
      "op": "callsub validate_bool_arr"
    },
    "368": {
      "op": "b main_switch_case_next@31"
    },
    "371": {
      "block": "main_validate_address_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]",
      "op": "callsub validate_address"
    },
    "374": {
      "op": "b main_switch_case_next@31"
    },
    "377": {
      "block": "main_validate_bytes_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]",
      "op": "callsub validate_bytes"
    },
    "380": {
      "op": "b main_switch_case_next@31"
    },
    "383": {
      "block": "main_validate_string_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]",
      "op": "callsub validate_string"
    },
    "386": {
      "op": "b main_switch_case_next@31"
    },
    "389": {
      "block": "main_validate_byte_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]",
      "op": "callsub validate_byte"
    },
    "392": {
      "op": "b main_switch_case_next@31"
    },
    "395": {
      "block": "main_validate_bool_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]",
      "op": "callsub validate_bool"
    },
    "398": {
      "op": "b main_switch_case_next@31"
    },
    "401": {
      "block": "main_validate_uint8_arr3_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]",
      "op": "callsub validate_uint8_arr3"
    },
    "404": {
      "op": "b main_switch_case_next@31"
    },
    "407": {
      "block": "main_validate_uint8_arr_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]",
      "op": "callsub validate_uint8_arr"
    },
    "410": {
      "op": "b main_switch_case_next@31"
    },
    "413": {
      "block": "main_validate_ufixed64_route@7",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]",
      "op": "callsub validate_ufixed64"
    },
    "416": {
      "op": "b main_switch_case_next@31"
    },
    "419": {
      "block": "main_validate_uint512_route@6",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]",
      "op": "callsub validate_uint512"
    },
    "422": {
      "op": "b main_switch_case_next@31"
    },
    "425": {
      "block": "main_validate_uint8_route@5",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]",
      "op": "callsub validate_uint8"
    },
    "428": {
      "op": "b main_switch_case_next@31"
    },
    "431": {
      "block": "main_validate_uint64_route@4",
      "stack_in": [],
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]",
      "op": "callsub validate_uint64"
    },
    "434": {
      "op": "b main_switch_case_next@31"
    },
    "437": {
      "block": "main_create_NoOp@32",
      "stack_in": [],
      "op": "b main_after_if_else@33"
    },
    "440": {
      "block": "main___algopy_default_create@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "442": {
      "op": "intc_2 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "443": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "444": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "446": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "448": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "449": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "450": {
      "op": "b main_block@37"
    },
    "453": {
      "block": "main_block@37",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.arc4_validation.contract.ValidationContract.__algopy_default_create@38"
    },
    "456": {
      "block": "main_after_inlined_test_cases.arc4_validation.contract.ValidationContract.__algopy_default_create@38",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": []
    },
    "458": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]",
      "params": {},
      "block": "validate_uint64",
      "stack_in": [],
      "op": "b validate_uint64_block@0"
    },
    "461": {
      "block": "validate_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "467": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint64",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]",
      "params": {},
      "block": "validate_uint8",
      "stack_in": [],
      "op": "b validate_uint8_block@0"
    },
    "475": {
      "block": "validate_uint8_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "478": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "481": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8",
      "stack_out": []
    },
    "484": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "485": {
      "op": "return",
      "stack_out": []
    },
    "486": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]",
      "params": {},
      "block": "validate_uint512",
      "stack_in": [],
      "op": "b validate_uint512_block@0"
    },
    "489": {
      "block": "validate_uint512_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "492": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "495": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint512",
      "stack_out": []
    },
    "498": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "499": {
      "op": "return",
      "stack_out": []
    },
    "500": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]",
      "params": {},
      "block": "validate_ufixed64",
      "stack_in": [],
      "op": "b validate_ufixed64_block@0"
    },
    "503": {
      "block": "validate_ufixed64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "506": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "509": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64",
      "stack_out": []
    },
    "512": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "513": {
      "op": "return",
      "stack_out": []
    },
    "514": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]",
      "params": {},
      "block": "validate_uint8_arr",
      "stack_in": [],
      "op": "b validate_uint8_arr_block@0"
    },
    "517": {
      "block": "validate_uint8_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "520": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "523": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr",
      "stack_out": []
    },
    "526": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]",
      "params": {},
      "block": "validate_uint8_arr3",
      "stack_in": [],
      "op": "b validate_uint8_arr3_block@0"
    },
    "531": {
      "block": "validate_uint8_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "534": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "537": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3",
      "stack_out": []
    },
    "540": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]",
      "params": {},
      "block": "validate_bool",
      "stack_in": [],
      "op": "b validate_bool_block@0"
    },
    "545": {
      "block": "validate_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "548": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "551": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool",
      "stack_out": []
    },
    "554": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "555": {
      "op": "return",
      "stack_out": []
    },
    "556": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]",
      "params": {},
      "block": "validate_byte",
      "stack_in": [],
      "op": "b validate_byte_block@0"
    },
    "559": {
      "block": "validate_byte_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "562": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "565": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_byte",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_byte",
      "stack_out": []
    },
    "568": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "569": {
      "op": "return",
      "stack_out": []
    },
    "570": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]",
      "params": {},
      "block": "validate_string",
      "stack_in": [],
      "op": "b validate_string_block@0"
    },
    "573": {
      "block": "validate_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "576": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "579": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_string",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_string",
      "stack_out": []
    },
    "582": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "583": {
      "op": "return",
      "stack_out": []
    },
    "584": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]",
      "params": {},
      "block": "validate_bytes",
      "stack_in": [],
      "op": "b validate_bytes_block@0"
    },
    "587": {
      "block": "validate_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "590": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "593": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_bytes",
      "stack_out": []
    },
    "596": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "597": {
      "op": "return",
      "stack_out": []
    },
    "598": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]",
      "params": {},
      "block": "validate_address",
      "stack_in": [],
      "op": "b validate_address_block@0"
    },
    "601": {
      "block": "validate_address_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "604": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "607": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_address",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_address",
      "stack_out": []
    },
    "610": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "611": {
      "op": "return",
      "stack_out": []
    },
    "612": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]",
      "params": {},
      "block": "validate_bool_arr",
      "stack_in": [],
      "op": "b validate_bool_arr_block@0"
    },
    "615": {
      "block": "validate_bool_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "618": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "621": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr",
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "625": {
      "op": "return",
      "stack_out": []
    },
    "626": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]",
      "params": {},
      "block": "validate_bool_arr3",
      "stack_in": [],
      "op": "b validate_bool_arr3_block@0"
    },
    "629": {
      "block": "validate_bool_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "632": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "635": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3",
      "stack_out": []
    },
    "638": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "639": {
      "op": "return",
      "stack_out": []
    },
    "640": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]",
      "params": {},
      "block": "validate_static_tuple",
      "stack_in": [],
      "op": "b validate_static_tuple_block@0"
    },
    "643": {
      "block": "validate_static_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "646": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "649": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple",
      "stack_out": []
    },
    "652": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "653": {
      "op": "return",
      "stack_out": []
    },
    "654": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]",
      "params": {},
      "block": "validate_dynamic_tuple",
      "stack_in": [],
      "op": "b validate_dynamic_tuple_block@0"
    },
    "657": {
      "block": "validate_dynamic_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "660": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "663": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple",
      "stack_out": []
    },
    "666": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "667": {
      "op": "return",
      "stack_out": []
    },
    "668": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]",
      "params": {},
      "block": "validate_static_struct",
      "stack_in": [],
      "op": "b validate_static_struct_block@0"
    },
    "671": {
      "block": "validate_static_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "674": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "677": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct",
      "stack_out": []
    },
    "680": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "681": {
      "op": "return",
      "stack_out": []
    },
    "682": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]",
      "params": {},
      "block": "validate_dynamic_struct",
      "stack_in": [],
      "op": "b validate_dynamic_struct_block@0"
    },
    "685": {
      "block": "validate_dynamic_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "688": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "691": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct",
      "stack_out": []
    },
    "694": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "695": {
      "op": "return",
      "stack_out": []
    },
    "696": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]",
      "params": {},
      "block": "validate_static_struct_arr",
      "stack_in": [],
      "op": "b validate_static_struct_arr_block@0"
    },
    "699": {
      "block": "validate_static_struct_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "702": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "705": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr",
      "stack_out": []
    },
    "708": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "709": {
      "op": "return",
      "stack_out": []
    },
    "710": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]",
      "params": {},
      "block": "validate_static_struct_arr3",
      "stack_in": [],
      "op": "b validate_static_struct_arr3_block@0"
    },
    "713": {
      "block": "validate_static_struct_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "716": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "719": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3",
      "stack_out": []
    },
    "722": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "723": {
      "op": "return",
      "stack_out": []
    },
    "724": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]",
      "params": {},
      "block": "validate_dynamic_struct_arr",
      "stack_in": [],
      "op": "b validate_dynamic_struct_arr_block@0"
    },
    "727": {
      "block": "validate_dynamic_struct_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "730": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "733": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr",
      "stack_out": []
    },
    "736": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "737": {
      "op": "return",
      "stack_out": []
    },
    "738": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]",
      "params": {},
      "block": "validate_dynamic_struct_arr3",
      "stack_in": [],
      "op": "b validate_dynamic_struct_arr3_block@0"
    },
    "741": {
      "block": "validate_dynamic_struct_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "744": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "747": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3",
      "stack_out": []
    },
    "750": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "751": {
      "op": "return",
      "stack_out": []
    },
    "752": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]",
      "params": {},
      "block": "validate_native_static_struct",
      "stack_in": [],
      "op": "b validate_native_static_struct_block@0"
    },
    "755": {
      "block": "validate_native_static_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "758": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "761": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct",
      "stack_out": []
    },
    "764": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "765": {
      "op": "return",
      "stack_out": []
    },
    "766": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct",
      "stack_in": [],
      "op": "b validate_native_dynamic_struct_block@0"
    },
    "769": {
      "block": "validate_native_dynamic_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "772": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "775": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct",
      "stack_out": []
    },
    "778": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "779": {
      "op": "return",
      "stack_out": []
    },
    "780": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]",
      "params": {},
      "block": "validate_native_static_struct_arr",
      "stack_in": [],
      "op": "b validate_native_static_struct_arr_block@0"
    },
    "783": {
      "block": "validate_native_static_struct_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "786": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "789": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr",
      "stack_out": []
    },
    "792": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "793": {
      "op": "return",
      "stack_out": []
    },
    "794": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]",
      "params": {},
      "block": "validate_native_static_struct_arr3",
      "stack_in": [],
      "op": "b validate_native_static_struct_arr3_block@0"
    },
    "797": {
      "block": "validate_native_static_struct_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "800": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "803": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3",
      "stack_out": []
    },
    "806": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "807": {
      "op": "return",
      "stack_out": []
    },
    "808": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct_arr",
      "stack_in": [],
      "op": "b validate_native_dynamic_struct_arr_block@0"
    },
    "811": {
      "block": "validate_native_dynamic_struct_arr_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "814": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "817": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr",
      "stack_out": []
    },
    "820": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "821": {
      "op": "return",
      "stack_out": []
    },
    "822": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct_arr3",
      "stack_in": [],
      "op": "b validate_native_dynamic_struct_arr3_block@0"
    },
    "825": {
      "block": "validate_native_dynamic_struct_arr3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "828": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "831": {
      "callsub": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3",
      "op": "callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3",
      "stack_out": []
    },
    "834": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "835": {
      "op": "return",
      "stack_out": []
    },
    "836": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "839": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_uint64_block@0"
    },
    "842": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "844": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "845": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "847": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "848": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "849": {
      "retsub": true,
      "op": "retsub"
    },
    "850": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "853": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_block@0"
    },
    "856": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "858": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "859": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "860": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "861": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": []
    },
    "862": {
      "retsub": true,
      "op": "retsub"
    },
    "863": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "866": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_uint512_block@0"
    },
    "869": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "871": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "872": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "64"
      ]
    },
    "874": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "875": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "stack_out": []
    },
    "876": {
      "retsub": true,
      "op": "retsub"
    },
    "877": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "880": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64_block@0"
    },
    "883": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "885": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "886": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "888": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "889": {
      "error": "invalid number of bytes for arc4.ufixed64x2",
      "op": "assert // invalid number of bytes for arc4.ufixed64x2",
      "stack_out": []
    },
    "890": {
      "retsub": true,
      "op": "retsub"
    },
    "891": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "894": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr_block@0"
    },
    "897": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "899": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "900": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)",
        "0"
      ]
    },
    "901": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "length%0#0"
      ]
    },
    "902": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "length%0#0",
        "1"
      ]
    },
    "903": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "mul%0#0"
      ]
    },
    "904": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "905": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "add%0#0"
      ]
    },
    "906": {
      "op": "uncover 1",
      "stack_out": [
        "add%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "908": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "909": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "910": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "911": {
      "retsub": true,
      "op": "retsub"
    },
    "912": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "915": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3_block@0"
    },
    "918": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint8[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[3])%0#0"
      ]
    },
    "920": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "921": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "3"
      ]
    },
    "923": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "924": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 3>",
      "stack_out": []
    },
    "925": {
      "retsub": true,
      "op": "retsub"
    },
    "926": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "929": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_bool_block@0"
    },
    "932": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "934": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "935": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "936": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "937": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "stack_out": []
    },
    "938": {
      "retsub": true,
      "op": "retsub"
    },
    "939": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_byte",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_byte",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "942": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_byte_block@0"
    },
    "945": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_byte_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "947": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "948": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "949": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "950": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": []
    },
    "951": {
      "retsub": true,
      "op": "retsub"
    },
    "952": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "955": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_string_block@0"
    },
    "958": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_string_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "960": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "961": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)",
        "0"
      ]
    },
    "962": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "length%0#0"
      ]
    },
    "963": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "length%0#0",
        "1"
      ]
    },
    "964": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "mul%0#0"
      ]
    },
    "965": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "966": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "add%0#0"
      ]
    },
    "967": {
      "op": "uncover 1",
      "stack_out": [
        "add%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "969": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "970": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "971": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "972": {
      "retsub": true,
      "op": "retsub"
    },
    "973": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "976": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_bytes_block@0"
    },
    "979": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "981": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "982": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0 (copy)",
        "0"
      ]
    },
    "983": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "length%0#0"
      ]
    },
    "984": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "length%0#0",
        "1"
      ]
    },
    "985": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "mul%0#0"
      ]
    },
    "986": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "987": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "add%0#0"
      ]
    },
    "988": {
      "op": "uncover 1",
      "stack_out": [
        "add%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "990": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "991": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "992": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "993": {
      "retsub": true,
      "op": "retsub"
    },
    "994": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_address",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "997": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_address_block@0"
    },
    "1000": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_address_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "1002": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1003": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "32"
      ]
    },
    "1005": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1006": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": []
    },
    "1007": {
      "retsub": true,
      "op": "retsub"
    },
    "1008": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1011": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr_block@0"
    },
    "1014": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0"
      ]
    },
    "1016": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0 (copy)"
      ]
    },
    "1017": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(len+bool1[])%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0 (copy)",
        "0"
      ]
    },
    "1018": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "length%0#0"
      ]
    },
    "1019": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1020": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "mul%0#0"
      ]
    },
    "1021": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "mul%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "mul%0#0",
        "7"
      ]
    },
    "1023": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "add%0#0"
      ]
    },
    "1024": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "add%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "add%0#0",
        "8"
      ]
    },
    "1026": {
      "op": "/",
      "defined_out": [
        "div_floor%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "div_floor%0#0"
      ]
    },
    "1027": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "div_floor%0#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "div_floor%0#0",
        "2"
      ]
    },
    "1028": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+bool1[])%0#0",
        "add%1#0"
      ]
    },
    "1029": {
      "op": "uncover 1",
      "stack_out": [
        "add%1#0",
        "reinterpret_Encoded(len+bool1[])%0#0"
      ]
    },
    "1031": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%1#0",
        "len%0#0"
      ]
    },
    "1032": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1033": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.bool>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.bool>",
      "stack_out": []
    },
    "1034": {
      "retsub": true,
      "op": "retsub"
    },
    "1035": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1038": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3_block@0"
    },
    "1041": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(bool1[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool1[3])%0#0"
      ]
    },
    "1043": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1044": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "1045": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1046": {
      "error": "invalid number of bytes for arc4.static_array<arc4.bool, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.bool, 3>",
      "stack_out": []
    },
    "1047": {
      "retsub": true,
      "op": "retsub"
    },
    "1048": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1051": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple_block@0"
    },
    "1054": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8)%0#0"
      ]
    },
    "1056": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1057": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "1058": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1059": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>",
      "stack_out": []
    },
    "1060": {
      "retsub": true,
      "op": "retsub"
    },
    "1061": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1064": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple_block@0"
    },
    "1067": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1069": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1070": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "1071": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1072": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1074": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "eq%0#0"
      ]
    },
    "1075": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1076": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1077": {
      "op": "intc_3 // 9",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "1078": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1079": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1081": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1082": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1083": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1085": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1086": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1088": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1090": {
      "op": "substring3",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ]
    },
    "1091": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1092": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "length%0#0"
      ]
    },
    "1093": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1094": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "mul%0#0"
      ]
    },
    "1095": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1096": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%0#0"
      ]
    },
    "1097": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1099": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%1#0"
      ]
    },
    "1100": {
      "op": "uncover 1",
      "stack_out": [
        "add%1#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1102": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%1#0",
        "len%0#0"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "1104": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>",
      "stack_out": []
    },
    "1105": {
      "retsub": true,
      "op": "retsub"
    },
    "1106": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1109": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_block@0"
    },
    "1112": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8)%0#0"
      ]
    },
    "1114": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1115": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "1116": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1117": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct",
      "stack_out": []
    },
    "1118": {
      "retsub": true,
      "op": "retsub"
    },
    "1119": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1122": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_block@0"
    },
    "1125": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1127": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1128": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "1129": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1130": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1132": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "eq%0#0"
      ]
    },
    "1133": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1134": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1135": {
      "op": "intc_3 // 9",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "1136": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1137": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1139": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1140": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1141": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1143": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1144": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1146": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1148": {
      "op": "substring3",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ]
    },
    "1149": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1150": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "length%0#0"
      ]
    },
    "1151": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1152": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "mul%0#0"
      ]
    },
    "1153": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1154": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%0#0"
      ]
    },
    "1155": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1157": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0",
        "add%1#0"
      ]
    },
    "1158": {
      "op": "uncover 1",
      "stack_out": [
        "add%1#0",
        "reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0"
      ]
    },
    "1160": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%1#0",
        "len%0#0"
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "1162": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct",
      "stack_out": []
    },
    "1163": {
      "retsub": true,
      "op": "retsub"
    },
    "1164": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1167": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr_block@0"
    },
    "1170": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ]
    },
    "1172": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0 (copy)"
      ]
    },
    "1173": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0 (copy)",
        "0"
      ]
    },
    "1174": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "length%0#0"
      ]
    },
    "1175": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "length%0#0",
        "9"
      ]
    },
    "1176": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "mul%0#0"
      ]
    },
    "1177": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1178": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0",
        "add%0#0"
      ]
    },
    "1179": {
      "op": "uncover 1",
      "stack_out": [
        "add%0#0",
        "reinterpret_Encoded(len+(uint64,uint8)[])%0#0"
      ]
    },
    "1181": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "1182": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1183": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>",
      "stack_out": []
    },
    "1184": {
      "retsub": true,
      "op": "retsub"
    },
    "1185": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1188": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3_block@0"
    },
    "1191": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8)[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8)[3])%0#0"
      ]
    },
    "1193": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1194": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "27"
      ]
    },
    "1196": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1197": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>",
      "stack_out": []
    },
    "1198": {
      "retsub": true,
      "op": "retsub"
    },
    "1199": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1202": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_block@0"
    },
    "1205": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1207": {
      "op": "dupn 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ]
    },
    "1209": {
      "op": "intc_2 // 0",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)",
        "0"
      ]
    },
    "1210": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1211": {
      "op": "dup",
      "defined_out": [
        "length%0#0",
        "length%0#0 (copy)",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "length%0#0 (copy)"
      ]
    },
    "1212": {
      "op": "cover 2",
      "defined_out": [
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0"
      ]
    },
    "1214": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "2"
      ]
    },
    "1215": {
      "op": "*",
      "defined_out": [
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "num_bytes%0#0"
      ]
    },
    "1216": {
      "op": "cover 1",
      "defined_out": [
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1218": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ]
    },
    "1219": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "total_length%0#0"
      ]
    },
    "1220": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1222": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "2"
      ]
    },
    "1223": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "2",
        "total_length%0#0"
      ]
    },
    "1225": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1226": {
      "op": "intc_2 // 0",
      "defined_out": [
        "array_data%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1227": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1"
    },
    "1230": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1",
      "stack_in": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1232": {
      "op": "frame_dig 1",
      "defined_out": [
        "index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "length%0#0"
      ]
    },
    "1234": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "1235": {
      "op": "bz test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_after_for@4",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1238": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_body@2"
    },
    "1241": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_body@2",
      "stack_in": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1243": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1244": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1245": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1246": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_data%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1248": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "array_data%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1250": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "1251": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ]
    },
    "1253": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1254": {
      "op": "cover 3",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1256": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "1257": {
      "error": "invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "op": "assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1258": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1260": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ]
    },
    "1261": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "aggregate%total_length%0#0"
      ]
    },
    "1262": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1264": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)"
      ]
    },
    "1265": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)",
        "2"
      ]
    },
    "1266": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "1268": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1269": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1271": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "0"
      ]
    },
    "1272": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1273": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1275": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1277": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1278": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1279": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%array_length%1#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1281": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1283": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1284": {
      "op": "cover 3",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1286": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0"
      ]
    },
    "1288": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1289": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1290": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1292": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1294": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1295": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1297": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1299": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1300": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1302": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "2"
      ]
    },
    "1303": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1304": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1306": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1308": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1309": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1311": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1313": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1315": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1316": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1318": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1320": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1322": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1323": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1324": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1325": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1326": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1328": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "eq%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1329": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1330": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1331": {
      "op": "intc_3 // 9",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1332": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1333": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "1335": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1336": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1337": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "1339": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1341": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1343": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1344": {
      "op": "intc_2 // 0",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1345": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "length%1#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0"
      ]
    },
    "1346": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0",
        "1"
      ]
    },
    "1347": {
      "op": "*",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "mul%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0"
      ]
    },
    "1348": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1349": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0"
      ]
    },
    "1350": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1352": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%1#0"
      ]
    },
    "1353": {
      "op": "+",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1354": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1356": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_footer@3"
    },
    "1359": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_footer@3",
      "stack_in": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1361": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1362": {
      "op": "+",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1363": {
      "op": "frame_bury 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1365": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1"
    },
    "1368": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_after_for@4",
      "stack_in": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1370": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "2"
      ]
    },
    "1371": {
      "op": "+",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "1372": {
      "op": "frame_dig 0",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ]
    },
    "1374": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "len%0#0"
      ]
    },
    "1375": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "1376": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>",
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1377": {
      "retsub": true,
      "op": "retsub"
    },
    "1378": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1381": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_block@0"
    },
    "1384": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ]
    },
    "1386": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "3"
      ]
    },
    "1388": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "3"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "3",
        "2"
      ]
    },
    "1389": {
      "op": "*",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0"
      ]
    },
    "1390": {
      "op": "intc_2 // 0",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1391": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1"
    },
    "1394": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1",
      "stack_in": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1396": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "3"
      ]
    },
    "1398": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "1399": {
      "op": "bz test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_after_for@4",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1402": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_body@2"
    },
    "1405": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_body@2",
      "stack_in": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1407": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1408": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1409": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1410": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ]
    },
    "1412": {
      "op": "dup",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ]
    },
    "1413": {
      "op": "cover 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ]
    },
    "1415": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "1417": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "1418": {
      "op": "frame_dig 1",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ]
    },
    "1420": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1421": {
      "op": "cover 4",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1423": {
      "op": "==",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "1424": {
      "error": "invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "op": "assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0"
      ]
    },
    "1425": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1426": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1427": {
      "op": "*",
      "defined_out": [
        "aggregate%item_offset_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1428": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "aggregate%item_offset_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ]
    },
    "1430": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1432": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1433": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0"
      ]
    },
    "1435": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1436": {
      "op": "+",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1437": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "3"
      ]
    },
    "1439": {
      "op": "dig 1",
      "defined_out": [
        "3",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "3",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1441": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1442": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1444": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ]
    },
    "1446": {
      "op": "len",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1447": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1449": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_index%0#0",
        "2"
      ]
    },
    "1450": {
      "op": "*",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1451": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)"
      ]
    },
    "1453": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1455": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1456": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1458": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1460": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1462": {
      "op": "select",
      "defined_out": [
        "aggregate%end_offset%0#0",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1463": {
      "op": "uncover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ]
    },
    "1465": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%end_offset%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1467": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1469": {
      "op": "substring3",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1470": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1471": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1472": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1473": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1475": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1476": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1477": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1478": {
      "op": "intc_3 // 9",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1479": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1480": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "1482": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1483": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1484": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "1486": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1488": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1490": {
      "op": "substring3",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1491": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1492": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "index%0#0",
        "length%1#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0"
      ]
    },
    "1493": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0",
        "1"
      ]
    },
    "1494": {
      "op": "*",
      "defined_out": [
        "index%0#0",
        "mul%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0"
      ]
    },
    "1495": {
      "op": "intc_1 // 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1496": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0"
      ]
    },
    "1497": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1499": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%1#0"
      ]
    },
    "1500": {
      "op": "+",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1501": {
      "op": "frame_bury 1",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1503": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_footer@3"
    },
    "1506": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_footer@3",
      "stack_in": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1508": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1509": {
      "op": "+",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1510": {
      "op": "frame_bury 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1512": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1"
    },
    "1515": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_after_for@4",
      "stack_in": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ]
    },
    "1517": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0"
      ]
    },
    "1518": {
      "op": "frame_dig 1",
      "defined_out": [
        "len%0#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0",
        "num_bytes%0#0"
      ]
    },
    "1520": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "1521": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1522": {
      "retsub": true,
      "op": "retsub"
    },
    "1523": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1526": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_block@0"
    },
    "1529": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1530": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1532": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1533": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1534": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1535": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1536": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1537": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1538": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "1539": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1540": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct",
      "stack_out": []
    },
    "1541": {
      "retsub": true,
      "op": "retsub"
    },
    "1542": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1545": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_block@0"
    },
    "1548": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1549": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1551": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1552": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1553": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1555": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1556": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1557": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "9"
      ]
    },
    "1558": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1559": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1561": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "eq%0#0"
      ]
    },
    "1562": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1563": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1564": {
      "op": "intc_3 // 9",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "9"
      ]
    },
    "1565": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1566": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "1568": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1569": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1570": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "1572": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1573": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1575": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1577": {
      "op": "substring3",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "1578": {
      "op": "intc_2 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1579": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "1580": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1581": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "mul%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mul%0#0"
      ]
    },
    "1582": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "mul%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1583": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "add%0#0"
      ]
    },
    "1584": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "maybe_value%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1586": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "add%1#0"
      ]
    },
    "1587": {
      "op": "uncover 1",
      "stack_out": [
        "add%1#0",
        "maybe_value%0#0"
      ]
    },
    "1589": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%1#0",
        "len%0#0"
      ]
    },
    "1590": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "1591": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct",
      "stack_out": []
    },
    "1592": {
      "retsub": true,
      "op": "retsub"
    },
    "1593": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1596": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr_block@0"
    },
    "1599": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1600": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1602": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1603": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1604": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1605": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1606": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1607": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1608": {
      "op": "intc_2 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1609": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "1610": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "9"
      ]
    },
    "1611": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "mul%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mul%0#0"
      ]
    },
    "1612": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "mul%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1613": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "add%0#0"
      ]
    },
    "1614": {
      "op": "uncover 1",
      "stack_out": [
        "add%0#0",
        "maybe_value%0#0"
      ]
    },
    "1616": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "1617": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1618": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>",
      "stack_out": []
    },
    "1619": {
      "retsub": true,
      "op": "retsub"
    },
    "1620": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1623": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3_block@0"
    },
    "1626": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1627": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1629": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1630": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1631": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1633": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1634": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1635": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "27"
      ]
    },
    "1637": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1638": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>",
      "stack_out": []
    },
    "1639": {
      "retsub": true,
      "op": "retsub"
    },
    "1640": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1643": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_block@0"
    },
    "1646": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1647": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1649": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1650": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1651": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1652": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1653": {
      "op": "cover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1655": {
      "op": "dup",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1656": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1658": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1660": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1661": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1662": {
      "op": "intc_2 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1663": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1664": {
      "op": "dup",
      "defined_out": [
        "length%0#0",
        "length%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "length%0#0",
        "length%0#0 (copy)"
      ]
    },
    "1665": {
      "op": "cover 2",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "1667": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "maybe_value%0#0",
        "length%0#0",
        "2"
      ]
    },
    "1668": {
      "op": "*",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ]
    },
    "1669": {
      "op": "cover 1",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "1671": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1672": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "total_length%0#0"
      ]
    },
    "1673": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "maybe_value%0#0"
      ]
    },
    "1675": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "1676": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "2",
        "total_length%0#0"
      ]
    },
    "1678": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1679": {
      "op": "intc_2 // 0",
      "defined_out": [
        "array_data%0#0",
        "length%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1680": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1"
    },
    "1683": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1",
      "stack_in": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1685": {
      "op": "frame_dig 1",
      "defined_out": [
        "index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "length%0#0"
      ]
    },
    "1687": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "1688": {
      "op": "bz test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_after_for@4",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1691": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_body@2"
    },
    "1694": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_body@2",
      "stack_in": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1696": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1697": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1698": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1699": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_data%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1701": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "array_data%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1703": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "1704": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ]
    },
    "1706": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1707": {
      "op": "cover 3",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1709": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "1710": {
      "error": "invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "op": "assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1711": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0"
      ]
    },
    "1713": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1714": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "aggregate%total_length%0#0"
      ]
    },
    "1715": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "maybe_value%0#0"
      ]
    },
    "1717": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1718": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "1719": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "1721": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1722": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "maybe_value%0#0"
      ]
    },
    "1724": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1725": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1726": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1728": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1730": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1731": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1732": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%array_length%1#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1734": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1736": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1737": {
      "op": "cover 3",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1739": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0"
      ]
    },
    "1741": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1742": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%1#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1743": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1745": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%1#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1747": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1748": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1750": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1752": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1753": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1755": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "2"
      ]
    },
    "1756": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1757": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1759": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1761": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1762": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1764": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1766": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1768": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1769": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1771": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1773": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1775": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1776": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1777": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1778": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1779": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1781": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "eq%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1782": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1783": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1784": {
      "op": "intc_3 // 9",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1785": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1786": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "1788": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1789": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1790": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "1792": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1794": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1796": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1797": {
      "op": "intc_2 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1798": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "length%1#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0"
      ]
    },
    "1799": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0",
        "1"
      ]
    },
    "1800": {
      "op": "*",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "mul%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0"
      ]
    },
    "1801": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1802": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0"
      ]
    },
    "1803": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1805": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%1#0"
      ]
    },
    "1806": {
      "op": "+",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1807": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1809": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_footer@3"
    },
    "1812": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_footer@3",
      "stack_in": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1814": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1815": {
      "op": "+",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1816": {
      "op": "frame_bury 4",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1818": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1"
    },
    "1821": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_after_for@4",
      "stack_in": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1823": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "2"
      ]
    },
    "1824": {
      "op": "+",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "1825": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "1827": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "len%0#0"
      ]
    },
    "1828": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "1829": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>",
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1830": {
      "retsub": true,
      "op": "retsub"
    },
    "1831": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1834": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_block@0"
    },
    "1837": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\""
      ],
      "stack_out": [
        "\"v\""
      ]
    },
    "1838": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"v\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "1840": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1841": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1842": {
      "op": "bytec_0 // \"v\"",
      "stack_out": [
        "0",
        "\"v\""
      ]
    },
    "1843": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1844": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1845": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "3"
      ]
    },
    "1847": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "3",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "3",
        "2"
      ]
    },
    "1848": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0"
      ]
    },
    "1849": {
      "op": "intc_2 // 0",
      "defined_out": [
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1850": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1"
    },
    "1853": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1",
      "stack_in": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1855": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "3"
      ]
    },
    "1857": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "1858": {
      "op": "bz test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_after_for@4",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1861": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_body@2"
    },
    "1864": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_body@2",
      "stack_in": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1866": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1867": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1868": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1869": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "1871": {
      "op": "dup",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1872": {
      "op": "cover 3",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1874": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "maybe_value%0#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "1876": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "1877": {
      "op": "frame_dig 1",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ]
    },
    "1879": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1880": {
      "op": "cover 4",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1882": {
      "op": "==",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "1883": {
      "error": "invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "op": "assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0"
      ]
    },
    "1884": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1885": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1886": {
      "op": "*",
      "defined_out": [
        "aggregate%item_offset_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1887": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "aggregate%item_offset_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1889": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1891": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1892": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "index%0#0"
      ]
    },
    "1894": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1895": {
      "op": "+",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1896": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "3"
      ]
    },
    "1898": {
      "op": "dig 1",
      "defined_out": [
        "3",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "3",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1900": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1901": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1903": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1905": {
      "op": "len",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1906": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1908": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "aggregate%next_index%0#0",
        "2"
      ]
    },
    "1909": {
      "op": "*",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1910": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1912": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1914": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "maybe_value%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1915": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "maybe_value%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1917": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "maybe_value%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1919": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1921": {
      "op": "select",
      "defined_out": [
        "aggregate%end_offset%0#0",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "maybe_value%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1922": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "1924": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%end_offset%0#0",
        "maybe_value%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1926": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "maybe_value%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1928": {
      "op": "substring3",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1929": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1930": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1931": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1932": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "extract_uint16%0#0",
        "11"
      ]
    },
    "1934": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1935": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1936": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1937": {
      "op": "intc_3 // 9",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "9"
      ]
    },
    "1938": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1939": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "1941": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1942": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1943": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "1945": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1947": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1949": {
      "op": "substring3",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1950": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1951": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "index%0#0",
        "length%1#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0"
      ]
    },
    "1952": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "length%1#0",
        "1"
      ]
    },
    "1953": {
      "op": "*",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "mul%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0"
      ]
    },
    "1954": {
      "op": "intc_1 // 2",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1955": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0"
      ]
    },
    "1956": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%0#0",
        "11"
      ]
    },
    "1958": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%1#0"
      ]
    },
    "1959": {
      "op": "+",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1960": {
      "op": "frame_bury 1",
      "defined_out": [
        "index%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1962": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_footer@3"
    },
    "1965": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_footer@3",
      "stack_in": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1967": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1968": {
      "op": "+",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1969": {
      "op": "frame_bury 2",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1971": {
      "op": "b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1"
    },
    "1974": {
      "block": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_after_for@4",
      "stack_in": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "maybe_value%0#0"
      ]
    },
    "1976": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0"
      ]
    },
    "1977": {
      "op": "frame_dig 1",
      "defined_out": [
        "len%0#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0",
        "num_bytes%0#0"
      ]
    },
    "1979": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "maybe_value%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "1980": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>",
      "stack_out": [
        "maybe_value%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1981": {
      "retsub": true,
      "op": "retsub"
    }
  }
}