main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L43
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@34
    block@2: // abi_routing_L43
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@32
    block@3: // call_NoOp_L43
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "validate_uint64(byte[])void" => block@4, method "validate_uint8(byte[])void" => block@5, method "validate_uint512(byte[])void" => block@6, method "validate_ufixed64(byte[])void" => block@7, method "validate_uint8_arr(byte[])void" => block@8, method "validate_uint8_arr3(byte[])void" => block@9, method "validate_bool(byte[])void" => block@10, method "validate_byte(byte[])void" => block@11, method "validate_string(byte[])void" => block@12, method "validate_bytes(byte[])void" => block@13, method "validate_address(byte[])void" => block@14, method "validate_bool_arr(byte[])void" => block@15, method "validate_bool_arr3(byte[])void" => block@16, method "validate_static_tuple(byte[])void" => block@17, method "validate_dynamic_tuple(byte[])void" => block@18, method "validate_static_struct(byte[])void" => block@19, method "validate_dynamic_struct(byte[])void" => block@20, method "validate_static_struct_arr(byte[])void" => block@21, method "validate_static_struct_arr3(byte[])void" => block@22, method "validate_dynamic_struct_arr(byte[])void" => block@23, method "validate_dynamic_struct_arr3(byte[])void" => block@24, method "validate_native_static_struct(byte[])void" => block@25, method "validate_native_dynamic_struct(byte[])void" => block@26, method "validate_native_static_struct_arr(byte[])void" => block@27, method "validate_native_static_struct_arr3(byte[])void" => block@28, method "validate_native_dynamic_struct_arr(byte[])void" => block@29, method "validate_native_dynamic_struct_arr3(byte[])void" => block@30, * => block@31}
    block@4: // validate_uint64_route_L44
        test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]()
        goto block@31
    block@5: // validate_uint8_route_L48
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]()
        goto block@31
    block@6: // validate_uint512_route_L52
        test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]()
        goto block@31
    block@7: // validate_ufixed64_route_L56
        test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]()
        goto block@31
    block@8: // validate_uint8_arr_route_L60
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]()
        goto block@31
    block@9: // validate_uint8_arr3_route_L64
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]()
        goto block@31
    block@10: // validate_bool_route_L68
        test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]()
        goto block@31
    block@11: // validate_byte_route_L72
        test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]()
        goto block@31
    block@12: // validate_string_route_L76
        test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]()
        goto block@31
    block@13: // validate_bytes_route_L80
        test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]()
        goto block@31
    block@14: // validate_address_route_L84
        test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]()
        goto block@31
    block@15: // validate_bool_arr_route_L88
        test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]()
        goto block@31
    block@16: // validate_bool_arr3_route_L92
        test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]()
        goto block@31
    block@17: // validate_static_tuple_route_L96
        test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]()
        goto block@31
    block@18: // validate_dynamic_tuple_route_L100
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]()
        goto block@31
    block@19: // validate_static_struct_route_L104
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]()
        goto block@31
    block@20: // validate_dynamic_struct_route_L108
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]()
        goto block@31
    block@21: // validate_static_struct_arr_route_L112
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]()
        goto block@31
    block@22: // validate_static_struct_arr3_route_L116
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]()
        goto block@31
    block@23: // validate_dynamic_struct_arr_route_L120
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]()
        goto block@31
    block@24: // validate_dynamic_struct_arr3_route_L124
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]()
        goto block@31
    block@25: // validate_native_static_struct_route_L128
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]()
        goto block@31
    block@26: // validate_native_dynamic_struct_route_L135
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]()
        goto block@31
    block@27: // validate_native_static_struct_arr_route_L142
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]()
        goto block@31
    block@28: // validate_native_static_struct_arr3_route_L149
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]()
        goto block@31
    block@29: // validate_native_dynamic_struct_arr_route_L156
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]()
        goto block@31
    block@30: // validate_native_dynamic_struct_arr3_route_L163
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]()
        goto block@31
    block@31: // switch_case_next_L43
        goto block@33
    block@32: // create_NoOp_L43
        goto block@33
    block@33: // after_if_else_L43
        goto block@35
    block@34: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@37
    block@37: // L1
        goto block@38
    block@38: // after_inlined_test_cases.arc4_validation.contract.ValidationContract.__algopy_default_create_L1
        exit 1u
    block@35: // after_if_else_L43
        exit 0u
    block@36: // after_inlined_test_cases.arc4_validation.contract.ValidationContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]() -> void:
    block@0: // L44
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_uint64(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]() -> void:
    block@0: // L48
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]() -> void:
    block@0: // L52
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_uint512(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]() -> void:
    block@0: // L56
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]() -> void:
    block@0: // L60
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]() -> void:
    block@0: // L64
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]() -> void:
    block@0: // L68
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_bool(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]() -> void:
    block@0: // L72
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_byte(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]() -> void:
    block@0: // L76
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_string(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]() -> void:
    block@0: // L80
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_bytes(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]() -> void:
    block@0: // L84
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_address(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]() -> void:
    block@0: // L88
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]() -> void:
    block@0: // L92
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]() -> void:
    block@0: // L96
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]() -> void:
    block@0: // L100
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]() -> void:
    block@0: // L104
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]() -> void:
    block@0: // L108
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]() -> void:
    block@0: // L112
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]() -> void:
    block@0: // L116
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]() -> void:
    block@0: // L120
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]() -> void:
    block@0: // L124
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]() -> void:
    block@0: // L128
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]() -> void:
    block@0: // L135
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]() -> void:
    block@0: // L142
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]() -> void:
    block@0: // L149
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]() -> void:
    block@0: // L156
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]() -> void:
    block@0: // L163
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3(tmp%1#0)
        exit 1u

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint64(value: bytes) -> void:
    block@0: // L44
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64)%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8(value: bytes) -> void:
    block@0: // L48
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint8)%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint512(value: bytes) -> void:
    block@0: // L52
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint512)%0#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64(value: bytes) -> void:
    block@0: // L56
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64)%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.ufixed64x2
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr(value: bytes) -> void:
    block@0: // L60
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+uint8[])%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3(value: bytes) -> void:
    block@0: // L64
        let reinterpret_Encoded(uint8[3])%0#0: Encoded(uint8[3]) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint8[3])%0#0)
        let eq%0#0: bool = (== len%0#0 3u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool(value: bytes) -> void:
    block@0: // L68
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(bool8)%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_byte(value: bytes) -> void:
    block@0: // L72
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint8)%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_string(value: bytes) -> void:
    block@0: // L76
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+utf8[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+utf8[])%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bytes(value: bytes) -> void:
    block@0: // L80
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+uint8[])%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_address(value: bytes) -> void:
    block@0: // L84
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint8[32])%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr(value: bytes) -> void:
    block@0: // L88
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 7u)
        let div_floor%0#0: uint64 = (/ add%0#0 8u)
        let add%1#0: uint64 = (+ div_floor%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+bool1[])%0#0)
        let eq%0#0: bool = (== len%0#0 add%1#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.bool>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3(value: bytes) -> void:
    block@0: // L92
        let reinterpret_Encoded(bool1[3])%0#0: Encoded(bool1[3]) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(bool1[3])%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.bool, 3>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple(value: bytes) -> void:
    block@0: // L96
        let reinterpret_Encoded(uint64,uint8)%0#0: Encoded(uint64,uint8) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8)%0#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple(value: bytes) -> void:
    block@0: // L100
        let reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0: Encoded(uint64,uint8,(len+utf8[])) = value#0
        let extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 9u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct(value: bytes) -> void:
    block@0: // L104
        let reinterpret_Encoded(uint64,uint8)%0#0: Encoded(uint64,uint8) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8)%0#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct(value: bytes) -> void:
    block@0: // L108
        let reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0: Encoded(uint64,uint8,(len+utf8[])) = value#0
        let extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 9u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr(value: bytes) -> void:
    block@0: // L112
        let reinterpret_Encoded(len+(uint64,uint8)[])%0#0: Encoded(len+(uint64,uint8)[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,uint8)[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 9u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+(uint64,uint8)[])%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3(value: bytes) -> void:
    block@0: // L116
        let reinterpret_Encoded((uint64,uint8)[3])%0#0: Encoded((uint64,uint8)[3]) = value#0
        let len%0#0: uint64 = (len reinterpret_Encoded((uint64,uint8)[3])%0#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr(value: bytes) -> void:
    block@0: // L120
        let reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0: Encoded(len+(uint64,uint8,(len+utf8[]))[]) = value#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0)
        let array_data%0#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 2u total_length%0#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L122
        let continue_looping%0#0: bool = (< index%0#0 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L122
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let aggregate%total_length%0#0: uint64 = (len reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0 0u) // on error: invalid array length header
        let aggregate%item_offset_offset%0#0: uint64 = (* index%0#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%1#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let tmp%0#0: Encoded(uint64,uint8,(len+utf8[])) = aggregate%substring3%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%2#0
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        goto block@3
    block@3: // for_footer_L122
        let index%0#0: uint64 = (+ index%0#0 1u)
        goto block@1
    block@4: // after_for_L122
        let num_bytes%1#0: uint64 = (+ num_bytes%0#0 2u)
        let len%0#0: uint64 = (len reinterpret_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3(value: bytes) -> void:
    block@0: // L124
        let reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0: Encoded((uint64,uint8,(len+utf8[]))[3]) = value#0
        let num_bytes%0#0: uint64 = (* 3u 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L126
        let continue_looping%0#0: bool = (< index%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L126
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let aggregate%item_offset_offset%0#0: uint64 = (* index%0#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- 3u aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let tmp%0#0: Encoded(uint64,uint8,(len+utf8[])) = aggregate%substring3%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        goto block@3
    block@3: // for_footer_L126
        let index%0#0: uint64 = (+ index%0#0 1u)
        goto block@1
    block@4: // after_for_L126
        let len%0#0: uint64 = (len reinterpret_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct(value: bytes) -> void:
    block@0: // L128
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct(value: bytes) -> void:
    block@0: // L135
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 9u)
        let aggregate%len%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr(value: bytes) -> void:
    block@0: // L142
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let aggregate%array_length%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 9u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3(value: bytes) -> void:
    block@0: // L149
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr(value: bytes) -> void:
    block@0: // L156
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let aggregate%array_length%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len maybe_value%0#0)
        let array_data%0#0: bytes = (substring3 maybe_value%0#0 2u total_length%0#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L161
        let continue_looping%0#0: bool = (< index%0#0 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L161
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let aggregate%total_length%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 maybe_value%0#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 maybe_value%0#0 0u) // on error: invalid array length header
        let aggregate%item_offset_offset%0#0: uint64 = (* index%0#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%1#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let tmp%0#0: Encoded(uint64,uint8,(len+utf8[])) = aggregate%substring3%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%2#0
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        goto block@3
    block@3: // for_footer_L161
        let index%0#0: uint64 = (+ index%0#0 1u)
        goto block@1
    block@4: // after_for_L161
        let num_bytes%1#0: uint64 = (+ num_bytes%0#0 2u)
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>
        return 

subroutine test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3(value: bytes) -> void:
    block@0: // L163
        (app_global_put "v" value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "v")
        (assert maybe_exists%0#0) // check GlobalState exists
        let num_bytes%0#0: uint64 = (* 3u 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L168
        let continue_looping%0#0: bool = (< index%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L168
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let aggregate%item_offset_offset%0#0: uint64 = (* index%0#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- 3u aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let tmp%0#0: Encoded(uint64,uint8,(len+utf8[])) = aggregate%substring3%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 9u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%1#0)
        goto block@3
    block@3: // for_footer_L168
        let index%0#0: uint64 = (+ index%0#0 1u)
        goto block@1
    block@4: // after_for_L168
        let len%0#0: uint64 = (len maybe_value%0#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>
        return 