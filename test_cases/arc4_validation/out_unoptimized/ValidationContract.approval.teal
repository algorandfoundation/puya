#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 2 0 9
    bytecblock "v"
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // arc4_validation/contract.py:43
    // class ValidationContract(ARC4Contract, state_totals=algopy.StateTotals(global_bytes=1)):
    txn NumAppArgs
    intc_2 // 0
    !=
    bz main___algopy_default_create@34
    b main_abi_routing@2

main_abi_routing@2:
    // arc4_validation/contract.py:43
    // class ValidationContract(ARC4Contract, state_totals=algopy.StateTotals(global_bytes=1)):
    txn OnCompletion
    intc_2 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_2 // 0
    !=
    bz main_create_NoOp@32
    b main_call_NoOp@3

main_call_NoOp@3:
    // arc4_validation/contract.py:43
    // class ValidationContract(ARC4Contract, state_totals=algopy.StateTotals(global_bytes=1)):
    txna ApplicationArgs 0
    pushbytes 0x557b8fdf // method "validate_uint64(byte[])void"
    pushbytes 0x6197bbb1 // method "validate_uint8(byte[])void"
    pushbytes 0xa51cf941 // method "validate_uint512(byte[])void"
    pushbytes 0x8ecee90f // method "validate_ufixed64(byte[])void"
    pushbytes 0x42ebf71c // method "validate_uint8_arr(byte[])void"
    pushbytes 0x96fa5040 // method "validate_uint8_arr3(byte[])void"
    pushbytes 0x0604cf1b // method "validate_bool(byte[])void"
    pushbytes 0x0fd16d98 // method "validate_byte(byte[])void"
    pushbytes 0x0e97f8b4 // method "validate_string(byte[])void"
    pushbytes 0x3f68b7d1 // method "validate_bytes(byte[])void"
    pushbytes 0x175ba5ae // method "validate_address(byte[])void"
    pushbytes 0x02d56afc // method "validate_bool_arr(byte[])void"
    pushbytes 0x1c470dc0 // method "validate_bool_arr3(byte[])void"
    pushbytes 0x248f6960 // method "validate_static_tuple(byte[])void"
    pushbytes 0xf00c449a // method "validate_dynamic_tuple(byte[])void"
    pushbytes 0xd2ee4351 // method "validate_static_struct(byte[])void"
    pushbytes 0x5f9e13fa // method "validate_dynamic_struct(byte[])void"
    pushbytes 0x34d0ceaf // method "validate_static_struct_arr(byte[])void"
    pushbytes 0x8acfe94d // method "validate_static_struct_arr3(byte[])void"
    pushbytes 0x004c8235 // method "validate_dynamic_struct_arr(byte[])void"
    pushbytes 0x42ea7c81 // method "validate_dynamic_struct_arr3(byte[])void"
    pushbytes 0xc221da6b // method "validate_native_static_struct(byte[])void"
    pushbytes 0x566d8ab5 // method "validate_native_dynamic_struct(byte[])void"
    pushbytes 0xebd36778 // method "validate_native_static_struct_arr(byte[])void"
    pushbytes 0x7690fe6b // method "validate_native_static_struct_arr3(byte[])void"
    pushbytes 0xf721e7e8 // method "validate_native_dynamic_struct_arr(byte[])void"
    pushbytes 0x7c90f6e2 // method "validate_native_dynamic_struct_arr3(byte[])void"
    uncover 27
    match main_validate_uint64_route@4 main_validate_uint8_route@5 main_validate_uint512_route@6 main_validate_ufixed64_route@7 main_validate_uint8_arr_route@8 main_validate_uint8_arr3_route@9 main_validate_bool_route@10 main_validate_byte_route@11 main_validate_string_route@12 main_validate_bytes_route@13 main_validate_address_route@14 main_validate_bool_arr_route@15 main_validate_bool_arr3_route@16 main_validate_static_tuple_route@17 main_validate_dynamic_tuple_route@18 main_validate_static_struct_route@19 main_validate_dynamic_struct_route@20 main_validate_static_struct_arr_route@21 main_validate_static_struct_arr3_route@22 main_validate_dynamic_struct_arr_route@23 main_validate_dynamic_struct_arr3_route@24 main_validate_native_static_struct_route@25 main_validate_native_dynamic_struct_route@26 main_validate_native_static_struct_arr_route@27 main_validate_native_static_struct_arr3_route@28 main_validate_native_dynamic_struct_arr_route@29 main_validate_native_dynamic_struct_arr3_route@30
    b main_switch_case_next@31

main_switch_case_next@31:
    b main_after_if_else@33

main_after_if_else@33:
    b main_after_if_else@35

main_after_if_else@35:
    // arc4_validation/contract.py:43
    // class ValidationContract(ARC4Contract, state_totals=algopy.StateTotals(global_bytes=1)):
    err

main_validate_native_dynamic_struct_arr3_route@30:
    // arc4_validation/contract.py:163
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_dynamic_struct_arr3
    b main_switch_case_next@31

main_validate_native_dynamic_struct_arr_route@29:
    // arc4_validation/contract.py:156
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_dynamic_struct_arr
    b main_switch_case_next@31

main_validate_native_static_struct_arr3_route@28:
    // arc4_validation/contract.py:149
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_static_struct_arr3
    b main_switch_case_next@31

main_validate_native_static_struct_arr_route@27:
    // arc4_validation/contract.py:142
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_static_struct_arr
    b main_switch_case_next@31

main_validate_native_dynamic_struct_route@26:
    // arc4_validation/contract.py:135
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_dynamic_struct
    b main_switch_case_next@31

main_validate_native_static_struct_route@25:
    // arc4_validation/contract.py:128
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_native_static_struct
    b main_switch_case_next@31

main_validate_dynamic_struct_arr3_route@24:
    // arc4_validation/contract.py:124
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_dynamic_struct_arr3
    b main_switch_case_next@31

main_validate_dynamic_struct_arr_route@23:
    // arc4_validation/contract.py:120
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_dynamic_struct_arr
    b main_switch_case_next@31

main_validate_static_struct_arr3_route@22:
    // arc4_validation/contract.py:116
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_static_struct_arr3
    b main_switch_case_next@31

main_validate_static_struct_arr_route@21:
    // arc4_validation/contract.py:112
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_static_struct_arr
    b main_switch_case_next@31

main_validate_dynamic_struct_route@20:
    // arc4_validation/contract.py:108
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_dynamic_struct
    b main_switch_case_next@31

main_validate_static_struct_route@19:
    // arc4_validation/contract.py:104
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_static_struct
    b main_switch_case_next@31

main_validate_dynamic_tuple_route@18:
    // arc4_validation/contract.py:100
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_dynamic_tuple
    b main_switch_case_next@31

main_validate_static_tuple_route@17:
    // arc4_validation/contract.py:96
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_static_tuple
    b main_switch_case_next@31

main_validate_bool_arr3_route@16:
    // arc4_validation/contract.py:92
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_bool_arr3
    b main_switch_case_next@31

main_validate_bool_arr_route@15:
    // arc4_validation/contract.py:88
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_bool_arr
    b main_switch_case_next@31

main_validate_address_route@14:
    // arc4_validation/contract.py:84
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_address
    b main_switch_case_next@31

main_validate_bytes_route@13:
    // arc4_validation/contract.py:80
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_bytes
    b main_switch_case_next@31

main_validate_string_route@12:
    // arc4_validation/contract.py:76
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_string
    b main_switch_case_next@31

main_validate_byte_route@11:
    // arc4_validation/contract.py:72
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_byte
    b main_switch_case_next@31

main_validate_bool_route@10:
    // arc4_validation/contract.py:68
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_bool
    b main_switch_case_next@31

main_validate_uint8_arr3_route@9:
    // arc4_validation/contract.py:64
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_uint8_arr3
    b main_switch_case_next@31

main_validate_uint8_arr_route@8:
    // arc4_validation/contract.py:60
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_uint8_arr
    b main_switch_case_next@31

main_validate_ufixed64_route@7:
    // arc4_validation/contract.py:56
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_ufixed64
    b main_switch_case_next@31

main_validate_uint512_route@6:
    // arc4_validation/contract.py:52
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_uint512
    b main_switch_case_next@31

main_validate_uint8_route@5:
    // arc4_validation/contract.py:48
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_uint8
    b main_switch_case_next@31

main_validate_uint64_route@4:
    // arc4_validation/contract.py:44
    // @arc4.abimethod(validate_encoding=False)
    callsub validate_uint64
    b main_switch_case_next@31

main_create_NoOp@32:
    b main_after_if_else@33

main___algopy_default_create@34:
    txn OnCompletion
    intc_2 // NoOp
    ==
    txn ApplicationID
    intc_2 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@37

main_block@37:
    b main_after_inlined_test_cases.arc4_validation.contract.ValidationContract.__algopy_default_create@38

main_after_inlined_test_cases.arc4_validation.contract.ValidationContract.__algopy_default_create@38:
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]() -> void:
validate_uint64:
    b validate_uint64_block@0

validate_uint64_block@0:
    // arc4_validation/contract.py:44
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint64
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]() -> void:
validate_uint8:
    b validate_uint8_block@0

validate_uint8_block@0:
    // arc4_validation/contract.py:48
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]() -> void:
validate_uint512:
    b validate_uint512_block@0

validate_uint512_block@0:
    // arc4_validation/contract.py:52
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint512
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]() -> void:
validate_ufixed64:
    b validate_ufixed64_block@0

validate_ufixed64_block@0:
    // arc4_validation/contract.py:56
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]() -> void:
validate_uint8_arr:
    b validate_uint8_arr_block@0

validate_uint8_arr_block@0:
    // arc4_validation/contract.py:60
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]() -> void:
validate_uint8_arr3:
    b validate_uint8_arr3_block@0

validate_uint8_arr3_block@0:
    // arc4_validation/contract.py:64
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]() -> void:
validate_bool:
    b validate_bool_block@0

validate_bool_block@0:
    // arc4_validation/contract.py:68
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]() -> void:
validate_byte:
    b validate_byte_block@0

validate_byte_block@0:
    // arc4_validation/contract.py:72
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_byte
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]() -> void:
validate_string:
    b validate_string_block@0

validate_string_block@0:
    // arc4_validation/contract.py:76
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_string
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]() -> void:
validate_bytes:
    b validate_bytes_block@0

validate_bytes_block@0:
    // arc4_validation/contract.py:80
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_bytes
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]() -> void:
validate_address:
    b validate_address_block@0

validate_address_block@0:
    // arc4_validation/contract.py:84
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_address
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]() -> void:
validate_bool_arr:
    b validate_bool_arr_block@0

validate_bool_arr_block@0:
    // arc4_validation/contract.py:88
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]() -> void:
validate_bool_arr3:
    b validate_bool_arr3_block@0

validate_bool_arr3_block@0:
    // arc4_validation/contract.py:92
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]() -> void:
validate_static_tuple:
    b validate_static_tuple_block@0

validate_static_tuple_block@0:
    // arc4_validation/contract.py:96
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]() -> void:
validate_dynamic_tuple:
    b validate_dynamic_tuple_block@0

validate_dynamic_tuple_block@0:
    // arc4_validation/contract.py:100
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]() -> void:
validate_static_struct:
    b validate_static_struct_block@0

validate_static_struct_block@0:
    // arc4_validation/contract.py:104
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]() -> void:
validate_dynamic_struct:
    b validate_dynamic_struct_block@0

validate_dynamic_struct_block@0:
    // arc4_validation/contract.py:108
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]() -> void:
validate_static_struct_arr:
    b validate_static_struct_arr_block@0

validate_static_struct_arr_block@0:
    // arc4_validation/contract.py:112
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]() -> void:
validate_static_struct_arr3:
    b validate_static_struct_arr3_block@0

validate_static_struct_arr3_block@0:
    // arc4_validation/contract.py:116
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]() -> void:
validate_dynamic_struct_arr:
    b validate_dynamic_struct_arr_block@0

validate_dynamic_struct_arr_block@0:
    // arc4_validation/contract.py:120
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]() -> void:
validate_dynamic_struct_arr3:
    b validate_dynamic_struct_arr3_block@0

validate_dynamic_struct_arr3_block@0:
    // arc4_validation/contract.py:124
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]() -> void:
validate_native_static_struct:
    b validate_native_static_struct_block@0

validate_native_static_struct_block@0:
    // arc4_validation/contract.py:128
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]() -> void:
validate_native_dynamic_struct:
    b validate_native_dynamic_struct_block@0

validate_native_dynamic_struct_block@0:
    // arc4_validation/contract.py:135
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]() -> void:
validate_native_static_struct_arr:
    b validate_native_static_struct_arr_block@0

validate_native_static_struct_arr_block@0:
    // arc4_validation/contract.py:142
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]() -> void:
validate_native_static_struct_arr3:
    b validate_native_static_struct_arr3_block@0

validate_native_static_struct_arr3_block@0:
    // arc4_validation/contract.py:149
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]() -> void:
validate_native_dynamic_struct_arr:
    b validate_native_dynamic_struct_arr_block@0

validate_native_dynamic_struct_arr_block@0:
    // arc4_validation/contract.py:156
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]() -> void:
validate_native_dynamic_struct_arr3:
    b validate_native_dynamic_struct_arr3_block@0

validate_native_dynamic_struct_arr3_block@0:
    // arc4_validation/contract.py:163
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint64(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_uint64:
    // arc4_validation/contract.py:44-45
    // @arc4.abimethod(validate_encoding=False)
    // def validate_uint64(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_uint64_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_uint64_block@0:
    // arc4_validation/contract.py:46
    // arc4.UInt64.from_bytes(value).validate()
    frame_dig -1
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_uint8:
    // arc4_validation/contract.py:48-49
    // @arc4.abimethod(validate_encoding=False)
    // def validate_uint8(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_uint8_block@0:
    // arc4_validation/contract.py:50
    // arc4.UInt8.from_bytes(value).validate()
    frame_dig -1
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.uint8
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_uint512(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_uint512:
    // arc4_validation/contract.py:52-53
    // @arc4.abimethod(validate_encoding=False)
    // def validate_uint512(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_uint512_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_uint512_block@0:
    // arc4_validation/contract.py:54
    // arc4.UInt512.from_bytes(value).validate()
    frame_dig -1
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for arc4.uint512
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64:
    // arc4_validation/contract.py:56-57
    // @arc4.abimethod(validate_encoding=False)
    // def validate_ufixed64(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64_block@0:
    // arc4_validation/contract.py:58
    // arc4.UFixedNxM[typing.Literal[64], typing.Literal[2]].from_bytes(value).validate()
    frame_dig -1
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.ufixed64x2
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr:
    // arc4_validation/contract.py:60-61
    // @arc4.abimethod(validate_encoding=False)
    // def validate_uint8_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr_block@0:
    // arc4_validation/contract.py:62
    // arc4.DynamicArray[arc4.UInt8].from_bytes(value).validate()
    frame_dig -1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3:
    // arc4_validation/contract.py:64-65
    // @arc4.abimethod(validate_encoding=False)
    // def validate_uint8_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3_block@0:
    // arc4_validation/contract.py:66
    // arc4.StaticArray[arc4.UInt8, typing.Literal[3]].from_bytes(value).validate()
    frame_dig -1
    len
    pushint 3 // 3
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_bool(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_bool:
    // arc4_validation/contract.py:68-69
    // @arc4.abimethod(validate_encoding=False)
    // def validate_bool(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_bool_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_bool_block@0:
    // arc4_validation/contract.py:70
    // arc4.Bool.from_bytes(value).validate()
    frame_dig -1
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_byte(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_byte:
    // arc4_validation/contract.py:72-73
    // @arc4.abimethod(validate_encoding=False)
    // def validate_byte(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_byte_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_byte_block@0:
    // arc4_validation/contract.py:74
    // arc4.Byte.from_bytes(value).validate()
    frame_dig -1
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.uint8
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_string(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_string:
    // arc4_validation/contract.py:76-77
    // @arc4.abimethod(validate_encoding=False)
    // def validate_string(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_string_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_string_block@0:
    // arc4_validation/contract.py:78
    // arc4.String.from_bytes(value).validate()
    frame_dig -1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_bytes(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_bytes:
    // arc4_validation/contract.py:80-81
    // @arc4.abimethod(validate_encoding=False)
    // def validate_bytes(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_bytes_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_bytes_block@0:
    // arc4_validation/contract.py:82
    // arc4.DynamicBytes.from_bytes(value).validate()
    frame_dig -1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_address(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_address:
    // arc4_validation/contract.py:84-85
    // @arc4.abimethod(validate_encoding=False)
    // def validate_address(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_address_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_address_block@0:
    // arc4_validation/contract.py:86
    // arc4.Address.from_bytes(value).validate()
    frame_dig -1
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr:
    // arc4_validation/contract.py:88-89
    // @arc4.abimethod(validate_encoding=False)
    // def validate_bool_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr_block@0:
    // arc4_validation/contract.py:90
    // arc4.DynamicArray[arc4.Bool].from_bytes(value).validate()
    frame_dig -1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    pushint 7 // 7
    +
    pushint 8 // 8
    /
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.bool>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3:
    // arc4_validation/contract.py:92-93
    // @arc4.abimethod(validate_encoding=False)
    // def validate_bool_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3_block@0:
    // arc4_validation/contract.py:94
    // arc4.StaticArray[arc4.Bool, typing.Literal[3]].from_bytes(value).validate()
    frame_dig -1
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.bool, 3>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple:
    // arc4_validation/contract.py:96-97
    // @arc4.abimethod(validate_encoding=False)
    // def validate_static_tuple(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple_block@0:
    // arc4_validation/contract.py:98
    // ARC4StaticTuple.from_bytes(value).validate()
    frame_dig -1
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple:
    // arc4_validation/contract.py:100-101
    // @arc4.abimethod(validate_encoding=False)
    // def validate_dynamic_tuple(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple_block@0:
    // arc4_validation/contract.py:102
    // ARC4DynamicTuple.from_bytes(value).validate()
    frame_dig -1
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_static_struct:
    // arc4_validation/contract.py:104-105
    // @arc4.abimethod(validate_encoding=False)
    // def validate_static_struct(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_block@0:
    // arc4_validation/contract.py:106
    // ARC4StaticStruct.from_bytes(value).validate()
    frame_dig -1
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct:
    // arc4_validation/contract.py:108-109
    // @arc4.abimethod(validate_encoding=False)
    // def validate_dynamic_struct(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_block@0:
    // arc4_validation/contract.py:110
    // ARC4DynamicStruct.from_bytes(value).validate()
    frame_dig -1
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr:
    // arc4_validation/contract.py:112-113
    // @arc4.abimethod(validate_encoding=False)
    // def validate_static_struct_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr_block@0:
    // arc4_validation/contract.py:114
    // arc4.DynamicArray[ARC4StaticStruct].from_bytes(value).validate()
    frame_dig -1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3:
    // arc4_validation/contract.py:116-117
    // @arc4.abimethod(validate_encoding=False)
    // def validate_static_struct_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3_block@0:
    // arc4_validation/contract.py:118
    // arc4.StaticArray[ARC4StaticStruct, typing.Literal[3]].from_bytes(value).validate()
    frame_dig -1
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr:
    // arc4_validation/contract.py:120-121
    // @arc4.abimethod(validate_encoding=False)
    // def validate_dynamic_struct_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_block@0:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    frame_dig -1
    dupn 2
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 2
    intc_1 // 2
    *
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_2 // 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    frame_dig 4
    frame_dig 1
    <
    bz test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_after_for@4
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_body@2

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_body@2:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    frame_dig 4
    dup
    intc_1 // 2
    *
    frame_dig 3
    uncover 1
    extract_uint16 // on error: invalid array encoding
    frame_dig 2
    dup
    cover 3
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    frame_dig 0
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dig 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    cover 3
    uncover 2
    intc_0 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    +
    frame_bury 2
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_footer@3

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_footer@3:
    frame_dig 4
    intc_0 // 1
    +
    frame_bury 4
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr_after_for@4:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    frame_dig 2
    intc_1 // 2
    +
    frame_dig 0
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3:
    // arc4_validation/contract.py:124-125
    // @arc4.abimethod(validate_encoding=False)
    // def validate_dynamic_struct_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_block@0:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    frame_dig -1
    pushint 3 // 3
    intc_1 // 2
    *
    intc_2 // 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    frame_dig 2
    pushint 3 // 3
    <
    bz test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_after_for@4
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_body@2

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_body@2:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    frame_dig 2
    dup
    intc_1 // 2
    *
    frame_dig 0
    dup
    cover 3
    uncover 1
    extract_uint16 // on error: invalid array encoding
    frame_dig 1
    dup
    cover 4
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    dup
    intc_1 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    +
    frame_bury 1
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_footer@3

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_footer@3:
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3_after_for@4:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    frame_dig 0
    len
    frame_dig 1
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct:
    // arc4_validation/contract.py:128-129
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_static_struct(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_block@0:
    // arc4_validation/contract.py:130
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:131
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:133
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:132
    // n = GlobalState(NativeStaticStruct, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:133
    // n.value.validate()
    app_global_get_ex
    assert // check GlobalState exists
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct:
    // arc4_validation/contract.py:135-136
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_dynamic_struct(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_block@0:
    // arc4_validation/contract.py:137
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:138
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:140
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:139
    // n = GlobalState(NativeDynamicStruct, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:140
    // n.value.validate()
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr:
    // arc4_validation/contract.py:142-143
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_static_struct_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr_block@0:
    // arc4_validation/contract.py:144
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:145
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:147
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:146
    // n = GlobalState(Array[NativeStaticStruct], key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:147
    // n.value.validate()
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_1 // 2
    +
    uncover 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3:
    // arc4_validation/contract.py:149-150
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_static_struct_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3_block@0:
    // arc4_validation/contract.py:151
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:152
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:154
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:153
    // n = GlobalState(FixedArray[NativeStaticStruct, typing.Literal[3]], key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:154
    // n.value.validate()
    app_global_get_ex
    assert // check GlobalState exists
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr:
    // arc4_validation/contract.py:156-157
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_dynamic_struct_arr(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_block@0:
    // arc4_validation/contract.py:158
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:159
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:161
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:160
    // n = GlobalState(Array[NativeDynamicStruct], key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:161
    // n.value.validate()
    app_global_get_ex
    cover 1
    dup
    cover 2
    cover 2
    assert // check GlobalState exists
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 2
    intc_1 // 2
    *
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_2 // 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1:
    // arc4_validation/contract.py:161
    // n.value.validate()
    frame_dig 4
    frame_dig 1
    <
    bz test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_after_for@4
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_body@2

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_body@2:
    // arc4_validation/contract.py:161
    // n.value.validate()
    frame_dig 4
    dup
    intc_1 // 2
    *
    frame_dig 3
    uncover 1
    extract_uint16 // on error: invalid array encoding
    frame_dig 2
    dup
    cover 3
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    frame_dig 0
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dig 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    cover 3
    uncover 2
    intc_0 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    +
    frame_bury 2
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_footer@3

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_footer@3:
    frame_dig 4
    intc_0 // 1
    +
    frame_bury 4
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr_after_for@4:
    // arc4_validation/contract.py:161
    // n.value.validate()
    frame_dig 2
    intc_1 // 2
    +
    frame_dig 0
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>
    retsub


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3(value: bytes) -> void:
test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3:
    // arc4_validation/contract.py:163-164
    // @arc4.abimethod(validate_encoding=False)
    // def validate_native_dynamic_struct_arr3(self, value: Bytes) -> None:
    proto 1 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_block@0

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_block@0:
    // arc4_validation/contract.py:165
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:166
    // b.value = value
    frame_dig -1
    app_global_put
    // arc4_validation/contract.py:168
    // n.value.validate()
    intc_2 // 0
    // arc4_validation/contract.py:167
    // n = GlobalState(FixedArray[NativeDynamicStruct, typing.Literal[3]], key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:168
    // n.value.validate()
    app_global_get_ex
    assert // check GlobalState exists
    pushint 3 // 3
    intc_1 // 2
    *
    intc_2 // 0
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1:
    // arc4_validation/contract.py:168
    // n.value.validate()
    frame_dig 2
    pushint 3 // 3
    <
    bz test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_after_for@4
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_body@2

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_body@2:
    // arc4_validation/contract.py:168
    // n.value.validate()
    frame_dig 2
    dup
    intc_1 // 2
    *
    frame_dig 0
    dup
    cover 3
    uncover 1
    extract_uint16 // on error: invalid array encoding
    frame_dig 1
    dup
    cover 4
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    dup
    intc_1 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_1 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dup
    intc_3 // 9
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    *
    intc_1 // 2
    +
    pushint 11 // 11
    +
    +
    frame_bury 1
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_footer@3

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_footer@3:
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_for_header@1

test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3_after_for@4:
    // arc4_validation/contract.py:168
    // n.value.validate()
    frame_dig 0
    len
    frame_dig 1
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>
    retsub
