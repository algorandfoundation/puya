#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 9
    bytecblock "v"
    // arc4_validation/contract.py:43
    // class ValidationContract(ARC4Contract, state_totals=algopy.StateTotals(global_bytes=1)):
    txn NumAppArgs
    bz main___algopy_default_create@34
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x557b8fdf 0x6197bbb1 0xa51cf941 0x8ecee90f 0x42ebf71c 0x96fa5040 0x0604cf1b 0x0fd16d98 0x0e97f8b4 0x3f68b7d1 0x175ba5ae 0x02d56afc 0x1c470dc0 0x248f6960 0xf00c449a 0xd2ee4351 0x5f9e13fa 0x34d0ceaf 0x8acfe94d 0x004c8235 0x42ea7c81 0xc221da6b 0x566d8ab5 0xebd36778 0x7690fe6b 0xf721e7e8 0x7c90f6e2 // method "validate_uint64(byte[])void", method "validate_uint8(byte[])void", method "validate_uint512(byte[])void", method "validate_ufixed64(byte[])void", method "validate_uint8_arr(byte[])void", method "validate_uint8_arr3(byte[])void", method "validate_bool(byte[])void", method "validate_byte(byte[])void", method "validate_string(byte[])void", method "validate_bytes(byte[])void", method "validate_address(byte[])void", method "validate_bool_arr(byte[])void", method "validate_bool_arr3(byte[])void", method "validate_static_tuple(byte[])void", method "validate_dynamic_tuple(byte[])void", method "validate_static_struct(byte[])void", method "validate_dynamic_struct(byte[])void", method "validate_static_struct_arr(byte[])void", method "validate_static_struct_arr3(byte[])void", method "validate_dynamic_struct_arr(byte[])void", method "validate_dynamic_struct_arr3(byte[])void", method "validate_native_static_struct(byte[])void", method "validate_native_dynamic_struct(byte[])void", method "validate_native_static_struct_arr(byte[])void", method "validate_native_static_struct_arr3(byte[])void", method "validate_native_dynamic_struct_arr(byte[])void", method "validate_native_dynamic_struct_arr3(byte[])void"
    txna ApplicationArgs 0
    match validate_uint64 validate_uint8 validate_uint512 validate_ufixed64 validate_uint8_arr validate_uint8_arr3 validate_bool validate_byte validate_string validate_bytes validate_address validate_bool_arr validate_bool_arr3 validate_static_tuple validate_dynamic_tuple validate_static_struct validate_dynamic_struct validate_static_struct_arr validate_static_struct_arr3 validate_dynamic_struct_arr validate_dynamic_struct_arr3 validate_native_static_struct validate_native_dynamic_struct validate_native_static_struct_arr validate_native_static_struct_arr3 validate_native_dynamic_struct_arr validate_native_dynamic_struct_arr3
    err

main___algopy_default_create@34:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]() -> void:
validate_uint64:
    // arc4_validation/contract.py:44
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:46
    // arc4.UInt64.from_bytes(value).validate()
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // arc4_validation/contract.py:44
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]() -> void:
validate_uint8:
    // arc4_validation/contract.py:48
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:50
    // arc4.UInt8.from_bytes(value).validate()
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.uint8
    // arc4_validation/contract.py:48
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]() -> void:
validate_uint512:
    // arc4_validation/contract.py:52
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:54
    // arc4.UInt512.from_bytes(value).validate()
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for arc4.uint512
    // arc4_validation/contract.py:52
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]() -> void:
validate_ufixed64:
    // arc4_validation/contract.py:56
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:58
    // arc4.UFixedNxM[typing.Literal[64], typing.Literal[2]].from_bytes(value).validate()
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.ufixed64x2
    // arc4_validation/contract.py:56
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]() -> void:
validate_uint8_arr:
    // arc4_validation/contract.py:60
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:62
    // arc4.DynamicArray[arc4.UInt8].from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    // arc4_validation/contract.py:60
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]() -> void:
validate_uint8_arr3:
    // arc4_validation/contract.py:64
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:66
    // arc4.StaticArray[arc4.UInt8, typing.Literal[3]].from_bytes(value).validate()
    len
    pushint 3 // 3
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
    // arc4_validation/contract.py:64
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]() -> void:
validate_bool:
    // arc4_validation/contract.py:68
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:70
    // arc4.Bool.from_bytes(value).validate()
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    // arc4_validation/contract.py:68
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]() -> void:
validate_byte:
    // arc4_validation/contract.py:72
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:74
    // arc4.Byte.from_bytes(value).validate()
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.uint8
    // arc4_validation/contract.py:72
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]() -> void:
validate_string:
    // arc4_validation/contract.py:76
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:78
    // arc4.String.from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    // arc4_validation/contract.py:76
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]() -> void:
validate_bytes:
    // arc4_validation/contract.py:80
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:82
    // arc4.DynamicBytes.from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    // arc4_validation/contract.py:80
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]() -> void:
validate_address:
    // arc4_validation/contract.py:84
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:86
    // arc4.Address.from_bytes(value).validate()
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // arc4_validation/contract.py:84
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]() -> void:
validate_bool_arr:
    // arc4_validation/contract.py:88
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:90
    // arc4.DynamicArray[arc4.Bool].from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 7 // 7
    +
    pushint 8 // 8
    /
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.bool>
    // arc4_validation/contract.py:88
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]() -> void:
validate_bool_arr3:
    // arc4_validation/contract.py:92
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:94
    // arc4.StaticArray[arc4.Bool, typing.Literal[3]].from_bytes(value).validate()
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.bool, 3>
    // arc4_validation/contract.py:92
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]() -> void:
validate_static_tuple:
    // arc4_validation/contract.py:96
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:98
    // ARC4StaticTuple.from_bytes(value).validate()
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
    // arc4_validation/contract.py:96
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]() -> void:
validate_dynamic_tuple:
    // arc4_validation/contract.py:100
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:102
    // ARC4DynamicTuple.from_bytes(value).validate()
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
    // arc4_validation/contract.py:100
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]() -> void:
validate_static_struct:
    // arc4_validation/contract.py:104
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:106
    // ARC4StaticStruct.from_bytes(value).validate()
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct
    // arc4_validation/contract.py:104
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]() -> void:
validate_dynamic_struct:
    // arc4_validation/contract.py:108
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:110
    // ARC4DynamicStruct.from_bytes(value).validate()
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct
    // arc4_validation/contract.py:108
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]() -> void:
validate_static_struct_arr:
    // arc4_validation/contract.py:112
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:114
    // arc4.DynamicArray[ARC4StaticStruct].from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>
    // arc4_validation/contract.py:112
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]() -> void:
validate_static_struct_arr3:
    // arc4_validation/contract.py:116
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:118
    // arc4.StaticArray[ARC4StaticStruct, typing.Literal[3]].from_bytes(value).validate()
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>
    // arc4_validation/contract.py:116
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]() -> void:
validate_dynamic_struct_arr:
    // arc4_validation/contract.py:120
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    dup
    extract 2 0
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 3
    intc_2 // 2
    *
    cover 2
    len
    swap
    extract 4 0
    intc_1 // 0

validate_dynamic_struct_arr_for_header@2:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    dup
    dig 5
    <
    bz validate_dynamic_struct_arr_after_for@5
    dupn 2
    intc_2 // 2
    *
    dig 3
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 7
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    swap
    intc_0 // 1
    +
    dig 8
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 5
    bury 1
    b validate_dynamic_struct_arr_for_header@2

validate_dynamic_struct_arr_after_for@5:
    // arc4_validation/contract.py:122
    // arc4.DynamicArray[ARC4DynamicStruct].from_bytes(value).validate()
    dig 3
    intc_2 // 2
    +
    dig 3
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>
    // arc4_validation/contract.py:120
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]() -> void:
validate_dynamic_struct_arr3:
    // arc4_validation/contract.py:124
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    pushint 6 // 6
    intc_1 // 0

validate_dynamic_struct_arr3_for_header@2:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    dup
    pushint 3 // 3
    <
    bz validate_dynamic_struct_arr3_after_for@5
    dupn 2
    intc_2 // 2
    *
    dig 4
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    swap
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 1
    b validate_dynamic_struct_arr3_for_header@2

validate_dynamic_struct_arr3_after_for@5:
    // arc4_validation/contract.py:126
    // arc4.StaticArray[ARC4DynamicStruct, typing.Literal[3]].from_bytes(value).validate()
    dig 2
    len
    dig 2
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>
    // arc4_validation/contract.py:124
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]() -> void:
validate_native_static_struct:
    // arc4_validation/contract.py:128
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:130
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:131
    // b.value = value
    dig 1
    app_global_put
    // arc4_validation/contract.py:133
    // n.value.validate()
    len
    intc_3 // 9
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct
    // arc4_validation/contract.py:128
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]() -> void:
validate_native_dynamic_struct:
    // arc4_validation/contract.py:135
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:137
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:138
    // b.value = value
    dig 1
    app_global_put
    // arc4_validation/contract.py:140
    // n.value.validate()
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    cover 2
    dig 2
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    ==
    assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct
    // arc4_validation/contract.py:135
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]() -> void:
validate_native_static_struct_arr:
    // arc4_validation/contract.py:142
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:144
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:145
    // b.value = value
    dig 1
    app_global_put
    // arc4_validation/contract.py:147
    // n.value.validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 9
    *
    intc_2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>
    // arc4_validation/contract.py:142
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]() -> void:
validate_native_static_struct_arr3:
    // arc4_validation/contract.py:149
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    // arc4_validation/contract.py:151
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:152
    // b.value = value
    dig 1
    app_global_put
    // arc4_validation/contract.py:154
    // n.value.validate()
    len
    pushint 27 // 27
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>
    // arc4_validation/contract.py:149
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]() -> void:
validate_native_dynamic_struct_arr:
    // arc4_validation/contract.py:156
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    dup
    extract 2 0
    // arc4_validation/contract.py:158
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:159
    // b.value = value
    dig 1
    app_global_put
    // arc4_validation/contract.py:161
    // n.value.validate()
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 3
    intc_2 // 2
    *
    cover 2
    len
    swap
    extract 4 0
    intc_1 // 0

validate_native_dynamic_struct_arr_for_header@2:
    // arc4_validation/contract.py:161
    // n.value.validate()
    dup
    dig 5
    <
    bz validate_native_dynamic_struct_arr_after_for@5
    dupn 2
    intc_2 // 2
    *
    dig 3
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 7
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
    swap
    intc_0 // 1
    +
    dig 8
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 5
    bury 1
    b validate_native_dynamic_struct_arr_for_header@2

validate_native_dynamic_struct_arr_after_for@5:
    // arc4_validation/contract.py:161
    // n.value.validate()
    dig 3
    intc_2 // 2
    +
    dig 3
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>
    // arc4_validation/contract.py:156
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return


// test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]() -> void:
validate_native_dynamic_struct_arr3:
    // arc4_validation/contract.py:163
    // @arc4.abimethod(validate_encoding=False)
    txna ApplicationArgs 1
    extract 2 0
    dup
    // arc4_validation/contract.py:165
    // b = GlobalState(Bytes, key="v")
    bytec_0 // "v"
    // arc4_validation/contract.py:166
    // b.value = value
    swap
    app_global_put
    // arc4_validation/contract.py:168
    // n.value.validate()
    pushint 6 // 6
    intc_1 // 0

validate_native_dynamic_struct_arr3_for_header@2:
    // arc4_validation/contract.py:168
    // n.value.validate()
    dup
    pushint 3 // 3
    <
    bz validate_native_dynamic_struct_arr3_after_for@5
    dupn 2
    intc_2 // 2
    *
    dig 4
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
    swap
    intc_0 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 9
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 11 // 11
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 13 // 13
    +
    uncover 2
    +
    bury 3
    bury 1
    b validate_native_dynamic_struct_arr3_for_header@2

validate_native_dynamic_struct_arr3_after_for@5:
    // arc4_validation/contract.py:168
    // n.value.validate()
    dig 2
    len
    dig 2
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>
    // arc4_validation/contract.py:163
    // @arc4.abimethod(validate_encoding=False)
    intc_0 // 1
    return
