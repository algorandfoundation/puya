{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AA0CA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AACK;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAE8B;AAC3B;;AAAA;AAEA;AAAA;AAAA;AAAA;AALH;AAAA;AAOA;;;AAAA;;;AAE8B;AAC3B;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AALH;AAAA;AAOA;;;AAAA;;;AAE8B;AAC3B;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALH;AAAA;AAOA;;;AAAA;;;AAE8B;AAC3B;;AAAA;AAEA;AAAA;;AAAA;AAAA;AALH;AAAA;AAOA;;;AAAA;AAAA;;;AAE8B;AAC3B;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AALH;AAAA;AAOA;;;AAAA;;;AAAA;AAE8B;AAC3B;AAAA;AAEA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AALH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 9"
    },
    "7": {
      "op": "bytecblock \"v\""
    },
    "11": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "bz main___algopy_default_create@34",
      "stack_out": []
    },
    "16": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "19": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "20": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "22": {
      "op": "assert",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0x557b8fdf 0x6197bbb1 0xa51cf941 0x8ecee90f 0x42ebf71c 0x96fa5040 0x0604cf1b 0x0fd16d98 0x0e97f8b4 0x3f68b7d1 0x175ba5ae 0x02d56afc 0x1c470dc0 0x248f6960 0xf00c449a 0xd2ee4351 0x5f9e13fa 0x34d0ceaf 0x8acfe94d 0x004c8235 0x42ea7c81 0xc221da6b 0x566d8ab5 0xebd36778 0x7690fe6b 0xf721e7e8 0x7c90f6e2 // method \"validate_uint64(byte[])void\", method \"validate_uint8(byte[])void\", method \"validate_uint512(byte[])void\", method \"validate_ufixed64(byte[])void\", method \"validate_uint8_arr(byte[])void\", method \"validate_uint8_arr3(byte[])void\", method \"validate_bool(byte[])void\", method \"validate_byte(byte[])void\", method \"validate_string(byte[])void\", method \"validate_bytes(byte[])void\", method \"validate_address(byte[])void\", method \"validate_bool_arr(byte[])void\", method \"validate_bool_arr3(byte[])void\", method \"validate_static_tuple(byte[])void\", method \"validate_dynamic_tuple(byte[])void\", method \"validate_static_struct(byte[])void\", method \"validate_dynamic_struct(byte[])void\", method \"validate_static_struct_arr(byte[])void\", method \"validate_static_struct_arr3(byte[])void\", method \"validate_dynamic_struct_arr(byte[])void\", method \"validate_dynamic_struct_arr3(byte[])void\", method \"validate_native_static_struct(byte[])void\", method \"validate_native_dynamic_struct(byte[])void\", method \"validate_native_static_struct_arr(byte[])void\", method \"validate_native_static_struct_arr3(byte[])void\", method \"validate_native_dynamic_struct_arr(byte[])void\", method \"validate_native_dynamic_struct_arr3(byte[])void\"",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)"
      ],
      "stack_out": [
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(validate_address(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(validate_uint64(byte[])void)",
        "Method(validate_uint8(byte[])void)",
        "Method(validate_uint512(byte[])void)",
        "Method(validate_ufixed64(byte[])void)",
        "Method(validate_uint8_arr(byte[])void)",
        "Method(validate_uint8_arr3(byte[])void)",
        "Method(validate_bool(byte[])void)",
        "Method(validate_byte(byte[])void)",
        "Method(validate_string(byte[])void)",
        "Method(validate_bytes(byte[])void)",
        "Method(validate_address(byte[])void)",
        "Method(validate_bool_arr(byte[])void)",
        "Method(validate_bool_arr3(byte[])void)",
        "Method(validate_static_tuple(byte[])void)",
        "Method(validate_dynamic_tuple(byte[])void)",
        "Method(validate_static_struct(byte[])void)",
        "Method(validate_dynamic_struct(byte[])void)",
        "Method(validate_static_struct_arr(byte[])void)",
        "Method(validate_static_struct_arr3(byte[])void)",
        "Method(validate_dynamic_struct_arr(byte[])void)",
        "Method(validate_dynamic_struct_arr3(byte[])void)",
        "Method(validate_native_static_struct(byte[])void)",
        "Method(validate_native_dynamic_struct(byte[])void)",
        "Method(validate_native_static_struct_arr(byte[])void)",
        "Method(validate_native_static_struct_arr3(byte[])void)",
        "Method(validate_native_dynamic_struct_arr(byte[])void)",
        "Method(validate_native_dynamic_struct_arr3(byte[])void)",
        "tmp%6#0"
      ]
    },
    "163": {
      "op": "match validate_uint64 validate_uint8 validate_uint512 validate_ufixed64 validate_uint8_arr validate_uint8_arr3 validate_bool validate_byte validate_string validate_bytes validate_address validate_bool_arr validate_bool_arr3 validate_static_tuple validate_dynamic_tuple validate_static_struct validate_dynamic_struct validate_static_struct_arr validate_static_struct_arr3 validate_dynamic_struct_arr validate_dynamic_struct_arr3 validate_native_static_struct validate_native_dynamic_struct validate_native_static_struct_arr validate_native_static_struct_arr3 validate_native_dynamic_struct_arr validate_native_dynamic_struct_arr3",
      "stack_out": []
    },
    "219": {
      "op": "err"
    },
    "220": {
      "block": "main___algopy_default_create@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "223": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "226": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "227": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint64[routing]",
      "params": {},
      "block": "validate_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "236": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "237": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "240": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8[routing]",
      "params": {},
      "block": "validate_uint8",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "249": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "250": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "252": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": []
    },
    "253": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": []
    },
    "255": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint512[routing]",
      "params": {},
      "block": "validate_uint512",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "258": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "261": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "262": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "64"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "265": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "stack_out": []
    },
    "266": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_ufixed64[routing]",
      "params": {},
      "block": "validate_ufixed64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "274": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "275": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "278": {
      "error": "invalid number of bytes for arc4.ufixed64x2",
      "op": "assert // invalid number of bytes for arc4.ufixed64x2",
      "stack_out": []
    },
    "279": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr[routing]",
      "params": {},
      "block": "validate_uint8_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "287": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "288": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "289": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "290": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "291": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "value#0"
      ]
    },
    "293": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "294": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "295": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "296": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "297": {
      "op": "return",
      "stack_out": []
    },
    "298": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_uint8_arr3[routing]",
      "params": {},
      "block": "validate_uint8_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "301": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "304": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "305": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "3"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "308": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 3>",
      "stack_out": []
    },
    "309": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool[routing]",
      "params": {},
      "block": "validate_bool",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "317": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "318": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "319": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "320": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "stack_out": []
    },
    "321": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_byte[routing]",
      "params": {},
      "block": "validate_byte",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "329": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "330": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "332": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": []
    },
    "333": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "334": {
      "op": "return",
      "stack_out": []
    },
    "335": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_string[routing]",
      "params": {},
      "block": "validate_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "341": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "342": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "343": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "344": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "345": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "value#0"
      ]
    },
    "347": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "348": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "349": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "350": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "351": {
      "op": "return",
      "stack_out": []
    },
    "352": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bytes[routing]",
      "params": {},
      "block": "validate_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "355": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "358": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "359": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "360": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "361": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "362": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "363": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "value#0"
      ]
    },
    "364": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "365": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "366": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": []
    },
    "367": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "368": {
      "op": "return",
      "stack_out": []
    },
    "369": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_address[routing]",
      "params": {},
      "block": "validate_address",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "372": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "375": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "376": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "32"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "379": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": []
    },
    "380": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "381": {
      "op": "return",
      "stack_out": []
    },
    "382": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr[routing]",
      "params": {},
      "block": "validate_bool_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "385": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "389": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "390": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "391": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "7"
      ]
    },
    "393": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "394": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "8"
      ]
    },
    "396": {
      "op": "/",
      "defined_out": [
        "div_floor%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "div_floor%0#0"
      ]
    },
    "397": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "div_floor%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "div_floor%0#0",
        "2"
      ]
    },
    "398": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%1#0"
      ]
    },
    "399": {
      "op": "swap",
      "stack_out": [
        "add%1#0",
        "value#0"
      ]
    },
    "400": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%1#0",
        "len%0#0"
      ]
    },
    "401": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "402": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.bool>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.bool>",
      "stack_out": []
    },
    "403": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "404": {
      "op": "return",
      "stack_out": []
    },
    "405": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_bool_arr3[routing]",
      "params": {},
      "block": "validate_bool_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "411": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "412": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "1"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "414": {
      "error": "invalid number of bytes for arc4.static_array<arc4.bool, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.bool, 3>",
      "stack_out": []
    },
    "415": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "416": {
      "op": "return",
      "stack_out": []
    },
    "417": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_tuple[routing]",
      "params": {},
      "block": "validate_static_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "423": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "424": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "425": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "426": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>",
      "stack_out": []
    },
    "427": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "428": {
      "op": "return",
      "stack_out": []
    },
    "429": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_tuple[routing]",
      "params": {},
      "block": "validate_dynamic_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "435": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "436": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "9"
      ]
    },
    "437": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "438": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "439": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "442": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "443": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "value#0 (copy)"
      ]
    },
    "445": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "446": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "448": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "450": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "451": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "452": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "453": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0",
        "13"
      ]
    },
    "455": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "457": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>",
      "stack_out": []
    },
    "458": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct[routing]",
      "params": {},
      "block": "validate_static_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "463": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "466": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "467": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "469": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4StaticStruct",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct[routing]",
      "params": {},
      "block": "validate_dynamic_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "478": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "479": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "9"
      ]
    },
    "480": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "481": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "482": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "484": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "485": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "486": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "value#0 (copy)"
      ]
    },
    "488": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "489": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "491": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "493": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "494": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "495": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "496": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0",
        "13"
      ]
    },
    "498": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "500": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.ARC4DynamicStruct",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "502": {
      "op": "return",
      "stack_out": []
    },
    "503": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr[routing]",
      "params": {},
      "block": "validate_static_struct_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "509": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "510": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "511": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "512": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "9"
      ]
    },
    "513": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0"
      ]
    },
    "514": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0",
        "2"
      ]
    },
    "515": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "value#0"
      ]
    },
    "517": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "518": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "519": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4StaticStruct>",
      "stack_out": []
    },
    "520": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "521": {
      "op": "return",
      "stack_out": []
    },
    "522": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_static_struct_arr3[routing]",
      "params": {},
      "block": "validate_static_struct_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "525": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "528": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "529": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "27"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "532": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4StaticStruct, 3>",
      "stack_out": []
    },
    "533": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "534": {
      "op": "return",
      "stack_out": []
    },
    "535": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr[routing]",
      "params": {},
      "block": "validate_dynamic_struct_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "539": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0"
      ]
    },
    "542": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "543": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "544": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "545": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "546": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "548": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "549": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "num_bytes%0#0"
      ]
    },
    "550": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ]
    },
    "552": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ]
    },
    "553": {
      "op": "swap",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "tmp%0#0"
      ]
    },
    "554": {
      "op": "extract 4 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0"
      ]
    },
    "557": {
      "op": "intc_1 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "558": {
      "block": "validate_dynamic_struct_arr_for_header@2",
      "stack_in": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "559": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%array_length%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "561": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "562": {
      "op": "bz validate_dynamic_struct_arr_after_for@5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "565": {
      "op": "dupn 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "567": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "568": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "569": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "571": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0 (copy)",
        "array_data%0#0 (copy)"
      ]
    },
    "572": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "574": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "575": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "576": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "577": {
      "op": "dig 7",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ]
    },
    "579": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "580": {
      "op": "cover 5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "582": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "583": {
      "error": "invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "op": "assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "index%0#0"
      ]
    },
    "585": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "index%0#0",
        "1"
      ]
    },
    "586": {
      "op": "+",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "587": {
      "op": "dig 8",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "589": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "591": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "592": {
      "op": "dig 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "594": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "595": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "597": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)",
        "2"
      ]
    },
    "598": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "599": {
      "op": "dig 5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "array_data%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "602": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "603": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "605": {
      "op": "select",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "606": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "array_data%0#0"
      ]
    },
    "608": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "array_data%0#0",
        "item_offset%0#0"
      ]
    },
    "610": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "612": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "613": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "614": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "9"
      ]
    },
    "615": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "616": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "617": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "619": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "eq%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "620": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "621": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "623": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "624": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "625": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "0"
      ]
    },
    "626": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%3#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "627": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%array_length%3#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0",
        "13"
      ]
    },
    "629": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "add%1#0"
      ]
    },
    "630": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "add%1#0",
        "num_bytes%0#0"
      ]
    },
    "632": {
      "op": "+",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "num_bytes%0#0"
      ]
    },
    "633": {
      "op": "bury 5",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "635": {
      "op": "bury 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "637": {
      "op": "b validate_dynamic_struct_arr_for_header@2"
    },
    "640": {
      "block": "validate_dynamic_struct_arr_after_for@5",
      "stack_in": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "642": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "2"
      ]
    },
    "643": {
      "op": "+",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "644": {
      "op": "dig 3",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ]
    },
    "646": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "647": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.ARC4DynamicStruct>",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "648": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "1"
      ]
    },
    "649": {
      "op": "return",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "650": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_dynamic_struct_arr3[routing]",
      "params": {},
      "block": "validate_dynamic_struct_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "653": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "656": {
      "op": "pushint 6 // 6"
    },
    "658": {
      "op": "intc_1 // 0",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "659": {
      "block": "validate_dynamic_struct_arr3_for_header@2",
      "stack_in": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "660": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "3"
      ]
    },
    "662": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "663": {
      "op": "bz validate_dynamic_struct_arr3_after_for@5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "666": {
      "op": "dupn 2",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "668": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "669": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "670": {
      "op": "dig 4",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "673": {
      "op": "cover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0 (copy)"
      ]
    },
    "675": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "value#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "676": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "677": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "678": {
      "op": "dig 5",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "681": {
      "op": "cover 5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "683": {
      "op": "==",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "684": {
      "error": "invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "op": "assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "685": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "index%0#0"
      ]
    },
    "686": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "index%0#0",
        "1"
      ]
    },
    "687": {
      "op": "+",
      "defined_out": [
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "688": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "3"
      ]
    },
    "690": {
      "op": "dig 1",
      "defined_out": [
        "3",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "3",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "692": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "693": {
      "op": "dig 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "value#0 (copy)"
      ]
    },
    "695": {
      "op": "len",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "696": {
      "op": "dig 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "698": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)",
        "2"
      ]
    },
    "699": {
      "op": "*",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "700": {
      "op": "dig 5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "702": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "value#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "703": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "704": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "706": {
      "op": "select",
      "defined_out": [
        "aggregate%end_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "707": {
      "op": "uncover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "value#0"
      ]
    },
    "709": {
      "op": "uncover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "value#0",
        "item_offset%0#0"
      ]
    },
    "711": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "713": {
      "op": "substring3",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "714": {
      "op": "dup",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "715": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "9"
      ]
    },
    "716": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "717": {
      "op": "dup",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "718": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "720": {
      "op": "==",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "eq%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "721": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "722": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "724": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "725": {
      "op": "substring3",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "726": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "0"
      ]
    },
    "727": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "728": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0",
        "13"
      ]
    },
    "730": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "add%1#0"
      ]
    },
    "731": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "add%1#0",
        "num_bytes%0#0"
      ]
    },
    "733": {
      "op": "+",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "num_bytes%0#0"
      ]
    },
    "734": {
      "op": "bury 3",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "736": {
      "op": "bury 1",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "738": {
      "op": "b validate_dynamic_struct_arr3_for_header@2"
    },
    "741": {
      "block": "validate_dynamic_struct_arr3_after_for@5",
      "stack_in": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0"
      ]
    },
    "743": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0"
      ]
    },
    "744": {
      "op": "dig 2",
      "defined_out": [
        "len%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0",
        "num_bytes%0#0"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "747": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.ARC4DynamicStruct, 3>",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "748": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "1"
      ]
    },
    "749": {
      "op": "return",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "750": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct[routing]",
      "params": {},
      "block": "validate_native_static_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "753": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "756": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"v\""
      ]
    },
    "757": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "759": {
      "op": "app_global_put",
      "stack_out": [
        "value#0"
      ]
    },
    "760": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "761": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "9"
      ]
    },
    "762": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "763": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeStaticStruct",
      "stack_out": []
    },
    "764": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "765": {
      "op": "return",
      "stack_out": []
    },
    "766": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "772": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"v\""
      ]
    },
    "773": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "775": {
      "op": "app_global_put",
      "stack_out": [
        "value#0"
      ]
    },
    "776": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "777": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "9"
      ]
    },
    "778": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "779": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "780": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "782": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "783": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "784": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "value#0 (copy)"
      ]
    },
    "786": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "787": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0"
      ]
    },
    "789": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "extract_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "value#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "791": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "792": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "793": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "794": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%array_length%0#0",
        "13"
      ]
    },
    "796": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "797": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "798": {
      "error": "invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.arc4_validation.contract.NativeDynamicStruct",
      "stack_out": []
    },
    "799": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "800": {
      "op": "return",
      "stack_out": []
    },
    "801": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr[routing]",
      "params": {},
      "block": "validate_native_static_struct_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "804": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "807": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"v\""
      ]
    },
    "808": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "810": {
      "op": "app_global_put",
      "stack_out": [
        "value#0"
      ]
    },
    "811": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "812": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "813": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "814": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "9"
      ]
    },
    "815": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0"
      ]
    },
    "816": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0",
        "2"
      ]
    },
    "817": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "818": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "value#0"
      ]
    },
    "819": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "820": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "821": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeStaticStruct>",
      "stack_out": []
    },
    "822": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "823": {
      "op": "return",
      "stack_out": []
    },
    "824": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_static_struct_arr3[routing]",
      "params": {},
      "block": "validate_native_static_struct_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "827": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "830": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"v\""
      ]
    },
    "831": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "833": {
      "op": "app_global_put",
      "stack_out": [
        "value#0"
      ]
    },
    "834": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "835": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "27"
      ]
    },
    "837": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "838": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeStaticStruct, 3>",
      "stack_out": []
    },
    "839": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "840": {
      "op": "return",
      "stack_out": []
    },
    "841": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "844": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "845": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0"
      ]
    },
    "848": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "\"v\""
      ]
    },
    "849": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "\"v\"",
        "value#0 (copy)"
      ]
    },
    "851": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "value#0"
      ]
    },
    "852": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "853": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "854": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "855": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "856": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "858": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "859": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0",
        "value#0",
        "num_bytes%0#0"
      ]
    },
    "860": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "value#0"
      ]
    },
    "862": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ]
    },
    "863": {
      "op": "swap",
      "defined_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "tmp%0#0"
      ]
    },
    "864": {
      "op": "extract 4 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0"
      ]
    },
    "867": {
      "op": "intc_1 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "868": {
      "block": "validate_native_dynamic_struct_arr_for_header@2",
      "stack_in": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "869": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%array_length%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "871": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "872": {
      "op": "bz validate_native_dynamic_struct_arr_after_for@5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "875": {
      "op": "dupn 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "877": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "878": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "879": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "881": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0 (copy)",
        "array_data%0#0 (copy)"
      ]
    },
    "882": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "884": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "885": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "886": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "887": {
      "op": "dig 7",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ]
    },
    "889": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "890": {
      "op": "cover 5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "893": {
      "error": "invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "op": "assert // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "index%0#0"
      ]
    },
    "895": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "index%0#0",
        "1"
      ]
    },
    "896": {
      "op": "+",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "897": {
      "op": "dig 8",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "899": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "901": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "902": {
      "op": "dig 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "904": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "905": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "907": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)",
        "2"
      ]
    },
    "908": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "909": {
      "op": "dig 5",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0 (copy)"
      ]
    },
    "911": {
      "op": "swap",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "array_data%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "912": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "913": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "915": {
      "op": "select",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "916": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "array_data%0#0"
      ]
    },
    "918": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "array_data%0#0",
        "item_offset%0#0"
      ]
    },
    "920": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "922": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "923": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "924": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "9"
      ]
    },
    "925": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "926": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "927": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "929": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "eq%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "930": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "931": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "933": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "array_data%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "934": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "935": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "0"
      ]
    },
    "936": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%3#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "937": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%array_length%3#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0",
        "13"
      ]
    },
    "939": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "add%1#0"
      ]
    },
    "940": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "add%1#0",
        "num_bytes%0#0"
      ]
    },
    "942": {
      "op": "+",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "num_bytes%0#0"
      ]
    },
    "943": {
      "op": "bury 5",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "945": {
      "op": "bury 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "947": {
      "op": "b validate_native_dynamic_struct_arr_for_header@2"
    },
    "950": {
      "block": "validate_native_dynamic_struct_arr_after_for@5",
      "stack_in": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "952": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "2"
      ]
    },
    "953": {
      "op": "+",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "954": {
      "op": "dig 3",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ]
    },
    "956": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "957": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_validation.contract.NativeDynamicStruct>",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "958": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num_bytes%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "1"
      ]
    },
    "959": {
      "op": "return",
      "stack_out": [
        "aggregate%array_length%0#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "960": {
      "subroutine": "test_cases.arc4_validation.contract.ValidationContract.validate_native_dynamic_struct_arr3[routing]",
      "params": {},
      "block": "validate_native_dynamic_struct_arr3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "963": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "966": {
      "op": "dup",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "value#0"
      ]
    },
    "967": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "value#0",
        "\"v\""
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "\"v\"",
        "value#0"
      ]
    },
    "969": {
      "op": "app_global_put",
      "stack_out": [
        "value#0"
      ]
    },
    "970": {
      "op": "pushint 6 // 6"
    },
    "972": {
      "op": "intc_1 // 0",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "973": {
      "block": "validate_native_dynamic_struct_arr3_for_header@2",
      "stack_in": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "974": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "3"
      ]
    },
    "976": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "977": {
      "op": "bz validate_native_dynamic_struct_arr3_after_for@5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "980": {
      "op": "dupn 2",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "982": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "983": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "984": {
      "op": "dig 4",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0"
      ]
    },
    "986": {
      "op": "dup",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "987": {
      "op": "cover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "value#0 (copy)"
      ]
    },
    "989": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "value#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "990": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "991": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "992": {
      "op": "dig 5",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ]
    },
    "994": {
      "op": "dup",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "995": {
      "op": "cover 5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "997": {
      "op": "==",
      "defined_out": [
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "998": {
      "error": "invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "op": "assert // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "999": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "index%0#0"
      ]
    },
    "1000": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1001": {
      "op": "+",
      "defined_out": [
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1002": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "3"
      ]
    },
    "1004": {
      "op": "dig 1",
      "defined_out": [
        "3",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "3",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1006": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1007": {
      "op": "dig 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "value#0 (copy)"
      ]
    },
    "1009": {
      "op": "len",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1010": {
      "op": "dig 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1012": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_index%0#0 (copy)",
        "2"
      ]
    },
    "1013": {
      "op": "*",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1014": {
      "op": "dig 5",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "1016": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "value#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1017": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_item_offset%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1018": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1020": {
      "op": "select",
      "defined_out": [
        "aggregate%end_offset%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1021": {
      "op": "uncover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "value#0"
      ]
    },
    "1023": {
      "op": "uncover 3",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_offset%0#0",
        "value#0",
        "item_offset%0#0"
      ]
    },
    "1025": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "value#0",
        "item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1027": {
      "op": "substring3",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1028": {
      "op": "dup",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1029": {
      "op": "intc_3 // 9",
      "defined_out": [
        "9",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "9"
      ]
    },
    "1030": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1031": {
      "op": "dup",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "1032": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "11"
      ]
    },
    "1034": {
      "op": "==",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "eq%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "1035": {
      "error": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1036": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1038": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1039": {
      "op": "substring3",
      "defined_out": [
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1040": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%substring3%2#0",
        "0"
      ]
    },
    "1041": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1042": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%array_length%0#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%0#0",
        "13"
      ]
    },
    "1044": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%next_index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%next_index%0#0",
        "add%1#0"
      ]
    },
    "1045": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "add%1#0",
        "num_bytes%0#0"
      ]
    },
    "1047": {
      "op": "+",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%next_index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1048": {
      "op": "bury 3",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1050": {
      "op": "bury 1",
      "defined_out": [
        "index%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1052": {
      "op": "b validate_native_dynamic_struct_arr3_for_header@2"
    },
    "1055": {
      "block": "validate_native_dynamic_struct_arr3_after_for@5",
      "stack_in": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "value#0"
      ]
    },
    "1057": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0"
      ]
    },
    "1058": {
      "op": "dig 2",
      "defined_out": [
        "len%0#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%0#0",
        "num_bytes%0#0"
      ]
    },
    "1060": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%1#0"
      ]
    },
    "1061": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.arc4_validation.contract.NativeDynamicStruct, 3>",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1062": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1063": {
      "op": "return",
      "stack_out": [
        "value#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    }
  }
}