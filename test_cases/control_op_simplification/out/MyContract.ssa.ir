contract test_cases.control_op_simplification.contract.MyContract:
    program approval:
        subroutine test_cases.control_op_simplification.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                let do_log#0: uint64 = 0u
                let awst_tmp%0#0: uint64 = (txn NumAppArgs)
                switch awst_tmp%0#0 {1u => block@1, 3u => block@2, * => block@3}
            block@1: // switch_case_0_L9
                let do_log#1: uint64 = 1u
                goto block@4
            block@2: // switch_case_1_L11
                let do_log#2: uint64 = 1u
                goto block@4
            block@3: // switch_case_default_L7
                goto block@4
            block@4: // switch_case_next_L7
                let do_log#3: uint64 = Ï†(do_log#1 <- block@1, do_log#2 <- block@2, do_log#0 <- block@3)
                goto do_log#3 ? block@5 : block@6
            block@5: // if_body_L12
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bytes = (itob tmp%0#0)
                (log tmp%1#0)
                goto block@6
            block@6: // after_if_else_L12
                return 1u
    
    program clear-state:
        subroutine test_cases.control_op_simplification.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L16
                return 1u