contract test_cases.control_op_simplification.contract.MyContract:
    program approval:
        subroutine test_cases.control_op_simplification.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                let do_log#0: uint64 = 0u
                let awst_tmp%0#0: uint64 = (txn NumAppArgs)
                let do_log#8: uint64 = do_log#0
                goto_nth [block@3, block@1, block@3, block@2][awst_tmp%0#0] else goto block@4
            block@1: // switch_case_0_L9
                let do_log#0: uint64 = 1u
                let do_log#8: uint64 = do_log#0
                goto block@4
            block@2: // switch_case_1_L11
                let do_log#0: uint64 = 1u
                let do_log#8: uint64 = do_log#0
                goto block@4
            block@3: // switch_case_default_L7
                let do_log#8: uint64 = do_log#0
                goto block@4
            block@4: // switch_case_next_L7
                let do_log#0: uint64 = do_log#8
                goto do_log#0 ? block@5 : block@6
            block@5: // if_body_L12
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: bytes = (itob tmp%1#0)
                (log tmp%2#0)
                goto block@6
            block@6: // after_if_else_L12
                return 1u
    
    program clear-state:
        subroutine test_cases.control_op_simplification.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L16
                return 1u
