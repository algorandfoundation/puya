{
  "version": 3,
  "sources": [
    "../compiled_logic_sig.py"
  ],
  "mappings": ";;;;;;;;;;;AAcA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAGO;;AAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAd;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0xbb31fc82 // method \"check_sig_with_logic_sig_only_op_compiles()void\"",
      "defined_out": [
        "Method(check_sig_with_logic_sig_only_op_compiles()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(check_sig_with_logic_sig_only_op_compiles()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(check_sig_with_logic_sig_only_op_compiles()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_check_sig_with_logic_sig_only_op_compiles_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b main_switch_case_next@4"
    },
    "39": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "b main_after_if_else@6"
    },
    "42": {
      "block": "main_after_if_else@6",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "43": {
      "block": "main_check_sig_with_logic_sig_only_op_compiles_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "45": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "46": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "49": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "50": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "51": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "52": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "53": {
      "callsub": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]",
      "op": "callsub check_sig_with_logic_sig_only_op_compiles"
    },
    "56": {
      "op": "b main_switch_case_next@4"
    },
    "59": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "61": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "62": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "65": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "66": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "67": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "68": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "69": {
      "op": "b main_block@8"
    },
    "72": {
      "block": "main_block@8",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@9"
    },
    "75": {
      "block": "main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@9",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "76": {
      "op": "return",
      "stack_out": []
    },
    "77": {
      "subroutine": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]",
      "params": {},
      "block": "check_sig_with_logic_sig_only_op_compiles",
      "stack_in": [],
      "op": "b check_sig_with_logic_sig_only_op_compiles_block@0"
    },
    "80": {
      "block": "check_sig_with_logic_sig_only_op_compiles_block@0",
      "stack_in": [],
      "callsub": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles",
      "op": "callsub test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles"
    },
    "83": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "84": {
      "op": "return",
      "stack_out": []
    },
    "85": {
      "subroutine": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles",
      "params": {},
      "block": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles",
      "stack_in": [],
      "op": "b test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0"
    },
    "88": {
      "block": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "pushbytes base32(2VNOSD3GSIRYYA42N2KXDJPWP7HK5XJ7HR76YKBAECTLQI46CCVA) // addr 2VNOSD3GSIRYYA42N2KXDJPWP7HK5XJ7HR76YKBAECTLQI46CCVLOEUABA",
      "defined_out": [
        "Address(2VNOSD3GSIRYYA42N2KXDJPWP7HK5XJ7HR76YKBAECTLQI46CCVLOEUABA)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(2VNOSD3GSIRYYA42N2KXDJPWP7HK5XJ7HR76YKBAECTLQI46CCVLOEUABA)"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "125": {
      "error": "expected to be signed by logic sig",
      "op": "assert // expected to be signed by logic sig",
      "stack_out": []
    },
    "126": {
      "retsub": true,
      "op": "retsub"
    }
  }
}