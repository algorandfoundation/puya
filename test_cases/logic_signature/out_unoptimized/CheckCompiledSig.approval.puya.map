{
  "version": 3,
  "sources": [
    "../compiled_logic_sig.py"
  ],
  "mappings": ";;;;;AASA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAIY;;AAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAd;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "8": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "9": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "12": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "pushbytes 0xbb31fc82 // method \"check_sig_with_logic_sig_only_op_compiles()void\"",
      "defined_out": [
        "Method(check_sig_with_logic_sig_only_op_compiles()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(check_sig_with_logic_sig_only_op_compiles()void)"
      ]
    },
    "21": {
      "op": "swap",
      "stack_out": [
        "Method(check_sig_with_logic_sig_only_op_compiles()void)",
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "match main_check_sig_with_logic_sig_only_op_compiles_route@3",
      "stack_out": []
    },
    "26": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "block": "main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "28": {
      "block": "main_check_sig_with_logic_sig_only_op_compiles_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "31": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "32": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "35": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "36": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "37": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "38": {
      "callsub": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles",
      "op": "callsub check_sig_with_logic_sig_only_op_compiles"
    },
    "41": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "42": {
      "op": "b main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__puya_arc4_router__@11"
    },
    "45": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "47": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "48": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%7#0"
      ]
    },
    "49": {
      "op": "match main___algopy_default_create@7",
      "stack_out": []
    },
    "53": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "56": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "58": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "59": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "60": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "61": {
      "block": "main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "b main_after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__puya_arc4_router__@11"
    },
    "65": {
      "subroutine": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles",
      "params": {},
      "block": "check_sig_with_logic_sig_only_op_compiles_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "pushbytes base32(67S4QBKFNXRYLOXCZ5F5IVDQWDGQLUJ3TR6VDZBTGD4JLK3TSDXQ) // addr 67S4QBKFNXRYLOXCZ5F5IVDQWDGQLUJ3TR6VDZBTGD4JLK3TSDX7L63MI4",
      "defined_out": [
        "Address(67S4QBKFNXRYLOXCZ5F5IVDQWDGQLUJ3TR6VDZBTGD4JLK3TSDX7L63MI4)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(67S4QBKFNXRYLOXCZ5F5IVDQWDGQLUJ3TR6VDZBTGD4JLK3TSDX7L63MI4)"
      ]
    },
    "101": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "102": {
      "error": "expected to be signed by logic sig",
      "op": "assert // expected to be signed by logic sig",
      "stack_out": []
    },
    "103": {
      "retsub": true,
      "op": "retsub"
    }
  }
}