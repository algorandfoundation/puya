#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    b block@0

block@0:
    b block@1

block@1:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@22

after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@22:
    intc_0 // 1
    return

else_body@8:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xbb31fc82 // method "check_sig_with_logic_sig_only_op_compiles()void"
    uncover 1
    match check_sig_with_logic_sig_only_op_compiles_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

check_sig_with_logic_sig_only_op_compiles_route@3:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    callsub check_sig_with_logic_sig_only_op_compiles
    b switch_case_next@5


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]() -> void:
check_sig_with_logic_sig_only_op_compiles:
    b check_sig_with_logic_sig_only_op_compiles_block@0

check_sig_with_logic_sig_only_op_compiles_block@0:
    // logic_signature/compiled_logic_sig.py:16
    // @arc4.abimethod()
    callsub test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles
    intc_0 // 1
    return


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles() -> void:
test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles:
    b test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0

test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0:
    // logic_signature/compiled_logic_sig.py:19
    // Txn.sender == compile_logicsig(dont_use_this).account
    txn Sender
    pushbytes base32(SJUCVRWJ255MULZL7JQBH4L72QXFAUF77FQSOO44HNJR5OXE77ZQ) // addr SJUCVRWJ255MULZL7JQBH4L72QXFAUF77FQSOO44HNJR5OXE77ZQ3J6UWM
    ==
    // logic_signature/compiled_logic_sig.py:18-20
    // assert (
    //     Txn.sender == compile_logicsig(dont_use_this).account
    // ), "expected to be signed by logic sig"
    assert // expected to be signed by logic sig
    retsub
