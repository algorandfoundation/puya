#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@6
    b abi_routing@2

abi_routing@2:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xbb31fc82 // method "check_sig_with_logic_sig_only_op_compiles()void"
    uncover 1
    match check_sig_with_logic_sig_only_op_compiles_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    b after_if_else@7

after_if_else@7:
    // logic_signature/compiled_logic_sig.py:15
    // class CheckCompiledSig(arc4.ARC4Contract):
    err

check_sig_with_logic_sig_only_op_compiles_route@3:
    // logic_signature/compiled_logic_sig.py:16
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub check_sig_with_logic_sig_only_op_compiles
    b switch_case_next@5

__algopy_default_create@6:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@9

block@9:
    b after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@10

after_inlined_test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.__algopy_default_create@10:
    intc_1 // 1
    return


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]() -> void:
check_sig_with_logic_sig_only_op_compiles:
    b check_sig_with_logic_sig_only_op_compiles_block@0

check_sig_with_logic_sig_only_op_compiles_block@0:
    // logic_signature/compiled_logic_sig.py:16
    // @arc4.abimethod()
    callsub test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles
    intc_1 // 1
    return


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles() -> void:
test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles:
    b test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0

test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles_block@0:
    // logic_signature/compiled_logic_sig.py:19
    // Txn.sender == compile_logicsig(dont_use_this).account
    txn Sender
    pushbytes base32(SJUCVRWJ255MULZL7JQBH4L72QXFAUF77FQSOO44HNJR5OXE77ZQ) // addr SJUCVRWJ255MULZL7JQBH4L72QXFAUF77FQSOO44HNJR5OXE77ZQ3J6UWM
    ==
    // logic_signature/compiled_logic_sig.py:18-20
    // assert (
    //     Txn.sender == compile_logicsig(dont_use_this).account
    // ), "expected to be signed by logic sig"
    assert // expected to be signed by logic sig
    retsub
