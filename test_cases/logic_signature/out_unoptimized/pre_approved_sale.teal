#pragma version 10
#pragma typetrack false

// test_cases.logic_signature.signature.pre_approved_sale() -> uint64:
main:
    intcblock 1 0 TMPL_PRICE TMPL_ASSET_ID
    bytecblock "" TMPL_SELLER
    b main_block@0

main_block@0:
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    // logic_signature/signature.py:15
    // assert_correct_payment(pay_txn)
    callsub assert_correct_payment
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:16
    // assert_correct_asset(asset_txn)
    callsub assert_correct_asset
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns Sender
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns AssetReceiver
    ==
    assert
    // logic_signature/signature.py:18
    // assert Global.group_size == 2
    global GroupSize
    pushint 2 // 2
    ==
    assert
    // logic_signature/signature.py:19
    // return True
    intc_0 // 1
    return


// test_cases.logic_signature.signature.assert_correct_payment(txn: uint64) -> void:
assert_correct_payment:
    // logic_signature/signature.py:22-23
    // @subroutine
    // def assert_correct_payment(txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    bytec_0 // ""
    b assert_correct_payment_block@0

assert_correct_payment_block@0:
    // logic_signature/signature.py:24
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    frame_dig -1
    gtxns Receiver
    bytec_1 // TMPL_SELLER
    ==
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz assert_correct_payment_bool_false@3
    b assert_correct_payment_and_contd@1

assert_correct_payment_and_contd@1:
    // logic_signature/signature.py:25
    // txn.amount == TemplateVar[UInt64]("PRICE")
    frame_dig -1
    gtxns Amount
    intc_2 // TMPL_PRICE
    ==
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz assert_correct_payment_bool_false@3
    b assert_correct_payment_bool_true@2

assert_correct_payment_bool_true@2:
    intc_0 // 1
    frame_bury 0
    b assert_correct_payment_bool_merge@4

assert_correct_payment_bool_merge@4:
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    frame_dig 0
    assert
    retsub

assert_correct_payment_bool_false@3:
    intc_1 // 0
    frame_bury 0
    b assert_correct_payment_bool_merge@4


// test_cases.logic_signature.signature.assert_correct_asset(txn: uint64) -> void:
assert_correct_asset:
    // logic_signature/signature.py:29-30
    // @subroutine
    // def assert_correct_asset(txn: gtxn.AssetTransferTransaction) -> None:
    proto 1 0
    bytec_0 // ""
    b assert_correct_asset_block@0

assert_correct_asset_block@0:
    // logic_signature/signature.py:32
    // txn.asset_amount == 1
    frame_dig -1
    gtxns AssetAmount
    intc_0 // 1
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6
    b assert_correct_asset_and_contd@1

assert_correct_asset_and_contd@1:
    // logic_signature/signature.py:33
    // and txn.sender == TemplateVar[Account]("SELLER")
    frame_dig -1
    gtxns Sender
    bytec_1 // TMPL_SELLER
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6
    b assert_correct_asset_and_contd@2

assert_correct_asset_and_contd@2:
    // logic_signature/signature.py:34
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    frame_dig -1
    gtxns XferAsset
    intc_3 // TMPL_ASSET_ID
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6
    b assert_correct_asset_and_contd@3

assert_correct_asset_and_contd@3:
    // logic_signature/signature.py:35
    // and txn.asset_close_to == Global.zero_address
    frame_dig -1
    gtxns AssetCloseTo
    global ZeroAddress
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6
    b assert_correct_asset_and_contd@4

assert_correct_asset_and_contd@4:
    // logic_signature/signature.py:36
    // and txn.rekey_to == Global.zero_address
    frame_dig -1
    gtxns RekeyTo
    global ZeroAddress
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6
    b assert_correct_asset_bool_true@5

assert_correct_asset_bool_true@5:
    intc_0 // 1
    frame_bury 0
    b assert_correct_asset_bool_merge@7

assert_correct_asset_bool_merge@7:
    // logic_signature/signature.py:31-37
    // assert (
    //     txn.asset_amount == 1
    //     and txn.sender == TemplateVar[Account]("SELLER")
    //     and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    //     and txn.asset_close_to == Global.zero_address
    //     and txn.rekey_to == Global.zero_address
    // )
    frame_dig 0
    assert
    retsub

assert_correct_asset_bool_false@6:
    intc_1 // 0
    frame_bury 0
    b assert_correct_asset_bool_merge@7
