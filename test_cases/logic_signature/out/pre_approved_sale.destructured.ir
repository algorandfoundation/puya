program logicsig test_cases.logic_signature.signature.pre_approved_sale:
    subroutine test_cases.logic_signature.signature.pre_approved_sale() -> bool:
        block@0: // L5
            let tmp%0#0: uint64 = ((gtxns TypeEnum) 0u)
            let tmp%1#0: bool = (== tmp%0#0 pay)
            (assert tmp%1#0) // transaction type is pay
            let tmp%2#0: uint64 = ((gtxns TypeEnum) 1u)
            let tmp%3#0: bool = (== tmp%2#0 axfer)
            (assert tmp%3#0) // transaction type is axfer
            test_cases.logic_signature.signature.assert_correct_payment(0u)
            test_cases.logic_signature.signature.assert_correct_asset(1u)
            let tmp%4#0: bytes = ((gtxns Sender) 0u)
            let tmp%5#0: bytes = ((gtxns AssetReceiver) 1u)
            let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
            (assert tmp%6#0)
            let tmp%7#0: uint64 = (global GroupSize)
            let tmp%8#0: bool = (== tmp%7#0 2u)
            (assert tmp%8#0)
            return 1u
    
    subroutine test_cases.logic_signature.signature.assert_correct_payment(txn: uint64) -> void:
        block@0: // L27
            let tmp%0#0: bytes = ((gtxns Receiver) txn#0)
            let tmp%1#0: bool = (== tmp%0#0 TemplateVar[bytes](TMPL_SELLER))
            goto tmp%1#0 ? block@1 : block@3
        block@1: // and_contd_L29
            let tmp%2#0: uint64 = ((gtxns Amount) txn#0)
            let tmp%3#0: bool = (== tmp%2#0 TemplateVar[uint64](TMPL_PRICE))
            goto tmp%3#0 ? block@2 : block@3
        block@2: // bool_true_L29
            let and_result%0#0: bool = 1u
            goto block@4
        block@3: // bool_false_L29
            let and_result%0#0: bool = 0u
            goto block@4
        block@4: // bool_merge_L29
            (assert and_result%0#0)
            return 
    
    subroutine test_cases.logic_signature.signature.assert_correct_asset(txn: uint64) -> void:
        block@0: // L34
            let tmp%0#0: uint64 = ((gtxns AssetAmount) txn#0)
            let tmp%1#0: bool = (== tmp%0#0 1u)
            goto tmp%1#0 ? block@1 : block@6
        block@1: // and_contd_L37
            let tmp%2#0: bytes = ((gtxns Sender) txn#0)
            let tmp%3#0: bool = (== tmp%2#0 TemplateVar[bytes](TMPL_SELLER))
            goto tmp%3#0 ? block@2 : block@6
        block@2: // and_contd_L37
            let tmp%4#0: uint64 = ((gtxns XferAsset) txn#0)
            let tmp%5#0: bool = (== tmp%4#0 TemplateVar[uint64](TMPL_ASSET_ID))
            goto tmp%5#0 ? block@3 : block@6
        block@3: // and_contd_L37
            let tmp%6#0: bytes = ((gtxns AssetCloseTo) txn#0)
            let tmp%7#0: bytes = (global ZeroAddress)
            let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
            goto tmp%8#0 ? block@4 : block@6
        block@4: // and_contd_L37
            let tmp%9#0: bytes = ((gtxns RekeyTo) txn#0)
            let tmp%10#0: bytes = (global ZeroAddress)
            let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
            goto tmp%11#0 ? block@5 : block@6
        block@5: // bool_true_L37
            let and_result%0#0: bool = 1u
            goto block@7
        block@6: // bool_false_L37
            let and_result%0#0: bool = 0u
            goto block@7
        block@7: // bool_merge_L37
            (assert and_result%0#0)
            return 