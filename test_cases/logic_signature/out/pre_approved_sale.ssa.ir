program logicsig test_cases.logic_signature.signature.pre_approved_sale:
    subroutine test_cases.logic_signature.signature.pre_approved_sale() -> uint64:
        block@0: // L5
            test_cases.logic_signature.signature.assert_correct_payment(0u)
            test_cases.logic_signature.signature.assert_correct_asset(1u)
            let tmp%0#0: bytes = ((gtxns Sender) 0u)
            let tmp%1#0: bytes = ((gtxns AssetReceiver) 1u)
            let tmp%2#0: uint64 = (== tmp%0#0 tmp%1#0)
            (assert tmp%2#0)
            let tmp%3#0: uint64 = (global GroupSize)
            let tmp%4#0: uint64 = (== tmp%3#0 2u)
            (assert tmp%4#0)
            return 1u
    
    subroutine test_cases.logic_signature.signature.assert_correct_payment(txn_offset: uint64) -> void:
        block@0: // L25
            let tmp%0#0: uint64 = ((gtxns TypeEnum) txn_offset#0)
            let tmp%1#0: uint64 = (== tmp%0#0 pay)
            goto tmp%1#0 ? block@1 : block@4
        block@1: // and_contd_L28
            let tmp%2#0: bytes = ((gtxns Receiver) txn_offset#0)
            let tmp%3#0: uint64 = (== tmp%2#0 TemplateVar[AVMType.bytes](TMPL_SELLER))
            goto tmp%3#0 ? block@2 : block@4
        block@2: // and_contd_L28
            let tmp%4#0: uint64 = ((gtxns Amount) txn_offset#0)
            let tmp%5#0: uint64 = (== tmp%4#0 TemplateVar[AVMType.uint64](TMPL_PRICE))
            goto tmp%5#0 ? block@3 : block@4
        block@3: // bool_true_L28
            let and_result%0#0: uint64 = 1u
            goto block@5
        block@4: // bool_false_L28
            let and_result%0#1: uint64 = 0u
            goto block@5
        block@5: // bool_merge_L28
            let and_result%0#2: uint64 = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
            (assert and_result%0#2)
            return 
    
    subroutine test_cases.logic_signature.signature.assert_correct_asset(txn_offset: uint64) -> void:
        block@0: // L34
            let tmp%0#0: uint64 = ((gtxns TypeEnum) txn_offset#0)
            let tmp%1#0: uint64 = (== tmp%0#0 axfer)
            goto tmp%1#0 ? block@1 : block@7
        block@1: // and_contd_L37
            let tmp%2#0: uint64 = ((gtxns AssetAmount) txn_offset#0)
            let tmp%3#0: uint64 = (== tmp%2#0 1u)
            goto tmp%3#0 ? block@2 : block@7
        block@2: // and_contd_L37
            let tmp%4#0: bytes = ((gtxns Sender) txn_offset#0)
            let tmp%5#0: uint64 = (== tmp%4#0 TemplateVar[AVMType.bytes](TMPL_SELLER))
            goto tmp%5#0 ? block@3 : block@7
        block@3: // and_contd_L37
            let tmp%6#0: uint64 = ((gtxns XferAsset) txn_offset#0)
            let tmp%7#0: uint64 = (== tmp%6#0 TemplateVar[AVMType.uint64](TMPL_ASSET_ID))
            goto tmp%7#0 ? block@4 : block@7
        block@4: // and_contd_L37
            let tmp%8#0: bytes = ((gtxns AssetCloseTo) txn_offset#0)
            let tmp%9#0: bytes = (global ZeroAddress)
            let tmp%10#0: uint64 = (== tmp%8#0 tmp%9#0)
            goto tmp%10#0 ? block@5 : block@7
        block@5: // and_contd_L37
            let tmp%11#0: bytes = ((gtxns RekeyTo) txn_offset#0)
            let tmp%12#0: bytes = (global ZeroAddress)
            let tmp%13#0: uint64 = (== tmp%11#0 tmp%12#0)
            goto tmp%13#0 ? block@6 : block@7
        block@6: // bool_true_L37
            let and_result%0#0: uint64 = 1u
            goto block@8
        block@7: // bool_false_L37
            let and_result%0#1: uint64 = 0u
            goto block@8
        block@8: // bool_merge_L37
            let and_result%0#2: uint64 = φ(and_result%0#0 <- block@6, and_result%0#1 <- block@7)
            (assert and_result%0#2)
            return 