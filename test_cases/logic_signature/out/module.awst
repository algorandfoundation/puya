abstract contract ARC4Contract
{
  clear_state_program(): bool
  {
    return true
  }
}

logicsig test_cases.logic_signature.signature.pre_approved_sale
{
  pay_txn: group_transaction_pay = group_transaction(index=0u, type=pay)
  asset_txn: group_transaction_axfer = group_transaction(index=1u, type=axfer)
  test_cases.logic_signature.signature.assert_correct_payment(pay_txn)
  test_cases.logic_signature.signature.assert_correct_asset(asset_txn)
  assert(gtxns<Sender>(pay_txn) == gtxns<AssetReceiver>(asset_txn))
  assert(global<GroupSize>() == 2u)
  return true
}

subroutine assert_correct_payment(txn: group_transaction_pay): void
{
  assert(gtxns<Receiver>(txn) == TemplateVar[account](TMPL_SELLER) and gtxns<Amount>(txn) == TemplateVar[uint64](TMPL_PRICE))
}

subroutine assert_correct_asset(txn: group_transaction_axfer): void
{
  assert(gtxns<AssetAmount>(txn) == 1u and gtxns<Sender>(txn) == TemplateVar[account](TMPL_SELLER) and gtxns<XferAsset>(txn) == TemplateVar[asset](TMPL_ASSET_ID) and gtxns<AssetCloseTo>(txn) == global<ZeroAddress>() and gtxns<RekeyTo>(txn) == global<ZeroAddress>())
}

logicsig test_cases.logic_signature.always_allow.some_sig
{
  return true
}