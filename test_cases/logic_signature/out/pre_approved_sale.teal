#pragma version 10
#pragma typetrack false

// test_cases.logic_signature.signature.pre_approved_sale() -> uint64:
main:
    intcblock 1 0 TMPL_PRICE TMPL_ASSET_ID
    bytecblock TMPL_SELLER
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    // logic_signature/signature.py:24
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    gtxns Receiver
    bytec_0 // TMPL_SELLER
    ==
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz bool_false@4
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    // logic_signature/signature.py:25
    // txn.amount == TemplateVar[UInt64]("PRICE")
    gtxns Amount
    intc_2 // TMPL_PRICE
    ==
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz bool_false@4
    intc_0 // 1

bool_merge@5:
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    assert
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:32
    // txn.asset_amount == 1
    gtxns AssetAmount
    intc_0 // 1
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz bool_false@13
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:33
    // and txn.sender == TemplateVar[Account]("SELLER")
    gtxns Sender
    bytec_0 // TMPL_SELLER
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz bool_false@13
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:34
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    gtxns XferAsset
    intc_3 // TMPL_ASSET_ID
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz bool_false@13
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:35
    // and txn.asset_close_to == Global.zero_address
    gtxns AssetCloseTo
    global ZeroAddress
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz bool_false@13
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:36
    // and txn.rekey_to == Global.zero_address
    gtxns RekeyTo
    global ZeroAddress
    ==
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz bool_false@13
    intc_0 // 1

bool_merge@14:
    // logic_signature/signature.py:31-37
    // assert (
    //     txn.asset_amount == 1
    //     and txn.sender == TemplateVar[Account]("SELLER")
    //     and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    //     and txn.asset_close_to == Global.zero_address
    //     and txn.rekey_to == Global.zero_address
    // )
    assert
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    intc_1 // 0
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns Sender
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    intc_0 // 1
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns AssetReceiver
    ==
    assert
    // logic_signature/signature.py:18
    // assert Global.group_size == 2
    global GroupSize
    pushint 2 // 2
    ==
    // logic_signature/signature.py:19
    // return True
    return

bool_false@13:
    intc_1 // 0
    b bool_merge@14

bool_false@4:
    intc_1 // 0
    b bool_merge@5
