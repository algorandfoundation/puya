{
  "version": 3,
  "sources": [
    "../compiled_logic_sig.py"
  ],
  "mappings": ";AAcA;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AADL;;AAAA;AAAA;;;;;;;;AAIY;;AAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAd;AADJ;AAFH;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "6": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "9": {
      "op": "pushbytes 0xbb31fc82 // method \"check_sig_with_logic_sig_only_op_compiles()void\"",
      "defined_out": [
        "Method(check_sig_with_logic_sig_only_op_compiles()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(check_sig_with_logic_sig_only_op_compiles()void)"
      ]
    },
    "15": {
      "op": "==",
      "defined_out": [
        "eq%tmp%2#0"
      ],
      "stack_out": [
        "eq%tmp%2#0"
      ]
    },
    "16": {
      "op": "assert",
      "stack_out": []
    },
    "17": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "19": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "20": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "21": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "23": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "24": {
      "op": "b check_sig_with_logic_sig_only_op_compiles"
    },
    "27": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "29": {
      "op": "!",
      "defined_out": [
        "not%tmp%7#0"
      ],
      "stack_out": [
        "not%tmp%7#0"
      ]
    },
    "30": {
      "op": "assert",
      "stack_out": []
    },
    "31": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "33": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "34": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "35": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "37": {
      "op": "return",
      "stack_out": []
    },
    "38": {
      "subroutine": "test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]",
      "params": {},
      "block": "check_sig_with_logic_sig_only_op_compiles",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "op": "pushbytes base32(L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBA) // addr L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBCSLJBGI",
      "defined_out": [
        "Address(L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBCSLJBGI)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBCSLJBGI)"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "75": {
      "error": "expected to be signed by logic sig",
      "op": "assert // expected to be signed by logic sig",
      "stack_out": []
    },
    "76": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    }
  }
}