// Op                                                                        Stack (out)
// test_cases.logic_signature.signature.pre_approved_sale() -> uint64:
main_block@0:
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    int 0                                                                    0
    gtxns TypeEnum                                                           gtxn_type%0#0
    int pay                                                                  gtxn_type%0#0,pay
    ==                                                                       gtxn_type_matches%0#0
    assert // transaction type is pay
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    int 1                                                                    1
    gtxns TypeEnum                                                           gtxn_type%1#0
    int axfer                                                                gtxn_type%1#0,axfer
    ==                                                                       gtxn_type_matches%1#0
    assert // transaction type is axfer
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    int 0                                                                    0
    // logic_signature/signature.py:15
    // assert_correct_payment(pay_txn)
    callsub assert_correct_payment
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    int 1                                                                    1
    // logic_signature/signature.py:16
    // assert_correct_asset(asset_txn)
    callsub assert_correct_asset
    // logic_signature/signature.py:13
    // pay_txn = gtxn.PaymentTransaction(0)
    int 0                                                                    0
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns Sender                                                             tmp%0#0
    // logic_signature/signature.py:14
    // asset_txn = gtxn.AssetTransferTransaction(1)
    int 1                                                                    tmp%0#0,1
    // logic_signature/signature.py:17
    // assert pay_txn.sender == asset_txn.asset_receiver
    gtxns AssetReceiver                                                      tmp%0#0,tmp%1#0
    l-load tmp%0#0 1                                                         tmp%1#0,tmp%0#0
    l-load tmp%1#0 1                                                         tmp%0#0,tmp%1#0
    ==                                                                       tmp%2#0
    assert
    // logic_signature/signature.py:18
    // assert Global.group_size == 2
    global GroupSize                                                         tmp%3#0
    int 2                                                                    tmp%3#0,2
    ==                                                                       tmp%4#0
    assert
    // logic_signature/signature.py:19
    // return True
    int 1                                                                    1
    return


// test_cases.logic_signature.signature.assert_correct_payment(txn: uint64) -> void:
assert_correct_payment:                                                      (洧도) txn#0 |
    // logic_signature/signature.py:22-23
    // @subroutine
    // def assert_correct_payment(txn: gtxn.PaymentTransaction) -> None:
    proto 1 0                                                                (洧도) txn#0 |

assert_correct_payment_block@0:                                              (洧도) txn#0 |
    // logic_signature/signature.py:24
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns Receiver                                                           (洧도) txn#0 | tmp%0#0
    byte TMPL_SELLER                                                         (洧도) txn#0 | tmp%0#0,TMPL_SELLER
    ==                                                                       (洧도) txn#0 | tmp%1#0
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz assert_correct_payment_bool_false@3                                   (洧도) txn#0 |
    // Implicit fall through to assert_correct_payment_and_contd@1           (洧도) txn#0 |

assert_correct_payment_and_contd@1:                                          (洧도) txn#0 |
    // logic_signature/signature.py:25
    // txn.amount == TemplateVar[UInt64]("PRICE")
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns Amount                                                             (洧도) txn#0 | tmp%2#0
    int TMPL_PRICE                                                           (洧도) txn#0 | tmp%2#0,TMPL_PRICE
    ==                                                                       (洧도) txn#0 | tmp%3#0
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    bz assert_correct_payment_bool_false@3                                   (洧도) txn#0 |
    // Implicit fall through to assert_correct_payment_bool_true@2           (洧도) txn#0 |

assert_correct_payment_bool_true@2:                                          (洧도) txn#0 |
    int 1                                                                    (洧도) txn#0 | and_result%0#0
    x-store and_result%0#0                                                   (洧도) txn#0 | (洧뎶) and_result%0#0 |
    b assert_correct_payment_bool_merge@4                                    (洧도) txn#0 | (洧뎶) and_result%0#0 |

assert_correct_payment_bool_false@3:                                         (洧도) txn#0 |
    int 0                                                                    (洧도) txn#0 | and_result%0#0
    x-store and_result%0#0                                                   (洧도) txn#0 | (洧뎶) and_result%0#0 |
    // Implicit fall through to assert_correct_payment_bool_merge@4          (洧도) txn#0 | (洧뎶) and_result%0#0 |

assert_correct_payment_bool_merge@4:                                         (洧도) txn#0 | (洧뎶) and_result%0#0 |
    // logic_signature/signature.py:24-26
    // assert txn.receiver == TemplateVar[Account]("SELLER") and (
    //     txn.amount == TemplateVar[UInt64]("PRICE")
    // )
    x-load and_result%0#0                                                    (洧도) txn#0 | and_result%0#0
    assert                                                                   (洧도) txn#0 |
    retsub


// test_cases.logic_signature.signature.assert_correct_asset(txn: uint64) -> void:
assert_correct_asset:                                                        (洧도) txn#0 |
    // logic_signature/signature.py:29-30
    // @subroutine
    // def assert_correct_asset(txn: gtxn.AssetTransferTransaction) -> None:
    proto 1 0                                                                (洧도) txn#0 |

assert_correct_asset_block@0:                                                (洧도) txn#0 |
    // logic_signature/signature.py:32
    // txn.asset_amount == 1
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns AssetAmount                                                        (洧도) txn#0 | tmp%0#0
    int 1                                                                    (洧도) txn#0 | tmp%0#0,1
    ==                                                                       (洧도) txn#0 | tmp%1#0
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6                                     (洧도) txn#0 |
    // Implicit fall through to assert_correct_asset_and_contd@1             (洧도) txn#0 |

assert_correct_asset_and_contd@1:                                            (洧도) txn#0 |
    // logic_signature/signature.py:33
    // and txn.sender == TemplateVar[Account]("SELLER")
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns Sender                                                             (洧도) txn#0 | tmp%2#0
    byte TMPL_SELLER                                                         (洧도) txn#0 | tmp%2#0,TMPL_SELLER
    ==                                                                       (洧도) txn#0 | tmp%3#0
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6                                     (洧도) txn#0 |
    // Implicit fall through to assert_correct_asset_and_contd@2             (洧도) txn#0 |

assert_correct_asset_and_contd@2:                                            (洧도) txn#0 |
    // logic_signature/signature.py:34
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns XferAsset                                                          (洧도) txn#0 | tmp%4#0
    int TMPL_ASSET_ID                                                        (洧도) txn#0 | tmp%4#0,TMPL_ASSET_ID
    ==                                                                       (洧도) txn#0 | tmp%5#0
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6                                     (洧도) txn#0 |
    // Implicit fall through to assert_correct_asset_and_contd@3             (洧도) txn#0 |

assert_correct_asset_and_contd@3:                                            (洧도) txn#0 |
    // logic_signature/signature.py:35
    // and txn.asset_close_to == Global.zero_address
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns AssetCloseTo                                                       (洧도) txn#0 | tmp%6#0
    global ZeroAddress                                                       (洧도) txn#0 | tmp%6#0,tmp%7#0
    l-load tmp%6#0 1                                                         (洧도) txn#0 | tmp%7#0,tmp%6#0
    l-load tmp%7#0 1                                                         (洧도) txn#0 | tmp%6#0,tmp%7#0
    ==                                                                       (洧도) txn#0 | tmp%8#0
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6                                     (洧도) txn#0 |
    // Implicit fall through to assert_correct_asset_and_contd@4             (洧도) txn#0 |

assert_correct_asset_and_contd@4:                                            (洧도) txn#0 |
    // logic_signature/signature.py:36
    // and txn.rekey_to == Global.zero_address
    p-load txn#0                                                             (洧도) txn#0 | txn#0 (copy)
    gtxns RekeyTo                                                            (洧도) txn#0 | tmp%9#0
    global ZeroAddress                                                       (洧도) txn#0 | tmp%9#0,tmp%10#0
    l-load tmp%9#0 1                                                         (洧도) txn#0 | tmp%10#0,tmp%9#0
    l-load tmp%10#0 1                                                        (洧도) txn#0 | tmp%9#0,tmp%10#0
    ==                                                                       (洧도) txn#0 | tmp%11#0
    // logic_signature/signature.py:32-36
    // txn.asset_amount == 1
    // and txn.sender == TemplateVar[Account]("SELLER")
    // and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    // and txn.asset_close_to == Global.zero_address
    // and txn.rekey_to == Global.zero_address
    bz assert_correct_asset_bool_false@6                                     (洧도) txn#0 |
    // Implicit fall through to assert_correct_asset_bool_true@5             (洧도) txn#0 |

assert_correct_asset_bool_true@5:                                            (洧도) txn#0 |
    int 1                                                                    (洧도) txn#0 | and_result%0#0
    x-store and_result%0#0                                                   (洧도) txn#0 | (洧뎶) and_result%0#0 |
    b assert_correct_asset_bool_merge@7                                      (洧도) txn#0 | (洧뎶) and_result%0#0 |

assert_correct_asset_bool_false@6:                                           (洧도) txn#0 |
    int 0                                                                    (洧도) txn#0 | and_result%0#0
    x-store and_result%0#0                                                   (洧도) txn#0 | (洧뎶) and_result%0#0 |
    // Implicit fall through to assert_correct_asset_bool_merge@7            (洧도) txn#0 | (洧뎶) and_result%0#0 |

assert_correct_asset_bool_merge@7:                                           (洧도) txn#0 | (洧뎶) and_result%0#0 |
    // logic_signature/signature.py:31-37
    // assert (
    //     txn.asset_amount == 1
    //     and txn.sender == TemplateVar[Account]("SELLER")
    //     and txn.xfer_asset == TemplateVar[Asset]("ASSET_ID")
    //     and txn.asset_close_to == Global.zero_address
    //     and txn.rekey_to == Global.zero_address
    // )
    x-load and_result%0#0                                                    (洧도) txn#0 | and_result%0#0
    assert                                                                   (洧도) txn#0 |
    retsub


