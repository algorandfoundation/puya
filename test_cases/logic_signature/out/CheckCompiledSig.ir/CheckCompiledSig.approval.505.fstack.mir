// Op                                                                     Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        txn NumAppArgs                                                    tmp%0#1
        bz main_bare_routing@6 ; b main_abi_routing@2

    main_abi_routing@2:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        txna ApplicationArgs 0                                            tmp%2#0
        method check_sig_with_logic_sig_only_op_compiles()void            tmp%2#0,Method(check_sig_with_logic_sig_only_op_compiles()void)
        ==                                                                eq%tmp%2#0
        assert
        // logic_signature/compiled_logic_sig.py:16
        // @arc4.abimethod()
        txn OnCompletion                                                  tmp%3#0
        !                                                                 tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                 tmp%5#0
        assert // can only call when not creating
        callsub check_sig_with_logic_sig_only_op_compiles
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        err

    main_bare_routing@6:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        txn OnCompletion                                                  tmp%7#0
        !                                                                 not%tmp%7#0
        assert
        txn ApplicationID                                                 tmp%8#0
        !                                                                 tmp%9#0
        assert // can only call when creating
        int 1                                                             1
        return


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]() -> void:
subroutine check_sig_with_logic_sig_only_op_compiles:
    check_sig_with_logic_sig_only_op_compiles_block@0:
        // logic_signature/compiled_logic_sig.py:19
        // Txn.sender == compile_logicsig(dont_use_this).account
        txn Sender                                                        tmp%0#0
        addr "L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBCSLJBGI" tmp%0#0,Address(L5ABA6JEVE3VADKIBQPVT6JSLFSNTU6P3Z5OCNRGA4LMRYA7WKBCSLJBGI)
        ==                                                                tmp%1#0
        // logic_signature/compiled_logic_sig.py:18-20
        // assert (
        //     Txn.sender == compile_logicsig(dont_use_this).account
        // ), "expected to be signed by logic sig"
        assert // expected to be signed by logic sig
        // logic_signature/compiled_logic_sig.py:16
        // @arc4.abimethod()
        int 1                                                             1
        return


