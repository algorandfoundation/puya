// Op                                                                          Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        txn NumAppArgs                                                         tmp%0#1
        bz main___algopy_default_create@6 ; b main_abi_routing@2

    main_abi_routing@2:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                 tmp%2#0
        method check_sig_with_logic_sig_only_op_compiles()void                 tmp%2#0,Method(check_sig_with_logic_sig_only_op_compiles()void)
        l-load tmp%2#0 1                                                       Method(check_sig_with_logic_sig_only_op_compiles()void),tmp%2#0
        match main_check_sig_with_logic_sig_only_op_compiles_route@3 ; b main_switch_case_next@5 

    main_check_sig_with_logic_sig_only_op_compiles_route@3:
        // logic_signature/compiled_logic_sig.py:16
        // @arc4.abimethod()
        txn OnCompletion                                                       tmp%3#0
        !                                                                      tmp%4#0
        txn ApplicationID                                                      tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                       tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                       tmp%4#0,tmp%5#0
        &&                                                                     tmp%7#0
        assert // OnCompletion must be NoOp && can only call when not creating
        callsub check_sig_with_logic_sig_only_op_compiles
        b main_switch_case_next@5

    main_switch_case_next@5:
        // logic_signature/compiled_logic_sig.py:15
        // class CheckCompiledSig(arc4.ARC4Contract):
        err

    main___algopy_default_create@6:
        txn OnCompletion                                                       tmp%8#0
        !                                                                      tmp%9#0
        txn ApplicationID                                                      tmp%9#0,tmp%10#0
        !                                                                      tmp%9#0,tmp%11#0
        l-load tmp%9#0 1                                                       tmp%11#0,tmp%9#0
        l-load tmp%11#0 1                                                      tmp%9#0,tmp%11#0
        &&                                                                     tmp%12#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                  1
        return


// test_cases.logic_signature.compiled_logic_sig.CheckCompiledSig.check_sig_with_logic_sig_only_op_compiles[routing]() -> void:
subroutine check_sig_with_logic_sig_only_op_compiles:
    check_sig_with_logic_sig_only_op_compiles_block@0:
        // logic_signature/compiled_logic_sig.py:19
        // Txn.sender == compile_logicsig(dont_use_this).account
        txn Sender                                                             tmp%0#0
        addr "XFVQVIX76GWVJE3FEPZ5QKF2QWHX2RLJVSREIIXYAJYQWXP6RQKM4RLYNY"      tmp%0#0,Address(XFVQVIX76GWVJE3FEPZ5QKF2QWHX2RLJVSREIIXYAJYQWXP6RQKM4RLYNY)
        ==                                                                     tmp%1#0
        // logic_signature/compiled_logic_sig.py:18-20
        // assert (
        //     Txn.sender == compile_logicsig(dont_use_this).account
        // ), "expected to be signed by logic sig"
        assert // expected to be signed by logic sig
        // logic_signature/compiled_logic_sig.py:16
        // @arc4.abimethod()
        int 1                                                                  1
        return


