{
  "version": 3,
  "sources": [
    "../signature.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYc;AAAA;;AAAA;AAAA;AAAA;AACE;AAAA;;AAAA;;AAAA;AAAA;AADF;AAWH;;AAAgB;AAAhB;AAAA;;;AAXG;AAYN;;AAAc;AAAd;AADG;;;;AAAP;AAVY;AAkBR;;AAAoB;AAApB;AAAA;;;AAlBQ;AAmBJ;;AAAc;AAAd;AADJ;;;AAlBQ;AAoBJ;;AAAkB;AAAlB;AAFJ;;;AAlBQ;AAqBJ;;AAAsB;;AAAtB;AAHJ;;;AAlBQ;AAsBJ;;AAAgB;;AAAhB;AAJJ;;;;AADJ;AAlBU;AAIH;;AAHK;AAGa;;AAAlB;AAAP;AACO;;AAAqB;;AAArB;AACP;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.logic_signature.signature.pre_approved_sale",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 TMPL_PRICE TMPL_ASSET_ID"
    },
    "7": {
      "op": "bytecblock TMPL_SELLER"
    },
    "42": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "43": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_type%0#0"
      ]
    },
    "45": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "46": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_type_matches%0#0"
      ]
    },
    "47": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": []
    },
    "48": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "49": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_type%1#0"
      ]
    },
    "51": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_type_matches%1#0"
      ]
    },
    "54": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": []
    },
    "55": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "56": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "bytec_0 // TMPL_SELLER",
      "defined_out": [
        "TMPL_SELLER",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "TMPL_SELLER"
      ]
    },
    "59": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "60": {
      "op": "bz bool_false@4",
      "stack_out": []
    },
    "63": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "64": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "66": {
      "op": "intc_2 // TMPL_PRICE",
      "defined_out": [
        "TMPL_PRICE",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "TMPL_PRICE"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "68": {
      "op": "bz bool_false@4",
      "stack_out": []
    },
    "71": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "72": {
      "block": "bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "73": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "74": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "76": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#2",
        "1"
      ]
    },
    "77": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "78": {
      "op": "bz bool_false@13",
      "stack_out": []
    },
    "81": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "82": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%2#2"
      ]
    },
    "84": {
      "op": "bytec_0 // TMPL_SELLER",
      "defined_out": [
        "TMPL_SELLER",
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%2#2",
        "TMPL_SELLER"
      ]
    },
    "85": {
      "op": "==",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "86": {
      "op": "bz bool_false@13",
      "stack_out": []
    },
    "89": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "90": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "92": {
      "op": "intc_3 // TMPL_ASSET_ID",
      "defined_out": [
        "TMPL_ASSET_ID",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "TMPL_ASSET_ID"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "94": {
      "op": "bz bool_false@13",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "98": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "100": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "103": {
      "op": "bz bool_false@13",
      "stack_out": []
    },
    "106": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "107": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "109": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "112": {
      "op": "bz bool_false@13",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "116": {
      "block": "bool_merge@14",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "117": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "118": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "121": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "124": {
      "op": "assert",
      "stack_out": []
    },
    "125": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "127": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "130": {
      "op": "return",
      "stack_out": []
    },
    "131": {
      "block": "bool_false@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "132": {
      "op": "b bool_merge@14"
    },
    "135": {
      "block": "bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "136": {
      "op": "b bool_merge@5"
    }
  }
}