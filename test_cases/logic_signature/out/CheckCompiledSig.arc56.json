{
    "name": "CheckCompiledSig",
    "structs": {},
    "methods": [
        {
            "name": "check_sig_with_logic_sig_only_op_compiles",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        26
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "expected to be signed by logic sig"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIC8vIGxvZ2ljX3NpZ25hdHVyZS9jb21waWxlZF9sb2dpY19zaWcucHk6MTUKICAgIC8vIGNsYXNzIENoZWNrQ29tcGlsZWRTaWcoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVANQogICAgcHVzaGJ5dGVzIDB4YmIzMWZjODIgLy8gbWV0aG9kICJjaGVja19zaWdfd2l0aF9sb2dpY19zaWdfb25seV9vcF9jb21waWxlcygpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY2hlY2tfc2lnX3dpdGhfbG9naWNfc2lnX29ubHlfb3BfY29tcGlsZXNfcm91dGVAMwogICAgZXJyCgptYWluX2NoZWNrX3NpZ193aXRoX2xvZ2ljX3NpZ19vbmx5X29wX2NvbXBpbGVzX3JvdXRlQDM6CiAgICAvLyBsb2dpY19zaWduYXR1cmUvY29tcGlsZWRfbG9naWNfc2lnLnB5OjE2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBiIGNoZWNrX3NpZ193aXRoX2xvZ2ljX3NpZ19vbmx5X29wX2NvbXBpbGVzCgptYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDU6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMubG9naWNfc2lnbmF0dXJlLmNvbXBpbGVkX2xvZ2ljX3NpZy5DaGVja0NvbXBpbGVkU2lnLmNoZWNrX3NpZ193aXRoX2xvZ2ljX3NpZ19vbmx5X29wX2NvbXBpbGVzW3JvdXRpbmddKCkgLT4gdm9pZDoKY2hlY2tfc2lnX3dpdGhfbG9naWNfc2lnX29ubHlfb3BfY29tcGlsZXM6CiAgICAvLyBsb2dpY19zaWduYXR1cmUvY29tcGlsZWRfbG9naWNfc2lnLnB5OjE5CiAgICAvLyBUeG4uc2VuZGVyID09IGNvbXBpbGVfbG9naWNzaWcoZG9udF91c2VfdGhpcykuYWNjb3VudAogICAgdHhuIFNlbmRlcgogICAgcHVzaGJ5dGVzIGJhc2UzMihHNk41V1M0NUJQUFRJRzJLM0VBS1RYVUJQTlRBNkhXV1VQWFVOUVI2TUdTM1gyUFAzTEpBKSAvLyBhZGRyIEc2TjVXUzQ1QlBQVElHMkszRUFLVFhVQlBOVEE2SFdXVVBYVU5RUjZNR1MzWDJQUDNMSklWV0tFTE0KICAgID09CiAgICAvLyBsb2dpY19zaWduYXR1cmUvY29tcGlsZWRfbG9naWNfc2lnLnB5OjE4LTIwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gY29tcGlsZV9sb2dpY3NpZyhkb250X3VzZV90aGlzKS5hY2NvdW50CiAgICAvLyApLCAiZXhwZWN0ZWQgdG8gYmUgc2lnbmVkIGJ5IGxvZ2ljIHNpZyIKICAgIGFzc2VydCAvLyBleHBlY3RlZCB0byBiZSBzaWduZWQgYnkgbG9naWMgc2lnCiAgICAvLyBsb2dpY19zaWduYXR1cmUvY29tcGlsZWRfbG9naWNfc2lnLnB5OjE2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CzEbQQAYgAS7MfyCNhoAjgEAAQAxGRQxGBBEQgALMRkUMRgUEESBAUMxAIAgN5vbS50L3zQbStkAqd6Be2YPHtaj70bCPmGlu+nv2tISRIEBQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}