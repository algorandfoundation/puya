main marketplace_with_tups.DigitalMarketplaceWithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "init")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@14
    block@4: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getListingsMbr()uint64" => block@5, method "allowAsset(pay,asset)void" => block@6, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@7, method "deposit(axfer,uint64)void" => block@8, method "setPrice(asset,uint64,uint64)void" => block@9, method "buy(account,asset,uint64,pay,uint64)void" => block@10, method "withdraw(asset,uint64)void" => block@11, method "bid(account,asset,uint64,pay,uint64,uint64)void" => block@12, method "acceptBid(asset,uint64)void" => block@13, * => block@16}
    block@5: // getListingsMbr_route_L56
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%8#0: Encoded(uint64) = encode<uint64>(50500u)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@6: // allowAsset_route_L60
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%16#0: uint64 = ((txnas Assets) tmp%15#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset(gtxn_idx%0#0, tmp%16#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@7: // firstDeposit_route_L73
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%21#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%21#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%22#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%22#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 axfer)
        (assert gtxn_type_matches%2#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%23#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%24#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%1#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit(gtxn_idx%1#0, gtxn_idx%2#0, tmp%23#0, tmp%24#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@8: // deposit_route_L98
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let tmp%29#0: uint64 = (txn GroupIndex)
        let gtxn_idx%3#0: uint64 = (- tmp%29#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) gtxn_idx%3#0)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%30#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%2#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.deposit(gtxn_idx%3#0, tmp%30#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@9: // setPrice_route_L119
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%36#0: uint64 = ((txnas Assets) tmp%35#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%37#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%38#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%4#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.set_price(tmp%36#0, tmp%37#0, tmp%38#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@10: // buy_route_L136
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%43#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let tmp%44#0: account = ((txnas Accounts) tmp%43#0)
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let tmp%46#0: uint64 = ((txnas Assets) tmp%45#0)
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%47#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%5#0)
        let tmp%48#0: uint64 = (txn GroupIndex)
        let gtxn_idx%4#0: uint64 = (- tmp%48#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) gtxn_idx%4#0)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 pay)
        (assert gtxn_type_matches%4#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%49#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%6#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.buy(tmp%44#0, tmp%46#0, tmp%47#0, gtxn_idx%4#0, tmp%49#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@11: // withdraw_route_L170
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%54#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let tmp%55#0: uint64 = ((txnas Assets) tmp%54#0)
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%56#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%7#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.withdraw(tmp%55#0, tmp%56#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // bid_route_L197
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%61#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let tmp%62#0: account = ((txnas Accounts) tmp%61#0)
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%63#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let tmp%64#0: uint64 = ((txnas Assets) tmp%63#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%65#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%8#0)
        let tmp%66#0: uint64 = (txn GroupIndex)
        let gtxn_idx%5#0: uint64 = (- tmp%66#0 1u)
        let gtxn_type%5#0: uint64 = ((gtxns TypeEnum) gtxn_idx%5#0)
        let gtxn_type_matches%5#0: bool = (== gtxn_type%5#0 pay)
        (assert gtxn_type_matches%5#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%67#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%9#0)
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%68#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%10#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.bid(tmp%62#0, tmp%64#0, tmp%65#0, gtxn_idx%5#0, tmp%67#0, tmp%68#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@13: // acceptBid_route_L235
        let tmp%69#0: uint64 = (txn OnCompletion)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // OnCompletion is not NoOp
        let tmp%71#0: uint64 = (txn ApplicationID)
        (assert tmp%71#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%73#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let tmp%74#0: uint64 = ((txnas Assets) tmp%73#0)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%75#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%11#0)
        marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid(tmp%74#0, tmp%75#0)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#8: bool = 1u
        goto block@17
    block@14: // bare_routing_L17
        let tmp%76#0: uint64 = (txn OnCompletion)
        goto tmp%76#0 ? block@16 : block@15
    block@15: // __algopy_default_create_L1
        let tmp%77#0: uint64 = (txn ApplicationID)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // can only call when creating
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#9: bool = 1u
        goto block@17
    block@16: // after_if_else_L17
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#10: bool = 0u
        goto block@17
    block@17: // after_inlined_marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0 <- block@5, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#1 <- block@6, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#2 <- block@7, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#3 <- block@8, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#4 <- block@9, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#5 <- block@10, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#6 <- block@11, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#7 <- block@12, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#8 <- block@13, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#9 <- block@15, marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#10 <- block@16)
        return tmp%0#1

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity: uint64, price: uint64, asset_decimals: uint64) -> uint64:
    block@0: // L42
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#0: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#0: bool = (! _quotient_high#0)
        (assert tmp%8#0)
        return amount_to_be_paid#0

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset(mbr_pay: uint64, asset: uint64) -> void:
    block@0: // L60
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (tmp%1#0: uint64, tmp%2#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 asset#0)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#0: account = (global CurrentApplicationAddress)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: uint64 = (global AssetOptInMinBalance)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit(mbr_pay: uint64, xfer: uint64, unitary_price: uint64, nonce: uint64) -> void:
    block@0: // L73
        let tmp%0#0: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#0: account = (txn Sender)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: bool = (== tmp%6#0 50500u)
        (assert tmp%8#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%11#0: bool = (! maybe_exists%0#0)
        (assert tmp%11#0)
        let tmp%12#0: account = ((gtxns Sender) xfer#0)
        let tmp%13#0: account = (txn Sender)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%16#0: account = (global CurrentApplicationAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%18#0)
        let tmp%21#0: account = (global ZeroAddress)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%18#0, unitary_price#0, tmp%21#0, 0u, 0u)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.deposit(xfer: uint64, nonce: uint64) -> void:
    block@0: // L98
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let tmp%2#0: account = ((gtxns Sender) xfer#0)
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%6#0: account = (global CurrentApplicationAddress)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%8#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (existing.deposited#0: uint64, existing.unitaryPrice#0: uint64, existing.bidder#0: account, existing.bid#0: uint64, existing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let tmp%16#0: uint64 = (+ existing.deposited#0 tmp%8#0)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%16#0, existing.unitaryPrice#0, existing.bidder#0, existing.bid#0, existing.bidUnitaryPrice#0)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.set_price(asset: uint64, nonce: uint64, unitary_price: uint64) -> void:
    block@0: // L119
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (existing.deposited#0: uint64, existing.unitaryPrice#0: uint64, existing.bidder#0: account, existing.bid#0: uint64, existing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(existing.deposited#0, unitary_price#0, existing.bidder#0, existing.bid#0, existing.bidUnitaryPrice#0)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.buy(owner: account, asset: uint64, nonce: uint64, buy_pay: uint64, quantity: uint64) -> void:
    block@0: // L136
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let amount_to_be_paid#0: uint64 = marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity#0, listing.unitaryPrice#0, value%0#0)
        let tmp%6#0: account = ((gtxns Sender) buy_pay#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: account = ((gtxns Receiver) buy_pay#0)
        let tmp%10#0: bool = (== tmp%9#0 owner#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%12#0: bool = (== tmp%11#0 amount_to_be_paid#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (- listing.deposited#0 quantity#0)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%13#0, listing.unitaryPrice#0, listing.bidder#0, listing.bid#0, listing.bidUnitaryPrice#0)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) quantity#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.withdraw(asset: uint64, nonce: uint64) -> void:
    block@0: // L170
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        goto tmp%7#0 ? block@1 : block@3
    block@1: // if_body_L180
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let current_bid_deposit#0: uint64 = marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(listing.bid#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        ((itxn_field Amount) current_bid_deposit#0)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@3
    block@3: // after_if_else_L179
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        (box_del box_prefixed_key%1#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) 50500u)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) listing.deposited#0)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.bid(owner: account, asset: uint64, nonce: uint64, bid_pay: uint64, quantity: uint64, unitary_price: uint64) -> void:
    block@0: // L197
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let tmp%5#0: account = (global ZeroAddress)
        let tmp%6#0: bool = (!= listing.bidder#0 tmp%5#0)
        goto tmp%6#0 ? block@1 : block@3
    block@1: // if_body_L207
        let tmp%7#0: bool = (> unitary_price#0 listing.bidUnitaryPrice#0)
        (assert tmp%7#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let current_bid_amount#0: uint64 = marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(listing.bid#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        ((itxn_field Amount) current_bid_amount#0)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@3
    block@3: // after_if_else_L206
        let (value%1#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let amount_to_be_bid#0: uint64 = marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity#0, unitary_price#0, value%1#0)
        let tmp%10#0: account = ((gtxns Sender) bid_pay#0)
        let tmp%11#0: account = (txn Sender)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: account = ((gtxns Receiver) bid_pay#0)
        let tmp%14#0: account = (global CurrentApplicationAddress)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%17#0: bool = (== tmp%16#0 amount_to_be_bid#0)
        (assert tmp%17#0)
        let tmp%18#0: account = (txn Sender)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(listing.deposited#0, listing.unitaryPrice#0, tmp%18#0, quantity#0, unitary_price#0)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        return 

subroutine marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid(asset: uint64, nonce: uint64) -> void:
    block@0: // L235
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode<(uint64,uint64,account,uint64,uint64,)>(maybe_value%0#0)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (< listing.deposited#0 listing.bid#0)
        goto tmp%8#0 ? block@1 : block@2
    block@1: // ternary_true_L246
        goto block@3
    block@2: // ternary_false_L246
        goto block@3
    block@3: // ternary_merge_L246
        let min_quantity#0: uint64 = φ(listing.deposited#0 <- block@1, listing.bid#0 <- block@2)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let best_bid_amount#0: uint64 = marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(min_quantity#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) best_bid_amount#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field AssetAmount) min_quantity#0)
        ((itxn_field AssetReceiver) listing.bidder#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%10#0: uint64 = (- listing.deposited#0 min_quantity#0)
        let tmp%11#0: uint64 = (- listing.bid#0 min_quantity#0)
        let encoded_for_storage%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%1#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%10#0, listing.unitaryPrice#0, listing.bidder#0, tmp%11#0, listing.bidUnitaryPrice#0)
        (box_put box_prefixed_key%1#0 encoded_for_storage%2#0)
        return 