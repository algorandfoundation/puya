{
    "hints": {
        "getListingsMbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allowAsset(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "firstDeposit(pay,axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setPrice(asset,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(account,asset,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid(account,asset,uint64,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "acceptBid(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBtYXJrZXRwbGFjZV93aXRoX3R1cHMuRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDQgNDggNTA1MDAKICAgIGJ5dGVjYmxvY2sgMHg2YzY5NzM3NDY5NmU2NzczCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOQogICAgLy8gbG9nKCJpbml0IikKICAgIHB1c2hieXRlcyAiaW5pdCIKICAgIGxvZwoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDE0CiAgICBwdXNoYnl0ZXNzIDB4ZDk4ZWY2YTkgMHg1NmVmY2ZiNSAweDEyZjA4Yzk4IDB4OWI0YjgyMzQgMHg1YTA1YmM1NyAweDE2MmZjMjMyIDB4Y2JjODE5ZTUgMHg4MjRkNGJhZCAweGRkNjE5MjA0IC8vIG1ldGhvZCAiZ2V0TGlzdGluZ3NNYnIoKXVpbnQ2NCIsIG1ldGhvZCAiYWxsb3dBc3NldChwYXksYXNzZXQpdm9pZCIsIG1ldGhvZCAiZmlyc3REZXBvc2l0KHBheSxheGZlcix1aW50NjQsdWludDY0KXZvaWQiLCBtZXRob2QgImRlcG9zaXQoYXhmZXIsdWludDY0KXZvaWQiLCBtZXRob2QgInNldFByaWNlKGFzc2V0LHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAiYnV5KGFjY291bnQsYXNzZXQsdWludDY0LHBheSx1aW50NjQpdm9pZCIsIG1ldGhvZCAid2l0aGRyYXcoYXNzZXQsdWludDY0KXZvaWQiLCBtZXRob2QgImJpZChhY2NvdW50LGFzc2V0LHVpbnQ2NCxwYXksdWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJhY2NlcHRCaWQoYXNzZXQsdWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2dldExpc3RpbmdzTWJyX3JvdXRlQDUgbWFpbl9hbGxvd0Fzc2V0X3JvdXRlQDYgbWFpbl9maXJzdERlcG9zaXRfcm91dGVANyBtYWluX2RlcG9zaXRfcm91dGVAOCBtYWluX3NldFByaWNlX3JvdXRlQDkgbWFpbl9idXlfcm91dGVAMTAgbWFpbl93aXRoZHJhd19yb3V0ZUAxMSBtYWluX2JpZF9yb3V0ZUAxMiBtYWluX2FjY2VwdEJpZF9yb3V0ZUAxMwoKbWFpbl9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTcKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZVdpdGhUdXBzKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fYWNjZXB0QmlkX3JvdXRlQDEzOgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT0iYWNjZXB0QmlkIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTcKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZVdpdGhUdXBzKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT0iYWNjZXB0QmlkIikKICAgIGNhbGxzdWIgYWNjZXB0X2JpZAogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iaWRfcm91dGVAMTI6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBidG9pCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBiaWQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fd2l0aGRyYXdfcm91dGVAMTE6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNzAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNzAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiB3aXRoZHJhdwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9idXlfcm91dGVAMTA6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBidXkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0UHJpY2Vfcm91dGVAOToKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjExOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9InNldFByaWNlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTcKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZVdpdGhUdXBzKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTE5CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT0ic2V0UHJpY2UiKQogICAgY2FsbHN1YiBzZXRfcHJpY2UKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZGVwb3NpdF9yb3V0ZUA4OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6OTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzIgLy8gYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6OTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBkZXBvc2l0CiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2ZpcnN0RGVwb3NpdF9yb3V0ZUA3OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NzMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPSJmaXJzdERlcG9zaXQiKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNwogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMiAvLyBheGZlcgogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGF4ZmVyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo3MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9ImZpcnN0RGVwb3NpdCIpCiAgICBjYWxsc3ViIGZpcnN0X2RlcG9zaXQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYWxsb3dBc3NldF9yb3V0ZUA2OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NjAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPSJhbGxvd0Fzc2V0IikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTcKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZVdpdGhUdXBzKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo2MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9ImFsbG93QXNzZXQiKQogICAgY2FsbHN1YiBhbGxvd19hc3NldAogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRMaXN0aW5nc01icl9yb3V0ZUA1OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlLCBuYW1lPSJnZXRMaXN0aW5nc01iciIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAwMDAwMDAwMDAwYzU0NAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNDoKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE3CiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcyhhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE2CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5hbGxvd19hc3NldChtYnJfcGF5OiB1aW50NjQsIGFzc2V0OiB1aW50NjQpIC0+IHZvaWQ6CmFsbG93X2Fzc2V0OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NjAtNjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPSJhbGxvd0Fzc2V0IikKICAgIC8vIGRlZiBhbGxvd19hc3NldChzZWxmLCBtYnJfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgYXNzZXQ6IEFzc2V0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo2MgogICAgLy8gYXNzZXJ0IG5vdCBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmlzX29wdGVkX2luKGFzc2V0KQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NjQKICAgIC8vIGFzc2VydCBtYnJfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo2NQogICAgLy8gYXNzZXJ0IG1icl9wYXkuYW1vdW50ID09IEdsb2JhbC5hc3NldF9vcHRfaW5fbWluX2JhbGFuY2UKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQW1vdW50CiAgICBnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjY3LTcxCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo2OQogICAgLy8gYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo3MAogICAgLy8gYXNzZXRfYW1vdW50PTAKICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjY3CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnRjXzIgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NjctNzEKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBtYXJrZXRwbGFjZV93aXRoX3R1cHMuRGlnaXRhbE1hcmtldHBsYWNlV2l0aFR1cHMuZmlyc3RfZGVwb3NpdChtYnJfcGF5OiB1aW50NjQsIHhmZXI6IHVpbnQ2NCwgdW5pdGFyeV9wcmljZTogdWludDY0LCBub25jZTogdWludDY0KSAtPiB2b2lkOgpmaXJzdF9kZXBvc2l0OgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NzMtNzQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPSJmaXJzdERlcG9zaXQiKQogICAgLy8gZGVmIGZpcnN0X2RlcG9zaXQoc2VsZiwgbWJyX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sIHhmZXI6IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uLCB1bml0YXJ5X3ByaWNlOiBVSW50NjQsIG5vbmNlOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byA0IDAKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5Ojc1CiAgICAvLyBhc3NlcnQgbWJyX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlcgogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5Ojc2CiAgICAvLyBhc3NlcnQgbWJyX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NzcKICAgIC8vIGFzc2VydCBtYnJfcGF5LmFtb3VudCA9PSBzZWxmLmxpc3RpbmdzX2JveF9tYnIoKQogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBBbW91bnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjI0LTQwCiAgICAvLyByZXR1cm4gVUludDY0ICgKICAgIC8vICAgICAyXzUwMCArCiAgICAvLyAgICAgIyBmbXQ6IG9mZgogICAgLy8gICAgICMgS2V5IGxlbmd0aAogICAgLy8gICAgICg4ICsKICAgIC8vICAgICAgICAgMzIgKwogICAgLy8gICAgICAgICA4ICsKICAgIC8vICAgICAgICAgOCArCiAgICAvLyAgICAgICAgICMgVmFsdWUgbGVuZ3RoCiAgICAvLyAgICAgICAgIDggKwogICAgLy8gICAgICAgICA4ICsKICAgIC8vICAgICAgICAgMzIgKwogICAgLy8gICAgICAgICA4ICsKICAgIC8vICAgICAgICAgOCkgKgogICAgLy8gICAgICMgZm10OiBvbgogICAgLy8gICAgIDQwMAogICAgLy8gKQogICAgaW50YyA0IC8vIDUwNTAwCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo3NwogICAgLy8gYXNzZXJ0IG1icl9wYXkuYW1vdW50ID09IHNlbGYubGlzdGluZ3NfYm94X21icigpCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo4MAogICAgLy8gb3duZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjgxCiAgICAvLyBhc3NldD14ZmVyLnhmZXJfYXNzZXQuaWQsCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIFhmZXJBc3NldAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6ODQKICAgIC8vIGFzc2VydCBub3Qga2V5IGluIHNlbGYubGlzdGluZ3MKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2YzY5NzM3NDY5NmU2NzczCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5Ojg2CiAgICAvLyBhc3NlcnQgeGZlci5zZW5kZXIgPT0gVHhuLnNlbmRlcgogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5Ojg3CiAgICAvLyBhc3NlcnQgeGZlci5hc3NldF9yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo4OAogICAgLy8gYXNzZXJ0IHhmZXIuYXNzZXRfYW1vdW50ID4gMAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBc3NldEFtb3VudAogICAgZHVwCiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjkzCiAgICAvLyBiaWRkZXI9QWNjb3VudCgpLAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo5MAogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgc3dhcAogICAgaXRvYgogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6OTQKICAgIC8vIGJpZD1VSW50NjQoKSwKICAgIGludGNfMSAvLyAwCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo5MAogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgaXRvYgogICAgc3dhcAogICAgZGlnIDEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo5MC05NgogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgLy8gICAgIGRlcG9zaXRlZD14ZmVyLmFzc2V0X2Ftb3VudCwKICAgIC8vICAgICB1bml0YXJ5UHJpY2U9dW5pdGFyeV9wcmljZSwKICAgIC8vICAgICBiaWRkZXI9QWNjb3VudCgpLAogICAgLy8gICAgIGJpZD1VSW50NjQoKSwKICAgIC8vICAgICBiaWRVbml0YXJ5UHJpY2U9VUludDY0KCkKICAgIC8vICkKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5kZXBvc2l0KHhmZXI6IHVpbnQ2NCwgbm9uY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZGVwb3NpdDoKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5Ojk4LTk5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBkZXBvc2l0KHNlbGYsIHhmZXI6IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uLCBub25jZTogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMDEKICAgIC8vIG93bmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMDIKICAgIC8vIGFzc2V0PXhmZXIueGZlcl9hc3NldC5pZCwKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgWGZlckFzc2V0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMDYKICAgIC8vIGFzc2VydCB4ZmVyLnNlbmRlciA9PSBUeG4uc2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTA3CiAgICAvLyBhc3NlcnQgeGZlci5hc3NldF9yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMDgKICAgIC8vIGFzc2VydCB4ZmVyLmFzc2V0X2Ftb3VudCA+IDAKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMTAKICAgIC8vIGV4aXN0aW5nID0gc2VsZi5saXN0aW5nc1trZXldCiAgICBzd2FwCiAgICBpdG9iCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2YzY5NzM3NDY5NmU2NzczCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDIKICAgIGV4dHJhY3QgMTYgMzIKICAgIGRpZyAzCiAgICBpbnRjXzMgLy8gNDgKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDQKICAgIHB1c2hpbnQgNTYgLy8gNTYKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMTYKICAgIC8vIGRlcG9zaXRlZD1leGlzdGluZy5kZXBvc2l0ZWQgKyB4ZmVyLmFzc2V0X2Ftb3VudAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDYKICAgICsKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjExMQogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgaXRvYgogICAgdW5jb3ZlciA0CiAgICBpdG9iCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMTEtMTE3CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0gPSBMaXN0aW5nVmFsdWUoCiAgICAvLyAgICAgYmlkPWV4aXN0aW5nLmJpZCwKICAgIC8vICAgICBiaWRVbml0YXJ5UHJpY2U9ZXhpc3RpbmcuYmlkVW5pdGFyeVByaWNlLAogICAgLy8gICAgIGJpZGRlcj1leGlzdGluZy5iaWRkZXIsCiAgICAvLyAgICAgdW5pdGFyeVByaWNlPWV4aXN0aW5nLnVuaXRhcnlQcmljZSwKICAgIC8vICAgICBkZXBvc2l0ZWQ9ZXhpc3RpbmcuZGVwb3NpdGVkICsgeGZlci5hc3NldF9hbW91bnQKICAgIC8vICkKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5zZXRfcHJpY2UoYXNzZXQ6IHVpbnQ2NCwgbm9uY2U6IHVpbnQ2NCwgdW5pdGFyeV9wcmljZTogdWludDY0KSAtPiB2b2lkOgpzZXRfcHJpY2U6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxMTktMTIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT0ic2V0UHJpY2UiKQogICAgLy8gZGVmIHNldF9wcmljZShzZWxmLCBhc3NldDogQXNzZXQsIG5vbmNlOiBVSW50NjQsIHVuaXRhcnlfcHJpY2U6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDMgMAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTIyCiAgICAvLyBvd25lcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTI3CiAgICAvLyBleGlzdGluZyA9IHNlbGYubGlzdGluZ3Nba2V5XQogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4NmM2OTczNzQ2OTZlNjc3MwogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxpc3RpbmdzIGVudHJ5IGV4aXN0cwogICAgZHVwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGRpZyAxCiAgICBleHRyYWN0IDE2IDMyCiAgICBkaWcgMgogICAgaW50Y18zIC8vIDQ4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgdW5jb3ZlciAzCiAgICBwdXNoaW50IDU2IC8vIDU2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTI4CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0gPSBMaXN0aW5nVmFsdWUoCiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTI4LTEzNAogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgLy8gICAgIGJpZD1leGlzdGluZy5iaWQsCiAgICAvLyAgICAgYmlkVW5pdGFyeVByaWNlPWV4aXN0aW5nLmJpZFVuaXRhcnlQcmljZSwKICAgIC8vICAgICBiaWRkZXI9ZXhpc3RpbmcuYmlkZGVyLAogICAgLy8gICAgIGRlcG9zaXRlZD1leGlzdGluZy5kZXBvc2l0ZWQsCiAgICAvLyAgICAgdW5pdGFyeVByaWNlPXVuaXRhcnlfcHJpY2UKICAgIC8vICkKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5idXkob3duZXI6IGJ5dGVzLCBhc3NldDogdWludDY0LCBub25jZTogdWludDY0LCBidXlfcGF5OiB1aW50NjQsIHF1YW50aXR5OiB1aW50NjQpIC0+IHZvaWQ6CmJ1eToKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjEzNi0xMzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJ1eShzZWxmLCBvd25lcjogQWNjb3VudCwgYXNzZXQ6IEFzc2V0LCBub25jZTogVUludDY0LCBidXlfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgcXVhbnRpdHk6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDUgMAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTQ0CiAgICAvLyBsaXN0aW5nID0gc2VsZi5saXN0aW5nc1trZXldCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtNQogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDZjNjk3Mzc0Njk2ZTY3NzMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXN0aW5ncyBlbnRyeSBleGlzdHMKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMgogICAgZXh0cmFjdCAxNiAzMgogICAgZGlnIDMKICAgIGludGNfMyAvLyA0OAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgNAogICAgcHVzaGludCA1NiAvLyA1NgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE0OQogICAgLy8gYXNzZXQuZGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtNAogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0NAogICAgLy8gYW1vdW50X25vdF9zY2FsZWRfaGlnaCwgYW1vdW50X25vdF9zY2FsZWRfbG93ID0gb3AubXVsdyhwcmljZSwgcXVhbnRpdHkpCiAgICBkaWcgNAogICAgZnJhbWVfZGlnIC0xCiAgICBtdWx3CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0NQogICAgLy8gc2NhbGluZ19mYWN0b3JfaGlnaCwgc2NhbGluZ19mYWN0b3JfbG93ID0gb3AuZXhwdygxMCwgYXNzZXRfZGVjaW1hbHMpCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICB1bmNvdmVyIDMKICAgIGV4cHcKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjQ2LTUxCiAgICAvLyBfcXVvdGllbnRfaGlnaCwgYW1vdW50X3RvX2JlX3BhaWQsIF9yZW1haW5kZXJfaGlnaCwgX3JlbWFpbmRlcl9sb3cgPSBvcC5kaXZtb2R3KAogICAgLy8gICAgIGFtb3VudF9ub3Rfc2NhbGVkX2hpZ2gsCiAgICAvLyAgICAgYW1vdW50X25vdF9zY2FsZWRfbG93LAogICAgLy8gICAgIHNjYWxpbmdfZmFjdG9yX2hpZ2gsCiAgICAvLyAgICAgc2NhbGluZ19mYWN0b3JfbG93CiAgICAvLyApCiAgICBkaXZtb2R3CiAgICBwb3BuIDIKICAgIHN3YXAKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjUyCiAgICAvLyBhc3NlcnQgX3F1b3RpZW50X2hpZ2ggPT0gMAogICAgIQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNTIKICAgIC8vIGFzc2VydCBidXlfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTUzCiAgICAvLyBhc3NlcnQgYnV5X3BheS5yZWNlaXZlciA9PSBvd25lcgogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBSZWNlaXZlcgogICAgZnJhbWVfZGlnIC01CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNTQKICAgIC8vIGFzc2VydCBidXlfcGF5LmFtb3VudCA9PSBhbW91bnRfdG9fYmVfcGFpZAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE2MQogICAgLy8gZGVwb3NpdGVkPWxpc3RpbmcuZGVwb3NpdGVkIC0gcXVhbnRpdHkKICAgIHVuY292ZXIgNAogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNTYKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XSA9IExpc3RpbmdWYWx1ZSgKICAgIGl0b2IKICAgIHVuY292ZXIgNAogICAgaXRvYgogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTU2LTE2MgogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgLy8gICAgIGJpZD1saXN0aW5nLmJpZCwKICAgIC8vICAgICBiaWRVbml0YXJ5UHJpY2U9bGlzdGluZy5iaWRVbml0YXJ5UHJpY2UsCiAgICAvLyAgICAgYmlkZGVyPWxpc3RpbmcuYmlkZGVyLAogICAgLy8gICAgIHVuaXRhcnlQcmljZT1saXN0aW5nLnVuaXRhcnlQcmljZSwKICAgIC8vICAgICBkZXBvc2l0ZWQ9bGlzdGluZy5kZXBvc2l0ZWQgLSBxdWFudGl0eQogICAgLy8gKQogICAgYm94X3B1dAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTY0LTE2OAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cXVhbnRpdHkKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE2NgogICAgLy8gYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNjQKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMiAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxNjQtMTY4CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1xdWFudGl0eQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy53aXRoZHJhdyhhc3NldDogdWludDY0LCBub25jZTogdWludDY0KSAtPiB2b2lkOgp3aXRoZHJhdzoKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE3MC0xNzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHdpdGhkcmF3KHNlbGYsIGFzc2V0OiBBc3NldCwgbm9uY2U6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTczCiAgICAvLyBvd25lcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTc4CiAgICAvLyBsaXN0aW5nID0gc2VsZi5saXN0aW5nc1trZXldCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2YzY5NzM3NDY5NmU2NzczCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgZHVwCiAgICBleHRyYWN0IDE2IDMyCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgZHVwCiAgICBpbnRjXzMgLy8gNDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBjb3ZlciAyCiAgICBwdXNoaW50IDU2IC8vIDU2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTc5CiAgICAvLyBpZiBsaXN0aW5nLmJpZGRlciAhPSBBY2NvdW50KCk6CiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBieiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDMKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE4MwogICAgLy8gYXNzZXQuZGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtMgogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0NAogICAgLy8gYW1vdW50X25vdF9zY2FsZWRfaGlnaCwgYW1vdW50X25vdF9zY2FsZWRfbG93ID0gb3AubXVsdyhwcmljZSwgcXVhbnRpdHkpCiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfZGlnIDMKICAgIG11bHcKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjQ1CiAgICAvLyBzY2FsaW5nX2ZhY3Rvcl9oaWdoLCBzY2FsaW5nX2ZhY3Rvcl9sb3cgPSBvcC5leHB3KDEwLCBhc3NldF9kZWNpbWFscykKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIHVuY292ZXIgMwogICAgZXhwdwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NDYtNTEKICAgIC8vIF9xdW90aWVudF9oaWdoLCBhbW91bnRfdG9fYmVfcGFpZCwgX3JlbWFpbmRlcl9oaWdoLCBfcmVtYWluZGVyX2xvdyA9IG9wLmRpdm1vZHcoCiAgICAvLyAgICAgYW1vdW50X25vdF9zY2FsZWRfaGlnaCwKICAgIC8vICAgICBhbW91bnRfbm90X3NjYWxlZF9sb3csCiAgICAvLyAgICAgc2NhbGluZ19mYWN0b3JfaGlnaCwKICAgIC8vICAgICBzY2FsaW5nX2ZhY3Rvcl9sb3cKICAgIC8vICkKICAgIGRpdm1vZHcKICAgIHBvcG4gMgogICAgc3dhcAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NTIKICAgIC8vIGFzc2VydCBfcXVvdGllbnRfaGlnaCA9PSAwCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE4NQogICAgLy8gaXR4bi5QYXltZW50KHJlY2VpdmVyPWxpc3RpbmcuYmlkZGVyLCBhbW91bnQ9Y3VycmVudF9iaWRfZGVwb3NpdCkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBmcmFtZV9kaWcgMgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaW50Y18wIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAoKd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUAzOgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTg3CiAgICAvLyBkZWwgc2VsZi5saXN0aW5nc1trZXldCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxODkKICAgIC8vIGl0eG4uUGF5bWVudChyZWNlaXZlcj1UeG4uc2VuZGVyLCBhbW91bnQ9c2VsZi5saXN0aW5nc19ib3hfbWJyKCkpLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyNC00MAogICAgLy8gcmV0dXJuIFVJbnQ2NCAoCiAgICAvLyAgICAgMl81MDAgKwogICAgLy8gICAgICMgZm10OiBvZmYKICAgIC8vICAgICAjIEtleSBsZW5ndGgKICAgIC8vICAgICAoOCArCiAgICAvLyAgICAgICAgIDMyICsKICAgIC8vICAgICAgICAgOCArCiAgICAvLyAgICAgICAgIDggKwogICAgLy8gICAgICAgICAjIFZhbHVlIGxlbmd0aAogICAgLy8gICAgICAgICA4ICsKICAgIC8vICAgICAgICAgOCArCiAgICAvLyAgICAgICAgIDMyICsKICAgIC8vICAgICAgICAgOCArCiAgICAvLyAgICAgICAgIDgpICoKICAgIC8vICAgICAjIGZtdDogb24KICAgIC8vICAgICA0MDAKICAgIC8vICkKICAgIGludGMgNCAvLyA1MDUwMAogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE4OQogICAgLy8gaXR4bi5QYXltZW50KHJlY2VpdmVyPVR4bi5zZW5kZXIsIGFtb3VudD1zZWxmLmxpc3RpbmdzX2JveF9tYnIoKSkuc3VibWl0KCkKICAgIGludGNfMCAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjE5MS0xOTUKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWxpc3RpbmcuZGVwb3NpdGVkCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOTMKICAgIC8vIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOTEKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMiAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToxOTEtMTk1CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1saXN0aW5nLmRlcG9zaXRlZAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5iaWQob3duZXI6IGJ5dGVzLCBhc3NldDogdWludDY0LCBub25jZTogdWludDY0LCBiaWRfcGF5OiB1aW50NjQsIHF1YW50aXR5OiB1aW50NjQsIHVuaXRhcnlfcHJpY2U6IHVpbnQ2NCkgLT4gdm9pZDoKYmlkOgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MTk3LTE5OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYmlkKHNlbGYsIG93bmVyOiBBY2NvdW50LCBhc3NldDogQXNzZXQsIG5vbmNlOiBVSW50NjQsIGJpZF9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLCBxdWFudGl0eTogVUludDY0LCB1bml0YXJ5X3ByaWNlOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byA2IDAKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIwNQogICAgLy8gbGlzdGluZyA9IHNlbGYubGlzdGluZ3Nba2V5XQogICAgZnJhbWVfZGlnIC01CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTYKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2YzY5NzM3NDY5NmU2NzczCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgZHVwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGR1cAogICAgZXh0cmFjdCAxNiAzMgogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGR1cAogICAgaW50Y18zIC8vIDQ4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgY292ZXIgMgogICAgcHVzaGludCA1NiAvLyA1NgogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIwNgogICAgLy8gaWYgbGlzdGluZy5iaWRkZXIgIT0gQWNjb3VudCgpOgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYnogYmlkX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjA3CiAgICAvLyBhc3NlcnQgdW5pdGFyeV9wcmljZSA+IGxpc3RpbmcuYmlkVW5pdGFyeVByaWNlCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyA1CiAgICBkdXAKICAgIGNvdmVyIDIKICAgID4KICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjEyCiAgICAvLyBhc3NldC5kZWNpbWFscwogICAgZnJhbWVfZGlnIC01CiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0RGVjaW1hbHMKICAgIGFzc2VydCAvLyBhc3NldCBleGlzdHMKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjQ0CiAgICAvLyBhbW91bnRfbm90X3NjYWxlZF9oaWdoLCBhbW91bnRfbm90X3NjYWxlZF9sb3cgPSBvcC5tdWx3KHByaWNlLCBxdWFudGl0eSkKICAgIHN3YXAKICAgIGZyYW1lX2RpZyA0CiAgICBtdWx3CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0NQogICAgLy8gc2NhbGluZ19mYWN0b3JfaGlnaCwgc2NhbGluZ19mYWN0b3JfbG93ID0gb3AuZXhwdygxMCwgYXNzZXRfZGVjaW1hbHMpCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICB1bmNvdmVyIDMKICAgIGV4cHcKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjQ2LTUxCiAgICAvLyBfcXVvdGllbnRfaGlnaCwgYW1vdW50X3RvX2JlX3BhaWQsIF9yZW1haW5kZXJfaGlnaCwgX3JlbWFpbmRlcl9sb3cgPSBvcC5kaXZtb2R3KAogICAgLy8gICAgIGFtb3VudF9ub3Rfc2NhbGVkX2hpZ2gsCiAgICAvLyAgICAgYW1vdW50X25vdF9zY2FsZWRfbG93LAogICAgLy8gICAgIHNjYWxpbmdfZmFjdG9yX2hpZ2gsCiAgICAvLyAgICAgc2NhbGluZ19mYWN0b3JfbG93CiAgICAvLyApCiAgICBkaXZtb2R3CiAgICBwb3BuIDIKICAgIHN3YXAKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjUyCiAgICAvLyBhc3NlcnQgX3F1b3RpZW50X2hpZ2ggPT0gMAogICAgIQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyMTUKICAgIC8vIGl0eG4uUGF5bWVudChyZWNlaXZlcj1saXN0aW5nLmJpZGRlciwgYW1vdW50PWN1cnJlbnRfYmlkX2Ftb3VudCkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBmcmFtZV9kaWcgMwogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaW50Y18wIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAoKYmlkX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIyMAogICAgLy8gYXNzZXQuZGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtNQogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0NAogICAgLy8gYW1vdW50X25vdF9zY2FsZWRfaGlnaCwgYW1vdW50X25vdF9zY2FsZWRfbG93ID0gb3AubXVsdyhwcmljZSwgcXVhbnRpdHkpCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMgogICAgbXVsdwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NDUKICAgIC8vIHNjYWxpbmdfZmFjdG9yX2hpZ2gsIHNjYWxpbmdfZmFjdG9yX2xvdyA9IG9wLmV4cHcoMTAsIGFzc2V0X2RlY2ltYWxzKQogICAgcHVzaGludCAxMCAvLyAxMAogICAgdW5jb3ZlciAzCiAgICBleHB3CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo0Ni01MQogICAgLy8gX3F1b3RpZW50X2hpZ2gsIGFtb3VudF90b19iZV9wYWlkLCBfcmVtYWluZGVyX2hpZ2gsIF9yZW1haW5kZXJfbG93ID0gb3AuZGl2bW9kdygKICAgIC8vICAgICBhbW91bnRfbm90X3NjYWxlZF9oaWdoLAogICAgLy8gICAgIGFtb3VudF9ub3Rfc2NhbGVkX2xvdywKICAgIC8vICAgICBzY2FsaW5nX2ZhY3Rvcl9oaWdoLAogICAgLy8gICAgIHNjYWxpbmdfZmFjdG9yX2xvdwogICAgLy8gKQogICAgZGl2bW9kdwogICAgcG9wbiAyCiAgICBzd2FwCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weTo1MgogICAgLy8gYXNzZXJ0IF9xdW90aWVudF9oaWdoID09IDAKICAgICEKICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjIzCiAgICAvLyBhc3NlcnQgYmlkX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlcgogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIyNAogICAgLy8gYXNzZXJ0IGJpZF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIyNQogICAgLy8gYXNzZXJ0IGJpZF9wYXkuYW1vdW50ID09IGFtb3VudF90b19iZV9iaWQKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQW1vdW50CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyMzAKICAgIC8vIGJpZGRlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjI3CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0gPSBMaXN0aW5nVmFsdWUoCiAgICBmcmFtZV9kaWcgMQogICAgaXRvYgogICAgZnJhbWVfZGlnIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjIyNy0yMzMKICAgIC8vIHNlbGYubGlzdGluZ3Nba2V5XSA9IExpc3RpbmdWYWx1ZSgKICAgIC8vICAgICBkZXBvc2l0ZWQ9bGlzdGluZy5kZXBvc2l0ZWQsCiAgICAvLyAgICAgdW5pdGFyeVByaWNlPWxpc3RpbmcudW5pdGFyeVByaWNlLAogICAgLy8gICAgIGJpZGRlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJpZD1xdWFudGl0eSwKICAgIC8vICAgICBiaWRVbml0YXJ5UHJpY2U9dW5pdGFyeV9wcmljZQogICAgLy8gKQogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIG1hcmtldHBsYWNlX3dpdGhfdHVwcy5EaWdpdGFsTWFya2V0cGxhY2VXaXRoVHVwcy5hY2NlcHRfYmlkKGFzc2V0OiB1aW50NjQsIG5vbmNlOiB1aW50NjQpIC0+IHZvaWQ6CmFjY2VwdF9iaWQ6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyMzUtMjM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT0iYWNjZXB0QmlkIikKICAgIC8vIGRlZiBhY2NlcHRfYmlkKHNlbGYsIGFzc2V0OiBBc3NldCwgbm9uY2U6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjM4CiAgICAvLyBvd25lcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjQzCiAgICAvLyBsaXN0aW5nID0gc2VsZi5saXN0aW5nc1trZXldCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2YzY5NzM3NDY5NmU2NzczCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubGlzdGluZ3MgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGR1cAogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBjb3ZlciAyCiAgICBkdXAKICAgIGV4dHJhY3QgMTYgMzIKICAgIGR1cAogICAgY292ZXIgMgogICAgY292ZXIgMwogICAgZHVwCiAgICBpbnRjXzMgLy8gNDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGNvdmVyIDQKICAgIHB1c2hpbnQgNTYgLy8gNTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBjb3ZlciAzCiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyNDQKICAgIC8vIGFzc2VydCBsaXN0aW5nLmJpZGRlciAhPSBBY2NvdW50KCkKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjQ2CiAgICAvLyBtaW5fcXVhbnRpdHkgPSBsaXN0aW5nLmRlcG9zaXRlZCBpZiBsaXN0aW5nLmRlcG9zaXRlZCA8IGxpc3RpbmcuYmlkIGVsc2UgbGlzdGluZy5iaWQKICAgIDwKICAgIGJ6IGFjY2VwdF9iaWRfdGVybmFyeV9mYWxzZUAyCiAgICBmcmFtZV9kaWcgMQoKYWNjZXB0X2JpZF90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyNTEKICAgIC8vIGFzc2V0LmRlY2ltYWxzCiAgICBmcmFtZV9kaWcgLTIKICAgIGFzc2V0X3BhcmFtc19nZXQgQXNzZXREZWNpbWFscwogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NDQKICAgIC8vIGFtb3VudF9ub3Rfc2NhbGVkX2hpZ2gsIGFtb3VudF9ub3Rfc2NhbGVkX2xvdyA9IG9wLm11bHcocHJpY2UsIHF1YW50aXR5KQogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgdW5jb3ZlciAzCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIG11bHcKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjQ1CiAgICAvLyBzY2FsaW5nX2ZhY3Rvcl9oaWdoLCBzY2FsaW5nX2ZhY3Rvcl9sb3cgPSBvcC5leHB3KDEwLCBhc3NldF9kZWNpbWFscykKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIHVuY292ZXIgMwogICAgZXhwdwogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NDYtNTEKICAgIC8vIF9xdW90aWVudF9oaWdoLCBhbW91bnRfdG9fYmVfcGFpZCwgX3JlbWFpbmRlcl9oaWdoLCBfcmVtYWluZGVyX2xvdyA9IG9wLmRpdm1vZHcoCiAgICAvLyAgICAgYW1vdW50X25vdF9zY2FsZWRfaGlnaCwKICAgIC8vICAgICBhbW91bnRfbm90X3NjYWxlZF9sb3csCiAgICAvLyAgICAgc2NhbGluZ19mYWN0b3JfaGlnaCwKICAgIC8vICAgICBzY2FsaW5nX2ZhY3Rvcl9sb3cKICAgIC8vICkKICAgIGRpdm1vZHcKICAgIHBvcG4gMgogICAgc3dhcAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6NTIKICAgIC8vIGFzc2VydCBfcXVvdGllbnRfaGlnaCA9PSAwCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjI1NAogICAgLy8gaXR4bi5QYXltZW50KHJlY2VpdmVyPVR4bi5zZW5kZXIsIGFtb3VudD1iZXN0X2JpZF9hbW91bnQpLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaW50Y18wIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjU2LTI2MAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9bGlzdGluZy5iaWRkZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PW1pbl9xdWFudGl0eQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjI1NgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjI1Ni0yNjAKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPWxpc3RpbmcuYmlkZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1taW5fcXVhbnRpdHkKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyNjYKICAgIC8vIGRlcG9zaXRlZD1saXN0aW5nLmRlcG9zaXRlZCAtIG1pbl9xdWFudGl0eSwKICAgIGZyYW1lX2RpZyAxCiAgICBkaWcgMQogICAgLQogICAgLy8gbWFya2V0cGxhY2UtZGVtby9tYXJrZXRwbGFjZV93aXRoX3R1cHMucHk6MjY3CiAgICAvLyBiaWQ9bGlzdGluZy5iaWQgLSBtaW5fcXVhbnRpdHkKICAgIGZyYW1lX2RpZyA0CiAgICB1bmNvdmVyIDIKICAgIC0KICAgIC8vIG1hcmtldHBsYWNlLWRlbW8vbWFya2V0cGxhY2Vfd2l0aF90dXBzLnB5OjI2MgogICAgLy8gc2VsZi5saXN0aW5nc1trZXldID0gTGlzdGluZ1ZhbHVlKAogICAgc3dhcAogICAgaXRvYgogICAgZnJhbWVfZGlnIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBtYXJrZXRwbGFjZS1kZW1vL21hcmtldHBsYWNlX3dpdGhfdHVwcy5weToyNjItMjY4CiAgICAvLyBzZWxmLmxpc3RpbmdzW2tleV0gPSBMaXN0aW5nVmFsdWUoCiAgICAvLyAgICAgYmlkZGVyPWxpc3RpbmcuYmlkZGVyLAogICAgLy8gICAgIGJpZFVuaXRhcnlQcmljZT1saXN0aW5nLmJpZFVuaXRhcnlQcmljZSwKICAgIC8vICAgICB1bml0YXJ5UHJpY2U9bGlzdGluZy51bml0YXJ5UHJpY2UsCiAgICAvLyAgICAgZGVwb3NpdGVkPWxpc3RpbmcuZGVwb3NpdGVkIC0gbWluX3F1YW50aXR5LAogICAgLy8gICAgIGJpZD1saXN0aW5nLmJpZCAtIG1pbl9xdWFudGl0eQogICAgLy8gKQogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKYWNjZXB0X2JpZF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICBmcmFtZV9kaWcgNAogICAgYiBhY2NlcHRfYmlkX3Rlcm5hcnlfbWVyZ2VAMwo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DigitalMarketplaceWithTups",
        "methods": [
            {
                "name": "getListingsMbr",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "allowAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "firstDeposit",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setPrice",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "buy_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bid",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "bid_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "acceptBid",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}