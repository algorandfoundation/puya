main marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "init")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@21
    block@4: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getListingsMbr()uint64" => block@5, method "allowAsset(pay,asset)void" => block@6, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@7, method "deposit(axfer,uint64)void" => block@8, method "setPrice(asset,uint64,uint64)void" => block@9, method "buy(account,asset,uint64,pay,uint64)void" => block@10, method "withdraw(asset,uint64)void" => block@11, method "bid(account,asset,uint64,pay,uint64,uint64)void" => block@14, method "acceptBid(asset,uint64)void" => block@17, * => block@23}
    block@5: // getListingsMbr_route_L56
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c75000000000000c544)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@6: // allowAsset_route_L60
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%15#0)
        let tmp%0#3: account = (global CurrentApplicationAddress)
        let (tmp%1#6: uint64, tmp%2#2: bool) = ((asset_holding_get AssetBalance) tmp%0#3 asset#0)
        let tmp%3#1: bool = (! tmp%2#2)
        (assert tmp%3#1)
        let tmp%4#5: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#3: account = (global CurrentApplicationAddress)
        let tmp%6#3: bool = (== tmp%4#5 tmp%5#3)
        (assert tmp%6#3)
        let tmp%7#1: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#6: uint64 = (global AssetOptInMinBalance)
        let tmp%9#5: bool = (== tmp%7#1 tmp%8#6)
        (assert tmp%9#5)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@7: // firstDeposit_route_L73
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%21#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%21#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%22#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%22#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 axfer)
        (assert gtxn_type_matches%2#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#3: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#2: account = (txn Sender)
        let tmp%2#2: bool = (== tmp%0#3 tmp%1#2)
        (assert tmp%2#2)
        let tmp%3#4: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#5: account = (global CurrentApplicationAddress)
        let tmp%5#4: bool = (== tmp%3#4 tmp%4#5)
        (assert tmp%5#4)
        let tmp%6#1: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#2: bool = (== tmp%6#1 50500u)
        (assert tmp%8#2)
        let tmp%9#1: account = (txn Sender)
        let tmp%10#0: uint64 = ((gtxns XferAsset) xfer#0)
        let array%val_as_bytes%1#1: bytes[8] = (itob tmp%10#0)
        let array%encoded%1#1: Encoded(uint8[32],uint64) = (concat tmp%9#1 array%val_as_bytes%1#1)
        let array%val_as_bytes%2#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%1#1 array%val_as_bytes%2#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%12#3: bool = (! maybe_exists%0#0)
        (assert tmp%12#3)
        let tmp%13#3: account = ((gtxns Sender) xfer#0)
        let tmp%14#1: account = (txn Sender)
        let tmp%15#2: bool = (== tmp%13#3 tmp%14#1)
        (assert tmp%15#2)
        let tmp%16#1: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%17#1: account = (global CurrentApplicationAddress)
        let tmp%18#0: bool = (== tmp%16#1 tmp%17#1)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%19#0)
        let tmp%22#1: account = (global ZeroAddress)
        let array%val_as_bytes%3#1: bytes[8] = (itob tmp%19#0)
        let array%val_as_bytes%4#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%3#1 array%val_as_bytes%4#1)
        let array%encoded%6#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%5#1 tmp%22#1)
        let array%val_as_bytes%5#1: bytes[8] = (itob 0u)
        let array%encoded%7#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%6#1 array%val_as_bytes%5#1)
        let array%encoded%8#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%7#1 array%val_as_bytes%5#1)
        (box_put box_prefixed_key%0#0 array%encoded%8#1)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@8: // deposit_route_L98
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let tmp%29#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%29#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let tmp%0#3: account = (txn Sender)
        let tmp%1#6: uint64 = ((gtxns XferAsset) xfer#0)
        let array%val_as_bytes%7#1: bytes[8] = (itob tmp%1#6)
        let array%encoded%11#1: Encoded(uint8[32],uint64) = (concat tmp%0#3 array%val_as_bytes%7#1)
        let array%val_as_bytes%8#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%11#1 array%val_as_bytes%8#1)
        let tmp%3#4: account = ((gtxns Sender) xfer#0)
        let tmp%4#5: account = (txn Sender)
        let tmp%5#4: bool = (== tmp%3#4 tmp%4#5)
        (assert tmp%5#4)
        let tmp%6#2: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%7#2: account = (global CurrentApplicationAddress)
        let tmp%8#2: bool = (== tmp%6#2 tmp%7#2)
        (assert tmp%8#2)
        let tmp%9#2: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%9#2)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (existing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let values%0#4: uint64 = (extract_uint64 existing#0 48u)
        let values%1#0: uint64 = (extract_uint64 existing#0 56u)
        let array%extract%2#1: bytes = ((extract 16 32) existing#0)
        let values%3#4: uint64 = (extract_uint64 existing#0 8u)
        let values%4#2: uint64 = (extract_uint64 existing#0 0u)
        let tmp%12#0: uint64 = (+ values%4#2 tmp%9#2)
        let array%val_as_bytes%9#1: bytes[8] = (itob tmp%12#0)
        let array%val_as_bytes%10#1: bytes[8] = (itob values%3#4)
        let array%encoded%15#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%9#1 array%val_as_bytes%10#1)
        let array%encoded%16#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%15#1 array%extract%2#1)
        let array%val_as_bytes%11#1: bytes[8] = (itob values%0#4)
        let array%encoded%17#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%16#1 array%val_as_bytes%11#1)
        let array%val_as_bytes%12#1: bytes[8] = (itob values%1#0)
        let array%encoded%18#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%17#1 array%val_as_bytes%12#1)
        (box_put box_prefixed_key%0#0 array%encoded%18#1)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@9: // setPrice_route_L119
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let asset#0: uint64 = ((txnas Assets) tmp%35#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%0#3: account = (txn Sender)
        let array%val_as_bytes%13#1: bytes[8] = (itob asset#0)
        let array%encoded%21#1: Encoded(uint8[32],uint64) = (concat tmp%0#3 array%val_as_bytes%13#1)
        let array%val_as_bytes%14#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%21#1 array%val_as_bytes%14#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (existing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let values%0#4: uint64 = (extract_uint64 existing#0 48u)
        let values%1#0: uint64 = (extract_uint64 existing#0 56u)
        let array%extract%7#1: bytes = ((extract 16 32) existing#0)
        let values%3#4: uint64 = (extract_uint64 existing#0 0u)
        let array%val_as_bytes%15#1: bytes[8] = (itob values%3#4)
        let array%val_as_bytes%16#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%25#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%15#1 array%val_as_bytes%16#1)
        let array%encoded%26#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%25#1 array%extract%7#1)
        let array%val_as_bytes%17#1: bytes[8] = (itob values%0#4)
        let array%encoded%27#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%26#1 array%val_as_bytes%17#1)
        let array%val_as_bytes%18#1: bytes[8] = (itob values%1#0)
        let array%encoded%28#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%27#1 array%val_as_bytes%18#1)
        (box_put box_prefixed_key%0#0 array%encoded%28#1)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@10: // buy_route_L136
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%43#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let owner#0: account = ((txnas Accounts) tmp%43#0)
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let asset#0: uint64 = ((txnas Assets) tmp%45#0)
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%48#0: uint64 = (txn GroupIndex)
        let buy_pay#0: uint64 = (- tmp%48#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) buy_pay#0)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 pay)
        (assert gtxn_type_matches%4#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let array%val_as_bytes%19#1: bytes[8] = (itob asset#0)
        let array%encoded%31#1: Encoded(uint8[32],uint64) = (concat owner#0 array%val_as_bytes%19#1)
        let array%val_as_bytes%20#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%31#1 array%val_as_bytes%20#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let price#0: uint64 = (extract_uint64 listing#0 8u)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#2: bool = (! _quotient_high#0)
        (assert tmp%8#2)
        let tmp%2#1: account = ((gtxns Sender) buy_pay#0)
        let tmp%3#4: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#1 tmp%3#4)
        (assert tmp%4#0)
        let tmp%5#3: account = ((gtxns Receiver) buy_pay#0)
        let tmp%6#3: bool = (== tmp%5#3 owner#0)
        (assert tmp%6#3)
        let tmp%7#1: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%8#2: bool = (== tmp%7#1 amount_to_be_paid#1)
        (assert tmp%8#2)
        let values%1#0: uint64 = (extract_uint64 listing#0 48u)
        let values%2#0: uint64 = (extract_uint64 listing#0 56u)
        let array%extract%12#1: bytes = ((extract 16 32) listing#0)
        let values%5#1: uint64 = (extract_uint64 listing#0 0u)
        let tmp%9#2: uint64 = (- values%5#1 quantity#0)
        let array%val_as_bytes%21#1: bytes[8] = (itob tmp%9#2)
        let array%val_as_bytes%22#1: bytes[8] = (itob price#0)
        let array%encoded%35#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%21#1 array%val_as_bytes%22#1)
        let array%encoded%36#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%35#1 array%extract%12#1)
        let array%val_as_bytes%23#1: bytes[8] = (itob values%1#0)
        let array%encoded%37#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%36#1 array%val_as_bytes%23#1)
        let array%val_as_bytes%24#1: bytes[8] = (itob values%2#0)
        let array%encoded%38#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%37#1 array%val_as_bytes%24#1)
        (box_put box_prefixed_key%0#0 array%encoded%38#1)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) quantity#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@11: // withdraw_route_L170
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%54#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let asset#0: uint64 = ((txnas Assets) tmp%54#0)
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%7#0)
        let tmp%0#3: account = (txn Sender)
        let array%val_as_bytes%25#1: bytes[8] = (itob asset#0)
        let array%encoded%41#1: Encoded(uint8[32],uint64) = (concat tmp%0#3 array%val_as_bytes%25#1)
        let array%val_as_bytes%26#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%41#1 array%val_as_bytes%26#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let array%extract%15#1: bytes = ((extract 16 32) listing#0)
        let tmp%2#1: account = (global ZeroAddress)
        let tmp%3#1: bool = (!= array%extract%15#1 tmp%2#1)
        goto tmp%3#1 ? block@12 : block@13
    block@12: // if_body_L180
        let quantity#0: uint64 = (extract_uint64 listing#0 48u)
        let price#0: uint64 = (extract_uint64 listing#0 56u)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#2: bool = (! _quotient_high#0)
        (assert tmp%8#2)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) array%extract%15#1)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@13
    block@13: // after_if_else_L179
        (box_del box_prefixed_key%0#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) 50500u)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        let values%4#2: uint64 = (extract_uint64 listing#0 0u)
        ((itxn_field AssetAmount) values%4#2)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@14: // bid_route_L197
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%61#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let owner#0: account = ((txnas Accounts) tmp%61#0)
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%63#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let asset#0: uint64 = ((txnas Assets) tmp%63#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%8#0)
        let tmp%66#0: uint64 = (txn GroupIndex)
        let bid_pay#0: uint64 = (- tmp%66#0 1u)
        let gtxn_type%5#0: uint64 = ((gtxns TypeEnum) bid_pay#0)
        let gtxn_type_matches%5#0: bool = (== gtxn_type%5#0 pay)
        (assert gtxn_type_matches%5#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%9#0)
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%10#0)
        let array%val_as_bytes%27#1: bytes[8] = (itob asset#0)
        let array%encoded%45#1: Encoded(uint8[32],uint64) = (concat owner#0 array%val_as_bytes%27#1)
        let array%val_as_bytes%28#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%45#1 array%val_as_bytes%28#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let array%extract%20#1: bytes = ((extract 16 32) listing#0)
        let tmp%1#2: account = (global ZeroAddress)
        let tmp%2#2: bool = (!= array%extract%20#1 tmp%1#2)
        goto tmp%2#2 ? block@15 : block@16
    block@15: // if_body_L207
        let price#0: uint64 = (extract_uint64 listing#0 56u)
        let tmp%3#1: bool = (> unitary_price#0 price#0)
        (assert tmp%3#1)
        let quantity#4: uint64 = (extract_uint64 listing#0 48u)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 quantity#4)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#2: bool = (! _quotient_high#0)
        (assert tmp%8#2)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) array%extract%20#1)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@16
    block@16: // after_if_else_L206
        let (asset_decimals#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw unitary_price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#2: bool = (! _quotient_high#0)
        (assert tmp%8#2)
        let tmp%6#2: account = ((gtxns Sender) bid_pay#0)
        let tmp%7#2: account = (txn Sender)
        let tmp%8#2: bool = (== tmp%6#2 tmp%7#2)
        (assert tmp%8#2)
        let tmp%9#1: account = ((gtxns Receiver) bid_pay#0)
        let tmp%10#1: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#1 tmp%10#1)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%13#1: bool = (== tmp%12#0 amount_to_be_paid#1)
        (assert tmp%13#1)
        let values%5#1: uint64 = (extract_uint64 listing#0 0u)
        let values%6#1: uint64 = (extract_uint64 listing#0 8u)
        let tmp%14#1: account = (txn Sender)
        let array%val_as_bytes%29#1: bytes[8] = (itob values%5#1)
        let array%val_as_bytes%30#1: bytes[8] = (itob values%6#1)
        let array%encoded%49#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%29#1 array%val_as_bytes%30#1)
        let array%encoded%50#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%49#1 tmp%14#1)
        let array%val_as_bytes%31#1: bytes[8] = (itob quantity#0)
        let array%encoded%51#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%50#1 array%val_as_bytes%31#1)
        let array%val_as_bytes%32#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%52#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%51#1 array%val_as_bytes%32#1)
        (box_put box_prefixed_key%0#0 array%encoded%52#1)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@17: // acceptBid_route_L235
        let tmp%69#0: uint64 = (txn OnCompletion)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // OnCompletion is not NoOp
        let tmp%71#0: uint64 = (txn ApplicationID)
        (assert tmp%71#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%73#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let asset#0: uint64 = ((txnas Assets) tmp%73#0)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%11#0)
        let tmp%0#3: account = (txn Sender)
        let array%val_as_bytes%33#1: bytes[8] = (itob asset#0)
        let array%encoded%55#1: Encoded(uint8[32],uint64) = (concat tmp%0#3 array%val_as_bytes%33#1)
        let array%val_as_bytes%34#1: bytes[8] = (itob nonce#0)
        let key#0: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%55#1 array%val_as_bytes%34#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let array%extract%27#1: bytes = ((extract 16 32) listing#0)
        let tmp%2#1: account = (global ZeroAddress)
        let tmp%3#1: bool = (!= array%extract%27#1 tmp%2#1)
        (assert tmp%3#1)
        let values%1#0: uint64 = (extract_uint64 listing#0 0u)
        let values%2#0: uint64 = (extract_uint64 listing#0 48u)
        let tmp%4#0: bool = (< values%1#0 values%2#0)
        goto tmp%4#0 ? block@18 : block@19
    block@18: // ternary_true_L246
        let min_quantity#0: uint64 = values%1#0
        goto block@20
    block@19: // ternary_false_L246
        let min_quantity#0: uint64 = values%2#0
        goto block@20
    block@20: // ternary_merge_L246
        let price#0: uint64 = (extract_uint64 listing#0 56u)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 min_quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#2: bool = (! _quotient_high#0)
        (assert tmp%8#2)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field AssetAmount) min_quantity#0)
        ((itxn_field AssetReceiver) array%extract%27#1)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let values%9#0: uint64 = (extract_uint64 listing#0 8u)
        let tmp%6#1: uint64 = (- values%1#0 min_quantity#0)
        let tmp%7#1: uint64 = (- values%2#0 min_quantity#0)
        let array%val_as_bytes%35#1: bytes[8] = (itob tmp%6#1)
        let array%val_as_bytes%36#1: bytes[8] = (itob values%9#0)
        let array%encoded%59#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%35#1 array%val_as_bytes%36#1)
        let array%encoded%60#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%59#1 array%extract%27#1)
        let array%val_as_bytes%37#1: bytes[8] = (itob tmp%7#1)
        let array%encoded%61#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%60#1 array%val_as_bytes%37#1)
        let array%val_as_bytes%38#1: bytes[8] = (itob price#0)
        let array%encoded%62#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%61#1 array%val_as_bytes%38#1)
        (box_put box_prefixed_key%0#0 array%encoded%62#1)
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@21: // bare_routing_L17
        let tmp%76#0: uint64 = (txn OnCompletion)
        goto tmp%76#0 ? block@23 : block@22
    block@22: // __algopy_default_create_L1
        let tmp%77#0: uint64 = (txn ApplicationID)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // can only call when creating
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@23: // after_if_else_L17
        let marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router__%0#0
        goto block@24
    block@24: // after_inlined_marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__puya_arc4_router___L1
        return tmp%0#0