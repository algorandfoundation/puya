{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;AAKY;;;AAAJ;AACI;;;AAAJ;AACI;;;AAAJ;AAAA;;AACI;;;AAAJ;;AAEQ;AAAD;;;AAAa;;AAAA;;AAAA;AAAb;;;;AAAP;AACO;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAP;AACA;AAAA;;;AACA;AAAA;;;AAEO;AAAP;;;;;AAMR;;;AAEY;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAD;AAAyB;AAAzB;AAAP;AAGJ;;;AAEW;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.too_many_permutations.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "8": {
      "op": "dup",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "9": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "b#0"
      ]
    },
    "12": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0"
      ]
    },
    "13": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0",
        "c#0"
      ]
    },
    "16": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "a#0",
        "c#0",
        "c#0"
      ]
    },
    "17": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "a#0",
        "c#0"
      ]
    },
    "19": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "a#0",
        "c#0",
        "d#0"
      ]
    },
    "22": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "c#0"
      ]
    },
    "24": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0"
      ]
    },
    "25": {
      "op": "bnz main_bool_true@2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "28": {
      "block": "main_or_contd@1",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0"
      ]
    },
    "30": {
      "op": "dig 1",
      "defined_out": [
        "b#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0",
        "d#0"
      ]
    },
    "32": {
      "op": "!=",
      "defined_out": [
        "b#0",
        "d#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ]
    },
    "33": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "36": {
      "block": "main_bool_true@2",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ]
    },
    "37": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "38": {
      "op": "dig 3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "40": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "41": {
      "op": "dig 4",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "a#0 (copy)",
        "b#0"
      ]
    },
    "43": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "44": {
      "op": "cover 3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "46": {
      "op": "dig 5",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0"
      ]
    },
    "48": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)",
        "c#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "49": {
      "op": "cover 5",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "51": {
      "op": "dig 6",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)",
        "c#0",
        "c#0 (copy)",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0"
      ]
    },
    "53": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)",
        "c#0",
        "c#0 (copy)",
        "d#0",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "54": {
      "op": "cover 7",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "56": {
      "callsub": "test_cases.too_many_permutations.contract.four_args",
      "op": "callsub four_args",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "59": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "60": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0",
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "61": {
      "callsub": "test_cases.too_many_permutations.contract.two_args",
      "op": "callsub two_args",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0",
        "c#0"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0"
      ]
    },
    "65": {
      "callsub": "test_cases.too_many_permutations.contract.two_args",
      "op": "callsub two_args",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "68": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "1"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "70": {
      "block": "main_bool_false@3",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ]
    },
    "71": {
      "op": "b main_bool_merge@4"
    },
    "74": {
      "subroutine": "test_cases.too_many_permutations.contract.four_args",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "four_args",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "77": {
      "block": "four_args_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "79": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "frame_dig -2",
      "defined_out": [
        "c#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "c#0 (copy)"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "85": {
      "op": "frame_dig -1",
      "defined_out": [
        "d#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "d#0 (copy)"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "88": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "90": {
      "op": ">",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "91": {
      "retsub": true,
      "op": "retsub"
    },
    "92": {
      "subroutine": "test_cases.too_many_permutations.contract.two_args",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "two_args",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "95": {
      "block": "two_args_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "97": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "op": "len",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "101": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "102": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "retsub": true,
      "op": "retsub"
    }
  }
}