{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";AAKY;;;AACA;;;AACA;;;AACA;;;AAHJ;;;AAEA;;;AAGQ;AAAD;;;AAAa;;AAAA;;AAAA;AAAb;;;;;AAAP;AAaI;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAD;AAZH;AAiBG;AAAP;AAAO;AAAA;AAAP;AAbW;;AAAP;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.too_many_permutations.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txna ApplicationArgs 0"
    },
    "4": {
      "op": "txna ApplicationArgs 1"
    },
    "7": {
      "op": "txna ApplicationArgs 2"
    },
    "10": {
      "op": "txna ApplicationArgs 3"
    },
    "13": {
      "op": "txna ApplicationArgs 0"
    },
    "16": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "c#0"
      ]
    },
    "19": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#0"
      ]
    },
    "20": {
      "op": "bnz main_bool_true@2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "23": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0"
      ]
    },
    "25": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0",
        "d#0"
      ]
    },
    "27": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#0"
      ]
    },
    "28": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "31": {
      "block": "main_bool_true@2",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "op": "pushint 1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ]
    },
    "33": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "34": {
      "op": "dig 3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "36": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0",
        "b#0"
      ]
    },
    "38": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "40": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "c#0"
      ]
    },
    "42": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "c#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "43": {
      "op": "cover 3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "c#0 (copy)"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "46": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "tmp%0#1",
        "tmp%1#1",
        "d#0"
      ]
    },
    "48": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "tmp%0#1",
        "tmp%1#1",
        "d#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "49": {
      "op": "cover 3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%1#1",
        "d#0 (copy)"
      ]
    },
    "51": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "52": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "53": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ]
    },
    "54": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0",
        "tmp%1#2"
      ]
    },
    "55": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0",
        "d#0"
      ]
    },
    "56": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ]
    },
    "57": {
      "op": "len",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#2"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "59": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "1"
      ]
    },
    "61": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "62": {
      "block": "main_bool_false@3",
      "stack_in": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "op": "pushint 0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "or_result%0#0"
      ]
    },
    "64": {
      "op": "b main_bool_merge@4"
    }
  }
}