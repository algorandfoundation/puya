contract MyContract
{
  approval_program(): bool
  {
    a: algopy.Bytes = txna<ApplicationArgs, 0>()
    b: algopy.Bytes = txna<ApplicationArgs, 1>()
    c: algopy.Bytes = txna<ApplicationArgs, 2>()
    d: algopy.Bytes = txna<ApplicationArgs, 3>()
    assert(a != c or b != d)
    assert(test_cases.too_many_permutations.contract::four_args(a, b, c, d))
    test_cases.too_many_permutations.contract::two_args(a, b)
    test_cases.too_many_permutations.contract::two_args(c, d)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine four_args(a: algopy.Bytes, b: algopy.Bytes, c: algopy.Bytes, d: algopy.Bytes): bool
{
  return len(a + b + c + d) > 0u
}

subroutine two_args(a: algopy.Bytes, b: algopy.Bytes): None
{
  assert(reinterpret_cast<bool>(len(a + b)))
}