contract test_cases.too_many_permutations.contract.MyContract:
    program approval:
        subroutine test_cases.too_many_permutations.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                let a#0: bytes = (txna ApplicationArgs 0)
                let b#0: bytes = (txna ApplicationArgs 1)
                let c#0: bytes = (txna ApplicationArgs 2)
                let d#0: bytes = (txna ApplicationArgs 3)
                let tmp%0#0: uint64 = (!= a#0 c#0)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // or_contd_L11
                let tmp%1#0: uint64 = (!= b#0 d#0)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L11
                let or_result%2#0: uint64 = 1u
                let or_result%2#5: uint64 = or_result%2#0
                goto block@4
            block@3: // bool_false_L11
                let or_result%2#1: uint64 = 0u
                let or_result%2#5: uint64 = or_result%2#1
                goto block@4
            block@4: // bool_merge_L11
                let or_result%2#2: uint64 = or_result%2#5
                (assert or_result%2#2)
                let tmp%3#0: uint64 = test_cases.too_many_permutations.contract.four_args(a#0, b#0, c#0, d#0)
                (assert tmp%3#0)
                test_cases.too_many_permutations.contract.two_args(a#0, b#0)
                test_cases.too_many_permutations.contract.two_args(c#0, d#0)
                return 1u
        
        subroutine test_cases.too_many_permutations.contract.four_args(a: bytes, b: bytes, c: bytes, d: bytes) -> uint64:
            block@0: // L22
                let tmp%0#0: bytes = (concat a#0 b#0)
                let tmp%1#0: bytes = (concat tmp%0#0 c#0)
                let tmp%2#0: bytes = (concat tmp%1#0 d#0)
                let tmp%3#0: uint64 = (len tmp%2#0)
                let tmp%4#0: uint64 = (> tmp%3#0 0u)
                return tmp%4#0
        
        subroutine test_cases.too_many_permutations.contract.two_args(a: bytes, b: bytes) -> void:
            block@0: // L27
                let tmp%0#0: bytes = (concat a#0 b#0)
                let tmp%1#0: uint64 = (len tmp%0#0)
                (assert tmp%1#0)
                return 
    
    program clear-state:
        subroutine test_cases.too_many_permutations.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L18
                return 1u