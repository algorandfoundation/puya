#pragma version 10
#pragma typetrack false

// test_cases.everything.contract.Everything.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "counter" "name" 0x151f7c75

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.everything.my_base.multiplicative_identity() -> uint64:
multiplicative_identity:

multiplicative_identity_block@0:
    // everything/my_base.py:20
    // return UInt64(1)
    intc_1 // 1
    retsub


// test_cases.everything.contract.get_banned() -> bytes:
get_banned:

get_banned_block@0:
    // everything/contract.py:25
    // addr = Account(BANNED)
    pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // everything/contract.py:26
    // return addr
    retsub


// test_cases.everything.contract.positive_one() -> uint64:
positive_one:

positive_one_block@0:
    // everything/contract.py:88
    // return UInt64(1)
    intc_1 // 1
    retsub


// test_cases.everything.contract.Everything.__init__() -> void:
__init__:

__init___block@0:
    retsub


// test_cases.everything.contract.Everything.create() -> void:
create:

create_block@0:
    // everything/contract.py:43
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:44
    // self.remember_creator()
    callsub remember_creator
    // everything/contract.py:45
    // self.counter = UInt64(ZERO)
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.everything.contract.Everything.register(name: bytes) -> void:
register:
    // everything/contract.py:47-48
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def register(self, name: String) -> None:
    proto 1 0

register_block@0:
    // everything/contract.py:49
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:50
    // if op.Txn.on_completion == OnCompleteAction.OptIn:
    txn OnCompletion
    intc_1 // OptIn
    ==
    bz register_after_if_else@4

register_if_body@1:
    // everything/contract.py:51
    // sender_name, sender_name_existed = self.name.maybe(account=0)
    intc_0 // 0
    dup
    bytec_1 // "name"
    app_local_get_ex
    bury 1
    // everything/contract.py:52
    // if not sender_name_existed:
    bnz register_after_if_else@3

register_if_body@2:
    // everything/contract.py:53
    // self.counter += multiplicative_identity()  # has full FuncDef
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    callsub multiplicative_identity
    +
    bytec_0 // "counter"
    swap
    app_global_put

register_after_if_else@3:

register_after_if_else@4:
    // everything/contract.py:54
    // self.name[0] = name
    intc_0 // 0
    bytec_1 // "name"
    frame_dig -1
    app_local_put
    retsub


// test_cases.everything.contract.Everything.say_hello() -> bytes:
say_hello:
    // everything/contract.py:56-57
    // @abimethod
    // def say_hello(self) -> String:
    proto 0 1

say_hello_block@0:
    // everything/contract.py:58
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:59
    // name, exists = self.name.maybe(account=0)
    intc_0 // 0
    dup
    bytec_1 // "name"
    app_local_get_ex
    // everything/contract.py:60
    // if not exists:
    bnz say_hello_after_if_else@2

say_hello_if_body@1:
    // everything/contract.py:61
    // return String("Howdy stranger!")
    pushbytes 0x000f486f77647920737472616e67657221
    swap
    retsub

say_hello_after_if_else@2:
    // everything/contract.py:62
    // return "Hello, " + name + "!"
    pushbytes 0x000748656c6c6f2c20
    extract 2 0
    frame_dig 0
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    extract 2 0
    pushbytes 0x000121
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    retsub


// test_cases.everything.contract.Everything.calculate(a: bytes, b: bytes) -> bytes:
calculate:
    // everything/contract.py:64-65
    // @abimethod
    // def calculate(self, a: arc4_UInt64, b: arc4_UInt64) -> arc4_UInt64:
    proto 2 1

calculate_block@0:
    // everything/contract.py:66
    // c = super().calculate(a, b)
    frame_dig -2
    frame_dig -1
    callsub test_cases.everything.my_base.MyMiddleBase.calculate
    // everything/contract.py:67
    // return arc4_UInt64(c.native * b.native)
    btoi
    frame_dig -1
    btoi
    *
    itob
    retsub


// test_cases.everything.contract.Everything.close_out() -> void:
close_out:

close_out_block@0:
    // everything/contract.py:71
    // self._remove_sender()
    callsub _remove_sender
    retsub


// test_cases.everything.contract.Everything._check_ban_list() -> void:
_check_ban_list:

_check_ban_list_block@0:
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    txn Sender
    callsub get_banned
    !=
    assert // You are banned, goodbye
    retsub


// test_cases.everything.contract.Everything._remove_sender() -> void:
_remove_sender:

_remove_sender_block@0:
    // everything/contract.py:83
    // self.counter -= positive_one()
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    callsub positive_one
    -
    bytec_0 // "counter"
    swap
    app_global_put
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:

approval_program_block@0:

approval_program_block@1:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@10

approval_program_abi_routing@2:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txna ApplicationArgs 0
    pushbytes 0x4c5c61ba // method "create()void"
    pushbytes 0xbd6099e5 // method "register(string)void"
    pushbytes 0x5d5c84c7 // method "say_hello()string"
    pushbytes 0xfd07264e // method "calculate(uint64,uint64)uint64"
    pushbytes 0x1658aa2f // method "close_out()void"
    uncover 5
    match approval_program_create_route@3 approval_program_register_route@4 approval_program_say_hello_route@5 approval_program_calculate_route@6 approval_program_close_out_route@7

approval_program_switch_case_default@8:

approval_program_switch_case_next@9:

approval_program_after_if_else@11:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    intc_0 // 0

approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12:
    retsub

approval_program_close_out_route@7:
    // everything/contract.py:69
    // @abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub close_out
    intc_1 // 1
    b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12

approval_program_calculate_route@6:
    // everything/contract.py:64
    // @abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // everything/contract.py:64
    // @abimethod
    callsub calculate
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12

approval_program_say_hello_route@5:
    // everything/contract.py:56
    // @abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub say_hello
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12

approval_program_register_route@4:
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    txn OnCompletion
    intc_1 // 1
    swap
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txna ApplicationArgs 1
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub register
    intc_1 // 1
    b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12

approval_program_create_route@3:
    // everything/contract.py:41
    // @abimethod(create="require")
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub create
    intc_1 // 1
    b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12

approval_program_bare_routing@10:
    b approval_program_after_if_else@11


// test_cases.everything.my_base.MyMiddleBase.calculate(a: bytes, b: bytes) -> bytes:
test_cases.everything.my_base.MyMiddleBase.calculate:
    // everything/my_base.py:13-14
    // @subroutine
    // def calculate(self, a: arc4.UInt64, b: arc4.UInt64) -> arc4.UInt64:
    proto 2 1

test_cases.everything.my_base.MyMiddleBase.calculate_block@0:
    // everything/my_base.py:15
    // return arc4.UInt64(a.native + b.native)
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    +
    itob
    retsub


// test_cases.everything.my_base.MyBase.remember_creator() -> void:
remember_creator:

remember_creator_block@0:
    // everything/my_base.py:9
    // self.creator = op.Txn.sender
    txn Sender
    pushbytes "creator"
    swap
    app_global_put
    retsub
