{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBW;AAAP;ADKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACP;AA8DO;AAAP;;AA7CI;;;AACA;;;AACA;AAAe;AAAf;;AAER;;;AAEQ;;;AACG;;AAAwB;AAAxB;AAAX;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAChC;;;AACC;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAAA;AACE;AAAV;AAAA;;AAAA;;AAER;;;AAEQ;;;AACuC;AAAxB;AAAA;AAAA;AACZ;;;AACQ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAAA;AACG;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAmB;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAAA;AAER;;;AAEY;;AAAA;;AAAA;;;AACe;AAAW;;AAAA;AAAX;AAAZ;AAAP;AAIA;;;;AAQO;;AAAiB;;;AAAjB;AAAP;;AAIA;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAAA;;AA9CR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AAgCK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3BL;;;AAAA;;;AA2BK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVL;;;AAUK;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AC5BL;;;AAE2B;;AAAA;AAAW;;AAAA;AAAX;AAAZ;AAAP;AANe;;AAAf;;;;;;;;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock \"counter\" \"name\" \"Howdy stranger!\" \"Hello, \" 0x151f7c75"
    },
    "50": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "55": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.__init__",
      "op": "callsub __init__"
    },
    "58": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "61": {
      "op": "return",
      "stack_out": []
    },
    "62": {
      "subroutine": "test_cases.everything.my_base.multiplicative_identity",
      "params": {},
      "block": "multiplicative_identity_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "63": {
      "retsub": true,
      "op": "retsub"
    },
    "64": {
      "subroutine": "test_cases.everything.contract.get_banned",
      "params": {},
      "block": "get_banned_block@0",
      "stack_in": [],
      "op": "pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ],
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "98": {
      "retsub": true,
      "op": "retsub"
    },
    "99": {
      "subroutine": "test_cases.everything.contract.positive_one",
      "params": {},
      "block": "positive_one_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "100": {
      "retsub": true,
      "op": "retsub"
    },
    "101": {
      "subroutine": "test_cases.everything.contract.Everything.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "102": {
      "subroutine": "test_cases.everything.contract.Everything.create",
      "params": {},
      "block": "create_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "105": {
      "callsub": "test_cases.everything.my_base.MyBase.remember_creator",
      "op": "callsub remember_creator"
    },
    "108": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "retsub": true,
      "op": "retsub"
    },
    "112": {
      "subroutine": "test_cases.everything.contract.Everything.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "115": {
      "block": "register_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "118": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "OptIn"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "122": {
      "op": "bz register_after_if_else@4",
      "stack_out": []
    },
    "125": {
      "block": "register_if_body@1",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "126": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "127": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "128": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "129": {
      "op": "bury 1",
      "defined_out": [
        "sender_name_existed#0"
      ],
      "stack_out": [
        "sender_name_existed#0"
      ]
    },
    "131": {
      "op": "bnz register_after_if_else@3",
      "stack_out": []
    },
    "134": {
      "block": "register_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "135": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "136": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "137": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "138": {
      "callsub": "test_cases.everything.my_base.multiplicative_identity",
      "op": "callsub multiplicative_identity",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "141": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "142": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%3#0",
        "\"counter\""
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "tmp%3#0"
      ]
    },
    "144": {
      "op": "app_global_put",
      "stack_out": []
    },
    "145": {
      "block": "register_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "146": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"name\""
      ]
    },
    "147": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "0",
        "\"name\"",
        "name#0 (copy)"
      ]
    },
    "149": {
      "op": "app_local_put",
      "stack_out": []
    },
    "150": {
      "retsub": true,
      "op": "retsub"
    },
    "151": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "154": {
      "block": "say_hello_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "157": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "158": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "159": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "160": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "161": {
      "op": "bnz say_hello_after_if_else@2",
      "stack_out": [
        "name#0"
      ]
    },
    "164": {
      "block": "say_hello_if_body@1",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec_2 // \"Howdy stranger!\"",
      "defined_out": [
        "\"Howdy stranger!\""
      ],
      "stack_out": [
        "name#0",
        "\"Howdy stranger!\""
      ]
    },
    "165": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%0#0"
      ]
    },
    "166": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "167": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "170": {
      "op": "bytec_2 // \"Howdy stranger!\"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0",
        "\"Howdy stranger!\""
      ]
    },
    "171": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "swap"
    },
    "173": {
      "retsub": true,
      "op": "retsub"
    },
    "174": {
      "block": "say_hello_after_if_else@2",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec_3 // \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "175": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%1#0"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "177": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "180": {
      "op": "bytec_3 // \"Hello, \"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0",
        "\"Hello, \""
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0"
      ]
    },
    "182": {
      "op": "frame_dig 0",
      "defined_out": [
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0"
      ]
    },
    "184": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "name#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "name#0 (copy)"
      ]
    },
    "185": {
      "op": "len",
      "defined_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "total_length%0#0"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0"
      ]
    },
    "187": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0",
        "name#0 (copy)"
      ]
    },
    "188": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "name#0",
        "name#0 (copy)",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0",
        "name#0 (copy)",
        "2"
      ]
    },
    "189": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "name#0 (copy)",
        "2",
        "total_length%0#0"
      ]
    },
    "191": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%0#0",
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "extract_to_end%0#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "extract_to_end%0#0",
        "name#0"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "extract_to_end%0#0",
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "extract_to_end%0#0",
        "name#0",
        "0"
      ]
    },
    "194": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_to_end%0#0",
        "name#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "extract_to_end%0#0",
        "tmp%2#0"
      ]
    },
    "195": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "tmp%2#0",
        "extract_to_end%0#0"
      ]
    },
    "196": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "extract_to_end%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "tmp%1#0",
        "extract_to_end%0#0"
      ]
    },
    "199": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%concat%0#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%concat%0#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)"
      ]
    },
    "201": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)",
        "0"
      ]
    },
    "202": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "203": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "205": {
      "op": "+",
      "defined_out": [
        "aggregate%add%0#0",
        "aggregate%concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%0#0",
        "aggregate%add%0#0"
      ]
    },
    "206": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "207": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%0#0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0",
        "0"
      ]
    },
    "212": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "aggregate%concat%0#0",
        "0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "214": {
      "op": "replace3",
      "defined_out": [
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0"
      ]
    },
    "215": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "\"!\""
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "aggregate%length%2#0"
      ]
    },
    "219": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "220": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "223": {
      "op": "pushbytes \"!\"",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "aggregate%length_uint16%2#0",
        "\"!\""
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "227": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "228": {
      "op": "len",
      "defined_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "total_length%1#0"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "total_length%1#0",
        "tmp%4#0"
      ]
    },
    "230": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "total_length%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "231": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "total_length%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "232": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "234": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%1#0",
        "name#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%4#0",
        "extract_to_end%1#0"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "extract_to_end%1#0",
        "tmp%4#0"
      ]
    },
    "236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "extract_to_end%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "237": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_to_end%1#0",
        "name#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "extract_to_end%1#0",
        "tmp%5#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "tmp%5#0",
        "extract_to_end%1#0"
      ]
    },
    "239": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "extract_to_end%1#0",
        "tmp%3#0"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "tmp%3#0",
        "extract_to_end%1#0"
      ]
    },
    "242": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%concat%1#0",
        "name#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "aggregate%concat%1#0"
      ]
    },
    "243": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)",
        "name#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)"
      ]
    },
    "244": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)",
        "0"
      ]
    },
    "245": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%1#0",
        "name#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%5#0",
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "246": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%1#0",
        "tmp%5#0"
      ]
    },
    "248": {
      "op": "+",
      "defined_out": [
        "aggregate%add%1#0",
        "aggregate%concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%1#0",
        "aggregate%add%1#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "250": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%1#0",
        "aggregate%concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%concat%1#0",
        "aggregate%as_u16_bytes%1#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "aggregate%as_u16_bytes%1#0",
        "aggregate%concat%1#0"
      ]
    },
    "254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "aggregate%as_u16_bytes%1#0",
        "aggregate%concat%1#0",
        "0"
      ]
    },
    "255": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "aggregate%concat%1#0",
        "0",
        "aggregate%as_u16_bytes%1#0"
      ]
    },
    "257": {
      "op": "replace3",
      "defined_out": [
        "name#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%6#0"
      ]
    },
    "258": {
      "op": "swap"
    },
    "259": {
      "retsub": true,
      "op": "retsub"
    },
    "260": {
      "subroutine": "test_cases.everything.contract.Everything.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "263": {
      "block": "calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "265": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "267": {
      "callsub": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "op": "callsub test_cases.everything.my_base.MyMiddleBase.calculate",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "270": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "271": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "b#0 (copy)"
      ]
    },
    "273": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "274": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "276": {
      "retsub": true,
      "op": "retsub"
    },
    "277": {
      "subroutine": "test_cases.everything.contract.Everything.close_out",
      "params": {},
      "block": "close_out_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._remove_sender",
      "op": "callsub _remove_sender"
    },
    "280": {
      "retsub": true,
      "op": "retsub"
    },
    "281": {
      "subroutine": "test_cases.everything.contract.Everything._check_ban_list",
      "params": {},
      "block": "_check_ban_list_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "283": {
      "callsub": "test_cases.everything.contract.get_banned",
      "op": "callsub get_banned",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "286": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "287": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "288": {
      "retsub": true,
      "op": "retsub"
    },
    "289": {
      "subroutine": "test_cases.everything.contract.Everything._remove_sender",
      "params": {},
      "block": "_remove_sender_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "290": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "291": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "292": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "293": {
      "callsub": "test_cases.everything.contract.positive_one",
      "op": "callsub positive_one",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "297": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%1#0",
        "\"counter\""
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "tmp%1#0"
      ]
    },
    "299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "300": {
      "retsub": true,
      "op": "retsub"
    },
    "301": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "303": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "304": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "305": {
      "op": "bz approval_program_bare_routing@10",
      "stack_out": []
    },
    "308": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "311": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)"
      ]
    },
    "317": {
      "op": "pushbytes 0xbd6099e5 // method \"register(string)void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)"
      ]
    },
    "323": {
      "op": "pushbytes 0x5d5c84c7 // method \"say_hello()string\"",
      "defined_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)"
      ]
    },
    "329": {
      "op": "pushbytes 0xfd07264e // method \"calculate(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)"
      ]
    },
    "335": {
      "op": "pushbytes 0x1658aa2f // method \"close_out()void\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)"
      ]
    },
    "341": {
      "op": "uncover 5",
      "stack_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)",
        "tmp%2#0"
      ]
    },
    "343": {
      "op": "match approval_program_create_route@3 approval_program_register_route@4 approval_program_say_hello_route@5 approval_program_calculate_route@6 approval_program_close_out_route@7",
      "stack_out": []
    },
    "355": {
      "block": "approval_program_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "block": "approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "block": "approval_program_close_out_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "359": {
      "op": "intc_2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "CloseOut"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "361": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "362": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "364": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0"
      ]
    },
    "365": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "366": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "367": {
      "callsub": "test_cases.everything.contract.Everything.close_out",
      "op": "callsub close_out"
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "374": {
      "block": "approval_program_calculate_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "376": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "NoOp"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "378": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "379": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "381": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "382": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "383": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "384": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "387": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "390": {
      "callsub": "test_cases.everything.contract.Everything.calculate",
      "op": "callsub calculate",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "393": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%22#0"
      ]
    },
    "396": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "397": {
      "op": "log",
      "stack_out": []
    },
    "398": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "399": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "402": {
      "block": "approval_program_say_hello_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "404": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "405": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "410": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "411": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "412": {
      "callsub": "test_cases.everything.contract.Everything.say_hello",
      "op": "callsub say_hello",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "415": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "417": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "418": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "419": {
      "op": "log",
      "stack_out": []
    },
    "420": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "421": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "424": {
      "block": "approval_program_register_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "427": {
      "op": "swap",
      "stack_out": [
        "1",
        "tmp%7#0"
      ]
    },
    "428": {
      "op": "shl",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "429": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "3"
      ]
    },
    "431": {
      "op": "&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "432": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "436": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "437": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "438": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "441": {
      "callsub": "test_cases.everything.contract.Everything.register",
      "op": "callsub register",
      "stack_out": []
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "448": {
      "block": "approval_program_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "450": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "452": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "457": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "458": {
      "callsub": "test_cases.everything.contract.Everything.create",
      "op": "callsub create"
    },
    "461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "465": {
      "block": "approval_program_bare_routing@10",
      "stack_in": [],
      "op": "b approval_program_after_if_else@11"
    },
    "468": {
      "subroutine": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "471": {
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "473": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "474": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "476": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "477": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "478": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "479": {
      "retsub": true,
      "op": "retsub"
    },
    "480": {
      "subroutine": "test_cases.everything.my_base.MyBase.remember_creator",
      "params": {},
      "block": "remember_creator_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"creator\""
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "\"creator\"",
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "app_global_put",
      "stack_out": []
    },
    "493": {
      "retsub": true,
      "op": "retsub"
    }
  }
}