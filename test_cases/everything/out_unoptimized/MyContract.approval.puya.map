{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBW;AAAP;ADKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACP;AA8DO;AAAP;;AA7CI;;;AACA;;;AACA;AAAe;AAAf;;AAER;;;AAEQ;;;AACG;;AAAwB;AAAxB;AAAX;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAChC;;;AACC;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAAA;AACE;AAAV;AAAA;;AAAA;;AAER;;;AAEQ;;;AACuC;AAAxB;AAAA;AAAA;AACZ;;;AACQ;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AACG;;;;;;;;;;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAmB;;;;;AAAnB;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAAA;AAER;;;AAEQ;;AAAA;;AAAI;;;AACe;AAAW;;AAAA;AAAX;AAAZ;AAAP;AAIA;;;;AAQO;;AAAiB;;;AAAjB;AAAP;;AAIA;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;AAAA;;AA9CR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AAgCK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3BL;;;AAAA;;;AA2BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVL;;;AAUK;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AC5BL;;;AAE2B;;AAAA;AAAW;;AAAA;AAAX;AAAZ;AAAP;AANe;;AAAf;;;;;;;;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"counter\" \"name\" 0x151f7c75"
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "30": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.__init__",
      "op": "callsub __init__"
    },
    "33": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    },
    "37": {
      "subroutine": "test_cases.everything.my_base.multiplicative_identity",
      "params": {},
      "block": "multiplicative_identity",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "38": {
      "retsub": true,
      "op": "retsub"
    },
    "39": {
      "subroutine": "test_cases.everything.contract.get_banned",
      "params": {},
      "block": "get_banned",
      "stack_in": [],
      "op": "pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ],
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "73": {
      "retsub": true,
      "op": "retsub"
    },
    "74": {
      "subroutine": "test_cases.everything.contract.positive_one",
      "params": {},
      "block": "positive_one",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "75": {
      "retsub": true,
      "op": "retsub"
    },
    "76": {
      "subroutine": "test_cases.everything.contract.Everything.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "77": {
      "subroutine": "test_cases.everything.contract.Everything.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "80": {
      "callsub": "test_cases.everything.my_base.MyBase.remember_creator",
      "op": "callsub remember_creator"
    },
    "83": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "85": {
      "op": "app_global_put",
      "stack_out": []
    },
    "86": {
      "retsub": true,
      "op": "retsub"
    },
    "87": {
      "subroutine": "test_cases.everything.contract.Everything.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "90": {
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "93": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "OptIn"
      ]
    },
    "96": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "97": {
      "op": "bz register_after_if_else@4",
      "stack_out": []
    },
    "100": {
      "block": "register_if_body@1",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "101": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "102": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "103": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "104": {
      "op": "bury 1",
      "defined_out": [
        "sender_name_existed#0"
      ],
      "stack_out": [
        "sender_name_existed#0"
      ]
    },
    "106": {
      "op": "bnz register_after_if_else@3",
      "stack_out": []
    },
    "109": {
      "block": "register_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "110": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "112": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "113": {
      "callsub": "test_cases.everything.my_base.multiplicative_identity",
      "op": "callsub multiplicative_identity",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "116": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "117": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"counter\""
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "new_state_value%0#0"
      ]
    },
    "119": {
      "op": "app_global_put",
      "stack_out": []
    },
    "120": {
      "block": "register_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "121": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"name\""
      ]
    },
    "122": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "0",
        "\"name\"",
        "name#0 (copy)"
      ]
    },
    "124": {
      "op": "app_local_put",
      "stack_out": []
    },
    "125": {
      "retsub": true,
      "op": "retsub"
    },
    "126": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "129": {
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "133": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "134": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "135": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "136": {
      "op": "bnz say_hello_after_if_else@2",
      "stack_out": [
        "name#0"
      ]
    },
    "139": {
      "block": "say_hello_if_body@1",
      "stack_in": [
        "name#0"
      ],
      "op": "pushbytes 0x000f486f77647920737472616e67657221",
      "defined_out": [
        "0x000f486f77647920737472616e67657221"
      ],
      "stack_out": [
        "name#0",
        "0x000f486f77647920737472616e67657221"
      ]
    },
    "158": {
      "op": "swap"
    },
    "159": {
      "retsub": true,
      "op": "retsub"
    },
    "160": {
      "block": "say_hello_after_if_else@2",
      "stack_in": [
        "name#0"
      ],
      "op": "pushbytes 0x000748656c6c6f2c20",
      "defined_out": [
        "0x000748656c6c6f2c20"
      ],
      "stack_out": [
        "name#0",
        "0x000748656c6c6f2c20"
      ]
    },
    "171": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "174": {
      "op": "frame_dig 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%0#0",
        "name#0"
      ]
    },
    "176": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0"
      ]
    },
    "180": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "181": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "182": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "183": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat_result%0#0"
      ]
    },
    "188": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "191": {
      "op": "pushbytes 0x000121",
      "defined_out": [
        "0x000121",
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0",
        "0x000121"
      ]
    },
    "196": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%2#0",
        "expr_value_trimmed%3#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "201": {
      "op": "len",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "203": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat_result%1#0"
      ]
    },
    "208": {
      "op": "swap"
    },
    "209": {
      "retsub": true,
      "op": "retsub"
    },
    "210": {
      "subroutine": "test_cases.everything.contract.Everything.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "213": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "215": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "217": {
      "callsub": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "op": "callsub test_cases.everything.my_base.MyMiddleBase.calculate",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "220": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "224": {
      "op": "*",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "226": {
      "retsub": true,
      "op": "retsub"
    },
    "227": {
      "subroutine": "test_cases.everything.contract.Everything.close_out",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._remove_sender",
      "op": "callsub _remove_sender"
    },
    "230": {
      "retsub": true,
      "op": "retsub"
    },
    "231": {
      "subroutine": "test_cases.everything.contract.Everything._check_ban_list",
      "params": {},
      "block": "_check_ban_list",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "callsub": "test_cases.everything.contract.get_banned",
      "op": "callsub get_banned",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "236": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "237": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "238": {
      "retsub": true,
      "op": "retsub"
    },
    "239": {
      "subroutine": "test_cases.everything.contract.Everything._remove_sender",
      "params": {},
      "block": "_remove_sender",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "240": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "241": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "242": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "243": {
      "callsub": "test_cases.everything.contract.positive_one",
      "op": "callsub positive_one",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "247": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"counter\""
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "new_state_value%0#0"
      ]
    },
    "249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "253": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "254": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "255": {
      "op": "bz approval_program_bare_routing@10",
      "stack_out": []
    },
    "258": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "261": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)"
      ]
    },
    "267": {
      "op": "pushbytes 0xbd6099e5 // method \"register(string)void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)"
      ]
    },
    "273": {
      "op": "pushbytes 0x5d5c84c7 // method \"say_hello()string\"",
      "defined_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)"
      ]
    },
    "279": {
      "op": "pushbytes 0xfd07264e // method \"calculate(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)"
      ]
    },
    "285": {
      "op": "pushbytes 0x1658aa2f // method \"close_out()void\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)"
      ]
    },
    "291": {
      "op": "uncover 5",
      "stack_out": [
        "Method(create()void)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "Method(close_out()void)",
        "tmp%2#0"
      ]
    },
    "293": {
      "op": "match approval_program_create_route@3 approval_program_register_route@4 approval_program_say_hello_route@5 approval_program_calculate_route@6 approval_program_close_out_route@7",
      "stack_out": []
    },
    "305": {
      "block": "approval_program_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "306": {
      "block": "approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "307": {
      "block": "approval_program_close_out_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "309": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "CloseOut"
      ]
    },
    "311": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "312": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "313": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "315": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "316": {
      "op": "!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "317": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "318": {
      "callsub": "test_cases.everything.contract.Everything.close_out",
      "op": "callsub close_out"
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "325": {
      "block": "approval_program_calculate_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "327": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "332": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "333": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "334": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "335": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "338": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "341": {
      "callsub": "test_cases.everything.contract.Everything.calculate",
      "op": "callsub calculate",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "344": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "347": {
      "op": "log",
      "stack_out": []
    },
    "348": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "352": {
      "block": "approval_program_say_hello_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "354": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "355": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "359": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "360": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "361": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "362": {
      "callsub": "test_cases.everything.contract.Everything.say_hello",
      "op": "callsub say_hello",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "365": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "373": {
      "block": "approval_program_register_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "375": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "1",
        "tmp%7#0"
      ]
    },
    "377": {
      "op": "shl",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "378": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "3"
      ]
    },
    "380": {
      "op": "&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "381": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "382": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "384": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "385": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "386": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "387": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "390": {
      "callsub": "test_cases.everything.contract.Everything.register",
      "op": "callsub register",
      "stack_out": []
    },
    "393": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "397": {
      "block": "approval_program_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "399": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "401": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "402": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "405": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "406": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "407": {
      "callsub": "test_cases.everything.contract.Everything.create",
      "op": "callsub create"
    },
    "410": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "411": {
      "op": "b approval_program_after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router__@12"
    },
    "414": {
      "block": "approval_program_bare_routing@10",
      "stack_in": [],
      "op": "b approval_program_after_if_else@11"
    },
    "417": {
      "subroutine": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "420": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "423": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "425": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "426": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "427": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "428": {
      "retsub": true,
      "op": "retsub"
    },
    "429": {
      "subroutine": "test_cases.everything.my_base.MyBase.remember_creator",
      "params": {},
      "block": "remember_creator",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "431": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"creator\""
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ]
    },
    "441": {
      "op": "app_global_put",
      "stack_out": []
    },
    "442": {
      "retsub": true,
      "op": "retsub"
    }
  }
}