{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBW;AAAP;;;;ADKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACP;;;;AA8DO;AAAP;;;;AA/CC;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;;;;;;;;AA1BG;;;AACA;;;AACA;AAAe;AAAf;;AAER;;;;;;;AAEQ;;;AACG;;AAAwB;AAAxB;AAAX;;;AAAA;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAAA;;AAChC;;;AAAA;;;AACC;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;;AAAA;;;;;;;AACE;AAAV;AAAA;;AAAA;;AAER;;;;;;AAEQ;;;AACuC;AAAxB;AAAA;AAAA;AACZ;;;AAAA;;;AACQ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;;AAAA;AACG;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAmB;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAnB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AAER;;;;;;AAEY;;AAAA;;AAAA;;;AACe;AAAW;;AAAA;AAAX;AAAZ;AAAP;;;;AAIA;;;;;;;AAQO;;AAAiB;;;AAAjB;AAAP;;;;;AAIA;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;;AAAA;;;;;;;;AA9CR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;ACxBA;;;;;;AAE2B;;AAAA;AAAW;;AAAA;AAAX;AAAZ;AAAP;;;;AANe;;AAAf;;;;;;;;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2"
    },
    "6": {
      "op": "bytecblock \"counter\" \"name\" 0x151f7c75 \"Howdy stranger!\" \"Hello, \" 0xbd6099e5"
    },
    "55": {
      "op": "b block@0"
    },
    "58": {
      "block": "block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "bnz after_if_else@2",
      "stack_out": []
    },
    "63": {
      "op": "b call___init__@1"
    },
    "66": {
      "block": "call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.__init__",
      "op": "callsub __init__"
    },
    "69": {
      "op": "b after_if_else@2"
    },
    "72": {
      "block": "after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "subroutine": "test_cases.everything.my_base.multiplicative_identity",
      "params": {},
      "block": "multiplicative_identity",
      "stack_in": [],
      "op": "b multiplicative_identity_block@0"
    },
    "79": {
      "block": "multiplicative_identity_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "80": {
      "retsub": true,
      "op": "retsub"
    },
    "81": {
      "subroutine": "test_cases.everything.contract.get_banned",
      "params": {},
      "block": "get_banned",
      "stack_in": [],
      "op": "b get_banned_block@0"
    },
    "84": {
      "block": "get_banned_block@0",
      "stack_in": [],
      "op": "pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ],
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "118": {
      "retsub": true,
      "op": "retsub"
    },
    "119": {
      "subroutine": "test_cases.everything.contract.positive_one",
      "params": {},
      "block": "positive_one",
      "stack_in": [],
      "op": "b positive_one_block@0"
    },
    "122": {
      "block": "positive_one_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "123": {
      "retsub": true,
      "op": "retsub"
    },
    "124": {
      "subroutine": "test_cases.everything.contract.Everything.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "127": {
      "block": "create_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.create",
      "op": "callsub test_cases.everything.contract.Everything.create"
    },
    "130": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "subroutine": "test_cases.everything.contract.Everything.register[routing]",
      "params": {},
      "block": "register",
      "stack_in": [],
      "op": "b register_block@0"
    },
    "135": {
      "block": "register_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "138": {
      "callsub": "test_cases.everything.contract.Everything.register",
      "op": "callsub test_cases.everything.contract.Everything.register",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "142": {
      "op": "return",
      "stack_out": []
    },
    "143": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello[routing]",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "b say_hello_block@0"
    },
    "146": {
      "block": "say_hello_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.say_hello",
      "op": "callsub test_cases.everything.contract.Everything.say_hello",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "150": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": []
    },
    "154": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "subroutine": "test_cases.everything.contract.Everything.calculate[routing]",
      "params": {},
      "block": "calculate",
      "stack_in": [],
      "op": "b calculate_block@0"
    },
    "159": {
      "block": "calculate_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "162": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "165": {
      "callsub": "test_cases.everything.contract.Everything.calculate",
      "op": "callsub test_cases.everything.contract.Everything.calculate",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "169": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "172": {
      "op": "log",
      "stack_out": []
    },
    "173": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "174": {
      "op": "return",
      "stack_out": []
    },
    "175": {
      "subroutine": "test_cases.everything.contract.Everything.close_out[routing]",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "op": "b close_out_block@0"
    },
    "178": {
      "block": "close_out_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.close_out",
      "op": "callsub test_cases.everything.contract.Everything.close_out"
    },
    "181": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    },
    "183": {
      "subroutine": "test_cases.everything.contract.Everything.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "186": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "187": {
      "subroutine": "test_cases.everything.contract.Everything.create",
      "params": {},
      "block": "test_cases.everything.contract.Everything.create",
      "stack_in": [],
      "op": "b test_cases.everything.contract.Everything.create_block@0"
    },
    "190": {
      "block": "test_cases.everything.contract.Everything.create_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "193": {
      "callsub": "test_cases.everything.my_base.MyBase.remember_creator",
      "op": "callsub remember_creator"
    },
    "196": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "197": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "198": {
      "op": "app_global_put",
      "stack_out": []
    },
    "199": {
      "retsub": true,
      "op": "retsub"
    },
    "200": {
      "subroutine": "test_cases.everything.contract.Everything.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "test_cases.everything.contract.Everything.register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "203": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "204": {
      "op": "b test_cases.everything.contract.Everything.register_block@0"
    },
    "207": {
      "block": "test_cases.everything.contract.Everything.register_block@0",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "210": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "212": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "OptIn"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "214": {
      "op": "bz test_cases.everything.contract.Everything.register_after_if_else@4",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "217": {
      "op": "b test_cases.everything.contract.Everything.register_if_body@1"
    },
    "220": {
      "block": "test_cases.everything.contract.Everything.register_if_body@1",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "221": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "0"
      ]
    },
    "222": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "0",
        "\"name\""
      ]
    },
    "223": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "224": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "226": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "sender_name_existed#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_name_existed#0"
      ]
    },
    "228": {
      "op": "bnz test_cases.everything.contract.Everything.register_after_if_else@3",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "231": {
      "op": "b test_cases.everything.contract.Everything.register_if_body@2"
    },
    "234": {
      "block": "test_cases.everything.contract.Everything.register_if_body@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "235": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"counter\""
      ]
    },
    "236": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "237": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "238": {
      "callsub": "test_cases.everything.my_base.multiplicative_identity",
      "op": "callsub multiplicative_identity",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "241": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "242": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0",
        "\"counter\""
      ]
    },
    "243": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "\"counter\"",
        "tmp%3#0"
      ]
    },
    "245": {
      "op": "app_global_put",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "246": {
      "op": "b test_cases.everything.contract.Everything.register_after_if_else@3"
    },
    "249": {
      "block": "test_cases.everything.contract.Everything.register_after_if_else@3",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "b test_cases.everything.contract.Everything.register_after_if_else@4"
    },
    "252": {
      "block": "test_cases.everything.contract.Everything.register_after_if_else@4",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "253": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"name\""
      ]
    },
    "254": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"name\"",
        "name#0 (copy)"
      ]
    },
    "256": {
      "op": "app_local_put",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello",
      "params": {},
      "block": "test_cases.everything.contract.Everything.say_hello",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "261": {
      "op": "b test_cases.everything.contract.Everything.say_hello_block@0"
    },
    "264": {
      "block": "test_cases.everything.contract.Everything.say_hello_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "267": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "268": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "269": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "270": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "271": {
      "op": "bnz test_cases.everything.contract.Everything.say_hello_after_if_else@2",
      "stack_out": [
        "name#0"
      ]
    },
    "274": {
      "op": "b test_cases.everything.contract.Everything.say_hello_if_body@1"
    },
    "277": {
      "block": "test_cases.everything.contract.Everything.say_hello_if_body@1",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec_3 // \"Howdy stranger!\"",
      "defined_out": [
        "\"Howdy stranger!\""
      ],
      "stack_out": [
        "name#0",
        "\"Howdy stranger!\""
      ]
    },
    "278": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%0#0"
      ]
    },
    "279": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "280": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "283": {
      "op": "bytec_3 // \"Howdy stranger!\"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0",
        "\"Howdy stranger!\""
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "uncover 1"
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "block": "test_cases.everything.contract.Everything.say_hello_after_if_else@2",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec 4 // \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "290": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%1#0"
      ]
    },
    "291": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "292": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "295": {
      "op": "bytec 4 // \"Hello, \"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0",
        "\"Hello, \""
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0"
      ]
    },
    "298": {
      "op": "frame_dig 0",
      "defined_out": [
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0"
      ]
    },
    "300": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "name#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "name#0 (copy)"
      ]
    },
    "301": {
      "op": "len",
      "defined_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "total_length%0#0"
      ]
    },
    "302": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0"
      ]
    },
    "304": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "name#0",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0",
        "2"
      ]
    },
    "305": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "2",
        "total_length%0#0"
      ]
    },
    "307": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%0#0",
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "extract_to_end%0#0"
      ]
    },
    "308": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0"
      ]
    },
    "309": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "310": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "name#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "311": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "313": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "314": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "315": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "317": {
      "op": "substring3",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "318": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "319": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "len%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "320": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "321": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "322": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "325": {
      "op": "uncover 1",
      "stack_out": [
        "name#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "327": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "328": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "330": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "331": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "\"!\""
      ]
    },
    "334": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length%2#0"
      ]
    },
    "335": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "336": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "339": {
      "op": "pushbytes \"!\"",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length_uint16%2#0",
        "\"!\""
      ]
    },
    "342": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "343": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "344": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0",
        "total_length%2#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "total_length%2#0"
      ]
    },
    "345": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "total_length%2#0",
        "tmp%2#0"
      ]
    },
    "347": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "total_length%2#0",
        "tmp%2#0",
        "2"
      ]
    },
    "348": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "2",
        "total_length%2#0"
      ]
    },
    "350": {
      "op": "substring3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "extract_to_end%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "extract_to_end%2#0"
      ]
    },
    "351": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0"
      ]
    },
    "352": {
      "op": "dup",
      "defined_out": [
        "concat%1#0",
        "concat%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "353": {
      "op": "len",
      "defined_out": [
        "concat%1#0",
        "name#0",
        "total_length%3#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "total_length%3#0"
      ]
    },
    "354": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0"
      ]
    },
    "356": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "357": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0",
        "concat%1#0 (copy)",
        "2"
      ]
    },
    "358": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "concat%1#0 (copy)",
        "2",
        "total_length%3#0"
      ]
    },
    "360": {
      "op": "substring3",
      "defined_out": [
        "concat%1#0",
        "extract_to_end%3#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "extract_to_end%3#0"
      ]
    },
    "361": {
      "op": "len",
      "defined_out": [
        "concat%1#0",
        "len%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "len%1#0"
      ]
    },
    "362": {
      "op": "intc_0 // 1",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "len%1#0",
        "1"
      ]
    },
    "363": {
      "op": "/",
      "defined_out": [
        "concat%1#0",
        "div_floor%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "div_floor%1#0"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "365": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "368": {
      "op": "uncover 1",
      "stack_out": [
        "name#0",
        "as_u16_bytes%1#0",
        "concat%1#0"
      ]
    },
    "370": {
      "op": "intc_1 // 0",
      "stack_out": [
        "name#0",
        "as_u16_bytes%1#0",
        "concat%1#0",
        "0"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "0",
        "as_u16_bytes%1#0"
      ]
    },
    "373": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "374": {
      "op": "uncover 1"
    },
    "376": {
      "retsub": true,
      "op": "retsub"
    },
    "377": {
      "subroutine": "test_cases.everything.contract.Everything.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.contract.Everything.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "380": {
      "op": "b test_cases.everything.contract.Everything.calculate_block@0"
    },
    "383": {
      "block": "test_cases.everything.contract.Everything.calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "385": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "387": {
      "callsub": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "op": "callsub test_cases.everything.my_base.MyMiddleBase.calculate",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "390": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "391": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "b#0 (copy)"
      ]
    },
    "393": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "394": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "395": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "subroutine": "test_cases.everything.contract.Everything.close_out",
      "params": {},
      "block": "test_cases.everything.contract.Everything.close_out",
      "stack_in": [],
      "op": "b test_cases.everything.contract.Everything.close_out_block@0"
    },
    "400": {
      "block": "test_cases.everything.contract.Everything.close_out_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._remove_sender",
      "op": "callsub _remove_sender"
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    },
    "404": {
      "subroutine": "test_cases.everything.contract.Everything._check_ban_list",
      "params": {},
      "block": "_check_ban_list",
      "stack_in": [],
      "op": "b _check_ban_list_block@0"
    },
    "407": {
      "block": "_check_ban_list_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "409": {
      "callsub": "test_cases.everything.contract.get_banned",
      "op": "callsub get_banned",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "412": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "413": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "414": {
      "retsub": true,
      "op": "retsub"
    },
    "415": {
      "subroutine": "test_cases.everything.contract.Everything._remove_sender",
      "params": {},
      "block": "_remove_sender",
      "stack_in": [],
      "op": "b _remove_sender_block@0"
    },
    "418": {
      "block": "_remove_sender_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "419": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "421": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "422": {
      "callsub": "test_cases.everything.contract.positive_one",
      "op": "callsub positive_one",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "425": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "426": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%1#0",
        "\"counter\""
      ]
    },
    "427": {
      "op": "uncover 1",
      "stack_out": [
        "\"counter\"",
        "tmp%1#0"
      ]
    },
    "429": {
      "op": "app_global_put",
      "stack_out": []
    },
    "430": {
      "retsub": true,
      "op": "retsub"
    },
    "431": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "434": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "b approval_program_block@1"
    },
    "437": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "439": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "440": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "442": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "443": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "444": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "445": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "446": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "447": {
      "op": "intc_2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "448": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "450": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "452": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "454": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "456": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "458": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "460": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "462": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "464": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "466": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "468": {
      "op": "match approval_program_call_NoOp approval_program_create_NoOp approval_program_call_OptIn approval_program_create_OptIn approval_program_call_CloseOut approval_program_create_CloseOut approval_program_call_ClearState approval_program_create_ClearState approval_program_call_UpdateApplication approval_program_create_UpdateApplication approval_program_call_DeleteApplication approval_program_create_DeleteApplication",
      "stack_out": []
    },
    "494": {
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "497": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "approval_program_*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "498": {
      "block": "approval_program_create_DeleteApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "501": {
      "block": "approval_program_call_DeleteApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "504": {
      "block": "approval_program_create_UpdateApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "507": {
      "block": "approval_program_call_UpdateApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "510": {
      "block": "approval_program_create_ClearState",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "513": {
      "block": "approval_program_call_ClearState",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "516": {
      "block": "approval_program_create_CloseOut",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "519": {
      "block": "approval_program_call_CloseOut",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "522": {
      "op": "pushbytes 0x1658aa2f // method \"close_out()void\"",
      "defined_out": [
        "Method(close_out()void)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "Method(close_out()void)"
      ]
    },
    "528": {
      "op": "uncover 1",
      "stack_out": [
        "Method(close_out()void)",
        "tmp%8#0"
      ]
    },
    "530": {
      "op": "match approval_program_close_out_route@18",
      "stack_out": []
    },
    "534": {
      "op": "b approval_program_switch_case_default@19"
    },
    "537": {
      "block": "approval_program_switch_case_default@19",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@20"
    },
    "540": {
      "error": "this contract does not implement the given ABI method for call CloseOut",
      "block": "approval_program_switch_case_next@20",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call CloseOut"
    },
    "541": {
      "block": "approval_program_close_out_route@18",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.close_out[routing]",
      "op": "callsub close_out"
    },
    "544": {
      "op": "b approval_program_switch_case_next@20"
    },
    "547": {
      "block": "approval_program_create_OptIn",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "550": {
      "block": "approval_program_call_OptIn",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "553": {
      "op": "bytec 5 // method \"register(string)void\"",
      "defined_out": [
        "Method(register(string)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(register(string)void)"
      ]
    },
    "555": {
      "op": "uncover 1",
      "stack_out": [
        "Method(register(string)void)",
        "tmp%7#0"
      ]
    },
    "557": {
      "op": "match approval_program_register_route@13",
      "stack_out": []
    },
    "561": {
      "op": "b approval_program_switch_case_default@14"
    },
    "564": {
      "block": "approval_program_switch_case_default@14",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@15"
    },
    "567": {
      "error": "this contract does not implement the given ABI method for call OptIn",
      "block": "approval_program_switch_case_next@15",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call OptIn"
    },
    "568": {
      "block": "approval_program_register_route@13",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.register[routing]",
      "op": "callsub register"
    },
    "571": {
      "op": "b approval_program_switch_case_next@15"
    },
    "574": {
      "block": "approval_program_create_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "577": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create()void)"
      ]
    },
    "583": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create()void)",
        "tmp%6#0"
      ]
    },
    "585": {
      "op": "match approval_program_create_route@9",
      "stack_out": []
    },
    "589": {
      "op": "b approval_program_switch_case_default@10"
    },
    "592": {
      "block": "approval_program_switch_case_default@10",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@11"
    },
    "595": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "approval_program_switch_case_next@11",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "596": {
      "block": "approval_program_create_route@9",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.create[routing]",
      "op": "callsub create"
    },
    "599": {
      "op": "b approval_program_switch_case_next@11"
    },
    "602": {
      "block": "approval_program_call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "605": {
      "op": "bytec 5 // method \"register(string)void\"",
      "defined_out": [
        "Method(register(string)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(register(string)void)"
      ]
    },
    "607": {
      "op": "pushbytes 0x5d5c84c7 // method \"say_hello()string\"",
      "defined_out": [
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(register(string)void)",
        "Method(say_hello()string)"
      ]
    },
    "613": {
      "op": "pushbytes 0xfd07264e // method \"calculate(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)"
      ]
    },
    "619": {
      "op": "uncover 3",
      "stack_out": [
        "Method(register(string)void)",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "tmp%5#0"
      ]
    },
    "621": {
      "op": "match approval_program_register_route@3 approval_program_say_hello_route@4 approval_program_calculate_route@5",
      "stack_out": []
    },
    "629": {
      "op": "b approval_program_switch_case_default@6"
    },
    "632": {
      "block": "approval_program_switch_case_default@6",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@7"
    },
    "635": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "approval_program_switch_case_next@7",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "636": {
      "block": "approval_program_calculate_route@5",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.calculate[routing]",
      "op": "callsub calculate"
    },
    "639": {
      "op": "b approval_program_switch_case_next@7"
    },
    "642": {
      "block": "approval_program_say_hello_route@4",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.say_hello[routing]",
      "op": "callsub say_hello"
    },
    "645": {
      "op": "b approval_program_switch_case_next@7"
    },
    "648": {
      "block": "approval_program_register_route@3",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.register[routing]",
      "op": "callsub register"
    },
    "651": {
      "op": "b approval_program_switch_case_next@7"
    },
    "654": {
      "subroutine": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "657": {
      "op": "b test_cases.everything.my_base.MyMiddleBase.calculate_block@0"
    },
    "660": {
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "662": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "665": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "666": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "667": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    },
    "669": {
      "subroutine": "test_cases.everything.my_base.MyBase.remember_creator",
      "params": {},
      "block": "remember_creator",
      "stack_in": [],
      "op": "b remember_creator_block@0"
    },
    "672": {
      "block": "remember_creator_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"creator\""
      ]
    },
    "683": {
      "op": "uncover 1",
      "stack_out": [
        "\"creator\"",
        "tmp%0#0"
      ]
    },
    "685": {
      "op": "app_global_put",
      "stack_out": []
    },
    "686": {
      "retsub": true,
      "op": "retsub"
    }
  }
}