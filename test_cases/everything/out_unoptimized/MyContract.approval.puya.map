{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBW;AAAP;;;;ADKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACP;;;;AA8DO;AAAP;;;;AA/CC;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;;;;;;;;AA1BG;;;AACA;;;AACA;AAAe;AAAf;;AAER;;;;;;;AAEQ;;;AACG;;AAAwB;AAAxB;AAAX;;;AAAA;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAAA;;AAChC;;;AAAA;;;AACC;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;;AAAA;;;;;;;AACE;AAAV;AAAA;;AAAA;;AAER;;;;;;AAEQ;;;AACuC;AAAxB;AAAA;AAAA;AACZ;;;AAAA;;;AACQ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;;AAAA;AACG;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAmB;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAnB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AAER;;;;;;AAEY;;AAAA;;AAAA;;;AACe;AAAW;;AAAA;AAAX;AAAZ;AAAP;;;;AAIA;;;;;;;AAQO;;AAAiB;;;AAAjB;AAAP;;;;;AAIA;AAAA;AAAA;AAAA;AAAgB;;;AAAhB;AAAA;AAAA;;AAAA;;;;;;;;AA9CR;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;AA2BK;;;;;;AARA;;;;;;AAnBL;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAIK;;;;;;AA4BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtBA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AClCL;;;;;;AAE2B;;AAAA;AAAW;;AAAA;AAAX;AAAZ;AAAP;;;;AANe;;AAAf;;;;;;;;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock \"counter\" \"name\" 0x151f7c75 \"Howdy stranger!\" \"Hello, \""
    },
    "50": {
      "op": "b main_block@0"
    },
    "53": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "58": {
      "op": "b main_call___init__@1"
    },
    "61": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.__init__",
      "op": "callsub __init__"
    },
    "64": {
      "op": "b main_after_if_else@2"
    },
    "67": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "70": {
      "op": "return",
      "stack_out": []
    },
    "71": {
      "subroutine": "test_cases.everything.my_base.multiplicative_identity",
      "params": {},
      "block": "multiplicative_identity",
      "stack_in": [],
      "op": "b multiplicative_identity_block@0"
    },
    "74": {
      "block": "multiplicative_identity_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "75": {
      "retsub": true,
      "op": "retsub"
    },
    "76": {
      "subroutine": "test_cases.everything.contract.get_banned",
      "params": {},
      "block": "get_banned",
      "stack_in": [],
      "op": "b get_banned_block@0"
    },
    "79": {
      "block": "get_banned_block@0",
      "stack_in": [],
      "op": "pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ],
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "113": {
      "retsub": true,
      "op": "retsub"
    },
    "114": {
      "subroutine": "test_cases.everything.contract.positive_one",
      "params": {},
      "block": "positive_one",
      "stack_in": [],
      "op": "b positive_one_block@0"
    },
    "117": {
      "block": "positive_one_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "118": {
      "retsub": true,
      "op": "retsub"
    },
    "119": {
      "subroutine": "test_cases.everything.contract.Everything.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "122": {
      "block": "create_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.create",
      "op": "callsub test_cases.everything.contract.Everything.create"
    },
    "125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "126": {
      "op": "return",
      "stack_out": []
    },
    "127": {
      "subroutine": "test_cases.everything.contract.Everything.register[routing]",
      "params": {},
      "block": "register",
      "stack_in": [],
      "op": "b register_block@0"
    },
    "130": {
      "block": "register_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "133": {
      "callsub": "test_cases.everything.contract.Everything.register",
      "op": "callsub test_cases.everything.contract.Everything.register",
      "stack_out": []
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": []
    },
    "138": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello[routing]",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "b say_hello_block@0"
    },
    "141": {
      "block": "say_hello_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.say_hello",
      "op": "callsub test_cases.everything.contract.Everything.say_hello",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "144": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "148": {
      "op": "log",
      "stack_out": []
    },
    "149": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "150": {
      "op": "return",
      "stack_out": []
    },
    "151": {
      "subroutine": "test_cases.everything.contract.Everything.calculate[routing]",
      "params": {},
      "block": "calculate",
      "stack_in": [],
      "op": "b calculate_block@0"
    },
    "154": {
      "block": "calculate_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "160": {
      "callsub": "test_cases.everything.contract.Everything.calculate",
      "op": "callsub test_cases.everything.contract.Everything.calculate",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "163": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "subroutine": "test_cases.everything.contract.Everything.close_out[routing]",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "op": "b close_out_block@0"
    },
    "173": {
      "block": "close_out_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.close_out",
      "op": "callsub test_cases.everything.contract.Everything.close_out"
    },
    "176": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "subroutine": "test_cases.everything.contract.Everything.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "181": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "182": {
      "subroutine": "test_cases.everything.contract.Everything.create",
      "params": {},
      "block": "test_cases.everything.contract.Everything.create",
      "stack_in": [],
      "op": "b test_cases.everything.contract.Everything.create_block@0"
    },
    "185": {
      "block": "test_cases.everything.contract.Everything.create_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "188": {
      "callsub": "test_cases.everything.my_base.MyBase.remember_creator",
      "op": "callsub remember_creator"
    },
    "191": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "192": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "194": {
      "retsub": true,
      "op": "retsub"
    },
    "195": {
      "subroutine": "test_cases.everything.contract.Everything.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "test_cases.everything.contract.Everything.register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "199": {
      "op": "b test_cases.everything.contract.Everything.register_block@0"
    },
    "202": {
      "block": "test_cases.everything.contract.Everything.register_block@0",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "205": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "OptIn"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "bz test_cases.everything.contract.Everything.register_after_if_else@4",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "212": {
      "op": "b test_cases.everything.contract.Everything.register_if_body@1"
    },
    "215": {
      "block": "test_cases.everything.contract.Everything.register_if_body@1",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "0"
      ]
    },
    "217": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "0",
        "\"name\""
      ]
    },
    "218": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "219": {
      "op": "cover 1",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "221": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "sender_name_existed#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_name_existed#0"
      ]
    },
    "223": {
      "op": "bnz test_cases.everything.contract.Everything.register_after_if_else@3",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "226": {
      "op": "b test_cases.everything.contract.Everything.register_if_body@2"
    },
    "229": {
      "block": "test_cases.everything.contract.Everything.register_if_body@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "230": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"counter\""
      ]
    },
    "231": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "232": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "233": {
      "callsub": "test_cases.everything.my_base.multiplicative_identity",
      "op": "callsub multiplicative_identity",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "236": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "237": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0",
        "\"counter\""
      ]
    },
    "238": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_value%0#0",
        "\"counter\"",
        "tmp%3#0"
      ]
    },
    "240": {
      "op": "app_global_put",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "241": {
      "op": "b test_cases.everything.contract.Everything.register_after_if_else@3"
    },
    "244": {
      "block": "test_cases.everything.contract.Everything.register_after_if_else@3",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "b test_cases.everything.contract.Everything.register_after_if_else@4"
    },
    "247": {
      "block": "test_cases.everything.contract.Everything.register_after_if_else@4",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "248": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"name\""
      ]
    },
    "249": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"name\"",
        "name#0 (copy)"
      ]
    },
    "251": {
      "op": "app_local_put",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "252": {
      "retsub": true,
      "op": "retsub"
    },
    "253": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello",
      "params": {},
      "block": "test_cases.everything.contract.Everything.say_hello",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "256": {
      "op": "b test_cases.everything.contract.Everything.say_hello_block@0"
    },
    "259": {
      "block": "test_cases.everything.contract.Everything.say_hello_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._check_ban_list",
      "op": "callsub _check_ban_list"
    },
    "262": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "264": {
      "op": "bytec_1 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "265": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "266": {
      "op": "bnz test_cases.everything.contract.Everything.say_hello_after_if_else@2",
      "stack_out": [
        "name#0"
      ]
    },
    "269": {
      "op": "b test_cases.everything.contract.Everything.say_hello_if_body@1"
    },
    "272": {
      "block": "test_cases.everything.contract.Everything.say_hello_if_body@1",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec_3 // \"Howdy stranger!\"",
      "defined_out": [
        "\"Howdy stranger!\""
      ],
      "stack_out": [
        "name#0",
        "\"Howdy stranger!\""
      ]
    },
    "273": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%0#0"
      ]
    },
    "274": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "275": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "278": {
      "op": "bytec_3 // \"Howdy stranger!\"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%0#0",
        "\"Howdy stranger!\""
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "280": {
      "op": "uncover 1"
    },
    "282": {
      "retsub": true,
      "op": "retsub"
    },
    "283": {
      "block": "test_cases.everything.contract.Everything.say_hello_after_if_else@2",
      "stack_in": [
        "name#0"
      ],
      "op": "bytec 4 // \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length%1#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "287": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "290": {
      "op": "bytec 4 // \"Hello, \"",
      "stack_out": [
        "name#0",
        "aggregate%length_uint16%1#0",
        "\"Hello, \""
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0"
      ]
    },
    "293": {
      "op": "frame_dig 0",
      "defined_out": [
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0"
      ]
    },
    "295": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "name#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "name#0 (copy)"
      ]
    },
    "296": {
      "op": "len",
      "defined_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "total_length%0#0"
      ]
    },
    "297": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0"
      ]
    },
    "299": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "name#0",
        "tmp%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "total_length%0#0",
        "name#0",
        "2"
      ]
    },
    "300": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "name#0",
        "2",
        "total_length%0#0"
      ]
    },
    "302": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%0#0",
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0",
        "extract_to_end%0#0"
      ]
    },
    "303": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "305": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "name#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "306": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "308": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "309": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "310": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "312": {
      "op": "substring3",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "313": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "314": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "len%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "315": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "316": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "317": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "320": {
      "op": "uncover 1",
      "stack_out": [
        "name#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "323": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "325": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "326": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "\"!\""
      ]
    },
    "329": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length%2#0"
      ]
    },
    "330": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "331": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "as_Encoded(len+utf8[])%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "334": {
      "op": "pushbytes \"!\"",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "aggregate%length_uint16%2#0",
        "\"!\""
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "338": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "339": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "name#0",
        "tmp%2#0",
        "total_length%2#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "total_length%2#0"
      ]
    },
    "340": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "total_length%2#0",
        "tmp%2#0"
      ]
    },
    "342": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "total_length%2#0",
        "tmp%2#0",
        "2"
      ]
    },
    "343": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "2",
        "total_length%2#0"
      ]
    },
    "345": {
      "op": "substring3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "extract_to_end%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%0#0",
        "extract_to_end%2#0"
      ]
    },
    "346": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0"
      ]
    },
    "347": {
      "op": "dup",
      "defined_out": [
        "concat%1#0",
        "concat%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "348": {
      "op": "len",
      "defined_out": [
        "concat%1#0",
        "name#0",
        "total_length%3#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "total_length%3#0"
      ]
    },
    "349": {
      "op": "cover 1",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0"
      ]
    },
    "351": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "352": {
      "op": "intc_2 // 2",
      "stack_out": [
        "name#0",
        "total_length%3#0",
        "concat%1#0",
        "concat%1#0 (copy)",
        "2"
      ]
    },
    "353": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "concat%1#0 (copy)",
        "2",
        "total_length%3#0"
      ]
    },
    "355": {
      "op": "substring3",
      "defined_out": [
        "concat%1#0",
        "extract_to_end%3#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "extract_to_end%3#0"
      ]
    },
    "356": {
      "op": "len",
      "defined_out": [
        "concat%1#0",
        "len%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "len%1#0"
      ]
    },
    "357": {
      "op": "intc_1 // 1",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "len%1#0",
        "1"
      ]
    },
    "358": {
      "op": "/",
      "defined_out": [
        "concat%1#0",
        "div_floor%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "div_floor%1#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "360": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "363": {
      "op": "uncover 1",
      "stack_out": [
        "name#0",
        "as_u16_bytes%1#0",
        "concat%1#0"
      ]
    },
    "365": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "as_u16_bytes%1#0",
        "concat%1#0",
        "0"
      ]
    },
    "366": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "concat%1#0",
        "0",
        "as_u16_bytes%1#0"
      ]
    },
    "368": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "369": {
      "op": "uncover 1"
    },
    "371": {
      "retsub": true,
      "op": "retsub"
    },
    "372": {
      "subroutine": "test_cases.everything.contract.Everything.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.contract.Everything.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "375": {
      "op": "b test_cases.everything.contract.Everything.calculate_block@0"
    },
    "378": {
      "block": "test_cases.everything.contract.Everything.calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "380": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "382": {
      "callsub": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "op": "callsub test_cases.everything.my_base.MyMiddleBase.calculate",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "385": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "386": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "b#0 (copy)"
      ]
    },
    "388": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "389": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "390": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "391": {
      "retsub": true,
      "op": "retsub"
    },
    "392": {
      "subroutine": "test_cases.everything.contract.Everything.close_out",
      "params": {},
      "block": "test_cases.everything.contract.Everything.close_out",
      "stack_in": [],
      "op": "b test_cases.everything.contract.Everything.close_out_block@0"
    },
    "395": {
      "block": "test_cases.everything.contract.Everything.close_out_block@0",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything._remove_sender",
      "op": "callsub _remove_sender"
    },
    "398": {
      "retsub": true,
      "op": "retsub"
    },
    "399": {
      "subroutine": "test_cases.everything.contract.Everything._check_ban_list",
      "params": {},
      "block": "_check_ban_list",
      "stack_in": [],
      "op": "b _check_ban_list_block@0"
    },
    "402": {
      "block": "_check_ban_list_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "callsub": "test_cases.everything.contract.get_banned",
      "op": "callsub get_banned",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "407": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "408": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "409": {
      "retsub": true,
      "op": "retsub"
    },
    "410": {
      "subroutine": "test_cases.everything.contract.Everything._remove_sender",
      "params": {},
      "block": "_remove_sender",
      "stack_in": [],
      "op": "b _remove_sender_block@0"
    },
    "413": {
      "block": "_remove_sender_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "414": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "416": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "417": {
      "callsub": "test_cases.everything.contract.positive_one",
      "op": "callsub positive_one",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "421": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%1#0",
        "\"counter\""
      ]
    },
    "422": {
      "op": "uncover 1",
      "stack_out": [
        "\"counter\"",
        "tmp%1#0"
      ]
    },
    "424": {
      "op": "app_global_put",
      "stack_out": []
    },
    "425": {
      "retsub": true,
      "op": "retsub"
    },
    "426": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "429": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "b approval_program_block@1"
    },
    "432": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "435": {
      "op": "pushbytes 0xbd6099e5 // method \"register(string)void\"",
      "defined_out": [
        "Method(register(string)void)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(register(string)void)"
      ]
    },
    "441": {
      "op": "pushbytes 0x1658aa2f // method \"close_out()void\"",
      "defined_out": [
        "Method(close_out()void)",
        "Method(register(string)void)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(register(string)void)",
        "Method(close_out()void)"
      ]
    },
    "447": {
      "op": "uncover 2",
      "stack_out": [
        "Method(register(string)void)",
        "Method(close_out()void)",
        "tmp%0#1"
      ]
    },
    "449": {
      "op": "match approval_program_register_route@2 approval_program_close_out_route@3",
      "stack_out": []
    },
    "455": {
      "op": "b approval_program_switch_case_next@4"
    },
    "458": {
      "block": "approval_program_switch_case_next@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "460": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "461": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "462": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "463": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "465": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "466": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "467": {
      "op": "bz approval_program_create_NoOp@9",
      "stack_out": []
    },
    "470": {
      "op": "b approval_program_call_NoOp@5"
    },
    "473": {
      "block": "approval_program_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "476": {
      "op": "pushbytes 0x5d5c84c7 // method \"say_hello()string\"",
      "defined_out": [
        "Method(say_hello()string)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "Method(say_hello()string)"
      ]
    },
    "482": {
      "op": "pushbytes 0xfd07264e // method \"calculate(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(say_hello()string)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)"
      ]
    },
    "488": {
      "op": "uncover 2",
      "stack_out": [
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "tmp%16#0"
      ]
    },
    "490": {
      "op": "match approval_program_say_hello_route@6 approval_program_calculate_route@7",
      "stack_out": []
    },
    "496": {
      "op": "b approval_program_switch_case_next@8"
    },
    "499": {
      "block": "approval_program_switch_case_next@8",
      "stack_in": [],
      "op": "b approval_program_after_if_else@12"
    },
    "502": {
      "block": "approval_program_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "503": {
      "block": "approval_program_calculate_route@7",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.calculate[routing]",
      "op": "callsub calculate"
    },
    "506": {
      "op": "b approval_program_switch_case_next@8"
    },
    "509": {
      "block": "approval_program_say_hello_route@6",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.say_hello[routing]",
      "op": "callsub say_hello"
    },
    "512": {
      "op": "b approval_program_switch_case_next@8"
    },
    "515": {
      "block": "approval_program_create_NoOp@9",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "518": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "Method(create()void)"
      ]
    },
    "524": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create()void)",
        "tmp%17#0"
      ]
    },
    "526": {
      "op": "match approval_program_create_route@10",
      "stack_out": []
    },
    "530": {
      "op": "b approval_program_switch_case_next@11"
    },
    "533": {
      "block": "approval_program_switch_case_next@11",
      "stack_in": [],
      "op": "b approval_program_after_if_else@12"
    },
    "536": {
      "block": "approval_program_create_route@10",
      "stack_in": [],
      "callsub": "test_cases.everything.contract.Everything.create[routing]",
      "op": "callsub create"
    },
    "539": {
      "op": "b approval_program_switch_case_next@11"
    },
    "542": {
      "block": "approval_program_close_out_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "544": {
      "op": "intc_2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "CloseOut"
      ]
    },
    "545": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "546": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "548": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "549": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "550": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "551": {
      "error": "OnCompletion must be CloseOut && can only call when not creating",
      "op": "assert // OnCompletion must be CloseOut && can only call when not creating",
      "stack_out": []
    },
    "552": {
      "callsub": "test_cases.everything.contract.Everything.close_out[routing]",
      "op": "callsub close_out"
    },
    "555": {
      "op": "b approval_program_switch_case_next@4"
    },
    "558": {
      "block": "approval_program_register_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "561": {
      "op": "uncover 1",
      "stack_out": [
        "1",
        "tmp%1#0"
      ]
    },
    "563": {
      "op": "shl",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "564": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "3"
      ]
    },
    "566": {
      "op": "&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "567": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "569": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "0"
      ]
    },
    "570": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "571": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "572": {
      "error": "OnCompletion must be one of NoOp, OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be one of NoOp, OptIn && can only call when not creating",
      "stack_out": []
    },
    "573": {
      "callsub": "test_cases.everything.contract.Everything.register[routing]",
      "op": "callsub register"
    },
    "576": {
      "op": "b approval_program_switch_case_next@4"
    },
    "579": {
      "subroutine": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "582": {
      "op": "b test_cases.everything.my_base.MyMiddleBase.calculate_block@0"
    },
    "585": {
      "block": "test_cases.everything.my_base.MyMiddleBase.calculate_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "587": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "590": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "591": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "592": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "593": {
      "retsub": true,
      "op": "retsub"
    },
    "594": {
      "subroutine": "test_cases.everything.my_base.MyBase.remember_creator",
      "params": {},
      "block": "remember_creator",
      "stack_in": [],
      "op": "b remember_creator_block@0"
    },
    "597": {
      "block": "remember_creator_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "599": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"creator\""
      ]
    },
    "608": {
      "op": "uncover 1",
      "stack_out": [
        "\"creator\"",
        "tmp%0#0"
      ]
    },
    "610": {
      "op": "app_global_put",
      "stack_out": []
    },
    "611": {
      "retsub": true,
      "op": "retsub"
    }
  }
}