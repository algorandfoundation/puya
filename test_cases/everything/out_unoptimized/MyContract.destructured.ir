contract test_cases.everything.contract.Everything:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L38
                test_cases.everything.contract.Everything.__init__()
                goto block@2
            block@2: // after_if_else_L38
                let tmp%0#0: bool = test_cases.everything.contract.Everything.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.everything.contract.Everything.__puya_arc4_router__() -> bool:
            block@0: // L37
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@9
            block@1: // abi_routing_L37
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create()void" => block@2, method "register(string)void" => block@3, method "say_hello()string" => block@4, method "calculate(uint64,uint64)uint64" => block@5, method "close_out()void" => block@6, * => block@7}
            block@2: // create_route_L41
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (== tmp%5#0 0u)
                (assert tmp%6#0) // is creating
                test_cases.everything.contract.Everything.create()
                return 1u
            block@3: // register_route_L47
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: uint64 = (shl 1u tmp%7#0)
                let tmp%9#0: uint64 = (& tmp%8#0 3u)
                (assert tmp%9#0) // OnCompletion is one of NoOp, OptIn
                let tmp%10#0: uint64 = (txn ApplicationID)
                let tmp%11#0: bool = (!= tmp%10#0 0u)
                (assert tmp%11#0) // is not creating
                let tmp%12#0: bytes = (txna ApplicationArgs 1)
                test_cases.everything.contract.Everything.register(tmp%12#0)
                return 1u
            block@4: // say_hello_route_L56
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (== tmp%13#0 NoOp)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (!= tmp%15#0 0u)
                (assert tmp%16#0) // is not creating
                let tmp%17#0: bytes = test_cases.everything.contract.Everything.say_hello()
                let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
                (log tmp%18#0)
                return 1u
            block@5: // calculate_route_L64
                let tmp%19#0: uint64 = (txn OnCompletion)
                let tmp%20#0: bool = (== tmp%19#0 NoOp)
                (assert tmp%20#0) // OnCompletion is NoOp
                let tmp%21#0: uint64 = (txn ApplicationID)
                let tmp%22#0: bool = (!= tmp%21#0 0u)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                let tmp%24#0: bytes = (txna ApplicationArgs 2)
                let tmp%25#0: bytes = test_cases.everything.contract.Everything.calculate(tmp%23#0, tmp%24#0)
                let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
                (log tmp%26#0)
                return 1u
            block@6: // close_out_route_L69
                let tmp%27#0: uint64 = (txn OnCompletion)
                let tmp%28#0: bool = (== tmp%27#0 CloseOut)
                (assert tmp%28#0) // OnCompletion is CloseOut
                let tmp%29#0: uint64 = (txn ApplicationID)
                let tmp%30#0: bool = (!= tmp%29#0 0u)
                (assert tmp%30#0) // is not creating
                test_cases.everything.contract.Everything.close_out()
                return 1u
            block@7: // switch_case_default_L37
                goto block@8
            block@8: // switch_case_next_L37
                goto block@10
            block@9: // bare_routing_L37
                goto block@10
            block@10: // after_if_else_L37
                return 0u
        
        subroutine test_cases.everything.contract.Everything.create() -> void:
            block@0: // L41
                test_cases.everything.contract.Everything._check_ban_list()
                test_cases.everything.my_base.MyBase.remember_creator()
                (app_global_put "counter" 0u)
                return 
        
        subroutine test_cases.everything.contract.Everything._check_ban_list() -> void:
            block@0: // L77
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = test_cases.everything.contract.get_banned()
                let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // You are banned, goodbye
                return 
        
        subroutine test_cases.everything.contract.get_banned() -> bytes:
            block@0: // L23
                return addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
        
        subroutine test_cases.everything.my_base.MyBase.remember_creator() -> void:
            block@0: // L7
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "creator" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.Everything.register(name: bytes) -> void:
            block@0: // L47
                test_cases.everything.contract.Everything._check_ban_list()
                let tmp%0#0: uint64 = (txn OnCompletion)
                let tmp%1#0: bool = (== tmp%0#0 OptIn)
                goto tmp%1#0 ? block@1 : block@4
            block@1: // if_body_L51
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex 0u 0u "name")
                let sender_name_existed#0: bool = maybe_exists%0#0
                goto sender_name_existed#0 ? block@3 : block@2
            block@2: // if_body_L53
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%1#0) // check self.counter exists
                let tmp%2#0: uint64 = test_cases.everything.my_base.multiplicative_identity()
                let new_state_value%0#0: uint64 = (+ maybe_value%1#0 tmp%2#0)
                (app_global_put "counter" new_state_value%0#0)
                goto block@3
            block@3: // after_if_else_L52
                goto block@4
            block@4: // after_if_else_L50
                (app_local_put 0u "name" name#0)
                return 
        
        subroutine test_cases.everything.my_base.multiplicative_identity() -> uint64:
            block@0: // L18
                return 1u
        
        subroutine test_cases.everything.contract.Everything.say_hello() -> bytes:
            block@0: // L56
                test_cases.everything.contract.Everything._check_ban_list()
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex 0u 0u "name")
                let name#0: bytes = maybe_value%0#0
                let exists#0: bool = maybe_exists%0#0
                goto exists#0 ? block@2 : block@1
            block@1: // if_body_L61
                let length%0#0: uint64 = (len "Howdy stranger!")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Howdy stranger!")
                return encoded_value%0#0
            block@2: // after_if_else_L60
                let length%1#0: uint64 = (len "Hello, ")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "Hello, ")
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) encoded_value%1#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) name#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%2#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
                let length%2#0: uint64 = (len "!")
                let as_bytes%3#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "!")
                let expr_value_trimmed%3#0: bytes = ((extract 2 0) encoded_value%2#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%2#0 expr_value_trimmed%3#0)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let as_bytes%4#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%4#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                return concat_result%1#0
        
        subroutine test_cases.everything.contract.Everything.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L64
                let c#0: bytes = test_cases.everything.my_base.MyMiddleBase.calculate(a#0, b#0)
                let tmp%0#0: uint64 = (btoi c#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let to_encode%0#0: uint64 = (* tmp%0#0 tmp%1#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                return val_as_bytes%0#0
        
        subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L13
                let tmp%0#0: uint64 = (btoi a#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let to_encode%0#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                return val_as_bytes%0#0
        
        subroutine test_cases.everything.contract.Everything.close_out() -> void:
            block@0: // L69
                test_cases.everything.contract.Everything._remove_sender()
                return 
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L81
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%0#0) // check self.counter exists
                let tmp%0#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%0#0: uint64 = (- maybe_value%0#0 tmp%0#0)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L86
                return 1u
        
        subroutine test_cases.everything.contract.Everything.__init__() -> void:
            block@0: // L38
                return 
    
    program clear-state:
        subroutine test_cases.everything.contract.Everything.clear_state_program() -> bool:
            block@0: // L73
                test_cases.everything.contract.Everything._remove_sender()
                return 1u
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L81
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%0#0) // check self.counter exists
                let tmp%0#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%0#0: uint64 = (- maybe_value%0#0 tmp%0#0)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L86
                return 1u