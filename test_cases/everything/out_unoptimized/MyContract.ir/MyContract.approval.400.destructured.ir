main test_cases.everything.contract.Everything.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.everything.contract.Everything.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.everything.my_base.multiplicative_identity() -> uint64:
    block@0: // L18
        return 1u

subroutine test_cases.everything.contract.get_banned() -> account:
    block@0: // L23
        return addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA

subroutine test_cases.everything.contract.positive_one() -> uint64:
    block@0: // L86
        return 1u

subroutine test_cases.everything.contract.Everything.create[routing]() -> void:
    block@0: // L41
        test_cases.everything.contract.Everything.create()
        exit 1u

subroutine test_cases.everything.contract.Everything.register[routing]() -> void:
    block@0: // L47
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        test_cases.everything.contract.Everything.register(reinterpret_Encoded(len+utf8[])%0#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.say_hello[routing]() -> void:
    block@0: // L56
        let tmp%0#0: Encoded(len+utf8[]) = test_cases.everything.contract.Everything.say_hello()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.calculate[routing]() -> void:
    block@0: // L64
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: Encoded(uint64) = test_cases.everything.contract.Everything.calculate(reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.close_out[routing]() -> void:
    block@0: // L69
        test_cases.everything.contract.Everything.close_out()
        exit 1u

subroutine test_cases.everything.contract.Everything.__init__() -> void:
    block@0: // L38
        return 

subroutine test_cases.everything.contract.Everything.create() -> void:
    block@0: // L41
        test_cases.everything.contract.Everything._check_ban_list()
        test_cases.everything.my_base.MyBase.remember_creator()
        (app_global_put "counter" 0u)
        return 

subroutine test_cases.everything.contract.Everything.register(name: Encoded(len+utf8[])) -> void:
    block@0: // L47
        test_cases.everything.contract.Everything._check_ban_list()
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 OptIn)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // if_body_L51
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex 0u 0u "name")
        let sender_name_existed#0: bool = maybe_exists%0#0
        goto sender_name_existed#0 ? block@3 : block@2
    block@2: // if_body_L53
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%1#0) // check self.counter exists
        let tmp%2#0: uint64 = test_cases.everything.my_base.multiplicative_identity()
        let tmp%3#0: uint64 = (+ maybe_value%1#0 tmp%2#0)
        (app_global_put "counter" tmp%3#0)
        goto block@3
    block@3: // after_if_else_L52
        goto block@4
    block@4: // after_if_else_L50
        (app_local_put 0u "name" name#0)
        return 

subroutine test_cases.everything.contract.Everything.say_hello() -> Encoded(len+utf8[]):
    block@0: // L56
        test_cases.everything.contract.Everything._check_ban_list()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex 0u 0u "name")
        let name#0: Encoded(len+utf8[]) = maybe_value%0#0
        let exists#0: bool = maybe_exists%0#0
        goto exists#0 ? block@2 : block@1
    block@1: // if_body_L61
        let aggregate%length%0#0: uint64 = (len "Howdy stranger!")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Howdy stranger!")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        return tmp%0#0
    block@2: // after_if_else_L60
        let aggregate%length%1#0: uint64 = (len "Hello, ")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello, ")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let total_length%0#0: uint64 = (len name#0)
        let extract_to_end%0#0: bytes = (substring3 name#0 2u total_length%0#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%1#0 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%0#0)
        let extract_to_end%1#0: bytes = (substring3 concat%0#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = replace%0#0
        let aggregate%length%2#0: uint64 = (len "!")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "!")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let total_length%2#0: uint64 = (len tmp%2#0)
        let extract_to_end%2#0: bytes = (substring3 tmp%2#0 2u total_length%2#0)
        let concat%1#0: Encoded(len+utf8[]) = (concat as_Encoded(len+utf8[])%0#0 extract_to_end%2#0) // on error: max array length exceeded
        let total_length%3#0: uint64 = (len concat%1#0)
        let extract_to_end%3#0: bytes = (substring3 concat%1#0 2u total_length%3#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = replace%1#0
        return as_Encoded(len+utf8[])%1#0

subroutine test_cases.everything.contract.Everything.calculate(a: Encoded(uint64), b: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L64
        let tmp%0#0: Encoded(uint64) = test_cases.everything.my_base.MyMiddleBase.calculate(a#0, b#0)
        let c#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi c#0)
        let tmp%2#0: uint64 = (btoi b#0)
        let tmp%3#0: uint64 = (* tmp%1#0 tmp%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        return tmp%4#0

subroutine test_cases.everything.contract.Everything.close_out() -> void:
    block@0: // L69
        test_cases.everything.contract.Everything._remove_sender()
        return 

subroutine test_cases.everything.contract.Everything._check_ban_list() -> void:
    block@0: // L77
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: account = test_cases.everything.contract.get_banned()
        let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // You are banned, goodbye
        return 

subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
    block@0: // L81
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%0#0: uint64 = test_cases.everything.contract.positive_one()
        let tmp%1#0: uint64 = (- maybe_value%0#0 tmp%0#0)
        (app_global_put "counter" tmp%1#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L37
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@8, 2u => block@12, 3u => block@16, 4u => block@17, 5u => block@21, 6u => block@22, 7u => block@23, 8u => block@24, 9u => block@25, 10u => block@26, 11u => block@27, * => block@28}
    block@2: // switch_case_0_L37
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "register(string)void" => block@3, method "say_hello()string" => block@4, method "calculate(uint64,uint64)uint64" => block@5, * => block@6}
    block@3: // register_route_L47
        test_cases.everything.contract.Everything.register[routing]()
        goto block@7
    block@4: // say_hello_route_L56
        test_cases.everything.contract.Everything.say_hello[routing]()
        goto block@7
    block@5: // calculate_route_L64
        test_cases.everything.contract.Everything.calculate[routing]()
        goto block@7
    block@6: // switch_case_default_L37
        goto block@7
    block@7: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L37
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create()void" => block@9, * => block@10}
    block@9: // create_route_L41
        test_cases.everything.contract.Everything.create[routing]()
        goto block@11
    block@10: // switch_case_default_L37
        goto block@11
    block@11: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L37
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "register(string)void" => block@13, * => block@14}
    block@13: // register_route_L47
        test_cases.everything.contract.Everything.register[routing]()
        goto block@15
    block@14: // switch_case_default_L37
        goto block@15
    block@15: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call OptIn
    block@16: // switch_case_3_L37
        goto block@28
    block@17: // switch_case_4_L37
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "close_out()void" => block@18, * => block@19}
    block@18: // close_out_route_L69
        test_cases.everything.contract.Everything.close_out[routing]()
        goto block@20
    block@19: // switch_case_default_L37
        goto block@20
    block@20: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call CloseOut
    block@21: // switch_case_5_L37
        goto block@28
    block@22: // switch_case_6_L37
        goto block@28
    block@23: // switch_case_7_L37
        goto block@28
    block@24: // switch_case_8_L37
        goto block@28
    block@25: // switch_case_9_L37
        goto block@28
    block@26: // switch_case_10_L37
        goto block@28
    block@27: // switch_case_11_L37
        goto block@28
    block@28: // switch_case_default_L37
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@29: // after_inlined_test_cases.everything.contract.Everything.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: Encoded(uint64), b: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L13
        let tmp%0#0: uint64 = (btoi a#0)
        let tmp%1#0: uint64 = (btoi b#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        return tmp%3#0

subroutine test_cases.everything.my_base.MyBase.remember_creator() -> void:
    block@0: // L7
        let tmp%0#0: account = (txn Sender)
        (app_global_put "creator" tmp%0#0)
        return 