#pragma version 10

test_cases.everything.contract.Everything.approval_program:
    intcblock 1 0
    bytecblock "counter" "name" 0x151f7c75
    callsub __puya_arc4_router__
    return


// test_cases.everything.contract.Everything.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@10
    pushbytess 0x4c5c61ba 0xbd6099e5 0x5d5c84c7 0xfd07264e 0x1658aa2f // method "create()void", method "register(string)void", method "say_hello()string", method "calculate(uint64,uint64)uint64", method "close_out()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___register_route@3 __puya_arc4_router___say_hello_route@4 __puya_arc4_router___calculate_route@5 __puya_arc4_router___close_out_route@6
    intc_1 // 0
    retsub

__puya_arc4_router___create_route@2:
    // everything/contract.py:41
    // @abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    callsub create
    intc_0 // 1
    retsub

__puya_arc4_router___register_route@3:
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is one of NoOp, OptIn
    txn ApplicationID
    assert // is not creating
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txna ApplicationArgs 1
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub register
    intc_0 // 1
    retsub

__puya_arc4_router___say_hello_route@4:
    // everything/contract.py:56
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub say_hello
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___calculate_route@5:
    // everything/contract.py:64
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // everything/contract.py:64
    // @abimethod
    callsub calculate
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___close_out_route@6:
    // everything/contract.py:69
    // @abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is CloseOut
    txn ApplicationID
    assert // is not creating
    callsub close_out
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@10:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    intc_1 // 0
    retsub


// test_cases.everything.contract.Everything.create() -> void:
create:
    // everything/contract.py:41-42
    // @abimethod(create="require")
    // def create(self) -> None:
    proto 0 0
    // everything/contract.py:43
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:44
    // self.remember_creator()
    callsub remember_creator
    // everything/contract.py:45
    // self.counter = UInt64(ZERO)
    bytec_0 // "counter"
    intc_1 // 0
    app_global_put
    retsub


// test_cases.everything.contract.Everything._check_ban_list() -> void:
_check_ban_list:
    // everything/contract.py:77-78
    // @subroutine
    // def _check_ban_list(self) -> None:
    proto 0 0
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    txn Sender
    callsub get_banned
    !=
    assert // You are banned, goodbye
    retsub


// test_cases.everything.contract.get_banned() -> bytes:
get_banned:
    // everything/contract.py:23-24
    // @subroutine
    // def get_banned() -> Account:
    proto 0 1
    // everything/contract.py:25
    // addr = Account(BANNED)
    pushbytes base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // everything/contract.py:26
    // return addr
    retsub


// test_cases.everything.my_base.MyBase.remember_creator() -> void:
remember_creator:
    // everything/my_base.py:7-8
    // @subroutine
    // def remember_creator(self) -> None:
    proto 0 0
    // everything/my_base.py:9
    // self.creator = op.Txn.sender
    pushbytes "creator"
    txn Sender
    app_global_put
    retsub


// test_cases.everything.contract.Everything.register(name: bytes) -> void:
register:
    // everything/contract.py:47-48
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def register(self, name: String) -> None:
    proto 1 0
    // everything/contract.py:49
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:50
    // if op.Txn.on_completion == OnCompleteAction.OptIn:
    txn OnCompletion
    intc_0 // OptIn
    ==
    bz register_after_if_else@4
    // everything/contract.py:51
    // sender_name, sender_name_existed = self.name.maybe(account=0)
    intc_1 // 0
    dup
    bytec_1 // "name"
    app_local_get_ex
    bury 1
    // everything/contract.py:52
    // if not sender_name_existed:
    bnz register_after_if_else@4
    // everything/contract.py:53
    // self.counter += multiplicative_identity()  # has full FuncDef
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    callsub multiplicative_identity
    +
    bytec_0 // "counter"
    swap
    app_global_put

register_after_if_else@4:
    // everything/contract.py:54
    // self.name[0] = name
    intc_1 // 0
    bytec_1 // "name"
    frame_dig -1
    app_local_put
    retsub


// test_cases.everything.my_base.multiplicative_identity() -> uint64:
multiplicative_identity:
    // everything/my_base.py:18-19
    // @subroutine
    // def multiplicative_identity() -> UInt64:
    proto 0 1
    // everything/my_base.py:20
    // return UInt64(1)
    intc_0 // 1
    retsub


// test_cases.everything.contract.Everything.say_hello() -> bytes:
say_hello:
    // everything/contract.py:56-57
    // @abimethod
    // def say_hello(self) -> String:
    proto 0 1
    // everything/contract.py:58
    // self._check_ban_list()
    callsub _check_ban_list
    // everything/contract.py:59
    // name, exists = self.name.maybe(account=0)
    intc_1 // 0
    dup
    bytec_1 // "name"
    app_local_get_ex
    // everything/contract.py:60
    // if not exists:
    bnz say_hello_after_if_else@2
    // everything/contract.py:61
    // return String("Howdy stranger!")
    pushbytes 0x000f486f77647920737472616e67657221
    swap
    retsub

say_hello_after_if_else@2:
    // everything/contract.py:62
    // return "Hello, " + name + "!"
    frame_dig 0
    extract 2 0
    pushbytes 0x48656c6c6f2c20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    extract 2 0
    pushbytes 0x21
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    retsub


// test_cases.everything.contract.Everything.calculate(a: bytes, b: bytes) -> bytes:
calculate:
    // everything/contract.py:64-65
    // @abimethod
    // def calculate(self, a: arc4_UInt64, b: arc4_UInt64) -> arc4_UInt64:
    proto 2 1
    // everything/contract.py:66
    // c = super().calculate(a, b)
    frame_dig -2
    frame_dig -1
    callsub test_cases.everything.my_base.MyMiddleBase.calculate
    // everything/contract.py:67
    // return arc4_UInt64(c.native * b.native)
    btoi
    frame_dig -1
    btoi
    *
    itob
    retsub


// test_cases.everything.my_base.MyMiddleBase.calculate(a: bytes, b: bytes) -> bytes:
test_cases.everything.my_base.MyMiddleBase.calculate:
    // everything/my_base.py:13-14
    // @subroutine
    // def calculate(self, a: arc4.UInt64, b: arc4.UInt64) -> arc4.UInt64:
    proto 2 1
    // everything/my_base.py:15
    // return arc4.UInt64(a.native + b.native)
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    +
    itob
    retsub


// test_cases.everything.contract.Everything.close_out() -> void:
close_out:
    // everything/contract.py:69-70
    // @abimethod(allow_actions=["CloseOut"])
    // def close_out(self) -> None:
    proto 0 0
    // everything/contract.py:71
    // self._remove_sender()
    callsub _remove_sender
    retsub


// test_cases.everything.contract.Everything._remove_sender() -> void:
_remove_sender:
    // everything/contract.py:81-82
    // @subroutine
    // def _remove_sender(self) -> None:
    proto 0 0
    // everything/contract.py:83
    // self.counter -= positive_one()
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    callsub positive_one
    -
    bytec_0 // "counter"
    swap
    app_global_put
    retsub


// test_cases.everything.contract.positive_one() -> uint64:
positive_one:
    // everything/contract.py:86-87
    // @subroutine
    // def positive_one() -> UInt64:
    proto 0 1
    // everything/contract.py:88
    // return UInt64(1)
    intc_0 // 1
    retsub
