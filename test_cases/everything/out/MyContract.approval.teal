#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    bytecblock "counter" base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) "name" 0x151f7c75
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    pushbytess 0xbd6099e5 0x1658aa2f // method "register(string)void", method "close_out()void"
    txna ApplicationArgs 0
    match main_register_route@4 main_close_out_route@5

main_switch_case_next@6:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@11
    pushbytess 0x5d5c84c7 0xfd07264e // method "say_hello()string", method "calculate(uint64,uint64)uint64"
    txna ApplicationArgs 0
    match say_hello calculate
    err

main_create_NoOp@11:
    // everything/contract.py:37
    // class Everything(ARC4Contract, MyMiddleBase, name="MyContract"):
    pushbytes 0x4c5c61ba // method "create()void"
    txna ApplicationArgs 0
    match create
    err

main_close_out_route@5:
    // everything/contract.py:69
    // @abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be CloseOut && can only call when not creating
    b close_out

main_register_route@4:
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    txn ApplicationID
    &&
    assert // OnCompletion must be one of NoOp, OptIn && can only call when not creating
    b register


// test_cases.everything.contract.Everything.create[routing]() -> void:
create:
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    txn Sender
    // everything/contract.py:25
    // addr = Account(BANNED)
    bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    !=
    assert // You are banned, goodbye
    // everything/my_base.py:9
    // self.creator = op.Txn.sender
    pushbytes "creator"
    txn Sender
    app_global_put
    // everything/contract.py:45
    // self.counter = UInt64(ZERO)
    bytec_0 // "counter"
    intc_1 // 0
    app_global_put
    // everything/contract.py:41
    // @abimethod(create="require")
    intc_0 // 1
    return


// test_cases.everything.contract.Everything.register[routing]() -> void:
register:
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    txna ApplicationArgs 1
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    txn Sender
    // everything/contract.py:25
    // addr = Account(BANNED)
    bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    !=
    assert // You are banned, goodbye
    // everything/contract.py:50
    // if op.Txn.on_completion == OnCompleteAction.OptIn:
    txn OnCompletion
    intc_0 // OptIn
    ==
    bz register_after_if_else@5
    // everything/contract.py:51
    // sender_name, sender_name_existed = self.name.maybe(account=0)
    intc_1 // 0
    dup
    bytec_2 // "name"
    app_local_get_ex
    bury 1
    // everything/contract.py:52
    // if not sender_name_existed:
    bnz register_after_if_else@5
    // everything/contract.py:53
    // self.counter += multiplicative_identity()  # has full FuncDef
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    // everything/my_base.py:20
    // return UInt64(1)
    intc_0 // 1
    // everything/contract.py:53
    // self.counter += multiplicative_identity()  # has full FuncDef
    +
    bytec_0 // "counter"
    swap
    app_global_put

register_after_if_else@5:
    // everything/contract.py:54
    // self.name[0] = name
    intc_1 // 0
    bytec_2 // "name"
    dig 2
    app_local_put
    // everything/contract.py:47
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return


// test_cases.everything.contract.Everything.say_hello[routing]() -> void:
say_hello:
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    txn Sender
    // everything/contract.py:25
    // addr = Account(BANNED)
    bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // everything/contract.py:79
    // assert op.Txn.sender != get_banned(), "You are banned, goodbye"
    !=
    assert // You are banned, goodbye
    // everything/contract.py:59
    // name, exists = self.name.maybe(account=0)
    intc_1 // 0
    dup
    bytec_2 // "name"
    app_local_get_ex
    // everything/contract.py:60
    // if not exists:
    bnz say_hello_after_if_else@3
    // everything/contract.py:61
    // return String("Howdy stranger!")
    pushbytes 0x000f486f77647920737472616e67657221

say_hello_after_inlined_test_cases.everything.contract.Everything.say_hello@4:
    // everything/contract.py:56
    // @abimethod
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

say_hello_after_if_else@3:
    // everything/contract.py:62
    // return "Hello, " + name + "!"
    dup
    extract 2 0
    pushbytes 0x000748656c6c6f2c20
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    pushbytes 0x21
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    // everything/contract.py:56
    // @abimethod
    b say_hello_after_inlined_test_cases.everything.contract.Everything.say_hello@4


// test_cases.everything.contract.Everything.calculate[routing]() -> void:
calculate:
    // everything/contract.py:64
    // @abimethod
    txna ApplicationArgs 2
    txna ApplicationArgs 1
    // everything/my_base.py:15
    // return arc4.UInt64(a.as_uint64() + b.as_uint64())
    btoi
    swap
    btoi
    swap
    dig 1
    +
    // everything/contract.py:67
    // return arc4_UInt64(c.as_uint64() * b.as_uint64())
    *
    itob
    // everything/contract.py:64
    // @abimethod
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.everything.contract.Everything.close_out[routing]() -> void:
close_out:
    // everything/contract.py:83
    // self.counter -= positive_one()
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    // everything/contract.py:88
    // return UInt64(1)
    intc_0 // 1
    // everything/contract.py:83
    // self.counter -= positive_one()
    -
    bytec_0 // "counter"
    swap
    app_global_put
    // everything/contract.py:69
    // @abimethod(allow_actions=["CloseOut"])
    intc_0 // 1
    return
