contract test_cases.everything.contract.Everything:
    program approval:
        subroutine test_cases.everything.contract.Everything.approval_program() -> uint64:
            block@0: // L37
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create()void" => block@1, method "register(string)void" => block@2, method "say_hello()string" => block@3, method "calculate(uint64,uint64)uint64" => block@4, method "close_out()void" => block@5, * => fail // reject transaction}
            block@1: // create_route_L41
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: uint64 = (! tmp%1#0)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: uint64 = (txn ApplicationID)
                let tmp%4#0: uint64 = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                test_cases.everything.contract.Everything.create()
                return 1u
            block@2: // register_route_L47
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: uint64 = (shl 1u tmp%5#0)
                let tmp%7#0: uint64 = (& tmp%6#0 3u)
                (assert tmp%7#0) // OnCompletion is one of NoOp, OptIn
                let tmp%8#0: uint64 = (txn ApplicationID)
                (assert tmp%8#0) // is not creating
                let tmp%9#0: bytes = (txna ApplicationArgs 1)
                test_cases.everything.contract.Everything.register(tmp%9#0)
                return 1u
            block@3: // say_hello_route_L56
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: uint64 = (! tmp%10#0)
                (assert tmp%11#0) // OnCompletion is NoOp
                let tmp%12#0: uint64 = (txn ApplicationID)
                (assert tmp%12#0) // is not creating
                let tmp%13#0: bytes = test_cases.everything.contract.Everything.say_hello()
                let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
                (log tmp%14#0)
                return 1u
            block@4: // calculate_route_L64
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let tmp%19#0: bytes = (txna ApplicationArgs 2)
                let tmp%20#0: bytes = test_cases.everything.contract.Everything.calculate(tmp%18#0, tmp%19#0)
                let tmp%21#0: bytes = (concat 0x151f7c75 tmp%20#0)
                (log tmp%21#0)
                return 1u
            block@5: // close_out_route_L69
                let tmp%22#0: uint64 = (txn OnCompletion)
                let tmp%23#0: uint64 = (== tmp%22#0 CloseOut)
                (assert tmp%23#0) // OnCompletion is CloseOut
                let tmp%24#0: uint64 = (txn ApplicationID)
                (assert tmp%24#0) // is not creating
                test_cases.everything.contract.Everything.close_out()
                return 1u
        
        subroutine test_cases.everything.contract.Everything.create() -> void:
            block@0: // L41
                test_cases.everything.contract.Everything._check_ban_list()
                test_cases.everything.my_base.MyBase.remember_creator()
                (app_global_put "counter" 0u)
                return 
        
        subroutine test_cases.everything.contract.Everything._check_ban_list() -> void:
            block@0: // L77
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = test_cases.everything.contract.get_banned()
                let tmp%2#0: uint64 = (!= tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // You are banned, goodbye
                return 
        
        subroutine test_cases.everything.contract.get_banned() -> bytes:
            block@0: // L23
                return addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
        
        subroutine test_cases.everything.my_base.MyBase.remember_creator() -> void:
            block@0: // L7
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "creator" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.Everything.register(name: bytes) -> void:
            block@0: // L47
                test_cases.everything.contract.Everything._check_ban_list()
                let tmp%0#0: uint64 = (txn OnCompletion)
                let tmp%1#0: uint64 = (== tmp%0#0 OptIn)
                goto tmp%1#0 ? block@1 : block@4
            block@1: // if_body_L50
                let (sender_name#0: any, sender_name_existed#0: uint64) = (app_local_get_ex 0u 0u "name")
                goto sender_name_existed#0 ? block@4 : block@2
            block@2: // if_body_L52
                let (counter_value%0#0: uint64, counter_exists%0#0: uint64) = (app_global_get_ex 0u "counter")
                (assert counter_exists%0#0) // check counter exists
                let tmp%2#0: uint64 = test_cases.everything.my_base.multiplicative_identity()
                let new_state_value%0#0: uint64 = (+ counter_value%0#0 tmp%2#0)
                (app_global_put "counter" new_state_value%0#0)
                goto block@4
            block@4: // after_if_else_L50
                (app_local_put 0u "name" name#0)
                return 
        
        subroutine test_cases.everything.my_base.multiplicative_identity() -> uint64:
            block@0: // L18
                return 1u
        
        subroutine test_cases.everything.contract.Everything.say_hello() -> bytes:
            block@0: // L56
                test_cases.everything.contract.Everything._check_ban_list()
                let (name#0: any, exists#0: uint64) = (app_local_get_ex 0u 0u "name")
                goto exists#0 ? block@2 : block@1
            block@1: // if_body_L60
                return "\x00\x0fHowdy stranger!"
            block@2: // after_if_else_L60
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) name#0)
                let concatenated%0#0: bytes = (concat "Hello, " expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%2#0 "!")
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                return concat_result%1#0
        
        subroutine test_cases.everything.contract.Everything.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L64
                let c#0: bytes = test_cases.everything.my_base.MyMiddleBase.calculate(a#0, b#0)
                let tmp%0#0: uint64 = (btoi c#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let tmp%2#0: uint64 = (* tmp%0#0 tmp%1#0)
                let val_as_bytes%0#0: bytes = (itob tmp%2#0)
                return val_as_bytes%0#0
        
        subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L13
                let tmp%0#0: uint64 = (btoi a#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let val_as_bytes%0#0: bytes = (itob tmp%2#0)
                return val_as_bytes%0#0
        
        subroutine test_cases.everything.contract.Everything.close_out() -> void:
            block@0: // L69
                test_cases.everything.contract.Everything._remove_sender()
                return 
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L81
                let (counter_value%0#0: uint64, counter_exists%0#0: uint64) = (app_global_get_ex 0u "counter")
                (assert counter_exists%0#0) // check counter exists
                let tmp%0#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%0#0: uint64 = (- counter_value%0#0 tmp%0#0)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L86
                return 1u
    
    program clear-state:
        subroutine test_cases.everything.contract.Everything.clear_state_program() -> uint64:
            block@0: // L73
                test_cases.everything.contract.Everything._remove_sender()
                return 1u
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L81
                let (counter_value%0#0: uint64, counter_exists%0#0: uint64) = (app_global_get_ex 0u "counter")
                (assert counter_exists%0#0) // check counter exists
                let tmp%0#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%0#0: uint64 = (- counter_value%0#0 tmp%0#0)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L86
                return 1u