{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "register(string)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "say_hello()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculate(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_out()void": {
            "call_config": {
                "close_out": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKCi8vIHRlc3RfY2FzZXMuZXZlcnl0aGluZy5jb250cmFjdC5FdmVyeXRoaW5nLmNsZWFyX3N0YXRlX3Byb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW5fYmxvY2tAMDoKICAgICAgICBjYWxsc3ViIF9yZW1vdmVfc2VuZGVyCiAgICAgICAgaW50IDEKICAgICAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLmV2ZXJ5dGhpbmcuY29udHJhY3QuRXZlcnl0aGluZy5fcmVtb3ZlX3NlbmRlcigpIC0+IHZvaWQ6Cl9yZW1vdmVfc2VuZGVyOgogICAgICAgIHByb3RvIDAgMAoKX3JlbW92ZV9zZW5kZXJfYmxvY2tAMDoKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgImNvdW50ZXIiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgY2FsbHN1YiBwb3NpdGl2ZV9vbmUKICAgICAgICAtCiAgICAgICAgYnl0ZSAiY291bnRlciIKICAgICAgICBzd2FwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmV2ZXJ5dGhpbmcuY29udHJhY3QucG9zaXRpdmVfb25lKCkgLT4gdWludDY0Ogpwb3NpdGl2ZV9vbmU6CiAgICAgICAgcHJvdG8gMCAxCgpwb3NpdGl2ZV9vbmVfYmxvY2tAMDoKICAgICAgICBpbnQgMQogICAgICAgIHJldHN1YgoK"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "counter": {
                    "type": "uint64",
                    "key": "counter"
                },
                "creator": {
                    "type": "bytes",
                    "key": "creator"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "name": {
                    "type": "bytes",
                    "key": "name"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "MyContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "register",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "say_hello",
                "args": [],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "calculate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "close_out",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}