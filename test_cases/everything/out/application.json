{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "register(string)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "say_hello()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculate(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_out()void": {
            "call_config": {
                "close_out": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLmV2ZXJ5dGhpbmcuY29udHJhY3QuRXZlcnl0aGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gZXZlcnl0aGluZy9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5fcmVtb3ZlX3NlbmRlcigpCiAgICBjYWxsc3ViIF9yZW1vdmVfc2VuZGVyCiAgICAvLyBldmVyeXRoaW5nL2NvbnRyYWN0LnB5Ojc1CiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuZXZlcnl0aGluZy5jb250cmFjdC5FdmVyeXRoaW5nLl9yZW1vdmVfc2VuZGVyKCkgLT4gdm9pZDoKX3JlbW92ZV9zZW5kZXI6CiAgICAvLyBldmVyeXRoaW5nL2NvbnRyYWN0LnB5OjgxLTgyCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9yZW1vdmVfc2VuZGVyKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIGV2ZXJ5dGhpbmcvY29udHJhY3QucHk6ODMKICAgIC8vIHNlbGYuY291bnRlciAtPSBwb3NpdGl2ZV9vbmUoKQogICAgaW50IDAKICAgIGJ5dGUgImNvdW50ZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgY2FsbHN1YiBwb3NpdGl2ZV9vbmUKICAgIC0KICAgIGJ5dGUgImNvdW50ZXIiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5ldmVyeXRoaW5nLmNvbnRyYWN0LnBvc2l0aXZlX29uZSgpIC0+IHVpbnQ2NDoKcG9zaXRpdmVfb25lOgogICAgLy8gZXZlcnl0aGluZy9jb250cmFjdC5weTo4Ni04NwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBwb3NpdGl2ZV9vbmUoKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIGV2ZXJ5dGhpbmcvY29udHJhY3QucHk6ODgKICAgIC8vIHJldHVybiBVSW50NjQoMSkKICAgIGludCAxCiAgICByZXRzdWIK"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "counter": {
                    "type": "uint64",
                    "key": "counter"
                },
                "creator": {
                    "type": "bytes",
                    "key": "creator"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "name": {
                    "type": "bytes",
                    "key": "name"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "MyContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "register",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "say_hello",
                "args": [],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "calculate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "close_out",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}