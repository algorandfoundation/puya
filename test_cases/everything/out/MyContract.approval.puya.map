{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAgCK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA3BL;;;AAAA;;;AA2BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAUK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAL;;;AAsCe;;AAtDJ;AAsDI;AAAP;ACtEA;;;;;;;;;AAAe;;AAAf;ADoCA;AAAe;AAAf;;AAER;;;AAgCe;;AAtDJ;AAsDI;AAAP;AA7BG;;AAAwB;AAAxB;AAAX;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAChC;;;AACC;AAAA;AAAA;AAAA;ACjCL;ADiCK;AAAA;AAAA;AAAA;AACE;AAAV;AAAA;;AAAA;;AAER;;;AAuBe;;AAtDJ;AAsDI;AAAP;AApBuC;AAAxB;AAAA;AAAA;AACZ;;;AACQ;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AACG;;AAAA;;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAAA;AAER;;;ACjD2B;;AAAA;AAAW;;AAAA;AAAX;AAAA;;AAAA;AAAZ;ADoDY;AAAA;AAAZ;AAAP;AAER;;;AAcQ;AAAA;AAAA;AAAA;AAKG;AALH;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"counter\" base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) \"name\" 0x151f7c75"
    },
    "58": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "60": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "63": {
      "op": "pushbytess 0x4c5c61ba 0xbd6099e5 0x5d5c84c7 0xfd07264e 0x1658aa2f // method \"create()void\", method \"register(string)void\", method \"say_hello()string\", method \"calculate(uint64,uint64)uint64\", method \"close_out()void\""
    },
    "90": {
      "op": "txna ApplicationArgs 0"
    },
    "93": {
      "op": "match main_create_route@5 main_register_route@6 main_say_hello_route@7 main_calculate_route@8 main_close_out_route@9"
    },
    "105": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "106": {
      "op": "return"
    },
    "107": {
      "block": "main_close_out_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "109": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "CloseOut"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "112": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "113": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "115": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "116": {
      "callsub": "test_cases.everything.contract.Everything.close_out",
      "op": "callsub close_out"
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "return"
    },
    "121": {
      "block": "main_calculate_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "op": "txna ApplicationArgs 1"
    },
    "131": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "134": {
      "callsub": "test_cases.everything.contract.Everything.calculate",
      "op": "callsub calculate",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "137": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "138": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "140": {
      "op": "log",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "142": {
      "op": "return"
    },
    "143": {
      "block": "main_say_hello_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "145": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "146": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "147": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "149": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "150": {
      "callsub": "test_cases.everything.contract.Everything.say_hello",
      "op": "callsub say_hello",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "153": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "156": {
      "op": "log",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "158": {
      "op": "return"
    },
    "159": {
      "block": "main_register_route@6",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "160": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "1",
        "tmp%7#0"
      ]
    },
    "162": {
      "op": "shl",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "163": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "3"
      ]
    },
    "165": {
      "op": "&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "166": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "167": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "170": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "173": {
      "callsub": "test_cases.everything.contract.Everything.register",
      "op": "callsub register",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "177": {
      "op": "return"
    },
    "178": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "180": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "184": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "185": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "186": {
      "callsub": "test_cases.everything.contract.Everything.create",
      "op": "callsub create"
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "190": {
      "op": "return"
    },
    "191": {
      "subroutine": "test_cases.everything.contract.Everything.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "194": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "197": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "198": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "199": {
      "op": "pushbytes \"creator\""
    },
    "208": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ]
    },
    "210": {
      "op": "app_global_put",
      "stack_out": []
    },
    "211": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "212": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "213": {
      "op": "app_global_put",
      "stack_out": []
    },
    "214": {
      "retsub": true,
      "op": "retsub"
    },
    "215": {
      "subroutine": "test_cases.everything.contract.Everything.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "218": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "220": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "221": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "222": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "223": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "OptIn"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "227": {
      "op": "bz register_after_if_else@4",
      "stack_out": []
    },
    "230": {
      "op": "intc_1 // 0"
    },
    "231": {
      "op": "dup"
    },
    "232": {
      "op": "bytec_2 // \"name\""
    },
    "233": {
      "op": "app_local_get_ex"
    },
    "234": {
      "op": "bury 1"
    },
    "236": {
      "op": "bnz register_after_if_else@4"
    },
    "239": {
      "op": "intc_1 // 0"
    },
    "240": {
      "op": "bytec_0 // \"counter\""
    },
    "241": {
      "op": "app_global_get_ex"
    },
    "242": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists"
    },
    "243": {
      "op": "intc_0 // 1"
    },
    "244": {
      "op": "+"
    },
    "245": {
      "op": "bytec_0 // \"counter\""
    },
    "246": {
      "op": "swap"
    },
    "247": {
      "op": "app_global_put"
    },
    "248": {
      "block": "register_after_if_else@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "249": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"name\""
      ]
    },
    "250": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "0",
        "\"name\"",
        "name#0 (copy)"
      ]
    },
    "252": {
      "op": "app_local_put",
      "stack_out": []
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "257": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "260": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "261": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "262": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "263": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "264": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "265": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "266": {
      "op": "bnz say_hello_after_if_else@2",
      "stack_out": [
        "name#0"
      ]
    },
    "269": {
      "op": "pushbytes 0x000f486f77647920737472616e67657221"
    },
    "288": {
      "op": "swap"
    },
    "289": {
      "retsub": true,
      "op": "retsub"
    },
    "290": {
      "block": "say_hello_after_if_else@2",
      "stack_in": [
        "name#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "name#0"
      ]
    },
    "292": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "295": {
      "op": "pushbytes 0x48656c6c6f2c20",
      "defined_out": [
        "0x48656c6c6f2c20",
        "expr_value_trimmed%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%1#0",
        "0x48656c6c6f2c20"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "0x48656c6c6f2c20",
        "expr_value_trimmed%1#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0"
      ]
    },
    "306": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "307": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "308": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "309": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "312": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat_result%0#0"
      ]
    },
    "314": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "317": {
      "op": "pushbytes 0x21",
      "defined_out": [
        "0x21",
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0",
        "0x21"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0"
      ]
    },
    "321": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "322": {
      "op": "len",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "323": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "324": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "327": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "328": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat_result%1#0"
      ]
    },
    "329": {
      "op": "swap"
    },
    "330": {
      "retsub": true,
      "op": "retsub"
    },
    "331": {
      "subroutine": "test_cases.everything.contract.Everything.calculate",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "calculate",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "334": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "336": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "339": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#0",
        "tmp%1#1 (copy)"
      ]
    },
    "343": {
      "op": "+",
      "defined_out": [
        "tmp%1#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "to_encode%0#0"
      ]
    },
    "344": {
      "op": "itob",
      "defined_out": [
        "c#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "c#0"
      ]
    },
    "345": {
      "op": "btoi",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "*",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "347": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "348": {
      "retsub": true,
      "op": "retsub"
    },
    "349": {
      "subroutine": "test_cases.everything.contract.Everything.close_out",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "352": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "353": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "355": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "356": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "357": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "358": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"counter\""
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "new_state_value%0#0"
      ]
    },
    "360": {
      "op": "app_global_put",
      "stack_out": []
    },
    "361": {
      "retsub": true,
      "op": "retsub"
    }
  }
}