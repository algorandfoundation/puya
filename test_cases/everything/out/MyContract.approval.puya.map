{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAgCK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAtBA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAgCU;;AAtDJ;AAsDI;AAAP;ACtEA;;;;;;;;;AAAe;;AAAf;ADoCA;AAAe;AAAf;AAJH;AAAA;AAMA;;;AAgCU;;AAtDJ;AAsDI;AAAP;AA7BG;;AAAwB;AAAxB;AAAX;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAChC;;;AACC;AAAA;AAAA;AAAA;ACjCL;ADiCK;AAAA;AAAA;AAAA;AACE;AAAV;AAAA;;AAAA;AAPH;AAAA;AAgCU;;AAtDJ;AAsDI;AAAP;AApBuC;AAAxB;AAAA;AAAA;AACZ;;;AACQ;;;;;;;;;;;;;;;;;;;AALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AANV;;;AAQA;;;AAAA;;;ACjDsB;AAAW;AAAA;AAAX;AAAA;;AAAA;ADoDA;AAAZ;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBG;AAAA;AAAA;AAAA;AAKG;AALH;AAAA;AAAA;AAAA;AAdH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"counter\" base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) \"name\" 0x151f7c75"
    },
    "58": {
      "op": "pushbytess 0xbd6099e5 0x1658aa2f // method \"register(string)void\", method \"close_out()void\"",
      "defined_out": [
        "Method(close_out()void)",
        "Method(register(string)void)"
      ],
      "stack_out": [
        "Method(register(string)void)",
        "Method(close_out()void)"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(close_out()void)",
        "Method(register(string)void)",
        "tmp%0#2"
      ],
      "stack_out": [
        "Method(register(string)void)",
        "Method(close_out()void)",
        "tmp%0#2"
      ]
    },
    "73": {
      "op": "match main_register_route@4 main_close_out_route@5",
      "stack_out": []
    },
    "79": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "85": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "88": {
      "op": "pushbytess 0x5d5c84c7 0xfd07264e // method \"say_hello()string\", method \"calculate(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(say_hello()string)"
      ],
      "stack_out": [
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)"
      ]
    },
    "100": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculate(uint64,uint64)uint64)",
        "Method(say_hello()string)",
        "tmp%14#0"
      ],
      "stack_out": [
        "Method(say_hello()string)",
        "Method(calculate(uint64,uint64)uint64)",
        "tmp%14#0"
      ]
    },
    "103": {
      "op": "match say_hello calculate",
      "stack_out": []
    },
    "109": {
      "op": "err"
    },
    "110": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)"
      ],
      "stack_out": [
        "Method(create()void)"
      ]
    },
    "116": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "tmp%15#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "tmp%15#0"
      ]
    },
    "119": {
      "op": "match create",
      "stack_out": []
    },
    "123": {
      "op": "err"
    },
    "124": {
      "block": "main_close_out_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "126": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "CloseOut"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "b close_out"
    },
    "136": {
      "block": "main_register_route@4",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "137": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "1",
        "tmp%1#0"
      ]
    },
    "139": {
      "op": "shl",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "140": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "3"
      ]
    },
    "142": {
      "op": "&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "b register"
    },
    "150": {
      "subroutine": "test_cases.everything.contract.Everything.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "153": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "154": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "155": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "164": {
      "op": "txn Sender",
      "stack_out": [
        "\"creator\"",
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "167": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "168": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "subroutine": "test_cases.everything.contract.Everything.register[routing]",
      "params": {},
      "block": "register",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "175": {
      "op": "txn Sender"
    },
    "177": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "name#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "178": {
      "op": "!=",
      "defined_out": [
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0"
      ]
    },
    "179": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": [
        "name#0"
      ]
    },
    "180": {
      "op": "txn OnCompletion",
      "defined_out": [
        "name#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "name#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0",
        "OptIn"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "name#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0"
      ]
    },
    "184": {
      "op": "bz register_after_if_else@5",
      "stack_out": [
        "name#0"
      ]
    },
    "187": {
      "op": "intc_1 // 0",
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "188": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "0",
        "0"
      ]
    },
    "189": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "0",
        "\"name\""
      ]
    },
    "190": {
      "op": "app_local_get_ex",
      "defined_out": [
        "name#0",
        "sender_name#0",
        "sender_name_existed#0"
      ],
      "stack_out": [
        "name#0",
        "sender_name#0",
        "sender_name_existed#0"
      ]
    },
    "191": {
      "op": "bury 1",
      "stack_out": [
        "name#0",
        "sender_name_existed#0"
      ]
    },
    "193": {
      "op": "bnz register_after_if_else@5",
      "stack_out": [
        "name#0"
      ]
    },
    "196": {
      "op": "intc_1 // 0",
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "197": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"counter\""
      ]
    },
    "198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "199": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "name#0",
        "maybe_value%1#0"
      ]
    },
    "200": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "201": {
      "op": "+",
      "defined_out": [
        "name#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0"
      ]
    },
    "202": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "name#0",
        "tmp%3#0",
        "\"counter\""
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "\"counter\"",
        "tmp%3#0"
      ]
    },
    "204": {
      "op": "app_global_put",
      "stack_out": [
        "name#0"
      ]
    },
    "205": {
      "block": "register_after_if_else@5",
      "stack_in": [
        "name#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "206": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"name\""
      ]
    },
    "207": {
      "op": "dig 2",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"name\"",
        "name#0"
      ]
    },
    "209": {
      "op": "app_local_put",
      "stack_out": [
        "name#0"
      ]
    },
    "210": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "1"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": [
        "name#0"
      ]
    },
    "212": {
      "subroutine": "test_cases.everything.contract.Everything.say_hello[routing]",
      "params": {},
      "block": "say_hello",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "214": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "215": {
      "op": "!=",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "216": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": []
    },
    "217": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "218": {
      "op": "dup",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "219": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "0",
        "\"name\""
      ]
    },
    "220": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "221": {
      "op": "bnz say_hello_after_if_else@3",
      "stack_out": [
        "name#0"
      ]
    },
    "224": {
      "op": "pushbytes 0x000f486f77647920737472616e67657221",
      "defined_out": [
        "name#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "243": {
      "block": "say_hello_after_inlined_test_cases.everything.contract.Everything.say_hello@4",
      "stack_in": [
        "name#0",
        "tmp%0#0"
      ],
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "244": {
      "op": "swap",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#0"
      ]
    },
    "246": {
      "op": "log",
      "stack_out": [
        "name#0"
      ]
    },
    "247": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "name#0",
        "1"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": [
        "name#0"
      ]
    },
    "249": {
      "block": "say_hello_after_if_else@3",
      "stack_in": [
        "name#0"
      ],
      "op": "dup",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "name#0"
      ]
    },
    "250": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "extract_to_end%0#0"
      ]
    },
    "253": {
      "op": "pushbytes 0x000748656c6c6f2c20",
      "defined_out": [
        "0x000748656c6c6f2c20",
        "extract_to_end%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "extract_to_end%0#0",
        "0x000748656c6c6f2c20"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "0x000748656c6c6f2c20",
        "extract_to_end%0#0"
      ]
    },
    "265": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0"
      ]
    },
    "266": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "267": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "270": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "271": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "272": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "275": {
      "op": "replace2 0",
      "defined_out": [
        "name#0",
        "replace%0#0"
      ],
      "stack_out": [
        "name#0",
        "replace%0#0"
      ]
    },
    "277": {
      "op": "pushbytes 0x21",
      "defined_out": [
        "0x21",
        "name#0",
        "replace%0#0"
      ],
      "stack_out": [
        "name#0",
        "replace%0#0",
        "0x21"
      ]
    },
    "280": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0"
      ]
    },
    "281": {
      "op": "dup",
      "defined_out": [
        "concat%1#0",
        "concat%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "282": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%1#0",
        "extract_to_end%3#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "extract_to_end%3#0"
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "concat%1#0",
        "len%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "len%1#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "287": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%1#0",
        "concat%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "290": {
      "op": "replace2 0",
      "defined_out": [
        "name#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#0"
      ]
    },
    "292": {
      "op": "b say_hello_after_inlined_test_cases.everything.contract.Everything.say_hello@4"
    },
    "295": {
      "subroutine": "test_cases.everything.contract.Everything.calculate[routing]",
      "params": {},
      "block": "calculate",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "298": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "301": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#0"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "b#0"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#2"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "tmp%1#2",
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#2",
        "tmp%1#2 (copy)"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%0#0",
        "tmp%1#2 (copy)"
      ]
    },
    "307": {
      "op": "+",
      "defined_out": [
        "tmp%1#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#1"
      ]
    },
    "308": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "309": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "310": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "312": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "313": {
      "op": "log",
      "stack_out": []
    },
    "314": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "315": {
      "op": "return",
      "stack_out": []
    },
    "316": {
      "subroutine": "test_cases.everything.contract.Everything.close_out[routing]",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "317": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "319": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "321": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "322": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%1#0",
        "\"counter\""
      ]
    },
    "323": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "tmp%1#0"
      ]
    },
    "324": {
      "op": "app_global_put",
      "stack_out": []
    },
    "325": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "326": {
      "op": "return",
      "stack_out": []
    }
  }
}