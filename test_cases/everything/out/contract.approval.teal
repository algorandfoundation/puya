#pragma version 10

// test_cases.everything.contract.Everything.approval_program() -> uint64:
main_block@0:
        txn ApplicationID
        bnz main_entrypoint@2

main_on_create@1:
        callsub __init__

main_entrypoint@2:
        txn NumAppArgs
        bz main_after_if_else@11

main_abi_routing@3:
        txna ApplicationArgs 0
        method "create()void"
        method "register(string)void"
        method "say_hello()string"
        method "calculate(uint64,uint64)uint64"
        method "close_out()void"
        uncover 5
        match main_create_route@4 main_register_route@5 main_say_hello_route@6 main_calculate_route@7 main_close_out_route@8
        b main_after_if_else@11

main_create_route@4:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        !
        assert // is creating
        callsub create
        int 1
        return

main_register_route@5:
        int 1
        txn OnCompletion
        shl
        int 3
        &
        assert // OnCompletion is one of NoOp, OptIn
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        callsub register
        int 1
        return

main_say_hello_route@6:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        callsub say_hello
        byte 0x151f7c75
        swap
        concat
        log
        int 1
        return

main_calculate_route@7:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        txna ApplicationArgs 2
        callsub calculate
        byte 0x151f7c75
        swap
        concat
        log
        int 1
        return

main_close_out_route@8:
        txn OnCompletion
        int CloseOut
        ==
        assert // OnCompletion is CloseOut
        txn ApplicationID
        assert // is not creating
        callsub close_out
        int 1
        return

main_after_if_else@11:
        err // reject transaction


// test_cases.everything.contract.Everything.create() -> void:
create:
        proto 0 0

create_block@0:
        callsub _check_ban_list
        callsub remember_creator
        byte "counter"
        int 0
        app_global_put
        retsub


// test_cases.everything.contract.Everything._check_ban_list() -> void:
_check_ban_list:
        proto 0 0

_check_ban_list_block@0:
        txn Sender
        callsub get_banned
        !=
        assert // You are banned, goodbye
        retsub


// test_cases.everything.contract.get_banned() -> bytes:
get_banned:
        proto 0 1

get_banned_block@0:
        addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
        retsub


// test_cases.everything.my_base.MyBase.remember_creator() -> void:
remember_creator:
        proto 0 0

remember_creator_block@0:
        byte "creator"
        txn Sender
        app_global_put
        retsub


// test_cases.everything.contract.Everything.register(name#0: bytes) -> void:
register:
        proto 1 0

register_block@0:
        callsub _check_ban_list
        txn OnCompletion
        int OptIn
        ==
        bz register_after_if_else@4

register_if_body@1:
        int 0
        int 0
        byte "name"
        app_local_get_ex
        swap
        pop
        bnz register_after_if_else@4

register_if_body@2:
        int 0
        byte "counter"
        app_global_get_ex
        assert // check value exists
        callsub multiplicative_identity
        +
        byte "counter"
        swap
        app_global_put

register_after_if_else@4:
        int 0
        byte "name"
        frame_dig -1
        app_local_put
        retsub


// test_cases.everything.my_base.multiplicative_identity() -> uint64:
multiplicative_identity:
        proto 0 1

multiplicative_identity_block@0:
        int 1
        retsub


// test_cases.everything.contract.Everything.say_hello() -> bytes:
say_hello:
        proto 0 1

say_hello_block@0:
        callsub _check_ban_list
        int 0
        int 0
        byte "name"
        app_local_get_ex
        bnz say_hello_after_if_else@2

say_hello_if_body@1:
        byte "\x00\x0fHowdy stranger!"
        swap
        retsub

say_hello_after_if_else@2:
        frame_dig 0
        dup
        int 0
        extract_uint16
        swap
        extract 2 0
        byte "\x00\x07Hello, "
        swap
        uncover 2
        callsub dynamic_array_concat_fixed_size
        byte "\x00\x01!"
        int 0
        extract_uint16
        swap
        byte "!"
        uncover 2
        callsub dynamic_array_concat_fixed_size
        swap
        retsub


// test_cases.everything.contract.Everything.calculate(a#0: bytes, b#0: bytes) -> bytes:
calculate:
        proto 2 1

calculate_block@0:
        frame_dig -2
        frame_dig -1
        callsub MyMiddleBase.calculate
        btoi
        frame_dig -1
        btoi
        *
        itob
        retsub


// test_cases.everything.my_base.MyMiddleBase.calculate(a#0: bytes, b#0: bytes) -> bytes:
MyMiddleBase.calculate:
        proto 2 1

MyMiddleBase.calculate_block@0:
        frame_dig -2
        btoi
        frame_dig -1
        btoi
        +
        itob
        retsub


// test_cases.everything.contract.Everything.close_out() -> void:
close_out:
        proto 0 0

close_out_block@0:
        callsub _remove_sender
        retsub


// test_cases.everything.contract.Everything._remove_sender() -> void:
_remove_sender:
        proto 0 0

_remove_sender_block@0:
        int 0
        byte "counter"
        app_global_get_ex
        assert // check value exists
        callsub positive_one
        -
        byte "counter"
        swap
        app_global_put
        retsub


// test_cases.everything.contract.positive_one() -> uint64:
positive_one:
        proto 0 1

positive_one_block@0:
        int 1
        retsub


// test_cases.everything.contract.Everything.__init__() -> void:
__init__:
        proto 0 0

__init___block@0:
        retsub


// puyapy_lib_arc4.dynamic_array_concat_fixed_size(source#0: bytes, new_items_bytes#0: bytes, new_items_count#0: uint64) -> bytes:
dynamic_array_concat_fixed_size:
        proto 3 1

dynamic_array_concat_fixed_size_block@0:
        frame_dig -3
        int 0
        extract_uint16
        frame_dig -1
        +
        itob
        extract 6 0
        frame_dig -3
        extract 2 0
        concat
        frame_dig -2
        concat
        retsub

