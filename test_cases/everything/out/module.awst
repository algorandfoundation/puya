subroutine multiplicative_identity(): uint64
{
  return 1u
}

subroutine get_banned(): account
{
  addr: account = Address("VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA")
  return addr
}

subroutine add_one(x: uint64): uint64
{
  new_value: uint64 = x
  one: uint64 = 1u
  new_value += one
  return new_value
}

contract MyContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    test_cases.everything.my_base.MyMiddleBase,
    test_cases.everything.my_base.MyBase,
  )
  globals {
    ['creator']: account
    ['counter']: uint64
  }
  locals {
    ['name']: arc4.dynamic_array<arc4.uint8>
  }
  
  subroutine test_cases.everything.contract.Everything.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine test_cases.everything.contract.Everything.clear_state_program(): bool
  {
    this::_remove_sender()
    return true
  }
  
  subroutine test_cases.everything.contract.Everything.__init__(): void
  {
  }
  
  abimethod test_cases.everything.contract.Everything.create(): void
  {
    this::_check_ban_list()
    this::remember_creator()
    GlobalState['counter']: uint64 = 0u
  }
  
  abimethod test_cases.everything.contract.Everything.register(name: arc4.dynamic_array<arc4.uint8>): void
  {
    this::_check_ban_list()
    if (txn<OnCompletion>() == OptIn) {
      (sender_name, sender_name_existed): tuple<arc4.dynamic_array<arc4.uint8>,bool> = STATE_GET_EX(LocalState['name', 0u])
      if (!(sender_name_existed)) {
        GlobalState['counter'] += test_cases.everything.my_base.multiplicative_identity()
      }
    }
    LocalState['name', 0u]: arc4.dynamic_array<arc4.uint8> = name
  }
  
  abimethod test_cases.everything.contract.Everything.say_hello(): arc4.dynamic_array<arc4.uint8>
  {
    this::_check_ban_list()
    (name, exists): tuple<arc4.dynamic_array<arc4.uint8>,bool> = STATE_GET_EX(LocalState['name', 0u])
    if (!(exists)) {
      return 'Howdy stranger!'
    }
    return 'Hello, ' + name + '!'
  }
  
  abimethod test_cases.everything.contract.Everything.calculate(a: arc4.uint64, b: arc4.uint64): arc4.uint64
  {
    c: arc4.uint64 = super::calculate(a, b)
    return arc4_encode(arc4_decode(c, uint64) * arc4_decode(b, uint64), arc4.uint64)
  }
  
  abimethod test_cases.everything.contract.Everything.close_out(): void
  {
    this::_remove_sender()
  }
  
  subroutine test_cases.everything.contract.Everything._check_ban_list(): void
  {
    assert(txn<Sender>() != test_cases.everything.contract.get_banned(), comment="You are banned, goodbye")
  }
  
  subroutine test_cases.everything.contract.Everything._remove_sender(): void
  {
    GlobalState['counter'] -= test_cases.everything.contract.positive_one()
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: arc4.uint64, b: arc4.uint64): arc4.uint64
  {
    return arc4_encode(arc4_decode(a, uint64) + arc4_decode(b, uint64), arc4.uint64)
  }
  
  subroutine test_cases.everything.my_base.MyBase.remember_creator(): void
  {
    GlobalState['creator']: account = txn<Sender>()
  }
}

subroutine positive_one(): uint64
{
  return 1u
}