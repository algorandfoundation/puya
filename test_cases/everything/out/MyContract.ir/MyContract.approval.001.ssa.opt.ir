main test_cases.everything.contract.Everything.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.everything.contract.Everything.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.everything.my_base.multiplicative_identity() -> uint64:
    block@0: // L18
        return 1u

subroutine test_cases.everything.contract.Everything.__puya_arc4_router__() -> bool:
    block@0: // L37
        let tmp%0#0: bytes = (txna ApplicationArgs 0)
        switch tmp%0#0 {method "register(string)void" => block@1, method "close_out()void" => block@2, * => block@3}
    block@1: // register_route_L47
        let tmp%1#0: uint64 = (txn OnCompletion)
        let tmp%2#0: uint64 = (shl 1u tmp%1#0)
        let tmp%3#0: uint64 = (& tmp%2#0 3u)
        (assert tmp%3#0) // OnCompletion is not one of NoOp, OptIn
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%4#0) // can only call when not creating
        test_cases.everything.contract.Everything.register[routing]()
        fail
    block@2: // close_out_route_L69
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 CloseOut)
        (assert tmp%7#0) // OnCompletion is not CloseOut
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        (assert tmp%8#0) // can only call when not creating
        test_cases.everything.contract.Everything.close_out[routing]()
        fail
    block@3: // route_NoOp_L37
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        let tmp%13#0: bool = (txn ApplicationID)
        goto tmp%13#0 ? block@5 : block@10
    block@5: // call_NoOp_L37
        let tmp%14#0: bytes = (txna ApplicationArgs 0)
        switch tmp%14#0 {method "say_hello()string" => block@6, method "calculate(uint64,uint64)uint64" => block@7, * => block@8}
    block@6: // say_hello_route_L56
        test_cases.everything.contract.Everything.say_hello[routing]()
        fail
    block@7: // calculate_route_L64
        test_cases.everything.contract.Everything.calculate[routing]()
        fail
    block@8: // switch_case_default_L37
        fail
    block@10: // create_NoOp_L37
        let tmp%15#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%15#0: bool = (== tmp%15#0 method "create()void")
        (assert eq%tmp%15#0)
        test_cases.everything.contract.Everything.create[routing]()
        fail

subroutine test_cases.everything.contract.Everything.create[routing]() -> void:
    block@0: // L41
        test_cases.everything.contract.Everything._check_ban_list()
        test_cases.everything.my_base.MyBase.remember_creator()
        (app_global_put "counter" 0u)
        exit 1u

subroutine test_cases.everything.contract.Everything.register[routing]() -> void:
    block@0: // L47
        let name#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        test_cases.everything.contract.Everything._check_ban_list()
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 OptIn)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // if_body_L51
        let (sender_name#0: Encoded(len+utf8[]), sender_name_existed#0: bool) = (app_local_get_ex 0u 0u "name")
        goto sender_name_existed#0 ? block@5 : block@3
    block@3: // if_body_L53
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%1#0) // check self.counter exists
        let tmp%2#0: uint64 = test_cases.everything.my_base.multiplicative_identity()
        let tmp%3#0: uint64 = (+ maybe_value%1#0 tmp%2#0)
        (app_global_put "counter" tmp%3#0)
        goto block@5
    block@5: // after_if_else_L50
        (app_local_put 0u "name" name#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.say_hello[routing]() -> void:
    block@0: // L56
        test_cases.everything.contract.Everything._check_ban_list()
        let (name#0: Encoded(len+utf8[]), exists#0: bool) = (app_local_get_ex 0u 0u "name")
        goto exists#0 ? block@3 : block@2
    block@2: // if_body_L61
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Howdy stranger!")
        goto block@4
    block@3: // after_if_else_L60
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello, ")
        let total_length%0#0: uint64 = (len name#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) name#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%1#1 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%0#0)
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = len%0#0
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("!")
        let total_length%2#0: uint64 = (len tmp%2#0)
        let extract_to_end%2#0: bytes = ((extract 2 0) tmp%2#0)
        let concat%1#0: Encoded(len+utf8[]) = (concat replace%0#0 extract_to_end%2#0) // on error: max array length exceeded
        let total_length%3#0: uint64 = (len concat%1#0)
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = len%1#0
        let as_bytes%1#0: bytes[8] = (itob len%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        goto block@4
    block@4: // after_inlined_test_cases.everything.contract.Everything.say_hello_L56
        let tmp%0#0: Encoded(len+utf8[]) = Ï†(tmp%0#1 <- block@2, replace%1#0 <- block@3)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.calculate[routing]() -> void:
    block@0: // L64
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let c#0: Encoded(uint64) = test_cases.everything.my_base.MyMiddleBase.calculate(a#0, b#0)
        let tmp%1#1: uint64 = decode_bytes<uint64>(c#0)
        let tmp%2#0: uint64 = decode_bytes<uint64>(b#0)
        let tmp%3#0: uint64 = (* tmp%1#1 tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.close_out[routing]() -> void:
    block@0: // L69
        test_cases.everything.contract.Everything._remove_sender()
        exit 1u

subroutine test_cases.everything.contract.Everything._check_ban_list() -> void:
    block@0: // L77
        let tmp%0#0: account = (txn Sender)
        let tmp%2#0: bool = (!= tmp%0#0 addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)
        (assert tmp%2#0) // You are banned, goodbye
        return 

subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
    block@0: // L81
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%1#0: uint64 = (- maybe_value%0#0 1u)
        (app_global_put "counter" tmp%1#0)
        return 

subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: Encoded(uint64), b: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L13
        let tmp%0#0: uint64 = decode_bytes<uint64>(a#0)
        let tmp%1#0: uint64 = decode_bytes<uint64>(b#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        return tmp%3#0

subroutine test_cases.everything.my_base.MyBase.remember_creator() -> void:
    block@0: // L7
        let tmp%0#0: account = (txn Sender)
        (app_global_put "creator" tmp%0#0)
        return 