main test_cases.everything.contract.Everything.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#2)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@9, block@12, block@18, block@15, block@18, block@18, block@18, block@18, block@18, block@18, block@18][tmp%4#0] else goto block@18
    block@4: // switch_case_0_L37
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "register(string)void" => block@5, method "say_hello()string" => block@6, method "calculate(uint64,uint64)uint64" => block@7, * => block@8}
    block@5: // register_route_L47
        test_cases.everything.contract.Everything.register[routing]()
        goto block@8
    block@6: // say_hello_route_L56
        test_cases.everything.contract.Everything.say_hello[routing]()
        goto block@8
    block@7: // calculate_route_L64
        test_cases.everything.contract.Everything.calculate[routing]()
        goto block@8
    block@8: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L37
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create()void" => block@10, * => block@11}
    block@10: // create_route_L41
        test_cases.everything.contract.Everything.create[routing]()
        goto block@11
    block@11: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L37
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "register(string)void" => block@13, * => block@14}
    block@13: // register_route_L47
        test_cases.everything.contract.Everything.register[routing]()
        goto block@14
    block@14: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call OptIn
    block@15: // switch_case_4_L37
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "close_out()void" => block@16, * => block@17}
    block@16: // close_out_route_L69
        test_cases.everything.contract.Everything.close_out[routing]()
        goto block@17
    block@17: // switch_case_next_L37
        fail // this contract does not implement the given ABI method for call CloseOut
    block@18: // switch_case_default_L37
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.everything.contract.Everything.create[routing]() -> void:
    block@0: // L41
        let tmp%0#1: account = (txn Sender)
        let tmp%2#0: bool = (!= tmp%0#1 addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)
        (assert tmp%2#0) // You are banned, goodbye
        let tmp%0#0: account = (txn Sender)
        (app_global_put "creator" tmp%0#0)
        (app_global_put "counter" 0u)
        exit 1u

subroutine test_cases.everything.contract.Everything.register[routing]() -> void:
    block@0: // L47
        let name#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#1: account = (txn Sender)
        let tmp%2#0: bool = (!= tmp%0#1 addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)
        (assert tmp%2#0) // You are banned, goodbye
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 OptIn)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // if_body_L51
        let (sender_name#0: Encoded(len+utf8[]), sender_name_existed#0: bool) = (app_local_get_ex 0u 0u "name")
        goto sender_name_existed#0 ? block@5 : block@3
    block@3: // if_body_L53
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%1#0) // check self.counter exists
        let tmp%3#0: uint64 = (+ maybe_value%1#0 1u)
        (app_global_put "counter" tmp%3#0)
        goto block@5
    block@5: // after_if_else_L50
        (app_local_put 0u "name" name#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.say_hello[routing]() -> void:
    block@0: // L56
        let tmp%0#2: account = (txn Sender)
        let tmp%2#1: bool = (!= tmp%0#2 addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)
        (assert tmp%2#1) // You are banned, goodbye
        let (name#0: Encoded(len+utf8[]), exists#0: bool) = (app_local_get_ex 0u 0u "name")
        goto exists#0 ? block@3 : block@2
    block@2: // if_body_L61
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Howdy stranger!")
        goto block@4
    block@3: // after_if_else_L60
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello, ")
        let extract_to_end%0#0: bytes = ((extract 2 0) name#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%1#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("!")
        let extract_to_end%2#0: bytes = ((extract 2 0) tmp%2#0)
        let concat%1#0: Encoded(len+utf8[]) = (concat replace%0#0 extract_to_end%2#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let as_bytes%1#0: bytes[8] = (itob len%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        goto block@4
    block@4: // after_inlined_test_cases.everything.contract.Everything.say_hello_L56
        let tmp%0#0: Encoded(len+utf8[]) = Ï†(tmp%0#1 <- block@2, replace%1#0 <- block@3)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.calculate[routing]() -> void:
    block@0: // L64
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = decode_bytes<uint64>(a#0)
        let tmp%1#2: uint64 = decode_bytes<uint64>(b#0)
        let tmp%2#1: uint64 = (+ tmp%0#0 tmp%1#2)
        let tmp%3#0: uint64 = (* tmp%2#1 tmp%1#2)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.everything.contract.Everything.close_out[routing]() -> void:
    block@0: // L69
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%1#0: uint64 = (- maybe_value%0#0 1u)
        (app_global_put "counter" tmp%1#0)
        exit 1u