contract test_cases.everything.contract.Everything:
    program approval:
        subroutine test_cases.everything.contract.Everything.approval_program() -> uint64:
            block@0: // L37
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L38
                test_cases.everything.contract.Everything.__init__()
                goto block@2
            block@2: // entrypoint_L38
                let tmp%1#0: uint64 = (txn NumAppArgs)
                goto tmp%1#0 ? block@3 : block@11
            block@3: // abi_routing_L37
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create()void" => block@4, method "register(string)void" => block@5, method "say_hello()string" => block@6, method "calculate(uint64,uint64)uint64" => block@7, method "close_out()void" => block@8, * => block@11}
            block@4: // create_route_L41
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: uint64 = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: uint64 = (! tmp%5#0)
                (assert tmp%6#0) // is creating
                test_cases.everything.contract.Everything.create()
                return 1u
            block@5: // register_route_L47
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: uint64 = (shl 1u tmp%7#0)
                let tmp%9#0: uint64 = (& tmp%8#0 3u)
                (assert tmp%9#0) // OnCompletion is one of NoOp, OptIn
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                test_cases.everything.contract.Everything.register(tmp%11#0)
                return 1u
            block@6: // say_hello_route_L56
                let tmp%12#0: uint64 = (txn OnCompletion)
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0) // OnCompletion is NoOp
                let tmp%14#0: uint64 = (txn ApplicationID)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: bytes = test_cases.everything.contract.Everything.say_hello()
                let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
                (log tmp%16#0)
                return 1u
            block@7: // calculate_route_L64
                let tmp%17#0: uint64 = (txn OnCompletion)
                let tmp%18#0: uint64 = (! tmp%17#0)
                (assert tmp%18#0) // OnCompletion is NoOp
                let tmp%19#0: uint64 = (txn ApplicationID)
                (assert tmp%19#0) // is not creating
                let tmp%20#0: bytes = (txna ApplicationArgs 1)
                let tmp%21#0: bytes = (txna ApplicationArgs 2)
                let tmp%22#0: bytes = test_cases.everything.contract.Everything.calculate(tmp%20#0, tmp%21#0)
                let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
                (log tmp%23#0)
                return 1u
            block@8: // close_out_route_L69
                let tmp%24#0: uint64 = (txn OnCompletion)
                let tmp%25#0: uint64 = (== tmp%24#0 CloseOut)
                (assert tmp%25#0) // OnCompletion is CloseOut
                let tmp%26#0: uint64 = (txn ApplicationID)
                (assert tmp%26#0) // is not creating
                test_cases.everything.contract.Everything.close_out()
                return 1u
            block@11: // after_if_else_L37
                fail // reject transaction
        
        subroutine test_cases.everything.contract.Everything.create() -> void:
            block@0: // L42
                test_cases.everything.contract.Everything._check_ban_list()
                test_cases.everything.my_base.MyBase.remember_creator()
                (app_global_put "counter" 0u)
                return 
        
        subroutine test_cases.everything.contract.Everything._check_ban_list() -> void:
            block@0: // L78
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = test_cases.everything.contract.get_banned()
                let tmp%2#0: uint64 = (!= tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // You are banned, goodbye
                return 
        
        subroutine test_cases.everything.contract.get_banned() -> bytes:
            block@0: // L24
                return addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
        
        subroutine test_cases.everything.my_base.MyBase.remember_creator() -> void:
            block@0: // L8
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "creator" new_state_value%0#0)
                return 
        
        subroutine test_cases.everything.contract.Everything.register(name: bytes) -> void:
            block@0: // L48
                test_cases.everything.contract.Everything._check_ban_list()
                let tmp%0#0: uint64 = (txn OnCompletion)
                let tmp%1#0: uint64 = (== tmp%0#0 OptIn)
                goto tmp%1#0 ? block@1 : block@4
            block@1: // if_body_L50
                let (sender_name#0: any, sender_name_existed#0: uint64) = (app_local_get_ex 0u 0u "name")
                goto sender_name_existed#0 ? block@4 : block@2
            block@2: // if_body_L52
                let (app_global_get_ex_value%4#0: uint64, app_global_get_ex_did_exist%5#0: uint64) = (app_global_get_ex 0u "counter")
                (assert app_global_get_ex_did_exist%5#0) // check value exists
                let tmp%6#0: uint64 = test_cases.everything.my_base.multiplicative_identity()
                let new_state_value%7#0: uint64 = (+ app_global_get_ex_value%4#0 tmp%6#0)
                (app_global_put "counter" new_state_value%7#0)
                goto block@4
            block@4: // after_if_else_L50
                (app_local_put 0u "name" name#0)
                return 
        
        subroutine test_cases.everything.my_base.multiplicative_identity() -> uint64:
            block@0: // L19
                return 1u
        
        subroutine test_cases.everything.contract.Everything.say_hello() -> bytes:
            block@0: // L57
                test_cases.everything.contract.Everything._check_ban_list()
                let (name#0: any, exists#0: uint64) = (app_local_get_ex 0u 0u "name")
                goto exists#0 ? block@2 : block@1
            block@1: // if_body_L60
                return "\x00\x0fHowdy stranger!"
            block@2: // after_if_else_L60
                let array_length%2#0: uint64 = (extract_uint16 name#0 0u)
                let data%3#0: bytes = ((extract 2 0) name#0)
                let concat_result%4#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size("\x00\x07Hello, ", data%3#0, array_length%2#0)
                let array_length%5#0: uint64 = (extract_uint16 "\x00\x01!" 0u)
                let concat_result%7#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(concat_result%4#0, "!", array_length%5#0)
                return concat_result%7#0
        
        subroutine test_cases.everything.contract.Everything.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L65
                let c#0: bytes = test_cases.everything.my_base.MyMiddleBase.calculate(a#0, b#0)
                let tmp%0#0: uint64 = (btoi c#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let tmp%2#0: uint64 = (* tmp%0#0 tmp%1#0)
                let val_as_bytes%3#0: bytes = (itob tmp%2#0)
                return val_as_bytes%3#0
        
        subroutine test_cases.everything.my_base.MyMiddleBase.calculate(a: bytes, b: bytes) -> bytes:
            block@0: // L14
                let tmp%0#0: uint64 = (btoi a#0)
                let tmp%1#0: uint64 = (btoi b#0)
                let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let val_as_bytes%3#0: bytes = (itob tmp%2#0)
                return val_as_bytes%3#0
        
        subroutine test_cases.everything.contract.Everything.close_out() -> void:
            block@0: // L70
                test_cases.everything.contract.Everything._remove_sender()
                return 
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L82
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "counter")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let tmp%2#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%3#0: uint64 = (- app_global_get_ex_value%0#0 tmp%2#0)
                (app_global_put "counter" new_state_value%3#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L87
                return 1u
        
        subroutine test_cases.everything.contract.Everything.__init__() -> void:
            block@0: // L38
                return 
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_fixed_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L190
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_length#0)
                let new_length_header#0: bytes = ((extract 6 0) tmp%0#0)
                let tmp%1#0: bytes = ((extract 2 0) source#0)
                let tmp%2#0: bytes = (concat new_length_header#0 tmp%1#0)
                let tmp%3#0: bytes = (concat tmp%2#0 new_items_bytes#0)
                return tmp%3#0
    
    program clear-state:
        subroutine test_cases.everything.contract.Everything.clear_state_program() -> uint64:
            block@0: // L73
                test_cases.everything.contract.Everything._remove_sender()
                return 1u
        
        subroutine test_cases.everything.contract.Everything._remove_sender() -> void:
            block@0: // L82
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "counter")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let tmp%2#0: uint64 = test_cases.everything.contract.positive_one()
                let new_state_value%3#0: uint64 = (- app_global_get_ex_value%0#0 tmp%2#0)
                (app_global_put "counter" new_state_value%3#0)
                return 
        
        subroutine test_cases.everything.contract.positive_one() -> uint64:
            block@0: // L87
                return 1u