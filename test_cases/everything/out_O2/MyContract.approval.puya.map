{
  "version": 3,
  "sources": [
    "../contract.py",
    "../my_base.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAgCK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAcG;AAAA;AAAA;AAAA;AAKG;AALH;AAAA;AAAA;AAAA;AAdH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA3BL;;;AAAA;;;ACtB2B;AAAW;AAAA;AAAX;AAAA;;AAAA;AAAZ;ADoDY;AAAA;AAAZ;AAHV;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAuBU;;AAtDJ;AAsDI;AAAP;AApBuC;AAAxB;AAAA;AAAA;AAAA;AAAA;;AACZ;;;AACQ;;;;;;;;;;;;;;;;;;;AALd;AAAA;AAAA;AAAA;AAAA;;AAMU;AAAA;;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AANV;;;AATA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;;AA0Ce;;AAtDJ;AAsDI;AAAP;AA7BG;;AAAwB;AAAxB;AAAX;;;AACuE;AAAxB;AAAA;AAAA;AAAA;;AAChC;;;AACC;AAAA;AAAA;AAAA;ACjCL;ADiCK;AAAA;AAAA;AAAA;AACE;AAAV;AAAA;;AAAA;AAPH;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsCU;;AAtDJ;AAsDI;AAAP;ACtEA;;;;;;;;;AAAe;;AAAf;ADoCA;AAAe;AAAf;AAJH;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.everything.contract.Everything.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"counter\" base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ) \"name\" 0x151f7c75"
    },
    "58": {
      "op": "intc_1 // 0",
      "stack_out": [
        "name#0"
      ]
    },
    "59": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#2"
      ]
    },
    "61": {
      "op": "bz main_after_if_else@16",
      "stack_out": [
        "name#0"
      ]
    },
    "64": {
      "op": "pushbytess 0x4c5c61ba 0xbd6099e5 0x5d5c84c7 0xfd07264e 0x1658aa2f // method \"create()void\", method \"register(string)void\", method \"say_hello()string\", method \"calculate(uint64,uint64)uint64\", method \"close_out()void\""
    },
    "91": {
      "op": "txna ApplicationArgs 0"
    },
    "94": {
      "op": "match main_create_route@5 main_register_route@6 main_say_hello_route@10 main_calculate_route@14 main_close_out_route@15"
    },
    "106": {
      "block": "main_after_if_else@16",
      "stack_in": [
        "name#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "107": {
      "op": "return"
    },
    "108": {
      "block": "main_close_out_route@15",
      "stack_in": [
        "name#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%27#0"
      ]
    },
    "110": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%27#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%27#0",
        "CloseOut"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%28#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": [
        "name#0"
      ]
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%29#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "name#0"
      ]
    },
    "117": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "118": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"counter\""
      ]
    },
    "119": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "120": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "name#0",
        "maybe_value%0#0"
      ]
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "name#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "122": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "name#0",
        "new_state_value%0#0"
      ]
    },
    "123": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "name#0",
        "new_state_value%0#0",
        "\"counter\""
      ]
    },
    "124": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "\"counter\"",
        "new_state_value%0#0"
      ]
    },
    "125": {
      "op": "app_global_put",
      "stack_out": [
        "name#0"
      ]
    },
    "126": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "127": {
      "op": "return"
    },
    "128": {
      "block": "main_calculate_route@14",
      "stack_in": [
        "name#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%19#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%20#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "name#0"
      ]
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%21#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "name#0"
      ]
    },
    "135": {
      "op": "txna ApplicationArgs 2"
    },
    "138": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "name#0",
        "b#0",
        "a#0"
      ]
    },
    "141": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "name#0",
        "b#0",
        "tmp%0#2"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%0#2",
        "b#0"
      ]
    },
    "143": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#3"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#2",
        "tmp%1#3"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "tmp%1#3",
        "tmp%0#2"
      ]
    },
    "145": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#3",
        "tmp%1#3 (copy)"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#3",
        "tmp%0#2",
        "tmp%1#3 (copy)"
      ]
    },
    "147": {
      "op": "+",
      "defined_out": [
        "tmp%1#3",
        "to_encode%0#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#3",
        "to_encode%0#0"
      ]
    },
    "148": {
      "op": "itob",
      "defined_out": [
        "c#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#3",
        "c#0"
      ]
    },
    "149": {
      "op": "btoi",
      "stack_out": [
        "name#0",
        "tmp%1#3",
        "tmp%0#2"
      ]
    },
    "150": {
      "op": "*",
      "stack_out": [
        "name#0",
        "to_encode%0#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "name#0",
        "val_as_bytes%0#0"
      ]
    },
    "152": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "name#0",
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%26#0"
      ]
    },
    "155": {
      "op": "log",
      "stack_out": [
        "name#0"
      ]
    },
    "156": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "157": {
      "op": "return"
    },
    "158": {
      "block": "main_say_hello_route@10",
      "stack_in": [
        "name#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%13#0"
      ]
    },
    "160": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%14#0"
      ]
    },
    "161": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "name#0"
      ]
    },
    "162": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%15#0"
      ]
    },
    "164": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "name#0"
      ]
    },
    "165": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6"
      ]
    },
    "167": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "168": {
      "op": "!=",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#1"
      ]
    },
    "169": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": [
        "name#0"
      ]
    },
    "170": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "171": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "0",
        "0"
      ]
    },
    "172": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "0",
        "\"name\""
      ]
    },
    "173": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "name#0",
        "exists#0"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "exists#0",
        "name#0"
      ]
    },
    "175": {
      "op": "bury 2",
      "defined_out": [
        "exists#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "exists#0"
      ]
    },
    "177": {
      "op": "bnz main_after_if_else@12",
      "stack_out": [
        "name#0"
      ]
    },
    "180": {
      "op": "pushbytes 0x000f486f77647920737472616e67657221"
    },
    "199": {
      "block": "main_after_inlined_test_cases.everything.contract.Everything.say_hello@13",
      "stack_in": [
        "name#0",
        "tmp%17#0"
      ],
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "name#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "200": {
      "op": "swap",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "name#0",
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%18#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": [
        "name#0"
      ]
    },
    "203": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "204": {
      "op": "return"
    },
    "205": {
      "block": "main_after_if_else@12",
      "stack_in": [
        "name#0"
      ],
      "op": "dup",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "name#0"
      ]
    },
    "206": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "209": {
      "op": "pushbytes 0x48656c6c6f2c20",
      "defined_out": [
        "0x48656c6c6f2c20",
        "expr_value_trimmed%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%1#0",
        "0x48656c6c6f2c20"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "0x48656c6c6f2c20",
        "expr_value_trimmed%1#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0"
      ]
    },
    "220": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "221": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "223": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concat_result%0#0"
      ]
    },
    "228": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "231": {
      "op": "pushbytes 0x21",
      "defined_out": [
        "0x21",
        "expr_value_trimmed%2#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "expr_value_trimmed%2#0",
        "0x21"
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0"
      ]
    },
    "235": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "236": {
      "op": "len",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "237": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "238": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "name#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%17#0"
      ]
    },
    "243": {
      "op": "b main_after_inlined_test_cases.everything.contract.Everything.say_hello@13"
    },
    "246": {
      "block": "main_register_route@6",
      "stack_in": [
        "name#0"
      ],
      "op": "intc_0 // 1"
    },
    "247": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "name#0",
        "1",
        "tmp%7#0"
      ]
    },
    "249": {
      "op": "shl",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%8#0"
      ]
    },
    "250": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%8#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%8#0",
        "3"
      ]
    },
    "252": {
      "op": "&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%9#0"
      ]
    },
    "253": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": [
        "name#0"
      ]
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%10#0"
      ]
    },
    "256": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "name#0"
      ]
    },
    "257": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "name#0"
      ]
    },
    "260": {
      "op": "bury 1",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "262": {
      "op": "txn Sender",
      "defined_out": [
        "name#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6"
      ]
    },
    "264": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "name#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "265": {
      "op": "!=",
      "defined_out": [
        "name#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#1"
      ]
    },
    "266": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": [
        "name#0"
      ]
    },
    "267": {
      "op": "txn OnCompletion",
      "defined_out": [
        "name#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#2"
      ]
    },
    "269": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "name#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#2",
        "OptIn"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "name#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "name#0",
        "tmp%1#2"
      ]
    },
    "271": {
      "op": "bz main_after_if_else@9",
      "stack_out": [
        "name#0"
      ]
    },
    "274": {
      "op": "intc_1 // 0"
    },
    "275": {
      "op": "dup"
    },
    "276": {
      "op": "bytec_2 // \"name\""
    },
    "277": {
      "op": "app_local_get_ex"
    },
    "278": {
      "op": "bury 1"
    },
    "280": {
      "op": "bnz main_after_if_else@9"
    },
    "283": {
      "op": "intc_1 // 0"
    },
    "284": {
      "op": "bytec_0 // \"counter\""
    },
    "285": {
      "op": "app_global_get_ex"
    },
    "286": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists"
    },
    "287": {
      "op": "intc_0 // 1"
    },
    "288": {
      "op": "+"
    },
    "289": {
      "op": "bytec_0 // \"counter\""
    },
    "290": {
      "op": "swap"
    },
    "291": {
      "op": "app_global_put"
    },
    "292": {
      "block": "main_after_if_else@9",
      "stack_in": [
        "name#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "name#0",
        "0"
      ]
    },
    "293": {
      "op": "bytec_2 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"name\""
      ]
    },
    "294": {
      "op": "dig 2",
      "defined_out": [
        "\"name\"",
        "0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "0",
        "\"name\"",
        "name#0"
      ]
    },
    "296": {
      "op": "app_local_put",
      "stack_out": [
        "name#0"
      ]
    },
    "297": {
      "op": "intc_0 // 1",
      "defined_out": [
        "name#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "298": {
      "op": "return"
    },
    "299": {
      "block": "main_create_route@5",
      "stack_in": [
        "name#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%3#0"
      ]
    },
    "301": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%4#0"
      ]
    },
    "302": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "name#0"
      ]
    },
    "303": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%5#0"
      ]
    },
    "305": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%6#0"
      ]
    },
    "306": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "name#0"
      ]
    },
    "307": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6"
      ]
    },
    "309": {
      "op": "bytec_1 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "tmp%0#6"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#6",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "310": {
      "op": "!=",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#1"
      ]
    },
    "311": {
      "error": "You are banned, goodbye",
      "op": "assert // You are banned, goodbye",
      "stack_out": [
        "name#0"
      ]
    },
    "312": {
      "op": "pushbytes \"creator\""
    },
    "321": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "new_state_value%0#2"
      ],
      "stack_out": [
        "name#0",
        "\"creator\"",
        "new_state_value%0#2"
      ]
    },
    "323": {
      "op": "app_global_put",
      "stack_out": [
        "name#0"
      ]
    },
    "324": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "name#0",
        "\"counter\""
      ]
    },
    "325": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "name#0",
        "\"counter\"",
        "0"
      ]
    },
    "326": {
      "op": "app_global_put",
      "stack_out": [
        "name#0"
      ]
    },
    "327": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "name#0",
        "tmp%0#1"
      ]
    },
    "328": {
      "op": "return"
    }
  }
}