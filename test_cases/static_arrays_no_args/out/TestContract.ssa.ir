contract test_cases.static_arrays_no_args.contract.TestContract:
    program approval:
        subroutine test_cases.static_arrays_no_args.contract.TestContract.approval_program() -> bool:
            block@0: // L28
                let result%0#0: bytes = (concat 0x 0x00)
                let array_data%0#0: bytes = (concat 0x result%0#0)
                let result%1#0: bytes = (concat 0x 0x00)
                let array_data%1#0: bytes = (concat 0x result%1#0)
                let tmp%0#0: bool = (== array_data%0#0 array_data%1#0)
                (assert tmp%0#0)
                let tmp%1#0: bytes = (global ZeroAddress)
                let tmp%2#0: bytes = (global ZeroAddress)
                let result%2#0: bytes = (concat 0x tmp%1#0)
                let result%3#0: bytes = (concat result%2#0 tmp%2#0)
                let array_data%2#0: bytes = (concat 0x result%3#0)
                let tmp%3#0: bytes = (global ZeroAddress)
                let tmp%4#0: bytes = (global ZeroAddress)
                let result%4#0: bytes = (concat 0x tmp%3#0)
                let result%5#0: bytes = (concat result%4#0 tmp%4#0)
                let array_data%3#0: bytes = (concat 0x result%5#0)
                let tmp%5#0: bool = (== array_data%2#0 array_data%3#0)
                (assert tmp%5#0)
                let tmp%6#0: bytes = (global ZeroAddress)
                let tmp%7#0: bytes = (global ZeroAddress)
                let result%6#0: bytes = (concat 0x tmp%6#0)
                let result%7#0: bytes = (concat result%6#0 tmp%7#0)
                let array_data%4#0: bytes = (concat 0x result%7#0)
                let tmp%8#0: bytes = (global ZeroAddress)
                let tmp%9#0: bytes = (global ZeroAddress)
                let result%8#0: bytes = (concat 0x tmp%8#0)
                let result%9#0: bytes = (concat result%8#0 tmp%9#0)
                let array_data%5#0: bytes = (concat 0x result%9#0)
                let tmp%10#0: bytes = (global ZeroAddress)
                let tmp%11#0: bytes = (global ZeroAddress)
                let result%10#0: bytes = (concat 0x tmp%10#0)
                let result%11#0: bytes = (concat result%10#0 tmp%11#0)
                let array_data%6#0: bytes = (concat 0x result%11#0)
                let result%12#0: bytes = (concat 0x array_data%4#0)
                let result%13#0: bytes = (concat result%12#0 array_data%5#0)
                let result%14#0: bytes = (concat result%13#0 array_data%6#0)
                let array_data%7#0: bytes = (concat 0x result%14#0)
                let tmp%12#0: bytes = (global ZeroAddress)
                let tmp%13#0: bytes = (global ZeroAddress)
                let result%15#0: bytes = (concat 0x tmp%12#0)
                let result%16#0: bytes = (concat result%15#0 tmp%13#0)
                let array_data%8#0: bytes = (concat 0x result%16#0)
                let tmp%14#0: bytes = (global ZeroAddress)
                let tmp%15#0: bytes = (global ZeroAddress)
                let result%17#0: bytes = (concat 0x tmp%14#0)
                let result%18#0: bytes = (concat result%17#0 tmp%15#0)
                let array_data%9#0: bytes = (concat 0x result%18#0)
                let tmp%16#0: bytes = (global ZeroAddress)
                let tmp%17#0: bytes = (global ZeroAddress)
                let result%19#0: bytes = (concat 0x tmp%16#0)
                let result%20#0: bytes = (concat result%19#0 tmp%17#0)
                let array_data%10#0: bytes = (concat 0x result%20#0)
                let result%21#0: bytes = (concat 0x array_data%8#0)
                let result%22#0: bytes = (concat result%21#0 array_data%9#0)
                let result%23#0: bytes = (concat result%22#0 array_data%10#0)
                let array_data%11#0: bytes = (concat 0x result%23#0)
                let tmp%18#0: bool = (== array_data%7#0 array_data%11#0)
                (assert tmp%18#0)
                let tmp%19#0: bytes = (global ZeroAddress)
                let a#0: uint64 = 0u
                let b#0: uint64 = 0u
                let c#0: bytes = tmp%19#0
                let result%24#0: bytes = (concat 0x 0x00000000)
                let array_data%12#0: bytes = (concat 0x result%24#0)
                let result%25#0: bytes = (concat 0x 0x00000000)
                let array_data%13#0: bytes = (concat 0x result%25#0)
                let tmp%20#0: bool = (== array_data%12#0 array_data%13#0)
                (assert tmp%20#0)
                let array_data%14#0: bytes = (concat 0x0000 0x)
                let as_bytes%0#0: bytes = (itob 2u)
                let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let result%26#0: bytes = (concat 0x next_item_head%0#0)
                let next_item_len%0#0: uint64 = (len array_data%14#0)
                let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
                let result%27#0: bytes = (concat result%26#0 array_data%14#0)
                let array_data%15#0: bytes = (concat 0x result%27#0)
                let array_data%16#0: bytes = (concat 0x0000 0x)
                let as_bytes%1#0: bytes = (itob 2u)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let result%28#0: bytes = (concat 0x next_item_head%1#0)
                let next_item_len%1#0: uint64 = (len array_data%16#0)
                let tail_offset%1#0: uint64 = (+ 2u next_item_len%1#0)
                let result%29#0: bytes = (concat result%28#0 array_data%16#0)
                let array_data%17#0: bytes = (concat 0x result%29#0)
                let tmp%21#0: bool = (== array_data%15#0 array_data%17#0)
                (assert tmp%21#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.static_arrays_no_args.contract.TestContract.clear_state_program() -> bool:
            block@0: // L50
                return 1u