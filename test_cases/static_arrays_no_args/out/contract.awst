struct TestStruct {
  b_val: arc4.bool
  u_val: arc4.uint8
  s_val_1: arc4.dynamic_array<arc4.uint8>
  s_val_2: arc4.dynamic_array<arc4.uint8>
}

contract TestContract
{
  approval_program(): bool
  {
    assert(new arc4.static_array<arc4.uint8, 1>(0arc4u8) == new arc4.static_array<arc4.uint8, 1>(0arc4u8))
    assert(new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()) == new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()))
    assert(new arc4.static_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>, 3>(new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()), new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()), new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>())) == new arc4.static_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>, 3>(new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()), new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>()), new arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>(global<ZeroAddress>(), global<ZeroAddress>())))
    (a, b, c): tuple<application,asset,account> = (reinterpret_cast<application>(0u), reinterpret_cast<asset>(0u), global<ZeroAddress>())
    assert(new arc4.static_array<arc4.uint32, 1>(0arc4u32) == new arc4.static_array<arc4.uint32, 1>(0arc4u32))
    assert(new arc4.static_array<arc4.dynamic_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>>, 1>(new arc4.dynamic_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>>()) == new arc4.static_array<arc4.dynamic_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>>, 1>(new arc4.dynamic_array<arc4.static_array<arc4.static_array<arc4.uint8, 32>, 2>>()))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}