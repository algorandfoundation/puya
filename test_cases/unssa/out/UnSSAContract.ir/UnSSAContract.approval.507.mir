// Op                                                                           Stack (out)
// test_cases.unssa.contract.UnSSAContract.approval_program() -> uint64:
subroutine main:
    declare uint64 i#0, j#0, result1#0, result2#0, x#0, y#0
    block@0:                                                                    (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0 |
        // unssa/contract.py:34
        // a = UInt64(1)
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0 | a#0
        f-store a#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@41                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_top@41:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:35
        // while a < 100:
        f-load a#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0
        int 100                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,100
        <                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%0#6
        bz after_while@47 ; b while_body@42                                     (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_body@42:                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:36
        // if a % 105 == 0:
        f-load a#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0
        int 105                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,105
        %                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%1#6
        bz while_top@41 ; b after_if_else@44                                    (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    after_if_else@44:                                                           (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:38
        // if not a % 21:
        f-load a#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0
        int 21                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,21
        %                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%3#3
        bz after_while@47 ; b after_if_else@46                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    after_if_else@46:                                                           (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:40
        // a += 1
        f-load a#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,1
        +                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0
        f-store a#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@41                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    after_while@47:                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:7
        // result1 = test_swap(UInt64(1))
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 1
        callsub test_swap                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0
        l-store-copy result1#0 0                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0,result1#0
        f-store result1#0                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0
        // unssa/contract.py:8
        // log(op.itob(result1))
        l-load-copy result1#0 0                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0,result1#0 (copy)
        itob                                                                    (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0,tmp%1#0
        log                                                                     (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0
        // unssa/contract.py:9
        // assert 1 <= result1 <= 2
        l-load result1#0 0                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0
        bz bool_false@3 ; b and_contd@1                                         (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    and_contd@1:                                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:9
        // assert 1 <= result1 <= 2
        f-load result1#0                                                        (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0
        int 2                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result1#0,2
        <=                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%3#0
        bz bool_false@3 ; b bool_true@2                                         (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    bool_true@2:                                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%0#0
        x-store and_result%0#0                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%0#0 |
        b bool_merge@4                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%0#0 |

    bool_false@3:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        int 0                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%0#0
        x-store and_result%0#0                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%0#0 |
        b bool_merge@4                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%0#0 |

    bool_merge@4:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%0#0 |
        // unssa/contract.py:9
        // assert 1 <= result1 <= 2
        x-load and_result%0#0                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%0#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:10
        // result2 = test_swap(UInt64(2))
        int 2                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 2
        callsub test_swap                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0
        l-store-copy result2#0 0                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0,result2#0
        f-store result2#0                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0
        // unssa/contract.py:11
        // log(op.itob(result2))
        l-load-copy result2#0 0                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0,result2#0 (copy)
        itob                                                                    (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0,tmp%5#0
        log                                                                     (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0
        // unssa/contract.py:12
        // assert 1 <= result2 <= 2
        l-load result2#0 0                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0
        bz bool_false@7 ; b and_contd@5                                         (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    and_contd@5:                                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:12
        // assert 1 <= result2 <= 2
        f-load result2#0                                                        (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0
        int 2                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | result2#0,2
        <=                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%7#0
        bz bool_false@7 ; b bool_true@6                                         (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    bool_true@6:                                                                (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%1#0
        x-store and_result%1#0                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%1#0 |
        b bool_merge@8                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%1#0 |

    bool_false@7:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        int 0                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%1#0
        x-store and_result%1#0                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%1#0 |
        b bool_merge@8                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%1#0 |

    bool_merge@8:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | (𝕏) and_result%1#0 |
        // unssa/contract.py:12
        // assert 1 <= result2 <= 2
        x-load and_result%1#0                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | and_result%1#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:13
        // test_swap_loop(UInt64(7), UInt64(11))
        int 7                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | i#0
        f-store i#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        int 11                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | j#0
        f-store j#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:58
        // x = UInt64(1)
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        f-store x#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:59
        // y = UInt64(2)
        int 2                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | y#0
        f-store y#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@10                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_top@10:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:60
        // while i > 0:
        f-load i#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | i#0
        bz after_while@15 ; b while_top@12                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_top@12:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:61
        // while j > 0:
        f-load j#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | j#0
        bz after_while@14 ; b while_body@13                                     (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_body@13:                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:65
        // j = j - 1
        f-load j#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | j#0
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | j#0,1
        -                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | j#0
        f-store j#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        f-load y#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | parcopy%0#0
        f-load x#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | parcopy%0#0,y#0
        f-store y#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | parcopy%0#0
        l-load parcopy%0#0 0                                                    (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        f-store x#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@12                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    after_while@14:                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:66
        // i = i - 1
        f-load i#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | i#0
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | i#0,1
        -                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | i#0
        f-store i#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@10                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    after_while@15:                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:14
        // assert test_param_update_with_reentrant_entry_block(UInt64(0)) == 10
        int 0                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        f-store x#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        b while_top@18                                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    while_top@18:                                                               (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:80
        // x = x + 1
        f-load x#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0,1
        +                                                                       (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        l-store-copy x#0 0                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0,x#0
        f-store x#0                                                             (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        // unssa/contract.py:81
        // if x >= 10:
        l-load x#0 0                                                            (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        int 10                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0,10
        >=                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%1#2
        bz while_top@18 ; b if_body@20                                          (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |

    if_body@20:                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:14
        // assert test_param_update_with_reentrant_entry_block(UInt64(0)) == 10
        f-load x#0                                                              (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0
        int 10                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | x#0,10
        ==                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%9#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:19
        // (a, b) = test_tuple_swap(UInt64(100), UInt64(200), UInt64(0))
        int 100                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100
        int 200                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100,200
        int 0                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100,200,0
        callsub test_tuple_swap                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,b#0
        // unssa/contract.py:20
        // assert a == UInt64(100)
        l-load a#0 1                                                            (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,a#0
        int 100                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,a#0,100
        ==                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,tmp%12#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0
        // unssa/contract.py:21
        // assert b == UInt64(200)
        l-load b#0 0                                                            (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0
        int 200                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,200
        ==                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%13#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:22
        // (a, b) = test_tuple_swap(UInt64(100), UInt64(200), UInt64(1))
        int 100                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100
        int 200                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100,200
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 100,200,1
        callsub test_tuple_swap                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | a#0,b#0
        // unssa/contract.py:23
        // assert a == UInt64(200)
        l-load a#0 1                                                            (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,a#0
        int 200                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,a#0,200
        ==                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,tmp%16#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0
        // unssa/contract.py:24
        // assert b == UInt64(100)
        l-load b#0 0                                                            (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0
        int 100                                                                 (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | b#0,100
        ==                                                                      (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | tmp%17#0
        assert                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |
        // unssa/contract.py:26
        // return True
        int 1                                                                   (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 | 1
        return                                                                  (𝕗) i#0,j#0,result1#0,result2#0,x#0,y#0,a#0 |


// test_cases.unssa.contract.test_swap(i: uint64) -> uint64:
subroutine test_swap:
    test_swap_block@0:                                                          (𝕡) i#0 |
        // unssa/contract.py:46
        // x = UInt64(1)
        int 1                                                                   (𝕡) i#0 | x#0
        f-store x#0                                                             (𝕡) i#0 | (𝕗) x#0 |
        // unssa/contract.py:47
        // y = UInt64(2)
        int 2                                                                   (𝕡) i#0 | (𝕗) x#0 | y#0
        f-store y#0                                                             (𝕡) i#0 | (𝕗) x#0,y#0 |
        b test_swap_while_top@1                                                 (𝕡) i#0 | (𝕗) x#0,y#0 |

    test_swap_while_top@1:                                                      (𝕡) i#0 | (𝕗) x#0,y#0 |
        // unssa/contract.py:48
        // while i > 0:
        p-load i#0                                                              (𝕡) i#0 | (𝕗) x#0,y#0 | i#0 (copy)
        bz test_swap_after_while@3 ; b test_swap_while_body@2                   (𝕡) i#0 | (𝕗) x#0,y#0 |

    test_swap_while_body@2:                                                     (𝕡) i#0 | (𝕗) x#0,y#0 |
        // unssa/contract.py:52
        // i = i - 1
        p-load i#0                                                              (𝕡) i#0 | (𝕗) x#0,y#0 | i#0 (copy)
        int 1                                                                   (𝕡) i#0 | (𝕗) x#0,y#0 | i#0 (copy),1
        -                                                                       (𝕡) i#0 | (𝕗) x#0,y#0 | i#0
        p-store i#0                                                             (𝕡) i#0 | (𝕗) x#0,y#0 |
        f-load y#0                                                              (𝕡) i#0 | (𝕗) x#0,y#0 | parcopy%0#0
        f-load x#0                                                              (𝕡) i#0 | (𝕗) x#0,y#0 | parcopy%0#0,y#0
        f-store y#0                                                             (𝕡) i#0 | (𝕗) x#0,y#0 | parcopy%0#0
        l-load parcopy%0#0 0                                                    (𝕡) i#0 | (𝕗) x#0,y#0 | x#0
        f-store x#0                                                             (𝕡) i#0 | (𝕗) x#0,y#0 |
        b test_swap_while_top@1                                                 (𝕡) i#0 | (𝕗) x#0,y#0 |

    test_swap_after_while@3:                                                    (𝕡) i#0 | (𝕗) x#0,y#0 |
        // unssa/contract.py:53
        // return x
        f-load x#0                                                              (𝕡) i#0 | (𝕗) x#0,y#0 | x#0
        retsub                                                                  x#0


// test_cases.unssa.contract.test_tuple_swap(a: uint64, b: uint64, i: uint64) -> uint64, uint64:
subroutine test_tuple_swap:
    test_tuple_swap_block@0:                                                    (𝕡) a#0,b#0,i#0 |
        // unssa/contract.py:72
        // for _item in urange(i):
        int 0                                                                   (𝕡) a#0,b#0,i#0 | _item#0
        f-store _item#0                                                         (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        b test_tuple_swap_for_header@1                                          (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |

    test_tuple_swap_for_header@1:                                               (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        // unssa/contract.py:72
        // for _item in urange(i):
        f-load _item#0                                                          (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | _item#0
        p-load i#0                                                              (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | _item#0,i#0 (copy)
        <                                                                       (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | continue_looping%0#0
        bz test_tuple_swap_after_for@4 ; b test_tuple_swap_for_body@2           (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |

    test_tuple_swap_for_body@2:                                                 (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        // unssa/contract.py:72
        // for _item in urange(i):
        f-load _item#0                                                          (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | _item#0
        int 1                                                                   (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | _item#0,1
        +                                                                       (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | _item#0
        f-store _item#0                                                         (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        p-load a#0                                                              (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | parcopy%0#0
        p-load b#0                                                              (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | parcopy%0#0,b#0 (copy)
        p-store a#0                                                             (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | parcopy%0#0
        l-load parcopy%0#0 0                                                    (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | parcopy%0#0
        p-store b#0                                                             (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        b test_tuple_swap_for_header@1                                          (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |

    test_tuple_swap_after_for@4:                                                (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 |
        // unssa/contract.py:74
        // return a, b
        p-load a#0                                                              (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | a#0 (copy)
        p-load b#0                                                              (𝕡) a#0,b#0,i#0 | (𝕗) _item#0 | a#0 (copy),b#0 (copy)
        retsub                                                                  a#0 (copy),b#0 (copy)


