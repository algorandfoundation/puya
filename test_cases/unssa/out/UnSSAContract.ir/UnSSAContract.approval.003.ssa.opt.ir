main test_cases.unssa.contract.UnSSAContract.approval_program:
    block@0: // L5
        let a#4: uint64 = 1u
        goto block@41
    block@41: // while_top_L35
        let a#5: uint64 = φ(a#4 <- block@0, a#5 <- block@43, a#6 <- block@46)
        let tmp%0#6: bool = (< a#5 100u)
        goto tmp%0#6 ? block@42 : block@47
    block@42: // while_body_L36
        let tmp%1#6: uint64 = (% a#5 105u)
        goto tmp%1#6 ? block@44 : block@43
    block@43: // if_body_L37
        goto block@41
    block@44: // after_if_else_L36
        let tmp%3#3: uint64 = (% a#5 21u)
        goto tmp%3#3 ? block@46 : block@47
    block@46: // after_if_else_L38
        let a#6: uint64 = (+ a#5 1u)
        goto block@41
    block@47: // after_while_L35
        let result1#0: uint64 = test_cases.unssa.contract.test_swap(1u)
        let tmp%1#0: bytes = (itob result1#0)
        (log tmp%1#0)
        goto result1#0 ? block@1 : block@3
    block@1: // and_contd_L9
        let tmp%3#0: bool = (<= result1#0 2u)
        goto tmp%3#0 ? block@2 : block@3
    block@2: // bool_true_L9
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L9
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L9
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2)
        let result2#0: uint64 = test_cases.unssa.contract.test_swap(2u)
        let tmp%5#0: bytes = (itob result2#0)
        (log tmp%5#0)
        goto result2#0 ? block@5 : block@7
    block@5: // and_contd_L12
        let tmp%7#0: bool = (<= result2#0 2u)
        goto tmp%7#0 ? block@6 : block@7
    block@6: // bool_true_L12
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L12
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L12
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2)
        let i#0: uint64 = 7u
        let j#0: uint64 = 11u
        let x#0: uint64 = 1u
        let y#0: uint64 = 2u
        goto block@10
    block@10: // while_top_L60
        let i#1: uint64 = φ(i#0 <- block@8, i#3 <- block@14)
        let j#3: uint64 = φ(j#0 <- block@8, j#1 <- block@14)
        let x#3: uint64 = φ(x#0 <- block@8, x#1 <- block@14)
        let y#3: uint64 = φ(y#0 <- block@8, y#1 <- block@14)
        goto i#1 ? block@11 : block@15
    block@11: // while_body_L61
        goto block@12
    block@12: // while_top_L61
        let j#1: uint64 = φ(j#3 <- block@11, j#2 <- block@13)
        let x#1: uint64 = φ(x#3 <- block@11, y#1 <- block@13)
        let y#1: uint64 = φ(y#3 <- block@11, x#1 <- block@13)
        goto j#1 ? block@13 : block@14
    block@13: // while_body_L62
        let j#2: uint64 = (- j#1 1u)
        goto block@12
    block@14: // after_while_L61
        let i#3: uint64 = (- i#1 1u)
        goto block@10
    block@15: // after_while_L60
        let x#4: uint64 = 0u
        goto block@18
    block@18: // while_top_L79
        let x#5: uint64 = φ(x#4 <- block@15, x#6 <- block@21)
        let x#6: uint64 = (+ x#5 1u)
        let tmp%1#2: bool = (>= x#6 10u)
        goto tmp%1#2 ? block@20 : block@21
    block@20: // if_body_L82
        let tmp%9#0: bool = (== x#6 10u)
        (assert tmp%9#0)
        let (a#0: uint64, b#0: uint64) = test_cases.unssa.contract.test_tuple_swap(100u, 200u, 0u)
        let tmp%12#0: bool = (== a#0 100u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== b#0 200u)
        (assert tmp%13#0)
        let (a#1: uint64, b#1: uint64) = test_cases.unssa.contract.test_tuple_swap(100u, 200u, 1u)
        let tmp%16#0: bool = (== a#1 200u)
        (assert tmp%16#0)
        let tmp%17#0: bool = (== b#1 100u)
        (assert tmp%17#0)
        return 1u
    block@21: // after_if_else_L81
        goto block@18

subroutine test_cases.unssa.contract.test_swap(i: uint64) -> uint64:
    block@0: // L44
        let x#0: uint64 = 1u
        let y#0: uint64 = 2u
        goto block@1
    block@1: // while_top_L48
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let x#1: uint64 = φ(x#0 <- block@0, y#1 <- block@2)
        let y#1: uint64 = φ(y#0 <- block@0, x#1 <- block@2)
        goto i#1 ? block@2 : block@3
    block@2: // while_body_L49
        let i#2: uint64 = (- i#1 1u)
        goto block@1
    block@3: // after_while_L48
        return x#1

subroutine test_cases.unssa.contract.test_tuple_swap(a: uint64, b: uint64, i: uint64) -> <uint64, uint64>:
    block@0: // L70
        let value_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L72
        let _item#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@2)
        let b#1: uint64 = φ(b#0 <- block@0, a#1 <- block@2)
        let a#1: uint64 = φ(a#0 <- block@0, b#1 <- block@2)
        let continue_looping%0#0: bool = (< _item#0 i#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L73
        let value_internal%0#2: uint64 = (+ _item#0 1u)
        goto block@1
    block@4: // after_for_L72
        return a#1 b#1