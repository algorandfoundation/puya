contract test_cases.unssa.contract.UnSSAContract:
    program approval:
        subroutine test_cases.unssa.contract.UnSSAContract.approval_program() -> bool:
            block@0: // L5
                test_cases.unssa.contract.test_self_ref_phi()
                let result1#0: uint64 = test_cases.unssa.contract.test_swap(1u)
                let tmp%0#0: bytes = (itob result1#0)
                (log tmp%0#0)
                let tmp%1#0: bool = (>= result1#0 1u)
                goto tmp%1#0 ? block@1 : block@3
            block@1: // and_contd_L9
                let tmp%2#0: bool = (<= result1#0 2u)
                goto tmp%2#0 ? block@2 : block@3
            block@2: // bool_true_L9
                let and_result%0#0: bool = 1u
                goto block@4
            block@3: // bool_false_L9
                let and_result%0#1: bool = 0u
                goto block@4
            block@4: // bool_merge_L9
                let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
                (assert and_result%0#2)
                let result2#0: uint64 = test_cases.unssa.contract.test_swap(2u)
                let tmp%3#0: bytes = (itob result2#0)
                (log tmp%3#0)
                let tmp%4#0: bool = (>= result2#0 1u)
                goto tmp%4#0 ? block@5 : block@7
            block@5: // and_contd_L12
                let tmp%5#0: bool = (<= result2#0 2u)
                goto tmp%5#0 ? block@6 : block@7
            block@6: // bool_true_L12
                let and_result%1#0: bool = 1u
                goto block@8
            block@7: // bool_false_L12
                let and_result%1#1: bool = 0u
                goto block@8
            block@8: // bool_merge_L12
                let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
                (assert and_result%1#2)
                test_cases.unssa.contract.test_swap_loop(7u, 11u)
                let tmp%6#0: uint64 = test_cases.unssa.contract.test_param_update_with_reentrant_entry_block(0u)
                let tmp%7#0: bool = (== tmp%6#0 10u)
                (assert tmp%7#0)
                test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2(0u)
                test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3()
                test_cases.unssa.contract.test_swap_args()
                let (a#0: uint64, b#0: uint64) = test_cases.unssa.contract.test_tuple_swap(100u, 200u, 0u)
                let tmp%8#0: bool = (== a#0 100u)
                (assert tmp%8#0)
                let tmp%9#0: bool = (== b#0 200u)
                (assert tmp%9#0)
                let (a#1: uint64, b#1: uint64) = test_cases.unssa.contract.test_tuple_swap(100u, 200u, 1u)
                let tmp%10#0: bool = (== a#1 200u)
                (assert tmp%10#0)
                let tmp%11#0: bool = (== b#1 100u)
                (assert tmp%11#0)
                return 1u
        
        subroutine test_cases.unssa.contract.test_self_ref_phi() -> uint64:
            block@0: // L32
                let a#0: uint64 = 1u
                goto block@1
            block@1: // while_top_L35
                let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#2 <- block@6)
                let tmp%0#0: bool = (< a#1 100u)
                goto tmp%0#0 ? block@2 : block@7
            block@2: // while_body_L35
                let tmp%1#0: uint64 = (% a#1 105u)
                goto tmp%1#0 ? block@4 : block@3
            block@3: // if_body_L36
                goto block@1
            block@4: // after_if_else_L36
                let tmp%3#0: uint64 = (% a#1 21u)
                goto tmp%3#0 ? block@6 : block@7
            block@6: // after_if_else_L38
                let a#2: uint64 = (+ a#1 1u)
                goto block@1
            block@7: // after_while_L35
                return a#1
        
        subroutine test_cases.unssa.contract.test_swap(i: uint64) -> uint64:
            block@0: // L44
                let x#0: uint64 = 1u
                let y#0: uint64 = 2u
                goto block@1
            block@1: // while_top_L48
                let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
                let x#1: uint64 = φ(x#0 <- block@0, y#1 <- block@2)
                let y#1: uint64 = φ(y#0 <- block@0, x#1 <- block@2)
                goto i#1 ? block@2 : block@3
            block@2: // while_body_L48
                let i#2: uint64 = (- i#1 1u)
                goto block@1
            block@3: // after_while_L48
                return x#1
        
        subroutine test_cases.unssa.contract.test_swap_loop(i: uint64, j: uint64) -> uint64:
            block@0: // L56
                let x#0: uint64 = 1u
                let y#0: uint64 = 2u
                goto block@1
            block@1: // while_top_L60
                let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5)
                let j#3: uint64 = φ(j#0 <- block@0, j#1 <- block@5)
                let x#3: uint64 = φ(x#0 <- block@0, x#1 <- block@5)
                let y#3: uint64 = φ(y#0 <- block@0, y#1 <- block@5)
                goto i#1 ? block@2 : block@6
            block@2: // while_body_L60
                goto block@3
            block@3: // while_top_L61
                let j#1: uint64 = φ(j#3 <- block@2, j#2 <- block@4)
                let x#1: uint64 = φ(x#3 <- block@2, y#1 <- block@4)
                let y#1: uint64 = φ(y#3 <- block@2, x#1 <- block@4)
                goto j#1 ? block@4 : block@5
            block@4: // while_body_L61
                let j#2: uint64 = (- j#1 1u)
                goto block@3
            block@5: // after_while_L61
                let i#3: uint64 = (- i#1 1u)
                goto block@1
            block@6: // after_while_L60
                return x#3
        
        subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block(x: uint64) -> uint64:
            block@0: // L77
                goto block@1
            block@1: // while_top_L79
                let x#1: uint64 = φ(x#0 <- block@0, x#2 <- block@4)
                let x#2: uint64 = (+ x#1 1u)
                let tmp%0#0: bool = (>= x#2 10u)
                goto tmp%0#0 ? block@3 : block@4
            block@3: // if_body_L81
                return x#2
            block@4: // after_if_else_L81
                goto block@1
        
        subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2(x: uint64) -> uint64:
            block@0: // L86
                let x#1: uint64 = (+ x#0 1u)
                goto block@1
            block@1: // while_top_L89
                let tmp%0#0: bool = (>= x#1 1u)
                goto tmp%0#0 ? block@3 : block@1
            block@3: // if_body_L90
                return x#1
        
        subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3() -> void:
            block@1: // while_top_L97
                let tmp%0#0: uint64 = test_cases.unssa.contract.one()
                goto tmp%0#0 ? block@3 : block@1
            block@3: // if_body_L98
                return 
        
        subroutine test_cases.unssa.contract.one() -> uint64:
            block@0: // L102
                return 1u
        
        subroutine test_cases.unssa.contract.test_swap_args() -> void:
            block@0: // L112
                let tmp%0#0: uint64 = test_cases.unssa.contract.one()
                let a#0: uint64 = (+ tmp%0#0 123u)
                let tmp%1#0: uint64 = test_cases.unssa.contract.one()
                let b#0: uint64 = (+ tmp%1#0 234u)
                let (a#1: uint64, b#1: uint64) = test_cases.unssa.contract.swap_args(a#0, b#0)
                let tmp%2#0: bool = (== a#1 235u)
                (assert tmp%2#0) // a == 235
                let tmp%3#0: bool = (== b#1 124u)
                (assert tmp%3#0) // b = 124
                return 
        
        subroutine test_cases.unssa.contract.swap_args(a: uint64, b: uint64) -> <uint64, uint64>:
            block@0: // L107
                return b#0 a#0
        
        subroutine test_cases.unssa.contract.test_tuple_swap(a: uint64, b: uint64, i: uint64) -> <uint64, uint64>:
            block@0: // L70
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L72
                let _item#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@2)
                let b#3: uint64 = φ(b#0 <- block@0, a#3 <- block@2)
                let a#3: uint64 = φ(a#0 <- block@0, b#3 <- block@2)
                let continue_looping%0#0: bool = (< _item#0 i#0)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L72
                let range_item%0#3: uint64 = (+ _item#0 1u)
                goto block@1
            block@5: // after_for_L72
                return a#3 b#3
    
    program clear-state:
        subroutine test_cases.unssa.contract.UnSSAContract.clear_state_program() -> bool:
            block@0: // L28
                return 1u