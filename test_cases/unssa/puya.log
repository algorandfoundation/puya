debug: PuyaOptions(paths=['unssa'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>)
unssa/contract.py:6 warning: expression result is ignored
unssa/contract.py:13 warning: expression result is ignored
unssa/contract.py:15 warning: expression result is ignored
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@6: // for_header_L105
debug: Terminated block@6: // for_header_L105
debug: Sealing block@None: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@6: // for_header_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L105
debug: Terminated block@7: // for_body_L105
debug: Sealing block@8: // for_footer_L105
debug: Sealing block@None: // after_for_L105
debug: Terminated block@8: // for_footer_L105
debug: Sealing block@6: // for_header_L105
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5, range_item%10#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#6: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#6: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3) in block@3: // ternary_true_L105
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6
debug: Deleting Phi assignment: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4)
debug: Replaced trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6 in current definition for 1 blocks
debug: Added source#6 to Phi node: let source#3: bytes = φ(source#6 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#4 to Phi node: let source#3: bytes = φ(source#6 <- block@5, source#4 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Terminated block@9: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L246
debug: Terminated block@4: // for_header_L246
debug: Sealing block@None: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L246
debug: Terminated block@5: // for_body_L246
debug: Sealing block@6: // for_footer_L246
debug: Sealing block@None: // after_for_L246
debug: Terminated block@6: // for_footer_L246
debug: Sealing block@4: // for_header_L246
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L241
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3) in block@3: // after_if_else_L241
debug: Added tail_cursor#3 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3, tail_cursor#3 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0
debug: Deleting Phi assignment: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#2 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L241
debug: Added header_cursor#2 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@6) in block@6: // for_footer_L246
debug: Terminated block@7: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // while_top_L35
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1: // while_top_L35
debug: Terminated block@1: // while_top_L35
debug: Sealing block@None: // while_body_L35
debug: Terminated block@2: // while_body_L35
debug: Sealing block@None: // if_body_L36
debug: Sealing block@None: // else_body_L36
debug: Terminated block@3: // if_body_L36
debug: Sealing block@4: // after_if_else_L36
debug: Terminated block@4: // after_if_else_L36
debug: Sealing block@None: // if_body_L38
debug: Sealing block@None: // else_body_L38
debug: Terminated block@5: // if_body_L38
debug: Sealing block@6: // after_if_else_L38
debug: Terminated block@6: // after_if_else_L38
debug: Sealing block@1: // while_top_L35
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0: // L33
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3: // if_body_L36
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#2 <- block@6) in block@6: // after_if_else_L38
debug: Sealing block@None: // after_while_L35
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@7: // after_while_L35
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@1) in block@1: // while_top_L35
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) in block@5: // if_body_L38
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) (a#3) with a#1 in current definition for 1 blocks
debug: Terminated block@7: // after_while_L35
debug: Sealing block@0: // L45
debug: Terminated block@0: // L45
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1: // while_top_L48
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1: // while_top_L48
debug: Terminated block@1: // while_top_L48
debug: Sealing block@None: // while_body_L48
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1: // while_top_L48
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@1: // while_top_L48
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@1: // while_top_L48
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@1: // while_top_L48
debug: Terminated block@2: // while_body_L48
debug: Sealing block@1: // while_top_L48
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0: // L45
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2) in block@2: // while_body_L48
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L45
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#2 <- block@2) in block@2: // while_body_L48
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@0) in block@0: // L45
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#2 <- block@2) in block@2: // while_body_L48
debug: Sealing block@None: // after_while_L48
debug: Terminated block@3: // after_while_L48
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1: // while_top_L60
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1: // while_top_L60
debug: Terminated block@1: // while_top_L60
debug: Sealing block@None: // while_body_L60
debug: Terminated block@2: // while_body_L60
debug: Looking for 'j' in an unsealed block creating an incomplete Phi: block@3: // while_top_L61
debug: Created Phi assignment: let j#1: uint64 = undefined while trying to resolve 'j' in block@3: // while_top_L61
debug: Terminated block@3: // while_top_L61
debug: Sealing block@None: // while_body_L61
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@3: // while_top_L61
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@3: // while_top_L61
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@3: // while_top_L61
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@3: // while_top_L61
debug: Terminated block@4: // while_body_L61
debug: Sealing block@3: // while_top_L61
debug: Looking for 'j' in an unsealed block creating an incomplete Phi: block@1: // while_top_L60
debug: Created Phi assignment: let j#3: uint64 = undefined while trying to resolve 'j' in block@1: // while_top_L60
debug: Added j#3 to Phi node: let j#1: uint64 = φ(j#3 <- block@2) in block@2: // while_body_L60
debug: Added j#2 to Phi node: let j#1: uint64 = φ(j#3 <- block@2, j#2 <- block@4) in block@4: // while_body_L61
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1: // while_top_L60
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@1: // while_top_L60
debug: Added x#3 to Phi node: let x#1: uint64 = φ(x#3 <- block@2) in block@2: // while_body_L60
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#3 <- block@2, x#2 <- block@4) in block@4: // while_body_L61
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@1: // while_top_L60
debug: Created Phi assignment: let y#3: uint64 = undefined while trying to resolve 'y' in block@1: // while_top_L60
debug: Added y#3 to Phi node: let y#1: uint64 = φ(y#3 <- block@2) in block@2: // while_body_L60
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#3 <- block@2, y#2 <- block@4) in block@4: // while_body_L61
debug: Sealing block@None: // after_while_L61
debug: Created Phi assignment: let i#2: uint64 = undefined while trying to resolve 'i' in block@3: // while_top_L61
debug: Added i#1 to Phi node: let i#2: uint64 = φ(i#1 <- block@2) in block@2: // while_body_L60
debug: Added i#2 to Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) in block@4: // while_body_L61
debug: Replacing trivial Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) (i#2) with i#1
debug: Deleting Phi assignment: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4)
debug: Replaced trivial Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) (i#2) with i#1 in current definition for 2 blocks
debug: Terminated block@5: // after_while_L61
debug: Sealing block@1: // while_top_L60
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0: // L57
debug: Added i#3 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5) in block@5: // after_while_L61
debug: Added j#0 to Phi node: let j#3: uint64 = φ(j#0 <- block@0) in block@0: // L57
debug: Added j#1 to Phi node: let j#3: uint64 = φ(j#0 <- block@0, j#1 <- block@5) in block@5: // after_while_L61
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@0) in block@0: // L57
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#0 <- block@0, x#1 <- block@5) in block@5: // after_while_L61
debug: Added y#0 to Phi node: let y#3: uint64 = φ(y#0 <- block@0) in block@0: // L57
debug: Added y#1 to Phi node: let y#3: uint64 = φ(y#0 <- block@0, y#1 <- block@5) in block@5: // after_while_L61
debug: Sealing block@None: // after_while_L60
debug: Terminated block@6: // after_while_L60
debug: Sealing block@0: // L78
debug: Terminated block@0: // L78
debug: Terminated block@1: // while_top_L79
debug: Sealing block@None: // while_body_L79
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1: // while_top_L79
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@1: // while_top_L79
debug: Terminated block@2: // while_body_L79
debug: Sealing block@None: // if_body_L81
debug: Sealing block@None: // else_body_L81
debug: Terminated block@3: // if_body_L81
debug: Sealing block@4: // after_if_else_L81
debug: Terminated block@4: // after_if_else_L81
debug: Sealing block@1: // while_top_L79
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L78
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#2 <- block@4) in block@4: // after_if_else_L81
debug: Sealing block@None: // after_while_L79
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@5: // after_while_L79
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1) in block@1: // while_top_L79
debug: Added x#2 to Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#2 <- block@3) in block@3: // if_body_L81
debug: Terminated block@5: // after_while_L79
debug: Sealing block@0: // L87
debug: Terminated block@0: // L87
debug: Terminated block@1: // while_top_L89
debug: Sealing block@None: // while_body_L89
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1: // while_top_L89
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@1: // while_top_L89
debug: Terminated block@2: // while_body_L89
debug: Sealing block@None: // if_body_L90
debug: Sealing block@None: // else_body_L90
debug: Terminated block@3: // if_body_L90
debug: Sealing block@4: // after_if_else_L90
debug: Terminated block@4: // after_if_else_L90
debug: Sealing block@1: // while_top_L89
debug: Added x#1 to Phi node: let x#2: uint64 = φ(x#1 <- block@0) in block@0: // L87
debug: Added x#2 to Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) in block@4: // after_if_else_L90
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) (x#2) with x#1
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) (x#2) with x#1 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L89
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@5: // after_while_L89
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1) in block@1: // while_top_L89
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) in block@3: // if_body_L90
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) (x#3) with x#1
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) (x#3) with x#1 in current definition for 1 blocks
debug: Terminated block@5: // after_while_L89
debug: Sealing block@0: // L96
debug: Terminated block@0: // L96
debug: Terminated block@1: // while_top_L97
debug: Sealing block@None: // while_body_L97
debug: Terminated block@2: // while_body_L97
debug: Sealing block@None: // if_body_L98
debug: Sealing block@None: // else_body_L98
debug: Terminated block@3: // if_body_L98
debug: Sealing block@4: // after_if_else_L98
debug: Terminated block@4: // after_if_else_L98
debug: Sealing block@1: // while_top_L97
debug: Sealing block@None: // after_while_L97
debug: Terminated block@5: // after_while_L97
debug: Sealing block@0: // L103
debug: Terminated block@0: // L103
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L108
debug: Terminated block@0: // L108
debug: Sealing block@0: // L71
debug: Terminated block@0: // L71
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L72
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L72
debug: Terminated block@1: // for_header_L72
debug: Sealing block@None: // for_body_L72
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@1: // for_header_L72
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@1: // for_header_L72
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // for_header_L72
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1: // for_header_L72
debug: Terminated block@2: // for_body_L72
debug: Sealing block@3: // for_footer_L72
debug: Sealing block@None: // after_for_L72
debug: Terminated block@3: // for_footer_L72
debug: Sealing block@1: // for_header_L72
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L71
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L72
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@0) in block@0: // L71
debug: Added b#2 to Phi node: let b#1: uint64 = φ(b#0 <- block@0, b#2 <- block@3) in block@3: // for_footer_L72
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0: // L71
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#2 <- block@3) in block@3: // for_footer_L72
debug: Terminated block@4: // after_for_L72
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // and_contd_L9
debug: Terminated block@1: // and_contd_L9
debug: Sealing block@None: // bool_true_L9
debug: Sealing block@None: // bool_false_L9
debug: Terminated block@2: // bool_true_L9
debug: Terminated block@3: // bool_false_L9
debug: Sealing block@4: // bool_merge_L9
debug: Created Phi assignment: let and_result%3#2: uint64 = undefined while trying to resolve 'and_result%3' in block@4: // bool_merge_L9
debug: Added and_result%3#0 to Phi node: let and_result%3#2: uint64 = φ(and_result%3#0 <- block@2) in block@2: // bool_true_L9
debug: Added and_result%3#1 to Phi node: let and_result%3#2: uint64 = φ(and_result%3#0 <- block@2, and_result%3#1 <- block@3) in block@3: // bool_false_L9
debug: Terminated block@4: // bool_merge_L9
debug: Sealing block@None: // and_contd_L12
debug: Terminated block@5: // and_contd_L12
debug: Sealing block@None: // bool_true_L12
debug: Sealing block@None: // bool_false_L12
debug: Terminated block@6: // bool_true_L12
debug: Terminated block@7: // bool_false_L12
debug: Sealing block@8: // bool_merge_L12
debug: Created Phi assignment: let and_result%7#2: uint64 = undefined while trying to resolve 'and_result%7' in block@8: // bool_merge_L12
debug: Added and_result%7#0 to Phi node: let and_result%7#2: uint64 = φ(and_result%7#0 <- block@6) in block@6: // bool_true_L12
debug: Added and_result%7#1 to Phi node: let and_result%7#2: uint64 = φ(and_result%7#0 <- block@6, and_result%7#1 <- block@7) in block@7: // bool_false_L12
debug: Terminated block@8: // bool_merge_L12
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Output IR to unssa/out/contract_UnSSAContract.ssa.ir
info: Optimizing test_cases.unssa.contract.UnSSAContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%10#0, a#0
debug: Replacing {tuple_assignment%10#0} with a#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%11#0, b#0
debug: Replacing {tuple_assignment%11#0} with b#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%14#0, a#1
debug: Replacing {tuple_assignment%14#0} with a#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%15#0, b#1
debug: Replacing {tuple_assignment%15#0} with b#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_self_ref_phi
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L36 because it's used by phi nodes
debug: Removed empty block: block@5: // if_body_L38
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: x#1, tmp#0, y#2
debug: Replacing {tmp#0, y#2} with x#1 made 1 modifications
debug: Found equivalence set: y#1, x#2
debug: Replacing {x#2} with y#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_loop
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: x#1, tmp#0, y#2
debug: Replacing {tmp#0, y#2} with x#1 made 1 modifications
debug: Found equivalence set: y#1, x#2
debug: Replacing {x#2} with y#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // while_body_L60 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: ConditionalBranch goto 1u ? block@2 : block@5 simplified to goto block@2
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#2 <- block@3) (x#3) with x#2
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#2 <- block@3)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // while_body_L79 with block@1: // while_top_L79 in block@4: // after_if_else_L81
debug: Replaced predecessor block@2: // while_body_L79 with block@1: // while_top_L79 in block@3: // if_body_L81
debug: Merged linear block@2: // while_body_L79 into block@1: // while_top_L79
debug: Merged linear block@5: // after_while_L79 into block@3: // if_body_L81
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@0: // L78 because it's used by phi nodes
debug: Not removing empty block block@4: // after_if_else_L81 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: ConditionalBranch goto 1u ? block@2 : block@5 simplified to goto block@2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // while_body_L89 with block@1: // while_top_L89 in block@4: // after_if_else_L90
debug: Replaced predecessor block@2: // while_body_L89 with block@1: // while_top_L89 in block@3: // if_body_L90
debug: Merged linear block@2: // while_body_L89 into block@1: // while_top_L89
debug: Merged linear block@5: // after_while_L89 into block@3: // if_body_L90
debug: Optimizer: Remove Empty Blocks
debug: Replaced predecessor block@4: // after_if_else_L90 with block@1: // while_top_L89 in block@1: // while_top_L89
debug: Removed empty block: block@4: // after_if_else_L90
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: ConditionalBranch goto 1u ? block@2 : block@5 simplified to goto block@2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // while_body_L97 with block@1: // while_top_L97 in block@4: // after_if_else_L98
debug: Replaced predecessor block@2: // while_body_L97 with block@1: // while_top_L97 in block@3: // if_body_L98
debug: Merged linear block@2: // while_body_L97 into block@1: // while_top_L97
debug: Merged linear block@5: // after_while_L97 into block@3: // if_body_L98
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@0: // L96
debug: Replaced predecessor block@4: // after_if_else_L98 with block@1: // while_top_L97 in block@1: // while_top_L97
debug: Removed empty block: block@4: // after_if_else_L98
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.one
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_args
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%2#0, a#1
debug: Replacing {tuple_assignment%2#0} with a#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%3#0, b#1
debug: Replacing {tuple_assignment%3#0} with b#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.swap_args
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_tuple_swap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, _item#0
debug: Replacing {range_item%0#1} with _item#0 made 3 modifications
debug: Found equivalence set: b#1, a#2
debug: Replacing {a#2} with b#1 made 1 modifications
debug: Found equivalence set: a#1, b#2
debug: Replacing {b#2} with a#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L72 with block@2: // for_body_L72 in block@1: // for_header_L72
debug: Merged linear block@3: // for_footer_L72 into block@2: // for_body_L72
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to unssa/out/contract_UnSSAContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_self_ref_phi
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3: // if_body_L36 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_loop
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // while_body_L60 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@0: // L78 because it's used by phi nodes
debug: Not removing empty block block@4: // after_if_else_L81 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.one
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_args
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.swap_args
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.test_tuple_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to unssa/out/contract_UnSSAContract.cssa.ir
debug: Removing Phis from test_cases.unssa.contract.UnSSAContract.approval_program
debug: Removing Phis from test_cases.unssa.contract.test_self_ref_phi
debug: Removing Phis from test_cases.unssa.contract.test_swap
debug: Removing Phis from test_cases.unssa.contract.test_swap_loop
debug: Removing Phis from test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Removing Phis from test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Removing Phis from test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Removing Phis from test_cases.unssa.contract.one
debug: Removing Phis from test_cases.unssa.contract.test_swap_args
debug: Removing Phis from test_cases.unssa.contract.swap_args
debug: Removing Phis from test_cases.unssa.contract.test_tuple_swap
debug: Removing Phis from test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Output IR to unssa/out/contract_UnSSAContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.unssa.contract.UnSSAContract.approval_program
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_self_ref_phi
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_swap
debug: loc: {y#4=None, x#3=None, i#5=None, y#0=y#0, x#0=x#0, i#0=i#0}
debug: pred: {y#4=y#0, x#3=x#0, i#5=i#0}
debug: ready: y#4, x#3, i#5
debug: to_do: y#4, x#3, i#5
debug: * avail i#5
debug: * avail i#0
debug: * avail x#3
debug: * avail x#0
debug: * avail y#4
debug: * avail y#0
debug: * to_do i#5
debug: * to_do x#3
debug: * to_do y#4
debug: loc: {y#1=None, x#1=None, i#1=None, y#4=y#4, x#3=x#3, i#5=i#5}
debug: pred: {y#1=y#4, x#1=x#3, i#1=i#5}
debug: ready: y#1, x#1, i#1
debug: to_do: y#1, x#1, i#1
debug: * avail i#1
debug: * avail i#5
debug: * avail x#1
debug: * avail x#3
debug: * avail y#1
debug: * avail y#4
debug: * to_do i#1
debug: * to_do x#1
debug: * to_do y#1
debug: loc: {y#4=None, x#3=None, i#5=None, x#1=x#1, y#1=y#1, i#2=i#2}
debug: pred: {y#4=x#1, x#3=y#1, i#5=i#2}
debug: ready: y#4, x#3, i#5
debug: to_do: y#4, x#3, i#5
debug: * avail i#5
debug: * avail i#2
debug: * avail x#3
debug: * avail y#1
debug: * avail y#4
debug: * avail x#1
debug: * to_do i#5
debug: * to_do x#3
debug: * to_do y#4
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_swap_loop
debug: loc: {y#6=None, x#6=None, j#6=None, i#6=None, y#0=y#0, x#0=x#0, j#0=j#0, i#0=i#0}
debug: pred: {y#6=y#0, x#6=x#0, j#6=j#0, i#6=i#0}
debug: ready: y#6, x#6, j#6, i#6
debug: to_do: y#6, x#6, j#6, i#6
debug: * avail i#6
debug: * avail i#0
debug: * avail j#6
debug: * avail j#0
debug: * avail x#6
debug: * avail x#0
debug: * avail y#6
debug: * avail y#0
debug: * to_do i#6
debug: * to_do j#6
debug: * to_do x#6
debug: * to_do y#6
debug: loc: {y#3=None, x#3=None, j#3=None, i#1=None, y#6=y#6, x#6=x#6, j#6=j#6, i#6=i#6}
debug: pred: {y#3=y#6, x#3=x#6, j#3=j#6, i#1=i#6}
debug: ready: y#3, x#3, j#3, i#1
debug: to_do: y#3, x#3, j#3, i#1
debug: * avail i#1
debug: * avail i#6
debug: * avail j#3
debug: * avail j#6
debug: * avail x#3
debug: * avail x#6
debug: * avail y#3
debug: * avail y#6
debug: * to_do i#1
debug: * to_do j#3
debug: * to_do x#3
debug: * to_do y#3
debug: loc: {y#9=None, x#8=None, j#9=None, y#3=y#3, x#3=x#3, j#3=j#3}
debug: pred: {y#9=y#3, x#8=x#3, j#9=j#3}
debug: ready: y#9, x#8, j#9
debug: to_do: y#9, x#8, j#9
debug: * avail j#9
debug: * avail j#3
debug: * avail x#8
debug: * avail x#3
debug: * avail y#9
debug: * avail y#3
debug: * to_do j#9
debug: * to_do x#8
debug: * to_do y#9
debug: loc: {y#1=None, x#1=None, j#1=None, y#9=y#9, x#8=x#8, j#9=j#9}
debug: pred: {y#1=y#9, x#1=x#8, j#1=j#9}
debug: ready: y#1, x#1, j#1
debug: to_do: y#1, x#1, j#1
debug: * avail j#1
debug: * avail j#9
debug: * avail x#1
debug: * avail x#8
debug: * avail y#1
debug: * avail y#9
debug: * to_do j#1
debug: * to_do x#1
debug: * to_do y#1
debug: loc: {y#9=None, x#8=None, j#9=None, x#1=x#1, y#1=y#1, j#2=j#2}
debug: pred: {y#9=x#1, x#8=y#1, j#9=j#2}
debug: ready: y#9, x#8, j#9
debug: to_do: y#9, x#8, j#9
debug: * avail j#9
debug: * avail j#2
debug: * avail x#8
debug: * avail y#1
debug: * avail y#9
debug: * avail x#1
debug: * to_do j#9
debug: * to_do x#8
debug: * to_do y#9
debug: loc: {y#6=None, x#6=None, j#6=None, i#6=None, y#1=y#1, x#1=x#1, j#1=j#1, i#3=i#3}
debug: pred: {y#6=y#1, x#6=x#1, j#6=j#1, i#6=i#3}
debug: ready: y#6, x#6, j#6, i#6
debug: to_do: y#6, x#6, j#6, i#6
debug: * avail i#6
debug: * avail i#3
debug: * avail j#6
debug: * avail j#1
debug: * avail x#6
debug: * avail x#1
debug: * avail y#6
debug: * avail y#1
debug: * to_do i#6
debug: * to_do j#6
debug: * to_do x#6
debug: * to_do y#6
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Sequentializing parallel copies in test_cases.unssa.contract.one
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_swap_args
debug: Sequentializing parallel copies in test_cases.unssa.contract.swap_args
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_tuple_swap
debug: loc: {a#4=None, b#3=None, _item#1=None, a#0=a#0, b#0=b#0, range_item%0#0=range_item%0#0}
debug: pred: {a#4=a#0, b#3=b#0, _item#1=range_item%0#0}
debug: ready: a#4, b#3, _item#1
debug: to_do: a#4, b#3, _item#1
debug: * avail _item#1
debug: * avail range_item%0#0
debug: * avail b#3
debug: * avail b#0
debug: * avail a#4
debug: * avail a#0
debug: * to_do _item#1
debug: * to_do b#3
debug: * to_do a#4
debug: loc: {a#1=None, b#1=None, _item#0=None, a#4=a#4, b#3=b#3, _item#1=_item#1}
debug: pred: {a#1=a#4, b#1=b#3, _item#0=_item#1}
debug: ready: a#1, b#1, _item#0
debug: to_do: a#1, b#1, _item#0
debug: * avail _item#0
debug: * avail _item#1
debug: * avail b#1
debug: * avail b#3
debug: * avail a#1
debug: * avail a#4
debug: * to_do _item#0
debug: * to_do b#1
debug: * to_do a#1
debug: loc: {a#4=None, b#3=None, _item#1=None, b#1=b#1, a#1=a#1, range_item%0#2=range_item%0#2}
debug: pred: {a#4=b#1, b#3=a#1, _item#1=range_item%0#2}
debug: ready: a#4, b#3, _item#1
debug: to_do: a#4, b#3, _item#1
debug: * avail _item#1
debug: * avail range_item%0#2
debug: * avail b#3
debug: * avail a#1
debug: * avail a#4
debug: * avail b#1
debug: * to_do _item#1
debug: * to_do b#3
debug: * to_do a#4
debug: Sequentializing parallel copies in test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Output IR to unssa/out/contract_UnSSAContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.unssa.contract.UnSSAContract.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%3#0 with [and_result%3#5, and_result%3#1, and_result%3#2]
debug: Coalescing and_result%7#0 with [and_result%7#5, and_result%7#1, and_result%7#2]
debug: Coalescing a#0 with [a#1]
debug: Coalescing b#0 with [b#1]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_self_ref_phi using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#6, a#1, a#2]
debug: Coalescing resulted in 13 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_swap using strategy RootOperandGrouping
debug: Coalescing i#0 with [i#5, i#1, i#2]
debug: Coalescing x#0 with [x#3]
debug: Coalescing y#0 with [y#4, y#1]
debug: Coalescing resulted in 16 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_swap_loop using strategy RootOperandGrouping
debug: Coalescing i#0 with [i#6, i#1, i#3]
debug: Coalescing j#0 with [j#6, j#3, j#9, j#1, j#2]
debug: Coalescing x#0 with [x#6, x#3, x#8]
debug: Coalescing y#0 with [y#6, y#3, y#9, y#1]
debug: Coalescing resulted in 42 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#5, x#1, x#2]
debug: Coalescing resulted in 9 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2 using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#1]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.one using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_swap_args using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#1]
debug: Coalescing b#0 with [b#1]
debug: Coalescing resulted in 4 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.swap_args using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.test_tuple_swap using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#4, a#1]
debug: Coalescing b#0 with [b#3]
debug: Coalescing range_item%0#0 with [range_item%0#2]
debug: Coalescing _item#0 with [_item#1]
debug: Coalescing resulted in 14 replacement/s
debug: Coalescing local variables in test_cases.unssa.contract.UnSSAContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to unssa/out/contract_UnSSAContract.final.ir
debug: Inserted main_block@0.ops[4]: 'store result1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[6]: 'load result1#0' with 'load result1#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[8]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[10]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[15]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[17]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[7]: 'store result1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[13]: 'load result1#0' with 'load result1#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@4.ops[4]: 'store result2#0 to l-stack (copy)'
debug: Replaced main_bool_merge@4.ops[6]: 'load result2#0' with 'load result2#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@4.ops[8]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_bool_merge@4.ops[10]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@4.ops[15]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_bool_merge@4.ops[17]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@4.ops[7]: 'store result2#0 to l-stack (copy)'
debug: Replaced main_bool_merge@4.ops[13]: 'load result2#0' with 'load result2#0 from l-stack (no copy)'
debug: Inserted main_and_contd@5.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_and_contd@5.ops[5]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[8]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[10]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[13]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[15]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[27]: 'store a#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[29]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[32]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[34]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[39]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[41]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[48]: 'store a#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[50]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[53]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[55]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[60]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[62]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[26]: 'store b#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[37]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@8.ops[48]: 'store b#0 to l-stack (copy)'
debug: Replaced main_bool_merge@8.ops[59]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.unssa.contract.UnSSAContract.approval_program
debug: Allocated 2 variable/s to x-stack: and_result%3#0, and_result%7#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: and_result%3#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: and_result%3#0
debug: shared x-stack for main_bool_true@6 -> main_bool_merge@8: and_result%7#0
debug: shared x-stack for main_bool_false@7 -> main_bool_merge@8: and_result%7#0
debug: test_cases.unssa.contract.UnSSAContract.approval_program f-stack entry: ['result2#0']
debug: test_cases.unssa.contract.UnSSAContract.approval_program f-stack on first store: ['result1#0']
debug: Inserted test_self_ref_phi_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_self_ref_phi_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_self_ref_phi_while_body@2.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_self_ref_phi_while_body@2.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_self_ref_phi_while_body@2.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_self_ref_phi_while_body@2.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_self_ref_phi_after_if_else@4.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_self_ref_phi_after_if_else@4.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Found 3 edge set/s for test_cases.unssa.contract.test_self_ref_phi
debug: test_cases.unssa.contract.test_self_ref_phi f-stack entry: []
debug: test_cases.unssa.contract.test_self_ref_phi f-stack on first store: ['a#0']
debug: Inserted test_swap_while_top@1.ops[5]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_swap_while_top@1.ops[7]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.unssa.contract.test_swap
debug: Allocated 2 variable/s to x-stack: x#0, x#1
debug: shared x-stack for test_swap_block@0 -> test_swap_while_top@1: x#0
debug: shared x-stack for test_swap_while_body@2 -> test_swap_while_top@1: x#0
debug: shared x-stack for test_swap_while_top@1 -> test_swap_while_body@2: x#1
debug: shared x-stack for test_swap_while_top@1 -> test_swap_after_while@3: x#1
debug: test_cases.unssa.contract.test_swap f-stack entry: []
debug: test_cases.unssa.contract.test_swap f-stack on first store: ['y#0']
debug: Simplified int 1; int 2; swap to int 2; int 1
debug: Inserted test_swap_loop_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_swap_loop_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_swap_loop_while_top@3.ops[5]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_swap_loop_while_top@3.ops[7]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.unssa.contract.test_swap_loop
debug: Allocated 1 variable/s to x-stack: x#1
debug: shared x-stack for test_swap_loop_while_top@3 -> test_swap_loop_while_body@4: x#1
debug: shared x-stack for test_swap_loop_while_top@3 -> test_swap_loop_after_while@5: x#1
debug: test_cases.unssa.contract.test_swap_loop f-stack entry: []
debug: test_cases.unssa.contract.test_swap_loop f-stack on first store: ['x#0', 'y#0']
debug: Simplified frame_dig 0; frame_bury 0; retsub to retsub
debug: Inserted test_param_update_with_reentrant_entry_block_while_top@1.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_param_update_with_reentrant_entry_block_while_top@1.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Inserted test_param_update_with_reentrant_entry_block_v2_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_param_update_with_reentrant_entry_block_v2_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Inserted test_param_update_with_reentrant_entry_block_v3_while_top@1.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_param_update_with_reentrant_entry_block_v3_while_top@1.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Inserted test_swap_args_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[18]: 'store a#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[20]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[23]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[25]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[30]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[32]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[13]: 'store b#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[16]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[6]: 'store a#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[16]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted test_swap_args_block@0.ops[19]: 'store b#0 to l-stack (copy)'
debug: Replaced test_swap_args_block@0.ops[30]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_block@0.ops[1]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_block@0.ops[3]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_for_header@1.ops[5]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_for_header@1.ops[7]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_for_body@2.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_for_body@2.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.unssa.contract.test_tuple_swap
debug: Allocated 1 variable/s to x-stack: b#1
debug: shared x-stack for test_tuple_swap_for_header@1 -> test_tuple_swap_for_body@2: b#1
debug: shared x-stack for test_tuple_swap_for_header@1 -> test_tuple_swap_after_for@4: b#1
debug: test_cases.unssa.contract.test_tuple_swap f-stack entry: []
debug: test_cases.unssa.contract.test_tuple_swap f-stack on first store: ['_item#0']
info: Writing unssa/out/contract.approval.teal
info: Writing unssa/out/contract.approval.debug.teal
info: Writing unssa/out/contract.clear.teal
info: Writing unssa/out/contract.clear.debug.teal