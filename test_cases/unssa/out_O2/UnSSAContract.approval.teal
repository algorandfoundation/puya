#pragma version 10
#pragma typetrack false

// test_cases.unssa.contract.UnSSAContract.approval_program() -> uint64:
main:
    intcblock 1 100 2 0 200
    pushbytes ""
    dupn 5
    intc_0 // 1

main_while_top@41:
    dup
    intc_1 // 100
    <
    bz main_after_while@47
    dup
    pushint 105 // 105
    %
    bz main_while_top@41
    dup
    pushint 21 // 21
    %
    bz main_after_while@47
    dup
    intc_0 // 1
    +
    bury 1
    b main_while_top@41

main_after_while@47:
    intc_0 // 1
    callsub test_swap
    dup
    bury 6
    dup
    itob
    log
    bz main_bool_false@3
    dig 4
    intc_2 // 2
    <=
    bz main_bool_false@3
    intc_0 // 1

main_bool_merge@4:
    assert
    intc_2 // 2
    callsub test_swap
    dup
    bury 5
    dup
    itob
    log
    bz main_bool_false@7
    dig 3
    intc_2 // 2
    <=
    bz main_bool_false@7
    intc_0 // 1

main_bool_merge@8:
    assert
    pushint 7 // 7
    bury 7
    pushint 11 // 11
    bury 6
    intc_0 // 1
    bury 3
    intc_2 // 2
    bury 2

main_while_top@10:
    dig 6
    bz main_after_while@15

main_while_top@12:
    dig 5
    bz main_after_while@14
    dig 5
    intc_0 // 1
    -
    bury 6
    dig 1
    dig 3
    bury 3
    bury 3
    b main_while_top@12

main_after_while@14:
    dig 6
    intc_0 // 1
    -
    bury 7
    b main_while_top@10

main_after_while@15:
    intc_3 // 0
    bury 3

main_while_top@18:
    dig 2
    intc_0 // 1
    +
    dup
    bury 4
    pushint 10 // 10
    >=
    bz main_while_top@18
    dig 2
    pushint 10 // 10
    ==
    assert
    intc_1 // 100
    intc 4 // 200
    intc_3 // 0
    callsub test_tuple_swap
    swap
    intc_1 // 100
    ==
    assert
    intc 4 // 200
    ==
    assert
    intc_1 // 100
    intc 4 // 200
    intc_0 // 1
    callsub test_tuple_swap
    swap
    intc 4 // 200
    ==
    assert
    intc_1 // 100
    ==
    assert
    intc_0 // 1
    return

main_bool_false@7:
    intc_3 // 0
    b main_bool_merge@8

main_bool_false@3:
    intc_3 // 0
    b main_bool_merge@4


// test_cases.unssa.contract.test_swap(i: uint64) -> uint64:
test_swap:
    proto 1 1
    intc_0 // 1
    intc_2 // 2

test_swap_while_top@1:
    frame_dig -1
    bz test_swap_after_while@3
    frame_dig -1
    intc_0 // 1
    -
    frame_bury -1
    frame_dig 1
    frame_dig 0
    frame_bury 1
    frame_bury 0
    b test_swap_while_top@1

test_swap_after_while@3:
    retsub


// test_cases.unssa.contract.test_tuple_swap(a: uint64, b: uint64, i: uint64) -> uint64, uint64:
test_tuple_swap:
    proto 3 2
    intc_3 // 0

test_tuple_swap_for_header@1:
    frame_dig 0
    frame_dig -1
    <
    bz test_tuple_swap_after_for@4
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    frame_dig -3
    frame_dig -2
    frame_bury -3
    frame_bury -2
    b test_tuple_swap_for_header@1

test_tuple_swap_after_for@4:
    frame_dig -3
    frame_dig -2
    uncover 2
    retsub
