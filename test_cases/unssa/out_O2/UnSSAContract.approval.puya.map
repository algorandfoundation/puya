{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAiCQ;AACE;AAAI;AAAJ;AAAV;;;AACW;AAAI;;AAAJ;AAAX;;;AAEe;AAAI;;AAAJ;AAAf;;;AAEQ;AAAK;AAAL;AAAA;;;;;AAjCoB;AAAV;;;AAAV;AAAA;;AACI;AAAA;AAAJ;AACO;;;AAAK;;AAAW;AAAX;AAAL;;;;AAAP;AACoB;AAAV;;;AAAV;AAAA;;AACI;AAAA;AAAJ;AACO;;;AAAK;;AAAW;AAAX;AAAL;;;;AAAP;AACe;;AAAA;;AAAW;;AAAA;;AA6C1B;AAAJ;;AACI;AAAJ;;AACJ;;AAAA;;;AACA;;AAAA;;;AAIY;;AAAQ;AAAJ;AAAJ;;;;;;;;;;;;;AACJ;;AAAQ;AAAJ;AAAJ;;;;;AApDoD;AAAA;;AAkEpD;;AAAQ;AAAJ;AAAJ;AAAA;;AACQ;;AAAL;AAAX;;;AAnEe;;AAA2D;;AAA3D;AAAP;AAKyB;AAAa;;AAAa;AAA1C;;;AACF;AAAK;AAAL;AAAP;AACY;;AAAL;AAAP;AACyB;AAAa;;AAAa;AAA1C;;;AACF;AAAK;;AAAL;AAAP;AACY;AAAL;AAAP;AAEO;AAAP;;;;;;;;;AAkBR;;;AAEQ;AACA;AACR;;AAAA;;;AAIQ;;AAAQ;AAAJ;AAAJ;;;;;;;;;;;;;AACJ;AAiBJ;;;AAEiB;AAAA;;AAAA;;AAAA;AAAjB;;;AAAiB;;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAEb;;AAAA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.unssa.contract.UnSSAContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 100 2 0 200"
    },
    "9": {
      "op": "pushbytes \"\""
    },
    "11": {
      "op": "dupn 5"
    },
    "13": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "14": {
      "block": "main_while_top@41",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "dup",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0"
      ]
    },
    "15": {
      "op": "intc_1 // 100",
      "defined_out": [
        "100",
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "100"
      ]
    },
    "16": {
      "op": "<",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "17": {
      "op": "bz main_after_while@47",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "20": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0"
      ]
    },
    "21": {
      "op": "pushint 105 // 105",
      "defined_out": [
        "105",
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "105"
      ]
    },
    "23": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%1#4"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%1#4"
      ]
    },
    "24": {
      "op": "bz main_while_top@41",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "27": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0"
      ]
    },
    "28": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "21"
      ]
    },
    "30": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%3#2"
      ]
    },
    "31": {
      "op": "bz main_after_while@47",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "34": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0"
      ]
    },
    "35": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "1"
      ]
    },
    "36": {
      "op": "+",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0"
      ]
    },
    "37": {
      "op": "bury 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "39": {
      "op": "b main_while_top@41"
    },
    "42": {
      "block": "main_after_while@47",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "1"
      ]
    },
    "43": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0"
      ]
    },
    "46": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0",
        "result1#0"
      ]
    },
    "47": {
      "op": "bury 6",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0"
      ]
    },
    "49": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "50": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0",
        "tmp%0#0"
      ]
    },
    "51": {
      "op": "log",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0"
      ]
    },
    "52": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "55": {
      "op": "dig 4",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0"
      ]
    },
    "57": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result1#0",
        "2"
      ]
    },
    "58": {
      "op": "<=",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "59": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "62": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "result1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%0#0"
      ]
    },
    "63": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "64": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "2"
      ]
    },
    "65": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0",
        "result2#0"
      ]
    },
    "69": {
      "op": "bury 5",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0"
      ]
    },
    "71": {
      "op": "dup",
      "defined_out": [
        "result2#0",
        "result2#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0",
        "result2#0 (copy)"
      ]
    },
    "72": {
      "op": "itob",
      "defined_out": [
        "result2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0",
        "tmp%3#0"
      ]
    },
    "73": {
      "op": "log",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0"
      ]
    },
    "74": {
      "op": "bz main_bool_false@7",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "77": {
      "op": "dig 3",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0"
      ]
    },
    "79": {
      "op": "intc_2 // 2",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "result2#0",
        "2"
      ]
    },
    "80": {
      "op": "<=",
      "defined_out": [
        "result2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%5#0"
      ]
    },
    "81": {
      "op": "bz main_bool_false@7",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "84": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "result2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%1#0"
      ]
    },
    "85": {
      "block": "main_bool_merge@8",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "86": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "i#0"
      ]
    },
    "88": {
      "op": "bury 7",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "90": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "j#0"
      ]
    },
    "92": {
      "op": "bury 6",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "j#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "95": {
      "op": "bury 3",
      "defined_out": [
        "i#0",
        "j#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "97": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "j#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "y#0"
      ]
    },
    "98": {
      "op": "bury 2",
      "defined_out": [
        "i#0",
        "j#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "100": {
      "block": "main_while_top@10",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "i#0"
      ]
    },
    "102": {
      "op": "bz main_after_while@15",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "105": {
      "block": "main_while_top@12",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "dig 5",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "j#0"
      ]
    },
    "107": {
      "op": "bz main_after_while@14",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "110": {
      "op": "dig 5",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "j#0"
      ]
    },
    "112": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "j#0",
        "1"
      ]
    },
    "113": {
      "op": "-",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "j#0"
      ]
    },
    "114": {
      "op": "bury 6",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "116": {
      "op": "dig 1",
      "defined_out": [
        "j#0",
        "parcopy%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "parcopy%0#0"
      ]
    },
    "118": {
      "op": "dig 3",
      "defined_out": [
        "j#0",
        "parcopy%0#0",
        "y#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "parcopy%0#0",
        "y#0"
      ]
    },
    "120": {
      "op": "bury 3",
      "defined_out": [
        "j#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "122": {
      "op": "bury 3",
      "defined_out": [
        "j#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "124": {
      "op": "b main_while_top@12"
    },
    "127": {
      "block": "main_after_while@14",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "i#0"
      ]
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "i#0",
        "1"
      ]
    },
    "130": {
      "op": "-",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "i#0"
      ]
    },
    "131": {
      "op": "bury 7",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "133": {
      "op": "b main_while_top@10"
    },
    "136": {
      "block": "main_after_while@15",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "intc_3 // 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "137": {
      "op": "bury 3",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "139": {
      "block": "main_while_top@18",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0",
        "1"
      ]
    },
    "142": {
      "op": "+",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "143": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0",
        "x#0"
      ]
    },
    "144": {
      "op": "bury 4",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "146": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0",
        "10"
      ]
    },
    "148": {
      "op": ">=",
      "defined_out": [
        "tmp%0#2",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "149": {
      "op": "bz main_while_top@18",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "152": {
      "op": "dig 2",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0"
      ]
    },
    "154": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "x#0",
        "10"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%7#0"
      ]
    },
    "157": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "158": {
      "op": "intc_1 // 100",
      "defined_out": [
        "100",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100"
      ]
    },
    "159": {
      "op": "intc 4 // 200",
      "defined_out": [
        "100",
        "200",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100",
        "200"
      ]
    },
    "161": {
      "op": "intc_3 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100",
        "200",
        "0"
      ]
    },
    "162": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "defined_out": [
        "a#0",
        "b#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "b#0"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "a#0"
      ]
    },
    "166": {
      "op": "intc_1 // 100",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "a#0",
        "100"
      ]
    },
    "167": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%8#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "tmp%8#0"
      ]
    },
    "168": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0"
      ]
    },
    "169": {
      "op": "intc 4 // 200",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "200"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%9#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%9#0"
      ]
    },
    "172": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "173": {
      "op": "intc_1 // 100",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100"
      ]
    },
    "174": {
      "op": "intc 4 // 200",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100",
        "200"
      ]
    },
    "176": {
      "op": "intc_0 // 1",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "100",
        "200",
        "1"
      ]
    },
    "177": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "a#0",
        "b#0"
      ]
    },
    "180": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "a#0"
      ]
    },
    "181": {
      "op": "intc 4 // 200",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "a#0",
        "200"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%10#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "tmp%10#0"
      ]
    },
    "184": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0"
      ]
    },
    "185": {
      "op": "intc_1 // 100",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "b#0",
        "100"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%11#0",
        "x#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "tmp%11#0"
      ]
    },
    "187": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "188": {
      "op": "intc_0 // 1",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "1"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ]
    },
    "190": {
      "block": "main_bool_false@7",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "intc_3 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%1#0"
      ]
    },
    "191": {
      "op": "b main_bool_merge@8"
    },
    "194": {
      "block": "main_bool_false@3",
      "stack_in": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0"
      ],
      "op": "intc_3 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "result1#0",
        "result2#0",
        "x#0",
        "y#0",
        "a#0",
        "and_result%0#0"
      ]
    },
    "195": {
      "op": "b main_bool_merge@4"
    },
    "198": {
      "subroutine": "test_cases.unssa.contract.test_swap",
      "params": {
        "i#0": "uint64"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "201": {
      "op": "intc_0 // 1"
    },
    "202": {
      "op": "intc_2 // 2",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "203": {
      "block": "test_swap_while_top@1",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "205": {
      "op": "bz test_swap_after_while@3",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "208": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "210": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "1"
      ]
    },
    "211": {
      "op": "-",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0"
      ]
    },
    "212": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "214": {
      "op": "frame_dig 1",
      "defined_out": [
        "parcopy%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "parcopy%0#0"
      ]
    },
    "216": {
      "op": "frame_dig 0",
      "defined_out": [
        "parcopy%0#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "parcopy%0#0",
        "y#0"
      ]
    },
    "218": {
      "op": "frame_bury 1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "220": {
      "op": "frame_bury 0",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "222": {
      "op": "b test_swap_while_top@1"
    },
    "225": {
      "block": "test_swap_after_while@3",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "226": {
      "subroutine": "test_cases.unssa.contract.test_tuple_swap",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64",
        "i#0": "uint64"
      },
      "block": "test_tuple_swap",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "229": {
      "op": "intc_3 // 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0"
      ]
    },
    "230": {
      "block": "test_tuple_swap_for_header@1",
      "stack_in": [
        "_item#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0",
        "_item#0"
      ]
    },
    "232": {
      "op": "frame_dig -1",
      "defined_out": [
        "_item#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "_item#0",
        "i#0 (copy)"
      ]
    },
    "234": {
      "op": "<",
      "defined_out": [
        "_item#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "_item#0",
        "continue_looping%0#0"
      ]
    },
    "235": {
      "op": "bz test_tuple_swap_after_for@4",
      "stack_out": [
        "_item#0"
      ]
    },
    "238": {
      "op": "frame_dig 0",
      "stack_out": [
        "_item#0",
        "_item#0"
      ]
    },
    "240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_item#0"
      ],
      "stack_out": [
        "_item#0",
        "_item#0",
        "1"
      ]
    },
    "241": {
      "op": "+",
      "stack_out": [
        "_item#0",
        "_item#0"
      ]
    },
    "242": {
      "op": "frame_bury 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0"
      ]
    },
    "244": {
      "op": "frame_dig -3",
      "defined_out": [
        "_item#0",
        "parcopy%0#0"
      ],
      "stack_out": [
        "_item#0",
        "parcopy%0#0"
      ]
    },
    "246": {
      "op": "frame_dig -2",
      "defined_out": [
        "_item#0",
        "a#0",
        "parcopy%0#0"
      ],
      "stack_out": [
        "_item#0",
        "parcopy%0#0",
        "a#0"
      ]
    },
    "248": {
      "op": "frame_bury -3",
      "stack_out": [
        "_item#0",
        "parcopy%0#0"
      ]
    },
    "250": {
      "op": "frame_bury -2",
      "stack_out": [
        "_item#0"
      ]
    },
    "252": {
      "op": "b test_tuple_swap_for_header@1"
    },
    "255": {
      "block": "test_tuple_swap_after_for@4",
      "stack_in": [
        "_item#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "a#0 (copy)"
      ]
    },
    "257": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "259": {
      "op": "uncover 2"
    },
    "261": {
      "retsub": true,
      "op": "retsub"
    }
  }
}