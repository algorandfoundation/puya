{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAKQ;;;;AACoB;AAAV;;;AAAV;;AACI;AAAJ;AACO;AAAA;AAAA;;;AAAK;AAAW;AAAX;AAAL;;;;AAAP;AACoB;AAAV;;;AAAV;AAAA;;AACI;AAAA;AAAJ;AACO;AAAA;AAAA;;;AAAK;;AAAW;AAAX;AAAL;;;;AAAP;AACe;;AAAW;;AAA1B;;;;AACoD;AAA7C;;;AAA2D;;AAA3D;AAAP;AACgD;AAAhD;;;;AACA;;;AACA;;;AAEyB;AAAa;;AAAa;AAA1C;;;AAAA;AACG;AAAL;AAAP;AACY;;AAAL;AAAP;AACyB;AAAa;;AAAa;AAA1C;;;AAAA;AACG;;AAAL;AAAP;AACY;AAAL;AAAP;AAEO;AAAP;;;;;;;;;AAMR;;;AAEQ;AACE;;AAAI;AAAJ;AAAV;;;AACW;;AAAI;;AAAJ;AAAW;AAAX;AAAX;;;AACY;;;AACG;;AAAI;;AAAJ;AAAJ;AAAA;AAAX;;;AAGI;;AAAA;AAAA;AADI;;AAAK;AAAL;AAAA;;;;;AAIR;;;AAEQ;AACA;AACE;;AAAI;AAAJ;AAAV;;;AACQ;;AACA;;AAAA;;AACA;;AACA;;AAAQ;AAAJ;AAAJ;;;;;AACJ;AAGJ;;;AAEQ;AACA;AACE;;AAAI;AAAJ;AAAV;;;AACc;;AAAI;AAAJ;AAAd;;;AACY;;AACA;;AAAA;;AACA;;AACA;;AAAQ;AAAJ;AAAJ;;;;;AACJ;;AAAQ;AAAJ;AAAJ;;;;;AACJ;AAGJ;;;AAEiB;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACQ;;AAAA;;AAAA;;AADS;;AAAA;AAAA;AAAA;;;;;;;AAEb;;AAAA;;AAAA;;AAAA;AAGJ;;;;;;;;;AAEU;AAAV;;;AACQ;;AAAQ;AAAJ;;AAAJ;;AACQ;;AAAL;AAAX;;;;;;;;;;;;AAEI;AAAA;;;;AAGJ;;;AAEI;;AAAQ;AAAJ;AAAJ;;AACM;AAAV;;;AACW;;AAAK;AAAL;AAAX;;;AAEI;;AAAA;;;;AAKM;AAAV;;;AACW;;;AAAA;AAAA;AAAX;;;;;;;AAMW;AAAP;AAGJ;;;AAEI;;AAAA;;AAAA;AAKI;;;AAAQ;;AAAR;AACA;;;AAAQ;;;AAAR;AACG;;;AAAA;AACK;;;AAAL;AAAP;AACY;;AAAL;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.unssa.contract.UnSSAContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 100 200"
    },
    "9": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "result2#0"
      ]
    },
    "11": {
      "callsub": "test_cases.unssa.contract.test_self_ref_phi",
      "op": "callsub test_self_ref_phi",
      "defined_out": [
        "{test_self_ref_phi}"
      ],
      "stack_out": [
        "result2#0",
        "{test_self_ref_phi}"
      ]
    },
    "14": {
      "op": "pop",
      "stack_out": [
        "result2#0"
      ]
    },
    "15": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "result2#0",
        "1"
      ]
    },
    "16": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "19": {
      "op": "dupn 2",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "21": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0",
        "tmp%0#0"
      ]
    },
    "22": {
      "op": "log",
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0"
      ]
    },
    "23": {
      "op": "intc_0 // 1",
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0",
        "1"
      ]
    },
    "24": {
      "op": ">=",
      "defined_out": [
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%1#0"
      ]
    },
    "25": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "28": {
      "block": "main_and_contd@1",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "dup",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0"
      ]
    },
    "29": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result1#0",
        "2"
      ]
    },
    "30": {
      "op": "<=",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "34": {
      "block": "main_bool_true@2",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "and_result%0#0"
      ]
    },
    "35": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "result2#0",
        "result1#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "36": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "2"
      ]
    },
    "37": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "40": {
      "op": "dup",
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0",
        "result2#0"
      ]
    },
    "41": {
      "op": "bury 3",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "43": {
      "op": "dup",
      "defined_out": [
        "result2#0",
        "result2#0 (copy)"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0",
        "result2#0 (copy)"
      ]
    },
    "44": {
      "op": "itob",
      "defined_out": [
        "result2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0",
        "tmp%3#0"
      ]
    },
    "45": {
      "op": "log",
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "46": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "result2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0",
        "1"
      ]
    },
    "47": {
      "op": ">=",
      "defined_out": [
        "result2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "48": {
      "op": "bz main_bool_false@7",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "51": {
      "block": "main_and_contd@5",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "53": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result2#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "result2#0",
        "2"
      ]
    },
    "54": {
      "op": "<=",
      "defined_out": [
        "result2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%5#0"
      ]
    },
    "55": {
      "op": "bz main_bool_false@7",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "58": {
      "block": "main_bool_true@6",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "and_result%1#0"
      ]
    },
    "59": {
      "block": "main_bool_merge@8",
      "stack_in": [
        "result2#0",
        "result1#0",
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "60": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "7"
      ]
    },
    "62": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "7"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "7",
        "11"
      ]
    },
    "64": {
      "callsub": "test_cases.unssa.contract.test_swap_loop",
      "op": "callsub test_swap_loop",
      "defined_out": [
        "{test_swap_loop}"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "{test_swap_loop}"
      ]
    },
    "67": {
      "op": "pop",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "68": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "69": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block",
      "op": "callsub test_param_update_with_reentrant_entry_block",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%6#0"
      ]
    },
    "72": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%6#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%6#0",
        "10"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%7#0"
      ]
    },
    "75": {
      "op": "assert",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "76": {
      "op": "intc_1 // 0",
      "stack_out": [
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "77": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2",
      "op": "callsub test_param_update_with_reentrant_entry_block_v2",
      "defined_out": [
        "{test_param_update_with_reentrant_entry_block_v2}"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "{test_param_update_with_reentrant_entry_block_v2}"
      ]
    },
    "80": {
      "op": "pop",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "81": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3",
      "op": "callsub test_param_update_with_reentrant_entry_block_v3"
    },
    "84": {
      "callsub": "test_cases.unssa.contract.test_swap_args",
      "op": "callsub test_swap_args"
    },
    "87": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "100"
      ]
    },
    "88": {
      "op": "intc 4 // 200",
      "defined_out": [
        "100",
        "200"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "100",
        "200"
      ]
    },
    "90": {
      "op": "intc_1 // 0",
      "stack_out": [
        "result2#0",
        "result1#0",
        "100",
        "200",
        "0"
      ]
    },
    "91": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "94": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "a#0"
      ]
    },
    "95": {
      "op": "intc_3 // 100",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "a#0",
        "100"
      ]
    },
    "96": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "tmp%8#0"
      ]
    },
    "97": {
      "op": "assert",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0"
      ]
    },
    "98": {
      "op": "intc 4 // 200",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "200"
      ]
    },
    "100": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "assert",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "102": {
      "op": "intc_3 // 100",
      "stack_out": [
        "result2#0",
        "result1#0",
        "100"
      ]
    },
    "103": {
      "op": "intc 4 // 200",
      "stack_out": [
        "result2#0",
        "result1#0",
        "100",
        "200"
      ]
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "100",
        "200"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "100",
        "200",
        "1"
      ]
    },
    "106": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "defined_out": [
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "a#0"
      ]
    },
    "110": {
      "op": "intc 4 // 200",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "a#0",
        "200"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "tmp%10#0"
      ]
    },
    "113": {
      "op": "assert",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0"
      ]
    },
    "114": {
      "op": "intc_3 // 100",
      "stack_out": [
        "result2#0",
        "result1#0",
        "b#0",
        "100"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "tmp%11#0"
      ]
    },
    "116": {
      "op": "assert",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "117": {
      "op": "intc_0 // 1",
      "stack_out": [
        "result2#0",
        "result1#0",
        "1"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": [
        "result2#0",
        "result1#0"
      ]
    },
    "119": {
      "block": "main_bool_false@7",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "and_result%1#0"
      ]
    },
    "120": {
      "op": "b main_bool_merge@8"
    },
    "123": {
      "block": "main_bool_false@3",
      "stack_in": [
        "result2#0",
        "result1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "result2#0",
        "result1#0",
        "and_result%0#0"
      ]
    },
    "124": {
      "op": "b main_bool_merge@4"
    },
    "127": {
      "subroutine": "test_cases.unssa.contract.test_self_ref_phi",
      "params": {},
      "block": "test_self_ref_phi",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "130": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "131": {
      "block": "test_self_ref_phi_while_top@1",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "133": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "100"
      ]
    },
    "134": {
      "op": "<",
      "defined_out": [
        "a#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "bz test_self_ref_phi_after_while@7",
      "stack_out": [
        "a#0"
      ]
    },
    "138": {
      "block": "test_self_ref_phi_while_body@2",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "140": {
      "op": "pushint 105 // 105",
      "defined_out": [
        "105",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "105"
      ]
    },
    "142": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "0"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0"
      ]
    },
    "145": {
      "op": "bz test_self_ref_phi_after_if_else@4",
      "stack_out": [
        "a#0"
      ]
    },
    "148": {
      "block": "test_self_ref_phi_if_body@3",
      "stack_in": [
        "a#0"
      ],
      "op": "b test_self_ref_phi_while_top@1"
    },
    "151": {
      "block": "test_self_ref_phi_after_if_else@4",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "153": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "21"
      ]
    },
    "155": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#0"
      ]
    },
    "156": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#0",
        "0"
      ]
    },
    "157": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "158": {
      "op": "bz test_self_ref_phi_after_if_else@6",
      "stack_out": [
        "a#0"
      ]
    },
    "161": {
      "block": "test_self_ref_phi_after_while@7",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "163": {
      "op": "swap"
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    },
    "165": {
      "block": "test_self_ref_phi_after_if_else@6",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "167": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "1"
      ]
    },
    "168": {
      "op": "+",
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "169": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "171": {
      "op": "b test_self_ref_phi_while_top@1"
    },
    "174": {
      "subroutine": "test_cases.unssa.contract.test_swap",
      "params": {
        "i#0": "uint64"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "177": {
      "op": "intc_0 // 1",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "178": {
      "op": "intc_2 // 2",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "179": {
      "block": "test_swap_while_top@1",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "181": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "182": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "bz test_swap_after_while@3",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "186": {
      "block": "test_swap_while_body@2",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "188": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0",
        "x#0"
      ]
    },
    "190": {
      "op": "frame_bury 0",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0"
      ]
    },
    "192": {
      "op": "frame_bury 1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "194": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "1"
      ]
    },
    "197": {
      "op": "-",
      "defined_out": [
        "i#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0"
      ]
    },
    "198": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "200": {
      "op": "b test_swap_while_top@1"
    },
    "203": {
      "block": "test_swap_after_while@3",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "204": {
      "subroutine": "test_cases.unssa.contract.test_swap_loop",
      "params": {
        "i#0": "uint64",
        "j#0": "uint64"
      },
      "block": "test_swap_loop",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "207": {
      "op": "intc_0 // 1",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "208": {
      "op": "intc_2 // 2",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "209": {
      "block": "test_swap_loop_while_top@1",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "211": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "212": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "bz test_swap_loop_after_while@6",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "216": {
      "block": "test_swap_loop_while_top@3",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "j#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)"
      ]
    },
    "218": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "j#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)",
        "0"
      ]
    },
    "219": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%1#0"
      ]
    },
    "220": {
      "op": "bz test_swap_loop_after_while@5",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "223": {
      "block": "test_swap_loop_while_body@4",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "225": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0",
        "x#0"
      ]
    },
    "227": {
      "op": "frame_bury 0",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0"
      ]
    },
    "229": {
      "op": "frame_bury 1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "231": {
      "op": "frame_dig -1",
      "defined_out": [
        "j#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)"
      ]
    },
    "233": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "j#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)",
        "1"
      ]
    },
    "234": {
      "op": "-",
      "defined_out": [
        "j#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0"
      ]
    },
    "235": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "237": {
      "op": "b test_swap_loop_while_top@3"
    },
    "240": {
      "block": "test_swap_loop_after_while@5",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "242": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "1"
      ]
    },
    "243": {
      "op": "-",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0"
      ]
    },
    "244": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "246": {
      "op": "b test_swap_loop_while_top@1"
    },
    "249": {
      "block": "test_swap_loop_after_while@6",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "250": {
      "subroutine": "test_cases.unssa.contract.test_tuple_swap",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64",
        "i#0": "uint64"
      },
      "block": "test_tuple_swap",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "254": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0"
      ]
    },
    "256": {
      "block": "test_tuple_swap_for_header@1",
      "stack_in": [
        "_item#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0",
        "_item#0"
      ]
    },
    "258": {
      "op": "frame_dig -1",
      "defined_out": [
        "_item#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "_item#0",
        "i#0 (copy)"
      ]
    },
    "260": {
      "op": "<",
      "defined_out": [
        "_item#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "_item#0",
        "continue_looping%0#0"
      ]
    },
    "261": {
      "op": "bz test_tuple_swap_after_for@4",
      "stack_out": [
        "_item#0"
      ]
    },
    "264": {
      "block": "test_tuple_swap_for_body@2",
      "stack_in": [
        "_item#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "_item#0",
        "a#2"
      ]
    },
    "266": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#2",
        "b#0"
      ],
      "stack_out": [
        "_item#0",
        "a#2",
        "b#0"
      ]
    },
    "268": {
      "op": "frame_bury -2",
      "stack_out": [
        "_item#0",
        "a#2"
      ]
    },
    "270": {
      "block": "test_tuple_swap_for_footer@3",
      "stack_in": [
        "_item#0",
        "a#2"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "_item#0",
        "a#2",
        "_item#0"
      ]
    },
    "272": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_item#0"
      ],
      "stack_out": [
        "_item#0",
        "a#2",
        "_item#0",
        "1"
      ]
    },
    "273": {
      "op": "+",
      "stack_out": [
        "_item#0",
        "a#2",
        "_item#0"
      ]
    },
    "274": {
      "op": "frame_bury 0",
      "defined_out": [
        "_item#0",
        "a#2"
      ],
      "stack_out": [
        "_item#0",
        "a#2"
      ]
    },
    "276": {
      "op": "frame_bury -3",
      "stack_out": [
        "_item#0"
      ]
    },
    "278": {
      "op": "b test_tuple_swap_for_header@1"
    },
    "281": {
      "block": "test_tuple_swap_after_for@4",
      "stack_in": [
        "_item#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "a#0 (copy)"
      ]
    },
    "283": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "_item#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "285": {
      "op": "uncover 2"
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_param_update_with_reentrant_entry_block",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "291": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "x#9"
      ]
    },
    "293": {
      "block": "test_param_update_with_reentrant_entry_block_while_top@1",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#9"
      ],
      "stack_out": [
        "x#9",
        "x#9"
      ]
    },
    "295": {
      "op": "frame_bury 0",
      "defined_out": [
        "x#9"
      ],
      "stack_out": [
        "x#9"
      ]
    },
    "297": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#9"
      ],
      "stack_out": [
        "x#9",
        "1"
      ]
    },
    "298": {
      "op": "bz test_param_update_with_reentrant_entry_block_after_while@5",
      "stack_out": [
        "x#9"
      ]
    },
    "301": {
      "block": "test_param_update_with_reentrant_entry_block_while_body@2",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "303": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)",
        "1"
      ]
    },
    "304": {
      "op": "+",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#9",
        "x#0"
      ]
    },
    "305": {
      "op": "dup"
    },
    "306": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "308": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)",
        "10"
      ]
    },
    "310": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#9",
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "bz test_param_update_with_reentrant_entry_block_after_if_else@4",
      "stack_out": [
        "x#9"
      ]
    },
    "314": {
      "block": "test_param_update_with_reentrant_entry_block_if_body@3",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#9"
      ],
      "stack_out": [
        "x#9",
        "x#9"
      ]
    },
    "316": {
      "op": "frame_bury 0",
      "defined_out": [
        "x#9"
      ],
      "stack_out": [
        "x#9"
      ]
    },
    "318": {
      "block": "test_param_update_with_reentrant_entry_block_after_while@5",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#9",
        "x#0"
      ]
    },
    "320": {
      "op": "dup"
    },
    "321": {
      "op": "frame_bury -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "323": {
      "op": "swap"
    },
    "324": {
      "retsub": true,
      "op": "retsub"
    },
    "325": {
      "block": "test_param_update_with_reentrant_entry_block_after_if_else@4",
      "stack_in": [
        "x#9"
      ],
      "op": "b test_param_update_with_reentrant_entry_block_while_top@1"
    },
    "328": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_param_update_with_reentrant_entry_block_v2",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "331": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "333": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "334": {
      "op": "+",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "335": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "337": {
      "block": "test_param_update_with_reentrant_entry_block_v2_while_top@1",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "338": {
      "op": "bz test_param_update_with_reentrant_entry_block_v2_after_while@5",
      "stack_out": []
    },
    "341": {
      "block": "test_param_update_with_reentrant_entry_block_v2_while_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "343": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "344": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "bz test_param_update_with_reentrant_entry_block_v2_after_if_else@4",
      "stack_out": []
    },
    "348": {
      "block": "test_param_update_with_reentrant_entry_block_v2_after_while@5",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "350": {
      "retsub": true,
      "op": "retsub"
    },
    "351": {
      "block": "test_param_update_with_reentrant_entry_block_v2_after_if_else@4",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v2_while_top@1"
    },
    "354": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3",
      "params": {},
      "block": "test_param_update_with_reentrant_entry_block_v3_while_top@1",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "355": {
      "op": "bz test_param_update_with_reentrant_entry_block_v3_after_while@5",
      "stack_out": []
    },
    "358": {
      "block": "test_param_update_with_reentrant_entry_block_v3_while_body@2",
      "stack_in": [],
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "362": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "363": {
      "op": "bz test_param_update_with_reentrant_entry_block_v3_after_if_else@4",
      "stack_out": []
    },
    "366": {
      "block": "test_param_update_with_reentrant_entry_block_v3_after_while@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "367": {
      "block": "test_param_update_with_reentrant_entry_block_v3_after_if_else@4",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v3_while_top@1"
    },
    "370": {
      "subroutine": "test_cases.unssa.contract.one",
      "params": {},
      "block": "one",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "371": {
      "retsub": true,
      "op": "retsub"
    },
    "372": {
      "subroutine": "test_cases.unssa.contract.swap_args",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "swap_args",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "375": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "377": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "379": {
      "retsub": true,
      "op": "retsub"
    },
    "380": {
      "subroutine": "test_cases.unssa.contract.test_swap_args",
      "params": {},
      "block": "test_swap_args",
      "stack_in": [],
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "123"
      ]
    },
    "385": {
      "op": "+",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "386": {
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "389": {
      "op": "pushint 234 // 234",
      "defined_out": [
        "234",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "234"
      ]
    },
    "392": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "393": {
      "callsub": "test_cases.unssa.contract.swap_args",
      "op": "callsub swap_args",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "396": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "397": {
      "op": "pushint 235 // 235",
      "defined_out": [
        "235",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "235"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%2#0"
      ]
    },
    "401": {
      "error": "a == 235",
      "op": "assert // a == 235",
      "stack_out": [
        "b#0"
      ]
    },
    "402": {
      "op": "pushint 124 // 124",
      "defined_out": [
        "124",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "124"
      ]
    },
    "404": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "405": {
      "error": "b = 124",
      "op": "assert // b = 124",
      "stack_out": []
    },
    "406": {
      "retsub": true,
      "op": "retsub"
    }
  }
}