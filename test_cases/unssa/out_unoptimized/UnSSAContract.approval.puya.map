{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAKQ;;;;AACoB;AAAV;;;AAAV;;AACI;AAAJ;AACO;AAAA;AAAA;;;AAAA;;;AAAK;AAAW;AAAX;AAAL;;;AAAA;;;;;;;;;AAAP;;AAAA;AACoB;AAAV;;;AAAV;AAAA;;AACI;AAAA;AAAJ;AACO;AAAA;AAAA;;;AAAA;;;AAAK;;AAAW;AAAX;AAAL;;;AAAA;;;;;;;;;AAAP;;AAAA;AACe;;AAAW;;AAA1B;;;;AACoD;AAA7C;;;AAA2D;;AAA3D;AAAP;AACgD;AAAhD;;;;AACA;;;AACA;;;AAEyB;AAAa;;AAAa;AAA1C;;;AAAA;;AACG;AAAL;AAAP;AACY;;AAAL;AAAP;AACyB;AAAa;;AAAa;AAA1C;;;AAAA;;AACG;;AAAL;AAAP;AACY;AAAL;AAAP;AAEO;AAAP;;;;;;;;;;;;;AAMR;;;;;;AAEQ;;;;AACE;;AAAI;AAAJ;AAAV;;;AAAA;;;AACW;;AAAI;;AAAJ;AAAW;AAAX;AAAX;;;AAAA;;;AACY;;;AACG;;AAAI;;AAAJ;AAAJ;AAAA;AAAX;;;AAAA;;;AACY;;;AAER;;AAAA;;AAAA;AADI;;AAAK;AAAL;AAAA;;;;;AAIR;;;;;;AAEQ;AACA;;;;AACE;;AAAI;AAAJ;AAAV;;;AAAA;;;AACQ;;AACA;;AAAA;;AACA;;AACI;;AAAI;AAAJ;AAAJ;;;;;AACJ;AAGJ;;;;;;AAEQ;AACA;;;;AACE;;AAAI;AAAJ;AAAV;;;AAAA;;;;;;AACc;;AAAI;AAAJ;AAAd;;;AAAA;;;AACY;;AACA;;AAAA;;AACA;;AACI;;AAAI;AAAJ;AAAJ;;;;;AACA;;AAAI;AAAJ;AAAJ;;;;;AACJ;AAGJ;;;;;;;AAEiB;AAAjB;AAAiB;;;;AAAA;;AAAA;;AAAA;AAAjB;;;AAAA;;;AACQ;;AAAA;;AAAA;;AAAA;;;;;AADS;;AAAA;AAAA;AAAA;;;;;;;;;AAEb;;AAAA;;AAAA;;AAAA;;AAAA;AAGJ;;;;;;;;;;;;;;AAEU;AAAV;;;AAAA;;;AACY;;AAAI;AAAJ;;AAAJ;;AACQ;;AAAL;AAAX;;;AAAA;;;;;;;AACY;;;;;;;;AACR;;AAAA;;;;AAGJ;;;;;;AAEQ;;AAAI;AAAJ;AAAJ;;;;;AACM;AAAV;;;AAAA;;;AACW;;AAAK;AAAL;AAAX;;;AAAA;;;AACY;;;AACR;;AAAA;;;;;;;;;;AAKM;AAAV;;;AAAA;;;AACW;;;AAAA;AAAA;AAAX;;;AAAA;;;AACY;;;;;;;;;;AAKD;AAAP;AAGJ;;;;;;AAEI;;AAAA;;AAAA;;;;AAKI;;;AAAQ;;AAAR;AACA;;;AAAQ;;;AAAR;AACG;;;AAAA;;AACK;;;AAAL;AAAP;AACY;;AAAL;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.unssa.contract.UnSSAContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 100 200"
    },
    "9": {
      "op": "bytecblock \"\""
    },
    "12": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "13": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0"
      ]
    },
    "14": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0"
      ]
    },
    "15": {
      "op": "b block@0"
    },
    "18": {
      "block": "block@0",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0"
      ],
      "callsub": "test_cases.unssa.contract.test_self_ref_phi",
      "op": "callsub test_self_ref_phi",
      "defined_out": [
        "{test_self_ref_phi}"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "{test_self_ref_phi}"
      ]
    },
    "21": {
      "op": "pop",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0"
      ]
    },
    "22": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "1"
      ]
    },
    "23": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "dupn 2",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "28": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0",
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "log",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0"
      ]
    },
    "30": {
      "op": "intc_0 // 1",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0",
        "1"
      ]
    },
    "31": {
      "op": ">=",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "bz bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "35": {
      "op": "b and_contd@1"
    },
    "38": {
      "block": "and_contd@1",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "dup",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0"
      ]
    },
    "39": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result1#0",
        "2"
      ]
    },
    "40": {
      "op": "<=",
      "defined_out": [
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%3#0"
      ]
    },
    "41": {
      "op": "bz bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "44": {
      "op": "b bool_true@2"
    },
    "47": {
      "block": "bool_true@2",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "1"
      ]
    },
    "48": {
      "op": "bury 4",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "50": {
      "op": "b bool_merge@4"
    },
    "53": {
      "block": "bool_merge@4",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "and_result%0#0"
      ]
    },
    "55": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "56": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "2"
      ]
    },
    "57": {
      "callsub": "test_cases.unssa.contract.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "and_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "60": {
      "op": "dup",
      "defined_out": [
        "and_result%0#0",
        "result2#0",
        "result2#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0",
        "result2#0 (copy)"
      ]
    },
    "61": {
      "op": "bury 3",
      "defined_out": [
        "and_result%0#0",
        "result2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "63": {
      "op": "dup",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0",
        "result2#0 (copy)"
      ]
    },
    "64": {
      "op": "itob",
      "defined_out": [
        "and_result%0#0",
        "result2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0",
        "tmp%5#0"
      ]
    },
    "65": {
      "op": "log",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "66": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "and_result%0#0",
        "result2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0",
        "1"
      ]
    },
    "67": {
      "op": ">=",
      "defined_out": [
        "and_result%0#0",
        "result2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%6#0"
      ]
    },
    "68": {
      "op": "bz bool_false@7",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "71": {
      "op": "b and_contd@5"
    },
    "74": {
      "block": "and_contd@5",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0"
      ]
    },
    "76": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "result2#0",
        "2"
      ]
    },
    "77": {
      "op": "<=",
      "defined_out": [
        "result2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%7#0"
      ]
    },
    "78": {
      "op": "bz bool_false@7",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "81": {
      "op": "b bool_true@6"
    },
    "84": {
      "block": "bool_true@6",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "1"
      ]
    },
    "85": {
      "op": "bury 3",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "87": {
      "op": "b bool_merge@8"
    },
    "90": {
      "block": "bool_merge@8",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "and_result%1#0"
      ]
    },
    "92": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "93": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "7"
      ]
    },
    "95": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "7",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "7",
        "11"
      ]
    },
    "97": {
      "callsub": "test_cases.unssa.contract.test_swap_loop",
      "op": "callsub test_swap_loop",
      "defined_out": [
        "and_result%1#0",
        "{test_swap_loop}"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "{test_swap_loop}"
      ]
    },
    "100": {
      "op": "pop",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "101": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "102": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block",
      "op": "callsub test_param_update_with_reentrant_entry_block",
      "defined_out": [
        "and_result%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%8#0"
      ]
    },
    "105": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "and_result%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%8#0",
        "10"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "and_result%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%9#0"
      ]
    },
    "108": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "109": {
      "op": "intc_1 // 0",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "110": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2",
      "op": "callsub test_param_update_with_reentrant_entry_block_v2",
      "defined_out": [
        "and_result%1#0",
        "{test_param_update_with_reentrant_entry_block_v2}"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "{test_param_update_with_reentrant_entry_block_v2}"
      ]
    },
    "113": {
      "op": "pop",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "114": {
      "callsub": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3",
      "op": "callsub test_param_update_with_reentrant_entry_block_v3"
    },
    "117": {
      "callsub": "test_cases.unssa.contract.test_swap_args",
      "op": "callsub test_swap_args"
    },
    "120": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100"
      ]
    },
    "121": {
      "op": "intc 4 // 200",
      "defined_out": [
        "100",
        "200",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100",
        "200"
      ]
    },
    "123": {
      "op": "intc_1 // 0",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100",
        "200",
        "0"
      ]
    },
    "124": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "defined_out": [
        "and_result%1#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "127": {
      "op": "cover 1",
      "defined_out": [
        "a#0",
        "and_result%1#0",
        "b#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "a#0"
      ]
    },
    "129": {
      "op": "intc_3 // 100",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "a#0",
        "100"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "and_result%1#0",
        "b#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "tmp%12#0"
      ]
    },
    "131": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0"
      ]
    },
    "132": {
      "op": "intc 4 // 200",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "200"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "and_result%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%13#0"
      ]
    },
    "135": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "136": {
      "op": "intc_3 // 100",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100"
      ]
    },
    "137": {
      "op": "intc 4 // 200",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100",
        "200"
      ]
    },
    "139": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "100",
        "200",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "100",
        "200",
        "1"
      ]
    },
    "140": {
      "callsub": "test_cases.unssa.contract.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "defined_out": [
        "and_result%1#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "143": {
      "op": "cover 1",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "a#0"
      ]
    },
    "145": {
      "op": "intc 4 // 200",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "a#0",
        "200"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "and_result%1#0",
        "b#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "tmp%16#0"
      ]
    },
    "148": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0"
      ]
    },
    "149": {
      "op": "intc_3 // 100",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "b#0",
        "100"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "and_result%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "tmp%17#0"
      ]
    },
    "151": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "152": {
      "op": "intc_0 // 1",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "1"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "154": {
      "block": "bool_false@7",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "155": {
      "op": "bury 3",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "157": {
      "op": "b bool_merge@8"
    },
    "160": {
      "block": "bool_false@3",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0",
        "0"
      ]
    },
    "161": {
      "op": "bury 4",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "163": {
      "op": "b bool_merge@4"
    },
    "166": {
      "subroutine": "test_cases.unssa.contract.test_self_ref_phi",
      "params": {},
      "block": "test_self_ref_phi",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "169": {
      "op": "b test_self_ref_phi_block@0"
    },
    "172": {
      "block": "test_self_ref_phi_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [],
      "stack_out": [
        "a#0"
      ]
    },
    "173": {
      "op": "b test_self_ref_phi_while_top@1"
    },
    "176": {
      "block": "test_self_ref_phi_while_top@1",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "178": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "100"
      ]
    },
    "179": {
      "op": "<",
      "defined_out": [
        "a#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "bz test_self_ref_phi_after_while@7",
      "stack_out": [
        "a#0"
      ]
    },
    "183": {
      "op": "b test_self_ref_phi_while_body@2"
    },
    "186": {
      "block": "test_self_ref_phi_while_body@2",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "188": {
      "op": "pushint 105 // 105",
      "defined_out": [
        "105",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "105"
      ]
    },
    "190": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "191": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "0"
      ]
    },
    "192": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0"
      ]
    },
    "193": {
      "op": "bz test_self_ref_phi_after_if_else@4",
      "stack_out": [
        "a#0"
      ]
    },
    "196": {
      "op": "b test_self_ref_phi_if_body@3"
    },
    "199": {
      "block": "test_self_ref_phi_if_body@3",
      "stack_in": [
        "a#0"
      ],
      "op": "b test_self_ref_phi_while_top@1"
    },
    "202": {
      "block": "test_self_ref_phi_after_if_else@4",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "204": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "21"
      ]
    },
    "206": {
      "op": "%",
      "defined_out": [
        "a#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#0"
      ]
    },
    "207": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#0",
        "0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "209": {
      "op": "bz test_self_ref_phi_after_if_else@6",
      "stack_out": [
        "a#0"
      ]
    },
    "212": {
      "op": "b test_self_ref_phi_if_body@5"
    },
    "215": {
      "block": "test_self_ref_phi_if_body@5",
      "stack_in": [
        "a#0"
      ],
      "op": "b test_self_ref_phi_after_while@7"
    },
    "218": {
      "block": "test_self_ref_phi_after_while@7",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "220": {
      "op": "uncover 1"
    },
    "222": {
      "retsub": true,
      "op": "retsub"
    },
    "223": {
      "block": "test_self_ref_phi_after_if_else@6",
      "stack_in": [
        "a#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "225": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "1"
      ]
    },
    "226": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%5#0"
      ]
    },
    "227": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "229": {
      "op": "b test_self_ref_phi_while_top@1"
    },
    "232": {
      "subroutine": "test_cases.unssa.contract.test_swap",
      "params": {
        "i#0": "uint64"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "235": {
      "op": "b test_swap_block@0"
    },
    "238": {
      "block": "test_swap_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [],
      "stack_out": [
        "x#0"
      ]
    },
    "239": {
      "op": "intc_2 // 2",
      "defined_out": [],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "240": {
      "op": "b test_swap_while_top@1"
    },
    "243": {
      "block": "test_swap_while_top@1",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "245": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "246": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%0#0"
      ]
    },
    "247": {
      "op": "bz test_swap_after_while@3",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "250": {
      "op": "b test_swap_while_body@2"
    },
    "253": {
      "block": "test_swap_while_body@2",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "255": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0",
        "y#0"
      ]
    },
    "257": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "259": {
      "op": "frame_bury 1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "261": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "1"
      ]
    },
    "264": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%1#0"
      ]
    },
    "265": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "267": {
      "op": "b test_swap_while_top@1"
    },
    "270": {
      "block": "test_swap_after_while@3",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "271": {
      "subroutine": "test_cases.unssa.contract.test_swap_loop",
      "params": {
        "i#0": "uint64",
        "j#0": "uint64"
      },
      "block": "test_swap_loop",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "274": {
      "op": "b test_swap_loop_block@0"
    },
    "277": {
      "block": "test_swap_loop_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [],
      "stack_out": [
        "x#0"
      ]
    },
    "278": {
      "op": "intc_2 // 2",
      "defined_out": [],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "279": {
      "op": "b test_swap_loop_while_top@1"
    },
    "282": {
      "block": "test_swap_loop_while_top@1",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "284": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "285": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%0#0"
      ]
    },
    "286": {
      "op": "bz test_swap_loop_after_while@6",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "289": {
      "op": "b test_swap_loop_while_body@2"
    },
    "292": {
      "block": "test_swap_loop_while_body@2",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "b test_swap_loop_while_top@3"
    },
    "295": {
      "block": "test_swap_loop_while_top@3",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "j#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)"
      ]
    },
    "297": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "j#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)",
        "0"
      ]
    },
    "298": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%1#0"
      ]
    },
    "299": {
      "op": "bz test_swap_loop_after_while@5",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "302": {
      "op": "b test_swap_loop_while_body@4"
    },
    "305": {
      "block": "test_swap_loop_while_body@4",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "307": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0",
        "y#0"
      ]
    },
    "309": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp#0"
      ]
    },
    "311": {
      "op": "frame_bury 1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "313": {
      "op": "frame_dig -1",
      "defined_out": [
        "j#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)"
      ]
    },
    "315": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "j#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "j#0 (copy)",
        "1"
      ]
    },
    "316": {
      "op": "-",
      "defined_out": [
        "tmp%2#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%2#0"
      ]
    },
    "317": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "319": {
      "op": "b test_swap_loop_while_top@3"
    },
    "322": {
      "block": "test_swap_loop_after_while@5",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)"
      ]
    },
    "324": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "i#0 (copy)",
        "1"
      ]
    },
    "325": {
      "op": "-",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "tmp%3#0"
      ]
    },
    "326": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "328": {
      "op": "b test_swap_loop_while_top@1"
    },
    "331": {
      "block": "test_swap_loop_after_while@6",
      "stack_in": [
        "x#0",
        "y#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0"
      ]
    },
    "332": {
      "subroutine": "test_cases.unssa.contract.test_tuple_swap",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64",
        "i#0": "uint64"
      },
      "block": "test_tuple_swap",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "335": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#2"
      ]
    },
    "336": {
      "op": "b test_tuple_swap_block@0"
    },
    "339": {
      "block": "test_tuple_swap_block@0",
      "stack_in": [
        "a#2"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "340": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "a#2"
      ]
    },
    "341": {
      "op": "intc_1 // 0",
      "defined_out": [],
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "342": {
      "op": "b test_tuple_swap_for_header@1"
    },
    "345": {
      "block": "test_tuple_swap_for_header@1",
      "stack_in": [
        "a#2",
        "_item#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "_item#0"
      ]
    },
    "347": {
      "op": "frame_dig -1",
      "defined_out": [
        "_item#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "_item#0",
        "i#0 (copy)"
      ]
    },
    "349": {
      "op": "<",
      "defined_out": [
        "_item#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "continue_looping%0#0"
      ]
    },
    "350": {
      "op": "bz test_tuple_swap_after_for@4",
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "353": {
      "op": "b test_tuple_swap_for_body@2"
    },
    "356": {
      "block": "test_tuple_swap_for_body@2",
      "stack_in": [
        "a#2",
        "_item#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "b#0 (copy)"
      ]
    },
    "358": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "360": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "a#0 (copy)"
      ]
    },
    "362": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "364": {
      "op": "b test_tuple_swap_for_footer@3"
    },
    "367": {
      "block": "test_tuple_swap_for_footer@3",
      "stack_in": [
        "a#2",
        "_item#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "_item#0"
      ]
    },
    "369": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_item#0"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "_item#0",
        "1"
      ]
    },
    "370": {
      "op": "+",
      "stack_out": [
        "a#2",
        "_item#0",
        "_item#0"
      ]
    },
    "371": {
      "op": "frame_bury 1",
      "defined_out": [
        "_item#0"
      ],
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "373": {
      "op": "frame_dig 0",
      "defined_out": [
        "_item#0",
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "a#2"
      ]
    },
    "375": {
      "op": "frame_bury -3",
      "stack_out": [
        "a#2",
        "_item#0"
      ]
    },
    "377": {
      "op": "b test_tuple_swap_for_header@1"
    },
    "380": {
      "block": "test_tuple_swap_after_for@4",
      "stack_in": [
        "a#2",
        "_item#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "a#0 (copy)"
      ]
    },
    "382": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "_item#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "384": {
      "op": "uncover 3"
    },
    "386": {
      "op": "uncover 3"
    },
    "388": {
      "retsub": true,
      "op": "retsub"
    },
    "389": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_param_update_with_reentrant_entry_block",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "392": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "x#9"
      ]
    },
    "393": {
      "op": "b test_param_update_with_reentrant_entry_block_block@0"
    },
    "396": {
      "block": "test_param_update_with_reentrant_entry_block_block@0",
      "stack_in": [
        "x#9"
      ],
      "op": "b test_param_update_with_reentrant_entry_block_while_top@1"
    },
    "399": {
      "block": "test_param_update_with_reentrant_entry_block_while_top@1",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "401": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "x#9"
      ]
    },
    "403": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "x#9",
        "1"
      ]
    },
    "404": {
      "op": "bz test_param_update_with_reentrant_entry_block_after_while@5",
      "stack_out": [
        "x#9"
      ]
    },
    "407": {
      "op": "b test_param_update_with_reentrant_entry_block_while_body@2"
    },
    "410": {
      "block": "test_param_update_with_reentrant_entry_block_while_body@2",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "412": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)",
        "1"
      ]
    },
    "413": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#9",
        "tmp%0#0"
      ]
    },
    "414": {
      "op": "dup"
    },
    "415": {
      "op": "frame_bury -1",
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "417": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)",
        "10"
      ]
    },
    "419": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "x#9",
        "tmp%1#0"
      ]
    },
    "420": {
      "op": "bz test_param_update_with_reentrant_entry_block_after_if_else@4",
      "stack_out": [
        "x#9"
      ]
    },
    "423": {
      "op": "b test_param_update_with_reentrant_entry_block_if_body@3"
    },
    "426": {
      "block": "test_param_update_with_reentrant_entry_block_if_body@3",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "428": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "x#9"
      ]
    },
    "430": {
      "op": "b test_param_update_with_reentrant_entry_block_after_while@5"
    },
    "433": {
      "block": "test_param_update_with_reentrant_entry_block_after_while@5",
      "stack_in": [
        "x#9"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "x#9"
      ],
      "stack_out": [
        "x#9",
        "x#9"
      ]
    },
    "435": {
      "op": "dup"
    },
    "436": {
      "op": "frame_bury -1",
      "defined_out": [
        "x#0 (copy)",
        "x#9"
      ],
      "stack_out": [
        "x#9",
        "x#0 (copy)"
      ]
    },
    "438": {
      "op": "uncover 1"
    },
    "440": {
      "retsub": true,
      "op": "retsub"
    },
    "441": {
      "block": "test_param_update_with_reentrant_entry_block_after_if_else@4",
      "stack_in": [
        "x#9"
      ],
      "op": "b test_param_update_with_reentrant_entry_block_while_top@1"
    },
    "444": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_param_update_with_reentrant_entry_block_v2",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "447": {
      "op": "b test_param_update_with_reentrant_entry_block_v2_block@0"
    },
    "450": {
      "block": "test_param_update_with_reentrant_entry_block_v2_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "452": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "453": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "454": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "456": {
      "op": "b test_param_update_with_reentrant_entry_block_v2_while_top@1"
    },
    "459": {
      "block": "test_param_update_with_reentrant_entry_block_v2_while_top@1",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "460": {
      "op": "bz test_param_update_with_reentrant_entry_block_v2_after_while@5",
      "stack_out": []
    },
    "463": {
      "op": "b test_param_update_with_reentrant_entry_block_v2_while_body@2"
    },
    "466": {
      "block": "test_param_update_with_reentrant_entry_block_v2_while_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "468": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "469": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "470": {
      "op": "bz test_param_update_with_reentrant_entry_block_v2_after_if_else@4",
      "stack_out": []
    },
    "473": {
      "op": "b test_param_update_with_reentrant_entry_block_v2_if_body@3"
    },
    "476": {
      "block": "test_param_update_with_reentrant_entry_block_v2_if_body@3",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v2_after_while@5"
    },
    "479": {
      "block": "test_param_update_with_reentrant_entry_block_v2_after_while@5",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "481": {
      "retsub": true,
      "op": "retsub"
    },
    "482": {
      "block": "test_param_update_with_reentrant_entry_block_v2_after_if_else@4",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v2_while_top@1"
    },
    "485": {
      "subroutine": "test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3",
      "params": {},
      "block": "test_param_update_with_reentrant_entry_block_v3",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v3_block@0"
    },
    "488": {
      "block": "test_param_update_with_reentrant_entry_block_v3_block@0",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v3_while_top@1"
    },
    "491": {
      "block": "test_param_update_with_reentrant_entry_block_v3_while_top@1",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "492": {
      "op": "bz test_param_update_with_reentrant_entry_block_v3_after_while@5",
      "stack_out": []
    },
    "495": {
      "op": "b test_param_update_with_reentrant_entry_block_v3_while_body@2"
    },
    "498": {
      "block": "test_param_update_with_reentrant_entry_block_v3_while_body@2",
      "stack_in": [],
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "502": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "503": {
      "op": "bz test_param_update_with_reentrant_entry_block_v3_after_if_else@4",
      "stack_out": []
    },
    "506": {
      "op": "b test_param_update_with_reentrant_entry_block_v3_if_body@3"
    },
    "509": {
      "block": "test_param_update_with_reentrant_entry_block_v3_if_body@3",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v3_after_while@5"
    },
    "512": {
      "block": "test_param_update_with_reentrant_entry_block_v3_after_while@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "513": {
      "block": "test_param_update_with_reentrant_entry_block_v3_after_if_else@4",
      "stack_in": [],
      "op": "b test_param_update_with_reentrant_entry_block_v3_while_top@1"
    },
    "516": {
      "subroutine": "test_cases.unssa.contract.one",
      "params": {},
      "block": "one",
      "stack_in": [],
      "op": "b one_block@0"
    },
    "519": {
      "block": "one_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "520": {
      "retsub": true,
      "op": "retsub"
    },
    "521": {
      "subroutine": "test_cases.unssa.contract.swap_args",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "swap_args",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "524": {
      "op": "b swap_args_block@0"
    },
    "527": {
      "block": "swap_args_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "529": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "531": {
      "retsub": true,
      "op": "retsub"
    },
    "532": {
      "subroutine": "test_cases.unssa.contract.test_swap_args",
      "params": {},
      "block": "test_swap_args",
      "stack_in": [],
      "op": "b test_swap_args_block@0"
    },
    "535": {
      "block": "test_swap_args_block@0",
      "stack_in": [],
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "123"
      ]
    },
    "540": {
      "op": "+",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "541": {
      "callsub": "test_cases.unssa.contract.one",
      "op": "callsub one",
      "defined_out": [
        "a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0"
      ]
    },
    "544": {
      "op": "pushint 234 // 234",
      "defined_out": [
        "234",
        "a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "234"
      ]
    },
    "547": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "548": {
      "callsub": "test_cases.unssa.contract.swap_args",
      "op": "callsub swap_args",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "551": {
      "op": "cover 1",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "553": {
      "op": "pushint 235 // 235",
      "defined_out": [
        "235",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "235"
      ]
    },
    "556": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%6#0"
      ]
    },
    "557": {
      "error": "a == 235",
      "op": "assert // a == 235",
      "stack_out": [
        "b#0"
      ]
    },
    "558": {
      "op": "pushint 124 // 124",
      "defined_out": [
        "124",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "124"
      ]
    },
    "560": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "561": {
      "error": "b = 124",
      "op": "assert // b = 124",
      "stack_out": []
    },
    "562": {
      "retsub": true,
      "op": "retsub"
    }
  }
}