debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['unssa'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
unssa/contract.py:6:9 warning: expression result is ignored
unssa/contract.py:13:9 warning: expression result is ignored
unssa/contract.py:15:9 warning: expression result is ignored
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6
debug: Terminated block@6
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.unssa.contract.UnSSAContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.unssa.contract.test_self_ref_phi
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3) in block@3
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#1 <- block@3, a#2 <- block@6) in block@6
debug: Sealing block@7
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@7
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@1) in block@1
debug: Added a#1 to Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) (a#3) with a#1
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#1 <- block@1, a#1 <- block@5) (a#3) with a#1 in current definition for 1 blocks
debug: Terminated block@7
debug: Building IR for function test_cases.unssa.contract.test_swap
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@1
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@1
debug: Terminated block@2
debug: Sealing block@1
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2) in block@2
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#2 <- block@2) in block@2
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@0) in block@0
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#2 <- block@2) in block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.unssa.contract.test_swap_loop
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Looking for 'j' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let j#1: uint64 = undefined while trying to resolve 'j' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@3
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Looking for 'j' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let j#3: uint64 = undefined while trying to resolve 'j' in block@1
debug: Added j#3 to Phi node: let j#1: uint64 = φ(j#3 <- block@2) in block@2
debug: Added j#2 to Phi node: let j#1: uint64 = φ(j#3 <- block@2, j#2 <- block@4) in block@4
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@1
debug: Added x#3 to Phi node: let x#1: uint64 = φ(x#3 <- block@2) in block@2
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#3 <- block@2, x#2 <- block@4) in block@4
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let y#3: uint64 = undefined while trying to resolve 'y' in block@1
debug: Added y#3 to Phi node: let y#1: uint64 = φ(y#3 <- block@2) in block@2
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#3 <- block@2, y#2 <- block@4) in block@4
debug: Sealing block@5
debug: Created Phi assignment: let i#2: uint64 = undefined while trying to resolve 'i' in block@3
debug: Added i#1 to Phi node: let i#2: uint64 = φ(i#1 <- block@2) in block@2
debug: Added i#2 to Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) (i#2) with i#1
debug: Deleting Phi assignment: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4)
debug: Replaced trivial Phi node: let i#2: uint64 = φ(i#1 <- block@2, i#2 <- block@4) (i#2) with i#1 in current definition for 2 blocks
debug: Terminated block@5
debug: Sealing block@1
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@0) in block@0
debug: Added i#3 to Phi node: let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5) in block@5
debug: Added j#0 to Phi node: let j#3: uint64 = φ(j#0 <- block@0) in block@0
debug: Added j#1 to Phi node: let j#3: uint64 = φ(j#0 <- block@0, j#1 <- block@5) in block@5
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#0 <- block@0, x#1 <- block@5) in block@5
debug: Added y#0 to Phi node: let y#3: uint64 = φ(y#0 <- block@0) in block@0
debug: Added y#1 to Phi node: let y#3: uint64 = φ(y#0 <- block@0, y#1 <- block@5) in block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Building IR for function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Sealing block@0
debug: Terminated block@0
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#2 <- block@4) in block@4
debug: Sealing block@5
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@5
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1) in block@1
debug: Added x#2 to Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#2 <- block@3) in block@3
debug: Terminated block@5
debug: Building IR for function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Sealing block@0
debug: Terminated block@0
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added x#1 to Phi node: let x#2: uint64 = φ(x#1 <- block@0) in block@0
debug: Added x#2 to Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) in block@4
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) (x#2) with x#1
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#1 <- block@0, x#2 <- block@4) (x#2) with x#1 in current definition for 3 blocks
debug: Sealing block@5
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@5
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1) in block@1
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) (x#3) with x#1
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#1 <- block@1, x#1 <- block@3) (x#3) with x#1 in current definition for 1 blocks
debug: Terminated block@5
debug: Building IR for function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Sealing block@0
debug: Terminated block@0
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function test_cases.unssa.contract.one
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.unssa.contract.test_swap_args
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.unssa.contract.swap_args
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.unssa.contract.test_tuple_swap
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for '_item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let _item#1: uint64 = undefined while trying to resolve '_item' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@1
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added _item#0 to Phi node: let _item#1: uint64 = φ(_item#0 <- block@0) in block@0
debug: Added _item#2 to Phi node: let _item#1: uint64 = φ(_item#0 <- block@0, _item#2 <- block@3) in block@3
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@0) in block@0
debug: Added b#2 to Phi node: let b#1: uint64 = φ(b#0 <- block@0, b#2 <- block@3) in block@3
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.unssa.contract.UnSSAContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
unssa/contract.py:9:21 debug: encountered already materialized expression (result1), reusing result: result1#0
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
unssa/contract.py:12:21 debug: encountered already materialized expression (result2), reusing result: result2#0
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let and_result%1#2: bool = undefined while trying to resolve 'and_result%1' in block@8
debug: Added and_result%1#0 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@6) in block@6
debug: Added and_result%1#1 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7) in block@7
debug: Terminated block@8
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Building IR for function test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
info: optimizing approval program of test_cases.unssa.contract.UnSSAContract at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.unssa.contract.test_self_ref_phi for inlining
debug: marking single-use function test_cases.unssa.contract.test_swap_loop for inlining
debug: marking single-use function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block for inlining
debug: marking single-use function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2 for inlining
debug: marking single-use function test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3 for inlining
debug: marking trivial method test_cases.unssa.contract.one as inlineable
debug: marking single-use function test_cases.unssa.contract.test_swap_args for inlining
debug: marking trivial method test_cases.unssa.contract.swap_args as inlineable
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
unssa/contract.py:13:9 debug: inlining call to test_cases.unssa.contract.test_swap_loop in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:14:16 debug: inlining call to test_cases.unssa.contract.test_param_update_with_reentrant_entry_block in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:15:9 debug: inlining call to test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2 in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:16:9 debug: inlining call to test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3 in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:17:9 debug: inlining call to test_cases.unssa.contract.test_swap_args in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:6:9 debug: inlining call to test_cases.unssa.contract.test_self_ref_phi in test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: x#1, tmp#0, y#2
debug: Found equivalence set: y#1, x#2
debug: Found equivalence set: x#7, tmp%6#0
debug: Found equivalence set: tuple_assignment%0#1, a#3
debug: Found equivalence set: tuple_assignment%1#1, b#3
debug: Found equivalence set: tuple_assignment%0#0, a#0
debug: Found equivalence set: tuple_assignment%1#0, b#0
debug: Found equivalence set: tuple_assignment%2#0, a#1
debug: Found equivalence set: tuple_assignment%3#0, b#1
debug: Copy propagation made 9 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#4 0u) to (! tmp%1#4)
debug: Simplified (== tmp%3#2 0u) to (! tmp%3#2)
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (>= 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%0#1
debug: Removing unused variable tmp%1#1
debug: Removing unused variable x#8
debug: Removing unused variable x#9
debug: Removing unused variable tmp%0#3
debug: Removing unused variable tmp%1#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#2 by swapping zero and non-zero targets
debug: simplified terminator of block@42 from goto tmp%2#2 ? block@43 : block@44 to goto tmp%1#4 ? block@44 : block@43
debug: simplified branch on !tmp%4#1 by swapping zero and non-zero targets
debug: simplified terminator of block@44 from goto tmp%4#1 ? block@45 : block@46 to goto tmp%3#2 ? block@46 : block@45
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18 from goto 1u ? block@19 : block@22 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@25 from goto 1u ? block@26 : block@29 to goto block@26
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 1u ? block@27 : block@28 to goto block@27
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32 from goto 1u ? block@33 : block@36 to goto block@33
debug: Replacing trivial Phi node: let x#7: uint64 = φ(x#6 <- block@20) (x#7) with x#6
debug: Deleting Phi assignment: let x#7: uint64 = φ(x#6 <- block@20)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@40 with block@0 in block@41
debug: Merged linear block@40 into block@0
debug: Replaced predecessor block@48 with block@47 in block@3
debug: Replaced predecessor block@48 with block@47 in block@1
debug: Merged linear block@48 into block@47
debug: Replaced predecessor block@9 with block@8 in block@10
debug: Merged linear block@9 into block@8
debug: Replaced predecessor block@16 with block@15 in block@17
debug: Merged linear block@16 into block@15
debug: Replaced predecessor block@17 with block@15 in block@18
debug: Merged linear block@17 into block@15
debug: Replaced predecessor block@19 with block@18 in block@21
debug: Replaced predecessor block@19 with block@18 in block@20
debug: Merged linear block@19 into block@18
debug: Replaced predecessor block@22 with block@20 in block@23
debug: Merged linear block@22 into block@20
debug: Replaced predecessor block@23 with block@20 in block@24
debug: Merged linear block@23 into block@20
debug: Replaced predecessor block@24 with block@20 in block@25
debug: Merged linear block@24 into block@20
debug: Replaced predecessor block@26 with block@25 in block@27
debug: Merged linear block@26 into block@25
debug: Replaced predecessor block@27 with block@25 in block@29
debug: Merged linear block@27 into block@25
debug: Replaced predecessor block@29 with block@25 in block@30
debug: Merged linear block@29 into block@25
debug: Replaced predecessor block@30 with block@25 in block@31
debug: Merged linear block@30 into block@25
debug: Replaced predecessor block@31 with block@25 in block@32
debug: Merged linear block@31 into block@25
debug: Replaced predecessor block@33 with block@32 in block@35
debug: Replaced predecessor block@33 with block@32 in block@34
debug: Merged linear block@33 into block@32
debug: Replaced predecessor block@36 with block@34 in block@37
debug: Merged linear block@36 into block@34
debug: Replaced predecessor block@37 with block@34 in block@38
debug: Merged linear block@37 into block@34
debug: Replaced predecessor block@38 with block@34 in block@39
debug: Merged linear block@38 into block@34
debug: Merged linear block@39 into block@34
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@43 because it's used by phi nodes
debug: Removed empty block: block@45
debug: Not removing empty block block@11 because it's used by phi nodes
debug: Not removing empty block block@21 because it's used by phi nodes
debug: Removed empty block: block@25
debug: Removed empty block: block@28
debug: Replaced predecessor block@35 with block@32 in block@32
debug: Removed empty block: block@35
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_self_ref_phi
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 0u) to (! tmp%1#0)
debug: Simplified (== tmp%3#0 0u) to (! tmp%3#0)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2 from goto tmp%2#0 ? block@3 : block@4 to goto tmp%1#0 ? block@4 : block@3
debug: simplified branch on !tmp%4#0 by swapping zero and non-zero targets
debug: simplified terminator of block@4 from goto tmp%4#0 ? block@5 : block@6 to goto tmp%3#0 ? block@6 : block@5
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@3 because it's used by phi nodes
debug: Removed empty block: block@5
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: x#1, tmp#0, y#2
debug: Found equivalence set: y#1, x#2
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_loop
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: x#1, tmp#0, y#2
debug: Found equivalence set: y#1, x#2
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1 from goto 1u ? block@2 : block@5 to goto block@2
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#2 <- block@3) (x#3) with x#2
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#2 <- block@3)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@4
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Merged linear block@2 into block@1
debug: Merged linear block@5 into block@3
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@0 because it's used by phi nodes
debug: Not removing empty block block@4 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1 from goto 1u ? block@2 : block@5 to goto block@2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@4
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Merged linear block@2 into block@1
debug: Merged linear block@5 into block@3
debug: Optimizer: Remove Empty Blocks
debug: Replaced predecessor block@4 with block@1 in block@1
debug: Removed empty block: block@4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Optimizer: Perform Subroutine Inlining
unssa/contract.py:98:12 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 1u 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1 from goto 1u ? block@2 : block@5 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@7 from goto 1u ? block@3 : block@4 to goto block@3
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@6
debug: Merged linear block@2 into block@1
debug: Replaced predecessor block@6 with block@1 in block@7
debug: Merged linear block@6 into block@1
debug: Replaced predecessor block@7 with block@1 in block@3
debug: Merged linear block@7 into block@1
debug: Replaced predecessor block@3 with block@1 in block@5
debug: Merged linear block@3 into block@1
debug: Merged linear block@5 into block@1
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@0
debug: Removed empty block: block@4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.one
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_swap_args
debug: Optimizer: Perform Subroutine Inlining
unssa/contract.py:114:9 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.test_swap_args
unssa/contract.py:115:9 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.test_swap_args
unssa/contract.py:116:12 debug: inlining call to test_cases.unssa.contract.swap_args in test_cases.unssa.contract.test_swap_args
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#0, a#2, tuple_assignment%1#0, b#1
debug: Found equivalence set: b#0, b#2, tuple_assignment%0#0, a#1
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (+ 1u 123u) to 124u
debug: Simplified (+ 1u 234u) to 235u
debug: Simplified (== 235u 235u) to 1u
debug: Simplified (== 124u 124u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable a#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable b#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@4 with block@0 in block@5
debug: Merged linear block@4 into block@0
debug: Replaced predecessor block@5 with block@0 in block@6
debug: Merged linear block@5 into block@0
debug: Merged linear block@6 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.swap_args
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_tuple_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: b#1, a#2
debug: Found equivalence set: a#1, b#2
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@2 in block@1
debug: Merged linear block@3 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.unssa.contract.test_self_ref_phi
debug: removing unused subroutine test_cases.unssa.contract.test_swap_loop
debug: removing unused subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block
debug: removing unused subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v2
debug: removing unused subroutine test_cases.unssa.contract.test_param_update_with_reentrant_entry_block_v3
debug: removing unused subroutine test_cases.unssa.contract.test_swap_args
debug: Begin optimization pass 2/100
debug: marking trivial method test_cases.unssa.contract.one as inlineable
debug: marking trivial method test_cases.unssa.contract.swap_args as inlineable
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
unssa/contract.py:114:9 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:115:9 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:116:12 debug: inlining call to test_cases.unssa.contract.swap_args in test_cases.unssa.contract.UnSSAContract.approval_program
unssa/contract.py:98:12 debug: inlining call to test_cases.unssa.contract.one in test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#2, a#7, b#3
debug: Found equivalence set: b#2, b#4, a#3
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (+ 1u 123u) to 124u
debug: Simplified (+ 1u 234u) to 235u
debug: Simplified (== 235u 235u) to 1u
debug: Simplified (== 124u 124u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#2
debug: Removing unused variable tmp%4#1
debug: Removing unused variable tmp%0#4
debug: Removing unused variable tmp%0#5
debug: Removing unused variable a#2
debug: Removing unused variable tmp%1#3
debug: Removing unused variable b#2
debug: Removing unused variable tmp%2#1
debug: Removing unused variable tmp%3#1
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@55 from goto 1u ? block@34 : block@32 to goto block@34
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@32 with block@20 in block@54
debug: Merged linear block@32 into block@20
debug: Replaced predecessor block@54 with block@20 in block@55
debug: Merged linear block@54 into block@20
debug: Replaced predecessor block@55 with block@20 in block@34
debug: Merged linear block@55 into block@20
debug: Replaced predecessor block@34 with block@20 in block@48
debug: Merged linear block@34 into block@20
debug: Replaced predecessor block@48 with block@20 in block@49
debug: Merged linear block@48 into block@20
debug: Replaced predecessor block@49 with block@20 in block@50
debug: Merged linear block@49 into block@20
debug: Replaced predecessor block@50 with block@20 in block@51
debug: Merged linear block@50 into block@20
debug: Replaced predecessor block@51 with block@20 in block@52
debug: Merged linear block@51 into block@20
debug: Replaced predecessor block@52 with block@20 in block@53
debug: Merged linear block@52 into block@20
debug: Merged linear block@53 into block@20
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@43 because it's used by phi nodes
debug: Not removing empty block block@11 because it's used by phi nodes
debug: Not removing empty block block@21 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.one
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.swap_args
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_tuple_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.unssa.contract.one
debug: removing unused subroutine test_cases.unssa.contract.swap_args
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@43 because it's used by phi nodes
debug: Not removing empty block block@11 because it's used by phi nodes
debug: Not removing empty block block@21 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.unssa.contract.test_tuple_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for test_cases.unssa.contract.UnSSAContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.unssa.contract.UnSSAContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#4, a#10, a#5, a#6, a#1]
debug: Coalescing tmp%0#2 with [tmp%0#6]
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing and_result%1#0 with [and_result%1#5, and_result%1#1, and_result%1#2]
debug: Coalescing i#0 with [i#6, i#1, i#3]
debug: Coalescing j#0 with [j#6, j#3, j#9, j#1, j#2]
debug: Coalescing x#0 with [x#9, x#3, x#11, x#1, x#4, x#15, x#5, x#6]
debug: Coalescing y#0 with [y#6, y#3, y#9, y#1]
debug: Coalescing b#0 with [b#1]
debug: Coalescing resulted in 89 replacement/s
debug: Sequentializing parallel copies in test_cases.unssa.contract.UnSSAContract.approval_program
debug: loc: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: i#0, j#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do j#0
debug: * to_do i#0
debug: loc: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: i#0, j#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do j#0
debug: * to_do i#0
debug: loc: {j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {j#0=j#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: j#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do j#0
debug: loc: {j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {j#0=j#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: j#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do j#0
debug: loc: {j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {j#0=j#0, x#0=y#0, y#0=x#0}
debug: ready: 
debug: to_do: j#0, x#0, y#0
debug: * to_do y#0
debug: * avail y#0
debug: * avail x#0
debug: * to_do j#0
debug: loc: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, j#0=j#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: i#0, j#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do j#0
debug: * to_do i#0
debug: Performing post-SSA optimizations at level 2
debug: Removing jump block block@43
debug: Removing jump block block@11
debug: Removing jump block block@21
debug: branching to block@43 will be replaced with block@41
debug: branching to block@11 will be replaced with block@12
debug: branching to block@21 will be replaced with block@18
debug: Performing SSA IR destructuring for test_cases.unssa.contract.test_swap
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.unssa.contract.test_swap using strategy RootOperandGrouping
debug: Coalescing i#0 with [i#5, i#1, i#2]
debug: Coalescing x#0 with [x#3, x#1]
debug: Coalescing y#0 with [y#4, y#1]
debug: Coalescing resulted in 19 replacement/s
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_swap
debug: loc: {i#0=i#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: i#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do i#0
debug: loc: {i#0=i#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, x#0=x#0, y#0=y#0}
debug: ready: 
debug: to_do: i#0, x#0, y#0
debug: * to_do y#0
debug: * to_do x#0
debug: * to_do i#0
debug: loc: {i#0=i#0, x#0=x#0, y#0=y#0}
debug: pred: {i#0=i#0, x#0=y#0, y#0=x#0}
debug: ready: 
debug: to_do: i#0, x#0, y#0
debug: * to_do y#0
debug: * avail y#0
debug: * avail x#0
debug: * to_do i#0
debug: Performing post-SSA optimizations at level 2
debug: Performing SSA IR destructuring for test_cases.unssa.contract.test_tuple_swap
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.unssa.contract.test_tuple_swap using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#4, a#1]
debug: Coalescing b#0 with [b#3, b#1]
debug: Coalescing _item#0 with [_item#5, _item#1, _item#2]
debug: Coalescing resulted in 20 replacement/s
debug: Sequentializing parallel copies in test_cases.unssa.contract.test_tuple_swap
debug: loc: {_item#0=_item#0, b#0=b#0, a#0=a#0}
debug: pred: {_item#0=_item#0, b#0=b#0, a#0=a#0}
debug: ready: 
debug: to_do: _item#0, b#0, a#0
debug: * to_do a#0
debug: * to_do b#0
debug: * to_do _item#0
debug: loc: {_item#0=_item#0, b#0=b#0, a#0=a#0}
debug: pred: {_item#0=_item#0, b#0=b#0, a#0=a#0}
debug: ready: 
debug: to_do: _item#0, b#0, a#0
debug: * to_do a#0
debug: * to_do b#0
debug: * to_do _item#0
debug: loc: {_item#0=_item#0, b#0=b#0, a#0=a#0}
debug: pred: {_item#0=_item#0, b#0=a#0, a#0=b#0}
debug: ready: 
debug: to_do: _item#0, b#0, a#0
debug: * to_do a#0
debug: * avail a#0
debug: * avail b#0
debug: * to_do _item#0
debug: Performing post-SSA optimizations at level 2
debug: Output IR to unssa/out_O2/UnSSAContract.ir/UnSSAContract.approval.0.approval.destructured.ir
info: optimizing clear program of test_cases.unssa.contract.UnSSAContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.unssa.contract.UnSSAContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.unssa.contract.UnSSAContract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to unssa/out_O2/UnSSAContract.ir/UnSSAContract.clear.0.clear.destructured.ir
debug: Inserted main_while_top@41.ops[3]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_while_top@41.ops[5]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_while_body@42.ops[3]: 'l-store-copy tmp%1#4 0'
debug: Replaced main_while_body@42.ops[5]: 'v-load tmp%1#4' with 'l-load tmp%1#4'
debug: Inserted main_after_if_else@44.ops[3]: 'l-store-copy tmp%3#2 0'
debug: Replaced main_after_if_else@44.ops[5]: 'v-load tmp%3#2' with 'l-load tmp%3#2'
debug: Inserted main_after_while@47.ops[2]: 'l-store-copy result1#0 0'
debug: Replaced main_after_while@47.ops[4]: 'v-load result1#0' with 'l-load result1#0'
debug: Inserted main_after_while@47.ops[6]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_after_while@47.ops[8]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_while@47.ops[5]: 'l-store-copy result1#0 0'
debug: Replaced main_after_while@47.ops[11]: 'v-load result1#0' with 'l-load result1#0'
debug: Inserted main_and_contd@1.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_and_contd@1.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_bool_merge@4.ops[4]: 'l-store-copy result2#0 0'
debug: Replaced main_bool_merge@4.ops[6]: 'v-load result2#0' with 'l-load result2#0'
debug: Inserted main_bool_merge@4.ops[8]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_bool_merge@4.ops[10]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_bool_merge@4.ops[7]: 'l-store-copy result2#0 0'
debug: Replaced main_bool_merge@4.ops[13]: 'v-load result2#0' with 'l-load result2#0'
debug: Inserted main_and_contd@5.ops[3]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_and_contd@5.ops[5]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_while_body@13.ops[5]: 'l-store-copy parcopy%0#0 0'
debug: Replaced main_while_body@13.ops[9]: 'v-load parcopy%0#0' with 'l-load parcopy%0#0'
debug: Inserted main_while_top@18.ops[3]: 'l-store-copy x#0 0'
debug: Replaced main_while_top@18.ops[5]: 'v-load x#0' with 'l-load x#0'
debug: Inserted main_while_top@18.ops[8]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_while_top@18.ops[10]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_if_body@20.ops[3]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_if_body@20.ops[5]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_if_body@20.ops[12]: 'l-store-copy a#0 0'
debug: Replaced main_if_body@20.ops[14]: 'v-load a#0' with 'l-load a#0'
debug: Inserted main_if_body@20.ops[17]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_if_body@20.ops[19]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_if_body@20.ops[24]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_if_body@20.ops[26]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_if_body@20.ops[33]: 'l-store-copy a#0 0'
debug: Replaced main_if_body@20.ops[35]: 'v-load a#0' with 'l-load a#0'
debug: Inserted main_if_body@20.ops[38]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_if_body@20.ops[40]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@20.ops[45]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_if_body@20.ops[47]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_if_body@20.ops[11]: 'l-store-copy b#0 1'
debug: Replaced main_if_body@20.ops[22]: 'v-load b#0' with 'l-load b#0'
debug: Inserted main_if_body@20.ops[33]: 'l-store-copy b#0 1'
debug: Replaced main_if_body@20.ops[44]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_swap_while_body@2.ops[5]: 'l-store-copy parcopy%0#0 0'
debug: Replaced test_swap_while_body@2.ops[9]: 'v-load parcopy%0#0' with 'l-load parcopy%0#0'
debug: Inserted test_tuple_swap_for_header@1.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced test_tuple_swap_for_header@1.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted test_tuple_swap_for_body@2.ops[5]: 'l-store-copy parcopy%0#0 0'
debug: Replaced test_tuple_swap_for_body@2.ops[9]: 'v-load parcopy%0#0' with 'l-load parcopy%0#0'
debug: Found 10 edge set/s for test_cases.unssa.contract.UnSSAContract.approval_program
debug: Allocated 2 variable/s to x-stack: and_result%0#0, and_result%1#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: and_result%0#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: and_result%0#0
debug: shared x-stack for main_bool_true@6 -> main_bool_merge@8: and_result%1#0
debug: shared x-stack for main_bool_false@7 -> main_bool_merge@8: and_result%1#0
debug: Found 2 edge set/s for test_cases.unssa.contract.test_swap
debug: Found 2 edge set/s for test_cases.unssa.contract.test_tuple_swap
debug: test_cases.unssa.contract.UnSSAContract.approval_program f-stack entry: ['i#0', 'j#0', 'result1#0', 'result2#0', 'x#0', 'y#0']
debug: test_cases.unssa.contract.UnSSAContract.approval_program f-stack on first store: ['a#0']
debug: test_cases.unssa.contract.test_swap f-stack entry: []
debug: test_cases.unssa.contract.test_swap f-stack on first store: ['x#0', 'y#0']
debug: test_cases.unssa.contract.test_tuple_swap f-stack entry: []
debug: test_cases.unssa.contract.test_tuple_swap f-stack on first store: ['_item#0']
unssa/contract.py:5 debug: optimizing TEAL subroutine test_cases.unssa.contract.UnSSAContract.approval_program() -> uint64:
debug: inlining single reference block main_while_body@42 into main_while_top@41
debug: inlining single reference block main_after_if_else@44 into main_while_top@41
debug: inlining single reference block main_after_if_else@46 into main_while_top@41
debug: inlining single reference block main_and_contd@1 into main_after_while@47
debug: inlining single reference block main_bool_true@2 into main_after_while@47
debug: inlining single reference block main_and_contd@5 into main_bool_merge@4
debug: inlining single reference block main_bool_true@6 into main_bool_merge@4
debug: inlining single reference block main_while_body@13 into main_while_top@12
debug: inlining single reference block main_if_body@20 into main_while_top@18
debug: removing explicit jump to fall-through block main_while_top@41
debug: removing explicit jump to fall-through block main_bool_merge@4
debug: removing explicit jump to fall-through block main_bool_merge@8
debug: removing explicit jump to fall-through block main_while_top@10
debug: removing explicit jump to fall-through block main_while_top@12
debug: removing explicit jump to fall-through block main_while_top@18
unssa/contract.py:44 debug: optimizing TEAL subroutine test_cases.unssa.contract.test_swap(i: uint64) -> uint64:
debug: inlining single reference block test_swap_while_body@2 into test_swap_while_top@1
debug: removing explicit jump to fall-through block test_swap_while_top@1
unssa/contract.py:70 debug: optimizing TEAL subroutine test_cases.unssa.contract.test_tuple_swap(a: uint64, b: uint64, i: uint64) -> uint64, uint64:
debug: inlining single reference block test_tuple_swap_for_body@2 into test_tuple_swap_for_header@1
debug: removing explicit jump to fall-through block test_tuple_swap_for_header@1
unssa/contract.py:28 debug: optimizing TEAL subroutine test_cases.unssa.contract.UnSSAContract.clear_state_program() -> uint64:
info: Writing unssa/out_O2/UnSSAContract.approval.teal
info: Writing unssa/out_O2/UnSSAContract.clear.teal
info: Writing unssa/out_O2/UnSSAContract.approval.bin
info: Writing unssa/out_O2/UnSSAContract.clear.bin
info: Writing unssa/out_O2/UnSSAContract.approval.puya.map
info: Writing unssa/out_O2/UnSSAContract.clear.puya.map