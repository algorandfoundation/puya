main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@27
    block@2: // abi_routing_L230
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete_application()void" => block@3, * => block@4}
    block@3: // delete_application_route_L231
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        exit lifted%return#0
    block@4: // route_NoOp_L230
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%10#0: bool = (txn ApplicationID)
        (assert tmp%10#0)
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "check_uint64(uint64,byte[])void" => block@7, method "check_dynamic_bytes(byte[],byte[])void" => block@8, method "check_string(string,byte[])void" => block@7, method "check_biguint(uint512,byte[])void" => block@7, method "check_bool(bool,byte[])void" => block@7, method "check_dyn_array_uin64(uint64[],byte[])void" => block@7, method "check_static_array_uin64_3(uint64[3],byte[])void" => block@7, method "check_dyn_array_struct((uint64,address)[],byte[])void" => block@7, method "check_static_array_struct((uint64,address)[3],byte[])void" => block@7, method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void" => block@7, method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void" => block@7, method "check_static_bytes(byte[32])void" => block@18, * => block@31}
    block@7: // check_uint64_route_L235
        let value#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let expected#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#4: bool = (== value#0 expected#0)
        (assert tmp%0#4) // expected to encode correctly
        exit lifted%return#0
    block@8: // check_dynamic_bytes_route_L239
        let value#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let expected#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#4: bool = (== value#0 expected#0)
        (assert tmp%0#4) // expected to encode correctly
        exit lifted%return#0
    block@18: // check_static_bytes_route_L291
        let bytes32#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#2: account = (txn Sender)
        let tmp%1#1: bool = (== bytes32#0 tmp%0#2)
        (assert tmp%1#1) // expected to encode correctly
        exit lifted%return#0
    block@27: // bare_routing_L230
        let tmp%13#0: uint64 = (txn OnCompletion)
        let not%tmp%13#0: bool = (! tmp%13#0)
        (assert not%tmp%13#0)
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // can only call when creating
        exit lifted%return#0
    block@31: // after_if_else_L230
        fail