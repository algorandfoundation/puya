#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "accounts" "assets" "apps"
    txn NumAppArgs
    bz __algopy_default_create@18
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x6c7a1cb5 0xc8480f0c 0x37c0cbf2 0x2d018f8a 0x6728b1a1 0xce7e6cd3 0x0a37f6e1 0x4c894d7e 0x62ebcf89 0x924e778c // method "acc_ret()address", method "asset_ret()uint64", method "app_ret()uint64", method "store(address,uint64,uint64)void", method "store_apps(uint64[])void", method "store_assets(uint64[])void", method "store_accounts(address[])void", method "return_apps()uint64[]", method "return_assets()uint64[]", method "return_accounts()address[]"
    txna ApplicationArgs 0
    match acc_ret_route@4 asset_ret_route@5 asset_ret_route@5 store_route@7 store_apps_route@8 store_assets_route@9 store_accounts_route@10 return_apps_route@11 return_assets_route@12 return_accounts_route@13
    err

return_accounts_route@13:
    intc_1 // 0
    bytec_1 // "accounts"
    app_global_get_ex
    assert // check self.accounts exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

return_assets_route@12:
    intc_1 // 0
    bytec_2 // "assets"
    app_global_get_ex
    assert // check self.assets exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

return_apps_route@11:
    intc_1 // 0
    bytec_3 // "apps"
    app_global_get_ex
    assert // check self.apps exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

store_accounts_route@10:
    bytec_1 // "accounts"
    txna ApplicationArgs 1
    app_global_put
    intc_0 // 1
    return

store_assets_route@9:
    bytec_2 // "assets"
    txna ApplicationArgs 1
    app_global_put
    intc_0 // 1
    return

store_apps_route@8:
    bytec_3 // "apps"
    txna ApplicationArgs 1
    app_global_put
    intc_0 // 1
    return

store_route@7:
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    pushbytes "acc"
    uncover 3
    app_global_put
    pushbytes "asset"
    swap
    app_global_put
    pushbytes "app"
    swap
    app_global_put
    intc_0 // 1
    return

asset_ret_route@5:
    pushbytes 0x151f7c7500000000000004d2
    log
    intc_0 // 1
    return

acc_ret_route@4:
    bytec_0 // 0x151f7c75
    txn Sender
    concat
    log
    intc_0 // 1
    return

__algopy_default_create@18:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
