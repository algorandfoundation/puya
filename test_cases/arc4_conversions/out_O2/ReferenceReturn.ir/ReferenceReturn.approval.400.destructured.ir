main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@24
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "acc_ret()address" => block@6, method "asset_ret()uint64" => block@7, method "app_ret()uint64" => block@7, method "store(address,uint64,uint64)void" => block@9, method "store_apps(uint64[])void" => block@10, method "store_assets(uint64[])void" => block@11, method "store_accounts(address[])void" => block@12, method "return_apps()uint64[]" => block@13, method "return_assets()uint64[]" => block@14, method "return_accounts()address[]" => block@15, * => block@16}
    block@6: // acc_ret_route_L5
        let tmp%0#3: account = (txn Sender)
        let tmp%2#3: bytes = (concat 0x151f7c75 tmp%0#3)
        (log tmp%2#3)
        exit lifted%return#0
    block@7: // asset_ret_route_L9
        (log 0x151f7c7500000000000004d2)
        exit lifted%return#0
    block@9: // store_route_L17
        let acc#0: account = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        exit lifted%return#0
    block@10: // store_apps_route_L23
        let apps#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "apps" apps#0)
        exit lifted%return#0
    block@11: // store_assets_route_L27
        let assets#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "assets" assets#0)
        exit lifted%return#0
    block@12: // store_accounts_route_L31
        let accounts#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        (app_global_put "accounts" accounts#0)
        exit lifted%return#0
    block@13: // return_apps_route_L35
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        let tmp%1#1: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#1)
        exit lifted%return#0
    block@14: // return_assets_route_L39
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        let tmp%1#1: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#1)
        exit lifted%return#0
    block@15: // return_accounts_route_L43
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        let tmp%1#1: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#1)
        exit lifted%return#0
    block@16: // switch_case_default_L4
        fail
    block@24: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0