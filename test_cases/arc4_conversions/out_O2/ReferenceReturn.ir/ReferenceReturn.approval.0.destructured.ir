main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "acc_ret()address" => block@3, method "asset_ret()uint64" => block@4, method "app_ret()uint64" => block@5, method "store(account,application,asset)void" => block@6, method "store_apps(uint64[])void" => block@7, method "store_assets(uint64[])void" => block@8, method "store_accounts(address[])void" => block@9, method "return_apps()uint64[]" => block@10, method "return_assets()uint64[]" => block@11, method "return_accounts()address[]" => block@12, * => block@19}
    block@3: // acc_ret_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#2: bytes[32] = (txn Sender)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%0#2)
        (log tmp%8#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@4: // asset_ret_route_L9
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        (log 0x151f7c7500000000000004d2)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@5: // app_ret_route_L13
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        (log 0x151f7c7500000000000004d2)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@6: // store_route_L17
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%25#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let acc#0: bytes[32] = ((txnas Accounts) tmp%25#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%27#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let app#0: uint64 = ((txnas Applications) tmp%27#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%29#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let asset#0: uint64 = ((txnas Assets) tmp%29#0)
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@7: // store_apps_route_L23
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let apps#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "apps" apps#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@8: // store_assets_route_L27
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let assets#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "assets" assets#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@9: // store_accounts_route_L31
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let accounts#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        (app_global_put "accounts" accounts#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@10: // return_apps_route_L35
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        let tmp%48#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%48#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@11: // return_assets_route_L39
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        let tmp%54#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%54#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@12: // return_accounts_route_L43
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        let tmp%60#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%60#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@15: // bare_routing_L4
        let tmp%61#0: uint64 = (txn OnCompletion)
        goto tmp%61#0 ? block@19 : block@16
    block@16: // __algopy_default_create_L1
        let tmp%62#0: uint64 = (txn ApplicationID)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // can only call when creating
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@19: // after_if_else_L4
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0
        goto block@20
    block@20: // after_inlined_test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router___L1
        return tmp%0#0