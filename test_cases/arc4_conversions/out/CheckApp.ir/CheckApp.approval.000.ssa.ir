main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__() -> bool:
    block@0: // L230
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@22
    block@1: // abi_routing_L230
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete_application()void" => block@2, * => block@3}
    block@2: // delete_application_route_L231
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]()
        goto block@4
    block@3: // switch_case_default_L230
        goto block@4
    block@4: // switch_case_next_L230
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: bool = (txn ApplicationID)
        goto tmp%10#0 ? block@5 : block@20
    block@5: // call_NoOp_L230
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "check_uint64(uint64,byte[])void" => block@6, method "check_dynamic_bytes(byte[],byte[])void" => block@7, method "check_string(string,byte[])void" => block@8, method "check_biguint(uint512,byte[])void" => block@9, method "check_bool(bool,byte[])void" => block@10, method "check_dyn_array_uin64(uint64[],byte[])void" => block@11, method "check_static_array_uin64_3(uint64[3],byte[])void" => block@12, method "check_dyn_array_struct((uint64,address)[],byte[])void" => block@13, method "check_static_array_struct((uint64,address)[3],byte[])void" => block@14, method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void" => block@15, method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void" => block@16, method "check_static_bytes(byte[32])void" => block@17, * => block@18}
    block@6: // check_uint64_route_L235
        test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]()
        goto block@19
    block@7: // check_dynamic_bytes_route_L239
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]()
        goto block@19
    block@8: // check_string_route_L243
        test_cases.arc4_conversions.contract.CheckApp.check_string[routing]()
        goto block@19
    block@9: // check_biguint_route_L247
        test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]()
        goto block@19
    block@10: // check_bool_route_L251
        test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]()
        goto block@19
    block@11: // check_dyn_array_uin64_route_L255
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]()
        goto block@19
    block@12: // check_static_array_uin64_3_route_L261
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]()
        goto block@19
    block@13: // check_dyn_array_struct_route_L267
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]()
        goto block@19
    block@14: // check_static_array_struct_route_L273
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]()
        goto block@19
    block@15: // check_dyn_array_dyn_struct_route_L279
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]()
        goto block@19
    block@16: // check_static_array_dyn_struct_route_L285
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]()
        goto block@19
    block@17: // check_static_bytes_route_L291
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]()
        goto block@19
    block@18: // switch_case_default_L230
        goto block@19
    block@19: // switch_case_next_L230
        goto block@21
    block@20: // create_NoOp_L230
        goto block@21
    block@21: // after_if_else_L230
        goto block@23
    block@22: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        let tmp%16#0: bool = (&& tmp%13#0 tmp%15#0)
        (assert tmp%16#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create()
        exit 1u
    block@23: // after_if_else_L230
        exit 0u

subroutine test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]() -> void:
    block@0: // L231
        test_cases.arc4_conversions.contract.CheckApp.delete_application()
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]() -> void:
    block@0: // L235
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_uint64(reinterpret_Encoded(uint64)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]() -> void:
    block@0: // L239
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(reinterpret_Encoded(len+uint8[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string[routing]() -> void:
    block@0: // L243
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_string(reinterpret_Encoded(len+utf8[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]() -> void:
    block@0: // L247
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_biguint(reinterpret_Encoded(uint512)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]() -> void:
    block@0: // L251
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_bool(reinterpret_Encoded(bool8)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]() -> void:
    block@0: // L255
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(reinterpret_Encoded(len+uint64[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]() -> void:
    block@0: // L261
        let reinterpret_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(reinterpret_Encoded(uint64[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]() -> void:
    block@0: // L267
        let reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0: Encoded(len+(uint64,uint8[32])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]() -> void:
    block@0: // L273
        let reinterpret_Encoded((uint64,uint8[32])[3])%0#0: Encoded((uint64,uint8[32])[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(reinterpret_Encoded((uint64,uint8[32])[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]() -> void:
    block@0: // L279
        let reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]() -> void:
    block@0: // L285
        let reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]() -> void:
    block@0: // L291
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(reinterpret_Encoded(uint8[32])%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.delete_application() -> void:
    block@0: // L231
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: Encoded(uint64), expected: bytes) -> void:
    block@0: // L235
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: Encoded(len+uint8[]), expected: bytes) -> void:
    block@0: // L239
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string(value: Encoded(len+utf8[]), expected: bytes) -> void:
    block@0: // L243
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: Encoded(uint512), expected: bytes) -> void:
    block@0: // L247
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool(value: Encoded(bool8), expected: bytes) -> void:
    block@0: // L251
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: Encoded(len+uint64[]), expected: bytes) -> void:
    block@0: // L255
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: Encoded(uint64[3]), expected: bytes) -> void:
    block@0: // L261
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: Encoded(len+(uint64,uint8[32])[]), expected: bytes) -> void:
    block@0: // L267
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: Encoded((uint64,uint8[32])[3]), expected: bytes) -> void:
    block@0: // L273
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]), expected: bytes) -> void:
    block@0: // L279
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: Encoded((uint64,uint8[32],(len+uint8[]))[3]), expected: bytes) -> void:
    block@0: // L285
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(bytes32: Encoded(uint8[32])) -> void:
    block@0: // L291
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== bytes32#0 tmp%0#0)
        (assert tmp%1#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create() -> void:
    block@0: // L1
        return 