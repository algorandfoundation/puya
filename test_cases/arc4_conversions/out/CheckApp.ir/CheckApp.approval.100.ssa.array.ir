main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@18
    block@2: // abi_routing_L230
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete_application()void" => block@3, method "check_uint64(uint64,byte[])void" => block@4, method "check_dynamic_bytes(byte[],byte[])void" => block@5, method "check_string(string,byte[])void" => block@6, method "check_biguint(uint512,byte[])void" => block@7, method "check_bool(bool,byte[])void" => block@8, method "check_dyn_array_uin64(uint64[],byte[])void" => block@9, method "check_static_array_uin64_3(uint64[3],byte[])void" => block@10, method "check_dyn_array_struct((uint64,address)[],byte[])void" => block@11, method "check_static_array_struct((uint64,address)[3],byte[])void" => block@12, method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void" => block@13, method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void" => block@14, method "check_static_bytes(byte[32])void" => block@15, * => block@22}
    block@3: // delete_application_route_L231
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#0: bool = 1u
        goto block@23
    block@4: // check_uint64_route_L235
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%11#0: bytes = (txna ApplicationArgs 2)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        test_cases.arc4_conversions.contract.CheckApp.check_uint64(reinterpret_bytes[8]%0#0, tmp%12#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#1: bool = 1u
        goto block@23
    block@5: // check_dynamic_bytes_route_L239
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let tmp%18#0: bytes = (txna ApplicationArgs 2)
        let tmp%19#0: bytes = ((extract 2 0) tmp%18#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(tmp%17#0, tmp%19#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#2: bool = 1u
        goto block@23
    block@6: // check_string_route_L243
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let tmp%24#0: bytes = (txna ApplicationArgs 1)
        let tmp%25#0: bytes = (txna ApplicationArgs 2)
        let tmp%26#0: bytes = ((extract 2 0) tmp%25#0)
        test_cases.arc4_conversions.contract.CheckApp.check_string(tmp%24#0, tmp%26#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#3: bool = 1u
        goto block@23
    block@7: // check_biguint_route_L247
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_bytes[64]%0#0: bytes[64] = (txna ApplicationArgs 1)
        let tmp%31#0: bytes = (txna ApplicationArgs 2)
        let tmp%32#0: bytes = ((extract 2 0) tmp%31#0)
        test_cases.arc4_conversions.contract.CheckApp.check_biguint(reinterpret_bytes[64]%0#0, tmp%32#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#4: bool = 1u
        goto block@23
    block@8: // check_bool_route_L251
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%37#0: bytes = (txna ApplicationArgs 2)
        let tmp%38#0: bytes = ((extract 2 0) tmp%37#0)
        test_cases.arc4_conversions.contract.CheckApp.check_bool(reinterpret_bytes[1]%0#0, tmp%38#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#5: bool = 1u
        goto block@23
    block@9: // check_dyn_array_uin64_route_L255
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let tmp%43#0: bytes = (txna ApplicationArgs 1)
        let tmp%44#0: bytes = (txna ApplicationArgs 2)
        let tmp%45#0: bytes = ((extract 2 0) tmp%44#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(tmp%43#0, tmp%45#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#6: bool = 1u
        goto block@23
    block@10: // check_static_array_uin64_3_route_L261
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        (assert tmp%48#0) // can only call when not creating
        let reinterpret_bytes[24]%0#0: bytes[24] = (txna ApplicationArgs 1)
        let tmp%50#0: bytes = (txna ApplicationArgs 2)
        let tmp%51#0: bytes = ((extract 2 0) tmp%50#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(reinterpret_bytes[24]%0#0, tmp%51#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#7: bool = 1u
        goto block@23
    block@11: // check_dyn_array_struct_route_L267
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        (assert tmp%54#0) // can only call when not creating
        let tmp%56#0: bytes = (txna ApplicationArgs 1)
        let tmp%57#0: bytes = (txna ApplicationArgs 2)
        let tmp%58#0: bytes = ((extract 2 0) tmp%57#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(tmp%56#0, tmp%58#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#8: bool = 1u
        goto block@23
    block@12: // check_static_array_struct_route_L273
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        (assert tmp%61#0) // can only call when not creating
        let reinterpret_bytes[120]%0#0: bytes[120] = (txna ApplicationArgs 1)
        let tmp%63#0: bytes = (txna ApplicationArgs 2)
        let tmp%64#0: bytes = ((extract 2 0) tmp%63#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(reinterpret_bytes[120]%0#0, tmp%64#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#9: bool = 1u
        goto block@23
    block@13: // check_dyn_array_dyn_struct_route_L279
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        (assert tmp%67#0) // can only call when not creating
        let tmp%69#0: bytes = (txna ApplicationArgs 1)
        let tmp%70#0: bytes = (txna ApplicationArgs 2)
        let tmp%71#0: bytes = ((extract 2 0) tmp%70#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(tmp%69#0, tmp%71#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#10: bool = 1u
        goto block@23
    block@14: // check_static_array_dyn_struct_route_L285
        let tmp%72#0: uint64 = (txn OnCompletion)
        let tmp%73#0: bool = (! tmp%72#0)
        (assert tmp%73#0) // OnCompletion is not NoOp
        let tmp%74#0: uint64 = (txn ApplicationID)
        (assert tmp%74#0) // can only call when not creating
        let tmp%76#0: bytes = (txna ApplicationArgs 1)
        let tmp%77#0: bytes = (txna ApplicationArgs 2)
        let tmp%78#0: bytes = ((extract 2 0) tmp%77#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(tmp%76#0, tmp%78#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#11: bool = 1u
        goto block@23
    block@15: // check_static_bytes_route_L291
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (! tmp%79#0)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        (assert tmp%81#0) // can only call when not creating
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(reinterpret_bytes[32]%0#0)
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#12: bool = 1u
        goto block@23
    block@18: // bare_routing_L230
        let tmp%83#0: uint64 = (txn OnCompletion)
        goto tmp%83#0 ? block@22 : block@19
    block@19: // __algopy_default_create_L1
        let tmp%84#0: uint64 = (txn ApplicationID)
        let tmp%85#0: bool = (! tmp%84#0)
        (assert tmp%85#0) // can only call when creating
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#13: bool = 1u
        goto block@23
    block@22: // after_if_else_L230
        let test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#14: bool = 0u
        goto block@23
    block@23: // after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#2 <- block@5, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#3 <- block@6, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#4 <- block@7, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#5 <- block@8, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#6 <- block@9, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#7 <- block@10, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#8 <- block@11, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#9 <- block@12, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#10 <- block@13, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#11 <- block@14, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#12 <- block@15, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#13 <- block@19, test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__%0#14 <- block@22)
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: bytes[8], expected: bytes) -> void:
    block@0: // L235
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: bytes, expected: bytes) -> void:
    block@0: // L239
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string(value: bytes, expected: bytes) -> void:
    block@0: // L243
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: bytes[64], expected: bytes) -> void:
    block@0: // L247
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool(value: bytes[1], expected: bytes) -> void:
    block@0: // L251
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: bytes, expected: bytes) -> void:
    block@0: // L255
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: bytes[24], expected: bytes) -> void:
    block@0: // L261
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: bytes, expected: bytes) -> void:
    block@0: // L267
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: bytes[120], expected: bytes) -> void:
    block@0: // L273
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: bytes, expected: bytes) -> void:
    block@0: // L279
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: bytes, expected: bytes) -> void:
    block@0: // L285
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(bytes32: bytes[32]) -> void:
    block@0: // L291
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== bytes32#0 tmp%0#0)
        (assert tmp%1#0) // expected to encode correctly
        return 