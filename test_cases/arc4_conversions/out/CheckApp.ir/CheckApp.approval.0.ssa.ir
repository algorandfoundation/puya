main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__() -> bool:
    block@0: // L230
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@17
    block@1: // abi_routing_L230
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete_application()void" => block@2, method "check_uint64(uint64,byte[])void" => block@3, method "check_dynamic_bytes(byte[],byte[])void" => block@4, method "check_string(string,byte[])void" => block@5, method "check_biguint(uint512,byte[])void" => block@6, method "check_bool(bool,byte[])void" => block@7, method "check_dyn_array_uin64(uint64[],byte[])void" => block@8, method "check_static_array_uin64_3(uint64[3],byte[])void" => block@9, method "check_dyn_array_struct((uint64,address)[],byte[])void" => block@10, method "check_static_array_struct((uint64,address)[3],byte[])void" => block@11, method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void" => block@12, method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void" => block@13, method "check_static_bytes(byte[32])void" => block@14, * => block@15}
    block@2: // delete_application_route_L231
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_conversions.contract.CheckApp.delete_application()
        return 1u
    block@3: // check_uint64_route_L235
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%11#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_uint64(reinterpret_Encoded(uint64)%0#0, tmp%11#0)
        return 1u
    block@4: // check_dynamic_bytes_route_L239
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%16#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(reinterpret_Encoded(len+uint8[])%1#0, tmp%16#0)
        return 1u
    block@5: // check_string_route_L243
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%21#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        test_cases.arc4_conversions.contract.CheckApp.check_string(reinterpret_Encoded(len+utf8[])%0#0, tmp%21#0)
        return 1u
    block@6: // check_biguint_route_L247
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%26#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        test_cases.arc4_conversions.contract.CheckApp.check_biguint(reinterpret_Encoded(uint512)%0#0, tmp%26#0)
        return 1u
    block@7: // check_bool_route_L251
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%31#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        test_cases.arc4_conversions.contract.CheckApp.check_bool(reinterpret_Encoded(bool8)%0#0, tmp%31#0)
        return 1u
    block@8: // check_dyn_array_uin64_route_L255
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (== tmp%32#0 NoOp)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%36#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(reinterpret_Encoded(len+uint64[])%0#0, tmp%36#0)
        return 1u
    block@9: // check_static_array_uin64_3_route_L261
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%41#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(reinterpret_Encoded(uint64[3])%0#0, tmp%41#0)
        return 1u
    block@10: // check_dyn_array_struct_route_L267
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0: Encoded(len+(uint64,uint8[32])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%8#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%46#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%8#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0, tmp%46#0)
        return 1u
    block@11: // check_static_array_struct_route_L273
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint8[32])[3])%0#0: Encoded((uint64,uint8[32])[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%9#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%51#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%9#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(reinterpret_Encoded((uint64,uint8[32])[3])%0#0, tmp%51#0)
        return 1u
    block@12: // check_dyn_array_dyn_struct_route_L279
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (== tmp%52#0 NoOp)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        let tmp%55#0: bool = (!= tmp%54#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint8[32],len+uint8[])[])%0#0: Encoded(len+(uint64,uint8[32],len+uint8[])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%10#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%56#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%10#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(reinterpret_Encoded(len+(uint64,uint8[32],len+uint8[])[])%0#0, tmp%56#0)
        return 1u
    block@13: // check_static_array_dyn_struct_route_L285
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (== tmp%57#0 NoOp)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%60#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint8[32],len+uint8[])[3])%0#0: Encoded((uint64,uint8[32],len+uint8[])[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%11#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%61#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%11#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(reinterpret_Encoded((uint64,uint8[32],len+uint8[])[3])%0#0, tmp%61#0)
        return 1u
    block@14: // check_static_bytes_route_L291
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (== tmp%62#0 NoOp)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        let tmp%65#0: bool = (!= tmp%64#0 0u)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(reinterpret_Encoded(uint8[32])%0#0)
        return 1u
    block@15: // switch_case_default_L230
        goto block@16
    block@16: // switch_case_next_L230
        goto block@21
    block@17: // bare_routing_L230
        let tmp%66#0: uint64 = (txn OnCompletion)
        switch tmp%66#0 {0u => block@18, * => block@19}
    block@18: // __algopy_default_create_L1
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (== tmp%67#0 0u)
        (assert tmp%68#0) // can only call when creating
        test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create()
        return 1u
    block@19: // switch_case_default_L230
        goto block@20
    block@20: // switch_case_next_L230
        goto block@21
    block@21: // after_if_else_L230
        return 0u

subroutine test_cases.arc4_conversions.contract.CheckApp.delete_application() -> void:
    block@0: // L231
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: Encoded(uint64), expected: bytes) -> void:
    block@0: // L235
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: Encoded(len+uint8[]), expected: bytes) -> void:
    block@0: // L239
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string(value: Encoded(len+utf8[]), expected: bytes) -> void:
    block@0: // L243
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: Encoded(uint512), expected: bytes) -> void:
    block@0: // L247
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool(value: Encoded(bool8), expected: bytes) -> void:
    block@0: // L251
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: Encoded(len+uint64[]), expected: bytes) -> void:
    block@0: // L255
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: Encoded(uint64[3]), expected: bytes) -> void:
    block@0: // L261
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: Encoded(len+(uint64,uint8[32])[]), expected: bytes) -> void:
    block@0: // L267
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: Encoded((uint64,uint8[32])[3]), expected: bytes) -> void:
    block@0: // L273
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: Encoded(len+(uint64,uint8[32],len+uint8[])[]), expected: bytes) -> void:
    block@0: // L279
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: Encoded((uint64,uint8[32],len+uint8[])[3]), expected: bytes) -> void:
    block@0: // L285
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(bytes32: Encoded(uint8[32])) -> void:
    block@0: // L291
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== bytes32#0 tmp%0#0)
        (assert tmp%1#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create() -> void:
    block@0: // L1
        return 