#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytess 0x33b3499e 0x8d762fdf 0x2d329ee1 0x6a4ddf73 0xd6e0b7bc 0xe5cacd06 0x89af557b 0x46e196bd 0xf33886da 0x2595b95a 0x3f55266b 0x7d240945 0x0351a9de // method "delete_application()void", method "check_uint64(uint64,byte[])void", method "check_dynamic_bytes(byte[],byte[])void", method "check_string(string,byte[])void", method "check_biguint(uint512,byte[])void", method "check_bool(bool,byte[])void", method "check_dyn_array_uin64(uint64[],byte[])void", method "check_static_array_uin64_3(uint64[3],byte[])void", method "check_dyn_array_struct((uint64,address)[],byte[])void", method "check_static_array_struct((uint64,address)[3],byte[])void", method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void", method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void", method "check_static_bytes(byte[32])void"
    txna ApplicationArgs 0
    match main_delete_application_route@3 main_check_uint64_route@4 main_check_dynamic_bytes_route@5 main_check_string_route@6 main_check_biguint_route@7 main_check_bool_route@8 main_check_dyn_array_uin64_route@9 main_check_static_array_uin64_3_route@10 main_check_dyn_array_struct_route@11 main_check_static_array_struct_route@12 main_check_dyn_array_dyn_struct_route@13 main_check_static_array_dyn_struct_route@14 main_check_static_bytes_route@15

main_after_if_else@22:
    err

main_check_static_bytes_route@15:
    // arc4_conversions/contract.py:291
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // arc4_conversions/contract.py:291
    // @arc4.abimethod
    callsub check_static_bytes
    intc_0 // 1
    return

main_check_static_array_dyn_struct_route@14:
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    callsub check_static_array_dyn_struct
    intc_0 // 1
    return

main_check_dyn_array_dyn_struct_route@13:
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    callsub check_dyn_array_dyn_struct
    intc_0 // 1
    return

main_check_static_array_struct_route@12:
    // arc4_conversions/contract.py:273
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:273
    // @arc4.abimethod
    callsub check_static_array_struct
    intc_0 // 1
    return

main_check_dyn_array_struct_route@11:
    // arc4_conversions/contract.py:267
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:267
    // @arc4.abimethod
    callsub check_dyn_array_struct
    intc_0 // 1
    return

main_check_static_array_uin64_3_route@10:
    // arc4_conversions/contract.py:261
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:261
    // @arc4.abimethod
    callsub check_static_array_uin64_3
    intc_0 // 1
    return

main_check_dyn_array_uin64_route@9:
    // arc4_conversions/contract.py:255
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:255
    // @arc4.abimethod
    callsub check_dyn_array_uin64
    intc_0 // 1
    return

main_check_bool_route@8:
    // arc4_conversions/contract.py:251
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:251
    // @arc4.abimethod
    callsub check_bool
    intc_0 // 1
    return

main_check_biguint_route@7:
    // arc4_conversions/contract.py:247
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:247
    // @arc4.abimethod
    callsub check_biguint
    intc_0 // 1
    return

main_check_string_route@6:
    // arc4_conversions/contract.py:243
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:243
    // @arc4.abimethod
    callsub check_string
    intc_0 // 1
    return

main_check_dynamic_bytes_route@5:
    // arc4_conversions/contract.py:239
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:239
    // @arc4.abimethod
    callsub check_dynamic_bytes
    intc_0 // 1
    return

main_check_uint64_route@4:
    // arc4_conversions/contract.py:235
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:235
    // @arc4.abimethod
    callsub check_uint64
    intc_0 // 1
    return

main_delete_application_route@3:
    // arc4_conversions/contract.py:231
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_bare_routing@18:
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@22
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: bytes, expected: bytes) -> void:
check_uint64:
    // arc4_conversions/contract.py:235-236
    // @arc4.abimethod
    // def check_uint64(self, value: arc4.UInt64, expected: Bytes) -> None:
    proto 2 0
    // arc4_conversions/contract.py:237
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: bytes, expected: bytes) -> void:
check_dynamic_bytes:
    // arc4_conversions/contract.py:239-240
    // @arc4.abimethod
    // def check_dynamic_bytes(self, value: arc4.DynamicBytes, expected: Bytes) -> None:
    proto 2 0
    // arc4_conversions/contract.py:241
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_string(value: bytes, expected: bytes) -> void:
check_string:
    // arc4_conversions/contract.py:243-244
    // @arc4.abimethod
    // def check_string(self, value: arc4.String, expected: Bytes) -> None:
    proto 2 0
    // arc4_conversions/contract.py:245
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: bytes, expected: bytes) -> void:
check_biguint:
    // arc4_conversions/contract.py:247-248
    // @arc4.abimethod
    // def check_biguint(self, value: arc4.UInt512, expected: Bytes) -> None:
    proto 2 0
    // arc4_conversions/contract.py:249
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_bool(value: bytes, expected: bytes) -> void:
check_bool:
    // arc4_conversions/contract.py:251-252
    // @arc4.abimethod
    // def check_bool(self, value: arc4.Bool, expected: Bytes) -> None:
    proto 2 0
    // arc4_conversions/contract.py:253
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: bytes, expected: bytes) -> void:
check_dyn_array_uin64:
    // arc4_conversions/contract.py:255-258
    // @arc4.abimethod
    // def check_dyn_array_uin64(
    //     self, value: arc4.DynamicArray[arc4.UInt64], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:259
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: bytes, expected: bytes) -> void:
check_static_array_uin64_3:
    // arc4_conversions/contract.py:261-264
    // @arc4.abimethod
    // def check_static_array_uin64_3(
    //     self, value: arc4.StaticArray[arc4.UInt64, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:265
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: bytes, expected: bytes) -> void:
check_dyn_array_struct:
    // arc4_conversions/contract.py:267-270
    // @arc4.abimethod
    // def check_dyn_array_struct(
    //     self, value: arc4.DynamicArray[MyStructARC4], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:271
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: bytes, expected: bytes) -> void:
check_static_array_struct:
    // arc4_conversions/contract.py:273-276
    // @arc4.abimethod
    // def check_static_array_struct(
    //     self, value: arc4.StaticArray[MyStructARC4, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:277
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: bytes, expected: bytes) -> void:
check_dyn_array_dyn_struct:
    // arc4_conversions/contract.py:279-282
    // @arc4.abimethod
    // def check_dyn_array_dyn_struct(
    //     self, value: arc4.DynamicArray[MyDynStructARC4], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:283
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: bytes, expected: bytes) -> void:
check_static_array_dyn_struct:
    // arc4_conversions/contract.py:285-288
    // @arc4.abimethod
    // def check_static_array_dyn_struct(
    //     self, value: arc4.StaticArray[MyDynStructARC4, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0
    // arc4_conversions/contract.py:289
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(bytes32: bytes) -> void:
check_static_bytes:
    // arc4_conversions/contract.py:291-292
    // @arc4.abimethod
    // def check_static_bytes(self, bytes32: Bytes32) -> None:
    proto 1 0
    // arc4_conversions/contract.py:293
    // assert bytes32.bytes == Txn.sender.bytes, "expected to encode correctly"
    frame_dig -1
    txn Sender
    ==
    assert // expected to encode correctly
    retsub
