#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 2 0 1 40
    // arc4_conversions/contract.py:230
    // class CheckApp(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@21
    pushbytes 0x33b3499e // method "delete_application()void"
    txna ApplicationArgs 0
    match main_delete_application_route@3
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8d762fdf 0x2d329ee1 0x6a4ddf73 0xd6e0b7bc 0xe5cacd06 0x89af557b 0x46e196bd 0xf33886da 0x2595b95a 0x3f55266b 0x7d240945 0x0351a9de // method "check_uint64(uint64,byte[])void", method "check_dynamic_bytes(byte[],byte[])void", method "check_string(string,byte[])void", method "check_biguint(uint512,byte[])void", method "check_bool(bool,byte[])void", method "check_dyn_array_uin64(uint64[],byte[])void", method "check_static_array_uin64_3(uint64[3],byte[])void", method "check_dyn_array_struct((uint64,address)[],byte[])void", method "check_static_array_struct((uint64,address)[3],byte[])void", method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void", method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void", method "check_static_bytes(byte[32])void"
    txna ApplicationArgs 0
    match check_uint64 check_dynamic_bytes check_string check_biguint check_bool check_dyn_array_uin64 check_static_array_uin64_3 check_dyn_array_struct check_static_array_struct check_dyn_array_dyn_struct check_static_array_dyn_struct check_static_bytes
    err

main_delete_application_route@3:
    // arc4_conversions/contract.py:231
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be DeleteApplication && can only call when not creating
    intc_2 // 1
    return

main___algopy_default_create@21:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]() -> void:
check_uint64:
    // arc4_conversions/contract.py:235
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:237
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:235
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]() -> void:
check_dynamic_bytes:
    // arc4_conversions/contract.py:239
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:241
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:239
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_string[routing]() -> void:
check_string:
    // arc4_conversions/contract.py:243
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:245
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:243
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]() -> void:
check_biguint:
    // arc4_conversions/contract.py:247
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for arc4.uint512
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:249
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:247
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]() -> void:
check_bool:
    // arc4_conversions/contract.py:251
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:253
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:251
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]() -> void:
check_dyn_array_uin64:
    // arc4_conversions/contract.py:255
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 8 // 8
    *
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:259
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:255
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]() -> void:
check_static_array_uin64_3:
    // arc4_conversions/contract.py:261
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    pushint 24 // 24
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint64, 3>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:265
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:261
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]() -> void:
check_dyn_array_struct:
    // arc4_conversions/contract.py:267
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 40
    *
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_conversions.contract.MyStructARC4>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:271
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:267
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]() -> void:
check_static_array_struct:
    // arc4_conversions/contract.py:273
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    pushint 120 // 120
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_conversions.contract.MyStructARC4, 3>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:277
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:273
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]() -> void:
check_dyn_array_dyn_struct:
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    txna ApplicationArgs 1
    dupn 2
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 2
    intc_0 // 2
    *
    swap
    dup
    len
    swap
    extract 2 0
    intc_1 // 0

check_dyn_array_dyn_struct_for_header@1:
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    dup
    dig 5
    <
    bz check_dyn_array_dyn_struct_after_for@4
    dupn 2
    intc_0 // 2
    *
    dig 3
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 7
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,uint8[32],(len+uint8[]))[])
    swap
    intc_2 // 1
    +
    dig 8
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_0 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 40
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 42 // 42
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8[32],(len+uint8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 44 // 44
    +
    uncover 2
    +
    bury 5
    bury 1
    b check_dyn_array_dyn_struct_for_header@1

check_dyn_array_dyn_struct_after_for@4:
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    dig 3
    intc_0 // 2
    +
    dig 3
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.arc4_conversions.contract.MyDynStructARC4>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:283
    // assert value.bytes == expected, "expected to encode correctly"
    dig 6
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:279
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]() -> void:
check_static_array_dyn_struct:
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    txna ApplicationArgs 1
    pushint 6 // 6
    intc_1 // 0

check_static_array_dyn_struct_for_header@1:
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    dup
    pushint 3 // 3
    <
    bz check_static_array_dyn_struct_after_for@4
    dupn 2
    intc_0 // 2
    *
    dig 4
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 5
    ==
    assert // invalid tail pointer for (uint64,uint8[32],(len+uint8[]))[3]
    swap
    intc_2 // 1
    +
    pushint 3 // 3
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_0 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 40
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 42 // 42
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint8[32],(len+uint8[]))
    dig 1
    len
    substring3
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 44 // 44
    +
    uncover 2
    +
    bury 3
    bury 1
    b check_static_array_dyn_struct_for_header@1

check_static_array_dyn_struct_after_for@4:
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    dig 2
    dup
    len
    dig 3
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.arc4_conversions.contract.MyDynStructARC4, 3>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // arc4_conversions/contract.py:289
    // assert value.bytes == expected, "expected to encode correctly"
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:285
    // @arc4.abimethod
    intc_2 // 1
    return


// test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]() -> void:
check_static_bytes:
    // arc4_conversions/contract.py:291
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // arc4_conversions/contract.py:293
    // assert bytes32.bytes == Txn.sender.bytes, "expected to encode correctly"
    txn Sender
    ==
    assert // expected to encode correctly
    // arc4_conversions/contract.py:291
    // @arc4.abimethod
    intc_2 // 1
    return
