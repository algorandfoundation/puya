{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AAqOA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DK;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AA6DK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;;;AAAA;;;AAuDK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjDL;;;AAAA;;;AAAA;;;AAiDK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3CL;;;AAAA;;;AAAA;;;AA2CK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;;;AAAA;;;AA+BK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;;;AAAA;;;AAqBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAiBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;;;AAAA;;;AAaK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;;;AAAA;;;AASK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;;;AAAA;;;AAKK;;;AAAA;;AAJA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AAKA;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;AAEe;;AAAiB;;AAAjB;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "9": {
      "op": "pushbytess 0x33b3499e 0x8d762fdf 0x2d329ee1 0x6a4ddf73 0xd6e0b7bc 0xe5cacd06 0x89af557b 0x46e196bd 0xf33886da 0x2595b95a 0x3f55266b 0x7d240945 0x0351a9de // method \"delete_application()void\", method \"check_uint64(uint64,byte[])void\", method \"check_dynamic_bytes(byte[],byte[])void\", method \"check_string(string,byte[])void\", method \"check_biguint(uint512,byte[])void\", method \"check_bool(bool,byte[])void\", method \"check_dyn_array_uin64(uint64[],byte[])void\", method \"check_static_array_uin64_3(uint64[3],byte[])void\", method \"check_dyn_array_struct((uint64,address)[],byte[])void\", method \"check_static_array_struct((uint64,address)[3],byte[])void\", method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\", method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\", method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(delete_application()void)"
      ],
      "stack_out": [
        "Method(delete_application()void)",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "76": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete_application()void)",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "match main_delete_application_route@3 main_check_uint64_route@4 main_check_dynamic_bytes_route@5 main_check_string_route@6 main_check_biguint_route@7 main_check_bool_route@8 main_check_dyn_array_uin64_route@9 main_check_static_array_uin64_3_route@10 main_check_dyn_array_struct_route@11 main_check_static_array_struct_route@12 main_check_dyn_array_dyn_struct_route@13 main_check_static_array_dyn_struct_route@14 main_check_static_bytes_route@15",
      "stack_out": []
    },
    "107": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "108": {
      "block": "main_check_static_bytes_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "111": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "114": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "115": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "118": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "op": "callsub check_static_bytes",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "block": "main_check_static_array_dyn_struct_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ]
    },
    "133": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%11#0"
      ]
    },
    "136": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%61#0"
      ]
    },
    "139": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "op": "callsub check_static_array_dyn_struct",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_check_dyn_array_dyn_struct_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%10#0"
      ]
    },
    "157": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%56#0"
      ]
    },
    "160": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "op": "callsub check_dyn_array_dyn_struct",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "block": "main_check_static_array_struct_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "172": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ]
    },
    "175": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%9#0"
      ]
    },
    "178": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%51#0"
      ]
    },
    "181": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "op": "callsub check_static_array_struct",
      "stack_out": []
    },
    "184": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "return",
      "stack_out": []
    },
    "186": {
      "block": "main_check_dyn_array_struct_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "193": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ]
    },
    "196": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%8#0"
      ]
    },
    "199": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%46#0"
      ]
    },
    "202": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "op": "callsub check_dyn_array_struct",
      "stack_out": []
    },
    "205": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "return",
      "stack_out": []
    },
    "207": {
      "block": "main_check_static_array_uin64_3_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "210": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "211": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "213": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "214": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ]
    },
    "217": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%7#0",
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "220": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%41#0"
      ]
    },
    "223": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "op": "callsub check_static_array_uin64_3",
      "stack_out": []
    },
    "226": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "return",
      "stack_out": []
    },
    "228": {
      "block": "main_check_dyn_array_uin64_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "230": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "231": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "232": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "234": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "235": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ]
    },
    "238": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "241": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%36#0"
      ]
    },
    "244": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "op": "callsub check_dyn_array_uin64",
      "stack_out": []
    },
    "247": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "block": "main_check_bool_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "251": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "255": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "256": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "259": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%31#0"
      ]
    },
    "265": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "op": "callsub check_bool",
      "stack_out": []
    },
    "268": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "return",
      "stack_out": []
    },
    "270": {
      "block": "main_check_biguint_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "280": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "283": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%26#0"
      ]
    },
    "286": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "op": "callsub check_biguint",
      "stack_out": []
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "block": "main_check_string_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "293": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "294": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "295": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "297": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "298": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "304": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%21#0"
      ]
    },
    "307": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "op": "callsub check_string",
      "stack_out": []
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_check_dynamic_bytes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "314": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "322": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "325": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%16#0"
      ]
    },
    "328": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "op": "callsub check_dynamic_bytes",
      "stack_out": []
    },
    "331": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "block": "main_check_uint64_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "335": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "336": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "337": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "339": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "340": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "346": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%11#0"
      ]
    },
    "349": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "op": "callsub check_uint64",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "return",
      "stack_out": []
    },
    "354": {
      "block": "main_delete_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "356": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "359": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "360": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "362": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "363": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "364": {
      "op": "return",
      "stack_out": []
    },
    "365": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "367": {
      "op": "bnz main_after_if_else@22",
      "stack_out": []
    },
    "370": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "373": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "374": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "375": {
      "op": "return",
      "stack_out": []
    },
    "376": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_uint64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "379": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "381": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "384": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "385": {
      "retsub": true,
      "op": "retsub"
    },
    "386": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "389": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "391": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "394": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "395": {
      "retsub": true,
      "op": "retsub"
    },
    "396": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_string",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "399": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "401": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "403": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "405": {
      "retsub": true,
      "op": "retsub"
    },
    "406": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_biguint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "409": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "411": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "414": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "415": {
      "retsub": true,
      "op": "retsub"
    },
    "416": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "419": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "421": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "423": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "424": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "425": {
      "retsub": true,
      "op": "retsub"
    },
    "426": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "429": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "431": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "435": {
      "retsub": true,
      "op": "retsub"
    },
    "436": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "439": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "441": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "443": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "445": {
      "retsub": true,
      "op": "retsub"
    },
    "446": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "449": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "451": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "453": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "454": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "455": {
      "retsub": true,
      "op": "retsub"
    },
    "456": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "459": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "461": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "465": {
      "retsub": true,
      "op": "retsub"
    },
    "466": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "469": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "471": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "473": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "474": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "479": {
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "481": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "484": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "485": {
      "retsub": true,
      "op": "retsub"
    },
    "486": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "params": {
        "bytes32#0": "bytes"
      },
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "489": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes32#0 (copy)"
      ],
      "stack_out": [
        "bytes32#0 (copy)"
      ]
    },
    "491": {
      "op": "txn Sender",
      "defined_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ]
    },
    "493": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "494": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "495": {
      "retsub": true,
      "op": "retsub"
    }
  }
}