{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AAqOA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAE2B;;AAAjB;AAAP;AAFH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 8"
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "bz main___algopy_default_create@21",
      "stack_out": []
    },
    "12": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)"
      ],
      "stack_out": [
        "Method(delete_application()void)"
      ]
    },
    "18": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "match main_delete_application_route@3",
      "stack_out": []
    },
    "25": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "28": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "29": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "31": {
      "op": "assert",
      "stack_out": []
    },
    "32": {
      "op": "pushbytess 0x8d762fdf 0x2d329ee1 0x6a4ddf73 0xd6e0b7bc 0xe5cacd06 0x89af557b 0x46e196bd 0xf33886da 0x2595b95a 0x3f55266b 0x7d240945 0x0351a9de // method \"check_uint64(uint64,byte[])void\", method \"check_dynamic_bytes(byte[],byte[])void\", method \"check_string(string,byte[])void\", method \"check_biguint(uint512,byte[])void\", method \"check_bool(bool,byte[])void\", method \"check_dyn_array_uin64(uint64[],byte[])void\", method \"check_static_array_uin64_3(uint64[3],byte[])void\", method \"check_dyn_array_struct((uint64,address)[],byte[])void\", method \"check_static_array_struct((uint64,address)[3],byte[])void\", method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\", method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\", method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)"
      ],
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%12#0"
      ]
    },
    "97": {
      "op": "match check_uint64 check_dynamic_bytes check_string check_biguint check_bool check_dyn_array_uin64 check_static_array_uin64_3 check_dyn_array_struct check_static_array_struct check_dyn_array_dyn_struct check_static_array_dyn_struct check_static_bytes",
      "stack_out": []
    },
    "123": {
      "op": "err"
    },
    "124": {
      "block": "main_delete_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "126": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "131": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "132": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "134": {
      "op": "return",
      "stack_out": []
    },
    "135": {
      "block": "main___algopy_default_create@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "140": {
      "op": "!",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "141": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "142": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "143": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "144": {
      "op": "return",
      "stack_out": []
    },
    "145": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "149": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "150": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "8"
      ]
    },
    "151": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "152": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "value#0"
      ]
    },
    "153": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "156": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "157": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "158": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "159": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "160": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "161": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "163": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "165": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "169": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "170": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "171": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "176": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "177": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "178": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "179": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "180": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "181": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "185": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0"
      ]
    },
    "186": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "189": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "190": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "191": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "192": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "193": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "194": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "197": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "198": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "199": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "203": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "204": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "209": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "210": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "211": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "212": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "213": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "214": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "216": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "218": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "value#0"
      ]
    },
    "219": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "223": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "224": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "225": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "226": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "227": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "229": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "230": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "231": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "232": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "236": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "237": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "242": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "243": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "244": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "64"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "247": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "stack_out": [
        "value#0"
      ]
    },
    "248": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "251": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "254": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "255": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "256": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "258": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "259": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "260": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "261": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "265": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "266": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "271": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "272": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "273": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "1"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "275": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "stack_out": [
        "value#0"
      ]
    },
    "276": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "279": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "280": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "281": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "282": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "283": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "284": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "286": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "288": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "289": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "292": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "293": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "294": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "295": {
      "op": "return",
      "stack_out": []
    },
    "296": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "299": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "300": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "301": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "302": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "8"
      ]
    },
    "303": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0"
      ]
    },
    "304": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0",
        "2"
      ]
    },
    "305": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "306": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "308": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "309": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "310": {
      "error": "invalid number of bytes for (len+uint64[])",
      "op": "assert // invalid number of bytes for (len+uint64[])",
      "stack_out": [
        "value#0"
      ]
    },
    "311": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "314": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "315": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "316": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "317": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "318": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "319": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "321": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "322": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "323": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "324": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "327": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "328": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "329": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "330": {
      "op": "return",
      "stack_out": []
    },
    "331": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "334": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "335": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "336": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "24"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "339": {
      "error": "invalid number of bytes for uint64[3]",
      "op": "assert // invalid number of bytes for uint64[3]",
      "stack_out": [
        "value#0"
      ]
    },
    "340": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "343": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "344": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "345": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "346": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "347": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "348": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "350": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "351": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "352": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "353": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "356": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "357": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "358": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "359": {
      "op": "return",
      "stack_out": []
    },
    "360": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "363": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "364": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "365": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "366": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "40"
      ]
    },
    "368": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0"
      ]
    },
    "369": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "mul%0#0",
        "2"
      ]
    },
    "370": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "371": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "373": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "375": {
      "error": "invalid number of bytes for (len+(uint64,uint8[32])[])",
      "op": "assert // invalid number of bytes for (len+(uint64,uint8[32])[])",
      "stack_out": [
        "value#0"
      ]
    },
    "376": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "380": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "381": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "382": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "383": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "384": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "388": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "389": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "393": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "394": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "395": {
      "op": "return",
      "stack_out": []
    },
    "396": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "399": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "400": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "401": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "120"
      ]
    },
    "403": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "404": {
      "error": "invalid number of bytes for (uint64,uint8[32])[3]",
      "op": "assert // invalid number of bytes for (uint64,uint8[32])[3]",
      "stack_out": [
        "value#0"
      ]
    },
    "405": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "408": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "409": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "410": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "411": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "412": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "413": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "415": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "416": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "417": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "418": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "421": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "422": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "423": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "424": {
      "op": "return",
      "stack_out": []
    },
    "425": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "428": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "431": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "432": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "433": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "434": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "435": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "436": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "438": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "439": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "440": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "441": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "444": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "445": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "446": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "447": {
      "op": "return",
      "stack_out": []
    },
    "448": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "451": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "454": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "455": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "456": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "457": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "458": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "459": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "461": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "462": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "463": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "value#0",
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "467": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "468": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "469": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "470": {
      "op": "return",
      "stack_out": []
    },
    "471": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "bytes32#0"
      ],
      "stack_out": [
        "bytes32#0"
      ]
    },
    "474": {
      "op": "dup",
      "defined_out": [
        "bytes32#0",
        "bytes32#0 (copy)"
      ],
      "stack_out": [
        "bytes32#0",
        "bytes32#0 (copy)"
      ]
    },
    "475": {
      "op": "len",
      "defined_out": [
        "bytes32#0",
        "len%0#0"
      ],
      "stack_out": [
        "bytes32#0",
        "len%0#0"
      ]
    },
    "476": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "bytes32#0",
        "len%0#0"
      ],
      "stack_out": [
        "bytes32#0",
        "len%0#0",
        "32"
      ]
    },
    "478": {
      "op": "==",
      "defined_out": [
        "bytes32#0",
        "eq%0#0"
      ],
      "stack_out": [
        "bytes32#0",
        "eq%0#0"
      ]
    },
    "479": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "bytes32#0"
      ]
    },
    "480": {
      "op": "txn Sender",
      "defined_out": [
        "bytes32#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "bytes32#0",
        "tmp%0#1"
      ]
    },
    "482": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "483": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "484": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "485": {
      "op": "return",
      "stack_out": []
    }
  }
}