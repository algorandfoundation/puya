{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AAsOK;AADL;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AADL;;AAAA;AAAA;;;;;AAKK;;;AAAA;;;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;;;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;;;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;;;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;;;AAAA;;;AAEU;AAAP;AAFH;AAAA;AAIA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAAA;;;AAAA;;;AAIU;AAAP;AAJH;AAAA;AAMA;;;AAE2B;;AAAjB;AAAP;AAFH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "intc_0 // 1"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "lifted%return#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@27",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "10": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(delete_application()void)"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete_application()void)",
        "lifted%return#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "match main_delete_application_route@3",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "23": {
      "op": "txn OnCompletion",
      "defined_out": [
        "lifted%return#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%7#0"
      ]
    },
    "25": {
      "op": "!",
      "defined_out": [
        "lifted%return#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%8#0"
      ]
    },
    "26": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "27": {
      "op": "txn ApplicationID",
      "defined_out": [
        "lifted%return#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%10#0"
      ]
    },
    "29": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "30": {
      "op": "pushbytess 0x8d762fdf 0x2d329ee1 0x6a4ddf73 0xd6e0b7bc 0xe5cacd06 0x89af557b 0x46e196bd 0xf33886da 0x2595b95a 0x3f55266b 0x7d240945 0x0351a9de // method \"check_uint64(uint64,byte[])void\", method \"check_dynamic_bytes(byte[],byte[])void\", method \"check_string(string,byte[])void\", method \"check_biguint(uint512,byte[])void\", method \"check_bool(bool,byte[])void\", method \"check_dyn_array_uin64(uint64[],byte[])void\", method \"check_static_array_uin64_3(uint64[3],byte[])void\", method \"check_dyn_array_struct((uint64,address)[],byte[])void\", method \"check_static_array_struct((uint64,address)[3],byte[])void\", method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\", method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\", method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "92": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "lifted%return#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%11#0"
      ]
    },
    "95": {
      "op": "match check_uint64 check_dynamic_bytes check_string check_biguint check_bool check_dyn_array_uin64 check_static_array_uin64_3 check_dyn_array_struct check_static_array_struct check_dyn_array_dyn_struct check_static_array_dyn_struct check_static_bytes",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "121": {
      "op": "err"
    },
    "122": {
      "block": "main_delete_application_route@3",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%3#0"
      ]
    },
    "124": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%4#0"
      ]
    },
    "127": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%5#0"
      ]
    },
    "130": {
      "error": "can only call when not creating",
      "op": "return // on error: can only call when not creating",
      "defined_out": [
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "131": {
      "block": "main_bare_routing@27",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%13#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "not%tmp%13#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "not%tmp%13#0"
      ]
    },
    "134": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%15#0"
      ]
    },
    "138": {
      "error": "can only call when creating",
      "op": "return // on error: can only call when creating",
      "defined_out": [
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "139": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "145": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "149": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "150": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "161": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "162": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "168": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "171": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "175": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "181": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "184": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "187": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "188": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "194": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "197": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "201": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "202": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "203": {
      "op": "return",
      "stack_out": []
    },
    "204": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "207": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "210": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "214": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "215": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": []
    },
    "217": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "220": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "223": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "227": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "233": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "236": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "240": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "249": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "252": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "253": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "254": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "259": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "266": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "268": {
      "op": "return",
      "stack_out": []
    },
    "269": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "275": {
      "op": "extract 2 0",
      "defined_out": [
        "expected#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "expected#0"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "279": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "280": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "281": {
      "op": "return",
      "stack_out": []
    },
    "282": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "bytes32#0"
      ],
      "stack_out": [
        "bytes32#0"
      ]
    },
    "285": {
      "op": "txn Sender",
      "defined_out": [
        "bytes32#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bytes32#0",
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "288": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    }
  }
}