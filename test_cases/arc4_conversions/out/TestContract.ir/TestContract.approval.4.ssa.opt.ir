main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_literal_encoding()void" => block@3, method "test_native_encoding()void" => block@4, method "test_arc4_encoding()void" => block@5, method "test_array_uint64_encoding()void" => block@6, method "test_array_static_encoding()void" => block@7, method "test_array_dynamic_encoding()void" => block@8, * => block@15}
    block@3: // test_literal_encoding_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_literal_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test_native_encoding_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_native_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test_arc4_encoding_route_L69
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test_array_uint64_encoding_route_L97
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // test_array_static_encoding_route_L121
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test_array_dynamic_encoding_route_L145
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@11: // bare_routing_L17
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@15 : block@12
    block@12: // __algopy_default_create_L1
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@15: // after_if_else_L17
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#2 <- block@5, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#3 <- block@6, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#4 <- block@7, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#5 <- block@8, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#6 <- block@12, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.my_dyn_struct_arc4(value: uint64) -> bytes:
    block@0: // L206
        let val_as_bytes%0#0: bytes[8] = (itob value#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let to_encode%0#0: bytes[32] = (txn Sender)
        let encoded_value%0#0: bytes = (concat 0x0020 to_encode%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 tmp%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x002a)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        return encoded_tuple_buffer%4#0

subroutine test_cases.arc4_conversions.contract.TestContract.test_literal_encoding() -> void:
    block@0: // L18
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_native_encoding() -> void:
    block@0: // L41
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let to_encode%0#0: uint64 = (- tmp%0#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let to_encode%2#0: bytes = (txna ApplicationArgs 0)
        let length%1#0: uint64 = (len to_encode%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%2#0)
        let tmp%1#0: bytes = (txna ApplicationArgs 0)
        let to_encode%3#0: bytes = (concat 0x0004 tmp%1#0)
        let length%2#0: uint64 = (len to_encode%3#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%3#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field ApplicationArgs) encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let to_encode%5#0: bool = (== tmp%2#0 1u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%5#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding() -> void:
    block@0: // L69
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let to_encode%1#0: bytes = (txna ApplicationArgs 0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%0#0: bytes = (txna ApplicationArgs 0)
        let to_encode%2#0: bytes = (concat 0x0004 tmp%0#0)
        let length%2#0: uint64 = (len to_encode%2#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%2#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field ApplicationArgs) encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let to_encode%4#0: bool = (== tmp%1#0 1u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%4#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding() -> void:
    block@0: // L97
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (+ tmp%1#0 1u)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 2u)
        let encoded%0#0: encoded_uint64[] = encode<encoded_uint64>(tmp%0#0, tmp%2#0, tmp%4#0)
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#0: encoded_uint64[] = (concat len_16_bit%0#0 encoded%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 1u)
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: uint64 = (+ tmp%16#0 2u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%13#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%15#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%17#0)
        let result%1#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let result%2#0: bytes = (concat result%1#0 val_as_bytes%2#0)
        let array_data%1#0: bytes = (concat 0x0003 result%2#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) array_data%1#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%18#0: uint64 = (txn NumAppArgs)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#0: uint64 = (+ tmp%19#0 1u)
        let tmp%21#0: uint64 = (txn NumAppArgs)
        let tmp%22#0: uint64 = (+ tmp%21#0 2u)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%18#0)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%20#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%22#0)
        let result%4#0: bytes = (concat val_as_bytes%3#0 val_as_bytes%4#0)
        let result%5#0: bytes = (concat result%4#0 val_as_bytes%5#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_uin64_3(uint64[3],byte[])void")
        ((itxn_field ApplicationArgs) result%5#0)
        ((itxn_field ApplicationArgs) 0x0018000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding() -> void:
    block@0: // L121
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: bytes[32] = (txn Sender)
        let tmp%0#2: bytes[32] = (txn Sender)
        let tmp%0#3: bytes[32] = (txn Sender)
        let encoded%0#0: (encoded_uint64,bytes[32])[] = encode<(encoded_uint64,bytes[32])>(1u, tmp%0#1, 2u, tmp%0#2, 3u, tmp%0#3)
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 40u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#0: (encoded_uint64,bytes[32])[] = (concat len_16_bit%0#0 encoded%0#0)
        let tmp%9#0: bytes[32] = (txn Sender)
        let tmp%10#0: bytes = (concat 0x00030000000000000001 tmp%9#0)
        let tmp%13#0: bytes = (concat tmp%10#0 0x0000000000000002)
        let tmp%14#0: bytes[32] = (txn Sender)
        let tmp%15#0: bytes = (concat tmp%13#0 tmp%14#0)
        let tmp%18#0: bytes = (concat tmp%15#0 0x0000000000000003)
        let tmp%19#0: bytes[32] = (txn Sender)
        let expected_bytes#0: bytes = (concat tmp%18#0 tmp%19#0)
        itxn_begin
        let length%0#0: uint64 = (len expected_bytes#0)
        let as_bytes%1#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_struct((uint64,address)[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%0#5: bytes[32] = (txn Sender)
        let tmp%0#6: bytes[32] = (txn Sender)
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 tmp%0#4)
        let val_as_bytes%1#0: bytes[8] = (itob 2u)
        let encoded_tuple_buffer%5#0: bytes = (concat val_as_bytes%1#0 tmp%0#5)
        let val_as_bytes%2#0: bytes[8] = (itob 3u)
        let encoded_tuple_buffer%8#0: bytes = (concat val_as_bytes%2#0 tmp%0#6)
        let result%1#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_tuple_buffer%5#0)
        let result%2#0: bytes = (concat result%1#0 encoded_tuple_buffer%8#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%0#0)
        let bounded_index%0#0: uint64 = (select 2u length%0#0 is_out_of_bounds%0#0)
        let to_encode%0#0: bytes = (substring3 expected_bytes#0 bounded_index%0#0 length%0#0)
        let length%2#0: uint64 = (len to_encode%0#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%0#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_struct((uint64,address)[3],byte[])void")
        ((itxn_field ApplicationArgs) result%2#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding() -> void:
    block@0: // L145
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFQggwEM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUU2GgCODADqANUAwACrAJYAgQBsAFcAQgAtABgAA4EAQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/wYxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiQ==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%1#5: bytes[32] = (txn Sender)
        let tmp%0#5: bytes[32] = (txn Sender)
        let tmp%1#6: bytes[32] = (txn Sender)
        let tmp%0#6: bytes[32] = (txn Sender)
        let tmp%1#7: bytes[32] = (txn Sender)
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let encoded_value%0#0: bytes = (concat 0x0020 tmp%1#5)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 tmp%0#4)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x002a)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob 2u)
        let encoded_value%1#0: bytes = (concat 0x0020 tmp%1#6)
        let encoded_tuple_buffer%7#0: bytes = (concat val_as_bytes%1#0 tmp%0#5)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 0x002a)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_value%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob 3u)
        let encoded_value%2#0: bytes = (concat 0x0020 tmp%1#7)
        let encoded_tuple_buffer%12#0: bytes = (concat val_as_bytes%2#0 tmp%0#6)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 0x002a)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_value%2#0)
        let next_item_len%0#0: uint64 = (len encoded_tuple_buffer%4#0)
        let tail_offset%0#0: uint64 = (+ 6u next_item_len%0#0)
        let as_bytes%7#0: bytes[8] = (itob tail_offset%0#0)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%7#0)
        let result%1#0: bytes = (concat 0x0006 next_item_head%1#0)
        let next_item_len%1#0: uint64 = (len encoded_tuple_buffer%9#0)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 next_item_len%1#0)
        let as_bytes%8#0: bytes[8] = (itob tail_offset%1#0)
        let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%8#0)
        let result%2#0: bytes = (concat result%1#0 next_item_head%2#0)
        let result%3#0: bytes = (concat result%2#0 encoded_tuple_buffer%4#0)
        let result%4#0: bytes = (concat result%3#0 encoded_tuple_buffer%9#0)
        let new_head_and_tail#0: bytes = (concat result%4#0 encoded_tuple_buffer%14#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L203
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@7)
        let new_head#1: bytes = Ï†(new_head#0 <- block@0, new_head#2 <- block@7)
        let continue_looping%0#0: bool = (< head_offset#1 0u)
        goto continue_looping%0#0 ? block@7 : block@8
    block@7: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 0x head_offset#1)
        let tmp%1#1: uint64 = (+ 6u item_offset#0)
        let tmp%2#1: bytes = (itob tmp%1#1)
        let tmp%3#1: bytes = ((extract 6 2) tmp%2#1)
        let new_head#2: bytes = (concat new_head#1 tmp%3#1)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@6
    block@8: // after_for_L203
        let head_offset#3: uint64 = 0u
        goto block@9
    block@9: // for_header_L208
        let head_offset#4: uint64 = Ï†(head_offset#3 <- block@8, head_offset#5 <- block@10)
        let new_head#3: bytes = Ï†(new_head#1 <- block@8, new_head#4 <- block@10)
        let continue_looping%1#0: bool = (< head_offset#4 6u)
        goto continue_looping%1#0 ? block@10 : block@11
    block@10: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%6#1: bytes = (itob item_offset#1)
        let tmp%7#1: bytes = ((extract 6 2) tmp%6#1)
        let new_head#4: bytes = (concat new_head#3 tmp%7#1)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@9
    block@11: // after_for_L208
        let tmp%11#1: bytes = (concat 0x0003 new_head#3)
        let tmp%17#1: uint64 = (len new_head_and_tail#0)
        let tmp%18#1: bytes = (substring3 new_head_and_tail#0 6u tmp%17#1)
        let arr#0: (encoded_uint64,bytes[32],bytes)[] = (concat tmp%11#1 tmp%18#1)
        let tmp%9#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%10#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%11#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let next_item_len%3#0: uint64 = (len tmp%9#0)
        let tail_offset%3#0: uint64 = (+ 6u next_item_len%3#0)
        let as_bytes%10#0: bytes[8] = (itob tail_offset%3#0)
        let next_item_head%4#0: bytes = ((extract 6 2) as_bytes%10#0)
        let result%7#0: bytes = (concat 0x0006 next_item_head%4#0)
        let next_item_len%4#0: uint64 = (len tmp%10#0)
        let tail_offset%4#0: uint64 = (+ tail_offset%3#0 next_item_len%4#0)
        let as_bytes%11#0: bytes[8] = (itob tail_offset%4#0)
        let next_item_head%5#0: bytes = ((extract 6 2) as_bytes%11#0)
        let result%8#0: bytes = (concat result%7#0 next_item_head%5#0)
        let result%9#0: bytes = (concat result%8#0 tmp%9#0)
        let result%10#0: bytes = (concat result%9#0 tmp%10#0)
        let result%11#0: bytes = (concat result%10#0 tmp%11#0)
        let expected_bytes#0: bytes = (concat 0x0003 result%11#0)
        itxn_begin
        let length%3#0: uint64 = (len expected_bytes#0)
        let as_bytes%12#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) encoded_value%3#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%12#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%13#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%14#0: bytes = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let next_item_len%6#0: uint64 = (len tmp%12#0)
        let tail_offset%6#0: uint64 = (+ 6u next_item_len%6#0)
        let as_bytes%14#0: bytes[8] = (itob tail_offset%6#0)
        let next_item_head%7#0: bytes = ((extract 6 2) as_bytes%14#0)
        let result%13#0: bytes = (concat 0x0006 next_item_head%7#0)
        let next_item_len%7#0: uint64 = (len tmp%13#0)
        let tail_offset%7#0: uint64 = (+ tail_offset%6#0 next_item_len%7#0)
        let as_bytes%15#0: bytes[8] = (itob tail_offset%7#0)
        let next_item_head%8#0: bytes = ((extract 6 2) as_bytes%15#0)
        let result%14#0: bytes = (concat result%13#0 next_item_head%8#0)
        let result%15#0: bytes = (concat result%14#0 tmp%12#0)
        let result%16#0: bytes = (concat result%15#0 tmp%13#0)
        let expected_bytes#1: bytes = (concat result%16#0 tmp%14#0)
        itxn_begin
        let tmp%0#1: bytes[32] = (txn Sender)
        let tmp%1#2: bytes[32] = (txn Sender)
        let tmp%0#2: bytes[32] = (txn Sender)
        let tmp%1#3: bytes[32] = (txn Sender)
        let tmp%0#3: bytes[32] = (txn Sender)
        let tmp%1#4: bytes[32] = (txn Sender)
        let encoded_value%4#0: bytes = (concat 0x0020 tmp%1#2)
        let encoded_tuple_buffer%17#0: bytes = (concat val_as_bytes%0#0 tmp%0#1)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 0x002a)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_value%4#0)
        let encoded_value%5#0: bytes = (concat 0x0020 tmp%1#3)
        let encoded_tuple_buffer%22#0: bytes = (concat val_as_bytes%1#0 tmp%0#2)
        let encoded_tuple_buffer%23#0: bytes = (concat encoded_tuple_buffer%22#0 0x002a)
        let encoded_tuple_buffer%24#0: bytes = (concat encoded_tuple_buffer%23#0 encoded_value%5#0)
        let encoded_value%6#0: bytes = (concat 0x0020 tmp%1#4)
        let encoded_tuple_buffer%27#0: bytes = (concat val_as_bytes%2#0 tmp%0#3)
        let encoded_tuple_buffer%28#0: bytes = (concat encoded_tuple_buffer%27#0 0x002a)
        let encoded_tuple_buffer%29#0: bytes = (concat encoded_tuple_buffer%28#0 encoded_value%6#0)
        let next_item_len%9#0: uint64 = (len encoded_tuple_buffer%19#0)
        let tail_offset%9#0: uint64 = (+ 6u next_item_len%9#0)
        let as_bytes%23#0: bytes[8] = (itob tail_offset%9#0)
        let next_item_head%10#0: bytes = ((extract 6 2) as_bytes%23#0)
        let result%19#0: bytes = (concat 0x0006 next_item_head%10#0)
        let next_item_len%10#0: uint64 = (len encoded_tuple_buffer%24#0)
        let tail_offset%10#0: uint64 = (+ tail_offset%9#0 next_item_len%10#0)
        let as_bytes%24#0: bytes[8] = (itob tail_offset%10#0)
        let next_item_head%11#0: bytes = ((extract 6 2) as_bytes%24#0)
        let result%20#0: bytes = (concat result%19#0 next_item_head%11#0)
        let result%21#0: bytes = (concat result%20#0 encoded_tuple_buffer%19#0)
        let result%22#0: bytes = (concat result%21#0 encoded_tuple_buffer%24#0)
        let result%23#0: bytes = (concat result%22#0 encoded_tuple_buffer%29#0)
        let length%7#0: uint64 = (len expected_bytes#1)
        let as_bytes%25#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 expected_bytes#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void")
        ((itxn_field ApplicationArgs) result%23#0)
        ((itxn_field ApplicationArgs) encoded_value%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 