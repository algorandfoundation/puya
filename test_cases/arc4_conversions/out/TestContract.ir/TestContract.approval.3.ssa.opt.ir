main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_literal_encoding()void" => block@3, method "test_native_encoding()void" => block@4, method "test_arc4_encoding()void" => block@5, method "test_array_uint64_encoding()void" => block@6, method "test_array_static_encoding()void" => block@7, method "test_array_dynamic_encoding()void" => block@8, method "test_bytes_to_fixed(bool)void" => block@9, * => block@16}
    block@3: // test_literal_encoding_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_literal_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@4: // test_native_encoding_route_L46
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_native_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@5: // test_arc4_encoding_route_L74
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@6: // test_array_uint64_encoding_route_L102
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@7: // test_array_static_encoding_route_L126
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@8: // test_array_dynamic_encoding_route_L150
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@9: // test_bytes_to_fixed_route_L178
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let tmp%31#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed(tmp%31#0)
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // bare_routing_L22
        let tmp%32#0: uint64 = (txn OnCompletion)
        goto tmp%32#0 ? block@16 : block@13
    block@13: // __algopy_default_create_L1
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // can only call when creating
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@16: // after_if_else_L22
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#8: bool = 0u
        goto block@17
    block@17: // after_inlined_test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#2 <- block@5, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#3 <- block@6, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#4 <- block@7, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#5 <- block@8, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#6 <- block@9, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#7 <- block@13, test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#8 <- block@16)
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.my_dyn_struct_arc4(value: uint64) -> Encoded((uint64,uint8[32],len+uint8[])):
    block@0: // L223
        let val_as_bytes%0#0: bytes[8] = (itob value#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let to_encode%0#0: bytes[32] = (txn Sender)
        let encoded_value%0#0: bytes = (concat 0x0020 to_encode%0#0)
        let encoded%1#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%0#0 reinterpret_Encoded(uint8[32])%0#0)
        let encoded%2#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%1#0 0x002a)
        let encoded%3#0: bytes = (concat encoded%2#0 encoded_value%0#0)
        return encoded%3#0

subroutine test_cases.arc4_conversions.contract.TestContract.test_literal_encoding() -> void:
    block@0: // L23
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_native_encoding() -> void:
    block@0: // L46
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let to_encode%0#0: uint64 = (- tmp%0#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let to_encode%2#0: bytes = (txna ApplicationArgs 0)
        let length%1#0: uint64 = (len to_encode%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%2#0)
        let tmp%1#0: bytes = (txna ApplicationArgs 0)
        let to_encode%3#0: bytes = (concat 0x0004 tmp%1#0)
        let length%2#0: uint64 = (len to_encode%3#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%3#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field ApplicationArgs) encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let to_encode%5#0: bool = (== tmp%2#0 1u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%5#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding() -> void:
    block@0: // L74
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let to_encode%1#0: bytes = (txna ApplicationArgs 0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%0#0: bytes = (txna ApplicationArgs 0)
        let to_encode%2#0: bytes = (concat 0x0004 tmp%0#0)
        let length%2#0: uint64 = (len to_encode%2#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%2#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field ApplicationArgs) encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let to_encode%4#0: bool = (== tmp%1#0 1u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%4#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding() -> void:
    block@0: // L102
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (+ tmp%1#0 1u)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 2u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%4#0)
        let encoded%2#0: Encoded((uint64,uint64,uint64)) = (concat encoded%1#0 val_as_bytes%2#0)
        let arr#0: Encoded(len+uint64[]) = (concat 0x0003 encoded%2#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 1u)
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: uint64 = (+ tmp%16#0 2u)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%13#0)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%15#0)
        let encoded%6#0: Encoded((uint64,uint64)) = (concat val_as_bytes%3#0 val_as_bytes%4#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%17#0)
        let encoded%7#0: Encoded((uint64,uint64,uint64)) = (concat encoded%6#0 val_as_bytes%5#0)
        let encoded%9#0: Encoded(len+uint64[]) = (concat 0x0003 encoded%7#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) encoded%9#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%18#0: uint64 = (txn NumAppArgs)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#0: uint64 = (+ tmp%19#0 1u)
        let tmp%21#0: uint64 = (txn NumAppArgs)
        let tmp%22#0: uint64 = (+ tmp%21#0 2u)
        let val_as_bytes%6#0: bytes[8] = (itob tmp%18#0)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%20#0)
        let encoded%11#0: Encoded((uint64,uint64)) = (concat val_as_bytes%6#0 val_as_bytes%7#0)
        let val_as_bytes%8#0: bytes[8] = (itob tmp%22#0)
        let encoded%12#0: Encoded((uint64,uint64,uint64)) = (concat encoded%11#0 val_as_bytes%8#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_uin64_3(uint64[3],byte[])void")
        ((itxn_field ApplicationArgs) encoded%12#0)
        ((itxn_field ApplicationArgs) 0x0018000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding() -> void:
    block@0: // L126
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: bytes[32] = (txn Sender)
        let tmp%0#2: bytes[32] = (txn Sender)
        let tmp%0#3: bytes[32] = (txn Sender)
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = 32u
        let lengths_equal%0#0: bool = 1u
        let encoded%1#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%0#0 tmp%0#1)
        let val_as_bytes%1#0: bytes[8] = (itob 2u)
        let length%1#0: uint64 = 32u
        let lengths_equal%1#0: bool = 1u
        let encoded%5#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%1#0 tmp%0#2)
        let encoded%7#0: Encoded(((uint64,uint8[32]),(uint64,uint8[32]))) = (concat encoded%1#0 encoded%5#0)
        let val_as_bytes%2#0: bytes[8] = (itob 3u)
        let length%2#0: uint64 = 32u
        let lengths_equal%2#0: bool = 1u
        let encoded%9#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%2#0 tmp%0#3)
        let encoded%11#0: Encoded(((uint64,uint8[32]),(uint64,uint8[32]),(uint64,uint8[32]))) = (concat encoded%7#0 encoded%9#0)
        let arr#0: Encoded(len+(uint64,uint8[32])[]) = (concat 0x0003 encoded%11#0)
        let tmp%9#0: bytes[32] = (txn Sender)
        let tmp%10#0: bytes = (concat 0x00030000000000000001 tmp%9#0)
        let tmp%13#0: bytes = (concat tmp%10#0 0x0000000000000002)
        let tmp%14#0: bytes[32] = (txn Sender)
        let tmp%15#0: bytes = (concat tmp%13#0 tmp%14#0)
        let tmp%18#0: bytes = (concat tmp%15#0 0x0000000000000003)
        let tmp%19#0: bytes[32] = (txn Sender)
        let expected_bytes#0: bytes = (concat tmp%18#0 tmp%19#0)
        itxn_begin
        let length%3#0: uint64 = (len expected_bytes#0)
        let as_bytes%1#0: bytes[8] = (itob length%3#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_struct((uint64,address)[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%0#5: bytes[32] = (txn Sender)
        let tmp%0#6: bytes[32] = (txn Sender)
        let length%4#0: uint64 = 32u
        let lengths_equal%3#0: bool = 1u
        let encoded%15#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%0#0 tmp%0#4)
        let length%5#0: uint64 = 32u
        let lengths_equal%4#0: bool = 1u
        let encoded%19#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%1#0 tmp%0#5)
        let encoded%21#0: Encoded(((uint64,uint8[32]),(uint64,uint8[32]))) = (concat encoded%15#0 encoded%19#0)
        let length%6#0: uint64 = 32u
        let lengths_equal%5#0: bool = 1u
        let encoded%23#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%2#0 tmp%0#6)
        let encoded%25#0: Encoded(((uint64,uint8[32]),(uint64,uint8[32]),(uint64,uint8[32]))) = (concat encoded%21#0 encoded%23#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%3#0)
        let bounded_index%0#0: uint64 = (select 2u length%3#0 is_out_of_bounds%0#0)
        let to_encode%0#0: bytes = (substring3 expected_bytes#0 bounded_index%0#0 length%3#0)
        let length%8#0: uint64 = (len to_encode%0#0)
        let as_bytes%2#0: bytes[8] = (itob length%8#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%0#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_struct((uint64,address)[3],byte[])void")
        ((itxn_field ApplicationArgs) encoded%25#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding() -> void:
    block@0: // L150
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: bytes[32] = (txn Sender)
        let tmp%1#1: bytes[32] = (txn Sender)
        let tmp%0#2: bytes[32] = (txn Sender)
        let tmp%1#2: bytes[32] = (txn Sender)
        let tmp%0#3: bytes[32] = (txn Sender)
        let tmp%1#3: bytes[32] = (txn Sender)
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = 32u
        let lengths_equal%0#0: bool = 1u
        let encoded%1#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%0#0 tmp%0#1)
        let length%1#0: uint64 = 32u
        let as_bytes%0#0: bytes[8] = (itob 32u)
        let length_uint16%0#0: bytes = 0x0020
        let encoded_value%0#0: bytes = (concat 0x0020 tmp%1#1)
        let encoded%2#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%1#0 0x002a)
        let encoded%3#0: bytes = (concat encoded%2#0 encoded_value%0#0)
        let data_length%1#0: uint64 = (len encoded%3#0)
        let current_tail_offset%1#0: uint64 = (+ 6u data_length%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob 2u)
        let length%2#0: uint64 = 32u
        let lengths_equal%1#0: bool = 1u
        let encoded%6#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%1#0 tmp%0#2)
        let length%3#0: uint64 = 32u
        let length_uint16%1#0: bytes = 0x0020
        let encoded_value%1#0: bytes = (concat 0x0020 tmp%1#2)
        let encoded%7#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%6#0 0x002a)
        let encoded%8#0: bytes = (concat encoded%7#0 encoded_value%1#0)
        let tail%3#0: bytes = (concat encoded%3#0 encoded%8#0)
        let data_length%3#0: uint64 = (len encoded%8#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%1#0 data_length%3#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%9#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat 0x0006 offset_as_uint16%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob 3u)
        let length%4#0: uint64 = 32u
        let lengths_equal%2#0: bool = 1u
        let encoded%11#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%2#0 tmp%0#3)
        let length%5#0: uint64 = 32u
        let length_uint16%2#0: bytes = 0x0020
        let encoded_value%2#0: bytes = (concat 0x0020 tmp%1#3)
        let encoded%12#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%11#0 0x002a)
        let encoded%13#0: bytes = (concat encoded%12#0 encoded_value%2#0)
        let tail%5#0: bytes = (concat tail%3#0 encoded%13#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%14#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat encoded%9#0 offset_as_uint16%5#0)
        let encoded%15#0: bytes = (concat encoded%14#0 tail%5#0)
        let arr#0: Encoded(len+(uint64,uint8[32],len+uint8[])[]) = (concat 0x0003 encoded%15#0)
        let tmp%9#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%10#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%11#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let data_length%6#0: uint64 = (len tmp%9#0)
        let current_tail_offset%6#0: uint64 = (+ 6u data_length%6#0)
        let tail%7#0: bytes = (concat tmp%9#0 tmp%10#0)
        let data_length%7#0: uint64 = (len tmp%10#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%7#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%18#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat 0x0006 offset_as_uint16%7#0)
        let tail%8#0: bytes = (concat tail%7#0 tmp%11#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%19#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat encoded%18#0 offset_as_uint16%8#0)
        let encoded%20#0: bytes = (concat encoded%19#0 tail%8#0)
        let expected_bytes#0: bytes = (concat 0x0003 encoded%20#0)
        itxn_begin
        let length%6#0: uint64 = (len expected_bytes#0)
        let as_bytes%14#0: bytes[8] = (itob length%6#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) encoded_value%3#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%12#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%13#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%14#0: Encoded((uint64,uint8[32],len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let data_length%9#0: uint64 = (len tmp%12#0)
        let current_tail_offset%9#0: uint64 = (+ 6u data_length%9#0)
        let tail%10#0: bytes = (concat tmp%12#0 tmp%13#0)
        let data_length%10#0: uint64 = (len tmp%13#0)
        let current_tail_offset%10#0: uint64 = (+ current_tail_offset%9#0 data_length%10#0)
        let as_bytes%16#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%16#0)
        let encoded%23#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat 0x0006 offset_as_uint16%10#0)
        let tail%11#0: bytes = (concat tail%10#0 tmp%14#0)
        let as_bytes%17#0: bytes[8] = (itob current_tail_offset%10#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded%24#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat encoded%23#0 offset_as_uint16%11#0)
        let expected_bytes#1: bytes = (concat encoded%24#0 tail%11#0)
        itxn_begin
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%1#4: bytes[32] = (txn Sender)
        let tmp%0#5: bytes[32] = (txn Sender)
        let tmp%1#5: bytes[32] = (txn Sender)
        let tmp%0#6: bytes[32] = (txn Sender)
        let tmp%1#6: bytes[32] = (txn Sender)
        let length%7#0: uint64 = 32u
        let lengths_equal%3#0: bool = 1u
        let encoded%27#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%0#0 tmp%0#4)
        let length%8#0: uint64 = 32u
        let length_uint16%4#0: bytes = 0x0020
        let encoded_value%4#0: bytes = (concat 0x0020 tmp%1#4)
        let encoded%28#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%27#0 0x002a)
        let encoded%29#0: bytes = (concat encoded%28#0 encoded_value%4#0)
        let data_length%13#0: uint64 = (len encoded%29#0)
        let current_tail_offset%13#0: uint64 = (+ 6u data_length%13#0)
        let length%9#0: uint64 = 32u
        let lengths_equal%4#0: bool = 1u
        let encoded%32#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%1#0 tmp%0#5)
        let length%10#0: uint64 = 32u
        let length_uint16%5#0: bytes = 0x0020
        let encoded_value%5#0: bytes = (concat 0x0020 tmp%1#5)
        let encoded%33#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%32#0 0x002a)
        let encoded%34#0: bytes = (concat encoded%33#0 encoded_value%5#0)
        let tail%15#0: bytes = (concat encoded%29#0 encoded%34#0)
        let data_length%15#0: uint64 = (len encoded%34#0)
        let current_tail_offset%15#0: uint64 = (+ current_tail_offset%13#0 data_length%15#0)
        let as_bytes%23#0: bytes[8] = (itob current_tail_offset%13#0)
        let offset_as_uint16%15#0: bytes = ((extract 6 2) as_bytes%23#0)
        let encoded%35#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat 0x0006 offset_as_uint16%15#0)
        let length%11#0: uint64 = 32u
        let lengths_equal%5#0: bool = 1u
        let encoded%37#0: Encoded((uint64,uint8[32])) = (concat val_as_bytes%2#0 tmp%0#6)
        let length%12#0: uint64 = 32u
        let length_uint16%6#0: bytes = 0x0020
        let encoded_value%6#0: bytes = (concat 0x0020 tmp%1#6)
        let encoded%38#0: Encoded((uint64,uint8[32],len+uint8[])) = (concat encoded%37#0 0x002a)
        let encoded%39#0: bytes = (concat encoded%38#0 encoded_value%6#0)
        let tail%17#0: bytes = (concat tail%15#0 encoded%39#0)
        let as_bytes%26#0: bytes[8] = (itob current_tail_offset%15#0)
        let offset_as_uint16%17#0: bytes = ((extract 6 2) as_bytes%26#0)
        let encoded%40#0: Encoded(((uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]),(uint64,uint8[32],len+uint8[]))) = (concat encoded%35#0 offset_as_uint16%17#0)
        let encoded%41#0: bytes = (concat encoded%40#0 tail%17#0)
        let length%13#0: uint64 = (len expected_bytes#1)
        let as_bytes%27#0: bytes[8] = (itob length%13#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%27#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 expected_bytes#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void")
        ((itxn_field ApplicationArgs) encoded%41#0)
        ((itxn_field ApplicationArgs) encoded_value%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed(wrong_size: bool) -> void:
    block@0: // L178
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABATEbQQFmgg0EM7NJngSNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4NAPkA5ADPALoApQCQAHsAZgBRADwAJwASAAOBAEMxGRREMRhENhoBiAFtIkMxGRREMRhENhoBNhoCVwIAiAFOIkMxGRREMRhENhoBNhoCVwIAiAEvIkMxGRREMRhENhoBNhoCVwIAiAEQIkMxGRREMRhENhoBNhoCVwIAiADxIkMxGRREMRhENhoBNhoCVwIAiADSIkMxGRREMRhENhoBNhoCVwIAiACzIkMxGRREMRhENhoBNhoCVwIAiACUIkMxGRREMRhENhoBNhoCVwIAiAB1IkMxGRREMRhENhoBNhoCVwIAiABWIkMxGRREMRhENhoBNhoCVwIAiAA3IkMxGRREMRhENhoBNhoCVwIAiAAYIkMxGYEFEkQxGEQiQzEZQP73MRgURCJDigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAQCL/zEAEkSJ)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let sender#0: bytes = (global CurrentApplicationAddress)
        goto wrong_size#0 ? block@2 : block@3
    block@2: // if_body_L184
        let sender#1: bytes = (concat sender#0 sender#0)
        goto block@3
    block@3: // after_if_else_L183
        let sender#2: bytes = Ï†(sender#0 <- block@0, sender#1 <- block@2)
        itxn_begin
        let length%0#0: uint64 = (len sender#2)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_bytes(byte[32])void")
        ((itxn_field ApplicationArgs) sender#2)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 