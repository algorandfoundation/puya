main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@14
    block@2: // abi_routing_L22
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_literal_encoding()void" => block@4, method "test_native_encoding()void" => block@5, method "test_arc4_encoding()void" => block@6, method "test_array_uint64_encoding()void" => block@7, method "test_array_static_encoding()void" => block@8, method "test_array_dynamic_encoding()void" => block@9, method "test_bytes_to_fixed(bool)void" => block@10, * => block@13}
    block@4: // test_literal_encoding_route_L23
        test_cases.arc4_conversions.contract.TestContract.test_literal_encoding[routing]()
        goto block@13
    block@5: // test_native_encoding_route_L46
        test_cases.arc4_conversions.contract.TestContract.test_native_encoding[routing]()
        goto block@13
    block@6: // test_arc4_encoding_route_L74
        test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding[routing]()
        goto block@13
    block@7: // test_array_uint64_encoding_route_L102
        test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding[routing]()
        goto block@13
    block@8: // test_array_static_encoding_route_L126
        test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding[routing]()
        goto block@13
    block@9: // test_array_dynamic_encoding_route_L150
        test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding[routing]()
        goto block@13
    block@10: // test_bytes_to_fixed_route_L178
        test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed[routing]()
        goto block@13
    block@13: // after_if_else_L22
        fail
    block@14: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.arc4_conversions.contract.my_dyn_struct_arc4(value: uint64) -> Encoded(uint64,uint8[32],(len+uint8[])):
    block@0: // L223
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%1#0: account = (txn Sender)
        let aggregate%encoded_value%0#0: bytes = (concat 0x0020 tmp%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 reinterpret_Encoded(uint8[32])%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x002a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%encoded_value%0#0)
        return aggregate%concat%0#0

subroutine test_cases.arc4_conversions.contract.TestContract.test_literal_encoding[routing]() -> void:
    block@0: // L23
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_native_encoding[routing]() -> void:
    block@0: // L46
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        let aggregate%length%1#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%6#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        let tmp%9#0: bytes = (concat 0x0004 tmp%8#0)
        let aggregate%length%2#0: uint64 = (len tmp%9#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%9#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%encoded_value%1#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: bool = (== tmp%16#0 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%17#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) aggregate%encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding[routing]() -> void:
    block@0: // L74
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) 0x00080000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%3#0: bytes = (txna ApplicationArgs 0)
        let aggregate%length%1#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%3#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        let tmp%6#0: bytes = (concat 0x0004 tmp%5#0)
        let aggregate%length%2#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%6#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%encoded_value%1#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) 0x000b48656c6c6f20576f726c64)
        ((itxn_field ApplicationArgs) 0x000d000b48656c6c6f20576f726c64)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) 0x004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%13#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) aggregate%encoded_bool%0#0)
        ((itxn_field ApplicationArgs) 0x000180)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding[routing]() -> void:
    block@0: // L102
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 1u)
        let tmp%4#0: uint64 = (txn NumAppArgs)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%head%0#0: bytes = (concat 0x0003 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%5#0)
        let arr#0: Encoded(len+uint64[]) = (concat aggregate%head%1#0 aggregate%val_as_bytes%2#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 1u)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#0: uint64 = (+ tmp%19#0 2u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%16#0)
        let aggregate%head%3#0: bytes = (concat 0x0003 aggregate%val_as_bytes%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%18#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%val_as_bytes%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%20#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%val_as_bytes%5#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%head%5#0)
        ((itxn_field ApplicationArgs) 0x001a0003000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%23#0: uint64 = (txn NumAppArgs)
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let tmp%25#0: uint64 = (+ tmp%24#0 1u)
        let tmp%26#0: uint64 = (txn NumAppArgs)
        let tmp%27#0: uint64 = (+ tmp%26#0 2u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%23#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%25#0)
        let aggregate%head%7#0: bytes = (concat aggregate%val_as_bytes%6#0 aggregate%val_as_bytes%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%27#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%val_as_bytes%8#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_uin64_3(uint64[3],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%head%8#0)
        ((itxn_field ApplicationArgs) 0x0018000000000000000100000000000000020000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding[routing]() -> void:
    block@0: // L126
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: account = (txn Sender)
        let tmp%0#1: account = (txn Sender)
        let tmp%0#2: account = (txn Sender)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 tmp%0#0)
        let aggregate%head%2#0: bytes = (concat 0x0003 aggregate%head%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%1#0 tmp%0#1)
        let aggregate%head%5#0: bytes = (concat aggregate%head%2#0 aggregate%head%4#0)
        let aggregate%head%7#0: bytes = (concat aggregate%as_bytes%0#0 tmp%0#2)
        let arr#0: Encoded(len+(uint64,uint8[32])[]) = (concat aggregate%head%5#0 aggregate%head%7#0)
        let tmp%10#0: account = (txn Sender)
        let tmp%11#0: bytes = (concat 0x00030000000000000001 tmp%10#0)
        let tmp%14#0: bytes = (concat tmp%11#0 0x0000000000000002)
        let tmp%15#0: account = (txn Sender)
        let tmp%16#0: bytes = (concat tmp%14#0 tmp%15#0)
        let tmp%19#0: bytes = (concat tmp%16#0 0x0000000000000003)
        let tmp%20#0: account = (txn Sender)
        let expected_bytes#0: bytes = (concat tmp%19#0 tmp%20#0)
        itxn_begin
        let aggregate%length%0#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_struct((uint64,address)[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let tmp%0#3: account = (txn Sender)
        let tmp%0#4: account = (txn Sender)
        let tmp%0#5: account = (txn Sender)
        let aggregate%head%10#0: bytes = (concat aggregate%val_as_bytes%0#0 tmp%0#3)
        let aggregate%head%13#0: bytes = (concat aggregate%val_as_bytes%1#0 tmp%0#4)
        let aggregate%head%14#0: bytes = (concat aggregate%head%10#0 aggregate%head%13#0)
        let aggregate%head%16#0: bytes = (concat aggregate%as_bytes%0#0 tmp%0#5)
        let aggregate%head%17#0: bytes = (concat aggregate%head%14#0 aggregate%head%16#0)
        let is_out_of_bounds%0#0: bool = (>= 2u aggregate%length%0#0)
        let bounded_index%0#0: uint64 = (select 2u aggregate%length%0#0 is_out_of_bounds%0#0)
        let tmp%30#0: bytes = (substring3 expected_bytes#0 bounded_index%0#0 aggregate%length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%30#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%30#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_struct((uint64,address)[3],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%head%17#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding[routing]() -> void:
    block@0: // L150
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#1: account = (txn Sender)
        let tmp%0#1: account = (txn Sender)
        let tmp%1#2: account = (txn Sender)
        let tmp%0#2: account = (txn Sender)
        let tmp%1#3: account = (txn Sender)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 tmp%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat 0x0020 tmp%1#1)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x002a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%encoded_value%0#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%concat%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 6u aggregate%data_length%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%head%5#0: bytes = (concat aggregate%val_as_bytes%1#0 tmp%0#1)
        let aggregate%encoded_value%1#0: bytes = (concat 0x0020 tmp%1#2)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x002a)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%6#0 aggregate%encoded_value%1#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%7#0: bytes = (concat 0x00030006 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%concat%1#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%3#0)
        let aggregate%head%9#0: bytes = (concat aggregate%as_bytes%0#0 tmp%0#2)
        let aggregate%encoded_value%2#0: bytes = (concat 0x0020 tmp%1#3)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x002a)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%10#0 aggregate%encoded_value%2#0)
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%7#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%11#0 aggregate%concat%0#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%concat%1#0)
        let arr#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = (concat aggregate%concat%4#0 aggregate%concat%2#0)
        let tmp%10#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%11#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%12#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let aggregate%data_length%6#0: uint64 = (len tmp%10#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 6u aggregate%data_length%6#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%13#0: bytes = (concat 0x00030006 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len tmp%11#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%6#0 aggregate%data_length%7#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%7#0)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%offset_as_uint16%8#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%14#0 tmp%10#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 tmp%11#0)
        let expected_bytes#0: bytes = (concat aggregate%concat%7#0 tmp%12#0)
        itxn_begin
        let aggregate%length%3#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 expected_bytes#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%3#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%14#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%15#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%16#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let aggregate%data_length%9#0: uint64 = (len tmp%14#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 6u aggregate%data_length%9#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%head%16#0: bytes = (concat 0x0006 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len tmp%15#0)
        let aggregate%current_tail_offset%10#0: uint64 = (+ aggregate%current_tail_offset%9#0 aggregate%data_length%10#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%current_tail_offset%10#0)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%offset_as_uint16%11#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%head%17#0 tmp%14#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%concat%9#0 tmp%15#0)
        let expected_bytes#1: bytes = (concat aggregate%concat%10#0 tmp%16#0)
        itxn_begin
        let tmp%0#3: account = (txn Sender)
        let tmp%1#4: account = (txn Sender)
        let tmp%0#4: account = (txn Sender)
        let tmp%1#5: account = (txn Sender)
        let tmp%0#5: account = (txn Sender)
        let tmp%1#6: account = (txn Sender)
        let aggregate%head%19#0: bytes = (concat aggregate%val_as_bytes%0#0 tmp%0#3)
        let aggregate%encoded_value%4#0: bytes = (concat 0x0020 tmp%1#4)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 0x002a)
        let aggregate%concat%12#0: bytes = (concat aggregate%head%20#0 aggregate%encoded_value%4#0)
        let aggregate%data_length%13#0: uint64 = (len aggregate%concat%12#0)
        let aggregate%current_tail_offset%13#0: uint64 = (+ 6u aggregate%data_length%13#0)
        let aggregate%head%23#0: bytes = (concat aggregate%val_as_bytes%1#0 tmp%0#4)
        let aggregate%encoded_value%5#0: bytes = (concat 0x0020 tmp%1#5)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 0x002a)
        let aggregate%concat%13#0: bytes = (concat aggregate%head%24#0 aggregate%encoded_value%5#0)
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%current_tail_offset%13#0)
        let aggregate%offset_as_uint16%15#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%head%25#0: bytes = (concat 0x0006 aggregate%offset_as_uint16%15#0)
        let aggregate%data_length%15#0: uint64 = (len aggregate%concat%13#0)
        let aggregate%current_tail_offset%15#0: uint64 = (+ aggregate%current_tail_offset%13#0 aggregate%data_length%15#0)
        let aggregate%head%27#0: bytes = (concat aggregate%as_bytes%0#0 tmp%0#5)
        let aggregate%encoded_value%6#0: bytes = (concat 0x0020 tmp%1#6)
        let aggregate%head%28#0: bytes = (concat aggregate%head%27#0 0x002a)
        let aggregate%concat%14#0: bytes = (concat aggregate%head%28#0 aggregate%encoded_value%6#0)
        let aggregate%as_bytes%26#0: bytes[8] = (itob aggregate%current_tail_offset%15#0)
        let aggregate%offset_as_uint16%17#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%head%29#0: bytes = (concat aggregate%head%25#0 aggregate%offset_as_uint16%17#0)
        let aggregate%concat%15#0: bytes = (concat aggregate%head%29#0 aggregate%concat%12#0)
        let aggregate%concat%16#0: bytes = (concat aggregate%concat%15#0 aggregate%concat%13#0)
        let aggregate%concat%17#0: bytes = (concat aggregate%concat%16#0 aggregate%concat%14#0)
        let aggregate%length%7#0: uint64 = (len expected_bytes#1)
        let aggregate%as_bytes%27#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%27#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 expected_bytes#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void")
        ((itxn_field ApplicationArgs) aggregate%concat%17#0)
        ((itxn_field ApplicationArgs) aggregate%encoded_value%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed[routing]() -> void:
    block@0: // L178
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for bool8
        let wrong_size#0: bool = (getbit tmp%0#0 0u)
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQACCDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMgBTAHQAkQCtANAA7QERAS4BRQFcADEZgQUSMRgQRCJDMRkUMRgUEEQiQzYaAUkVJRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1kkCEsBFRJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJFYFAEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVIhJENhoCSSNZJAhLARUSRFcCABJEIkM2GgFJI1klCyQISwEVEkQ2GgJJI1kkCEsBFRJEVwIAEkQiQzYaAUkVgRgSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSSNZgSgLJAhLARUSRDYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBeBJENhoCSSNZJAhLARUSRFcCABJEIkM2GgE2GgJJI1kkCEsBFRJEVwIAEkQiQzYaATYaAkkjWSQISwEVEkRXAgASRCJDNhoBSRWBIBJEMQASRCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (itxn CreatedApplicationID)
        let sender#0: bytes = (global CurrentApplicationAddress)
        goto wrong_size#0 ? block@3 : block@4
    block@3: // if_body_L184
        let sender#1: bytes = (concat sender#0 sender#0)
        goto block@4
    block@4: // after_if_else_L183
        let sender#2: bytes = φ(sender#0 <- block@0, sender#1 <- block@3)
        itxn_begin
        let aggregate%length%0#0: uint64 = (len sender#2)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "check_static_bytes(byte[32])void")
        ((itxn_field ApplicationArgs) sender#2)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u