{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        847,
                        864,
                        876,
                        888,
                        900,
                        912,
                        924
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        941
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        850,
                        867,
                        879,
                        891,
                        903,
                        915,
                        927
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2305
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEBgABAiYXAgAgAgAqBAqBAUPwAwogAQExG0EBZIINBDOzSZ4EjXYv3wQtMp7hBGpN33ME1uC3vATlys0GBImvVXsERuGWvQTzOIbaBCWVuVoEP1UmawR9JAlFBANRqd42GgCODQD3AOIAzQC4AKMAjgB5AGQATwA6ACUAEAABADEZFEQxGEQ2GgGIAW0iQzEZFEQxGEQ2GgE2GgJXAgCIAU4iQzEZFEQxGEQ2GgE2GgJXAgCIAS8iQzEZFEQxGEQ2GgE2GgJXAgCIARAiQzEZFEQxGEQ2GgE2GgJXAgCIAPEiQzEZFEQxGEQ2GgE2GgJXAgCIANIiQzEZFEQxGEQ2GgE2GgJXAgCIALMiQzEZFEQxGEQ2GgE2GgJXAgCIAJQiQzEZFEQxGEQ2GgE2GgJXAgCIAHUiQzEZFEQxGEQ2GgE2GgJXAgCIAFYiQzEZFEQxGEQ2GgE2GgJXAgCIADciQzEZFEQxGEQ2GgE2GgJXAgCIABgiQzEZgQUSRDEYRCJDMRlA/vkxGBREIkOKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoBAIv/MQASRIkEM7NJng0AC0hlbGxvIFdvcmxkDwANAAtIZWxsbyBXb3JsZASNdi/fCgAIAAAAAAAAAAAELTKe4QRqTd9zBNbgt7xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5crNBgMAAYACAAMIAAAAAAAAAAACAAQEia9VexwAGgADAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADBAADAAYCAAYxG0EAkoIHBMNoJf8EYgrG8AQ0SogLBKkuA8QEbE+EUwR72ppGBJo/j5s2GgCOBwBOAEIANgAqAB4AEgABADEZFEQxGEQ2GgEjU4gFfSRDMRkURDEYRIgEAyRDMRkURDEYRIgDHiRDMRkURDEYRIgCTiRDMRkURDEYRIgBiyRDMRkURDEYRIgAxCRDMRkURDEYRIgAISRDMRlA/6ExGBREJEOKAQGL/xYxACgxAFBOAlApUExQibEqskIrskAishAjsgGztD2xSbIYJweyGicRshonCLIaIrIQI7IBs7FJshgnCbIaJwWyGicGshoishAjsgGzsUmyGCcKshonBbIaJwayGiKyECOyAbOxSbIYJwuyGicMshonDbIaIrIQI7IBs7FJshgnDrIagAGAshonD7IaIrIQI7IBs7GBBbIZshgnBLIaIrIQI7IBs4mxKrJCK7JAIrIQI7IBs7Q9sTEbJAkWSwGyGCcHshqyGicIshoishAjsgGzsTYaAEkVFlcGAkxQJxI2GgBQSRUWVwYCTFBLArIYJwmyGkyyGrIaIrIQI7IBs7FJshgnCrIaJwWyGicGshoishAjsgGzsUmyGCcLshonDLIaJw2yGiKyECOyAbOxMRskEoABACNPAlRLAbIYJw6yGrIaJw+yGiKyECOyAbOxgQWyGbIYJwSyGiKyECOyAbOJsSqyQiuyQCKyECOyAbO0PbFJshgnB7IaJxGyGicIshoishAjsgGzsTYaAEkVFlcGAkxQJxI2GgBQSRUWVwYCTFBLArIYJwmyGkyyGrIaIrIQI7IBs7FJshgnCrIaJwWyGicGshoishAjsgGzsUmyGCcLshonDLIaJw2yGiKyECOyAbOxMRskEoABACNPAlRLAbIYJw6yGrIaJw+yGiKyECOyAbOxgQWyGbIYJwSyGiKyECOyAbOJsSqyQiuyQCKyECOyAbO0PTEbSSQIMRslCE8CFicQTFBPAhZQTBZQsUsBshgnE7IashonFLIaIrIQI7IBs7ExG0kkCDEbJQhPAhYnEExQTwIWUEwWUEsBshgnE7IashonFLIaIrIQI7IBs7ExG0kkCDEbJQhPAhZPAhZQTBZQSwGyGIAERuGWvbIashqAGgAYAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADshoishAjsgGzsYEFshmyGCcEshoishAjsgGzibEqskIrskAishAjsgGztD0xAEcCgQMWJBZJTwVQJxBMUCUWSU8GUE8CTFBLA08FUFCACgADAAAAAAAAAAExAFCACAAAAAAAAAACUDEAUIAIAAAAAAAAAANQMQBQsUkVSRZXBgJLAlBLB7IYgATzOIbashpPA7IashoishAjsgGzsTEARwJPBk8DUE8FTwNQUE8ETwJQUCVLAg8lSwNPAk1PA0xPA1JJFRZXBgJMUEsCshiABCWVuVqyGkyyGrIaIrIQI7IBs7GBBbIZshgnBLIaIrIQI7IBs4mxKrJCK7JAIrIQI7IBs7Q9MQBHBYEDFiQWSU8IUChPCFBMKVBMUEkVIgglFklPCVAoTwlQTClQTFBLAhZXBgInFUxQSwEVTwQISwZPCVAoTwlQTClQTFBMFlcGAk8CTFBPBFBPAlBMUCSI+9oliPvWgQOI+9FLAhUiCEkWVwYCJxVMUEsDFU8CCBZXBgJQTwNQTwJQTFCxSRUWVwYCTFBLBbIYgAQ/VSZrshpMshqyGiKyECOyAbMkiPuLJYj7h4EDiPuCSwIVIghJFlcGAicWTFBLAxVPAggWVwYCUE8DUE8CUExQsTEARwVPCE8GUChPBlBMKVBMUEkVIghPB08GUChPBlBMKVBMUEsBFlcGAicWTFBLARVPAwhPB08GUChPBlBMKVBMUEwWVwYCTwJMUE8DUE8CUExQSwEVFlcGAk8CUEsCshiABH0kCUWyGkyyGrIaIrIQI7IBs7GBBbIZshgnBLIaIrIQI7IBs4mKAQCxKrJCK7JAIrIQI7IBs7Q9MgpJi/9BAAaLAUlQjAKLArFJFYEgEkSLAElOArIYgAQDUaneshqyGiKyECOyAbOxgQWyGbIYJwSyGiKyECOyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}