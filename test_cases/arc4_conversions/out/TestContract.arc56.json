{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        557
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        625
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1988
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}