{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        983
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        1051
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        2387
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        2421
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}