{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        845,
                        862,
                        874,
                        886,
                        898,
                        910,
                        922
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        939
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        848,
                        865,
                        877,
                        889,
                        901,
                        913,
                        925
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2338
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAYBAiYWAgAgAgAqBAqBAUPyAwogAQExG0EBZoINBDOzSZ4EjXYv3wQtMp7hBGpN33ME1uC3vATlys0GBImvVXsERuGWvQTzOIbaBCWVuVoEP1UmawR9JAlFBANRqd42GgCODQD5AOQAzwC6AKUAkAB7AGYAUQA8ACcAEgADgQBDMRkURDEYRDYaAYgBbSJDMRkURDEYRDYaATYaAlcCAIgBTiJDMRkURDEYRDYaATYaAlcCAIgBLyJDMRkURDEYRDYaATYaAlcCAIgBECJDMRkURDEYRDYaATYaAlcCAIgA8SJDMRkURDEYRDYaATYaAlcCAIgA0iJDMRkURDEYRDYaATYaAlcCAIgAsyJDMRkURDEYRDYaATYaAlcCAIgAlCJDMRkURDEYRDYaATYaAlcCAIgAdSJDMRkURDEYRDYaATYaAlcCAIgAViJDMRkURDEYRDYaATYaAlcCAIgANyJDMRkURDEYRDYaATYaAlcCAIgAGCJDMRmBBRJEMRhEIkMxGUD+9zEYFEQiQ4oCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigIAi/6L/xJEiYoCAIv+i/8SRImKAgCL/ov/EkSJigEAi/8xABJEiQQzs0meAgADDQALSGVsbG8gV29ybGQPAA0AC0hlbGxvIFdvcmxkAgAGBI12L98KAAgAAAAAAAAAAAQtMp7hBGpN33ME1uC3vEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATlys0GAwABgAgAAAAAAAAAAAIABASJr1V7HAAaAAMAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAMxG0EAk4IHBMNoJf8EYgrG8AQ0SogLBKkuA8QEbE+EUwR72ppGBJo/j5s2GgCOBwBPAEMANwArAB8AEwACIkMxGRREMRhENhoBIlOIBaAkQzEZFEQxGESIBAUkQzEZFEQxGESIAx4kQzEZFEQxGESIAk4kQzEZFEQxGESIAYskQzEZFEQxGESIAMQkQzEZFEQxGESIACEkQzEZQP+gMRgURCRDigEBi/8WMQAoMQBQTgJQKVBMUImxKrJCK7JAI7IQIrIBs7Q9sUmyGCcJshonErIaJwqyGiOyECKyAbOxSbIYJwuyGicGshonB7IaI7IQIrIBs7FJshgnDLIaJwayGicHshojshAisgGzsUmyGCcNshonDrIaJw+yGiOyECKyAbOxSbIYJxCyGoABgLIaJxGyGiOyECKyAbOxgQWyGbIYJwSyGiOyECKyAbOJsSqyQiuyQCOyECKyAbO0PbExGyQJFksBshgnCbIashonCrIaI7IQIrIBs7E2GgBJFRZXBgJMUCcTNhoAUEkVFlcGAkxQSwKyGCcLshpMshqyGiOyECKyAbOxSbIYJwyyGicGshonB7IaI7IQIrIBs7FJshgnDbIaJw6yGicPshojshAisgGzsTEbJBKAAQAiTwJUSwGyGCcQshqyGicRshojshAisgGzsYEFshmyGCcEshojshAisgGzibEqskIrskAjshAisgGztD2xSbIYJwmyGicSshonCrIaI7IQIrIBs7E2GgBJFRZXBgJMUCcTNhoAUEkVFlcGAkxQSwKyGCcLshpMshqyGiOyECKyAbOxSbIYJwyyGicGshonB7IaI7IQIrIBs7FJshgnDbIaJw6yGicPshojshAisgGzsTEbJBKAAQAiTwJUSwGyGCcQshqyGicRshojshAisgGzsYEFshmyGCcEshojshAisgGzibEqskIrskAjshAisgGztD0xG0kkCDEbJQhPAhZPAhZQTBZQJwVMULFLAbIYJxSyGrIaJxWyGiOyECKyAbOxMRtJJAgxGyUITwIWTwIWUEwWUCcFTFBLAbIYJxSyGrIaJxWyGiOyECKyAbOxMRtJJAgxGyUITwIWTwIWUEwWUEsBshiABEbhlr2yGrIagBoAGAAAAAAAAAABAAAAAAAAAAIAAAAAAAAAA7IaI7IQIrIBs7GBBbIZshgnBLIaI7IQIrIBs4mxKrJCK7JAI7IQIrIBs7Q9MQBHAiQWSU8EUCUWSU8FUE8CTFCBAxZJTwVQTwJMUCcFTFCACgADAAAAAAAAAAExAFCACAAAAAAAAAACUDEAUIAIAAAAAAAAAANQMQBQsUkVSRZXBgJLAlBLB7IYgATzOIbashpPA7IashojshAisgGzsTEARwJPB08DUE8GTwNQUE8ETwJQUCVLAg8lSwNPAk1PA0xPA1JJFRZXBgJMUEsCshiABCWVuVqyGkyyGrIaI7IQIrIBs7GBBbIZshgnBLIaI7IQIrIBs4mxKrJCK7JAI7IQIrIBs7Q9MQBHBSQWSU8HUChPB1BMKVBMUEkVIwglFklPCFAoTwhQTClQTFBPA0sBUEwVSwMITwMWVwYCJwhMUIEDFklPCFAoTwhQTClQTFBPBExQTwMWVwYCTwNMUExQJwVMUCSI+9IliPvOgQOI+8lLAhUjCE8DSwNQTwMVSwIITwIWVwYCJwhMUE8CTwNQTwIWVwYCTwJMUExQJwVMULFJFRZXBgJMUEsFshiABD9VJmuyGkyyGrIaI7IQIrIBsySI+3UliPtxgQOI+2xLAhUjCE8DSwNQTwMVSwIITwIWVwYCJwhMUE8CTwNQTwIWVwYCTwJMUExQsTEARwVPCU8GUChPBlBMKVBMUEkVIwhPCE8GUChPBlBMKVBMUE8CSwFQTBVLAghPAhZXBgInCExQTwZPBVAoTwVQTClQTFBPA0xQTwIWVwYCTwJMUExQSwEVFlcGAk8CUEsCshiABH0kCUWyGkyyGrIaI7IQIrIBs7GBBbIZshgnBLIaI7IQIrIBs4mKAQCxKrJCK7JAI7IQIrIBs7Q9MgpJi/9BAAaLAUlQjAKLArFJFYEgEkSLAElOArIYgAQDUaneshqyGiOyECKyAbOxgQWyGbIYJwSyGiOyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}