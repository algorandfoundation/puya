{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        559
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        627
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1998
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayA2IDAgMSAyCiAgICBieXRlY2Jsb2NrIDB4MDAyMCAweDAwMmEgYmFzZTY0KENvRUJRdz09KSBiYXNlNjQoQ29FQk1SdEJBSG1BQkRPelNaNDJHZ0NPQVFCak1Sa1VSREVZUklJTUJJMTJMOThFTFRLZTRRUnFUZDl6Qk5iZ3Q3d0U1Y3JOQmdTSnIxVjdCRWJobHIwRTh6aUcyZ1FsbGJsYUJEOVZKbXNFZlNRSlJRUURVYW5lTmhvQWpnd0FFZ0FkQUNnQU13QStBRWtBVkFCZkFHb0FkUUNBQUlzQU1SbUJCUkl4R0JCRE1Sa1VNUmdVRUVNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTVFBU1F3PT0pIDB4MzNiMzQ5OWUgMHgwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NCAweDAwMGQwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NCAweDhkNzYyZmRmIDB4MDAwODAwMDAwMDAwMDAwMDAwMDAgMHgyZDMyOWVlMSAweDZhNGRkZjczIDB4ZDZlMGI3YmMgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAweDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAweGU1Y2FjZDA2IDB4MDAwMTgwIDB4MDAwMyAweDAwMDAwMDAwMDAwMDAwMDAgMHgwMDA0IDB4ODlhZjU1N2IgMHgwMDFhMDAwMzAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMyAweDAwMDMwMDA2IDB4MDAwNgogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToyMC0yMgogICAgLy8gIyBub3RlIHRoZXNlIHRlc3RzIGFyZSB1c2luZyBhYmlfY2FsbCBpbiBvcmRlciB0byB0ZXN0IGRpZmZlcmVudCBzY2VuYXJpb3Mgb2YgQVJDLTQgZW5jb2RpbmcKICAgIC8vICMgdGhlc2Ugc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggYSBtb3JlIHNpbXBsaWZpZWQgYWxnb3B5LmFyYzQuZW5jb2RlL2RlY29kZSB3aGVuIGl0IGlzIGF2YWlsYWJsZQogICAgLy8gY2xhc3MgVGVzdENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDE1CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4YzM2ODI1ZmYgMHg2MjBhYzZmMCAweDM0NGE4ODBiIDB4YTkyZTAzYzQgMHg2YzRmODQ1MyAweDdiZGE5YTQ2IDB4OWEzZjhmOWIgLy8gbWV0aG9kICJ0ZXN0X2xpdGVyYWxfZW5jb2RpbmcoKXZvaWQiLCBtZXRob2QgInRlc3RfbmF0aXZlX2VuY29kaW5nKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2FyYzRfZW5jb2RpbmcoKXZvaWQiLCBtZXRob2QgInRlc3RfYXJyYXlfdWludDY0X2VuY29kaW5nKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2FycmF5X3N0YXRpY19lbmNvZGluZygpdm9pZCIsIG1ldGhvZCAidGVzdF9hcnJheV9keW5hbWljX2VuY29kaW5nKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2J5dGVzX3RvX2ZpeGVkKGJvb2wpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIHRlc3RfbGl0ZXJhbF9lbmNvZGluZyB0ZXN0X25hdGl2ZV9lbmNvZGluZyB0ZXN0X2FyYzRfZW5jb2RpbmcgdGVzdF9hcnJheV91aW50NjRfZW5jb2RpbmcgdGVzdF9hcnJheV9zdGF0aWNfZW5jb2RpbmcgdGVzdF9hcnJheV9keW5hbWljX2VuY29kaW5nIHRlc3RfYnl0ZXNfdG9fZml4ZWQKICAgIGVycgoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUAxNToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwoKCi8vIHRlc3RfY2FzZXMuYXJjNF9jb252ZXJzaW9ucy5jb250cmFjdC5teV9keW5fc3RydWN0X2FyYzQodmFsdWU6IHVpbnQ2NCkgLT4gYnl0ZXM6Cm15X2R5bl9zdHJ1Y3RfYXJjNDoKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjIzLTIyNAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBteV9keW5fc3RydWN0X2FyYzQodmFsdWU6IFVJbnQ2NCkgLT4gTXlEeW5TdHJ1Y3RBUkM0OgogICAgcHJvdG8gMSAxCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjIyNgogICAgLy8gYXJjNC5VSW50NjQodmFsdWUpLCBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksIGFyYzQuRHluYW1pY0J5dGVzKFR4bi5zZW5kZXIuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIHR4biBTZW5kZXIKICAgIGJ5dGVjXzAgLy8gMHgwMDIwCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjI1LTIyNwogICAgLy8gcmV0dXJuIE15RHluU3RydWN0QVJDNCgKICAgIC8vICAgICBhcmM0LlVJbnQ2NCh2YWx1ZSksIGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwgYXJjNC5EeW5hbWljQnl0ZXMoVHhuLnNlbmRlci5ieXRlcykKICAgIC8vICkKICAgIGNvdmVyIDIKICAgIGNvbmNhdAogICAgYnl0ZWNfMSAvLyAweDAwMmEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFyYzRfY29udmVyc2lvbnMuY29udHJhY3QuVGVzdENvbnRyYWN0LnRlc3RfbGl0ZXJhbF9lbmNvZGluZ1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnRlc3RfbGl0ZXJhbF9lbmNvZGluZzoKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjUKICAgIC8vIGFwcCA9IGFyYzQuYXJjNF9jcmVhdGUoQ2hlY2tBcHApLmNyZWF0ZWRfYXBwCiAgICBpdHhuX2JlZ2luCiAgICBieXRlY18yIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYnl0ZWNfMyAvLyBiYXNlNjQoQ29FQk1SdEJBSG1BQkRPelNaNDJHZ0NPQVFCak1Sa1VSREVZUklJTUJJMTJMOThFTFRLZTRRUnFUZDl6Qk5iZ3Q3d0U1Y3JOQmdTSnIxVjdCRWJobHIwRTh6aUcyZ1FsbGJsYUJEOVZKbXNFZlNRSlJRUURVYW5lTmhvQWpnd0FFZ0FkQUNnQU13QStBRWtBVkFCZkFHb0FkUUNBQUlzQU1SbUJCUkl4R0JCRE1Sa1VNUmdVRUVNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTVFBU1F3PT0pCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToyNy0yOAogICAgLy8gIyB1aW50NjQKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfdWludDY0LCAwLCBvcC5iemVybyg4KSwgYXBwX2lkPWFwcCkKICAgIGl0eG5fYmVnaW4KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA3IC8vIG1ldGhvZCAiY2hlY2tfdWludDY0KHVpbnQ2NCxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyAxNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyA4IC8vIDB4MDAwODAwMDAwMDAwMDAwMDAwMDAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTozMC0zMwogICAgLy8gIyBieXRlcwogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19keW5hbWljX2J5dGVzLCBiIkhlbGxvIFdvcmxkIiwgYiJceDAwXHgwYkhlbGxvIFdvcmxkIiwgYXBwX2lkPWFwcAogICAgLy8gKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGJ5dGVjIDkgLy8gbWV0aG9kICJjaGVja19keW5hbWljX2J5dGVzKGJ5dGVbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBDaGVja0FwcC5jaGVja19keW5hbWljX2J5dGVzLCBiIkhlbGxvIFdvcmxkIiwgYiJceDAwXHgwYkhlbGxvIFdvcmxkIiwgYXBwX2lkPWFwcAogICAgYnl0ZWMgNSAvLyAweDAwMGI0ODY1NmM2YzZmMjA1NzZmNzI2YzY0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgNiAvLyAweDAwMGQwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MzAtMzMKICAgIC8vICMgYnl0ZXMKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfZHluYW1pY19ieXRlcywgYiJIZWxsbyBXb3JsZCIsIGIiXHgwMFx4MGJIZWxsbyBXb3JsZCIsIGFwcF9pZD1hcHAKICAgIC8vICkKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjM1LTM2CiAgICAvLyAjIHN0cmluZwogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5jaGVja19zdHJpbmcsICJIZWxsbyBXb3JsZCIsIGIiXHgwMFx4MGJIZWxsbyBXb3JsZCIsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgYnl0ZWMgMTAgLy8gbWV0aG9kICJjaGVja19zdHJpbmcoc3RyaW5nLGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDUgLy8gMHgwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MzIKICAgIC8vIENoZWNrQXBwLmNoZWNrX2R5bmFtaWNfYnl0ZXMsIGIiSGVsbG8gV29ybGQiLCBiIlx4MDBceDBiSGVsbG8gV29ybGQiLCBhcHBfaWQ9YXBwCiAgICBieXRlYyA2IC8vIDB4MDAwZDAwMGI0ODY1NmM2YzZmMjA1NzZmNzI2YzY0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTozNS0zNgogICAgLy8gIyBzdHJpbmcKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfc3RyaW5nLCAiSGVsbG8gV29ybGQiLCBiIlx4MDBceDBiSGVsbG8gV29ybGQiLCBhcHBfaWQ9YXBwKQogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MzgtMzkKICAgIC8vICMgYmlndWludAogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5jaGVja19iaWd1aW50LCBCaWdVSW50KCksIG9wLmJ6ZXJvKDY0KSwgYXBwX2lkPWFwcCkKICAgIGl0eG5fYmVnaW4KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyAxMSAvLyBtZXRob2QgImNoZWNrX2JpZ3VpbnQodWludDUxMixieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgMTMgLy8gMHgwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTo0MS00MgogICAgLy8gIyBib29sCiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmNoZWNrX2Jvb2wsIFRydWUsIGIiXHg4MCIsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgYnl0ZWMgMTQgLy8gbWV0aG9kICJjaGVja19ib29sKGJvb2wsYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGJ5dGVzIDB4ODAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyAxNSAvLyAweDAwMDE4MAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmRlbGV0ZV9hcHBsaWNhdGlvbiwgYXBwX2lkPWFwcCkKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgYnl0ZWMgNCAvLyBtZXRob2QgImRlbGV0ZV9hcHBsaWNhdGlvbigpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToyMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLmFyYzRfY29udmVyc2lvbnMuY29udHJhY3QuVGVzdENvbnRyYWN0LnRlc3RfbmF0aXZlX2VuY29kaW5nW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdF9uYXRpdmVfZW5jb2Rpbmc6CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBhcHAgPSBhcmM0LmFyYzRfY3JlYXRlKENoZWNrQXBwKS5jcmVhdGVkX2FwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWNfMiAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzMgLy8gYmFzZTY0KENvRUJNUnRCQUhtQUJET3pTWjQyR2dDT0FRQmpNUmtVUkRFWVJJSU1CSTEyTDk4RUxUS2U0UVJxVGQ5ekJOYmd0N3dFNWNyTkJnU0pyMVY3QkViaGxyMEU4emlHMmdRbGxibGFCRDlWSm1zRWZTUUpSUVFEVWFuZU5ob0FqZ3dBRWdBZEFDZ0FNd0ErQUVrQVZBQmZBR29BZFFDQUFJc0FNUm1CQlJJeEdCQkRNUmtVTVJnVUVFTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk1RQVNRdz09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6NTAtNTEKICAgIC8vICMgdWludDY0CiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmNoZWNrX3VpbnQ2NCwgVHhuLm51bV9hcHBfYXJncyAtIDEsIG9wLmJ6ZXJvKDgpLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBpdG9iCiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA3IC8vIG1ldGhvZCAiY2hlY2tfdWludDY0KHVpbnQ2NCxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgOCAvLyAweDAwMDgwMDAwMDAwMDAwMDAwMDAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6NTMtNTkKICAgIC8vICMgYnl0ZXMKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfZHluYW1pY19ieXRlcywKICAgIC8vICAgICBUeG4uYXBwbGljYXRpb25fYXJncygwKSwKICAgIC8vICAgICBiIlx4MDBceDA0IiArIFR4bi5hcHBsaWNhdGlvbl9hcmdzKDApLAogICAgLy8gICAgIGFwcF9pZD1hcHAsCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjU2CiAgICAvLyBUeG4uYXBwbGljYXRpb25fYXJncygwKSwKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjU3CiAgICAvLyBiIlx4MDBceDA0IiArIFR4bi5hcHBsaWNhdGlvbl9hcmdzKDApLAogICAgYnl0ZWMgMTggLy8gMHgwMDA0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjUzLTU5CiAgICAvLyAjIGJ5dGVzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX2R5bmFtaWNfYnl0ZXMsCiAgICAvLyAgICAgVHhuLmFwcGxpY2F0aW9uX2FyZ3MoMCksCiAgICAvLyAgICAgYiJceDAwXHgwNCIgKyBUeG4uYXBwbGljYXRpb25fYXJncygwKSwKICAgIC8vICAgICBhcHBfaWQ9YXBwLAogICAgLy8gKQogICAgYnl0ZWMgOSAvLyBtZXRob2QgImNoZWNrX2R5bmFtaWNfYnl0ZXMoYnl0ZVtdLGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6NjEtNjQKICAgIC8vICMgYnl0ZXMKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfc3RyaW5nLCBTdHJpbmcoIkhlbGxvIFdvcmxkIiksIGIiXHgwMFx4MGJIZWxsbyBXb3JsZCIsIGFwcF9pZD1hcHAKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyAxMCAvLyBtZXRob2QgImNoZWNrX3N0cmluZyhzdHJpbmcsYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTo2MwogICAgLy8gQ2hlY2tBcHAuY2hlY2tfc3RyaW5nLCBTdHJpbmcoIkhlbGxvIFdvcmxkIiksIGIiXHgwMFx4MGJIZWxsbyBXb3JsZCIsIGFwcF9pZD1hcHAKICAgIGJ5dGVjIDUgLy8gMHgwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDYgLy8gMHgwMDBkMDAwYjQ4NjU2YzZjNmYyMDU3NmY3MjZjNjQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjYxLTY0CiAgICAvLyAjIGJ5dGVzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX3N0cmluZywgU3RyaW5nKCJIZWxsbyBXb3JsZCIpLCBiIlx4MDBceDBiSGVsbG8gV29ybGQiLCBhcHBfaWQ9YXBwCiAgICAvLyApCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTo2Ni02NwogICAgLy8gIyBiaWd1aW50CiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmNoZWNrX2JpZ3VpbnQsIEJpZ1VJbnQoKSwgb3AuYnplcm8oNjQpLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGJ5dGVjIDExIC8vIG1ldGhvZCAiY2hlY2tfYmlndWludCh1aW50NTEyLGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyAxMyAvLyAweDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyAjIGJvb2wKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfYm9vbCwgVHhuLm51bV9hcHBfYXJncyA9PSAxLCBiIlx4ODAiLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMiAvLyAxCiAgICA9PQogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgYnl0ZWMgMTQgLy8gbWV0aG9kICJjaGVja19ib29sKGJvb2wsYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDE1IC8vIDB4MDAwMTgwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6NzIKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuZGVsZXRlX2FwcGxpY2F0aW9uLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZGVsZXRlX2FwcGxpY2F0aW9uKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuYXJjNF9jb252ZXJzaW9ucy5jb250cmFjdC5UZXN0Q29udHJhY3QudGVzdF9hcmM0X2VuY29kaW5nW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdF9hcmM0X2VuY29kaW5nOgogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTo3NgogICAgLy8gYXBwID0gYXJjNC5hcmM0X2NyZWF0ZShDaGVja0FwcCkuY3JlYXRlZF9hcHAKICAgIGl0eG5fYmVnaW4KICAgIGJ5dGVjXzIgLy8gYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBieXRlY18zIC8vIGJhc2U2NChDb0VCTVJ0QkFIbUFCRE96U1o0MkdnQ09BUUJqTVJrVVJERVlSSUlNQkkxMkw5OEVMVEtlNFFScVRkOXpCTmJndDd3RTVjck5CZ1NKcjFWN0JFYmhscjBFOHppRzJnUWxsYmxhQkQ5Vkptc0VmU1FKUlFRRFVhbmVOaG9Bamd3QUVnQWRBQ2dBTXdBK0FFa0FWQUJmQUdvQWRRQ0FBSXNBTVJtQkJSSXhHQkJETVJrVU1SZ1VFRU0yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JNUUFTUXc9PSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5Ojc4LTc5CiAgICAvLyAjIHVpbnQ2NAogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5jaGVja191aW50NjQsIGFyYzQuVUludDY0KCksIG9wLmJ6ZXJvKDgpLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGJ5dGVjIDcgLy8gbWV0aG9kICJjaGVja191aW50NjQodWludDY0LGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDE3IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDggLy8gMHgwMDA4MDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjgxLTg3CiAgICAvLyAjIGJ5dGVzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX2R5bmFtaWNfYnl0ZXMsCiAgICAvLyAgICAgYXJjNC5EeW5hbWljQnl0ZXMoVHhuLmFwcGxpY2F0aW9uX2FyZ3MoMCkpLAogICAgLy8gICAgIGIiXHgwMFx4MDQiICsgVHhuLmFwcGxpY2F0aW9uX2FyZ3MoMCksCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6ODQKICAgIC8vIGFyYzQuRHluYW1pY0J5dGVzKFR4bi5hcHBsaWNhdGlvbl9hcmdzKDApKSwKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBiIlx4MDBceDA0IiArIFR4bi5hcHBsaWNhdGlvbl9hcmdzKDApLAogICAgYnl0ZWMgMTggLy8gMHgwMDA0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjgxLTg3CiAgICAvLyAjIGJ5dGVzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX2R5bmFtaWNfYnl0ZXMsCiAgICAvLyAgICAgYXJjNC5EeW5hbWljQnl0ZXMoVHhuLmFwcGxpY2F0aW9uX2FyZ3MoMCkpLAogICAgLy8gICAgIGIiXHgwMFx4MDQiICsgVHhuLmFwcGxpY2F0aW9uX2FyZ3MoMCksCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIGJ5dGVjIDkgLy8gbWV0aG9kICJjaGVja19keW5hbWljX2J5dGVzKGJ5dGVbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5Ojg5LTkyCiAgICAvLyAjIGJ5dGVzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX3N0cmluZywgYXJjNC5TdHJpbmcoIkhlbGxvIFdvcmxkIiksIGIiXHgwMFx4MGJIZWxsbyBXb3JsZCIsIGFwcF9pZD1hcHAKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyAxMCAvLyBtZXRob2QgImNoZWNrX3N0cmluZyhzdHJpbmcsYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weTo5MQogICAgLy8gQ2hlY2tBcHAuY2hlY2tfc3RyaW5nLCBhcmM0LlN0cmluZygiSGVsbG8gV29ybGQiKSwgYiJceDAwXHgwYkhlbGxvIFdvcmxkIiwgYXBwX2lkPWFwcAogICAgYnl0ZWMgNSAvLyAweDAwMGI0ODY1NmM2YzZmMjA1NzZmNzI2YzY0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgNiAvLyAweDAwMGQwMDBiNDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6ODktOTIKICAgIC8vICMgYnl0ZXMKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfc3RyaW5nLCBhcmM0LlN0cmluZygiSGVsbG8gV29ybGQiKSwgYiJceDAwXHgwYkhlbGxvIFdvcmxkIiwgYXBwX2lkPWFwcAogICAgLy8gKQogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6OTQtOTUKICAgIC8vICMgYmlndWludAogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5jaGVja19iaWd1aW50LCBhcmM0LlVJbnQ1MTIoKSwgb3AuYnplcm8oNjQpLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGJ5dGVjIDExIC8vIG1ldGhvZCAiY2hlY2tfYmlndWludCh1aW50NTEyLGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBieXRlYyAxMyAvLyAweDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5Ojk3LTk4CiAgICAvLyAjIGJvb2wKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfYm9vbCwgYXJjNC5Cb29sKFR4bi5udW1fYXBwX2FyZ3MgPT0gMSksIGIiXHg4MCIsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18yIC8vIDEKICAgID09CiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyAxNCAvLyBtZXRob2QgImNoZWNrX2Jvb2woYm9vbCxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgMTUgLy8gMHgwMDAxODAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxMDAKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuZGVsZXRlX2FwcGxpY2F0aW9uLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZGVsZXRlX2FwcGxpY2F0aW9uKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5Ojc0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuYXJjNF9jb252ZXJzaW9ucy5jb250cmFjdC5UZXN0Q29udHJhY3QudGVzdF9hcnJheV91aW50NjRfZW5jb2Rpbmdbcm91dGluZ10oKSAtPiB2b2lkOgp0ZXN0X2FycmF5X3VpbnQ2NF9lbmNvZGluZzoKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTA0CiAgICAvLyBhcHAgPSBhcmM0LmFyYzRfY3JlYXRlKENoZWNrQXBwKS5jcmVhdGVkX2FwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWNfMiAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzMgLy8gYmFzZTY0KENvRUJNUnRCQUhtQUJET3pTWjQyR2dDT0FRQmpNUmtVUkRFWVJJSU1CSTEyTDk4RUxUS2U0UVJxVGQ5ekJOYmd0N3dFNWNyTkJnU0pyMVY3QkViaGxyMEU4emlHMmdRbGxibGFCRDlWSm1zRWZTUUpSUVFEVWFuZU5ob0FqZ3dBRWdBZEFDZ0FNd0ErQUVrQVZBQmZBR29BZFFDQUFJc0FNUm1CQlJJeEdCQkRNUmtVTVJnVUVFTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk1RQVNRdz09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTA2CiAgICAvLyBhcnIgPSBJbW11dGFibGVBcnJheShUeG4ubnVtX2FwcF9hcmdzLCBUeG4ubnVtX2FwcF9hcmdzICsgMSwgVHhuLm51bV9hcHBfYXJncyArIDIpCiAgICB0eG4gTnVtQXBwQXJncwogICAgZHVwCiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMyAvLyAyCiAgICArCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGJ5dGVjIDE2IC8vIDB4MDAwMwogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExMAogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5jaGVja19keW5fYXJyYXlfdWluNjQsIGFyciwgZXhwZWN0ZWRfYnl0ZXMsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyAxOSAvLyBtZXRob2QgImNoZWNrX2R5bl9hcnJheV91aW42NCh1aW50NjRbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgMjAgLy8gMHgwMDFhMDAwMzAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExMS0xMTYKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfZHluX2FycmF5X3VpbjY0LAogICAgLy8gICAgIChUeG4ubnVtX2FwcF9hcmdzLCBUeG4ubnVtX2FwcF9hcmdzICsgMSwgVHhuLm51bV9hcHBfYXJncyArIDIpLAogICAgLy8gICAgIGV4cGVjdGVkX2J5dGVzLAogICAgLy8gICAgIGFwcF9pZD1hcHAsCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExMwogICAgLy8gKFR4bi5udW1fYXBwX2FyZ3MsIFR4bi5udW1fYXBwX2FyZ3MgKyAxLCBUeG4ubnVtX2FwcF9hcmdzICsgMiksCiAgICB0eG4gTnVtQXBwQXJncwogICAgZHVwCiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMyAvLyAyCiAgICArCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGJ5dGVjIDE2IC8vIDB4MDAwMwogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExMS0xMTYKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfZHluX2FycmF5X3VpbjY0LAogICAgLy8gICAgIChUeG4ubnVtX2FwcF9hcmdzLCBUeG4ubnVtX2FwcF9hcmdzICsgMSwgVHhuLm51bV9hcHBfYXJncyArIDIpLAogICAgLy8gICAgIGV4cGVjdGVkX2J5dGVzLAogICAgLy8gICAgIGFwcF9pZD1hcHAsCiAgICAvLyApCiAgICBieXRlYyAxOSAvLyBtZXRob2QgImNoZWNrX2R5bl9hcnJheV91aW42NCh1aW50NjRbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxMTAKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfZHluX2FycmF5X3VpbjY0LCBhcnIsIGV4cGVjdGVkX2J5dGVzLCBhcHBfaWQ9YXBwKQogICAgYnl0ZWMgMjAgLy8gMHgwMDFhMDAwMzAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTExLTExNgogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19keW5fYXJyYXlfdWluNjQsCiAgICAvLyAgICAgKFR4bi5udW1fYXBwX2FyZ3MsIFR4bi5udW1fYXBwX2FyZ3MgKyAxLCBUeG4ubnVtX2FwcF9hcmdzICsgMiksCiAgICAvLyAgICAgZXhwZWN0ZWRfYnl0ZXMsCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExNy0xMjIKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgQ2hlY2tBcHAuY2hlY2tfc3RhdGljX2FycmF5X3VpbjY0XzMsCiAgICAvLyAgICAgKFR4bi5udW1fYXBwX2FyZ3MsIFR4bi5udW1fYXBwX2FyZ3MgKyAxLCBUeG4ubnVtX2FwcF9hcmdzICsgMiksCiAgICAvLyAgICAgZXhwZWN0ZWRfYnl0ZXNbMjpdLAogICAgLy8gICAgIGFwcF9pZD1hcHAsCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjExOQogICAgLy8gKFR4bi5udW1fYXBwX2FyZ3MsIFR4bi5udW1fYXBwX2FyZ3MgKyAxLCBUeG4ubnVtX2FwcF9hcmdzICsgMiksCiAgICB0eG4gTnVtQXBwQXJncwogICAgZHVwCiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMyAvLyAyCiAgICArCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTE3LTEyMgogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19zdGF0aWNfYXJyYXlfdWluNjRfMywKICAgIC8vICAgICAoVHhuLm51bV9hcHBfYXJncywgVHhuLm51bV9hcHBfYXJncyArIDEsIFR4bi5udW1fYXBwX2FyZ3MgKyAyKSwKICAgIC8vICAgICBleHBlY3RlZF9ieXRlc1syOl0sCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDQ2ZTE5NmJkIC8vIG1ldGhvZCAiY2hlY2tfc3RhdGljX2FycmF5X3VpbjY0XzModWludDY0WzNdLGJ5dGVbXSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEyMAogICAgLy8gZXhwZWN0ZWRfYnl0ZXNbMjpdLAogICAgcHVzaGJ5dGVzIDB4MDAxODAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTE3LTEyMgogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19zdGF0aWNfYXJyYXlfdWluNjRfMywKICAgIC8vICAgICAoVHhuLm51bV9hcHBfYXJncywgVHhuLm51bV9hcHBfYXJncyArIDEsIFR4bi5udW1fYXBwX2FyZ3MgKyAyKSwKICAgIC8vICAgICBleHBlY3RlZF9ieXRlc1syOl0sCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEyNAogICAgLy8gYXJjNC5hYmlfY2FsbChDaGVja0FwcC5kZWxldGVfYXBwbGljYXRpb24sIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGJ5dGVjIDQgLy8gbWV0aG9kICJkZWxldGVfYXBwbGljYXRpb24oKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTAyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuYXJjNF9jb252ZXJzaW9ucy5jb250cmFjdC5UZXN0Q29udHJhY3QudGVzdF9hcnJheV9zdGF0aWNfZW5jb2Rpbmdbcm91dGluZ10oKSAtPiB2b2lkOgp0ZXN0X2FycmF5X3N0YXRpY19lbmNvZGluZzoKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTI4CiAgICAvLyBhcHAgPSBhcmM0LmFyYzRfY3JlYXRlKENoZWNrQXBwKS5jcmVhdGVkX2FwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWNfMiAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzMgLy8gYmFzZTY0KENvRUJNUnRCQUhtQUJET3pTWjQyR2dDT0FRQmpNUmtVUkRFWVJJSU1CSTEyTDk4RUxUS2U0UVJxVGQ5ekJOYmd0N3dFNWNyTkJnU0pyMVY3QkViaGxyMEU4emlHMmdRbGxibGFCRDlWSm1zRWZTUUpSUVFEVWFuZU5ob0FqZ3dBRWdBZEFDZ0FNd0ErQUVrQVZBQmZBR29BZFFDQUFJc0FNUm1CQlJJeEdCQkRNUmtVTVJnVUVFTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk1RQVNRdz09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjAzCiAgICAvLyByZXR1cm4gTXlTdHJ1Y3QodmFsdWUsIFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICBkdXBuIDIKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTMwCiAgICAvLyBhcnIgPSBJbW11dGFibGVBcnJheShteV9zdHJ1Y3QoVUludDY0KDEpKSwgbXlfc3RydWN0KFVJbnQ2NCgyKSksIG15X3N0cnVjdChVSW50NjQoMykpKQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGludGNfMiAvLyAxCiAgICBpdG9iCiAgICBkdXAKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICBieXRlYyAxNiAvLyAweDAwMDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDIKICAgIGl0b2IKICAgIGR1cAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMwogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIGNvbmNhdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxMzItMTMzCiAgICAvLyBiIlx4MDBceDAzIgogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDEiKQogICAgcHVzaGJ5dGVzIDB4MDAwMzAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTM0CiAgICAvLyArIFR4bi5zZW5kZXIuYnl0ZXMKICAgIHR4biBTZW5kZXIKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTMyLTEzNAogICAgLy8gYiJceDAwXHgwMyIKICAgIC8vICsgKG9wLmJ6ZXJvKDcpICsgYiJceDAxIikKICAgIC8vICsgVHhuLnNlbmRlci5ieXRlcwogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEzNQogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDIiKQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMgogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxMzItMTM1CiAgICAvLyBiIlx4MDBceDAzIgogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDEiKQogICAgLy8gKyBUeG4uc2VuZGVyLmJ5dGVzCiAgICAvLyArIChvcC5iemVybyg3KSArIGIiXHgwMiIpCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTM2CiAgICAvLyArIFR4bi5zZW5kZXIuYnl0ZXMKICAgIHR4biBTZW5kZXIKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTMyLTEzNgogICAgLy8gYiJceDAwXHgwMyIKICAgIC8vICsgKG9wLmJ6ZXJvKDcpICsgYiJceDAxIikKICAgIC8vICsgVHhuLnNlbmRlci5ieXRlcwogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDIiKQogICAgLy8gKyBUeG4uc2VuZGVyLmJ5dGVzCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTM3CiAgICAvLyArIChvcC5iemVybyg3KSArIGIiXHgwMyIpCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAzCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEzMi0xMzcKICAgIC8vIGIiXHgwMFx4MDMiCiAgICAvLyArIChvcC5iemVybyg3KSArIGIiXHgwMSIpCiAgICAvLyArIFR4bi5zZW5kZXIuYnl0ZXMKICAgIC8vICsgKG9wLmJ6ZXJvKDcpICsgYiJceDAyIikKICAgIC8vICsgVHhuLnNlbmRlci5ieXRlcwogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDMiKQogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEzOAogICAgLy8gKyBUeG4uc2VuZGVyLmJ5dGVzCiAgICB0eG4gU2VuZGVyCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEzMi0xMzgKICAgIC8vIGIiXHgwMFx4MDMiCiAgICAvLyArIChvcC5iemVybyg3KSArIGIiXHgwMSIpCiAgICAvLyArIFR4bi5zZW5kZXIuYnl0ZXMKICAgIC8vICsgKG9wLmJ6ZXJvKDcpICsgYiJceDAyIikKICAgIC8vICsgVHhuLnNlbmRlci5ieXRlcwogICAgLy8gKyAob3AuYnplcm8oNykgKyBiIlx4MDMiKQogICAgLy8gKyBUeG4uc2VuZGVyLmJ5dGVzCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTQwCiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmNoZWNrX2R5bl9hcnJheV9zdHJ1Y3QsIGFyciwgZXhwZWN0ZWRfYnl0ZXMsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBkdXAKICAgIGxlbgogICAgZHVwCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZGlnIDIKICAgIGNvbmNhdAogICAgZGlnIDcKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgcHVzaGJ5dGVzIDB4ZjMzODg2ZGEgLy8gbWV0aG9kICJjaGVja19keW5fYXJyYXlfc3RydWN0KCh1aW50NjQsYWRkcmVzcylbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICB1bmNvdmVyIDMKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTQxLTE0NgogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19zdGF0aWNfYXJyYXlfc3RydWN0LAogICAgLy8gICAgIChteV9zdHJ1Y3QoVUludDY0KDEpKSwgbXlfc3RydWN0KFVJbnQ2NCgyKSksIG15X3N0cnVjdChVSW50NjQoMykpKSwKICAgIC8vICAgICBleHBlY3RlZF9ieXRlc1syOl0sCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjAzCiAgICAvLyByZXR1cm4gTXlTdHJ1Y3QodmFsdWUsIFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICBkdXBuIDIKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTQzCiAgICAvLyAobXlfc3RydWN0KFVJbnQ2NCgxKSksIG15X3N0cnVjdChVSW50NjQoMikpLCBteV9zdHJ1Y3QoVUludDY0KDMpKSksCiAgICB1bmNvdmVyIDYKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDUKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGNvbmNhdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNDQKICAgIC8vIGV4cGVjdGVkX2J5dGVzWzI6XSwKICAgIGludGNfMyAvLyAyCiAgICBkaWcgMgogICAgPj0KICAgIGludGNfMyAvLyAyCiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHVuY292ZXIgMwogICAgc3dhcAogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNDEtMTQ2CiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX3N0YXRpY19hcnJheV9zdHJ1Y3QsCiAgICAvLyAgICAgKG15X3N0cnVjdChVSW50NjQoMSkpLCBteV9zdHJ1Y3QoVUludDY0KDIpKSwgbXlfc3RydWN0KFVJbnQ2NCgzKSkpLAogICAgLy8gICAgIGV4cGVjdGVkX2J5dGVzWzI6XSwKICAgIC8vICAgICBhcHBfaWQ9YXBwLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MjU5NWI5NWEgLy8gbWV0aG9kICJjaGVja19zdGF0aWNfYXJyYXlfc3RydWN0KCh1aW50NjQsYWRkcmVzcylbM10sYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNDgKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuZGVsZXRlX2FwcGxpY2F0aW9uLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZGVsZXRlX2FwcGxpY2F0aW9uKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjEyNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLmFyYzRfY29udmVyc2lvbnMuY29udHJhY3QuVGVzdENvbnRyYWN0LnRlc3RfYXJyYXlfZHluYW1pY19lbmNvZGluZ1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnRlc3RfYXJyYXlfZHluYW1pY19lbmNvZGluZzoKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTUyCiAgICAvLyBhcHAgPSBhcmM0LmFyYzRfY3JlYXRlKENoZWNrQXBwKS5jcmVhdGVkX2FwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWNfMiAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzMgLy8gYmFzZTY0KENvRUJNUnRCQUhtQUJET3pTWjQyR2dDT0FRQmpNUmtVUkRFWVJJSU1CSTEyTDk4RUxUS2U0UVJxVGQ5ekJOYmd0N3dFNWNyTkJnU0pyMVY3QkViaGxyMEU4emlHMmdRbGxibGFCRDlWSm1zRWZTUUpSUVFEVWFuZU5ob0FqZ3dBRWdBZEFDZ0FNd0ErQUVrQVZBQmZBR29BZFFDQUFJc0FNUm1CQlJJeEdCQkRNUmtVTVJnVUVFTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk1RQVNRdz09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MjIwCiAgICAvLyByZXR1cm4gTXlEeW5TdHJ1Y3QodmFsdWUsIFR4bi5zZW5kZXIsIFR4bi5zZW5kZXIuYnl0ZXMpCiAgICB0eG4gU2VuZGVyCiAgICBkdXBuIDUKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTU0LTE1NgogICAgLy8gYXJyID0gSW1tdXRhYmxlQXJyYXkoCiAgICAvLyAgICAgbXlfZHluX3N0cnVjdChVSW50NjQoMSkpLCBteV9keW5fc3RydWN0KFVJbnQ2NCgyKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDMpKQogICAgLy8gKQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTU1CiAgICAvLyBteV9keW5fc3RydWN0KFVJbnQ2NCgxKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDIpKSwgbXlfZHluX3N0cnVjdChVSW50NjQoMykpCiAgICBpbnRjXzIgLy8gMQogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNTQtMTU2CiAgICAvLyBhcnIgPSBJbW11dGFibGVBcnJheSgKICAgIC8vICAgICBteV9keW5fc3RydWN0KFVJbnQ2NCgxKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDIpKSwgbXlfZHluX3N0cnVjdChVSW50NjQoMykpCiAgICAvLyApCiAgICBpdG9iCiAgICBkdXAKICAgIHVuY292ZXIgOAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MDAyMAogICAgdW5jb3ZlciA4CiAgICBjb25jYXQKICAgIHN3YXAKICAgIGJ5dGVjXzEgLy8gMHgwMDJhCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA2CiAgICArCiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE1NQogICAgLy8gbXlfZHluX3N0cnVjdChVSW50NjQoMSkpLCBteV9keW5fc3RydWN0KFVJbnQ2NCgyKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDMpKQogICAgaW50Y18zIC8vIDIKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTU0LTE1NgogICAgLy8gYXJyID0gSW1tdXRhYmxlQXJyYXkoCiAgICAvLyAgICAgbXlfZHluX3N0cnVjdChVSW50NjQoMSkpLCBteV9keW5fc3RydWN0KFVJbnQ2NCgyKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDMpKQogICAgLy8gKQogICAgaXRvYgogICAgZHVwCiAgICB1bmNvdmVyIDkKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDAwMjAKICAgIHVuY292ZXIgOQogICAgY29uY2F0CiAgICBzd2FwCiAgICBieXRlY18xIC8vIDB4MDAyYQogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWMgMjEgLy8gMHgwMDAzMDAwNgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICB1bmNvdmVyIDQKICAgICsKICAgIGRpZyA2CiAgICB1bmNvdmVyIDkKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDAwMjAKICAgIHVuY292ZXIgOQogICAgY29uY2F0CiAgICBzd2FwCiAgICBieXRlY18xIC8vIDB4MDAyYQogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTU4CiAgICAvLyBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDEpKSwKICAgIGludGNfMiAvLyAxCiAgICBjYWxsc3ViIG15X2R5bl9zdHJ1Y3RfYXJjNAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNTkKICAgIC8vIG15X2R5bl9zdHJ1Y3RfYXJjNChVSW50NjQoMikpLAogICAgaW50Y18zIC8vIDIKICAgIGNhbGxzdWIgbXlfZHluX3N0cnVjdF9hcmM0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE2MAogICAgLy8gbXlfZHluX3N0cnVjdF9hcmM0KFVJbnQ2NCgzKSksCiAgICBwdXNoaW50IDMgLy8gMwogICAgY2FsbHN1YiBteV9keW5fc3RydWN0X2FyYzQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTU3LTE2MQogICAgLy8gZXhwZWN0ZWRfYnl0ZXMgPSBhcmM0LkR5bmFtaWNBcnJheSgKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDEpKSwKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDIpKSwKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDMpKSwKICAgIC8vICkuYnl0ZXMKICAgIGRpZyAyCiAgICBsZW4KICAgIGludGNfMCAvLyA2CiAgICArCiAgICBkdXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlYyAyMSAvLyAweDAwMDMwMDA2CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAzCiAgICBsZW4KICAgIHVuY292ZXIgMgogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTYyCiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmNoZWNrX2R5bl9hcnJheV9keW5fc3RydWN0LCBhcnIsIGV4cGVjdGVkX2J5dGVzLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyA1CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIHB1c2hieXRlcyAweDNmNTUyNjZiIC8vIG1ldGhvZCAiY2hlY2tfZHluX2FycmF5X2R5bl9zdHJ1Y3QoKHVpbnQ2NCxhZGRyZXNzLGJ5dGVbXSlbXSxieXRlW10pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE2NQogICAgLy8gbXlfZHluX3N0cnVjdF9hcmM0KFVJbnQ2NCgxKSksCiAgICBpbnRjXzIgLy8gMQogICAgY2FsbHN1YiBteV9keW5fc3RydWN0X2FyYzQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTY2CiAgICAvLyBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDIpKSwKICAgIGludGNfMyAvLyAyCiAgICBjYWxsc3ViIG15X2R5bl9zdHJ1Y3RfYXJjNAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNjcKICAgIC8vIG15X2R5bl9zdHJ1Y3RfYXJjNChVSW50NjQoMykpLAogICAgcHVzaGludCAzIC8vIDMKICAgIGNhbGxzdWIgbXlfZHluX3N0cnVjdF9hcmM0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE2NC0xNjgKICAgIC8vIGV4cGVjdGVkX2J5dGVzID0gYXJjNC5TdGF0aWNBcnJheSgKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDEpKSwKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDIpKSwKICAgIC8vICAgICBteV9keW5fc3RydWN0X2FyYzQoVUludDY0KDMpKSwKICAgIC8vICkuYnl0ZXMKICAgIGRpZyAyCiAgICBsZW4KICAgIGludGNfMCAvLyA2CiAgICArCiAgICBkdXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlYyAyMiAvLyAweDAwMDYKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDMKICAgIGxlbgogICAgdW5jb3ZlciAyCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNjktMTc0CiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIENoZWNrQXBwLmNoZWNrX3N0YXRpY19hcnJheV9keW5fc3RydWN0LAogICAgLy8gICAgIChteV9keW5fc3RydWN0KFVJbnQ2NCgxKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDIpKSwgbXlfZHluX3N0cnVjdChVSW50NjQoMykpKSwKICAgIC8vICAgICBleHBlY3RlZF9ieXRlcywKICAgIC8vICAgICBhcHBfaWQ9YXBwLAogICAgLy8gKQogICAgaXR4bl9iZWdpbgogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToyMjAKICAgIC8vIHJldHVybiBNeUR5blN0cnVjdCh2YWx1ZSwgVHhuLnNlbmRlciwgVHhuLnNlbmRlci5ieXRlcykKICAgIHR4biBTZW5kZXIKICAgIGR1cG4gNQogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNzEKICAgIC8vIChteV9keW5fc3RydWN0KFVJbnQ2NCgxKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDIpKSwgbXlfZHluX3N0cnVjdChVSW50NjQoMykpKSwKICAgIHVuY292ZXIgOAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgwMDIwCiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWNfMSAvLyAweDAwMmEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDYKICAgICsKICAgIHVuY292ZXIgNwogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgwMDIwCiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWNfMSAvLyAweDAwMmEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjIDIyIC8vIDB4MDAwNgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICB1bmNvdmVyIDMKICAgICsKICAgIHVuY292ZXIgNwogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgwMDIwCiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWNfMSAvLyAweDAwMmEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE3MgogICAgLy8gZXhwZWN0ZWRfYnl0ZXMsCiAgICBkaWcgMQogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTY5LTE3NAogICAgLy8gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBDaGVja0FwcC5jaGVja19zdGF0aWNfYXJyYXlfZHluX3N0cnVjdCwKICAgIC8vICAgICAobXlfZHluX3N0cnVjdChVSW50NjQoMSkpLCBteV9keW5fc3RydWN0KFVJbnQ2NCgyKSksIG15X2R5bl9zdHJ1Y3QoVUludDY0KDMpKSksCiAgICAvLyAgICAgZXhwZWN0ZWRfYnl0ZXMsCiAgICAvLyAgICAgYXBwX2lkPWFwcCwKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDdkMjQwOTQ1IC8vIG1ldGhvZCAiY2hlY2tfc3RhdGljX2FycmF5X2R5bl9zdHJ1Y3QoKHVpbnQ2NCxhZGRyZXNzLGJ5dGVbXSlbM10sYnl0ZVtdKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNzYKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuZGVsZXRlX2FwcGxpY2F0aW9uLCBhcHBfaWQ9YXBwKQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZGVsZXRlX2FwcGxpY2F0aW9uKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBhcmM0X2NvbnZlcnNpb25zL2NvbnRyYWN0LnB5OjE1MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLmFyYzRfY29udmVyc2lvbnMuY29udHJhY3QuVGVzdENvbnRyYWN0LnRlc3RfYnl0ZXNfdG9fZml4ZWRbcm91dGluZ10oKSAtPiB2b2lkOgp0ZXN0X2J5dGVzX3RvX2ZpeGVkOgogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxODAKICAgIC8vIGFwcCA9IGFyYzQuYXJjNF9jcmVhdGUoQ2hlY2tBcHApLmNyZWF0ZWRfYXBwCiAgICBpdHhuX2JlZ2luCiAgICBieXRlY18yIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYnl0ZWNfMyAvLyBiYXNlNjQoQ29FQk1SdEJBSG1BQkRPelNaNDJHZ0NPQVFCak1Sa1VSREVZUklJTUJJMTJMOThFTFRLZTRRUnFUZDl6Qk5iZ3Q3d0U1Y3JOQmdTSnIxVjdCRWJobHIwRTh6aUcyZ1FsbGJsYUJEOVZKbXNFZlNRSlJRUURVYW5lTmhvQWpnd0FFZ0FkQUNnQU13QStBRWtBVkFCZkFHb0FkUUNBQUlzQU1SbUJCUkl4R0JCRE1Sa1VNUmdVRUVNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTmhvQ1Z3SUFFa00yR2dFMkdnSlhBZ0FTUXpZYUFUWWFBbGNDQUJKRE5ob0JOaG9DVndJQUVrTTJHZ0UyR2dKWEFnQVNRellhQVRZYUFsY0NBQkpETmhvQk5ob0NWd0lBRWtNMkdnRTJHZ0pYQWdBU1F6WWFBVFlhQWxjQ0FCSkROaG9CTVFBU1F3PT0pCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgc3dhcAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxODEKICAgIC8vIHNlbmRlciA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYnl0ZXMKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTgzCiAgICAvLyBpZiB3cm9uZ19zaXplOgogICAgYnogdGVzdF9ieXRlc190b19maXhlZF9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTg0CiAgICAvLyBzZW5kZXIgPSBzZW5kZXIgKyBzZW5kZXIKICAgIGRpZyAxCiAgICBkdXAKICAgIGNvbmNhdAogICAgYnVyeSAxCgp0ZXN0X2J5dGVzX3RvX2ZpeGVkX2FmdGVyX2lmX2Vsc2VANDoKICAgIGR1cAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxODYKICAgIC8vIGFyYzQuYWJpX2NhbGwoQ2hlY2tBcHAuY2hlY2tfc3RhdGljX2J5dGVzLCBzZW5kZXIsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCAzMiAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGRpZyAzCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgcHVzaGJ5dGVzIDB4MDM1MWE5ZGUgLy8gbWV0aG9kICJjaGVja19zdGF0aWNfYnl0ZXMoYnl0ZVszMl0pdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFyYzRfY29udmVyc2lvbnMvY29udHJhY3QucHk6MTg4CiAgICAvLyBhcmM0LmFiaV9jYWxsKENoZWNrQXBwLmRlbGV0ZV9hcHBsaWNhdGlvbiwgYXBwX2lkPWFwcCkKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgYnl0ZWMgNCAvLyBtZXRob2QgImRlbGV0ZV9hcHBsaWNhdGlvbigpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYXJjNF9jb252ZXJzaW9ucy9jb250cmFjdC5weToxNzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}