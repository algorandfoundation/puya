{
    "name": "TestContract",
    "structs": {},
    "methods": [
        {
            "name": "test_literal_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_uint64_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_static_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_dynamic_encoding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bytes_to_fixed",
            "args": [
                {
                    "type": "bool",
                    "name": "wrong_size"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        780
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        848
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        2184
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        2218
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}