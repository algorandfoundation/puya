main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "acc_ret()address" => block@4, method "asset_ret()uint64" => block@5, method "app_ret()uint64" => block@6, method "store(address,uint64,uint64)void" => block@7, method "store_apps(uint64[])void" => block@8, method "store_assets(uint64[])void" => block@9, method "store_accounts(address[])void" => block@10, method "return_apps()uint64[]" => block@11, method "return_assets()uint64[]" => block@12, method "return_accounts()address[]" => block@13, * => block@16}
    block@4: // acc_ret_route_L5
        test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]()
        goto block@16
    block@5: // asset_ret_route_L9
        test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]()
        goto block@16
    block@6: // app_ret_route_L13
        test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]()
        goto block@16
    block@7: // store_route_L17
        test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]()
        goto block@16
    block@8: // store_apps_route_L23
        test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]()
        goto block@16
    block@9: // store_assets_route_L27
        test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]()
        goto block@16
    block@10: // store_accounts_route_L31
        test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]()
        goto block@16
    block@11: // return_apps_route_L35
        test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]()
        goto block@16
    block@12: // return_assets_route_L39
        test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]()
        goto block@16
    block@13: // return_accounts_route_L43
        test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]()
        goto block@16
    block@16: // after_if_else_L4
        fail
    block@17: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]() -> void:
    block@0: // L5
        let tmp%0#1: account = (txn Sender)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%0#1)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]() -> void:
    block@0: // L9
        (log 0x151f7c7500000000000004d2)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]() -> void:
    block@0: // L13
        (log 0x151f7c7500000000000004d2)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]() -> void:
    block@0: // L17
        let acc#0: account = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len acc#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for uint8[32]
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let app#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let asset#0: uint64 = (btoi tmp%4#0)
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]() -> void:
    block@0: // L23
        let apps#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 apps#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len apps#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint64[])
        (app_global_put "apps" apps#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]() -> void:
    block@0: // L27
        let assets#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 assets#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len assets#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint64[])
        (app_global_put "assets" assets#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]() -> void:
    block@0: // L31
        let accounts#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 accounts#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len accounts#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[32][])
        (app_global_put "accounts" accounts#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]() -> void:
    block@0: // L35
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]() -> void:
    block@0: // L39
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]() -> void:
    block@0: // L43
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u