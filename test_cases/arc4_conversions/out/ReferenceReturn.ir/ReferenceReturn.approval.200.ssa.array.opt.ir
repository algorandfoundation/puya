main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@15, block@28, block@28, block@28, block@28, block@28, block@28, block@28, block@28, block@28, block@28][tmp%4#0] else goto block@28
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "acc_ret()address" => block@3, method "asset_ret()uint64" => block@4, method "app_ret()uint64" => block@5, method "store(address,uint64,uint64)void" => block@6, method "store_apps(uint64[])void" => block@7, method "store_assets(uint64[])void" => block@8, method "store_accounts(address[])void" => block@9, method "return_apps()uint64[]" => block@10, method "return_assets()uint64[]" => block@11, method "return_accounts()address[]" => block@12, * => block@14}
    block@3: // acc_ret_route_L5
        test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]()
        goto block@14
    block@4: // asset_ret_route_L9
        test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]()
        goto block@14
    block@5: // app_ret_route_L13
        test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]()
        goto block@14
    block@6: // store_route_L17
        test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]()
        goto block@14
    block@7: // store_apps_route_L23
        test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]()
        goto block@14
    block@8: // store_assets_route_L27
        test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]()
        goto block@14
    block@9: // store_accounts_route_L31
        test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]()
        goto block@14
    block@10: // return_apps_route_L35
        test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]()
        goto block@14
    block@11: // return_assets_route_L39
        test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]()
        goto block@14
    block@12: // return_accounts_route_L43
        test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]()
        goto block@14
    block@14: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@15: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@28: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]() -> void:
    block@0: // L5
        let tmp%0#1: account = (txn Sender)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%0#1)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]() -> void:
    block@0: // L9
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1234u)
        let tmp%2#0: bytes = 0x151f7c7500000000000004d2
        (log 0x151f7c7500000000000004d2)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]() -> void:
    block@0: // L13
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1234u)
        let tmp%2#0: bytes = 0x151f7c7500000000000004d2
        (log 0x151f7c7500000000000004d2)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]() -> void:
    block@0: // L17
        let acc#0: account = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]() -> void:
    block@0: // L23
        let apps#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "apps" apps#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]() -> void:
    block@0: // L27
        let assets#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        (app_global_put "assets" assets#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]() -> void:
    block@0: // L31
        let accounts#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        (app_global_put "accounts" accounts#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]() -> void:
    block@0: // L35
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]() -> void:
    block@0: // L39
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]() -> void:
    block@0: // L43
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u