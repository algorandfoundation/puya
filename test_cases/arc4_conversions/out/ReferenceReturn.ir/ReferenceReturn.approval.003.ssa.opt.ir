main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "acc_ret()address" => block@3, method "asset_ret()uint64" => block@4, method "app_ret()uint64" => block@5, method "store(account,application,asset)void" => block@6, method "store_apps(uint64[])void" => block@7, method "store_assets(uint64[])void" => block@8, method "store_accounts(address[])void" => block@9, method "return_apps()uint64[]" => block@10, method "return_assets()uint64[]" => block@11, method "return_accounts()address[]" => block@12, * => block@19}
    block@3: // acc_ret_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes[32] = test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@4: // asset_ret_route_L9
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        (log 0x151f7c7500000000000004d2)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@5: // app_ret_route_L13
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        (log 0x151f7c7500000000000004d2)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@6: // store_route_L17
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%23#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%24#0: bytes[32] = ((txnas Accounts) tmp%23#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%25#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let tmp%26#0: uint64 = ((txnas Applications) tmp%25#0)
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%27#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let tmp%28#0: uint64 = ((txnas Assets) tmp%27#0)
        test_cases.arc4_conversions.reference.ReferenceReturn.store(tmp%24#0, tmp%26#0, tmp%28#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@7: // store_apps_route_L23
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_encoded_uint64[]%0#0: encoded_uint64[] = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_apps(reinterpret_encoded_uint64[]%0#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@8: // store_assets_route_L27
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_encoded_uint64[]%1#0: encoded_uint64[] = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_assets(reinterpret_encoded_uint64[]%1#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@9: // store_accounts_route_L31
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_bytes[32][]%0#0: bytes[32][] = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts(reinterpret_bytes[32][]%0#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@10: // return_apps_route_L35
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let tmp%45#0: encoded_uint64[] = test_cases.arc4_conversions.reference.ReferenceReturn.return_apps()
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@11: // return_assets_route_L39
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let tmp%51#0: encoded_uint64[] = test_cases.arc4_conversions.reference.ReferenceReturn.return_assets()
        let tmp%52#0: bytes = (concat 0x151f7c75 tmp%51#0)
        (log tmp%52#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@12: // return_accounts_route_L43
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        let tmp%57#0: bytes[32][] = test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts()
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // bare_routing_L4
        let tmp%59#0: uint64 = (txn OnCompletion)
        goto tmp%59#0 ? block@19 : block@16
    block@16: // __algopy_default_create_L1
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (! tmp%60#0)
        (assert tmp%61#0) // can only call when creating
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@19: // after_if_else_L4
        let test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#11: bool = 0u
        goto block@20
    block@20: // after_inlined_test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#2 <- block@5, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#3 <- block@6, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#4 <- block@7, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#5 <- block@8, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#6 <- block@9, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#7 <- block@10, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#8 <- block@11, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#9 <- block@12, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#10 <- block@16, test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router__%0#11 <- block@19)
        return tmp%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret() -> bytes[32]:
    block@0: // L5
        let tmp%0#0: bytes[32] = (txn Sender)
        return tmp%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store(acc: bytes[32], app: uint64, asset: uint64) -> void:
    block@0: // L17
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_apps(apps: encoded_uint64[]) -> void:
    block@0: // L23
        (app_global_put "apps" apps#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_assets(assets: encoded_uint64[]) -> void:
    block@0: // L27
        (app_global_put "assets" assets#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts(accounts: bytes[32][]) -> void:
    block@0: // L31
        (app_global_put "accounts" accounts#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_apps() -> encoded_uint64[]:
    block@0: // L35
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        return maybe_value%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_assets() -> encoded_uint64[]:
    block@0: // L39
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        return maybe_value%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts() -> bytes[32][]:
    block@0: // L43
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        return maybe_value%0#0