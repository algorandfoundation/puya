{
    "hints": {
        "test_literal_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_arc4_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_uint64_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_static_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_dynamic_encoding()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_bytes_to_fixed(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TestContract",
        "methods": [
            {
                "name": "test_literal_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_arc4_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_uint64_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_static_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_dynamic_encoding",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_bytes_to_fixed",
                "args": [
                    {
                        "type": "bool",
                        "name": "wrong_size"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}