{
    "name": "CheckApp",
    "structs": {},
    "methods": [
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_dynamic_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_biguint",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_bool",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_dyn_array_uin64",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_static_array_uin64_3",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_dyn_array_struct",
            "args": [
                {
                    "type": "(uint64,address)[]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_static_array_struct",
            "args": [
                {
                    "type": "(uint64,address)[3]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_dyn_array_dyn_struct",
            "args": [
                {
                    "type": "(uint64,address,byte[])[]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_static_array_dyn_struct",
            "args": [
                {
                    "type": "(uint64,address,byte[])[3]",
                    "name": "value"
                },
                {
                    "type": "byte[]",
                    "name": "expected"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_static_bytes",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "bytes32"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        132
                    ],
                    "errorMessage": "OnCompletion must be DeleteApplication && can only call when not creating"
                },
                {
                    "pc": [
                        28
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        142
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        171,
                        204,
                        237,
                        266,
                        294,
                        330,
                        359,
                        394,
                        423,
                        555,
                        671,
                        686
                    ],
                    "errorMessage": "expected to encode correctly"
                },
                {
                    "pc": [
                        479,
                        597
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        463,
                        581
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        159,
                        179,
                        192,
                        212,
                        225,
                        254,
                        282,
                        302,
                        318,
                        347,
                        367,
                        382,
                        411,
                        432,
                        514,
                        541,
                        632,
                        659
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        276
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint64>"
                },
                {
                    "pc": [
                        166,
                        186,
                        199,
                        219,
                        232,
                        261,
                        289,
                        325,
                        354,
                        389,
                        418,
                        548,
                        666
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        535
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_conversions.contract.MyDynStructARC4>"
                },
                {
                    "pc": [
                        376
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.arc4_conversions.contract.MyStructARC4>"
                },
                {
                    "pc": [
                        341
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint64, 3>"
                },
                {
                    "pc": [
                        682
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        653
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<test_cases.arc4_conversions.contract.MyDynStructARC4, 3>"
                },
                {
                    "pc": [
                        405
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<test_cases.arc4_conversions.contract.MyStructARC4, 3>"
                },
                {
                    "pc": [
                        248
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        508,
                        626
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,uint8[32],(len+uint8[]))"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "invalid tail pointer for (len+(uint64,uint8[32],(len+uint8[]))[])"
                },
                {
                    "pc": [
                        589
                    ],
                    "errorMessage": "invalid tail pointer for (uint64,uint8[32],(len+uint8[]))[3]"
                },
                {
                    "pc": [
                        503,
                        621
                    ],
                    "errorMessage": "invalid tuple encoding"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAgABKDEbQQB7gAQzs0meNhoAjgEAYzEZFEQxGESCDASNdi/fBC0ynuEEak3fcwTW4Le8BOXKzQYEia9VewRG4Za9BPM4htoEJZW5WgQ/VSZrBH0kCUUEA1Gp3jYaAI4MABYAMwBUAHUAkgCuANIA7wESAS8BswInADEZgQUSMRgQRCRDMRkUMRgUEEQkQzYaAUkVgQgSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBSSNZIghLARUSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBSSNZIghLARUSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBSRWBQBJENhoCSSNZIghLARUSRFcCABJEJEM2GgFJFSQSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBSSNZgQgLIghLARUSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBSRWBGBJENhoCSSNZIghLARUSRFcCABJEJEM2GgFJI1klCyIISwEVEkQ2GgJJI1kiCEsBFRJEVwIAEkQkQzYaAUkVgXgSRDYaAkkjWSIISwEVEkRXAgASRCRDNhoBRwIjWUlOAiILTEkVTFcCACNJSwUMQQBLRwIiC0sDSU4DTFlJSwdJTgUSREwkCEsISwEJSwMVSwIiC0sFTFlPAk1PA08DTwJSSSVZSYEqEkRLARVSI1mBLAhPAghFBUUBQv+uSwMiCEsDEkQ2GgJJI1kiCEsBFRJEVwIASwYSRCRDNhoBgQYjSYEDDEEAS0cCIgtLBElOA0xZSUsFSU4FEkRMJAiBA0sBCUsDFUsCIgtLBUxZTwJNTwNPA08CUkklWUmBKhJESwEVUiNZgSwITwIIRQNFAUL/rksCSRVLAxJENhoCSSNZIghLARUSRFcCABJEJEM2GgFJFYEgEkQxABJEJEM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}