{
    "hints": {
        "delete_application()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "check_uint64(uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_dynamic_bytes(byte[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_string(string,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_biguint(uint512,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_bool(bool,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_dyn_array_uin64(uint64[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_static_array_uin64_3(uint64[3],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_dyn_array_struct((uint64,address)[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_static_array_struct((uint64,address)[3],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_static_bytes(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CheckApp",
        "methods": [
            {
                "name": "delete_application",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_dynamic_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_string",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_biguint",
                "args": [
                    {
                        "type": "uint512",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_bool",
                "args": [
                    {
                        "type": "bool",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_dyn_array_uin64",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_static_array_uin64_3",
                "args": [
                    {
                        "type": "uint64[3]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_dyn_array_struct",
                "args": [
                    {
                        "type": "(uint64,address)[]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_static_array_struct",
                "args": [
                    {
                        "type": "(uint64,address)[3]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_dyn_array_dyn_struct",
                "args": [
                    {
                        "type": "(uint64,address,byte[])[]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_static_array_dyn_struct",
                "args": [
                    {
                        "type": "(uint64,address,byte[])[3]",
                        "name": "value"
                    },
                    {
                        "type": "byte[]",
                        "name": "expected"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_static_bytes",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "bytes32"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}