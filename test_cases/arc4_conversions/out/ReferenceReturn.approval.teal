#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 0x151f7c7500000000000004d2 "apps" "assets" "accounts"
    // arc4_conversions/reference.py:9
    // @arc4.abimethod
    intc_0 // 1
    // arc4_conversions/reference.py:4
    // class ReferenceReturn(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@24
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0x6c7a1cb5 0xc8480f0c 0x37c0cbf2 0x2d018f8a 0x6728b1a1 0xce7e6cd3 0x0a37f6e1 0x4c894d7e 0x62ebcf89 0x924e778c // method "acc_ret()address", method "asset_ret()uint64", method "app_ret()uint64", method "store(address,uint64,uint64)void", method "store_apps(uint64[])void", method "store_assets(uint64[])void", method "store_accounts(address[])void", method "return_apps()uint64[]", method "return_assets()uint64[]", method "return_accounts()address[]"
    txna ApplicationArgs 0
    match acc_ret main_asset_ret_route@7 main_app_ret_route@8 store store_apps store_assets store_accounts return_apps return_assets return_accounts
    err

main_app_ret_route@8:
    // arc4_conversions/reference.py:13
    // @arc4.abimethod
    bytec_1 // 0x151f7c7500000000000004d2
    log
    return

main_asset_ret_route@7:
    // arc4_conversions/reference.py:9
    // @arc4.abimethod
    bytec_1 // 0x151f7c7500000000000004d2
    log
    return

main_bare_routing@24:
    // arc4_conversions/reference.py:4
    // class ReferenceReturn(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert
    txn ApplicationID
    !
    assert // can only call when creating
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]() -> void:
acc_ret:
    // arc4_conversions/reference.py:5
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    // arc4_conversions/reference.py:7
    // return Txn.sender
    txn Sender
    // arc4_conversions/reference.py:5
    // @arc4.abimethod
    concat
    log
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]() -> void:
store:
    // arc4_conversions/reference.py:17
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // arc4_conversions/reference.py:19
    // self.acc = acc
    pushbytes "acc"
    uncover 3
    app_global_put
    // arc4_conversions/reference.py:20
    // self.asset = asset
    pushbytes "asset"
    swap
    app_global_put
    // arc4_conversions/reference.py:21
    // self.app = app
    pushbytes "app"
    swap
    app_global_put
    // arc4_conversions/reference.py:17
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]() -> void:
store_apps:
    // arc4_conversions/reference.py:25
    // self.apps = apps
    bytec_2 // "apps"
    // arc4_conversions/reference.py:23
    // @arc4.abimethod
    txna ApplicationArgs 1
    // arc4_conversions/reference.py:25
    // self.apps = apps
    app_global_put
    // arc4_conversions/reference.py:23
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]() -> void:
store_assets:
    // arc4_conversions/reference.py:29
    // self.assets = assets
    bytec_3 // "assets"
    // arc4_conversions/reference.py:27
    // @arc4.abimethod
    txna ApplicationArgs 1
    // arc4_conversions/reference.py:29
    // self.assets = assets
    app_global_put
    // arc4_conversions/reference.py:27
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]() -> void:
store_accounts:
    // arc4_conversions/reference.py:33
    // self.accounts = accounts
    bytec 4 // "accounts"
    // arc4_conversions/reference.py:31
    // @arc4.abimethod
    txna ApplicationArgs 1
    // arc4_conversions/reference.py:33
    // self.accounts = accounts
    app_global_put
    // arc4_conversions/reference.py:31
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]() -> void:
return_apps:
    // arc4_conversions/reference.py:37
    // return self.apps
    intc_1 // 0
    bytec_2 // "apps"
    app_global_get_ex
    assert // check self.apps exists
    // arc4_conversions/reference.py:35
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]() -> void:
return_assets:
    // arc4_conversions/reference.py:41
    // return self.assets
    intc_1 // 0
    bytec_3 // "assets"
    app_global_get_ex
    assert // check self.assets exists
    // arc4_conversions/reference.py:39
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]() -> void:
return_accounts:
    // arc4_conversions/reference.py:45
    // return self.accounts
    intc_1 // 0
    bytec 4 // "accounts"
    app_global_get_ex
    assert // check self.accounts exists
    // arc4_conversions/reference.py:43
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
