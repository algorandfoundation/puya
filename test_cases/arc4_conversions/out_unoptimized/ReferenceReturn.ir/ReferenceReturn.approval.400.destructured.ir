main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@15, 2u => block@18, 3u => block@19, 4u => block@20, 5u => block@21, 6u => block@22, 7u => block@23, 8u => block@24, 9u => block@25, 10u => block@26, 11u => block@27, * => block@28}
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "acc_ret()address" => block@3, method "asset_ret()uint64" => block@4, method "app_ret()uint64" => block@5, method "store(address,uint64,uint64)void" => block@6, method "store_apps(uint64[])void" => block@7, method "store_assets(uint64[])void" => block@8, method "store_accounts(address[])void" => block@9, method "return_apps()uint64[]" => block@10, method "return_assets()uint64[]" => block@11, method "return_accounts()address[]" => block@12, * => block@13}
    block@3: // acc_ret_route_L5
        test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]()
        goto block@14
    block@4: // asset_ret_route_L9
        test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]()
        goto block@14
    block@5: // app_ret_route_L13
        test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]()
        goto block@14
    block@6: // store_route_L17
        test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]()
        goto block@14
    block@7: // store_apps_route_L23
        test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]()
        goto block@14
    block@8: // store_assets_route_L27
        test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]()
        goto block@14
    block@9: // store_accounts_route_L31
        test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]()
        goto block@14
    block@10: // return_apps_route_L35
        test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]()
        goto block@14
    block@11: // return_assets_route_L39
        test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]()
        goto block@14
    block@12: // return_accounts_route_L43
        test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]()
        goto block@14
    block@13: // switch_case_default_L4
        goto block@14
    block@14: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@15: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@16 : block@17
    block@16: // __algopy_default_create_L1
        goto block@30
    block@30: // L1
        goto block@31
    block@31: // after_inlined_test_cases.arc4_conversions.reference.ReferenceReturn.__algopy_default_create_L1
        exit 1u
    block@17: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@18: // switch_case_2_L4
        goto block@28
    block@19: // switch_case_3_L4
        goto block@28
    block@20: // switch_case_4_L4
        goto block@28
    block@21: // switch_case_5_L4
        goto block@28
    block@22: // switch_case_6_L4
        goto block@28
    block@23: // switch_case_7_L4
        goto block@28
    block@24: // switch_case_8_L4
        goto block@28
    block@25: // switch_case_9_L4
        goto block@28
    block@26: // switch_case_10_L4
        goto block@28
    block@27: // switch_case_11_L4
        goto block@28
    block@28: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@29: // after_inlined_test_cases.arc4_conversions.reference.ReferenceReturn.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret[routing]() -> void:
    block@0: // L5
        let tmp%0#0: account = test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret()
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret[routing]() -> void:
    block@0: // L9
        let tmp%0#0: uint64 = test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.app_ret[routing]() -> void:
    block@0: // L13
        let tmp%0#0: uint64 = test_cases.arc4_conversions.reference.ReferenceReturn.app_ret()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: account = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.arc4_conversions.reference.ReferenceReturn.store(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_apps[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_apps(reinterpret_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_assets[routing]() -> void:
    block@0: // L27
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_assets(reinterpret_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts(reinterpret_Encoded(len+uint8[32][])%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_apps[routing]() -> void:
    block@0: // L35
        let tmp%0#0: Encoded(len+uint64[]) = test_cases.arc4_conversions.reference.ReferenceReturn.return_apps()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_assets[routing]() -> void:
    block@0: // L39
        let tmp%0#0: Encoded(len+uint64[]) = test_cases.arc4_conversions.reference.ReferenceReturn.return_assets()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts[routing]() -> void:
    block@0: // L43
        let tmp%0#0: Encoded(len+uint8[32][]) = test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.acc_ret() -> account:
    block@0: // L5
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.asset_ret() -> uint64:
    block@0: // L9
        return 1234u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.app_ret() -> uint64:
    block@0: // L13
        return 1234u

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store(acc: account, app: uint64, asset: uint64) -> void:
    block@0: // L17
        (app_global_put "acc" acc#0)
        (app_global_put "asset" asset#0)
        (app_global_put "app" app#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_apps(apps: Encoded(len+uint64[])) -> void:
    block@0: // L23
        (app_global_put "apps" apps#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_assets(assets: Encoded(len+uint64[])) -> void:
    block@0: // L27
        (app_global_put "assets" assets#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.store_accounts(accounts: Encoded(len+uint8[32][])) -> void:
    block@0: // L31
        (app_global_put "accounts" accounts#0)
        return 

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_apps() -> Encoded(len+uint64[]):
    block@0: // L35
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "apps")
        (assert maybe_exists%0#0) // check self.apps exists
        return maybe_value%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_assets() -> Encoded(len+uint64[]):
    block@0: // L39
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "assets")
        (assert maybe_exists%0#0) // check self.assets exists
        return maybe_value%0#0

subroutine test_cases.arc4_conversions.reference.ReferenceReturn.return_accounts() -> Encoded(len+uint8[32][]):
    block@0: // L43
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "accounts")
        (assert maybe_exists%0#0) // check self.accounts exists
        return maybe_value%0#0