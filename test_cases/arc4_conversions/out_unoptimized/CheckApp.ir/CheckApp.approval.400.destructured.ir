main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L230
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@17, 2u => block@20, 3u => block@21, 4u => block@22, 5u => block@23, 6u => block@24, 7u => block@25, 8u => block@26, 9u => block@27, 10u => block@28, 11u => block@32, * => block@33}
    block@2: // switch_case_0_L230
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "check_uint64(uint64,byte[])void" => block@3, method "check_dynamic_bytes(byte[],byte[])void" => block@4, method "check_string(string,byte[])void" => block@5, method "check_biguint(uint512,byte[])void" => block@6, method "check_bool(bool,byte[])void" => block@7, method "check_dyn_array_uin64(uint64[],byte[])void" => block@8, method "check_static_array_uin64_3(uint64[3],byte[])void" => block@9, method "check_dyn_array_struct((uint64,address)[],byte[])void" => block@10, method "check_static_array_struct((uint64,address)[3],byte[])void" => block@11, method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void" => block@12, method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void" => block@13, method "check_static_bytes(byte[32])void" => block@14, * => block@15}
    block@3: // check_uint64_route_L235
        test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]()
        goto block@16
    block@4: // check_dynamic_bytes_route_L239
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]()
        goto block@16
    block@5: // check_string_route_L243
        test_cases.arc4_conversions.contract.CheckApp.check_string[routing]()
        goto block@16
    block@6: // check_biguint_route_L247
        test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]()
        goto block@16
    block@7: // check_bool_route_L251
        test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]()
        goto block@16
    block@8: // check_dyn_array_uin64_route_L255
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]()
        goto block@16
    block@9: // check_static_array_uin64_3_route_L261
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]()
        goto block@16
    block@10: // check_dyn_array_struct_route_L267
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]()
        goto block@16
    block@11: // check_static_array_struct_route_L273
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]()
        goto block@16
    block@12: // check_dyn_array_dyn_struct_route_L279
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]()
        goto block@16
    block@13: // check_static_array_dyn_struct_route_L285
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]()
        goto block@16
    block@14: // check_static_bytes_route_L291
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]()
        goto block@16
    block@15: // switch_case_default_L230
        goto block@16
    block@16: // switch_case_next_L230
        fail // this contract does not implement the given ABI method for call NoOp
    block@17: // switch_case_1_L230
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@18 : block@19
    block@18: // __algopy_default_create_L1
        goto block@35
    block@35: // L1
        goto block@36
    block@36: // after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create_L1
        exit 1u
    block@19: // else_body_L230
        fail // this contract does not implement the given ABI method for create NoOp
    block@20: // switch_case_2_L230
        goto block@33
    block@21: // switch_case_3_L230
        goto block@33
    block@22: // switch_case_4_L230
        goto block@33
    block@23: // switch_case_5_L230
        goto block@33
    block@24: // switch_case_6_L230
        goto block@33
    block@25: // switch_case_7_L230
        goto block@33
    block@26: // switch_case_8_L230
        goto block@33
    block@27: // switch_case_9_L230
        goto block@33
    block@28: // switch_case_10_L230
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "delete_application()void" => block@29, * => block@30}
    block@29: // delete_application_route_L231
        test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]()
        goto block@31
    block@30: // switch_case_default_L230
        goto block@31
    block@31: // switch_case_next_L230
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@32: // switch_case_11_L230
        goto block@33
    block@33: // switch_case_default_L230
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@34: // after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]() -> void:
    block@0: // L231
        test_cases.arc4_conversions.contract.CheckApp.delete_application()
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]() -> void:
    block@0: // L235
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_uint64(reinterpret_Encoded(uint64)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]() -> void:
    block@0: // L239
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(reinterpret_Encoded(len+uint8[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string[routing]() -> void:
    block@0: // L243
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_string(reinterpret_Encoded(len+utf8[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]() -> void:
    block@0: // L247
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_biguint(reinterpret_Encoded(uint512)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]() -> void:
    block@0: // L251
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_bool(reinterpret_Encoded(bool8)%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]() -> void:
    block@0: // L255
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(reinterpret_Encoded(len+uint64[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]() -> void:
    block@0: // L261
        let reinterpret_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(reinterpret_Encoded(uint64[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]() -> void:
    block@0: // L267
        let reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0: Encoded(len+(uint64,uint8[32])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]() -> void:
    block@0: // L273
        let reinterpret_Encoded((uint64,uint8[32])[3])%0#0: Encoded((uint64,uint8[32])[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(reinterpret_Encoded((uint64,uint8[32])[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]() -> void:
    block@0: // L279
        let reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]() -> void:
    block@0: // L285
        let reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]() -> void:
    block@0: // L291
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(reinterpret_Encoded(uint8[32])%0#0)
        exit 1u

subroutine test_cases.arc4_conversions.contract.CheckApp.delete_application() -> void:
    block@0: // L231
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: Encoded(uint64), expected: bytes) -> void:
    block@0: // L235
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: Encoded(len+uint8[]), expected: bytes) -> void:
    block@0: // L239
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_string(value: Encoded(len+utf8[]), expected: bytes) -> void:
    block@0: // L243
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: Encoded(uint512), expected: bytes) -> void:
    block@0: // L247
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_bool(value: Encoded(bool8), expected: bytes) -> void:
    block@0: // L251
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: Encoded(len+uint64[]), expected: bytes) -> void:
    block@0: // L255
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: Encoded(uint64[3]), expected: bytes) -> void:
    block@0: // L261
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: Encoded(len+(uint64,uint8[32])[]), expected: bytes) -> void:
    block@0: // L267
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: Encoded((uint64,uint8[32])[3]), expected: bytes) -> void:
    block@0: // L273
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]), expected: bytes) -> void:
    block@0: // L279
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: Encoded((uint64,uint8[32],(len+uint8[]))[3]), expected: bytes) -> void:
    block@0: // L285
        let tmp%0#0: bool = (== value#0 expected#0)
        (assert tmp%0#0) // expected to encode correctly
        return 

subroutine test_cases.arc4_conversions.contract.CheckApp.check_static_bytes(bytes32: Encoded(uint8[32])) -> void:
    block@0: // L291
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== bytes32#0 tmp%0#0)
        (assert tmp%1#0) // expected to encode correctly
        return 