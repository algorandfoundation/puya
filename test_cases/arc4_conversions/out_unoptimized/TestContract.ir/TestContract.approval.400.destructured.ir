main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L22
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@12
    block@2: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_literal_encoding()void" => block@3, method "test_native_encoding()void" => block@4, method "test_arc4_encoding()void" => block@5, method "test_array_uint64_encoding()void" => block@6, method "test_array_static_encoding()void" => block@7, method "test_array_dynamic_encoding()void" => block@8, method "test_bytes_to_fixed(bool)void" => block@9, * => block@10}
    block@3: // test_literal_encoding_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_literal_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@4: // test_native_encoding_route_L46
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_native_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@5: // test_arc4_encoding_route_L74
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@6: // test_array_uint64_encoding_route_L102
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@7: // test_array_static_encoding_route_L126
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@8: // test_array_dynamic_encoding_route_L150
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding()
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@9: // test_bytes_to_fixed_route_L178
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%31#0: bool = aggregate%get_bit%0#0
        test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed(tmp%31#0)
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@10: // switch_case_default_L22
        goto block@11
    block@11: // switch_case_next_L22
        goto block@16
    block@12: // bare_routing_L22
        let tmp%32#0: uint64 = (txn OnCompletion)
        switch tmp%32#0 {0u => block@13, * => block@14}
    block@13: // __algopy_default_create_L1
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (== tmp%33#0 0u)
        (assert tmp%34#0) // can only call when creating
        goto block@18
    block@18: // L1
        goto block@19
    block@19: // after_inlined_test_cases.arc4_conversions.contract.TestContract.__algopy_default_create_L1
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@14: // switch_case_default_L22
        goto block@15
    block@15: // switch_case_next_L22
        goto block@16
    block@16: // after_if_else_L22
        let test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router__%0#0
        goto block@17
    block@17: // after_inlined_test_cases.arc4_conversions.contract.TestContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.arc4_conversions.contract.my_struct(value: uint64) -> <uint64, account>:
    block@0: // L201
        let tmp%0#0: account = (txn Sender)
        return value#0 tmp%0#0

subroutine test_cases.arc4_conversions.contract.my_dyn_struct(value: uint64) -> <uint64, account, bytes>:
    block@0: // L218
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: account = (txn Sender)
        return value#0 tmp%0#0 tmp%1#0

subroutine test_cases.arc4_conversions.contract.my_dyn_struct_arc4(value: uint64) -> Encoded(uint64,uint8[32],(len+uint8[])):
    block@0: // L223
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%1#0: account = (txn Sender)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 reinterpret_Encoded(uint8[32])%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 tmp%2#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%0#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%0#0
        let tmp%3#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%0#0
        return tmp%3#0

subroutine test_cases.arc4_conversions.contract.TestContract.test_literal_encoding() -> void:
    block@0: // L23
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L25
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let tmp%1#0: bytes = (bzero 8u)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L28
        itxn_submit
        itxn_begin
        let aggregate%length%1#0: uint64 = (len 0x48656c6c6f20576f726c64)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 0x48656c6c6f20576f726c64)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let aggregate%length%2#0: uint64 = (len 0x000b48656c6c6f20576f726c64)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 0x000b48656c6c6f20576f726c64)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%4#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%3#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%4#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L31
        itxn_submit
        itxn_begin
        let aggregate%length%3#0: uint64 = (len "Hello World")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Hello World")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%4#0: uint64 = (len 0x000b48656c6c6f20576f726c64)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 0x000b48656c6c6f20576f726c64)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let tmp%6#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%5#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%6#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L36
        itxn_submit
        itxn_begin
        let aggregate%value_len%0#0: uint64 = (len 0b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| 0b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%7#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        let tmp%8#0: bytes = (bzero 64u)
        let aggregate%length%5#0: uint64 = (len tmp%8#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%8#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%4#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: Encoded(uint512) = tmp%7#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%9#0
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L39
        itxn_submit
        itxn_begin
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%10#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%6#0: uint64 = (len 0x80)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 0x80)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let tmp%11#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%5#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_1#0: Encoded(bool8) = tmp%10#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%11#0
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L42
        itxn_submit
        itxn_begin
        let inner_txn_params%6%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%6%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L44
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_native_encoding() -> void:
    block@0: // L46
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L48
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (bzero 8u)
        let aggregate%length%0#0: uint64 = (len tmp%4#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%4#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%5#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64) = tmp%3#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%5#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L51
        itxn_submit
        itxn_begin
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        let aggregate%length%1#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%6#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        let tmp%9#0: bytes = (concat 0x0004 tmp%8#0)
        let aggregate%length%2#0: uint64 = (len tmp%9#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%9#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%10#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%7#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%10#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L54
        itxn_submit
        itxn_begin
        let aggregate%length%3#0: uint64 = (len "Hello World")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Hello World")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%11#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%4#0: uint64 = (len 0x000b48656c6c6f20576f726c64)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 0x000b48656c6c6f20576f726c64)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let tmp%12#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%11#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%12#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L62
        itxn_submit
        itxn_begin
        let aggregate%value_len%0#0: uint64 = (len 0b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| 0b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%13#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        let tmp%14#0: bytes = (bzero 64u)
        let aggregate%length%5#0: uint64 = (len tmp%14#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%14#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let tmp%15#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%4#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: Encoded(uint512) = tmp%13#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%15#0
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L67
        itxn_submit
        itxn_begin
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: bool = (== tmp%16#0 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%17#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%18#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%6#0: uint64 = (len 0x80)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 0x80)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let tmp%19#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%5#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_1#0: Encoded(bool8) = tmp%18#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%19#0
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L70
        itxn_submit
        itxn_begin
        let inner_txn_params%6%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%6%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L72
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_arc4_encoding() -> void:
    block@0: // L74
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L76
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let tmp%1#0: bytes = (bzero 8u)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_uint64(uint64,byte[])void")
        ((itxn_field ApplicationArgs) 0x0000000000000000)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L79
        itxn_submit
        itxn_begin
        let tmp%3#0: bytes = (txna ApplicationArgs 0)
        let aggregate%length%1#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%3#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%4#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        let tmp%6#0: bytes = (concat 0x0004 tmp%5#0)
        let aggregate%length%2#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%6#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%7#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%4#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%7#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dynamic_bytes(byte[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L82
        itxn_submit
        itxn_begin
        let aggregate%length%3#0: uint64 = (len "Hello World")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Hello World")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%4#0: uint64 = (len 0x000b48656c6c6f20576f726c64)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 0x000b48656c6c6f20576f726c64)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%8#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%9#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_string(string,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L90
        itxn_submit
        itxn_begin
        let tmp%10#0: bytes = (bzero 64u)
        let aggregate%length%5#0: uint64 = (len tmp%10#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%10#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let tmp%11#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%4#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%11#0
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_biguint(uint512,byte[])void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L95
        itxn_submit
        itxn_begin
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%13#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%14#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%6#0: uint64 = (len 0x80)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 0x80)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let tmp%15#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%5#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_1#0: Encoded(bool8) = tmp%14#0
        let inner_txn_params%5%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%15#0
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_bool(bool,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L98
        itxn_submit
        itxn_begin
        let inner_txn_params%6%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%6%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L100
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_uint64_encoding() -> void:
    block@0: // L102
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L104
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 1u)
        let tmp%4#0: uint64 = (txn NumAppArgs)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%5#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        let tmp%6#0: bytes = (bzero 7u)
        let tmp%7#0: bytes = (concat 0x0003 tmp%6#0)
        let tmp%8#0: bytes = (concat tmp%7#0 0x01)
        let tmp%9#0: bytes = (bzero 7u)
        let tmp%10#0: bytes = (concat tmp%8#0 tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 0x02)
        let tmp%12#0: bytes = (bzero 7u)
        let tmp%13#0: bytes = (concat tmp%11#0 tmp%12#0)
        let tmp%14#0: bytes = (concat tmp%13#0 0x03)
        let expected_bytes#0: bytes = tmp%14#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 expected_bytes#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%15#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+uint64[]) = arr#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%15#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L110
        itxn_submit
        itxn_begin
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 1u)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#0: uint64 = (+ tmp%19#0 2u)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%16#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%20#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%5#0
        let tmp%21#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let aggregate%length%1#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 expected_bytes#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%22#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+uint64[]) = tmp%21#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%22#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_uin64(uint64[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L111
        itxn_submit
        itxn_begin
        let tmp%23#0: uint64 = (txn NumAppArgs)
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let tmp%25#0: uint64 = (+ tmp%24#0 1u)
        let tmp%26#0: uint64 = (txn NumAppArgs)
        let tmp%27#0: uint64 = (+ tmp%26#0 2u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%25#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%27#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = aggregate%head%8#0
        let tmp%28#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#0
        let length%0#0: uint64 = (len expected_bytes#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%0#0)
        let bounded_index%0#0: uint64 = (select 2u length%0#0 is_out_of_bounds%0#0)
        let tmp%29#0: bytes = (substring3 expected_bytes#0 bounded_index%0#0 length%0#0)
        let aggregate%length%2#0: uint64 = (len tmp%29#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%29#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%30#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(uint64[3]) = tmp%28#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%30#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_static_array_uin64_3(uint64[3],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L117
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L124
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_static_encoding() -> void:
    block@0: // L126
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L128
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        let (tmp%1#0: uint64, tmp%2#0: account) = test_cases.arc4_conversions.contract.my_struct(1u)
        let (tmp%3#0: uint64, tmp%4#0: account) = test_cases.arc4_conversions.contract.my_struct(2u)
        let (tmp%5#0: uint64, tmp%6#0: account) = test_cases.arc4_conversions.contract.my_struct(3u)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%2#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint8[32])%0#0: Encoded(uint64,uint8[32]) = aggregate%head%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64,uint8[32])%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%as_Encoded(uint64,uint8[32])%1#0: Encoded(uint64,uint8[32]) = aggregate%head%4#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64,uint8[32])%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%5#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = tmp%6#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint8[32])%2#0)
        let aggregate%as_Encoded(uint64,uint8[32])%2#0: Encoded(uint64,uint8[32]) = aggregate%head%7#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64,uint8[32])%2#0)
        let aggregate%as_Encoded(len+(uint64,uint8[32])[])%0#0: Encoded(len+(uint64,uint8[32])[]) = aggregate%head%8#0
        let encoded_array%0#0: Encoded(len+(uint64,uint8[32])[]) = aggregate%as_Encoded(len+(uint64,uint8[32])[])%0#0
        let arr#0: Encoded(len+(uint64,uint8[32])[]) = encoded_array%0#0
        let tmp%7#0: bytes = (bzero 7u)
        let tmp%8#0: bytes = (concat tmp%7#0 0x01)
        let tmp%9#0: bytes = (concat 0x0003 tmp%8#0)
        let tmp%10#0: account = (txn Sender)
        let tmp%11#0: bytes = (concat tmp%9#0 tmp%10#0)
        let tmp%12#0: bytes = (bzero 7u)
        let tmp%13#0: bytes = (concat tmp%12#0 0x02)
        let tmp%14#0: bytes = (concat tmp%11#0 tmp%13#0)
        let tmp%15#0: account = (txn Sender)
        let tmp%16#0: bytes = (concat tmp%14#0 tmp%15#0)
        let tmp%17#0: bytes = (bzero 7u)
        let tmp%18#0: bytes = (concat tmp%17#0 0x03)
        let tmp%19#0: bytes = (concat tmp%16#0 tmp%18#0)
        let tmp%20#0: account = (txn Sender)
        let tmp%21#0: bytes = (concat tmp%19#0 tmp%20#0)
        let expected_bytes#0: bytes = tmp%21#0
        itxn_begin
        let aggregate%length%0#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 expected_bytes#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%22#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+(uint64,uint8[32])[]) = arr#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%22#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_struct((uint64,address)[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L140
        itxn_submit
        itxn_begin
        let (tmp%23#0: uint64, tmp%24#0: account) = test_cases.arc4_conversions.contract.my_struct(1u)
        let (tmp%25#0: uint64, tmp%26#0: account) = test_cases.arc4_conversions.contract.my_struct(2u)
        let (tmp%27#0: uint64, tmp%28#0: account) = test_cases.arc4_conversions.contract.my_struct(3u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%3#0: Encoded(uint8[32]) = tmp%24#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint8[32])%3#0)
        let aggregate%as_Encoded(uint64,uint8[32])%3#0: Encoded(uint64,uint8[32]) = aggregate%head%10#0
        let aggregate%head%11#0: bytes = (concat 0x aggregate%as_Encoded(uint64,uint8[32])%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%25#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint8[32])%4#0: Encoded(uint8[32]) = tmp%26#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint8[32])%4#0)
        let aggregate%as_Encoded(uint64,uint8[32])%4#0: Encoded(uint64,uint8[32]) = aggregate%head%13#0
        let aggregate%head%14#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64,uint8[32])%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%27#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%15#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint8[32])%5#0: Encoded(uint8[32]) = tmp%28#0
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%as_Encoded(uint8[32])%5#0)
        let aggregate%as_Encoded(uint64,uint8[32])%5#0: Encoded(uint64,uint8[32]) = aggregate%head%16#0
        let aggregate%head%17#0: bytes = (concat aggregate%head%14#0 aggregate%as_Encoded(uint64,uint8[32])%5#0)
        let aggregate%as_Encoded((uint64,uint8[32])[3])%0#0: Encoded((uint64,uint8[32])[3]) = aggregate%head%17#0
        let tmp%29#0: Encoded((uint64,uint8[32])[3]) = aggregate%as_Encoded((uint64,uint8[32])[3])%0#0
        let length%0#0: uint64 = (len expected_bytes#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%0#0)
        let bounded_index%0#0: uint64 = (select 2u length%0#0 is_out_of_bounds%0#0)
        let tmp%30#0: bytes = (substring3 expected_bytes#0 bounded_index%0#0 length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%30#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%30#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%31#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint8[32])[3]) = tmp%29#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%31#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_static_array_struct((uint64,address)[3],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L141
        itxn_submit
        itxn_begin
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L148
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_array_dynamic_encoding() -> void:
    block@0: // L150
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L152
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        let (tmp%1#0: uint64, tmp%2#0: account, tmp%3#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(1u)
        let (tmp%4#0: uint64, tmp%5#0: account, tmp%6#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(2u)
        let (tmp%7#0: uint64, tmp%8#0: account, tmp%9#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(3u)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%2#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%3#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%0#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%0#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 6u aggregate%data_length%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%length%1#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%6#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%1#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%1#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%1#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%3#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = tmp%8#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint8[32])%2#0)
        let aggregate%length%2#0: uint64 = (len tmp%9#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%9#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%8#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%offset_as_uint16%4#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%2#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%2#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%7#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%0#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%1#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%2#0)
        let aggregate%as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = aggregate%concat%5#0
        let encoded_array%0#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = aggregate%as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0
        let arr#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = encoded_array%0#0
        let tmp%10#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%11#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%12#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let aggregate%as_bytes%10#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%12#0: bytes = (concat aggregate%len_u16%1#0 aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len tmp%10#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 6u aggregate%data_length%6#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len tmp%11#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%6#0 aggregate%data_length%7#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%7#0)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%offset_as_uint16%8#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%14#0 tmp%10#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 tmp%11#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%concat%7#0 tmp%12#0)
        let aggregate%as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%1#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = aggregate%concat%8#0
        let encoded_array%1#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = aggregate%as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%1#0
        let expected_bytes#0: bytes = encoded_array%1#0
        itxn_begin
        let aggregate%length%3#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 expected_bytes#0)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let tmp%13#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+(uint64,uint8[32],(len+uint8[]))[]) = arr#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%13#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L162
        itxn_submit
        let tmp%14#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(1u)
        let tmp%15#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(2u)
        let tmp%16#0: Encoded(uint64,uint8[32],(len+uint8[])) = test_cases.arc4_conversions.contract.my_dyn_struct_arc4(3u)
        let aggregate%as_bytes%15#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%head%15#0: bytes = (concat 0x aggregate%offset_as_uint16%9#0)
        let aggregate%data_length%9#0: uint64 = (len tmp%14#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 6u aggregate%data_length%9#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len tmp%15#0)
        let aggregate%current_tail_offset%10#0: uint64 = (+ aggregate%current_tail_offset%9#0 aggregate%data_length%10#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%current_tail_offset%10#0)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%offset_as_uint16%11#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%head%17#0 tmp%14#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%concat%9#0 tmp%15#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%concat%10#0 tmp%16#0)
        let aggregate%as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = aggregate%concat%11#0
        let encoded_array%2#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = aggregate%as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0
        let expected_bytes#0: bytes = encoded_array%2#0
        itxn_begin
        let (tmp%17#0: uint64, tmp%18#0: account, tmp%19#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(1u)
        let (tmp%20#0: uint64, tmp%21#0: account, tmp%22#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(2u)
        let (tmp%23#0: uint64, tmp%24#0: account, tmp%25#0: bytes) = test_cases.arc4_conversions.contract.my_dyn_struct(3u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%18#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%3#0: Encoded(uint8[32]) = tmp%18#0
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(uint8[32])%3#0)
        let aggregate%length%4#0: uint64 = (len tmp%19#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 tmp%19#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let aggregate%as_bytes%19#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 aggregate%offset_as_uint16%12#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%head%20#0 aggregate%as_Encoded(len+uint8[])%4#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%3#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%12#0
        let aggregate%as_bytes%20#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%head%21#0: bytes = (concat 0x aggregate%offset_as_uint16%13#0)
        let aggregate%data_length%13#0: uint64 = (len aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%3#0)
        let aggregate%current_tail_offset%13#0: uint64 = (+ 6u aggregate%data_length%13#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%20#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%22#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint8[32])%4#0: Encoded(uint8[32]) = tmp%21#0
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 aggregate%as_Encoded(uint8[32])%4#0)
        let aggregate%length%5#0: uint64 = (len tmp%22#0)
        let aggregate%as_bytes%21#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%22#0)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let aggregate%as_bytes%22#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%22#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%offset_as_uint16%14#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%head%24#0 aggregate%as_Encoded(len+uint8[])%5#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%4#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%13#0
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%current_tail_offset%13#0)
        let aggregate%offset_as_uint16%15#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%21#0 aggregate%offset_as_uint16%15#0)
        let aggregate%data_length%15#0: uint64 = (len aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%4#0)
        let aggregate%current_tail_offset%15#0: uint64 = (+ aggregate%current_tail_offset%13#0 aggregate%data_length%15#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%26#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint8[32])%5#0: Encoded(uint8[32]) = tmp%24#0
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%as_Encoded(uint8[32])%5#0)
        let aggregate%length%6#0: uint64 = (len tmp%25#0)
        let aggregate%as_bytes%24#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%24#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 tmp%25#0)
        let aggregate%as_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let aggregate%as_bytes%25#0: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%16#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%head%28#0: bytes = (concat aggregate%head%27#0 aggregate%offset_as_uint16%16#0)
        let aggregate%concat%14#0: bytes = (concat aggregate%head%28#0 aggregate%as_Encoded(len+uint8[])%6#0)
        let aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%5#0: Encoded(uint64,uint8[32],(len+uint8[])) = aggregate%concat%14#0
        let aggregate%as_bytes%26#0: bytes[8] = (itob aggregate%current_tail_offset%15#0)
        let aggregate%offset_as_uint16%17#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%head%29#0: bytes = (concat aggregate%head%25#0 aggregate%offset_as_uint16%17#0)
        let aggregate%concat%15#0: bytes = (concat aggregate%head%29#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%3#0)
        let aggregate%concat%16#0: bytes = (concat aggregate%concat%15#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%4#0)
        let aggregate%concat%17#0: bytes = (concat aggregate%concat%16#0 aggregate%as_Encoded(uint64,uint8[32],(len+uint8[]))%5#0)
        let aggregate%as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%1#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = aggregate%concat%17#0
        let tmp%26#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = aggregate%as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%1#0
        let aggregate%length%7#0: uint64 = (len expected_bytes#0)
        let aggregate%as_bytes%27#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%27#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 expected_bytes#0)
        let aggregate%as_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = aggregate%encoded_value%7#0
        let tmp%27#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%7#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint8[32],(len+uint8[]))[3]) = tmp%26#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%27#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L169
        itxn_submit
        itxn_begin
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L176
        itxn_submit
        return 

subroutine test_cases.arc4_conversions.contract.TestContract.test_bytes_to_fixed(wrong_size: bool) -> void:
    block@0: // L178
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) CkIAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAGAAEIAAEIAADEbIhNBAeBCAAA2GgCABDOzSZ6ABI12L9+ABC0ynuGABGpN33OABNbgt7yABOXKzQaABImvVXuABEbhlr2ABPM4htqABCWVuVqABD9VJmuABH0kCUWABANRqd5PDY4NAVoBPgEiAQYA6gDOALIAlgB6AF4AQgAmABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaAYgCBCNFAUL/6TEZIhJEMRgiE0Q2GgE2GgJXAgCIAdsjRQFC/80xGSISRDEYIhNENhoBNhoCVwIAiAGyI0UBQv+xMRkiEkQxGCITRDYaATYaAlcCAIgBiSNFAUL/lTEZIhJEMRgiE0Q2GgE2GgJXAgCIAWAjRQFC/3kxGSISRDEYIhNENhoBNhoCVwIAiAE3I0UBQv9dMRkiEkQxGCITRDYaATYaAlcCAIgBDiNFAUL/QTEZIhJEMRgiE0Q2GgE2GgJXAgCIAOUjRQFC/yUxGSISRDEYIhNENhoBNhoCVwIAiAC8I0UBQv8JMRkiEkQxGCITRDYaATYaAlcCAIgAkyNFAUL+7TEZIhJEMRgiE0Q2GgE2GgJXAgCIAGojRQFC/tExGSISRDEYIhNENhoBNhoCVwIAiABBI0UBQv61MRmBBRJEMRgiE0SIACkjRQFC/qExGSJPAY4BAAlCAABCAABC/okxGCISREIAAEIAACNFAUL+fkIAAImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoCAEIAAIv+i/8SRImKAgBCAACL/ov/EkSJigIAQgAAi/6L/xJEiYoBAEIAADEAi/8SRIk=)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L180
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = tmp%0#0
        let tmp%1#0: account = (global CurrentApplicationAddress)
        let sender#0: bytes = tmp%1#0
        let sender#5: bytes = sender#0
        goto wrong_size#0 ? block@2 : block@3
    block@2: // if_body_L184
        let tmp%2#0: bytes = (concat sender#0 sender#0)
        let sender#0: bytes = tmp%2#0
        let sender#5: bytes = sender#0
        goto block@3
    block@3: // after_if_else_L183
        let sender#0: bytes = sender#5
        itxn_begin
        let aggregate%length%0#0: uint64 = (len sender#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = sender#0
        let tmp%3#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint8[32]) = tmp%3#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "check_static_bytes(byte[32])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L186
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete_application()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L188
        itxn_submit
        return 