{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAqOA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AA6DK;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;;;;AAxDL;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEgC;;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "b block@0"
    },
    "8": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "11": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz __algopy_default_create@23",
      "stack_out": []
    },
    "18": {
      "op": "b abi_routing@2"
    },
    "21": {
      "block": "abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delete_application()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match delete_application_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b switch_case_default@4"
    },
    "39": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "42": {
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "44": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "45": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "46": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "49": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "50": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "51": {
      "op": "bz create_NoOp@21",
      "stack_out": []
    },
    "54": {
      "op": "b call_NoOp@6"
    },
    "57": {
      "block": "call_NoOp@6",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "60": {
      "op": "pushbytes 0x8d762fdf // method \"check_uint64(uint64,byte[])void\"",
      "defined_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)"
      ]
    },
    "66": {
      "op": "pushbytes 0x2d329ee1 // method \"check_dynamic_bytes(byte[],byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)"
      ]
    },
    "72": {
      "op": "pushbytes 0x6a4ddf73 // method \"check_string(string,byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)"
      ]
    },
    "78": {
      "op": "pushbytes 0xd6e0b7bc // method \"check_biguint(uint512,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)"
      ]
    },
    "84": {
      "op": "pushbytes 0xe5cacd06 // method \"check_bool(bool,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)"
      ]
    },
    "90": {
      "op": "pushbytes 0x89af557b // method \"check_dyn_array_uin64(uint64[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)"
      ]
    },
    "96": {
      "op": "pushbytes 0x46e196bd // method \"check_static_array_uin64_3(uint64[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)"
      ]
    },
    "102": {
      "op": "pushbytes 0xf33886da // method \"check_dyn_array_struct((uint64,address)[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)"
      ]
    },
    "108": {
      "op": "pushbytes 0x2595b95a // method \"check_static_array_struct((uint64,address)[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)"
      ]
    },
    "114": {
      "op": "pushbytes 0x3f55266b // method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)"
      ]
    },
    "120": {
      "op": "pushbytes 0x7d240945 // method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)"
      ]
    },
    "126": {
      "op": "pushbytes 0x0351a9de // method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "132": {
      "op": "uncover 12",
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%12#0"
      ]
    },
    "134": {
      "op": "match check_uint64_route@7 check_dynamic_bytes_route@8 check_string_route@9 check_biguint_route@10 check_bool_route@11 check_dyn_array_uin64_route@12 check_static_array_uin64_3_route@13 check_dyn_array_struct_route@14 check_static_array_struct_route@15 check_dyn_array_dyn_struct_route@16 check_static_array_dyn_struct_route@17 check_static_bytes_route@18",
      "stack_out": []
    },
    "160": {
      "op": "b switch_case_default@19"
    },
    "163": {
      "block": "switch_case_default@19",
      "stack_in": [],
      "op": "b switch_case_next@20"
    },
    "166": {
      "block": "switch_case_next@20",
      "stack_in": [],
      "op": "b after_if_else@22"
    },
    "169": {
      "block": "after_if_else@22",
      "stack_in": [],
      "op": "b after_if_else@24"
    },
    "172": {
      "block": "after_if_else@24",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "173": {
      "block": "check_static_bytes_route@18",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "op": "callsub check_static_bytes"
    },
    "176": {
      "op": "b switch_case_next@20"
    },
    "179": {
      "block": "check_static_array_dyn_struct_route@17",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "op": "callsub check_static_array_dyn_struct"
    },
    "182": {
      "op": "b switch_case_next@20"
    },
    "185": {
      "block": "check_dyn_array_dyn_struct_route@16",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "op": "callsub check_dyn_array_dyn_struct"
    },
    "188": {
      "op": "b switch_case_next@20"
    },
    "191": {
      "block": "check_static_array_struct_route@15",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "op": "callsub check_static_array_struct"
    },
    "194": {
      "op": "b switch_case_next@20"
    },
    "197": {
      "block": "check_dyn_array_struct_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "op": "callsub check_dyn_array_struct"
    },
    "200": {
      "op": "b switch_case_next@20"
    },
    "203": {
      "block": "check_static_array_uin64_3_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "op": "callsub check_static_array_uin64_3"
    },
    "206": {
      "op": "b switch_case_next@20"
    },
    "209": {
      "block": "check_dyn_array_uin64_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "op": "callsub check_dyn_array_uin64"
    },
    "212": {
      "op": "b switch_case_next@20"
    },
    "215": {
      "block": "check_bool_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "op": "callsub check_bool"
    },
    "218": {
      "op": "b switch_case_next@20"
    },
    "221": {
      "block": "check_biguint_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "op": "callsub check_biguint"
    },
    "224": {
      "op": "b switch_case_next@20"
    },
    "227": {
      "block": "check_string_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "op": "callsub check_string"
    },
    "230": {
      "op": "b switch_case_next@20"
    },
    "233": {
      "block": "check_dynamic_bytes_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "op": "callsub check_dynamic_bytes"
    },
    "236": {
      "op": "b switch_case_next@20"
    },
    "239": {
      "block": "check_uint64_route@7",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "op": "callsub check_uint64"
    },
    "242": {
      "op": "b switch_case_next@20"
    },
    "245": {
      "block": "create_NoOp@21",
      "stack_in": [],
      "op": "b after_if_else@22"
    },
    "248": {
      "block": "delete_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "250": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "252": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "255": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "256": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "257": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "258": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "259": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "op": "callsub delete_application"
    },
    "262": {
      "op": "b switch_case_next@5"
    },
    "265": {
      "block": "__algopy_default_create@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "267": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "269": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "271": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "273": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "274": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "275": {
      "op": "b block@26"
    },
    "278": {
      "block": "block@26",
      "stack_in": [],
      "op": "b after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@27"
    },
    "281": {
      "block": "after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@27",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "b delete_application_block@0"
    },
    "286": {
      "block": "delete_application_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.delete_application"
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "b check_uint64_block@0"
    },
    "294": {
      "block": "check_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "297": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "300": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ]
    },
    "303": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_out": []
    },
    "306": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "307": {
      "op": "return",
      "stack_out": []
    },
    "308": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "b check_dynamic_bytes_block@0"
    },
    "311": {
      "block": "check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "314": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "317": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ]
    },
    "320": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_out": []
    },
    "323": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "324": {
      "op": "return",
      "stack_out": []
    },
    "325": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "b check_string_block@0"
    },
    "328": {
      "block": "check_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "331": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "334": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ]
    },
    "337": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_out": []
    },
    "340": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "341": {
      "op": "return",
      "stack_out": []
    },
    "342": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "b check_biguint_block@0"
    },
    "345": {
      "block": "check_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "348": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "351": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ]
    },
    "354": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_out": []
    },
    "357": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "b check_bool_block@0"
    },
    "362": {
      "block": "check_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "368": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ]
    },
    "371": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_out": []
    },
    "374": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "375": {
      "op": "return",
      "stack_out": []
    },
    "376": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "b check_dyn_array_uin64_block@0"
    },
    "379": {
      "block": "check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ]
    },
    "382": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "385": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ]
    },
    "388": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_out": []
    },
    "391": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "b check_static_array_uin64_3_block@0"
    },
    "396": {
      "block": "check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ]
    },
    "399": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "402": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ]
    },
    "405": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_out": []
    },
    "408": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "409": {
      "op": "return",
      "stack_out": []
    },
    "410": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "b check_dyn_array_struct_block@0"
    },
    "413": {
      "block": "check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ]
    },
    "416": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "419": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ]
    },
    "422": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_out": []
    },
    "425": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "426": {
      "op": "return",
      "stack_out": []
    },
    "427": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "b check_static_array_struct_block@0"
    },
    "430": {
      "block": "check_static_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ]
    },
    "433": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "436": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ]
    },
    "439": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_out": []
    },
    "442": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "443": {
      "op": "return",
      "stack_out": []
    },
    "444": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "b check_dyn_array_dyn_struct_block@0"
    },
    "447": {
      "block": "check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ]
    },
    "450": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "453": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ]
    },
    "456": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_out": []
    },
    "459": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "460": {
      "op": "return",
      "stack_out": []
    },
    "461": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "b check_static_array_dyn_struct_block@0"
    },
    "464": {
      "block": "check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ]
    },
    "467": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "470": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ]
    },
    "473": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_out": []
    },
    "476": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "b check_static_bytes_block@0"
    },
    "481": {
      "block": "check_static_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "484": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_out": []
    },
    "487": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "488": {
      "op": "return",
      "stack_out": []
    },
    "489": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "params": {},
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "stack_in": [],
      "op": "b test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0"
    },
    "492": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "496": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0"
    },
    "499": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "501": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "504": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "505": {
      "retsub": true,
      "op": "retsub"
    },
    "506": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "509": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0"
    },
    "512": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "514": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "518": {
      "retsub": true,
      "op": "retsub"
    },
    "519": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "522": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_string_block@0"
    },
    "525": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "527": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "529": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "530": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "531": {
      "retsub": true,
      "op": "retsub"
    },
    "532": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "535": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0"
    },
    "538": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "540": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "542": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "543": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "544": {
      "retsub": true,
      "op": "retsub"
    },
    "545": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "548": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0"
    },
    "551": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "553": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "556": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "557": {
      "retsub": true,
      "op": "retsub"
    },
    "558": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "561": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0"
    },
    "564": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "566": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "570": {
      "retsub": true,
      "op": "retsub"
    },
    "571": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "574": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0"
    },
    "577": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "579": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "581": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "582": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "587": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0"
    },
    "590": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "592": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "596": {
      "retsub": true,
      "op": "retsub"
    },
    "597": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "600": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0"
    },
    "603": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "605": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "607": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "608": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "609": {
      "retsub": true,
      "op": "retsub"
    },
    "610": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "613": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0"
    },
    "616": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "618": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "620": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "621": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "622": {
      "retsub": true,
      "op": "retsub"
    },
    "623": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "626": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0"
    },
    "629": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "631": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "634": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "635": {
      "retsub": true,
      "op": "retsub"
    },
    "636": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "params": {
        "bytes32#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "639": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0"
    },
    "642": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes32#0 (copy)"
      ]
    },
    "646": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "647": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "648": {
      "retsub": true,
      "op": "retsub"
    }
  }
}