{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAqOA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;;;;AAxDL;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEgC;;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "b block@0"
    },
    "8": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "11": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "13": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "14": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "16": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "17": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "18": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "20": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "21": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "23": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "25": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "27": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "29": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "31": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "33": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "35": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "37": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "39": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "41": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "43": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "69": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "72": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "73": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "76": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "79": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "Method(delete_application()void)"
      ]
    },
    "85": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete_application()void)",
        "tmp%8#0"
      ]
    },
    "87": {
      "op": "match delete_application_route@29",
      "stack_out": []
    },
    "91": {
      "op": "b switch_case_default@30"
    },
    "94": {
      "block": "switch_case_default@30",
      "stack_in": [],
      "op": "b switch_case_next@31"
    },
    "97": {
      "error": "this contract does not implement the given ABI method for call DeleteApplication",
      "block": "switch_case_next@31",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call DeleteApplication"
    },
    "98": {
      "block": "delete_application_route@29",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "op": "callsub delete_application"
    },
    "101": {
      "op": "b switch_case_next@31"
    },
    "104": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "107": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "110": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "113": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "116": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "119": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "122": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "125": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "128": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "130": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "131": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "132": {
      "op": "bz else_body@19",
      "stack_out": []
    },
    "135": {
      "op": "b __algopy_default_create@18"
    },
    "138": {
      "block": "__algopy_default_create@18",
      "stack_in": [],
      "op": "b block@35"
    },
    "141": {
      "block": "block@35",
      "stack_in": [],
      "op": "b after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@36"
    },
    "144": {
      "block": "after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@36",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "145": {
      "op": "return",
      "stack_out": []
    },
    "146": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@19",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "147": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "150": {
      "op": "pushbytes 0x8d762fdf // method \"check_uint64(uint64,byte[])void\"",
      "defined_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)"
      ]
    },
    "156": {
      "op": "pushbytes 0x2d329ee1 // method \"check_dynamic_bytes(byte[],byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)"
      ]
    },
    "162": {
      "op": "pushbytes 0x6a4ddf73 // method \"check_string(string,byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)"
      ]
    },
    "168": {
      "op": "pushbytes 0xd6e0b7bc // method \"check_biguint(uint512,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)"
      ]
    },
    "174": {
      "op": "pushbytes 0xe5cacd06 // method \"check_bool(bool,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)"
      ]
    },
    "180": {
      "op": "pushbytes 0x89af557b // method \"check_dyn_array_uin64(uint64[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)"
      ]
    },
    "186": {
      "op": "pushbytes 0x46e196bd // method \"check_static_array_uin64_3(uint64[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)"
      ]
    },
    "192": {
      "op": "pushbytes 0xf33886da // method \"check_dyn_array_struct((uint64,address)[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)"
      ]
    },
    "198": {
      "op": "pushbytes 0x2595b95a // method \"check_static_array_struct((uint64,address)[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)"
      ]
    },
    "204": {
      "op": "pushbytes 0x3f55266b // method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)"
      ]
    },
    "210": {
      "op": "pushbytes 0x7d240945 // method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)"
      ]
    },
    "216": {
      "op": "pushbytes 0x0351a9de // method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "222": {
      "op": "uncover 12",
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%5#0"
      ]
    },
    "224": {
      "op": "match check_uint64_route@3 check_dynamic_bytes_route@4 check_string_route@5 check_biguint_route@6 check_bool_route@7 check_dyn_array_uin64_route@8 check_static_array_uin64_3_route@9 check_dyn_array_struct_route@10 check_static_array_struct_route@11 check_dyn_array_dyn_struct_route@12 check_static_array_dyn_struct_route@13 check_static_bytes_route@14",
      "stack_out": []
    },
    "250": {
      "op": "b switch_case_default@15"
    },
    "253": {
      "block": "switch_case_default@15",
      "stack_in": [],
      "op": "b switch_case_next@16"
    },
    "256": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@16",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "257": {
      "block": "check_static_bytes_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "op": "callsub check_static_bytes"
    },
    "260": {
      "op": "b switch_case_next@16"
    },
    "263": {
      "block": "check_static_array_dyn_struct_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "op": "callsub check_static_array_dyn_struct"
    },
    "266": {
      "op": "b switch_case_next@16"
    },
    "269": {
      "block": "check_dyn_array_dyn_struct_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "op": "callsub check_dyn_array_dyn_struct"
    },
    "272": {
      "op": "b switch_case_next@16"
    },
    "275": {
      "block": "check_static_array_struct_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "op": "callsub check_static_array_struct"
    },
    "278": {
      "op": "b switch_case_next@16"
    },
    "281": {
      "block": "check_dyn_array_struct_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "op": "callsub check_dyn_array_struct"
    },
    "284": {
      "op": "b switch_case_next@16"
    },
    "287": {
      "block": "check_static_array_uin64_3_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "op": "callsub check_static_array_uin64_3"
    },
    "290": {
      "op": "b switch_case_next@16"
    },
    "293": {
      "block": "check_dyn_array_uin64_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "op": "callsub check_dyn_array_uin64"
    },
    "296": {
      "op": "b switch_case_next@16"
    },
    "299": {
      "block": "check_bool_route@7",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "op": "callsub check_bool"
    },
    "302": {
      "op": "b switch_case_next@16"
    },
    "305": {
      "block": "check_biguint_route@6",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "op": "callsub check_biguint"
    },
    "308": {
      "op": "b switch_case_next@16"
    },
    "311": {
      "block": "check_string_route@5",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "op": "callsub check_string"
    },
    "314": {
      "op": "b switch_case_next@16"
    },
    "317": {
      "block": "check_dynamic_bytes_route@4",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "op": "callsub check_dynamic_bytes"
    },
    "320": {
      "op": "b switch_case_next@16"
    },
    "323": {
      "block": "check_uint64_route@3",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "op": "callsub check_uint64"
    },
    "326": {
      "op": "b switch_case_next@16"
    },
    "329": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "b delete_application_block@0"
    },
    "332": {
      "block": "delete_application_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.delete_application"
    },
    "335": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "336": {
      "op": "return",
      "stack_out": []
    },
    "337": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "b check_uint64_block@0"
    },
    "340": {
      "block": "check_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "346": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ]
    },
    "349": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "353": {
      "op": "return",
      "stack_out": []
    },
    "354": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "b check_dynamic_bytes_block@0"
    },
    "357": {
      "block": "check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "360": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "363": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ]
    },
    "366": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_out": []
    },
    "369": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "370": {
      "op": "return",
      "stack_out": []
    },
    "371": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "b check_string_block@0"
    },
    "374": {
      "block": "check_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "380": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ]
    },
    "383": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_out": []
    },
    "386": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "387": {
      "op": "return",
      "stack_out": []
    },
    "388": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "b check_biguint_block@0"
    },
    "391": {
      "block": "check_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "394": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "397": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ]
    },
    "400": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_out": []
    },
    "403": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "404": {
      "op": "return",
      "stack_out": []
    },
    "405": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "b check_bool_block@0"
    },
    "408": {
      "block": "check_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "411": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "414": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ]
    },
    "417": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_out": []
    },
    "420": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "421": {
      "op": "return",
      "stack_out": []
    },
    "422": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "b check_dyn_array_uin64_block@0"
    },
    "425": {
      "block": "check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ]
    },
    "428": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "431": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ]
    },
    "434": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_out": []
    },
    "437": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "438": {
      "op": "return",
      "stack_out": []
    },
    "439": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "b check_static_array_uin64_3_block@0"
    },
    "442": {
      "block": "check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ]
    },
    "445": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "448": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ]
    },
    "451": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_out": []
    },
    "454": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "455": {
      "op": "return",
      "stack_out": []
    },
    "456": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "b check_dyn_array_struct_block@0"
    },
    "459": {
      "block": "check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ]
    },
    "462": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "465": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ]
    },
    "468": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_out": []
    },
    "471": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": []
    },
    "473": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "b check_static_array_struct_block@0"
    },
    "476": {
      "block": "check_static_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ]
    },
    "479": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "482": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ]
    },
    "485": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_out": []
    },
    "488": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "489": {
      "op": "return",
      "stack_out": []
    },
    "490": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "b check_dyn_array_dyn_struct_block@0"
    },
    "493": {
      "block": "check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ]
    },
    "496": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "499": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ]
    },
    "502": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_out": []
    },
    "505": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "506": {
      "op": "return",
      "stack_out": []
    },
    "507": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "b check_static_array_dyn_struct_block@0"
    },
    "510": {
      "block": "check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ]
    },
    "513": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "516": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ]
    },
    "519": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_out": []
    },
    "522": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "523": {
      "op": "return",
      "stack_out": []
    },
    "524": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "b check_static_bytes_block@0"
    },
    "527": {
      "block": "check_static_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "530": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_out": []
    },
    "533": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "534": {
      "op": "return",
      "stack_out": []
    },
    "535": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "params": {},
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "stack_in": [],
      "op": "b test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0"
    },
    "538": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "539": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "542": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0"
    },
    "545": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "547": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "550": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "551": {
      "retsub": true,
      "op": "retsub"
    },
    "552": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "555": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0"
    },
    "558": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "560": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "562": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "564": {
      "retsub": true,
      "op": "retsub"
    },
    "565": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "568": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_string_block@0"
    },
    "571": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "573": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "575": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "576": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "577": {
      "retsub": true,
      "op": "retsub"
    },
    "578": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "581": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0"
    },
    "584": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "586": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "588": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "589": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "590": {
      "retsub": true,
      "op": "retsub"
    },
    "591": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "594": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0"
    },
    "597": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "599": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "601": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "602": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "603": {
      "retsub": true,
      "op": "retsub"
    },
    "604": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "607": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0"
    },
    "610": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "612": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "614": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "615": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "616": {
      "retsub": true,
      "op": "retsub"
    },
    "617": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "620": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0"
    },
    "623": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "625": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "627": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "628": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "629": {
      "retsub": true,
      "op": "retsub"
    },
    "630": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "633": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0"
    },
    "636": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "642": {
      "retsub": true,
      "op": "retsub"
    },
    "643": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "646": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0"
    },
    "649": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "651": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "653": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "654": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "659": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0"
    },
    "662": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "664": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "666": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "667": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    },
    "669": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "672": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0"
    },
    "675": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "677": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "679": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "680": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "681": {
      "retsub": true,
      "op": "retsub"
    },
    "682": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "params": {
        "bytes32#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "685": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0"
    },
    "688": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "690": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes32#0 (copy)"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "693": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "694": {
      "retsub": true,
      "op": "retsub"
    }
  }
}