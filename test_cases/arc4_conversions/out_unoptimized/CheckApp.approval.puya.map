{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAqOA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA6DK;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;AAxDA;;;;;;AAEU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAIU;;AAAA;;AAAA;AAAP;;AAEH;;;;;;AAE2B;;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 8"
    },
    "7": {
      "op": "b main_block@0"
    },
    "10": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "13": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "16": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "bz main___algopy_default_create@21",
      "stack_out": []
    },
    "20": {
      "op": "b main_abi_routing@2"
    },
    "23": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delete_application()void)"
      ]
    },
    "32": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "34": {
      "op": "match main_delete_application_route@3",
      "stack_out": []
    },
    "38": {
      "op": "b main_switch_case_next@4"
    },
    "41": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "43": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "44": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "45": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "46": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "48": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "49": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "50": {
      "op": "bz main_create_NoOp@19",
      "stack_out": []
    },
    "53": {
      "op": "b main_call_NoOp@5"
    },
    "56": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "59": {
      "op": "pushbytes 0x8d762fdf // method \"check_uint64(uint64,byte[])void\"",
      "defined_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)"
      ]
    },
    "65": {
      "op": "pushbytes 0x2d329ee1 // method \"check_dynamic_bytes(byte[],byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)"
      ]
    },
    "71": {
      "op": "pushbytes 0x6a4ddf73 // method \"check_string(string,byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)"
      ]
    },
    "77": {
      "op": "pushbytes 0xd6e0b7bc // method \"check_biguint(uint512,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)"
      ]
    },
    "83": {
      "op": "pushbytes 0xe5cacd06 // method \"check_bool(bool,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)"
      ]
    },
    "89": {
      "op": "pushbytes 0x89af557b // method \"check_dyn_array_uin64(uint64[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)"
      ]
    },
    "95": {
      "op": "pushbytes 0x46e196bd // method \"check_static_array_uin64_3(uint64[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)"
      ]
    },
    "101": {
      "op": "pushbytes 0xf33886da // method \"check_dyn_array_struct((uint64,address)[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)"
      ]
    },
    "107": {
      "op": "pushbytes 0x2595b95a // method \"check_static_array_struct((uint64,address)[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)"
      ]
    },
    "113": {
      "op": "pushbytes 0x3f55266b // method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)"
      ]
    },
    "119": {
      "op": "pushbytes 0x7d240945 // method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)"
      ]
    },
    "125": {
      "op": "pushbytes 0x0351a9de // method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "131": {
      "op": "uncover 12",
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%12#0"
      ]
    },
    "133": {
      "op": "match main_check_uint64_route@6 main_check_dynamic_bytes_route@7 main_check_string_route@8 main_check_biguint_route@9 main_check_bool_route@10 main_check_dyn_array_uin64_route@11 main_check_static_array_uin64_3_route@12 main_check_dyn_array_struct_route@13 main_check_static_array_struct_route@14 main_check_dyn_array_dyn_struct_route@15 main_check_static_array_dyn_struct_route@16 main_check_static_bytes_route@17",
      "stack_out": []
    },
    "159": {
      "op": "b main_switch_case_next@18"
    },
    "162": {
      "block": "main_switch_case_next@18",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "165": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "168": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "169": {
      "block": "main_check_static_bytes_route@17",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "op": "callsub check_static_bytes"
    },
    "172": {
      "op": "b main_switch_case_next@18"
    },
    "175": {
      "block": "main_check_static_array_dyn_struct_route@16",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "op": "callsub check_static_array_dyn_struct"
    },
    "178": {
      "op": "b main_switch_case_next@18"
    },
    "181": {
      "block": "main_check_dyn_array_dyn_struct_route@15",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "op": "callsub check_dyn_array_dyn_struct"
    },
    "184": {
      "op": "b main_switch_case_next@18"
    },
    "187": {
      "block": "main_check_static_array_struct_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "op": "callsub check_static_array_struct"
    },
    "190": {
      "op": "b main_switch_case_next@18"
    },
    "193": {
      "block": "main_check_dyn_array_struct_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "op": "callsub check_dyn_array_struct"
    },
    "196": {
      "op": "b main_switch_case_next@18"
    },
    "199": {
      "block": "main_check_static_array_uin64_3_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "op": "callsub check_static_array_uin64_3"
    },
    "202": {
      "op": "b main_switch_case_next@18"
    },
    "205": {
      "block": "main_check_dyn_array_uin64_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "op": "callsub check_dyn_array_uin64"
    },
    "208": {
      "op": "b main_switch_case_next@18"
    },
    "211": {
      "block": "main_check_bool_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "op": "callsub check_bool"
    },
    "214": {
      "op": "b main_switch_case_next@18"
    },
    "217": {
      "block": "main_check_biguint_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "op": "callsub check_biguint"
    },
    "220": {
      "op": "b main_switch_case_next@18"
    },
    "223": {
      "block": "main_check_string_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "op": "callsub check_string"
    },
    "226": {
      "op": "b main_switch_case_next@18"
    },
    "229": {
      "block": "main_check_dynamic_bytes_route@7",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "op": "callsub check_dynamic_bytes"
    },
    "232": {
      "op": "b main_switch_case_next@18"
    },
    "235": {
      "block": "main_check_uint64_route@6",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "op": "callsub check_uint64"
    },
    "238": {
      "op": "b main_switch_case_next@18"
    },
    "241": {
      "block": "main_create_NoOp@19",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "244": {
      "block": "main_delete_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "246": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "248": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "249": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "251": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "252": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "253": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "254": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "255": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "op": "callsub delete_application"
    },
    "258": {
      "op": "b main_switch_case_next@4"
    },
    "261": {
      "block": "main___algopy_default_create@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "263": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "265": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "267": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "269": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "270": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "271": {
      "op": "b main_block@24"
    },
    "274": {
      "block": "main_block@24",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@25"
    },
    "277": {
      "block": "main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@25",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "b delete_application_block@0"
    },
    "282": {
      "block": "delete_application_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.delete_application"
    },
    "285": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "286": {
      "op": "return",
      "stack_out": []
    },
    "287": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "b check_uint64_block@0"
    },
    "290": {
      "block": "check_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "294": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "295": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "297": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "298": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ]
    },
    "301": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "302": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "303": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "304": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint64)%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "305": {
      "op": "*",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "306": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint64)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "307": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "308": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "310": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64)%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "311": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "312": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "313": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ]
    },
    "316": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_out": []
    },
    "319": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "320": {
      "op": "return",
      "stack_out": []
    },
    "321": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "b check_dynamic_bytes_block@0"
    },
    "324": {
      "block": "check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "327": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "328": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "329": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "330": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "331": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "332": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "333": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "334": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "336": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "337": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "338": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "339": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0"
      ]
    },
    "342": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "343": {
      "op": "intc_1 // 0",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "344": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "length%1#0"
      ]
    },
    "345": {
      "op": "intc_0 // 1",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "length%1#0",
        "1"
      ]
    },
    "346": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "mul%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "mul%1#0"
      ]
    },
    "347": {
      "op": "intc_2 // 2",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "348": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "349": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "351": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+uint8[])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "353": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "354": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0"
      ]
    },
    "357": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_out": []
    },
    "360": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    },
    "362": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "b check_string_block@0"
    },
    "365": {
      "block": "check_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "369": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "370": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "371": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "372": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "373": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "374": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "375": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "377": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "379": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "380": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ]
    },
    "383": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "384": {
      "op": "intc_1 // 0",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "385": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "length%1#0"
      ]
    },
    "386": {
      "op": "intc_0 // 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "length%1#0",
        "1"
      ]
    },
    "387": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "mul%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "mul%1#0"
      ]
    },
    "388": {
      "op": "intc_2 // 2",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "389": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "390": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "392": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "394": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "395": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "398": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_out": []
    },
    "401": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "b check_biguint_block@0"
    },
    "406": {
      "block": "check_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "409": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "410": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "411": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "64"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "414": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "defined_out": [
        "as_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0"
      ]
    },
    "415": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ]
    },
    "418": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "419": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "420": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "421": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint512)%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "422": {
      "op": "*",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "423": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint512)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "424": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "425": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "427": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint512)%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "428": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "429": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "430": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%2#0"
      ]
    },
    "433": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "b check_bool_block@0"
    },
    "441": {
      "block": "check_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "445": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "446": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "1"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "448": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "defined_out": [
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0"
      ]
    },
    "449": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0"
      ]
    },
    "452": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "453": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "454": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "455": {
      "op": "intc_0 // 1",
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "456": {
      "op": "*",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "457": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded(bool8)%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "458": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(bool8)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "459": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "461": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(bool8)%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "462": {
      "op": "==",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "463": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%2#0"
      ]
    },
    "467": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "b check_dyn_array_uin64_block@0"
    },
    "475": {
      "block": "check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "478": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "479": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "480": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "481": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "8"
      ]
    },
    "482": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "483": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "484": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "485": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "487": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "488": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "489": {
      "error": "invalid number of bytes for (len+uint64[])",
      "op": "assert // invalid number of bytes for (len+uint64[])",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "490": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ]
    },
    "493": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "494": {
      "op": "intc_1 // 0",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "495": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "length%1#0"
      ]
    },
    "496": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(len+uint64[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "length%1#0",
        "1"
      ]
    },
    "497": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "mul%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "mul%1#0"
      ]
    },
    "498": {
      "op": "intc_2 // 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "499": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "500": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "502": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "504": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "505": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%2#0"
      ]
    },
    "508": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_out": []
    },
    "511": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "512": {
      "op": "return",
      "stack_out": []
    },
    "513": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "b check_static_array_uin64_3_block@0"
    },
    "516": {
      "block": "check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "520": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "521": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "24"
      ]
    },
    "523": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "524": {
      "error": "invalid number of bytes for uint64[3]",
      "op": "assert // invalid number of bytes for uint64[3]",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0"
      ]
    },
    "525": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0"
      ]
    },
    "528": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "529": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "530": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "531": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint64[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "532": {
      "op": "*",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "533": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint64[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "534": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "535": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "537": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64[3])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "538": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "539": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "540": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64[3])%0#0",
        "tmp%2#0"
      ]
    },
    "543": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_out": []
    },
    "546": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "547": {
      "op": "return",
      "stack_out": []
    },
    "548": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "b check_dyn_array_struct_block@0"
    },
    "551": {
      "block": "check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "554": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "555": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "556": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "557": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "40"
      ]
    },
    "559": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "560": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "561": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "562": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "564": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "565": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "566": {
      "error": "invalid number of bytes for (len+(uint64,uint8[32])[])",
      "op": "assert // invalid number of bytes for (len+(uint64,uint8[32])[])",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0"
      ]
    },
    "567": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0"
      ]
    },
    "570": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "571": {
      "op": "intc_1 // 0",
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "572": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "length%1#0"
      ]
    },
    "573": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "length%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "length%1#0",
        "1"
      ]
    },
    "574": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "mul%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "mul%1#0"
      ]
    },
    "575": {
      "op": "intc_2 // 2",
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "576": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "577": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "579": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "580": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "581": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "582": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%2#0"
      ]
    },
    "585": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_out": []
    },
    "588": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "589": {
      "op": "return",
      "stack_out": []
    },
    "590": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "b check_static_array_struct_block@0"
    },
    "593": {
      "block": "check_static_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "596": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "597": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "598": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "120"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "601": {
      "error": "invalid number of bytes for (uint64,uint8[32])[3]",
      "op": "assert // invalid number of bytes for (uint64,uint8[32])[3]",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0"
      ]
    },
    "602": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0"
      ]
    },
    "605": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "606": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "607": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "608": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "609": {
      "op": "*",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "610": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "611": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "612": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "614": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "615": {
      "op": "==",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "616": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "617": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%2#0"
      ]
    },
    "620": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_out": []
    },
    "623": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "624": {
      "op": "return",
      "stack_out": []
    },
    "625": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "b check_dyn_array_dyn_struct_block@0"
    },
    "628": {
      "block": "check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ]
    },
    "631": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0"
      ]
    },
    "634": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "635": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "636": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "637": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "638": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "639": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "640": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "641": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "643": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "644": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "eq%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "645": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "646": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%2#0"
      ]
    },
    "649": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_out": []
    },
    "652": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "653": {
      "op": "return",
      "stack_out": []
    },
    "654": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "b check_static_array_dyn_struct_block@0"
    },
    "657": {
      "block": "check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ]
    },
    "660": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0"
      ]
    },
    "663": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "664": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "665": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "666": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "667": {
      "op": "*",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "668": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "669": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "670": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "672": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "673": {
      "op": "==",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "eq%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "674": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "675": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%2#0"
      ]
    },
    "678": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_out": []
    },
    "681": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "682": {
      "op": "return",
      "stack_out": []
    },
    "683": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "b check_static_bytes_block@0"
    },
    "686": {
      "block": "check_static_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "689": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "690": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "691": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "32"
      ]
    },
    "693": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "694": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "defined_out": [
        "as_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint8[32])%0#0"
      ]
    },
    "695": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_out": []
    },
    "698": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "699": {
      "op": "return",
      "stack_out": []
    },
    "700": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "params": {},
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "stack_in": [],
      "op": "b test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0"
    },
    "703": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "704": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "707": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0"
    },
    "710": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "712": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "714": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "716": {
      "retsub": true,
      "op": "retsub"
    },
    "717": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "720": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0"
    },
    "723": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "725": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "727": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "728": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "729": {
      "retsub": true,
      "op": "retsub"
    },
    "730": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "733": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_string_block@0"
    },
    "736": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "738": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "740": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "742": {
      "retsub": true,
      "op": "retsub"
    },
    "743": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "746": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0"
    },
    "749": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "751": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "754": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "755": {
      "retsub": true,
      "op": "retsub"
    },
    "756": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "759": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0"
    },
    "762": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "764": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "766": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "767": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "768": {
      "retsub": true,
      "op": "retsub"
    },
    "769": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "772": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0"
    },
    "775": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "777": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "779": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "780": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "781": {
      "retsub": true,
      "op": "retsub"
    },
    "782": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "785": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0"
    },
    "788": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "790": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "792": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "793": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "794": {
      "retsub": true,
      "op": "retsub"
    },
    "795": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "798": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0"
    },
    "801": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "803": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "805": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "806": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "807": {
      "retsub": true,
      "op": "retsub"
    },
    "808": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "811": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0"
    },
    "814": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "816": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "818": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "819": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "820": {
      "retsub": true,
      "op": "retsub"
    },
    "821": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "824": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0"
    },
    "827": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "829": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "831": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "832": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "833": {
      "retsub": true,
      "op": "retsub"
    },
    "834": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "837": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0"
    },
    "840": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "842": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "844": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "845": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "846": {
      "retsub": true,
      "op": "retsub"
    },
    "847": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "params": {
        "bytes32#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "850": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0"
    },
    "853": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "855": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes32#0 (copy)"
      ]
    },
    "857": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "858": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "859": {
      "retsub": true,
      "op": "retsub"
    }
  }
}