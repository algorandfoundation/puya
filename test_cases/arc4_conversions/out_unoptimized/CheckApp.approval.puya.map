{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAqOA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AA6DK;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AANA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;;;;AAxDL;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAIe;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEgC;;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@23",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0x33b3499e // method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delete_application()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_delete_application_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b main_switch_case_default@4"
    },
    "39": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "b main_switch_case_next@5"
    },
    "42": {
      "block": "main_switch_case_next@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "44": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "45": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "46": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "49": {
      "op": "bz main_create_NoOp@21",
      "stack_out": []
    },
    "52": {
      "op": "b main_call_NoOp@6"
    },
    "55": {
      "block": "main_call_NoOp@6",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "58": {
      "op": "pushbytes 0x8d762fdf // method \"check_uint64(uint64,byte[])void\"",
      "defined_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)"
      ]
    },
    "64": {
      "op": "pushbytes 0x2d329ee1 // method \"check_dynamic_bytes(byte[],byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)"
      ]
    },
    "70": {
      "op": "pushbytes 0x6a4ddf73 // method \"check_string(string,byte[])void\"",
      "defined_out": [
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)"
      ]
    },
    "76": {
      "op": "pushbytes 0xd6e0b7bc // method \"check_biguint(uint512,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)"
      ]
    },
    "82": {
      "op": "pushbytes 0xe5cacd06 // method \"check_bool(bool,byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)"
      ]
    },
    "88": {
      "op": "pushbytes 0x89af557b // method \"check_dyn_array_uin64(uint64[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)"
      ]
    },
    "94": {
      "op": "pushbytes 0x46e196bd // method \"check_static_array_uin64_3(uint64[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)"
      ]
    },
    "100": {
      "op": "pushbytes 0xf33886da // method \"check_dyn_array_struct((uint64,address)[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)"
      ]
    },
    "106": {
      "op": "pushbytes 0x2595b95a // method \"check_static_array_struct((uint64,address)[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)"
      ]
    },
    "112": {
      "op": "pushbytes 0x3f55266b // method \"check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)"
      ]
    },
    "118": {
      "op": "pushbytes 0x7d240945 // method \"check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)"
      ]
    },
    "124": {
      "op": "pushbytes 0x0351a9de // method \"check_static_bytes(byte[32])void\"",
      "defined_out": [
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_uint64(uint64,byte[])void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)"
      ]
    },
    "130": {
      "op": "uncover 12",
      "stack_out": [
        "Method(check_uint64(uint64,byte[])void)",
        "Method(check_dynamic_bytes(byte[],byte[])void)",
        "Method(check_string(string,byte[])void)",
        "Method(check_biguint(uint512,byte[])void)",
        "Method(check_bool(bool,byte[])void)",
        "Method(check_dyn_array_uin64(uint64[],byte[])void)",
        "Method(check_static_array_uin64_3(uint64[3],byte[])void)",
        "Method(check_dyn_array_struct((uint64,address)[],byte[])void)",
        "Method(check_static_array_struct((uint64,address)[3],byte[])void)",
        "Method(check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void)",
        "Method(check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void)",
        "Method(check_static_bytes(byte[32])void)",
        "tmp%11#0"
      ]
    },
    "132": {
      "op": "match main_check_uint64_route@7 main_check_dynamic_bytes_route@8 main_check_string_route@9 main_check_biguint_route@10 main_check_bool_route@11 main_check_dyn_array_uin64_route@12 main_check_static_array_uin64_3_route@13 main_check_dyn_array_struct_route@14 main_check_static_array_struct_route@15 main_check_dyn_array_dyn_struct_route@16 main_check_static_array_dyn_struct_route@17 main_check_static_bytes_route@18",
      "stack_out": []
    },
    "158": {
      "op": "b main_switch_case_default@19"
    },
    "161": {
      "block": "main_switch_case_default@19",
      "stack_in": [],
      "op": "b main_switch_case_next@20"
    },
    "164": {
      "block": "main_switch_case_next@20",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "167": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "b main_after_if_else@24"
    },
    "170": {
      "block": "main_after_if_else@24",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "171": {
      "block": "main_check_static_bytes_route@18",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "op": "callsub check_static_bytes"
    },
    "174": {
      "op": "b main_switch_case_next@20"
    },
    "177": {
      "block": "main_check_static_array_dyn_struct_route@17",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "op": "callsub check_static_array_dyn_struct"
    },
    "180": {
      "op": "b main_switch_case_next@20"
    },
    "183": {
      "block": "main_check_dyn_array_dyn_struct_route@16",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "op": "callsub check_dyn_array_dyn_struct"
    },
    "186": {
      "op": "b main_switch_case_next@20"
    },
    "189": {
      "block": "main_check_static_array_struct_route@15",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "op": "callsub check_static_array_struct"
    },
    "192": {
      "op": "b main_switch_case_next@20"
    },
    "195": {
      "block": "main_check_dyn_array_struct_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "op": "callsub check_dyn_array_struct"
    },
    "198": {
      "op": "b main_switch_case_next@20"
    },
    "201": {
      "block": "main_check_static_array_uin64_3_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "op": "callsub check_static_array_uin64_3"
    },
    "204": {
      "op": "b main_switch_case_next@20"
    },
    "207": {
      "block": "main_check_dyn_array_uin64_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "op": "callsub check_dyn_array_uin64"
    },
    "210": {
      "op": "b main_switch_case_next@20"
    },
    "213": {
      "block": "main_check_bool_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "op": "callsub check_bool"
    },
    "216": {
      "op": "b main_switch_case_next@20"
    },
    "219": {
      "block": "main_check_biguint_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "op": "callsub check_biguint"
    },
    "222": {
      "op": "b main_switch_case_next@20"
    },
    "225": {
      "block": "main_check_string_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "op": "callsub check_string"
    },
    "228": {
      "op": "b main_switch_case_next@20"
    },
    "231": {
      "block": "main_check_dynamic_bytes_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "op": "callsub check_dynamic_bytes"
    },
    "234": {
      "op": "b main_switch_case_next@20"
    },
    "237": {
      "block": "main_check_uint64_route@7",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "op": "callsub check_uint64"
    },
    "240": {
      "op": "b main_switch_case_next@20"
    },
    "243": {
      "block": "main_create_NoOp@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "246": {
      "block": "main_delete_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "248": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "250": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "253": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "254": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "255": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "256": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "257": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "op": "callsub delete_application"
    },
    "260": {
      "op": "b main_switch_case_next@5"
    },
    "263": {
      "block": "main___algopy_default_create@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "265": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "266": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "267": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "269": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "271": {
      "op": "&&",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "272": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "273": {
      "op": "b main_block@26"
    },
    "276": {
      "block": "main_block@26",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@27"
    },
    "279": {
      "block": "main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@27",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application[routing]",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "b delete_application_block@0"
    },
    "284": {
      "block": "delete_application_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.delete_application"
    },
    "287": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64[routing]",
      "params": {},
      "block": "check_uint64",
      "stack_in": [],
      "op": "b check_uint64_block@0"
    },
    "292": {
      "block": "check_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "295": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "298": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ]
    },
    "301": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_out": []
    },
    "304": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "305": {
      "op": "return",
      "stack_out": []
    },
    "306": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes[routing]",
      "params": {},
      "block": "check_dynamic_bytes",
      "stack_in": [],
      "op": "b check_dynamic_bytes_block@0"
    },
    "309": {
      "block": "check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "312": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "315": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ]
    },
    "318": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_out": []
    },
    "321": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string[routing]",
      "params": {},
      "block": "check_string",
      "stack_in": [],
      "op": "b check_string_block@0"
    },
    "326": {
      "block": "check_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "329": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "332": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0"
      ]
    },
    "335": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_out": []
    },
    "338": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "339": {
      "op": "return",
      "stack_out": []
    },
    "340": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint[routing]",
      "params": {},
      "block": "check_biguint",
      "stack_in": [],
      "op": "b check_biguint_block@0"
    },
    "343": {
      "block": "check_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "346": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "349": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%0#0"
      ]
    },
    "352": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_out": []
    },
    "355": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "356": {
      "op": "return",
      "stack_out": []
    },
    "357": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool[routing]",
      "params": {},
      "block": "check_bool",
      "stack_in": [],
      "op": "b check_bool_block@0"
    },
    "360": {
      "block": "check_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "363": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "366": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%0#0"
      ]
    },
    "369": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_out": []
    },
    "372": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "373": {
      "op": "return",
      "stack_out": []
    },
    "374": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64[routing]",
      "params": {},
      "block": "check_dyn_array_uin64",
      "stack_in": [],
      "op": "b check_dyn_array_uin64_block@0"
    },
    "377": {
      "block": "check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0"
      ]
    },
    "380": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "383": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ]
    },
    "386": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3[routing]",
      "params": {},
      "block": "check_static_array_uin64_3",
      "stack_in": [],
      "op": "b check_static_array_uin64_3_block@0"
    },
    "394": {
      "block": "check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0"
      ]
    },
    "397": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "400": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64[3])%0#0",
        "tmp%0#0"
      ]
    },
    "403": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_out": []
    },
    "406": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "407": {
      "op": "return",
      "stack_out": []
    },
    "408": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct[routing]",
      "params": {},
      "block": "check_dyn_array_struct",
      "stack_in": [],
      "op": "b check_dyn_array_struct_block@0"
    },
    "411": {
      "block": "check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0"
      ]
    },
    "414": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "417": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32])[])%0#0",
        "tmp%0#0"
      ]
    },
    "420": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_out": []
    },
    "423": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "424": {
      "op": "return",
      "stack_out": []
    },
    "425": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct[routing]",
      "params": {},
      "block": "check_static_array_struct",
      "stack_in": [],
      "op": "b check_static_array_struct_block@0"
    },
    "428": {
      "block": "check_static_array_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0"
      ]
    },
    "431": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "434": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32])[3])%0#0",
        "tmp%0#0"
      ]
    },
    "437": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_out": []
    },
    "440": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "441": {
      "op": "return",
      "stack_out": []
    },
    "442": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct[routing]",
      "params": {},
      "block": "check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "b check_dyn_array_dyn_struct_block@0"
    },
    "445": {
      "block": "check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0"
      ]
    },
    "448": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "451": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint8[32],(len+uint8[]))[])%0#0",
        "tmp%0#0"
      ]
    },
    "454": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_out": []
    },
    "457": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "458": {
      "op": "return",
      "stack_out": []
    },
    "459": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct[routing]",
      "params": {},
      "block": "check_static_array_dyn_struct",
      "stack_in": [],
      "op": "b check_static_array_dyn_struct_block@0"
    },
    "462": {
      "block": "check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0"
      ]
    },
    "465": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "468": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint8[32],(len+uint8[]))[3])%0#0",
        "tmp%0#0"
      ]
    },
    "471": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_out": []
    },
    "474": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "475": {
      "op": "return",
      "stack_out": []
    },
    "476": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes[routing]",
      "params": {},
      "block": "check_static_bytes",
      "stack_in": [],
      "op": "b check_static_bytes_block@0"
    },
    "479": {
      "block": "check_static_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "482": {
      "callsub": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "op": "callsub test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_out": []
    },
    "485": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "486": {
      "op": "return",
      "stack_out": []
    },
    "487": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "params": {},
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application",
      "stack_in": [],
      "op": "b test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0"
    },
    "490": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.delete_application_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "491": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "494": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0"
    },
    "497": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "499": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "501": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "502": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "503": {
      "retsub": true,
      "op": "retsub"
    },
    "504": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "507": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0"
    },
    "510": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "512": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "515": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "516": {
      "retsub": true,
      "op": "retsub"
    },
    "517": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "520": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_string_block@0"
    },
    "523": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_string_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "525": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "528": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "529": {
      "retsub": true,
      "op": "retsub"
    },
    "530": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "533": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0"
    },
    "536": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "538": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "540": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "542": {
      "retsub": true,
      "op": "retsub"
    },
    "543": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "546": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0"
    },
    "549": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "551": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "553": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "554": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "555": {
      "retsub": true,
      "op": "retsub"
    },
    "556": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "559": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0"
    },
    "562": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "564": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "567": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "568": {
      "retsub": true,
      "op": "retsub"
    },
    "569": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "572": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0"
    },
    "575": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "577": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "580": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "581": {
      "retsub": true,
      "op": "retsub"
    },
    "582": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "585": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0"
    },
    "588": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "590": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "592": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "593": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "594": {
      "retsub": true,
      "op": "retsub"
    },
    "595": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "598": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0"
    },
    "601": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "603": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "605": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "607": {
      "retsub": true,
      "op": "retsub"
    },
    "608": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "611": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0"
    },
    "614": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "616": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "618": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "619": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "620": {
      "retsub": true,
      "op": "retsub"
    },
    "621": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "params": {
        "value#0": "bytes",
        "expected#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "624": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0"
    },
    "627": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "629": {
      "op": "frame_dig -1",
      "defined_out": [
        "expected#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "expected#0 (copy)"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "632": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "633": {
      "retsub": true,
      "op": "retsub"
    },
    "634": {
      "subroutine": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "params": {
        "bytes32#0": "bytes"
      },
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "637": {
      "op": "b test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0"
    },
    "640": {
      "block": "test_cases.arc4_conversions.contract.CheckApp.check_static_bytes_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "642": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes32#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes32#0 (copy)"
      ]
    },
    "644": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "645": {
      "error": "expected to encode correctly",
      "op": "assert // expected to encode correctly",
      "stack_out": []
    },
    "646": {
      "retsub": true,
      "op": "retsub"
    }
  }
}