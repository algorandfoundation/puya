#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1

main_block@0:

main_block@1:
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@17

main_abi_routing@2:
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x33b3499e // method "delete_application()void"
    pushbytes 0x8d762fdf // method "check_uint64(uint64,byte[])void"
    pushbytes 0x2d329ee1 // method "check_dynamic_bytes(byte[],byte[])void"
    pushbytes 0x6a4ddf73 // method "check_string(string,byte[])void"
    pushbytes 0xd6e0b7bc // method "check_biguint(uint512,byte[])void"
    pushbytes 0xe5cacd06 // method "check_bool(bool,byte[])void"
    pushbytes 0x89af557b // method "check_dyn_array_uin64(uint64[],byte[])void"
    pushbytes 0x46e196bd // method "check_static_array_uin64_3(uint64[3],byte[])void"
    pushbytes 0xf33886da // method "check_dyn_array_struct((uint64,address)[],byte[])void"
    pushbytes 0x2595b95a // method "check_static_array_struct((uint64,address)[3],byte[])void"
    pushbytes 0x3f55266b // method "check_dyn_array_dyn_struct((uint64,address,byte[])[],byte[])void"
    pushbytes 0x7d240945 // method "check_static_array_dyn_struct((uint64,address,byte[])[3],byte[])void"
    uncover 12
    match main_delete_application_route@3 main_check_uint64_route@4 main_check_dynamic_bytes_route@5 main_check_string_route@6 main_check_biguint_route@7 main_check_bool_route@8 main_check_dyn_array_uin64_route@9 main_check_static_array_uin64_3_route@10 main_check_dyn_array_struct_route@11 main_check_static_array_struct_route@12 main_check_dyn_array_dyn_struct_route@13 main_check_static_array_dyn_struct_route@14

main_switch_case_default@15:

main_switch_case_next@16:

main_after_if_else@21:
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22:
    return

main_check_static_array_dyn_struct_route@14:
    // arc4_conversions/contract.py:268
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:268
    // @arc4.abimethod
    callsub check_static_array_dyn_struct
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_dyn_array_dyn_struct_route@13:
    // arc4_conversions/contract.py:262
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:262
    // @arc4.abimethod
    callsub check_dyn_array_dyn_struct
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_static_array_struct_route@12:
    // arc4_conversions/contract.py:256
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:256
    // @arc4.abimethod
    callsub check_static_array_struct
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_dyn_array_struct_route@11:
    // arc4_conversions/contract.py:250
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:250
    // @arc4.abimethod
    callsub check_dyn_array_struct
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_static_array_uin64_3_route@10:
    // arc4_conversions/contract.py:244
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:244
    // @arc4.abimethod
    callsub check_static_array_uin64_3
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_dyn_array_uin64_route@9:
    // arc4_conversions/contract.py:238
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:238
    // @arc4.abimethod
    callsub check_dyn_array_uin64
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_bool_route@8:
    // arc4_conversions/contract.py:234
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:234
    // @arc4.abimethod
    callsub check_bool
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_biguint_route@7:
    // arc4_conversions/contract.py:230
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:230
    // @arc4.abimethod
    callsub check_biguint
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_string_route@6:
    // arc4_conversions/contract.py:226
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:226
    // @arc4.abimethod
    callsub check_string
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_dynamic_bytes_route@5:
    // arc4_conversions/contract.py:222
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:222
    // @arc4.abimethod
    callsub check_dynamic_bytes
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_check_uint64_route@4:
    // arc4_conversions/contract.py:218
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // arc4_conversions/contract.py:218
    // @arc4.abimethod
    callsub check_uint64
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_delete_application_route@3:
    // arc4_conversions/contract.py:214
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22

main_bare_routing@17:
    // arc4_conversions/contract.py:213
    // class CheckApp(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@18

main_switch_case_default@19:

main_switch_case_next@20:
    b main_after_if_else@21

main___algopy_default_create@18:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@23:

main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__algopy_default_create@24:
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_conversions.contract.CheckApp.__puya_arc4_router__@22


// test_cases.arc4_conversions.contract.CheckApp.delete_application() -> void:
delete_application:

delete_application_block@0:
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_uint64(value: bytes, expected: bytes) -> void:
check_uint64:
    // arc4_conversions/contract.py:218-219
    // @arc4.abimethod
    // def check_uint64(self, value: arc4.UInt64, expected: Bytes) -> None:
    proto 2 0

check_uint64_block@0:
    // arc4_conversions/contract.py:220
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dynamic_bytes(value: bytes, expected: bytes) -> void:
check_dynamic_bytes:
    // arc4_conversions/contract.py:222-223
    // @arc4.abimethod
    // def check_dynamic_bytes(self, value: arc4.DynamicBytes, expected: Bytes) -> None:
    proto 2 0

check_dynamic_bytes_block@0:
    // arc4_conversions/contract.py:224
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_string(value: bytes, expected: bytes) -> void:
check_string:
    // arc4_conversions/contract.py:226-227
    // @arc4.abimethod
    // def check_string(self, value: arc4.String, expected: Bytes) -> None:
    proto 2 0

check_string_block@0:
    // arc4_conversions/contract.py:228
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_biguint(value: bytes, expected: bytes) -> void:
check_biguint:
    // arc4_conversions/contract.py:230-231
    // @arc4.abimethod
    // def check_biguint(self, value: arc4.UInt512, expected: Bytes) -> None:
    proto 2 0

check_biguint_block@0:
    // arc4_conversions/contract.py:232
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_bool(value: bytes, expected: bytes) -> void:
check_bool:
    // arc4_conversions/contract.py:234-235
    // @arc4.abimethod
    // def check_bool(self, value: arc4.Bool, expected: Bytes) -> None:
    proto 2 0

check_bool_block@0:
    // arc4_conversions/contract.py:236
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_uin64(value: bytes, expected: bytes) -> void:
check_dyn_array_uin64:
    // arc4_conversions/contract.py:238-241
    // @arc4.abimethod
    // def check_dyn_array_uin64(
    //     self, value: arc4.DynamicArray[arc4.UInt64], expected: Bytes
    // ) -> None:
    proto 2 0

check_dyn_array_uin64_block@0:
    // arc4_conversions/contract.py:242
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_uin64_3(value: bytes, expected: bytes) -> void:
check_static_array_uin64_3:
    // arc4_conversions/contract.py:244-247
    // @arc4.abimethod
    // def check_static_array_uin64_3(
    //     self, value: arc4.StaticArray[arc4.UInt64, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0

check_static_array_uin64_3_block@0:
    // arc4_conversions/contract.py:248
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_struct(value: bytes, expected: bytes) -> void:
check_dyn_array_struct:
    // arc4_conversions/contract.py:250-253
    // @arc4.abimethod
    // def check_dyn_array_struct(
    //     self, value: arc4.DynamicArray[MyStructARC4], expected: Bytes
    // ) -> None:
    proto 2 0

check_dyn_array_struct_block@0:
    // arc4_conversions/contract.py:254
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_struct(value: bytes, expected: bytes) -> void:
check_static_array_struct:
    // arc4_conversions/contract.py:256-259
    // @arc4.abimethod
    // def check_static_array_struct(
    //     self, value: arc4.StaticArray[MyStructARC4, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0

check_static_array_struct_block@0:
    // arc4_conversions/contract.py:260
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_dyn_array_dyn_struct(value: bytes, expected: bytes) -> void:
check_dyn_array_dyn_struct:
    // arc4_conversions/contract.py:262-265
    // @arc4.abimethod
    // def check_dyn_array_dyn_struct(
    //     self, value: arc4.DynamicArray[MyDynStructARC4], expected: Bytes
    // ) -> None:
    proto 2 0

check_dyn_array_dyn_struct_block@0:
    // arc4_conversions/contract.py:266
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub


// test_cases.arc4_conversions.contract.CheckApp.check_static_array_dyn_struct(value: bytes, expected: bytes) -> void:
check_static_array_dyn_struct:
    // arc4_conversions/contract.py:268-271
    // @arc4.abimethod
    // def check_static_array_dyn_struct(
    //     self, value: arc4.StaticArray[MyDynStructARC4, typing.Literal[3]], expected: Bytes
    // ) -> None:
    proto 2 0

check_static_array_dyn_struct_block@0:
    // arc4_conversions/contract.py:272
    // assert value.bytes == expected, "expected to encode correctly"
    frame_dig -2
    frame_dig -1
    ==
    assert // expected to encode correctly
    retsub
