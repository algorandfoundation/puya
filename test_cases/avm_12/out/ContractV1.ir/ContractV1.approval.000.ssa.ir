main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.avm_12.contract.ContractV1.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.avm_12.contract.ContractV1.__puya_arc4_router__() -> bool:
    block@0: // L40
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L40
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@2, * => block@3}
    block@2: // delete_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        test_cases.avm_12.contract.ContractV1.delete[routing]()
        goto block@3
    block@3: // switch_case_next_L40
        goto block@5
    block@4: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.avm_12.contract.ContractV1.__algopy_default_create()
        exit 1u
    block@5: // after_if_else_L40
        exit 0u

subroutine test_cases.avm_12.contract.ContractV1.delete[routing]() -> void:
    block@0: // L41
        test_cases.avm_12.contract.ContractV1.delete()
        exit 1u

subroutine test_cases.avm_12.contract.ContractV1.delete() -> void:
    block@0: // L41
        let tmp%0#0: uint64 = (txn RejectVersion)
        let tmp%1#0: bool = (== tmp%0#0 2u)
        (assert tmp%1#0) // can only update if caller expects this to be currently be v1
        return 

subroutine test_cases.avm_12.contract.ContractV1.__algopy_default_create() -> void:
    block@0: // L1
        return 