#pragma version 12
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xc2b8dd8a // method "test_new_ops()void"
    txna ApplicationArgs 0
    match main_test_new_ops_route@3

main_after_if_else@10:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    pushint 0 // 0
    return

main_test_new_ops_route@3:
    // avm_12/contract.py:10
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_new_ops
    pushint 1 // 1
    return

main_bare_routing@6:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// test_cases.avm_12.contract.Contract.test_new_ops() -> void:
test_new_ops:
    // avm_12/contract.py:10-11
    // @arc4.abimethod
    // def test_new_ops(self) -> None:
    proto 0 0
    // avm_12/contract.py:12-13
    // # op functions
    // assert not op.falcon_verify(b"", b"", op.bzero(1793))
    pushint 1793 // 1793
    bzero
    pushbytes 0x
    dup
    uncover 2
    falcon_verify
    !
    assert
    // avm_12/contract.py:14
    // assert op.sumhash512(b"")
    pushbytes 0x
    sumhash512
    len
    assert
    retsub
