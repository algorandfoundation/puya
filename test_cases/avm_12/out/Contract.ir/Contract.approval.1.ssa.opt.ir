main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_new_ops()void" => block@3, * => block@10}
    block@3: // test_new_ops_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.avm_12.contract.Contract.test_new_ops()
        let test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L9
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.avm_12.contract.Contract.__algopy_default_create()
        let test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L9
        let test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.avm_12.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#0 <- block@3, test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#1 <- block@7, test_cases.avm_12.contract.Contract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.avm_12.contract.Contract.test_new_ops() -> void:
    block@0: // L10
        let tmp%0#0: bytes = (bzero 1793u)
        let tmp%1#0: bool = (falcon_verify 0x 0x tmp%0#0)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: bytes = (sumhash512 0x)
        let tmp%4#0: uint64 = (len tmp%3#0)
        (assert tmp%4#0)
        return 

subroutine test_cases.avm_12.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 