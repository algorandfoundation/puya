main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_falcon_verify()void" => block@4, method "test_reject_version()void" => block@5, * => block@8}
    block@4: // test_falcon_verify_route_L5
        test_cases.avm_12.contract.Contract.test_falcon_verify[routing]()
        goto block@8
    block@5: // test_reject_version_route_L9
        test_cases.avm_12.contract.Contract.test_reject_version[routing]()
        goto block@8
    block@8: // after_if_else_L4
        fail
    block@9: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.avm_12.contract.Contract.test_falcon_verify[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (bzero 1793u)
        let tmp%1#0: bool = (falcon_verify 0x 0x tmp%0#0)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        exit 1u

subroutine test_cases.avm_12.contract.Contract.test_reject_version[routing]() -> void:
    block@0: // L9
        itxn_begin
        ((itxn_field ClearStateProgramPages) DIEBQw==)
        ((itxn_field ApprovalProgramPages) DDEbQQAagASg6BhyNhoAjgEAAQAxGYEEEjEYEERCAAsxGRQxGBQQRIEBQzFEgQESRIEBQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app_v0_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let (value%0#0: uint64, check%0#0: bool) = ((app_params_get AppVersion) app_v0_txn.CreatedApplicationID#0)
        (assert check%0#0) // application exists
        let tmp%0#0: bool = (! value%0#0)
        (assert tmp%0#0) // should be version 0
        itxn_begin
        ((itxn_field ClearStateProgramPages) DIEBQw==)
        ((itxn_field ApprovalProgramPages) DDEbQQAagAQkN408NhoAjgEAAQAxGYEFEjEYEERCAAsxGRQxGBQQRIEBQzFEgQISRIEBQw==)
        ((itxn_field OnCompletion) UpdateApplication)
        ((itxn_field RejectVersion) 1u)
        ((itxn_field ApplicationID) app_v0_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "update()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let (value%1#0: uint64, check%1#0: bool) = ((app_params_get AppVersion) app_v0_txn.CreatedApplicationID#0)
        (assert check%1#0) // application exists
        let tmp%1#0: bool = (== value%1#0 1u)
        (assert tmp%1#0) // should be version 1
        itxn_begin
        ((itxn_field RejectVersion) 2u)
        ((itxn_field ApplicationID) app_v0_txn.CreatedApplicationID#0)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u