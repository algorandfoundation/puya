{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAQA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAGkD;;;AAAT;AAAV;;AAAK;;AAAtB;;AAAA;AAAJ;AAAP;AACqB;;AAAd;AAAA;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b block@0"
    },
    "8": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "11": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz __algopy_default_create@6",
      "stack_out": []
    },
    "18": {
      "op": "b abi_routing@2"
    },
    "21": {
      "block": "abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0xc2b8dd8a // method \"test_new_ops()void\"",
      "defined_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_new_ops()void)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(test_new_ops()void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match test_new_ops_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b switch_case_default@4"
    },
    "39": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "42": {
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "b after_if_else@7"
    },
    "45": {
      "block": "after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "46": {
      "block": "test_new_ops_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "52": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "53": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "54": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "test_cases.avm_12.contract.Contract.test_new_ops[routing]",
      "op": "callsub test_new_ops"
    },
    "59": {
      "op": "b switch_case_next@5"
    },
    "62": {
      "block": "__algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "64": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "66": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "69": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "70": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "71": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "72": {
      "op": "b block@9"
    },
    "75": {
      "block": "block@9",
      "stack_in": [],
      "op": "b after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@10"
    },
    "78": {
      "block": "after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "subroutine": "test_cases.avm_12.contract.Contract.test_new_ops[routing]",
      "params": {},
      "block": "test_new_ops",
      "stack_in": [],
      "op": "b test_new_ops_block@0"
    },
    "83": {
      "block": "test_new_ops_block@0",
      "stack_in": [],
      "callsub": "test_cases.avm_12.contract.Contract.test_new_ops",
      "op": "callsub test_cases.avm_12.contract.Contract.test_new_ops"
    },
    "86": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    },
    "88": {
      "subroutine": "test_cases.avm_12.contract.Contract.test_new_ops",
      "params": {},
      "block": "test_cases.avm_12.contract.Contract.test_new_ops",
      "stack_in": [],
      "op": "b test_cases.avm_12.contract.Contract.test_new_ops_block@0"
    },
    "91": {
      "block": "test_cases.avm_12.contract.Contract.test_new_ops_block@0",
      "stack_in": [],
      "op": "pushint 1793 // 1793",
      "defined_out": [
        "1793"
      ],
      "stack_out": [
        "1793"
      ]
    },
    "94": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "97": {
      "op": "pushbytes 0x",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "0x"
      ]
    },
    "99": {
      "op": "uncover 2",
      "stack_out": [
        "0x",
        "0x",
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "falcon_verify",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "102": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "op": "pushbytes 0x",
      "stack_out": [
        "0x"
      ]
    },
    "106": {
      "op": "sumhash512",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "107": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "109": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "110": {
      "op": "assert",
      "stack_out": []
    },
    "111": {
      "retsub": true,
      "op": "retsub"
    }
  }
}