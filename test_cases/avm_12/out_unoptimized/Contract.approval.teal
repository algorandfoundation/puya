#pragma version 12
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    b block@0

block@0:
    b block@1

block@1:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

create_ClearState:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

call_ClearState:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

create_OptIn:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

call_OptIn:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    b *NOT_IMPLEMENTED

create_NoOp:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@22

after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@22:
    intc_0 // 1
    return

else_body@8:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txna ApplicationArgs 0
    pushbytes 0xc2b8dd8a // method "test_new_ops()void"
    uncover 1
    match test_new_ops_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    err // this contract does not implement the given ABI method for call NoOp

test_new_ops_route@3:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    callsub test_new_ops
    b switch_case_next@5


// test_cases.avm_12.contract.Contract.test_new_ops[routing]() -> void:
test_new_ops:
    b test_new_ops_block@0

test_new_ops_block@0:
    // avm_12/contract.py:10
    // @arc4.abimethod
    callsub test_cases.avm_12.contract.Contract.test_new_ops
    intc_0 // 1
    return


// test_cases.avm_12.contract.Contract.test_new_ops() -> void:
test_cases.avm_12.contract.Contract.test_new_ops:
    b test_cases.avm_12.contract.Contract.test_new_ops_block@0

test_cases.avm_12.contract.Contract.test_new_ops_block@0:
    // avm_12/contract.py:12-13
    // # op functions
    // assert not op.falcon_verify(b"", b"", op.bzero(1793))
    pushint 1793 // 1793
    bzero
    pushbytes 0x
    pushbytes 0x
    uncover 2
    falcon_verify
    !
    assert
    // avm_12/contract.py:14
    // assert op.sumhash512(b"")
    pushbytes 0x
    sumhash512
    len
    intc_1 // 0
    !=
    assert
    retsub
