#pragma version 12
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@6
    b abi_routing@2

abi_routing@2:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    txna ApplicationArgs 0
    pushbytes 0xc2b8dd8a // method "test_new_ops()void"
    uncover 1
    match test_new_ops_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    b after_if_else@7

after_if_else@7:
    // avm_12/contract.py:9
    // class Contract(ARC4Contract, avm_version=12):
    err

test_new_ops_route@3:
    // avm_12/contract.py:10
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub test_new_ops
    b switch_case_next@5

__algopy_default_create@6:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@9

block@9:
    b after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@10

after_inlined_test_cases.avm_12.contract.Contract.__algopy_default_create@10:
    intc_1 // 1
    return


// test_cases.avm_12.contract.Contract.test_new_ops[routing]() -> void:
test_new_ops:
    b test_new_ops_block@0

test_new_ops_block@0:
    // avm_12/contract.py:10
    // @arc4.abimethod
    callsub test_cases.avm_12.contract.Contract.test_new_ops
    intc_1 // 1
    return


// test_cases.avm_12.contract.Contract.test_new_ops() -> void:
test_cases.avm_12.contract.Contract.test_new_ops:
    b test_cases.avm_12.contract.Contract.test_new_ops_block@0

test_cases.avm_12.contract.Contract.test_new_ops_block@0:
    // avm_12/contract.py:12-13
    // # op functions
    // assert not op.falcon_verify(b"", b"", op.bzero(1793))
    pushint 1793 // 1793
    bzero
    pushbytes 0x
    pushbytes 0x
    uncover 2
    falcon_verify
    !
    assert
    // avm_12/contract.py:14
    // assert op.sumhash512(b"")
    pushbytes 0x
    sumhash512
    len
    intc_0 // 0
    !=
    assert
    retsub
