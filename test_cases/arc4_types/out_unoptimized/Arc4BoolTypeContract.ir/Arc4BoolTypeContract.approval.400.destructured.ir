main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(tmp%0#0, tmp%1#0)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        let select%0#0: bool = (select 1u 0u tmp%3#0)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u select%0#0)
        let aggregate%as_Encoded(bool8)%2#1: Encoded(bool8) = aggregate%encoded_bool%2#1
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#1
        let aggregate%get_bit%0#1: bool = (getbit tmp%4#0 0u)
        let tmp%5#0: bool = aggregate%get_bit%0#1
        (assert tmp%5#0) // conditional expr
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%3#1: Encoded(bool8) = aggregate%encoded_bool%3#1
        let tmp%6#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#1
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%4#1: Encoded(bool8) = aggregate%encoded_bool%4#1
        let tmp%7#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#1
        let aggregate%encoded_bool%5#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%5#1: Encoded(bool8) = aggregate%encoded_bool%5#1
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#1
        let aggregate%encoded_bool%6#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%6#1: Encoded(bool8) = aggregate%encoded_bool%6#1
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%6#1
        let aggregate%encoded_bool%7#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%7#1: Encoded(bool8) = aggregate%encoded_bool%7#1
        let tmp%10#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%7#1
        let aggregate%encoded_bool%8#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%8#1: Encoded(bool8) = aggregate%encoded_bool%8#1
        let tmp%11#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%8#1
        let aggregate%encoded_bool%9#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%9#1: Encoded(bool8) = aggregate%encoded_bool%9#1
        let tmp%12#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%9#1
        let aggregate%encoded_bool%10#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%10#1: Encoded(bool8) = aggregate%encoded_bool%10#1
        let tmp%13#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%10#1
        let aggregate%encoded_bool%11#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%11#1: Encoded(bool8) = aggregate%encoded_bool%11#1
        let tmp%14#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%11#1
        let aggregate%encoded_bool%12#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%12#1: Encoded(bool8) = aggregate%encoded_bool%12#1
        let tmp%15#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%12#1
        let aggregate%encoded_bool%13#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%13#1: Encoded(bool8) = aggregate%encoded_bool%13#1
        let tmp%16#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%13#1
        let aggregate%encoded_bool%14#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%14#1: Encoded(bool8) = aggregate%encoded_bool%14#1
        let tmp%17#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%14#1
        let aggregate%get_bit%1#1: uint64 = (getbit tmp%7#0 0u)
        let aggregate%set_bit%0#1: Encoded(bool8) = (setbit tmp%6#0 1u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%8#0 0u)
        let aggregate%set_bit%1#1: Encoded(bool8) = (setbit aggregate%set_bit%0#1 2u aggregate%get_bit%2#1)
        let aggregate%get_bit%3#1: uint64 = (getbit tmp%9#0 0u)
        let aggregate%set_bit%2#1: Encoded(bool8) = (setbit aggregate%set_bit%1#1 3u aggregate%get_bit%3#1)
        let aggregate%get_bit%4#1: uint64 = (getbit tmp%10#0 0u)
        let aggregate%set_bit%3#1: Encoded(bool8) = (setbit aggregate%set_bit%2#1 4u aggregate%get_bit%4#1)
        let aggregate%get_bit%5#1: uint64 = (getbit tmp%11#0 0u)
        let aggregate%set_bit%4#1: Encoded(bool8) = (setbit aggregate%set_bit%3#1 5u aggregate%get_bit%5#1)
        let aggregate%get_bit%6#1: uint64 = (getbit tmp%12#0 0u)
        let aggregate%set_bit%5#1: Encoded(bool8) = (setbit aggregate%set_bit%4#1 6u aggregate%get_bit%6#1)
        let aggregate%get_bit%7#1: uint64 = (getbit tmp%13#0 0u)
        let aggregate%set_bit%6#1: Encoded(bool8) = (setbit aggregate%set_bit%5#1 7u aggregate%get_bit%7#1)
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%set_bit%6#1)
        let aggregate%get_bit%8#1: uint64 = (getbit tmp%15#0 0u)
        let aggregate%set_bit%7#1: Encoded(bool8) = (setbit tmp%14#0 1u aggregate%get_bit%8#1)
        let aggregate%get_bit%9#1: uint64 = (getbit tmp%16#0 0u)
        let aggregate%set_bit%8#1: Encoded(bool8) = (setbit aggregate%set_bit%7#1 2u aggregate%get_bit%9#1)
        let aggregate%get_bit%10#1: uint64 = (getbit tmp%17#0 0u)
        let aggregate%set_bit%9#1: Encoded(bool8) = (setbit aggregate%set_bit%8#1 3u aggregate%get_bit%10#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%set_bit%9#1)
        let aggregate%as_Encoded(bool1[12])%0#1: Encoded(bool1[12]) = aggregate%encoded%1#1
        let encoded_array%0#0: Encoded(bool1[12]) = aggregate%as_Encoded(bool1[12])%0#1
        let static_boolean_array#0: Encoded(bool1[12]) = encoded_array%0#0
        let tmp%18#0: bool = (== static_boolean_array#0 0xfff0)
        (assert tmp%18#0)
        let aggregate%lt%0#1: bool = (< 0u 12u)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%get_bit%11#1: uint64 = (getbit static_boolean_array#0 0u)
        let array_item%0#0: bool = aggregate%get_bit%11#1
        let aggregate%encoded_bool%15#1: bytes[1] = (setbit 0x00 0u array_item%0#0)
        let values%0#0: Encoded(bool8) = aggregate%encoded_bool%15#1
        let aggregate%encoded_bool%16#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%15#1: Encoded(bool8) = aggregate%encoded_bool%16#1
        let tmp%19#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%15#1
        let tmp%20#0: bool = (== values%0#0 tmp%19#0)
        (assert tmp%20#0) // Single boolean can be unpacked
        let tmp%21#0: uint64 = (- 12u 1u)
        let aggregate%lt%1#1: bool = (< tmp%21#0 12u)
        (assert aggregate%lt%1#1) // index access is out of bounds
        let aggregate%get_bit%12#1: uint64 = (getbit static_boolean_array#0 tmp%21#0)
        let array_item%1#0: bool = aggregate%get_bit%12#1
        let aggregate%encoded_bool%17#1: bytes[1] = (setbit 0x00 0u array_item%1#0)
        let values%1#0: Encoded(bool8) = aggregate%encoded_bool%17#1
        let aggregate%encoded_bool%18#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%16#1: Encoded(bool8) = aggregate%encoded_bool%18#1
        let tmp%22#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%16#1
        let tmp%23#0: bool = (== values%1#0 tmp%22#0)
        (assert tmp%23#0) // Single boolean can be unpacked
        let aggregate%encoded_bool%19#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%17#1: Encoded(bool8) = aggregate%encoded_bool%19#1
        let tmp%24#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%17#1
        let aggregate%encoded_bool%20#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%18#1: Encoded(bool8) = aggregate%encoded_bool%20#1
        let tmp%25#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%18#1
        let aggregate%encoded_bool%21#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%19#1: Encoded(bool8) = aggregate%encoded_bool%21#1
        let tmp%26#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%19#1
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%get_bit%13#1: uint64 = (getbit tmp%25#0 0u)
        let aggregate%set_bit%10#1: Encoded(bool8) = (setbit tmp%24#0 1u aggregate%get_bit%13#1)
        let aggregate%get_bit%14#1: uint64 = (getbit tmp%26#0 0u)
        let aggregate%set_bit%11#1: Encoded(bool8) = (setbit aggregate%set_bit%10#1 2u aggregate%get_bit%14#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%0#1 aggregate%set_bit%11#1)
        let aggregate%as_Encoded(len+bool1[])%0#1: Encoded(len+bool1[]) = aggregate%encoded%2#1
        let encoded_array%1#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#1
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = encoded_array%1#0
        let tmp%27#0: bool = (== dynamic_boolean_array#0 0x0003a0)
        (assert tmp%27#0)
        let tmp%28#0: Encoded(len+bool1[]) = test_cases.arc4_types.bool.get_arr()
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = tmp%28#0
        let aggregate%encoded_bool%22#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%20#1: Encoded(bool8) = aggregate%encoded_bool%22#1
        let tmp%29#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%20#1
        let aggregate%encoded_bool%23#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%21#1: Encoded(bool8) = aggregate%encoded_bool%23#1
        let tmp%30#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%21#1
        let aggregate%encoded_bool%24#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%22#1: Encoded(bool8) = aggregate%encoded_bool%24#1
        let tmp%31#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%22#1
        let aggregate%encoded_bool%25#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%23#1: Encoded(bool8) = aggregate%encoded_bool%25#1
        let tmp%32#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%23#1
        let aggregate%encoded_bool%26#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%24#1: Encoded(bool8) = aggregate%encoded_bool%26#1
        let tmp%33#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%24#1
        let aggregate%encoded%3#1: bytes = (concat 0x tmp%29#0)
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 tmp%30#0)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 tmp%31#0)
        let aggregate%encoded%6#1: bytes = (concat aggregate%encoded%5#1 tmp%32#0)
        let aggregate%encoded%7#1: bytes = (concat aggregate%encoded%6#1 tmp%33#0)
        let aggregate%as_Encoded(bool8[])%0#1: Encoded(bool8[]) = aggregate%encoded%7#1
        let tmp%34#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#1
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_boolean_array#0, tmp%34#0, 5u, 8u)
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%35#0: bool = (== dynamic_boolean_array#0 0x0005a8)
        (assert tmp%35#0)
        let aggregate%encoded_bool%27#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%25#1: Encoded(bool8) = aggregate%encoded_bool%27#1
        let tmp%36#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%25#1
        let aggregate%get_bit%15#1: bool = (getbit tmp%36#0 0u)
        let tmp%37#0: bool = aggregate%get_bit%15#1
        let tmp%38#0: bool = (== tmp%37#0 1u)
        (assert tmp%38#0)
        let aggregate%encoded_bool%28#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%26#1: Encoded(bool8) = aggregate%encoded_bool%28#1
        let tmp%39#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%26#1
        let aggregate%get_bit%16#1: bool = (getbit tmp%39#0 0u)
        let tmp%40#0: bool = aggregate%get_bit%16#1
        let tmp%41#0: bool = (!= tmp%40#0 1u)
        (assert tmp%41#0)
        let aggregate%encoded_bool%29#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%27#1: Encoded(bool8) = aggregate%encoded_bool%29#1
        let tmp%42#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%27#1
        let aggregate%get_bit%17#1: bool = (getbit tmp%42#0 0u)
        let tmp%43#0: bool = aggregate%get_bit%17#1
        let tmp%44#0: bool = (== tmp%43#0 0u)
        (assert tmp%44#0)
        let aggregate%encoded_bool%30#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%28#1: Encoded(bool8) = aggregate%encoded_bool%30#1
        let tmp%45#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%28#1
        let aggregate%get_bit%18#1: bool = (getbit tmp%45#0 0u)
        let tmp%46#0: bool = aggregate%get_bit%18#1
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#0: bytes = tmp%12#0
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let tmp%17#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let result#0: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#0 1u)
        let write_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#0 read_step#0)
        let read_offset#0: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.arc4_types.bool.get_arr() -> Encoded(len+bool1[]):
    block@0: // L72
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%as_Encoded(len+bool1[])%0#1: Encoded(len+bool1[]) = aggregate%len_u16%0#1
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#1
        return encoded_array%0#0

subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: Encoded(bool8), false: Encoded(bool8)) -> bool:
    block@0: // L60
        let aggregate%get_bit%0#1: bool = (getbit true#0 0u)
        let tmp%0#0: bool = aggregate%get_bit%0#1
        (assert tmp%0#0)
        let aggregate%get_bit%1#1: bool = (getbit false#0 0u)
        let tmp%1#0: bool = aggregate%get_bit%1#1
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let aggregate%get_bit%2#1: bool = (getbit true#0 0u)
        let tmp%3#0: bool = aggregate%get_bit%2#1
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let tmp%5#0: bool = (== true#0 tmp%4#0)
        (assert tmp%5#0)
        let aggregate%get_bit%3#1: bool = (getbit false#0 0u)
        let tmp%6#0: bool = aggregate%get_bit%3#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u tmp%6#0)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%7#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let tmp%8#0: bool = (== false#0 tmp%7#0)
        (assert tmp%8#0)
        let aggregate%get_bit%4#1: bool = (getbit true#0 0u)
        let tmp%9#0: bool = aggregate%get_bit%4#1
        return tmp%9#0