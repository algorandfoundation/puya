main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let encoded_bool%0#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%1#0: bytes = (setbit 0x00 0u 0u)
        test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(encoded_bool%0#0, encoded_bool%1#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let to_encode%0#0: bool = (select 1u 0u tmp%1#0)
        let encoded_bool%2#0: bytes = (setbit 0x00 0u to_encode%0#0)
        let tmp%2#0: bool = (getbit encoded_bool%2#0 0u)
        (assert tmp%2#0) // conditional expr
        let encoded_bool%3#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%4#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%5#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%6#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%7#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%8#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%9#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%10#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%11#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%12#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%13#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%14#0: bytes = (setbit 0x00 0u 1u)
        let array_head_and_tail%0#0: bytes = (concat 0x encoded_bool%3#0)
        let is_true%0#0: uint64 = (getbit encoded_bool%4#0 0u)
        let array_head_and_tail%1#0: bytes = (setbit array_head_and_tail%0#0 1u is_true%0#0)
        let is_true%1#0: uint64 = (getbit encoded_bool%5#0 0u)
        let array_head_and_tail%2#0: bytes = (setbit array_head_and_tail%1#0 2u is_true%1#0)
        let is_true%2#0: uint64 = (getbit encoded_bool%6#0 0u)
        let array_head_and_tail%3#0: bytes = (setbit array_head_and_tail%2#0 3u is_true%2#0)
        let is_true%3#0: uint64 = (getbit encoded_bool%7#0 0u)
        let array_head_and_tail%4#0: bytes = (setbit array_head_and_tail%3#0 4u is_true%3#0)
        let is_true%4#0: uint64 = (getbit encoded_bool%8#0 0u)
        let array_head_and_tail%5#0: bytes = (setbit array_head_and_tail%4#0 5u is_true%4#0)
        let is_true%5#0: uint64 = (getbit encoded_bool%9#0 0u)
        let array_head_and_tail%6#0: bytes = (setbit array_head_and_tail%5#0 6u is_true%5#0)
        let is_true%6#0: uint64 = (getbit encoded_bool%10#0 0u)
        let array_head_and_tail%7#0: bytes = (setbit array_head_and_tail%6#0 7u is_true%6#0)
        let array_head_and_tail%8#0: bytes = (concat array_head_and_tail%7#0 encoded_bool%11#0)
        let is_true%7#0: uint64 = (getbit encoded_bool%12#0 0u)
        let array_head_and_tail%9#0: bytes = (setbit array_head_and_tail%8#0 9u is_true%7#0)
        let is_true%8#0: uint64 = (getbit encoded_bool%13#0 0u)
        let array_head_and_tail%10#0: bytes = (setbit array_head_and_tail%9#0 10u is_true%8#0)
        let is_true%9#0: uint64 = (getbit encoded_bool%14#0 0u)
        let array_head_and_tail%11#0: bytes = (setbit array_head_and_tail%10#0 11u is_true%9#0)
        let array_data%0#0: bytes = (concat 0x array_head_and_tail%11#0)
        let static_boolean_array#0: bytes = array_data%0#0
        let tmp%3#0: bool = (== static_boolean_array#0 0xfff0)
        (assert tmp%3#0)
        let array_head_and_tail%12#0: bytes = static_boolean_array#0
        let is_true%10#0: uint64 = (getbit array_head_and_tail%12#0 0u)
        let encoded_bool%15#0: bytes = (setbit 0x00 0u is_true%10#0)
        let encoded_bool%16#0: bytes = (setbit 0x00 0u 1u)
        let tmp%4#0: bool = (== encoded_bool%15#0 encoded_bool%16#0)
        (assert tmp%4#0) // Single boolean can be unpacked
        let tmp%5#0: uint64 = (- 12u 1u)
        let array_head_and_tail%13#0: bytes = static_boolean_array#0
        let index_is_in_bounds%0#0: bool = (< tmp%5#0 12u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let is_true%11#0: uint64 = (getbit array_head_and_tail%13#0 tmp%5#0)
        let encoded_bool%17#0: bytes = (setbit 0x00 0u is_true%11#0)
        let encoded_bool%18#0: bytes = (setbit 0x00 0u 1u)
        let tmp%6#0: bool = (== encoded_bool%17#0 encoded_bool%18#0)
        (assert tmp%6#0) // Single boolean can be unpacked
        let encoded_bool%19#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%20#0: bytes = (setbit 0x00 0u 0u)
        let encoded_bool%21#0: bytes = (setbit 0x00 0u 1u)
        let array_head_and_tail%14#0: bytes = (concat 0x encoded_bool%19#0)
        let is_true%12#0: uint64 = (getbit encoded_bool%20#0 0u)
        let array_head_and_tail%15#0: bytes = (setbit array_head_and_tail%14#0 1u is_true%12#0)
        let is_true%13#0: uint64 = (getbit encoded_bool%21#0 0u)
        let array_head_and_tail%16#0: bytes = (setbit array_head_and_tail%15#0 2u is_true%13#0)
        let array_data%1#0: bytes = (concat 0x0003 array_head_and_tail%16#0)
        let dynamic_boolean_array#0: bytes = array_data%1#0
        let tmp%7#0: bool = (== dynamic_boolean_array#0 0x0003a0)
        (assert tmp%7#0)
        let dynamic_boolean_array#0: bytes = test_cases.arc4_types.bool.get_arr()
        let encoded_bool%22#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%23#0: bytes = (setbit 0x00 0u 0u)
        let encoded_bool%24#0: bytes = (setbit 0x00 0u 1u)
        let encoded_bool%25#0: bytes = (setbit 0x00 0u 0u)
        let encoded_bool%26#0: bytes = (setbit 0x00 0u 1u)
        let data%0#0: bytes = (concat 0x encoded_bool%22#0)
        let data%1#0: bytes = (concat data%0#0 encoded_bool%23#0)
        let data%2#0: bytes = (concat data%1#0 encoded_bool%24#0)
        let data%3#0: bytes = (concat data%2#0 encoded_bool%25#0)
        let data%4#0: bytes = (concat data%3#0 encoded_bool%26#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_boolean_array#0, data%4#0, 5u, 8u)
        let dynamic_boolean_array#0: bytes = concat_result%0#0
        let tmp%8#0: bool = (== dynamic_boolean_array#0 0x0005a8)
        (assert tmp%8#0)
        let encoded_bool%27#0: bytes = (setbit 0x00 0u 1u)
        let tmp%9#0: bool = (getbit encoded_bool%27#0 0u)
        let tmp%10#0: bool = (== tmp%9#0 1u)
        (assert tmp%10#0)
        let encoded_bool%28#0: bytes = (setbit 0x00 0u 0u)
        let tmp%11#0: bool = (getbit encoded_bool%28#0 0u)
        let tmp%12#0: bool = (!= tmp%11#0 1u)
        (assert tmp%12#0)
        let encoded_bool%29#0: bytes = (setbit 0x00 0u 0u)
        let tmp%13#0: bool = (getbit encoded_bool%29#0 0u)
        let tmp%14#0: bool = (== tmp%13#0 0u)
        (assert tmp%14#0)
        let encoded_bool%30#0: bytes = (setbit 0x00 0u 1u)
        let tmp%15#0: bool = (getbit encoded_bool%30#0 0u)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#0: bytes = (concat result#0 tmp%5#0)
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%6#0: bool = (< write_offset#0 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%7#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.arc4_types.bool.get_arr() -> bytes:
    block@0: // L72
        let array_data%0#0: bytes = (concat 0x0000 0x)
        return array_data%0#0

subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> bool:
    block@0: // L60
        let tmp%0#0: bool = (getbit true#0 0u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (getbit false#0 0u)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let to_encode%0#0: bool = (getbit true#0 0u)
        let encoded_bool%0#0: bytes = (setbit 0x00 0u to_encode%0#0)
        let tmp%3#0: bool = (== true#0 encoded_bool%0#0)
        (assert tmp%3#0)
        let to_encode%1#0: bool = (getbit false#0 0u)
        let encoded_bool%1#0: bytes = (setbit 0x00 0u to_encode%1#0)
        let tmp%4#0: bool = (== false#0 encoded_bool%1#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (getbit true#0 0u)
        return tmp%5#0