main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(as_Encoded(bool8)%0#0, as_Encoded(bool8)%1#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let select%0#0: bool = (select 1u 0u tmp%1#0)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u select%0#0)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let tmp%2#0: bool = (getbit as_Encoded(bool8)%2#0 0u)
        (assert tmp%2#0) // conditional expr
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%4#0: Encoded(bool8) = encoded_bool%4#0
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%5#0: Encoded(bool8) = encoded_bool%5#0
        let encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%6#0: Encoded(bool8) = encoded_bool%6#0
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%7#0: Encoded(bool8) = encoded_bool%7#0
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%8#0: Encoded(bool8) = encoded_bool%8#0
        let encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%9#0: Encoded(bool8) = encoded_bool%9#0
        let encoded_bool%10#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%10#0: Encoded(bool8) = encoded_bool%10#0
        let encoded_bool%11#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%11#0: Encoded(bool8) = encoded_bool%11#0
        let encoded_bool%12#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%12#0: Encoded(bool8) = encoded_bool%12#0
        let encoded_bool%13#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%13#0: Encoded(bool8) = encoded_bool%13#0
        let encoded_bool%14#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%14#0: Encoded(bool8) = encoded_bool%14#0
        let encoded%0#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%3#0)
        let get_bit%0#0: uint64 = (getbit as_Encoded(bool8)%4#0 0u)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded%0#0 1u get_bit%0#0)
        let get_bit%1#0: uint64 = (getbit as_Encoded(bool8)%5#0 0u)
        let set_bit%1#0: Encoded((bool1)) = (setbit set_bit%0#0 2u get_bit%1#0)
        let get_bit%2#0: uint64 = (getbit as_Encoded(bool8)%6#0 0u)
        let set_bit%2#0: Encoded((bool1)) = (setbit set_bit%1#0 3u get_bit%2#0)
        let get_bit%3#0: uint64 = (getbit as_Encoded(bool8)%7#0 0u)
        let set_bit%3#0: Encoded((bool1)) = (setbit set_bit%2#0 4u get_bit%3#0)
        let get_bit%4#0: uint64 = (getbit as_Encoded(bool8)%8#0 0u)
        let set_bit%4#0: Encoded((bool1)) = (setbit set_bit%3#0 5u get_bit%4#0)
        let get_bit%5#0: uint64 = (getbit as_Encoded(bool8)%9#0 0u)
        let set_bit%5#0: Encoded((bool1)) = (setbit set_bit%4#0 6u get_bit%5#0)
        let get_bit%6#0: uint64 = (getbit as_Encoded(bool8)%10#0 0u)
        let set_bit%6#0: Encoded((bool1)) = (setbit set_bit%5#0 7u get_bit%6#0)
        let get_bit%7#0: uint64 = (getbit as_Encoded(bool8)%11#0 0u)
        let set_bit%7#0: bytes = (setbit 0x00 0u get_bit%7#0)
        let encoded%1#0: Encoded((bool1,bool1)) = (concat set_bit%6#0 set_bit%7#0)
        let get_bit%8#0: uint64 = (getbit as_Encoded(bool8)%12#0 0u)
        let set_bit%8#0: Encoded((bool1,bool1)) = (setbit encoded%1#0 9u get_bit%8#0)
        let get_bit%9#0: uint64 = (getbit as_Encoded(bool8)%13#0 0u)
        let set_bit%9#0: Encoded((bool1,bool1)) = (setbit set_bit%8#0 10u get_bit%9#0)
        let get_bit%10#0: uint64 = (getbit as_Encoded(bool8)%14#0 0u)
        let set_bit%10#0: Encoded((bool1,bool1)) = (setbit set_bit%9#0 11u get_bit%10#0)
        let encoded%2#0: Encoded(bool1[12]) = (concat set_bit%10#0 0x)
        let static_boolean_array#0: Encoded(bool1[12]) = encoded%2#0
        let tmp%3#0: bool = (== static_boolean_array#0 0xfff0)
        (assert tmp%3#0)
        let lt%0#0: bool = (< 0u 12u)
        (assert lt%0#0) // index access is out of bounds
        let is_true%0#0: bool = (getbit static_boolean_array#0 0u)
        let array%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let array%as_Encoded(bool8)%0#1: Encoded(bool8) = array%encoded_bool%0#1
        let tmp%4#0: Encoded(bool8) = array%as_Encoded(bool8)%0#1
        let encoded_bool%15#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%15#0: Encoded(bool8) = encoded_bool%15#0
        let tmp%5#0: bool = (== tmp%4#0 as_Encoded(bool8)%15#0)
        (assert tmp%5#0) // Single boolean can be unpacked
        let tmp%6#0: uint64 = (- 12u 1u)
        let lt%1#0: bool = (< tmp%6#0 12u)
        (assert lt%1#0) // index access is out of bounds
        let is_true%1#0: bool = (getbit static_boolean_array#0 tmp%6#0)
        let array%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let array%as_Encoded(bool8)%1#1: Encoded(bool8) = array%encoded_bool%1#1
        let tmp%7#0: Encoded(bool8) = array%as_Encoded(bool8)%1#1
        let encoded_bool%16#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%16#0: Encoded(bool8) = encoded_bool%16#0
        let tmp%8#0: bool = (== tmp%7#0 as_Encoded(bool8)%16#0)
        (assert tmp%8#0) // Single boolean can be unpacked
        let encoded_bool%17#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%17#0: Encoded(bool8) = encoded_bool%17#0
        let encoded_bool%18#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%18#0: Encoded(bool8) = encoded_bool%18#0
        let encoded_bool%19#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%19#0: Encoded(bool8) = encoded_bool%19#0
        let encoded%3#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%17#0)
        let get_bit%11#0: uint64 = (getbit as_Encoded(bool8)%18#0 0u)
        let set_bit%11#0: Encoded((bool1)) = (setbit encoded%3#0 1u get_bit%11#0)
        let get_bit%12#0: uint64 = (getbit as_Encoded(bool8)%19#0 0u)
        let set_bit%12#0: Encoded((bool1)) = (setbit set_bit%11#0 2u get_bit%12#0)
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%4#0: bytes = (concat len_u16%0#0 set_bit%12#0)
        let encoded%5#0: Encoded(len+bool1[]) = (concat encoded%4#0 0x)
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = encoded%5#0
        let tmp%9#0: bool = (== dynamic_boolean_array#0 0x0003a0)
        (assert tmp%9#0)
        let tmp%10#0: Encoded(len+bool1[]) = test_cases.arc4_types.bool.get_arr()
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = tmp%10#0
        let encoded_bool%20#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%20#0: Encoded(bool8) = encoded_bool%20#0
        let encoded_bool%21#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%21#0: Encoded(bool8) = encoded_bool%21#0
        let encoded_bool%22#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%22#0: Encoded(bool8) = encoded_bool%22#0
        let encoded_bool%23#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%23#0: Encoded(bool8) = encoded_bool%23#0
        let encoded_bool%24#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%24#0: Encoded(bool8) = encoded_bool%24#0
        let encoded%6#0: Encoded((bool8)) = (concat 0x as_Encoded(bool8)%20#0)
        let encoded%7#0: Encoded((bool8,bool8)) = (concat encoded%6#0 as_Encoded(bool8)%21#0)
        let encoded%8#0: Encoded((bool8,bool8,bool8)) = (concat encoded%7#0 as_Encoded(bool8)%22#0)
        let encoded%9#0: Encoded((bool8,bool8,bool8,bool8)) = (concat encoded%8#0 as_Encoded(bool8)%23#0)
        let encoded%10#0: Encoded((bool8,bool8,bool8,bool8,bool8)) = (concat encoded%9#0 as_Encoded(bool8)%24#0)
        let encoded%11#0: Encoded(bool8[]) = (concat encoded%10#0 0x)
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_boolean_array#0, encoded%11#0, 5u, 8u)
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%11#0: bool = (== dynamic_boolean_array#0 0x0005a8)
        (assert tmp%11#0)
        let encoded_bool%25#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%25#0: Encoded(bool8) = encoded_bool%25#0
        let tmp%12#0: bool = (getbit as_Encoded(bool8)%25#0 0u)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        (assert tmp%13#0)
        let encoded_bool%26#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%26#0: Encoded(bool8) = encoded_bool%26#0
        let tmp%14#0: bool = (getbit as_Encoded(bool8)%26#0 0u)
        let tmp%15#0: bool = (!= tmp%14#0 1u)
        (assert tmp%15#0)
        let encoded_bool%27#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%27#0: Encoded(bool8) = encoded_bool%27#0
        let tmp%16#0: bool = (getbit as_Encoded(bool8)%27#0 0u)
        let tmp%17#0: bool = (== tmp%16#0 0u)
        (assert tmp%17#0)
        let encoded_bool%28#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%28#0: Encoded(bool8) = encoded_bool%28#0
        let tmp%18#0: bool = (getbit as_Encoded(bool8)%28#0 0u)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#0: bytes = tmp%12#0
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let tmp%17#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let result#0: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#0 1u)
        let write_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#0 read_step#0)
        let read_offset#0: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.arc4_types.bool.get_arr() -> Encoded(len+bool1[]):
    block@0: // L72
        let as_bytes%0#0: bytes[8] = (itob 0u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%0#0: bytes = (concat len_u16%0#0 0x)
        let encoded%1#0: Encoded(len+bool1[]) = (concat encoded%0#0 0x)
        return encoded%1#0

subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: Encoded(bool8), false: Encoded(bool8)) -> bool:
    block@0: // L60
        let tmp%0#0: bool = (getbit true#0 0u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (getbit false#0 0u)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (getbit true#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let tmp%4#0: bool = (== true#0 as_Encoded(bool8)%0#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (getbit false#0 0u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%5#0)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let tmp%6#0: bool = (== false#0 as_Encoded(bool8)%1#0)
        (assert tmp%6#0)
        let tmp%7#0: bool = (getbit true#0 0u)
        return tmp%7#0