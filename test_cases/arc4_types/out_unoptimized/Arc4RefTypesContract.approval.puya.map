{
  "version": 3,
  "sources": [
    "../reference_types.py"
  ],
  "mappings": ";;;;;;AAOsC;;AACL;;AAAlB;;AAAA;AAAP;AAG+B;;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAlB;AAAA;;AAG4C;;AAA5C;;AACO;AAAA;;;AAAA;;;AAAsC;AAAA;AAAtC;;;AAAA;;;;;;;;;;AAAP;;AAAA;AAEO;;AAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAlB;AAAP;AACO;;AAAP;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.reference_types.Arc4RefTypesContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3": {
      "op": "b main_block@0"
    },
    "6": {
      "block": "main_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0"
      ]
    },
    "8": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "10": {
      "op": "dig 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0",
        "sender_address#0",
        "sender_address#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "sender_address#0 (copy)"
      ]
    },
    "12": {
      "op": "==",
      "defined_out": [
        "sender_address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "tmp%0#0"
      ]
    },
    "13": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "sender_address#0"
      ]
    },
    "14": {
      "op": "txn Sender",
      "defined_out": [
        "awst_tmp%0#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "awst_tmp%0#0"
      ]
    },
    "16": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_Encoded(uint8[32])%2#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%2#0",
        "awst_tmp%0#0"
      ]
    },
    "17": {
      "op": "len",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "sender_address#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%1#0"
      ]
    },
    "18": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "reinterpret_Encoded(uint8[32])%2#0",
        "sender_address#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%1#0",
        "32"
      ]
    },
    "20": {
      "op": "==",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "sender_address#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%2#0"
      ]
    },
    "21": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "reinterpret_Encoded(uint8[32])%2#0"
      ]
    },
    "22": {
      "op": "dup",
      "defined_out": [
        "checked_address#0",
        "checked_address#0 (copy)",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "sender_address#0",
        "checked_address#0",
        "checked_address#0 (copy)"
      ]
    },
    "23": {
      "op": "cover 2",
      "defined_out": [
        "checked_address#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "sender_address#0",
        "checked_address#0"
      ]
    },
    "25": {
      "op": "txn Sender",
      "defined_out": [
        "checked_address#0",
        "reinterpret_Encoded(uint8[32])%3#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "reinterpret_Encoded(uint8[32])%3#0"
      ]
    },
    "27": {
      "op": "cover 2",
      "defined_out": [
        "checked_address#0",
        "sender_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "sender_address#0",
        "checked_address#0"
      ]
    },
    "29": {
      "op": "==",
      "defined_out": [
        "checked_address#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "33": {
      "op": "b main_and_contd@1"
    },
    "36": {
      "block": "main_and_contd@1",
      "stack_in": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ],
      "op": "dup2",
      "defined_out": [
        "checked_address#0",
        "unchecked_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "checked_address#0",
        "tmp%4#0",
        "unchecked_address#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "tmp%4#0"
      ]
    },
    "38": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "41": {
      "op": "b main_bool_true@2"
    },
    "44": {
      "block": "main_bool_true@2",
      "stack_in": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "1"
      ]
    },
    "46": {
      "op": "bury 3",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "48": {
      "op": "b main_bool_merge@4"
    },
    "51": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "and_result%0#0"
      ]
    },
    "53": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "54": {
      "op": "global ZeroAddress",
      "defined_out": [
        "and_result%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "tmp%5#0"
      ]
    },
    "56": {
      "op": "pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "and_result%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "tmp%5#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "90": {
      "op": "==",
      "defined_out": [
        "and_result%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "tmp%6#0"
      ]
    },
    "91": {
      "op": "assert",
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "92": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "1"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "95": {
      "block": "main_bool_false@3",
      "stack_in": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ],
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0",
        "0"
      ]
    },
    "97": {
      "op": "bury 3",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "99": {
      "op": "b main_bool_merge@4"
    }
  }
}