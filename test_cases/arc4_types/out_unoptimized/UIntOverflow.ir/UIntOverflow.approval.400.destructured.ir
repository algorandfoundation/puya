main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@8
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_uint8()void" => block@4, method "test_uint16()void" => block@5, method "test_uint32()void" => block@6, * => block@7}
    block@4: // test_uint8_route_L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]()
        goto block@7
    block@5: // test_uint16_route_L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]()
        goto block@7
    block@6: // test_uint32_route_L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]()
        goto block@7
    block@7: // switch_case_next_L4
        goto block@9
    block@8: // create_NoOp_L4
        goto block@9
    block@9: // after_if_else_L4
        goto block@11
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@13
    block@13: // L1
        goto block@14
    block@14: // after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__algopy_default_create_L1
        exit 1u
    block@11: // after_if_else_L4
        exit 0u
    block@12: // after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]() -> void:
    block@0: // L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]() -> void:
    block@0: // L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]() -> void:
    block@0: // L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 256u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint8%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 7u 1u)
        let aggregate%as_Encoded(uint8)%0#0: Encoded(uint8) = aggregate%uint8%0#0
        let tmp%2#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#0
        let too_big#0: Encoded(uint8) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x01)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16() -> void:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 65536u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 6u 2u)
        let aggregate%as_Encoded(uint16)%0#0: Encoded(uint16) = aggregate%uint16%0#0
        let tmp%2#0: Encoded(uint16) = aggregate%as_Encoded(uint16)%0#0
        let too_big#0: Encoded(uint16) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x0001)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32() -> void:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 4294967296u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 32u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint32%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 4u 4u)
        let aggregate%as_Encoded(uint32)%0#0: Encoded(uint32) = aggregate%uint32%0#0
        let tmp%2#0: Encoded(uint32) = aggregate%as_Encoded(uint32)%0#0
        let too_big#0: Encoded(uint32) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#0) // this should not happen
        return 