{
  "version": 3,
  "sources": [
    "../bool_eval.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAQmB;AAAA;AAAU;AAAV;AAAJ;AAAA;AAAP;AACO;AAAA;AAAU;AAAV;AAAA;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;;;AAAA;AAAA;AAAP;AAEW;;AAAJ;AAAA;AAAP;AACoB;;AAAb;;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;;AAAA;AAAA;AAAP;AAEW;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;AAAA;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;AAAJ;AAAA;AAAP;AACO;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEc;AAAA;AAAA;AACP;AAAA;AAAA;AAAP;AACA;;;AAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;AAAP;AAEsB;AAAA;AAAU;AAAV;AAAf;AAAA;AAAP;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x00 0x0000 0x0000000000000000"
    },
    "22": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "23": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "24": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "25": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "26": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "27": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "28": {
      "op": "assert",
      "stack_out": []
    },
    "29": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "31": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "0x00",
        "0",
        "1"
      ]
    },
    "32": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "33": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "34": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "35": {
      "op": "assert",
      "stack_out": []
    },
    "36": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "37": {
      "op": "dup",
      "stack_out": [
        "0x0000",
        "0x0000"
      ]
    },
    "38": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "assert",
      "stack_out": []
    },
    "40": {
      "op": "pushbytes 0x00012e",
      "defined_out": [
        "0x00012e"
      ],
      "stack_out": [
        "0x00012e"
      ]
    },
    "45": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "0x00012e",
        "0x0000"
      ]
    },
    "46": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "47": {
      "op": "assert",
      "stack_out": []
    },
    "48": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "52": {
      "op": "assert",
      "stack_out": []
    },
    "53": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "57": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": []
    },
    "59": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "60": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0x"
      ]
    },
    "61": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "62": {
      "op": "assert",
      "stack_out": []
    },
    "63": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "66": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x01",
        "0x"
      ]
    },
    "67": {
      "op": "b!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "68": {
      "op": "assert",
      "stack_out": []
    },
    "69": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "0x0000"
      ]
    },
    "70": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "71": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "72": {
      "op": "assert",
      "stack_out": []
    },
    "73": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "0x0001"
      ]
    },
    "77": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0001",
        "0x"
      ]
    },
    "78": {
      "op": "b!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "79": {
      "op": "assert",
      "stack_out": []
    },
    "80": {
      "op": "pushbytes 0x00000000",
      "defined_out": [
        "0x00000000"
      ],
      "stack_out": [
        "0x00000000"
      ]
    },
    "86": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000",
        "0x"
      ]
    },
    "87": {
      "op": "b==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "88": {
      "op": "assert",
      "stack_out": []
    },
    "89": {
      "op": "pushbytes 0x00000001",
      "defined_out": [
        "0x00000001"
      ],
      "stack_out": [
        "0x00000001"
      ]
    },
    "95": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000001",
        "0x"
      ]
    },
    "96": {
      "op": "b!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "97": {
      "op": "assert",
      "stack_out": []
    },
    "98": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "99": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000",
        "0x"
      ]
    },
    "100": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "101": {
      "op": "assert",
      "stack_out": []
    },
    "102": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "112": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000001",
        "0x"
      ]
    },
    "113": {
      "op": "b!=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": []
    },
    "115": {
      "op": "pushbytes 0x00000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000"
      ]
    },
    "133": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000",
        "0x"
      ]
    },
    "134": {
      "op": "b==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "135": {
      "op": "assert",
      "stack_out": []
    },
    "136": {
      "op": "pushbytes 0x00000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000001"
      ]
    },
    "154": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000001",
        "0x"
      ]
    },
    "155": {
      "op": "b!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "156": {
      "op": "assert",
      "stack_out": []
    },
    "157": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "192": {
      "op": "b==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "193": {
      "op": "assert",
      "stack_out": []
    },
    "194": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "228": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "229": {
      "op": "b!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "230": {
      "op": "assert",
      "stack_out": []
    },
    "231": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "297": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "298": {
      "op": "b==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "299": {
      "op": "assert",
      "stack_out": []
    },
    "300": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "366": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "367": {
      "op": "b!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "368": {
      "op": "assert",
      "stack_out": []
    },
    "369": {
      "op": "pushbytes 0x000000",
      "defined_out": [
        "0x000000"
      ],
      "stack_out": [
        "0x000000"
      ]
    },
    "374": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000",
        "0x"
      ]
    },
    "375": {
      "op": "b==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "376": {
      "op": "assert",
      "stack_out": []
    },
    "377": {
      "op": "pushbytes 0x000001",
      "defined_out": [
        "0x000001"
      ],
      "stack_out": [
        "0x000001"
      ]
    },
    "382": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000001",
        "0x"
      ]
    },
    "383": {
      "op": "b!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "384": {
      "op": "assert",
      "stack_out": []
    },
    "385": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "450": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "451": {
      "op": "b==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "452": {
      "op": "assert",
      "stack_out": []
    },
    "453": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "518": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "519": {
      "op": "b!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "520": {
      "op": "assert",
      "stack_out": []
    },
    "521": {
      "op": "pushbytes 0x000000000000",
      "defined_out": [
        "0x000000000000"
      ],
      "stack_out": [
        "0x000000000000"
      ]
    },
    "529": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000",
        "0x"
      ]
    },
    "530": {
      "op": "b==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "531": {
      "op": "assert",
      "stack_out": []
    },
    "532": {
      "op": "pushbytes 0x0002540be400",
      "defined_out": [
        "0x0002540be400"
      ],
      "stack_out": [
        "0x0002540be400"
      ]
    },
    "540": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0002540be400",
        "0x"
      ]
    },
    "541": {
      "op": "b!=",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "542": {
      "op": "assert",
      "stack_out": []
    },
    "543": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "607": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "608": {
      "op": "b==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "609": {
      "op": "assert",
      "stack_out": []
    },
    "610": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ]
    },
    "674": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
        "0x"
      ]
    },
    "675": {
      "op": "b!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "676": {
      "op": "assert",
      "stack_out": []
    },
    "677": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "0x0000"
      ]
    },
    "678": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "681": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "0x0000"
      ]
    },
    "682": {
      "op": "==",
      "defined_out": [
        "dynamic_arr#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "tmp%32#0"
      ]
    },
    "683": {
      "op": "assert",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "684": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "687": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "688": {
      "op": "bytec_3 // 0x0000000000000000",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "689": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "690": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "691": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "692": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "693": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "694": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "695": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "696": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "698": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "699": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "700": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "703": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "704": {
      "op": "concat",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "705": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "dynamic_arr#0",
        "0x0000"
      ]
    },
    "706": {
      "op": "!=",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "707": {
      "op": "assert",
      "stack_out": []
    },
    "708": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "710": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "711": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "712": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "encoded_bool%2#0",
        "0x00"
      ]
    },
    "713": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "714": {
      "op": "assert",
      "stack_out": []
    },
    "715": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "716": {
      "op": "return",
      "stack_out": []
    }
  }
}