{
  "version": 3,
  "sources": [
    "../bool_eval.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAQmB;AAAA;AAAU;AAAV;AAAJ;AAAA;AAAP;AACO;AAAA;AAAU;AAAV;AAAA;AAAA;AAAP;AAEW;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAJ;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAP;AAEW;;AAAJ;AAAA;AAAP;AACoB;;AAAb;;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;;AAAA;AAAA;AAAP;AAEW;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;AAAA;AAAA;AAAP;AAEW;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;AAAJ;AAAA;AAAP;AACO;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEc;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACP;AAAA;AAAA;AAAP;AACA;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AACO;AAAA;AAAP;AAEsB;AAAA;AAAU;AAAV;AAAf;AAAA;AAAP;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x00 0x0000 0x2e 0x0000000000000000"
    },
    "24": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "25": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "26": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "27": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0"
      ]
    },
    "28": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "0x00"
      ]
    },
    "29": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "30": {
      "op": "assert",
      "stack_out": []
    },
    "31": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "32": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "33": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "0x00",
        "0",
        "1"
      ]
    },
    "34": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%1#0"
      ]
    },
    "35": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "36": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "37": {
      "op": "assert",
      "stack_out": []
    },
    "38": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "39": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "40": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "41": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "44": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "length_uint16%0#0",
        "0x"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "46": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "0x0000"
      ]
    },
    "47": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "48": {
      "op": "assert",
      "stack_out": []
    },
    "49": {
      "op": "bytec_3 // 0x2e",
      "defined_out": [
        "0x2e"
      ],
      "stack_out": [
        "0x2e"
      ]
    },
    "50": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "51": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0"
      ],
      "stack_out": [
        "as_bytes%1#0"
      ]
    },
    "52": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "55": {
      "op": "bytec_3 // 0x2e",
      "stack_out": [
        "length_uint16%1#0",
        "0x2e"
      ]
    },
    "56": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "57": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "0x0000"
      ]
    },
    "58": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "assert",
      "stack_out": []
    },
    "60": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "64": {
      "op": "assert",
      "stack_out": []
    },
    "65": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "67": {
      "op": "global ZeroAddress",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%7#0"
      ]
    },
    "69": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "70": {
      "op": "assert",
      "stack_out": []
    },
    "71": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "72": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00",
        "0x"
      ]
    },
    "73": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "74": {
      "op": "assert",
      "stack_out": []
    },
    "75": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "78": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x01",
        "0x"
      ]
    },
    "79": {
      "op": "b!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "80": {
      "op": "assert",
      "stack_out": []
    },
    "81": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "0x0000"
      ]
    },
    "82": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "83": {
      "op": "b==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "84": {
      "op": "assert",
      "stack_out": []
    },
    "85": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "0x0001"
      ]
    },
    "89": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0001",
        "0x"
      ]
    },
    "90": {
      "op": "b!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "91": {
      "op": "assert",
      "stack_out": []
    },
    "92": {
      "op": "pushbytes 0x00000000",
      "defined_out": [
        "0x00000000"
      ],
      "stack_out": [
        "0x00000000"
      ]
    },
    "98": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000",
        "0x"
      ]
    },
    "99": {
      "op": "b==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "100": {
      "op": "assert",
      "stack_out": []
    },
    "101": {
      "op": "pushbytes 0x00000001",
      "defined_out": [
        "0x00000001"
      ],
      "stack_out": [
        "0x00000001"
      ]
    },
    "107": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000001",
        "0x"
      ]
    },
    "108": {
      "op": "b!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "109": {
      "op": "assert",
      "stack_out": []
    },
    "110": {
      "op": "bytec 4 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "112": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000",
        "0x"
      ]
    },
    "113": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": []
    },
    "115": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "125": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000001",
        "0x"
      ]
    },
    "126": {
      "op": "b!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "pushbytes 0x00000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000"
      ]
    },
    "146": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000",
        "0x"
      ]
    },
    "147": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "148": {
      "op": "assert",
      "stack_out": []
    },
    "149": {
      "op": "pushbytes 0x00000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000001"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000001",
        "0x"
      ]
    },
    "168": {
      "op": "b!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": []
    },
    "170": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "204": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "205": {
      "op": "b==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "206": {
      "op": "assert",
      "stack_out": []
    },
    "207": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "242": {
      "op": "b!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "243": {
      "op": "assert",
      "stack_out": []
    },
    "244": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "310": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "311": {
      "op": "b==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "312": {
      "op": "assert",
      "stack_out": []
    },
    "313": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "379": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "380": {
      "op": "b!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "381": {
      "op": "assert",
      "stack_out": []
    },
    "382": {
      "op": "pushbytes 0x000000",
      "defined_out": [
        "0x000000"
      ],
      "stack_out": [
        "0x000000"
      ]
    },
    "387": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000",
        "0x"
      ]
    },
    "388": {
      "op": "b==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "389": {
      "op": "assert",
      "stack_out": []
    },
    "390": {
      "op": "pushbytes 0x000001",
      "defined_out": [
        "0x000001"
      ],
      "stack_out": [
        "0x000001"
      ]
    },
    "395": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000001",
        "0x"
      ]
    },
    "396": {
      "op": "b!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "397": {
      "op": "assert",
      "stack_out": []
    },
    "398": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "463": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "464": {
      "op": "b==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "465": {
      "op": "assert",
      "stack_out": []
    },
    "466": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "531": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "532": {
      "op": "b!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "533": {
      "op": "assert",
      "stack_out": []
    },
    "534": {
      "op": "pushbytes 0x000000000000",
      "defined_out": [
        "0x000000000000"
      ],
      "stack_out": [
        "0x000000000000"
      ]
    },
    "542": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000",
        "0x"
      ]
    },
    "543": {
      "op": "b==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "544": {
      "op": "assert",
      "stack_out": []
    },
    "545": {
      "op": "pushbytes 0x0002540be400",
      "defined_out": [
        "0x0002540be400"
      ],
      "stack_out": [
        "0x0002540be400"
      ]
    },
    "553": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0002540be400",
        "0x"
      ]
    },
    "554": {
      "op": "b!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "555": {
      "op": "assert",
      "stack_out": []
    },
    "556": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "620": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "621": {
      "op": "b==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "622": {
      "op": "assert",
      "stack_out": []
    },
    "623": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ]
    },
    "687": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
        "0x"
      ]
    },
    "688": {
      "op": "b!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "689": {
      "op": "assert",
      "stack_out": []
    },
    "690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "691": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0"
      ],
      "stack_out": [
        "as_bytes%2#0"
      ]
    },
    "692": {
      "op": "extract 6 2",
      "defined_out": [
        "len_u16%0#0"
      ],
      "stack_out": [
        "len_u16%0#0"
      ]
    },
    "695": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "len_u16%0#0",
        "0x"
      ]
    },
    "696": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "697": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%0#0",
        "0x"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "699": {
      "op": "dup",
      "defined_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "700": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "0x0000"
      ]
    },
    "701": {
      "op": "==",
      "defined_out": [
        "dynamic_arr#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "tmp%31#0"
      ]
    },
    "702": {
      "op": "assert",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "703": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "dynamic_arr#0",
        "0x"
      ]
    },
    "704": {
      "op": "bytec 4 // 0x0000000000000000",
      "stack_out": [
        "dynamic_arr#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "dynamic_arr#0",
        "encoded%2#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "encoded%2#0"
      ]
    },
    "707": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "dynamic_arr#0",
        "encoded%2#0",
        "0x"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "dynamic_arr#0",
        "encoded%3#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "encoded%3#0"
      ]
    },
    "709": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0"
      ]
    },
    "710": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ],
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "711": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_to_end%0#0"
      ]
    },
    "714": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0"
      ]
    },
    "715": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0",
        "8"
      ]
    },
    "717": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "718": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%3#0"
      ]
    },
    "719": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "723": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "724": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "726": {
      "op": "replace3",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "727": {
      "op": "bytec_2 // 0x0000",
      "stack_out": [
        "dynamic_arr#0",
        "0x0000"
      ]
    },
    "728": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "729": {
      "op": "assert",
      "stack_out": []
    },
    "730": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "731": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "732": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "733": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%2#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%2#0"
      ]
    },
    "734": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "as_Encoded(bool8)%2#0",
        "0x00"
      ]
    },
    "735": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "736": {
      "op": "assert",
      "stack_out": []
    },
    "737": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "738": {
      "op": "return",
      "stack_out": []
    }
  }
}