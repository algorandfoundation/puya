{
  "version": 3,
  "sources": [
    "../bool_eval.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAQmB;AAAA;AAAU;AAAV;AAAJ;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAU;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAEW;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAEW;;AAAJ;AAAA;AAAP;AACoB;;AAAb;;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;AAEW;;;;AAAJ;AAAA;AAAP;AACO;;;;AAAA;AAAA;AAAP;AAEW;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;AAAA;AAAA;AAAP;AAEW;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;AAAJ;AAAA;AAAP;AACO;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;AAAA;AAAA;AAAP;AAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAEc;AAAA;AAAA;;;AACP;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACA;AAAmB;AAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AACO;AAAA;AAAA;;;AAAA;AAAP;AAEO;AAAA;AAAA;AAAA;AAAe;AAAA;AAAU;AAAV;AAAf;AAAP;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x00 \".\" 0x0000000000000000"
    },
    "21": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "22": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "23": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "24": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "26": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "27": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "28": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "assert",
      "stack_out": []
    },
    "31": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "32": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "33": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "0x00",
        "0",
        "1"
      ]
    },
    "34": {
      "op": "setbit",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%3#0",
        "0x00"
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0x00",
        "0"
      ]
    },
    "37": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "38": {
      "op": "setbit",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "39": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "40": {
      "op": "assert",
      "stack_out": []
    },
    "41": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "42": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1"
      ],
      "stack_out": [
        "aggregate%length%0#1"
      ]
    },
    "43": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "44": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#1"
      ]
    },
    "47": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "\"\""
      ]
    },
    "48": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "49": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%6#0",
        "\"\""
      ]
    },
    "50": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%length%1#1"
      ]
    },
    "51": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_bytes%1#1"
      ]
    },
    "52": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%length_uint16%1#1"
      ]
    },
    "55": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%6#0",
        "aggregate%length_uint16%1#1",
        "\"\""
      ]
    },
    "56": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "57": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": []
    },
    "59": {
      "op": "bytec_2 // \".\"",
      "defined_out": [
        "\".\""
      ],
      "stack_out": [
        "\".\""
      ]
    },
    "60": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#1"
      ],
      "stack_out": [
        "aggregate%length%2#1"
      ]
    },
    "61": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#1"
      ]
    },
    "62": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%2#1"
      ]
    },
    "65": {
      "op": "bytec_2 // \".\"",
      "stack_out": [
        "aggregate%length_uint16%2#1",
        "\".\""
      ]
    },
    "66": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "67": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%9#0",
        "\"\""
      ]
    },
    "68": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%length%3#1"
      ]
    },
    "69": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%as_bytes%3#1"
      ]
    },
    "70": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%length_uint16%3#1"
      ]
    },
    "73": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%9#0",
        "aggregate%length_uint16%3#1",
        "\"\""
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "75": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "76": {
      "op": "assert",
      "stack_out": []
    },
    "77": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "80": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "81": {
      "op": "assert",
      "stack_out": []
    },
    "82": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "84": {
      "op": "global ZeroAddress",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ]
    },
    "86": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "87": {
      "op": "assert",
      "stack_out": []
    },
    "88": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "89": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0x"
      ]
    },
    "90": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "91": {
      "op": "assert",
      "stack_out": []
    },
    "92": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "95": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x01",
        "0x"
      ]
    },
    "96": {
      "op": "b!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "97": {
      "op": "assert",
      "stack_out": []
    },
    "98": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "102": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "103": {
      "op": "b==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "104": {
      "op": "assert",
      "stack_out": []
    },
    "105": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "0x0001"
      ]
    },
    "109": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0001",
        "0x"
      ]
    },
    "110": {
      "op": "b!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "111": {
      "op": "assert",
      "stack_out": []
    },
    "112": {
      "op": "pushbytes 0x00000000",
      "defined_out": [
        "0x00000000"
      ],
      "stack_out": [
        "0x00000000"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000",
        "0x"
      ]
    },
    "119": {
      "op": "b==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "120": {
      "op": "assert",
      "stack_out": []
    },
    "121": {
      "op": "pushbytes 0x00000001",
      "defined_out": [
        "0x00000001"
      ],
      "stack_out": [
        "0x00000001"
      ]
    },
    "127": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000001",
        "0x"
      ]
    },
    "128": {
      "op": "b!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "129": {
      "op": "assert",
      "stack_out": []
    },
    "130": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "131": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000",
        "0x"
      ]
    },
    "132": {
      "op": "b==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "133": {
      "op": "assert",
      "stack_out": []
    },
    "134": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "144": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000001",
        "0x"
      ]
    },
    "145": {
      "op": "b!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "146": {
      "op": "assert",
      "stack_out": []
    },
    "147": {
      "op": "pushbytes 0x00000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000"
      ]
    },
    "165": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000",
        "0x"
      ]
    },
    "166": {
      "op": "b==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "167": {
      "op": "assert",
      "stack_out": []
    },
    "168": {
      "op": "pushbytes 0x00000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000001"
      ]
    },
    "186": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000001",
        "0x"
      ]
    },
    "187": {
      "op": "b!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "188": {
      "op": "assert",
      "stack_out": []
    },
    "189": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "223": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "224": {
      "op": "b==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "225": {
      "op": "assert",
      "stack_out": []
    },
    "226": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "260": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "261": {
      "op": "b!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "262": {
      "op": "assert",
      "stack_out": []
    },
    "263": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "329": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "330": {
      "op": "b==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "331": {
      "op": "assert",
      "stack_out": []
    },
    "332": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "398": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "399": {
      "op": "b!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "400": {
      "op": "assert",
      "stack_out": []
    },
    "401": {
      "op": "pushbytes 0x000000",
      "defined_out": [
        "0x000000"
      ],
      "stack_out": [
        "0x000000"
      ]
    },
    "406": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000",
        "0x"
      ]
    },
    "407": {
      "op": "b==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "408": {
      "op": "assert",
      "stack_out": []
    },
    "409": {
      "op": "pushbytes 0x000001",
      "defined_out": [
        "0x000001"
      ],
      "stack_out": [
        "0x000001"
      ]
    },
    "414": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000001",
        "0x"
      ]
    },
    "415": {
      "op": "b!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "416": {
      "op": "assert",
      "stack_out": []
    },
    "417": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "482": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "483": {
      "op": "b==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "484": {
      "op": "assert",
      "stack_out": []
    },
    "485": {
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ],
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
      ]
    },
    "550": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x"
      ]
    },
    "551": {
      "op": "b!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "552": {
      "op": "assert",
      "stack_out": []
    },
    "553": {
      "op": "pushbytes 0x000000000000",
      "defined_out": [
        "0x000000000000"
      ],
      "stack_out": [
        "0x000000000000"
      ]
    },
    "561": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x000000000000",
        "0x"
      ]
    },
    "562": {
      "op": "b==",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "563": {
      "op": "assert",
      "stack_out": []
    },
    "564": {
      "op": "pushbytes 0x0002540be400",
      "defined_out": [
        "0x0002540be400"
      ],
      "stack_out": [
        "0x0002540be400"
      ]
    },
    "572": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0002540be400",
        "0x"
      ]
    },
    "573": {
      "op": "b!=",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "574": {
      "op": "assert",
      "stack_out": []
    },
    "575": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "639": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "640": {
      "op": "b==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "641": {
      "op": "assert",
      "stack_out": []
    },
    "642": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ],
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100"
      ]
    },
    "706": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
        "0x"
      ]
    },
    "707": {
      "op": "b!=",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "708": {
      "op": "assert",
      "stack_out": []
    },
    "709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "710": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#1"
      ]
    },
    "711": {
      "op": "extract 6 2",
      "defined_out": [
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dynamic_arr#0",
        "0"
      ]
    },
    "715": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "aggregate%as_bytes%5#1"
      ]
    },
    "716": {
      "op": "extract 6 2",
      "defined_out": [
        "dynamic_arr#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "encoded_array%1#0"
      ]
    },
    "719": {
      "op": "dig 1",
      "defined_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "encoded_array%1#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "721": {
      "op": "==",
      "defined_out": [
        "dynamic_arr#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "tmp%39#0"
      ]
    },
    "722": {
      "op": "assert",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "723": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "dynamic_arr#0",
        "0x"
      ]
    },
    "724": {
      "op": "bytec_3 // 0x0000000000000000",
      "stack_out": [
        "dynamic_arr#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "725": {
      "op": "concat",
      "defined_out": [
        "dynamic_arr#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "tmp%40#0"
      ]
    },
    "726": {
      "op": "dig 1",
      "stack_out": [
        "dynamic_arr#0",
        "tmp%40#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "tmp%40#0"
      ]
    },
    "729": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "concat%0#0"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "concat%0#0",
        "dynamic_arr#0"
      ]
    },
    "731": {
      "op": "intc_0 // 0",
      "stack_out": [
        "concat%0#0",
        "dynamic_arr#0",
        "0"
      ]
    },
    "732": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "733": {
      "op": "intc_1 // 1",
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "734": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "add%0#0"
      ]
    },
    "735": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "736": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "739": {
      "op": "swap",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "740": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "741": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "743": {
      "op": "replace3",
      "stack_out": [
        "dynamic_arr#0"
      ]
    },
    "744": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dynamic_arr#0",
        "0"
      ]
    },
    "745": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "aggregate%as_bytes%6#1"
      ]
    },
    "746": {
      "op": "extract 6 2",
      "defined_out": [
        "dynamic_arr#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "dynamic_arr#0",
        "encoded_array%2#0"
      ]
    },
    "749": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "750": {
      "op": "assert",
      "stack_out": []
    },
    "751": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "0x00"
      ]
    },
    "752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "753": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0",
        "0"
      ]
    },
    "754": {
      "op": "setbit",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "755": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%42#0",
        "0x00"
      ]
    },
    "756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%42#0",
        "0x00",
        "0"
      ]
    },
    "757": {
      "op": "dup",
      "stack_out": [
        "tmp%42#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "758": {
      "op": "setbit",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "759": {
      "op": "==",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "760": {
      "op": "assert",
      "stack_out": []
    },
    "761": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "762": {
      "op": "return",
      "stack_out": []
    }
  }
}