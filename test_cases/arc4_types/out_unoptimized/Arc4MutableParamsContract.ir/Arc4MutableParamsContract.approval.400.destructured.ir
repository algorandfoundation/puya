main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
        return 1u

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
    block@0: // L33
        let aggregate%head%0#1: bytes = (concat 0x 0x01)
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 0x02)
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 0x03)
        let aggregate%head%3#1: bytes = (concat aggregate%head%2#1 0x04)
        let aggregate%as_Encoded(uint8[4])%0#1: Encoded(uint8[4]) = aggregate%head%3#1
        let encoded_array%0#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#1
        let my_array#0: Encoded(uint8[4]) = encoded_array%0#0
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%length%0#1: uint64 = (len 0x4861707079)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x4861707079)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x44617973)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x44617973)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%head%4#1: bytes = (concat 0x tmp%0#0)
        let aggregate%head%5#1: bytes = (concat aggregate%head%4#1 0x32)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%head%6#1: bytes = (concat aggregate%head%5#1 aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 6u aggregate%data_length%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%head%7#1: bytes = (concat aggregate%head%6#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%7#1 encoded%0#0)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 encoded%1#0)
        let aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%0#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%concat%1#1
        let tmp%1#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%0#1
        let my_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = tmp%1#0
        let my_array_copy#0: Encoded(uint8[4]) = my_array#0
        let my_struct_copy#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = my_struct#0
        let aggregate%write_offset%0#1: uint64 = (* 2u 1u)
        let aggregate%updated_array%0#1: bytes = (replace3 my_array#0 aggregate%write_offset%0#1 0x05)
        let updated_array%0#0: Encoded(uint8[4]) = aggregate%updated_array%0#1
        let my_array#0: Encoded(uint8[4]) = updated_array%0#0
        let aggregate%bytes_offset%1#1: uint64 = (* 2u 1u)
        let aggregate%encoded_element%1#1: bytes = (extract3 my_array_copy#0 aggregate%bytes_offset%1#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%1#1
        let reinterpret_biguint%0#0: biguint = array_item%0#0
        let tmp%2#0: bool = (b== reinterpret_biguint%0#0 0x03)
        (assert tmp%2#0) // my_array_copy should be unchanged
        let aggregate%bytes_offset%2#1: uint64 = (* 2u 1u)
        let aggregate%encoded_element%2#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%2#1 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%2#1
        let reinterpret_biguint%2#0: biguint = array_item%1#0
        let tmp%3#0: bool = (b== reinterpret_biguint%2#0 0x05)
        (assert tmp%3#0) // my_array should be mutated
        let (other_routine%0#0: bool, other_routine%1#0: bool, other_routine%2#0: Encoded(uint8[4]), other_routine%3#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#0, my_struct#0)
        let my_array#0: Encoded(uint8[4]) = other_routine%2#0
        let my_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = other_routine%3#0
        let t#0: bool = other_routine%0#0
        let f#0: bool = other_routine%1#0
        (assert t#0)
        let tmp%4#0: bool = (! f#0)
        (assert tmp%4#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%3#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%3#1 1u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8) = aggregate%encoded_element%3#1
        let reinterpret_biguint%4#0: biguint = array_item%2#0
        let tmp%5#0: bool = (b== reinterpret_biguint%4#0 0x05)
        (assert tmp%5#0) // my_array has been mutated by the subroutine
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 my_struct#0 2u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 my_struct#0 4u)
        let aggregate%substring3%0#1: bytes = (substring3 my_struct#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let aggregate%length%2#1: uint64 = (len 0x41415252474821)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x41415252474821)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let tmp%6#0: bool = (== tuple_item%0#0 encoded%2#0)
        (assert tmp%6#0) // my_struct has been mutated by the subroutine
        let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: Encoded(uint8[4]), other_routine%7#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array_copy#0, my_struct_copy#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%4#1: bytes = (extract3 my_array_copy#0 aggregate%bytes_offset%4#1 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8) = aggregate%encoded_element%4#1
        let reinterpret_biguint%6#0: biguint = array_item%3#0
        let tmp%7#0: bool = (b== reinterpret_biguint%6#0 0x02)
        (assert tmp%7#0) // my_array_copy should not be mutated by the subroutine
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 my_struct_copy#0 2u)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 my_struct_copy#0 4u)
        let aggregate%substring3%1#1: bytes = (substring3 my_struct_copy#0 aggregate%extract_uint16%2#1 aggregate%extract_uint16%3#1)
        let tuple_item%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let aggregate%length%3#1: uint64 = (len 0x4861707079)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x4861707079)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let tmp%8#0: bool = (== tuple_item%1#0 encoded%3#0)
        (assert tmp%8#0) // my_struct_copy should not be mutated by the subroutine
        let my_array_copy_2#0: Encoded(uint8[4]) = my_array_copy#0
        let (other_routine_2%0#0: Encoded(uint8[4]), other_routine_2%1#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
        let my_array_copy_2#0: Encoded(uint8[4]) = other_routine_2%0#0
        let aggregate%bytes_offset%5#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%5#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%5#1 1u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint8) = aggregate%encoded_element%5#1
        let reinterpret_biguint%8#0: biguint = array_item%4#0
        let tmp%9#0: bool = (b== reinterpret_biguint%8#0 0x01)
        (assert tmp%9#0) // my_array_copy_2 should have original value
        let (other_routine_2%2#0: Encoded(uint8[4]), other_routine_2%3#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
        let my_array_copy_2#0: Encoded(uint8[4]) = other_routine_2%3#0
        let aggregate%bytes_offset%6#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%6#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%6#1 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint8) = aggregate%encoded_element%6#1
        let reinterpret_biguint%10#0: biguint = array_item%5#0
        let tmp%10#0: bool = (b== reinterpret_biguint%10#0 0x0a)
        (assert tmp%10#0) // my_array_copy_2 should have mutated value
        let my_array_copy_3#0: Encoded(uint8[4]) = my_array_copy#0
        let originals.0#0: Encoded(uint8[4]) = my_array#0
        let originals.1#0: Encoded(uint8[4]) = my_array_copy_2#0
        let originals.2#0: Encoded(uint8[4]) = my_array_copy_3#0
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#0, my_array_copy_2#0, my_array_copy_3#0, 0u, 1u)
        let tmp%11#0: bool = (== originals.0#0 my_array#0)
        let tmp%12#0: bool = (== originals.1#0 my_array_copy_2#0)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        let tmp%14#0: bool = (== originals.2#0 my_array_copy_3#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let (mutate_tuple_items_and_reassign%3#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%4#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#0, my_array_copy_2#0, my_array_copy_3#0, 100u, 1u)
        let my_array#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%3#0
        let my_array_copy_2#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%4#0
        let my_array_copy_3#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%5#0
        let aggregate%bytes_offset%7#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%7#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%7#1 1u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8) = aggregate%encoded_element%7#1
        let reinterpret_biguint%12#0: biguint = array_item%6#0
        let tmp%16#0: bool = (b== reinterpret_biguint%12#0 0x64)
        (assert tmp%16#0)
        let aggregate%bytes_offset%8#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%8#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%8#1 1u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint8) = aggregate%encoded_element%8#1
        let reinterpret_biguint%14#0: biguint = array_item%7#0
        let tmp%17#0: bool = (b== reinterpret_biguint%14#0 0x65)
        (assert tmp%17#0)
        let aggregate%bytes_offset%9#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%9#1: bytes = (extract3 my_array_copy_3#0 aggregate%bytes_offset%9#1 1u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint8) = aggregate%encoded_element%9#1
        let reinterpret_biguint%16#0: biguint = array_item%8#0
        let tmp%18#0: bool = (b== reinterpret_biguint%16#0 0x66)
        (assert tmp%18#0)
        let aggregate%bytes_offset%10#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%10#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%10#1 1u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint8) = aggregate%encoded_element%10#1
        let reinterpret_biguint%18#0: biguint = array_item%9#0
        let tmp%19#0: bool = (b== reinterpret_biguint%18#0 0x67)
        (assert tmp%19#0)
        let aggregate%bytes_offset%11#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%11#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%11#1 1u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint8) = aggregate%encoded_element%11#1
        let reinterpret_biguint%20#0: biguint = array_item%10#0
        let tmp%20#0: bool = (b== reinterpret_biguint%20#0 0x68)
        (assert tmp%20#0)
        let aggregate%bytes_offset%12#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%12#1: bytes = (extract3 my_array_copy_3#0 aggregate%bytes_offset%12#1 1u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint8) = aggregate%encoded_element%12#1
        let reinterpret_biguint%22#0: biguint = array_item%11#0
        let tmp%21#0: bool = (b== reinterpret_biguint%22#0 0x69)
        (assert tmp%21#0)
        let (mutate_tuple_items_and_reassign%6#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%7#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%8#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#0, my_array_copy_2#0, my_array_copy_3#0, 200u, 0u)
        let my_array#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%6#0
        let my_array_copy_2#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%7#0
        let my_array_copy_3#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%8#0
        let aggregate%bytes_offset%13#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%13#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%13#1 1u) // on error: index access is out of bounds
        let array_item%12#0: Encoded(uint8) = aggregate%encoded_element%13#1
        let reinterpret_biguint%24#0: biguint = array_item%12#0
        let tmp%22#0: bool = (b== reinterpret_biguint%24#0 0xc8)
        (assert tmp%22#0)
        let aggregate%bytes_offset%14#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%14#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%14#1 1u) // on error: index access is out of bounds
        let array_item%13#0: Encoded(uint8) = aggregate%encoded_element%14#1
        let reinterpret_biguint%26#0: biguint = array_item%13#0
        let tmp%23#0: bool = (b== reinterpret_biguint%26#0 0xc9)
        (assert tmp%23#0)
        let aggregate%bytes_offset%15#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%15#1: bytes = (extract3 my_array_copy_3#0 aggregate%bytes_offset%15#1 1u) // on error: index access is out of bounds
        let array_item%14#0: Encoded(uint8) = aggregate%encoded_element%15#1
        let reinterpret_biguint%28#0: biguint = array_item%14#0
        let tmp%24#0: bool = (b== reinterpret_biguint%28#0 0xca)
        (assert tmp%24#0)
        let aggregate%bytes_offset%16#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%16#1: bytes = (extract3 my_array#0 aggregate%bytes_offset%16#1 1u) // on error: index access is out of bounds
        let array_item%15#0: Encoded(uint8) = aggregate%encoded_element%16#1
        let reinterpret_biguint%30#0: biguint = array_item%15#0
        let tmp%25#0: bool = (b== reinterpret_biguint%30#0 0xce)
        (assert tmp%25#0)
        let aggregate%bytes_offset%17#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%17#1: bytes = (extract3 my_array_copy_2#0 aggregate%bytes_offset%17#1 1u) // on error: index access is out of bounds
        let array_item%16#0: Encoded(uint8) = aggregate%encoded_element%17#1
        let reinterpret_biguint%32#0: biguint = array_item%16#0
        let tmp%26#0: bool = (b== reinterpret_biguint%32#0 0xcf)
        (assert tmp%26#0)
        let aggregate%bytes_offset%18#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%18#1: bytes = (extract3 my_array_copy_3#0 aggregate%bytes_offset%18#1 1u) // on error: index access is out of bounds
        let array_item%17#0: Encoded(uint8) = aggregate%encoded_element%18#1
        let reinterpret_biguint%34#0: biguint = array_item%17#0
        let tmp%27#0: bool = (b== reinterpret_biguint%34#0 0xd0)
        (assert tmp%27#0)
        let foo.0#0: Encoded(uint8[4]) = my_array#0
        let foo.1#0: Encoded(uint8[4]) = my_array#0
        let foo.2#0: Encoded(uint8[4]) = my_array#0
        let (mutate_tuple_items_and_reassign%9#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%10#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%11#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(foo.0#0, foo.1#0, foo.2#0, 222u, 0u)
        let foo.0#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%9#0
        let foo.1#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%10#0
        let foo.2#0: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%11#0
        let aggregate%bytes_offset%19#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%19#1: bytes = (extract3 foo.0#0 aggregate%bytes_offset%19#1 1u) // on error: index access is out of bounds
        let array_item%18#0: Encoded(uint8) = aggregate%encoded_element%19#1
        let reinterpret_biguint%36#0: biguint = array_item%18#0
        let tmp%28#0: bool = (b== reinterpret_biguint%36#0 0xe4)
        (assert tmp%28#0)
        let aggregate%bytes_offset%20#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%20#1: bytes = (extract3 foo.1#0 aggregate%bytes_offset%20#1 1u) // on error: index access is out of bounds
        let array_item%19#0: Encoded(uint8) = aggregate%encoded_element%20#1
        let reinterpret_biguint%38#0: biguint = array_item%19#0
        let tmp%29#0: bool = (b== reinterpret_biguint%38#0 0xe5)
        (assert tmp%29#0)
        let aggregate%bytes_offset%21#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%21#1: bytes = (extract3 foo.2#0 aggregate%bytes_offset%21#1 1u) // on error: index access is out of bounds
        let array_item%20#0: Encoded(uint8) = aggregate%encoded_element%21#1
        let reinterpret_biguint%40#0: biguint = array_item%20#0
        let tmp%30#0: bool = (b== reinterpret_biguint%40#0 0xe6)
        (assert tmp%30#0)
        let aggregate%head%8#1: bytes = (concat 0x my_array#0)
        let aggregate%as_Encoded(uint8[4])%1#1: Encoded(uint8[4]) = aggregate%head%8#1
        let tmp%31#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%1#1
        let nested#0: Encoded(uint8[4]) = tmp%31#0
        let aggregate%extract%0#1: bytes = (extract3 nested#0 0u 4u)
        let tuple_item%2#0: Encoded(uint8[4]) = aggregate%extract%0#1
        let (other_routine_2%4#0: Encoded(uint8[4]), other_routine_2%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tuple_item%2#0)
        return 

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: Encoded(uint8[4]), struct: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) -> <bool, bool, Encoded(uint8[4]), Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))>:
    block@0: // L124
        let aggregate%write_offset%0#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%0#1: bytes = (replace3 array#0 aggregate%write_offset%0#1 0x05)
        let updated_array%0#0: Encoded(uint8[4]) = aggregate%updated_array%0#1
        let array#0: Encoded(uint8[4]) = updated_array%0#0
        goto 1u ? block@1 : block@2
    block@1: // if_body_L1
        goto block@2
    block@2: // after_if_else_L1
        let aggregate%length%0#1: uint64 = (len 0x41415252474821)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x41415252474821)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 struct#0 2u)
        let aggregate%data_up_to_item%0#1: bytes = (extract3 struct#0 0u aggregate%item_offset%0#1)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 struct#0 4u)
        let aggregate%total_length%0#1: uint64 = (len struct#0)
        let aggregate%data%0#1: bytes = (substring3 struct#0 aggregate%next_item_offset%0#1 aggregate%total_length%0#1)
        let aggregate%updated_data%0#1: bytes = (concat aggregate%data_up_to_item%0#1 encoded%0#0)
        let aggregate%updated_data%1#1: bytes = (concat aggregate%updated_data%0#1 aggregate%data%0#1)
        let aggregate%item_length%0#1: uint64 = (- aggregate%next_item_offset%0#1 aggregate%item_offset%0#1)
        let aggregate%new_value_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%tail_offset%0#1: uint64 = (extract_uint16 aggregate%updated_data%1#1 4u)
        let aggregate%tail_offset%1#1: uint64 = (+ aggregate%tail_offset%0#1 aggregate%new_value_length%0#1)
        let aggregate%tail_offset%2#1: uint64 = (- aggregate%tail_offset%1#1 aggregate%item_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%tail_offset%2#1)
        let aggregate%tail_offset_bytes%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%updated_data%2#1: bytes = (replace3 aggregate%updated_data%1#1 4u aggregate%tail_offset_bytes%0#1)
        let updated_tuple%0#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%updated_data%2#1
        let struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%0#0
        goto 1u ? block@3 : block@4
    block@3: // if_body_L1
        goto block@4
    block@4: // after_if_else_L1
        return 1u 0u array#0 struct#0

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: Encoded(uint8[4])) -> <Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L130
        let copy#0: Encoded(uint8[4]) = array#0
        let aggregate%write_offset%0#1: uint64 = (* 0u 1u)
        let aggregate%updated_array%0#1: bytes = (replace3 array#0 aggregate%write_offset%0#1 0x0a)
        let updated_array%0#0: Encoded(uint8[4]) = aggregate%updated_array%0#1
        let array#0: Encoded(uint8[4]) = updated_array%0#0
        goto 1u ? block@1 : block@2
    block@1: // if_body_L1
        goto block@2
    block@2: // after_if_else_L1
        return copy#0 array#0

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L136
        let arrays.0%is_original#0: bool = 1u
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        let arrays.1%is_original#0: bool = 1u
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        let arrays.2%is_original#0: bool = 1u
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob start#0)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let aggregate%uint8%0#1: bytes = (extract3 aggregate%val_as_bytes%0#1 7u 1u)
        let aggregate%as_Encoded(uint8)%0#1: Encoded(uint8) = aggregate%uint8%0#1
        let tmp%0#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#1
        let aggregate%write_offset%0#1: uint64 = (* 0u 1u)
        let aggregate%updated_array%0#1: bytes = (replace3 arrays.0#0 aggregate%write_offset%0#1 tmp%0#0)
        let updated_array%0#0: Encoded(uint8[4]) = aggregate%updated_array%0#1
        let arrays.0#0: Encoded(uint8[4]) = updated_array%0#0
        goto 1u ? block@1 : block@2
    block@1: // if_body_L1
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: uint64 = (+ start#0 1u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%1#1: uint64 = (bitlen aggregate%val_as_bytes%1#1)
        let aggregate%no_overflow%1#1: bool = (<= aggregate%bitlen%1#1 8u)
        (assert aggregate%no_overflow%1#1) // overflow
        let aggregate%uint8%1#1: bytes = (extract3 aggregate%val_as_bytes%1#1 7u 1u)
        let aggregate%as_Encoded(uint8)%1#1: Encoded(uint8) = aggregate%uint8%1#1
        let tmp%2#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%1#1
        let aggregate%write_offset%1#1: uint64 = (* 0u 1u)
        let aggregate%updated_array%1#1: bytes = (replace3 arrays.1#0 aggregate%write_offset%1#1 tmp%2#0)
        let updated_array%1#0: Encoded(uint8[4]) = aggregate%updated_array%1#1
        let arrays.1#0: Encoded(uint8[4]) = updated_array%1#0
        goto 1u ? block@3 : block@4
    block@3: // if_body_L1
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        goto block@4
    block@4: // after_if_else_L1
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#0)
        let aggregate%bitlen%2#1: uint64 = (bitlen aggregate%val_as_bytes%2#1)
        let aggregate%no_overflow%2#1: bool = (<= aggregate%bitlen%2#1 8u)
        (assert aggregate%no_overflow%2#1) // overflow
        let aggregate%uint8%2#1: bytes = (extract3 aggregate%val_as_bytes%2#1 7u 1u)
        let aggregate%as_Encoded(uint8)%2#1: Encoded(uint8) = aggregate%uint8%2#1
        let tmp%4#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%2#1
        let aggregate%write_offset%2#1: uint64 = (* 0u 1u)
        let aggregate%updated_array%2#1: bytes = (replace3 arrays.2#0 aggregate%write_offset%2#1 tmp%4#0)
        let updated_array%2#0: Encoded(uint8[4]) = aggregate%updated_array%2#1
        let arrays.2#0: Encoded(uint8[4]) = updated_array%2#0
        goto 1u ? block@5 : block@6
    block@5: // if_body_L1
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        goto block@6
    block@6: // after_if_else_L1
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%3#1: bytes = (extract3 arrays.0#0 aggregate%bytes_offset%3#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%3#1
        let reinterpret_biguint%0#0: biguint = array_item%0#0
        let tmp%5#0: biguint = (itob start#0)
        let tmp%6#0: bool = (b== reinterpret_biguint%0#0 tmp%5#0)
        (assert tmp%6#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%4#1: bytes = (extract3 arrays.1#0 aggregate%bytes_offset%4#1 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%4#1
        let reinterpret_biguint%1#0: biguint = array_item%1#0
        let tmp%7#0: uint64 = (+ start#0 1u)
        let tmp%8#0: biguint = (itob tmp%7#0)
        let tmp%9#0: bool = (b== reinterpret_biguint%1#0 tmp%8#0)
        (assert tmp%9#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%5#1: bytes = (extract3 arrays.2#0 aggregate%bytes_offset%5#1 1u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8) = aggregate%encoded_element%5#1
        let reinterpret_biguint%2#0: biguint = array_item%2#0
        let tmp%10#0: uint64 = (+ start#0 2u)
        let tmp%11#0: biguint = (itob tmp%10#0)
        let tmp%12#0: bool = (b== reinterpret_biguint%2#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (+ start#0 3u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%13#0)
        let aggregate%bitlen%3#1: uint64 = (bitlen aggregate%val_as_bytes%3#1)
        let aggregate%no_overflow%3#1: bool = (<= aggregate%bitlen%3#1 8u)
        (assert aggregate%no_overflow%3#1) // overflow
        let aggregate%uint8%3#1: bytes = (extract3 aggregate%val_as_bytes%3#1 7u 1u)
        let aggregate%as_Encoded(uint8)%3#1: Encoded(uint8) = aggregate%uint8%3#1
        let tmp%14#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%3#1
        let aggregate%write_offset%3#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%3#1: bytes = (replace3 arrays.0#0 aggregate%write_offset%3#1 tmp%14#0)
        let updated_array%3#0: Encoded(uint8[4]) = aggregate%updated_array%3#1
        let arrays.0#0: Encoded(uint8[4]) = updated_array%3#0
        goto 1u ? block@7 : block@8
    block@7: // if_body_L1
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        goto block@8
    block@8: // after_if_else_L1
        let tmp%15#0: uint64 = (+ start#0 4u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%15#0)
        let aggregate%bitlen%4#1: uint64 = (bitlen aggregate%val_as_bytes%4#1)
        let aggregate%no_overflow%4#1: bool = (<= aggregate%bitlen%4#1 8u)
        (assert aggregate%no_overflow%4#1) // overflow
        let aggregate%uint8%4#1: bytes = (extract3 aggregate%val_as_bytes%4#1 7u 1u)
        let aggregate%as_Encoded(uint8)%4#1: Encoded(uint8) = aggregate%uint8%4#1
        let tmp%16#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%4#1
        let aggregate%write_offset%4#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%4#1: bytes = (replace3 arrays.1#0 aggregate%write_offset%4#1 tmp%16#0)
        let updated_array%4#0: Encoded(uint8[4]) = aggregate%updated_array%4#1
        let arrays.1#0: Encoded(uint8[4]) = updated_array%4#0
        goto 1u ? block@9 : block@10
    block@9: // if_body_L1
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        goto block@10
    block@10: // after_if_else_L1
        let tmp%17#0: uint64 = (+ start#0 5u)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%17#0)
        let aggregate%bitlen%5#1: uint64 = (bitlen aggregate%val_as_bytes%5#1)
        let aggregate%no_overflow%5#1: bool = (<= aggregate%bitlen%5#1 8u)
        (assert aggregate%no_overflow%5#1) // overflow
        let aggregate%uint8%5#1: bytes = (extract3 aggregate%val_as_bytes%5#1 7u 1u)
        let aggregate%as_Encoded(uint8)%5#1: Encoded(uint8) = aggregate%uint8%5#1
        let tmp%18#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%5#1
        let aggregate%write_offset%5#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%5#1: bytes = (replace3 arrays.2#0 aggregate%write_offset%5#1 tmp%18#0)
        let updated_array%5#0: Encoded(uint8[4]) = aggregate%updated_array%5#1
        let arrays.2#0: Encoded(uint8[4]) = updated_array%5#0
        goto 1u ? block@11 : block@12
    block@11: // if_body_L1
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        goto block@12
    block@12: // after_if_else_L1
        let arrays.2%out#27: Encoded(uint8[4]) = arrays.2%out#0
        let arrays.1%out#28: Encoded(uint8[4]) = arrays.1%out#0
        let arrays.0%out#29: Encoded(uint8[4]) = arrays.0%out#0
        let arrays.2#19: Encoded(uint8[4]) = arrays.2#0
        let arrays.1#18: Encoded(uint8[4]) = arrays.1#0
        let arrays.0#17: Encoded(uint8[4]) = arrays.0#0
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L154
        let arrays.0%is_original#0: bool = 0u
        let arrays.1%is_original#0: bool = 0u
        let arrays.2%is_original#0: bool = 0u
        goto 0u ? block@14 : block@15
    block@14: // if_body_L1
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        goto block@15
    block@15: // after_if_else_L1
        goto 0u ? block@16 : block@17
    block@16: // if_body_L1
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        goto block@17
    block@17: // after_if_else_L1
        goto 0u ? block@18 : block@19
    block@18: // if_body_L1
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        goto block@19
    block@19: // after_if_else_L1
        let arrays.2%out#27: Encoded(uint8[4]) = arrays.2%out#0
        let arrays.1%out#28: Encoded(uint8[4]) = arrays.1%out#0
        let arrays.0%out#29: Encoded(uint8[4]) = arrays.0%out#0
        let arrays.2#19: Encoded(uint8[4]) = arrays.2#0
        let arrays.1#18: Encoded(uint8[4]) = arrays.1#0
        let arrays.0#17: Encoded(uint8[4]) = arrays.0#0
        goto block@20
    block@20: // after_if_else_L153
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2%out#27
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1%out#28
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0%out#29
        let arrays.2#0: Encoded(uint8[4]) = arrays.2#19
        let arrays.1#0: Encoded(uint8[4]) = arrays.1#18
        let arrays.0#0: Encoded(uint8[4]) = arrays.0#17
        let tmp%19#0: uint64 = (+ start#0 6u)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%19#0)
        let aggregate%bitlen%6#1: uint64 = (bitlen aggregate%val_as_bytes%6#1)
        let aggregate%no_overflow%6#1: bool = (<= aggregate%bitlen%6#1 8u)
        (assert aggregate%no_overflow%6#1) // overflow
        let aggregate%uint8%6#1: bytes = (extract3 aggregate%val_as_bytes%6#1 7u 1u)
        let aggregate%as_Encoded(uint8)%6#1: Encoded(uint8) = aggregate%uint8%6#1
        let tmp%20#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%6#1
        let aggregate%write_offset%6#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%6#1: bytes = (replace3 arrays.0#0 aggregate%write_offset%6#1 tmp%20#0)
        let updated_array%6#0: Encoded(uint8[4]) = aggregate%updated_array%6#1
        let arrays.0#0: Encoded(uint8[4]) = updated_array%6#0
        goto arrays.0%is_original#0 ? block@21 : block@22
    block@21: // if_body_L1
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        goto block@22
    block@22: // after_if_else_L1
        let tmp%21#0: uint64 = (+ start#0 7u)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%21#0)
        let aggregate%bitlen%7#1: uint64 = (bitlen aggregate%val_as_bytes%7#1)
        let aggregate%no_overflow%7#1: bool = (<= aggregate%bitlen%7#1 8u)
        (assert aggregate%no_overflow%7#1) // overflow
        let aggregate%uint8%7#1: bytes = (extract3 aggregate%val_as_bytes%7#1 7u 1u)
        let aggregate%as_Encoded(uint8)%7#1: Encoded(uint8) = aggregate%uint8%7#1
        let tmp%22#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%7#1
        let aggregate%write_offset%7#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%7#1: bytes = (replace3 arrays.1#0 aggregate%write_offset%7#1 tmp%22#0)
        let updated_array%7#0: Encoded(uint8[4]) = aggregate%updated_array%7#1
        let arrays.1#0: Encoded(uint8[4]) = updated_array%7#0
        goto arrays.1%is_original#0 ? block@23 : block@24
    block@23: // if_body_L1
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        goto block@24
    block@24: // after_if_else_L1
        let tmp%23#0: uint64 = (+ start#0 8u)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%23#0)
        let aggregate%bitlen%8#1: uint64 = (bitlen aggregate%val_as_bytes%8#1)
        let aggregate%no_overflow%8#1: bool = (<= aggregate%bitlen%8#1 8u)
        (assert aggregate%no_overflow%8#1) // overflow
        let aggregate%uint8%8#1: bytes = (extract3 aggregate%val_as_bytes%8#1 7u 1u)
        let aggregate%as_Encoded(uint8)%8#1: Encoded(uint8) = aggregate%uint8%8#1
        let tmp%24#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%8#1
        let aggregate%write_offset%8#1: uint64 = (* 1u 1u)
        let aggregate%updated_array%8#1: bytes = (replace3 arrays.2#0 aggregate%write_offset%8#1 tmp%24#0)
        let updated_array%8#0: Encoded(uint8[4]) = aggregate%updated_array%8#1
        let arrays.2#0: Encoded(uint8[4]) = updated_array%8#0
        goto arrays.2%is_original#0 ? block@25 : block@26
    block@25: // if_body_L1
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        goto block@26
    block@26: // after_if_else_L1
        let aggregate%bytes_offset%12#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%12#1: bytes = (extract3 arrays.0#0 aggregate%bytes_offset%12#1 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8) = aggregate%encoded_element%12#1
        let reinterpret_biguint%3#0: biguint = array_item%3#0
        let tmp%25#0: uint64 = (+ start#0 6u)
        let tmp%26#0: biguint = (itob tmp%25#0)
        let tmp%27#0: bool = (b== reinterpret_biguint%3#0 tmp%26#0)
        (assert tmp%27#0)
        let aggregate%bytes_offset%13#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%13#1: bytes = (extract3 arrays.1#0 aggregate%bytes_offset%13#1 1u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint8) = aggregate%encoded_element%13#1
        let reinterpret_biguint%4#0: biguint = array_item%4#0
        let tmp%28#0: uint64 = (+ start#0 7u)
        let tmp%29#0: biguint = (itob tmp%28#0)
        let tmp%30#0: bool = (b== reinterpret_biguint%4#0 tmp%29#0)
        (assert tmp%30#0)
        let aggregate%bytes_offset%14#1: uint64 = (* 1u 1u)
        let aggregate%encoded_element%14#1: bytes = (extract3 arrays.2#0 aggregate%bytes_offset%14#1 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint8) = aggregate%encoded_element%14#1
        let reinterpret_biguint%5#0: biguint = array_item%5#0
        let tmp%31#0: uint64 = (+ start#0 8u)
        let tmp%32#0: biguint = (itob tmp%31#0)
        let tmp%33#0: bool = (b== reinterpret_biguint%5#0 tmp%32#0)
        (assert tmp%33#0)
        return arrays.0%out#0 arrays.1%out#0 arrays.2%out#0