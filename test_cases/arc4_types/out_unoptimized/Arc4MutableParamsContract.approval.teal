#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> uint64:
main:
    intcblock 1 0 2 4
    bytecblock 0x 0x05 0x00054861707079 0x000741415252474821
    // arc4_types/mutable_params.py:29
    // self.mutating_copies()
    callsub mutating_copies
    // arc4_types/mutable_params.py:31
    // return True
    intc_0 // 1
    return


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
mutating_copies:
    // arc4_types/mutable_params.py:33-34
    // @subroutine
    // def mutating_copies(self) -> None:
    proto 0 0
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    bytec_0 // 0x
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    pushbytes 0x03
    concat
    pushbytes 0x04
    concat
    bytec_0 // 0x
    swap
    concat
    // arc4_types/mutable_params.py:37
    // b_val=Bool(True),
    pushbytes 0x00
    intc_1 // 0
    intc_0 // 1
    setbit
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    bytec_0 // 0x
    swap
    concat
    // arc4_types/mutable_params.py:38
    // u_val=UInt8(50),
    pushbytes 0x32
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    concat
    pushint 6 // 6
    itob
    extract 6 2
    concat
    // arc4_types/mutable_params.py:39
    // s_val_1=String("Happy"),
    bytec_2 // 0x00054861707079
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    len
    pushint 6 // 6
    +
    itob
    extract 6 2
    concat
    // arc4_types/mutable_params.py:39
    // s_val_1=String("Happy"),
    bytec_2 // 0x00054861707079
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    concat
    // arc4_types/mutable_params.py:40
    // s_val_2=String("Days"),
    pushbytes 0x000444617973
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    concat
    // arc4_types/mutable_params.py:43
    // my_array_copy = my_array.copy()
    dig 1
    cover 2
    // arc4_types/mutable_params.py:44
    // my_struct_copy = my_struct.copy()
    dup
    cover 3
    // arc4_types/mutable_params.py:46
    // my_array[2] = UInt8(5)
    swap
    intc_2 // 2
    bytec_1 // 0x05
    replace3
    swap
    // arc4_types/mutable_params.py:48
    // assert my_array_copy[2] == UInt8(3), "my_array_copy should be unchanged"
    dig 2
    intc_2 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x03
    b==
    assert // my_array_copy should be unchanged
    // arc4_types/mutable_params.py:49
    // assert my_array[2] == UInt8(5), "my_array should be mutated"
    dig 1
    intc_2 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    bytec_1 // 0x05
    b==
    assert // my_array should be mutated
    // arc4_types/mutable_params.py:51-52
    // # Pass to subroutine without a copy
    // t, f = self.other_routine(my_array, my_struct)
    callsub other_routine
    cover 3
    cover 3
    cover 3
    cover 2
    cover 3
    cover 2
    // arc4_types/mutable_params.py:53
    // assert t
    assert
    // arc4_types/mutable_params.py:54
    // assert not f
    !
    assert
    // arc4_types/mutable_params.py:56
    // assert my_array[1] == UInt8(5), "my_array has been mutated by the subroutine"
    dup
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    bytec_1 // 0x05
    b==
    assert // my_array has been mutated by the subroutine
    // arc4_types/mutable_params.py:58
    // assert my_struct.s_val_1 == String(
    dig 1
    intc_2 // 2
    extract_uint16
    swap
    dig 2
    intc_3 // 4
    extract_uint16
    uncover 3
    uncover 3
    uncover 2
    substring3
    // arc4_types/mutable_params.py:58-60
    // assert my_struct.s_val_1 == String(
    //     "AARRGH!"
    // ), "my_struct has been mutated by the subroutine"
    bytec_3 // 0x000741415252474821
    ==
    assert // my_struct has been mutated by the subroutine
    // arc4_types/mutable_params.py:62-63
    // # Pass to subroutine with copy
    // self.other_routine(my_array_copy.copy(), my_struct_copy.copy())
    dig 1
    dig 3
    callsub other_routine
    popn 4
    // arc4_types/mutable_params.py:65
    // assert my_array_copy[1] == UInt8(
    dig 1
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    // arc4_types/mutable_params.py:65-67
    // assert my_array_copy[1] == UInt8(
    //     2
    // ), "my_array_copy should not be mutated by the subroutine"
    pushbytes 0x02
    b==
    assert // my_array_copy should not be mutated by the subroutine
    // arc4_types/mutable_params.py:69
    // assert my_struct_copy.s_val_1 == String(
    dig 2
    intc_2 // 2
    extract_uint16
    swap
    dig 3
    intc_3 // 4
    extract_uint16
    uncover 4
    uncover 3
    uncover 2
    substring3
    // arc4_types/mutable_params.py:69-71
    // assert my_struct_copy.s_val_1 == String(
    //     "Happy"
    // ), "my_struct_copy should not be mutated by the subroutine"
    bytec_2 // 0x00054861707079
    ==
    assert // my_struct_copy should not be mutated by the subroutine
    // arc4_types/mutable_params.py:73
    // my_array_copy_2 = my_array_copy.copy()
    dig 1
    // arc4_types/mutable_params.py:75
    // my_array_copy_2 = self.other_routine_2(my_array_copy_2)
    callsub other_routine_2
    pop
    // arc4_types/mutable_params.py:77
    // assert my_array_copy_2[0] == UInt8(1), "my_array_copy_2 should have original value"
    dup
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x01
    b==
    assert // my_array_copy_2 should have original value
    // arc4_types/mutable_params.py:79
    // self.other_routine_2(my_array_copy_2)
    callsub other_routine_2
    bury 1
    // arc4_types/mutable_params.py:80
    // assert my_array_copy_2[0] == UInt8(10), "my_array_copy_2 should have mutated value"
    dup
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x0a
    b==
    assert // my_array_copy_2 should have mutated value
    // arc4_types/mutable_params.py:82
    // my_array_copy_3 = my_array_copy.copy()
    uncover 2
    // arc4_types/mutable_params.py:84
    // originals = (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy())
    dig 2
    swap
    dig 2
    cover 2
    dup
    cover 2
    swap
    cover 5
    uncover 2
    cover 5
    swap
    cover 5
    // arc4_types/mutable_params.py:86
    // (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy()),
    dig 2
    dig 2
    dig 2
    // arc4_types/mutable_params.py:85-89
    // self.mutate_tuple_items_and_reassign(
    //     (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy()),
    //     start=UInt64(0),
    //     reassign=True,
    // )
    uncover 2
    uncover 2
    uncover 2
    // arc4_types/mutable_params.py:87
    // start=UInt64(0),
    intc_1 // 0
    // arc4_types/mutable_params.py:88
    // reassign=True,
    intc_0 // 1
    // arc4_types/mutable_params.py:85-89
    // self.mutate_tuple_items_and_reassign(
    //     (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy()),
    //     start=UInt64(0),
    //     reassign=True,
    // )
    callsub mutate_tuple_items_and_reassign
    popn 3
    // arc4_types/mutable_params.py:90
    // assert originals == (my_array, my_array_copy_2, my_array_copy_3)
    uncover 3
    dig 3
    ==
    uncover 4
    dig 3
    ==
    &&
    uncover 4
    dig 2
    ==
    &&
    assert
    // arc4_types/mutable_params.py:92-94
    // self.mutate_tuple_items_and_reassign(
    //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
    // )
    uncover 2
    uncover 2
    uncover 2
    // arc4_types/mutable_params.py:93
    // (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
    pushint 100 // 100
    intc_0 // 1
    // arc4_types/mutable_params.py:92-94
    // self.mutate_tuple_items_and_reassign(
    //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
    // )
    callsub mutate_tuple_items_and_reassign
    cover 2
    cover 2
    cover 2
    cover 2
    swap
    // arc4_types/mutable_params.py:96
    // assert my_array[0] == 100
    dup
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x64
    b==
    assert
    // arc4_types/mutable_params.py:97
    // assert my_array_copy_2[0] == 101
    dig 1
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x65
    b==
    assert
    // arc4_types/mutable_params.py:98
    // assert my_array_copy_3[0] == 102
    dig 2
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x66
    b==
    assert
    // arc4_types/mutable_params.py:99
    // assert my_array[1] == 103
    dup
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x67
    b==
    assert
    // arc4_types/mutable_params.py:100
    // assert my_array_copy_2[1] == 104
    dig 1
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x68
    b==
    assert
    // arc4_types/mutable_params.py:101
    // assert my_array_copy_3[1] == 105
    dig 2
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x69
    b==
    assert
    // arc4_types/mutable_params.py:103-105
    // self.mutate_tuple_items_and_reassign(
    //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
    // )
    swap
    uncover 2
    // arc4_types/mutable_params.py:104
    // (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
    pushint 200 // 200
    intc_1 // 0
    // arc4_types/mutable_params.py:103-105
    // self.mutate_tuple_items_and_reassign(
    //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
    // )
    callsub mutate_tuple_items_and_reassign
    cover 2
    cover 2
    cover 2
    cover 2
    swap
    // arc4_types/mutable_params.py:107
    // assert my_array[0] == 200
    dup
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xc8
    b==
    assert
    // arc4_types/mutable_params.py:108
    // assert my_array_copy_2[0] == 201
    dig 1
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xc9
    b==
    assert
    // arc4_types/mutable_params.py:109
    // assert my_array_copy_3[0] == 202
    dig 2
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xca
    b==
    assert
    // arc4_types/mutable_params.py:110
    // assert my_array[1] == 206
    dup
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xce
    b==
    assert
    // arc4_types/mutable_params.py:111
    // assert my_array_copy_2[1] == 207
    swap
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xcf
    b==
    assert
    // arc4_types/mutable_params.py:112
    // assert my_array_copy_3[1] == 208
    swap
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0xd0
    b==
    assert
    // arc4_types/mutable_params.py:114-115
    // # Nested array items should still require a copy
    // nested = StructWithArray(test_array=my_array.copy())
    bytec_0 // 0x
    swap
    concat
    // arc4_types/mutable_params.py:116
    // self.other_routine_2(nested.test_array.copy())
    intc_1 // 0
    intc_3 // 4
    extract3 // on error: Index access is out of bounds
    callsub other_routine_2
    popn 2
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> uint64, uint64, bytes, bytes:
other_routine:
    // arc4_types/mutable_params.py:118-119
    // @subroutine
    // def other_routine(self, array: TestArray, struct: TestStruct) -> tuple[bool, bool]:
    proto 2 4
    // arc4_types/mutable_params.py:120
    // array[1] = UInt8(5)
    frame_dig -2
    intc_0 // 1
    bytec_1 // 0x05
    replace3
    frame_bury -2
    intc_0 // 1
    bz other_routine_after_if_else@2

other_routine_if_body@1:

other_routine_after_if_else@2:
    // arc4_types/mutable_params.py:121
    // struct.s_val_1 = String("AARRGH!")
    frame_dig -1
    intc_2 // 2
    extract_uint16
    frame_dig -1
    intc_1 // 0
    dig 2
    extract3
    frame_dig -1
    intc_3 // 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    dig 2
    uncover 2
    substring3
    uncover 2
    bytec_3 // 0x000741415252474821
    concat
    swap
    concat
    swap
    uncover 2
    -
    swap
    bytec_3 // 0x000741415252474821
    len
    dig 1
    intc_3 // 4
    extract_uint16
    +
    uncover 2
    -
    itob
    extract 6 2
    swap
    intc_3 // 4
    uncover 2
    replace3
    frame_bury -1
    intc_0 // 1
    bz other_routine_after_if_else@4

other_routine_if_body@3:

other_routine_after_if_else@4:
    // arc4_types/mutable_params.py:122
    // return True, False
    intc_0 // 1
    intc_1 // 0
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> bytes, bytes:
other_routine_2:
    // arc4_types/mutable_params.py:124-125
    // @subroutine
    // def other_routine_2(self, array: TestArray) -> TestArray:
    proto 1 2
    // arc4_types/mutable_params.py:126
    // copy = array.copy()
    frame_dig -1
    // arc4_types/mutable_params.py:127
    // array[0] = UInt8(10)
    dup
    intc_1 // 0
    pushbytes 0x0a
    replace3
    frame_bury -1
    intc_0 // 1
    bz other_routine_2_after_if_else@2

other_routine_2_if_body@1:

other_routine_2_after_if_else@2:
    // arc4_types/mutable_params.py:128
    // return copy
    frame_dig 0
    frame_dig -1
    uncover 2
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes, start: uint64, reassign: uint64) -> bytes, bytes, bytes:
mutate_tuple_items_and_reassign:
    // arc4_types/mutable_params.py:130-133
    // @subroutine
    // def mutate_tuple_items_and_reassign(
    //     self, arrays: tuple[TestArray, TestArray, TestArray], *, start: UInt64, reassign: bool
    // ) -> None:
    proto 5 3
    intc_1 // 0
    dupn 5
    intc_0 // 1
    frame_dig -5
    intc_0 // 1
    frame_dig -4
    intc_0 // 1
    frame_dig -3
    // arc4_types/mutable_params.py:134
    // arrays[0][0] = UInt8(start)
    frame_dig -2
    itob
    extract 7 1
    frame_dig -5
    intc_1 // 0
    uncover 2
    replace3
    frame_bury -5
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@2

mutate_tuple_items_and_reassign_if_body@1:
    frame_dig -5
    frame_bury 7

mutate_tuple_items_and_reassign_after_if_else@2:
    // arc4_types/mutable_params.py:135
    // arrays[1][0] = UInt8(start + 1)
    frame_dig -2
    intc_0 // 1
    +
    itob
    extract 7 1
    frame_dig -4
    intc_1 // 0
    uncover 2
    replace3
    frame_bury -4
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@4

mutate_tuple_items_and_reassign_if_body@3:
    frame_dig -4
    frame_bury 9

mutate_tuple_items_and_reassign_after_if_else@4:
    // arc4_types/mutable_params.py:136
    // arrays[2][0] = UInt8(start + 2)
    frame_dig -2
    intc_2 // 2
    +
    itob
    extract 7 1
    frame_dig -3
    intc_1 // 0
    uncover 2
    replace3
    frame_bury -3
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@6

mutate_tuple_items_and_reassign_if_body@5:
    frame_dig -3
    frame_bury 11

mutate_tuple_items_and_reassign_after_if_else@6:
    // arc4_types/mutable_params.py:138
    // assert arrays[0][0] == start
    frame_dig -5
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    itob
    b==
    assert
    // arc4_types/mutable_params.py:139
    // assert arrays[1][0] == start + 1
    frame_dig -4
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    intc_0 // 1
    +
    itob
    b==
    assert
    // arc4_types/mutable_params.py:140
    // assert arrays[2][0] == start + 2
    frame_dig -3
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    intc_2 // 2
    +
    itob
    b==
    assert
    // arc4_types/mutable_params.py:142
    // arrays[0][1] = UInt8(start + 3)
    frame_dig -2
    pushint 3 // 3
    +
    itob
    extract 7 1
    frame_dig -5
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -5
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@8

mutate_tuple_items_and_reassign_if_body@7:
    frame_dig -5
    frame_bury 7

mutate_tuple_items_and_reassign_after_if_else@8:
    // arc4_types/mutable_params.py:143
    // arrays[1][1] = UInt8(start + 4)
    frame_dig -2
    intc_3 // 4
    +
    itob
    extract 7 1
    frame_dig -4
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -4
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@10

mutate_tuple_items_and_reassign_if_body@9:
    frame_dig -4
    frame_bury 9

mutate_tuple_items_and_reassign_after_if_else@10:
    // arc4_types/mutable_params.py:144
    // arrays[2][1] = UInt8(start + 5)
    frame_dig -2
    pushint 5 // 5
    +
    itob
    extract 7 1
    frame_dig -3
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -3
    intc_0 // 1
    bz mutate_tuple_items_and_reassign_after_if_else@12

mutate_tuple_items_and_reassign_if_body@11:
    frame_dig -3
    frame_bury 11

mutate_tuple_items_and_reassign_after_if_else@12:
    frame_dig 11
    frame_bury 5
    frame_dig 9
    frame_bury 3
    frame_dig 7
    frame_bury 1
    frame_dig -3
    frame_bury 4
    frame_dig -4
    frame_bury 2
    frame_dig -5
    frame_bury 0
    // arc4_types/mutable_params.py:146-147
    // # overwrite params
    // if reassign:
    frame_dig -1
    bz mutate_tuple_items_and_reassign_after_if_else@20

mutate_tuple_items_and_reassign_if_body@13:
    // arc4_types/mutable_params.py:148
    // arrays = (arrays[0].copy(), arrays[1].copy(), arrays[2].copy())
    frame_dig -5
    frame_dig -4
    swap
    frame_dig -3
    cover 2
    intc_1 // 0
    frame_bury 6
    intc_1 // 0
    frame_bury 8
    intc_1 // 0
    frame_bury 10
    frame_bury -5
    frame_bury -4
    frame_bury -3
    intc_1 // 0
    bz mutate_tuple_items_and_reassign_after_if_else@15

mutate_tuple_items_and_reassign_if_body@14:
    frame_dig -5
    frame_bury 7

mutate_tuple_items_and_reassign_after_if_else@15:
    intc_1 // 0
    bz mutate_tuple_items_and_reassign_after_if_else@17

mutate_tuple_items_and_reassign_if_body@16:
    frame_dig -4
    frame_bury 9

mutate_tuple_items_and_reassign_after_if_else@17:
    intc_1 // 0
    bz mutate_tuple_items_and_reassign_after_if_else@19

mutate_tuple_items_and_reassign_if_body@18:
    frame_dig -3
    frame_bury 11

mutate_tuple_items_and_reassign_after_if_else@19:
    frame_dig 11
    frame_bury 5
    frame_dig 9
    frame_bury 3
    frame_dig 7
    frame_bury 1
    frame_dig -3
    frame_bury 4
    frame_dig -4
    frame_bury 2
    frame_dig -5
    frame_bury 0

mutate_tuple_items_and_reassign_after_if_else@20:
    frame_dig 5
    frame_bury 11
    frame_dig 3
    frame_bury 9
    frame_dig 1
    frame_bury 7
    frame_dig 4
    frame_bury -3
    frame_dig 2
    frame_bury -4
    frame_dig 0
    frame_bury -5
    // arc4_types/mutable_params.py:150
    // arrays[0][1] = UInt8(start + 6)
    frame_dig -2
    pushint 6 // 6
    +
    itob
    extract 7 1
    frame_dig -5
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -5
    frame_dig 6
    bz mutate_tuple_items_and_reassign_after_if_else@22

mutate_tuple_items_and_reassign_if_body@21:
    frame_dig -5
    frame_bury 7

mutate_tuple_items_and_reassign_after_if_else@22:
    // arc4_types/mutable_params.py:151
    // arrays[1][1] = UInt8(start + 7)
    frame_dig -2
    pushint 7 // 7
    +
    itob
    extract 7 1
    frame_dig -4
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -4
    frame_dig 8
    bz mutate_tuple_items_and_reassign_after_if_else@24

mutate_tuple_items_and_reassign_if_body@23:
    frame_dig -4
    frame_bury 9

mutate_tuple_items_and_reassign_after_if_else@24:
    // arc4_types/mutable_params.py:152
    // arrays[2][1] = UInt8(start + 8)
    frame_dig -2
    pushint 8 // 8
    +
    itob
    extract 7 1
    frame_dig -3
    intc_0 // 1
    uncover 2
    replace3
    frame_bury -3
    frame_dig 10
    bz mutate_tuple_items_and_reassign_after_if_else@26

mutate_tuple_items_and_reassign_if_body@25:
    frame_dig -3
    frame_bury 11

mutate_tuple_items_and_reassign_after_if_else@26:
    // arc4_types/mutable_params.py:154
    // assert arrays[0][1] == start + 6
    frame_dig -5
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    pushint 6 // 6
    +
    itob
    b==
    assert
    // arc4_types/mutable_params.py:155
    // assert arrays[1][1] == start + 7
    frame_dig -4
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    pushint 7 // 7
    +
    itob
    b==
    assert
    // arc4_types/mutable_params.py:156
    // assert arrays[2][1] == start + 8
    frame_dig -3
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    pushint 8 // 8
    +
    itob
    b==
    assert
    frame_dig 7
    frame_dig 9
    frame_dig 11
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub
