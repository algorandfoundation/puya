#pragma version 10

test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    // arc4_types/mutation.py:35
    // self.dynamic_array_fixed_size()
    callsub dynamic_array_fixed_size
    // arc4_types/mutation.py:36
    // self.dynamic_array_bool()
    callsub dynamic_array_bool
    // arc4_types/mutation.py:37
    // self.dynamic_array_string()
    callsub dynamic_array_string
    // arc4_types/mutation.py:38
    // self.array_of_array_dynamic()
    callsub array_of_array_dynamic
    // arc4_types/mutation.py:39
    // self.array_of_array_static()
    callsub array_of_array_static
    // arc4_types/mutation.py:40
    // self.index_assign()
    callsub index_assign
    // arc4_types/mutation.py:41
    // self.struct_assign()
    callsub struct_assign
    // arc4_types/mutation.py:42
    // self.array_concat()
    callsub array_concat
    // arc4_types/mutation.py:43
    // return True
    int 1
    return


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
dynamic_array_fixed_size:
    // arc4_types/mutation.py:143-144
    // @subroutine
    // def dynamic_array_fixed_size(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:145
    // dynamic_uint8_array = DynamicArray[UInt8](UInt8(1), UInt8(2))
    byte 0x0002
    byte 0x01
    concat
    byte 0x02
    concat
    // arc4_types/mutation.py:146
    // dynamic_uint8_array.append(UInt8(50))
    extract 2 0
    byte 0x
    byte 0x32
    concat
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/mutation.py:147
    // assert dynamic_uint8_array == DynamicArray[UInt8](UInt8(1), UInt8(2), UInt8(50))
    byte 0x0003
    byte 0x01
    concat
    byte 0x02
    concat
    byte 0x32
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:148
    // dynamic_uint8_array.extend(dynamic_uint8_array)
    dup
    extract 2 0
    swap
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    byte 0x0006
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x01
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x02
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x32
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x01
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x02
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    // arc4_types/mutation.py:151
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    byte 0x32
    // arc4_types/mutation.py:150-152
    // assert dynamic_uint8_array == DynamicArray[UInt8](
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50)
    // )
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:153
    // dynamic_uint8_array.extend((UInt8(4), UInt8(90)))
    extract 2 0
    byte 0x
    byte 0x04
    concat
    byte 0x5a
    concat
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    byte 0x0008
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x01
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x02
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x32
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x01
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x02
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x32
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x04
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    // arc4_types/mutation.py:156
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    byte 0x5a
    // arc4_types/mutation.py:155-157
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4), UInt8(90)
    // )
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:159
    // popped = dynamic_uint8_array.pop()
    int 1
    callsub dynamic_array_pop_fixed_size
    swap
    // arc4_types/mutation.py:160
    // assert popped == UInt8(90)
    byte 0x5a
    b==
    assert
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    byte 0x0007
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x01
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x02
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x32
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x01
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x02
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x32
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    // arc4_types/mutation.py:163
    // UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    byte 0x04
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    concat
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
dynamic_array_bool:
    // arc4_types/mutation.py:166-167
    // @subroutine
    // def dynamic_array_bool(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:168
    // dynamic_bool_array = DynamicArray[Bool](Bool(True), Bool(False))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    byte 0x0002
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    // arc4_types/mutation.py:169
    // assert dynamic_bool_array.bytes == Bytes.from_hex("000280")
    dup
    byte 0x000280
    ==
    assert
    // arc4_types/mutation.py:170
    // dynamic_bool_array.extend((Bool(True), Bool(False)))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    byte 0x
    uncover 2
    concat
    swap
    concat
    int 2
    int 0
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:171
    // assert dynamic_bool_array.bytes == Bytes.from_hex("0004A0")
    dup
    byte 0x0004a0
    ==
    assert
    // arc4_types/mutation.py:173
    // Bool(True), Bool(False), Bool(True), Bool(False)
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    byte 0x00
    int 0
    int 0
    setbit
    cover 3
    // arc4_types/mutation.py:172-174
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True), Bool(False), Bool(True), Bool(False)
    // )
    byte 0x0004
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 18
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 19
    uncover 2
    setbit
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:175
    // dynamic_bool_array.extend(dynamic_bool_array)
    dup
    int 0
    extract_uint16
    swap
    dup
    extract 2 0
    uncover 2
    int 1
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:178
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/mutation.py:179
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/mutation.py:180
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/mutation.py:181
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 3
    // arc4_types/mutation.py:182
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 4
    // arc4_types/mutation.py:183
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 5
    // arc4_types/mutation.py:184
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 6
    // arc4_types/mutation.py:185
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 7
    // arc4_types/mutation.py:177-186
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    // )
    byte 0x0008
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 18
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 19
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 20
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 21
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 22
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 23
    uncover 2
    setbit
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:187
    // dynamic_bool_array.append(Bool(True))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x
    swap
    concat
    int 1
    int 0
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:190
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/mutation.py:191
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/mutation.py:192
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/mutation.py:193
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 3
    // arc4_types/mutation.py:194
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 4
    // arc4_types/mutation.py:195
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 5
    // arc4_types/mutation.py:196
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 6
    // arc4_types/mutation.py:197
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 7
    // arc4_types/mutation.py:198
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 8
    // arc4_types/mutation.py:189-199
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    // )
    byte 0x0009
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 18
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 19
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 20
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 21
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 22
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 23
    uncover 2
    setbit
    swap
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:201
    // assert dynamic_bool_array.pop() == Bool(True)
    callsub dynamic_array_pop_bit
    swap
    byte 0x00
    int 0
    int 1
    setbit
    ==
    assert
    // arc4_types/mutation.py:202
    // assert dynamic_bool_array.pop() == Bool(False)
    callsub dynamic_array_pop_bit
    swap
    byte 0x00
    int 0
    int 0
    setbit
    ==
    assert
    // arc4_types/mutation.py:204
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/mutation.py:205
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/mutation.py:206
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/mutation.py:207
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 3
    // arc4_types/mutation.py:208
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 4
    // arc4_types/mutation.py:209
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 5
    // arc4_types/mutation.py:210
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 6
    // arc4_types/mutation.py:203-211
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    // )
    byte 0x0007
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 18
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 19
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 20
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 21
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 22
    uncover 2
    setbit
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
dynamic_array_string:
    // arc4_types/mutation.py:213-214
    // @subroutine
    // def dynamic_array_string(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:215
    // hello = String("Hello")
    byte "Hello"
    len
    itob
    extract 6 2
    byte "Hello"
    concat
    // arc4_types/mutation.py:216
    // world = String("World")
    byte "World"
    len
    itob
    extract 6 2
    byte "World"
    concat
    swap
    // arc4_types/mutation.py:217
    // foo = String("Foo")
    byte "Foo"
    len
    itob
    extract 6 2
    byte "Foo"
    concat
    swap
    // arc4_types/mutation.py:218
    // bar = String("Bar")
    byte "Bar"
    len
    itob
    extract 6 2
    byte "Bar"
    concat
    // arc4_types/mutation.py:219
    // dynamic_string_array = DynamicArray(hello, world)
    int 4
    itob
    extract 6 2
    byte 0x0002
    swap
    concat
    dig 2
    len
    int 4
    swap
    +
    itob
    extract 6 2
    concat
    dig 2
    concat
    dig 4
    concat
    // arc4_types/mutation.py:220-222
    // assert dynamic_string_array.bytes == Bytes(
    //     b"\x00\x02\x00\x04\x00\x0b\x00\x05Hello\x00\x05World"
    // )
    dup
    byte 0x00020004000b000548656c6c6f0005576f726c64
    ==
    assert
    // arc4_types/mutation.py:223
    // dynamic_string_array.extend((foo, bar))
    byte 0x
    dig 4
    concat
    dig 2
    concat
    int 2
    callsub dynamic_array_concat_variable_size
    // arc4_types/mutation.py:225-227
    // assert dynamic_string_array.bytes == Bytes(
    //     b"\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar"
    // )
    dup
    byte 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172
    ==
    assert
    // arc4_types/mutation.py:229
    // dynamic_string_array.extend(dynamic_string_array)
    dup
    int 0
    extract_uint16
    dup
    int 2
    *
    int 2
    +
    dig 2
    len
    swap
    dig 3
    swap
    uncover 2
    substring3
    uncover 2
    swap
    uncover 2
    callsub dynamic_array_concat_variable_size
    cover 4
    // arc4_types/mutation.py:231
    // assert dynamic_string_array == DynamicArray(hello, world, foo, bar, hello, world, foo, bar)
    int 16
    itob
    extract 6 2
    byte 0x0008
    swap
    concat
    dig 2
    len
    int 16
    swap
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 2
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    itob
    extract 6 2
    concat
    dig 2
    concat
    dig 4
    concat
    dig 3
    concat
    dig 1
    concat
    dig 2
    concat
    dig 4
    concat
    dig 3
    concat
    dig 1
    concat
    uncover 5
    swap
    ==
    assert
    // arc4_types/mutation.py:232
    // dynamic_string_array = DynamicArray(hello, world, foo, bar, hello, world, foo, bar)
    int 16
    itob
    extract 6 2
    byte 0x0008
    swap
    concat
    dig 2
    len
    int 16
    swap
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 2
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    itob
    extract 6 2
    concat
    dig 2
    concat
    dig 4
    concat
    dig 3
    concat
    dig 1
    concat
    dig 2
    concat
    dig 4
    concat
    dig 3
    concat
    dig 1
    concat
    // arc4_types/mutation.py:233
    // dynamic_string_array[3] = hello
    dig 2
    int 3
    callsub dynamic_array_replace_variable_size
    // arc4_types/mutation.py:234
    // dynamic_string_array[5] = hello
    dig 2
    int 5
    callsub dynamic_array_replace_variable_size
    cover 3
    // arc4_types/mutation.py:236-238
    // assert dynamic_string_array == DynamicArray(
    //     hello, world, foo, hello, hello, hello, foo, bar
    // )
    int 16
    itob
    extract 6 2
    byte 0x0008
    swap
    concat
    dig 2
    len
    int 16
    swap
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 6
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    itob
    extract 6 2
    concat
    dig 2
    concat
    dig 5
    concat
    dig 3
    concat
    dig 2
    concat
    dig 2
    concat
    dig 2
    concat
    dig 3
    concat
    dig 1
    concat
    dig 4
    swap
    ==
    assert
    // arc4_types/mutation.py:240
    // assert dynamic_string_array.pop() == bar
    uncover 3
    callsub dynamic_array_pop_variable_size
    swap
    uncover 2
    ==
    assert
    // arc4_types/mutation.py:241
    // assert dynamic_string_array.pop() == foo
    callsub dynamic_array_pop_variable_size
    cover 4
    dig 2
    ==
    assert
    // arc4_types/mutation.py:242
    // assert dynamic_string_array == DynamicArray(hello, world, foo, hello, hello, hello)
    int 12
    itob
    extract 6 2
    byte 0x0006
    swap
    concat
    dig 1
    len
    int 12
    swap
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 4
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 2
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 2
    len
    +
    itob
    extract 6 2
    concat
    dig 1
    concat
    uncover 3
    concat
    uncover 2
    concat
    dig 1
    concat
    dig 1
    concat
    swap
    concat
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
array_of_array_dynamic:
    // arc4_types/mutation.py:70-71
    // @subroutine
    // def array_of_array_dynamic(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:72
    // array_of_array = DynamicArray[DynamicArray[UInt8]]()
    byte 0x0000
    // arc4_types/mutation.py:73
    // assert array_of_array.bytes == Bytes.from_hex("0000")
    byte 0x0000
    ==
    assert
    // arc4_types/mutation.py:74
    // array_of_array.append(DynamicArray[UInt8](UInt8(10)))
    byte 0x0001
    byte 0x0a
    concat
    byte 0x
    swap
    concat
    // arc4_types/mutation.py:72
    // array_of_array = DynamicArray[DynamicArray[UInt8]]()
    byte 0x0000
    // arc4_types/mutation.py:74
    // array_of_array.append(DynamicArray[UInt8](UInt8(10)))
    swap
    int 1
    callsub dynamic_array_concat_variable_size
    // arc4_types/mutation.py:75
    // assert array_of_array.bytes == Bytes.from_hex("0001000200010A")
    dup
    byte 0x0001000200010a
    ==
    assert
    // arc4_types/mutation.py:76
    // array_of_array.append(DynamicArray[UInt8](UInt8(16)))
    byte 0x0001
    byte 0x10
    concat
    byte 0x
    swap
    concat
    int 1
    callsub dynamic_array_concat_variable_size
    // arc4_types/mutation.py:77
    // assert array_of_array.bytes == Bytes.from_hex("00020004000700010A000110")
    dup
    byte 0x00020004000700010a000110
    ==
    assert
    // arc4_types/mutation.py:78
    // array_of_array[0].append(UInt8(255))
    dup
    int 0
    extract_uint16
    int 0
    swap
    <
    assert // Index access is out of bounds
    dup
    extract 2 0
    int 0
    int 2
    *
    dig 1
    swap
    extract_uint16
    dig 1
    dig 1
    extract_uint16
    int 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    extract 2 0
    byte 0x
    byte 0xff
    concat
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    int 0
    callsub dynamic_array_replace_variable_size
    // arc4_types/mutation.py:80
    // assert array_of_array.bytes == Bytes.from_hex("00020004000800020AFF000110")
    dup
    byte 0x00020004000800020aff000110
    ==
    assert
    // arc4_types/mutation.py:82
    // array_of_array[0][1] = UInt8(0)
    dup
    int 0
    extract_uint16
    int 0
    swap
    <
    assert // Index access is out of bounds
    dup
    extract 2 0
    int 0
    int 2
    *
    dig 1
    swap
    extract_uint16
    dig 1
    dig 1
    extract_uint16
    int 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    dup
    int 0
    extract_uint16
    int 1
    swap
    <
    assert // Index access is out of bounds
    int 3
    byte 0x00
    replace3
    int 0
    callsub dynamic_array_replace_variable_size
    // arc4_types/mutation.py:83
    // assert array_of_array.bytes == Bytes.from_hex("00020004000800020A00000110")
    byte 0x00020004000800020a00000110
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
array_of_array_static:
    // arc4_types/mutation.py:85-86
    // @subroutine
    // def array_of_array_static(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:88
    // StaticArray[UInt8, typing.Literal[2]](UInt8(10), UInt8(9)),
    byte 0x
    byte 0x0a
    concat
    byte 0x09
    concat
    // arc4_types/mutation.py:89
    // StaticArray[UInt8, typing.Literal[2]](UInt8(64), UInt8(128)),
    byte 0x
    byte 0x40
    concat
    byte 0x80
    concat
    // arc4_types/mutation.py:87-90
    // array_of_array = StaticArray[StaticArray[UInt8, typing.Literal[2]], typing.Literal[2]](
    //     StaticArray[UInt8, typing.Literal[2]](UInt8(10), UInt8(9)),
    //     StaticArray[UInt8, typing.Literal[2]](UInt8(64), UInt8(128)),
    // )
    byte 0x
    uncover 2
    concat
    swap
    concat
    // arc4_types/mutation.py:92
    // assert array_of_array.bytes == Bytes.from_hex("0A094080")
    dup
    byte 0x0a094080
    ==
    assert
    // arc4_types/mutation.py:94
    // array_of_array[0] = StaticArray[UInt8, typing.Literal[2]](UInt8(255), UInt8(254))
    byte 0x
    byte 0xff
    concat
    byte 0xfe
    concat
    swap
    int 0
    uncover 2
    replace3
    // arc4_types/mutation.py:95
    // assert array_of_array.bytes == Bytes.from_hex("FFFE4080")
    dup
    byte 0xfffe4080
    ==
    assert
    // arc4_types/mutation.py:97
    // array_of_array[1][0] = UInt8(1)
    int 1
    int 2
    *
    dig 1
    swap
    int 2
    extract3
    int 0
    byte 0x01
    replace3
    swap
    int 2
    uncover 2
    replace3
    // arc4_types/mutation.py:98
    // assert array_of_array.bytes == Bytes.from_hex("FFFE0180")
    byte 0xfffe0180
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
index_assign:
    // arc4_types/mutation.py:100-101
    // @subroutine
    // def index_assign(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:102
    // dynamic_uint8_array = DynamicArray[UInt8](UInt8(1), UInt8(2))
    byte 0x0002
    byte 0x01
    concat
    byte 0x02
    concat
    // arc4_types/mutation.py:103
    // dynamic_uint8_array[0] = UInt8(255)
    dup
    int 0
    extract_uint16
    int 0
    swap
    <
    assert // Index access is out of bounds
    int 2
    byte 0xff
    replace3
    // arc4_types/mutation.py:104
    // assert dynamic_uint8_array.bytes == Bytes.from_hex("0002ff02")
    byte 0x0002ff02
    ==
    assert
    // arc4_types/mutation.py:105
    // static_uint8_array = StaticArray(UInt8(1), UInt8(2))
    byte 0x
    byte 0x01
    concat
    byte 0x02
    concat
    // arc4_types/mutation.py:106
    // static_uint8_array[1] = UInt8(255)
    int 1
    byte 0xff
    replace3
    // arc4_types/mutation.py:107
    // assert static_uint8_array.bytes == Bytes.from_hex("01ff")
    byte 0x01ff
    ==
    assert
    // arc4_types/mutation.py:109
    // dynamic_bool_array = DynamicArray(Bool(True), Bool(False))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    byte 0x0002
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    // arc4_types/mutation.py:110
    // dynamic_bool_array[0] = Bool(False)
    byte 0x00
    int 0
    int 0
    setbit
    swap
    dup
    int 0
    extract_uint16
    int 0
    swap
    <
    assert // Index access is out of bounds
    swap
    int 0
    getbit
    swap
    int 16
    uncover 2
    setbit
    // arc4_types/mutation.py:111
    // assert dynamic_bool_array.bytes == Bytes.from_hex("000200")
    byte 0x000200
    ==
    assert
    // arc4_types/mutation.py:112
    // static_bool_array = StaticArray[Bool, typing.Literal[2]](Bool(True), Bool(True))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 1
    uncover 2
    setbit
    // arc4_types/mutation.py:113
    // static_bool_array[1] = Bool(False)
    byte 0x00
    int 0
    int 0
    setbit
    int 0
    getbit
    swap
    int 1
    uncover 2
    setbit
    // arc4_types/mutation.py:114
    // assert static_bool_array.bytes == Bytes.from_hex("80")
    byte 0x80
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
struct_assign:
    // arc4_types/mutation.py:116-117
    // @subroutine
    // def struct_assign(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:119
    // b_val=Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/mutation.py:121
    // s_val_1=String("Happy"),
    byte "Happy"
    len
    itob
    extract 6 2
    byte "Happy"
    concat
    swap
    // arc4_types/mutation.py:122
    // s_val_2=String("Days"),
    byte "Days"
    len
    itob
    extract 6 2
    byte "Days"
    concat
    cover 2
    // arc4_types/mutation.py:118-123
    // test_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x
    swap
    concat
    // arc4_types/mutation.py:120
    // u_val=UInt8(50),
    byte 0x32
    // arc4_types/mutation.py:118-123
    // test_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    concat
    int 6
    itob
    extract 6 2
    concat
    dig 1
    len
    int 6
    swap
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // arc4_types/mutation.py:125
    // test_struct.b_val = Bool(False)
    byte 0x00
    int 0
    int 0
    setbit
    int 0
    getbit
    swap
    int 0
    uncover 2
    setbit
    // arc4_types/mutation.py:126
    // test_struct.u_val = UInt8(12)
    byte 0x0c
    replace2 1
    // arc4_types/mutation.py:128
    // b_val=Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/mutation.py:130
    // s_val_1=String("Happy"),
    byte "Happy"
    len
    itob
    extract 6 2
    byte "Happy"
    concat
    swap
    // arc4_types/mutation.py:131
    // s_val_2=String("Days"),
    byte "Days"
    len
    itob
    extract 6 2
    byte "Days"
    concat
    cover 2
    // arc4_types/mutation.py:127-132
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x
    swap
    concat
    // arc4_types/mutation.py:129
    // u_val=UInt8(12),
    byte 0x0c
    // arc4_types/mutation.py:127-132
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    concat
    int 6
    itob
    extract 6 2
    concat
    dig 1
    len
    int 6
    swap
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:133
    // test_struct.s_val_1 = String("Hmmmm")
    byte "Hmmmm"
    len
    itob
    extract 6 2
    byte "Hmmmm"
    concat
    swap
    dup
    int 2
    extract_uint16
    dig 1
    int 0
    dig 2
    extract3
    swap
    dig 2
    int 4
    extract_uint16
    swap
    dig 3
    len
    swap
    uncover 4
    uncover 3
    uncover 3
    substring3
    uncover 2
    dig 3
    concat
    swap
    concat
    swap
    uncover 2
    len
    +
    itob
    substring 6 8
    replace2 4
    // arc4_types/mutation.py:134
    // test_struct.s_val_2 = String("Oh well")
    byte "Oh well"
    len
    itob
    extract 6 2
    byte "Oh well"
    concat
    dig 1
    int 4
    extract_uint16
    uncover 2
    int 0
    uncover 2
    extract3
    swap
    concat
    // arc4_types/mutation.py:137
    // b_val=Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/mutation.py:139
    // s_val_1=String("Hmmmm"),
    byte "Hmmmm"
    len
    itob
    extract 6 2
    byte "Hmmmm"
    concat
    swap
    // arc4_types/mutation.py:140
    // s_val_2=String("Oh well"),
    byte "Oh well"
    len
    itob
    extract 6 2
    byte "Oh well"
    concat
    cover 2
    // arc4_types/mutation.py:136-141
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Hmmmm"),
    //     s_val_2=String("Oh well"),
    // )
    byte 0x
    swap
    concat
    // arc4_types/mutation.py:138
    // u_val=UInt8(12),
    byte 0x0c
    // arc4_types/mutation.py:136-141
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Hmmmm"),
    //     s_val_2=String("Oh well"),
    // )
    concat
    int 6
    itob
    extract 6 2
    concat
    dig 1
    len
    int 6
    swap
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
array_concat:
    // arc4_types/mutation.py:58-59
    // @subroutine
    // def array_concat(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:60
    // uint8_array = DynamicArray(UInt8(1), UInt8(2))
    byte 0x0002
    byte 0x01
    concat
    byte 0x02
    concat
    // arc4_types/mutation.py:61
    // array_concat_tuple = uint8_array + (UInt8(3), UInt8(4))  # noqa: RUF005
    extract 2 0
    byte 0x
    byte 0x03
    concat
    byte 0x04
    concat
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/mutation.py:62
    // assert array_concat_tuple == DynamicArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x0004
    byte 0x01
    concat
    byte 0x02
    concat
    byte 0x03
    concat
    byte 0x04
    concat
    dig 1
    swap
    ==
    assert
    // arc4_types/mutation.py:63
    // array_concat_tuple += (UInt8(5),)
    extract 2 0
    byte 0x
    byte 0x05
    concat
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/mutation.py:64
    // assert array_concat_tuple == DynamicArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4), UInt8(5))
    byte 0x0005
    byte 0x01
    concat
    byte 0x02
    concat
    byte 0x03
    concat
    byte 0x04
    concat
    byte 0x05
    concat
    ==
    assert
    // arc4_types/mutation.py:66
    // hello_world = DynamicArray(String("Hello"), String("World"))
    byte "Hello"
    len
    itob
    extract 6 2
    byte "Hello"
    concat
    byte "World"
    len
    itob
    extract 6 2
    byte "World"
    concat
    swap
    int 4
    itob
    extract 6 2
    byte 0x0002
    swap
    concat
    dig 1
    len
    int 4
    swap
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // arc4_types/mutation.py:67
    // hello_world_concat = DynamicArray(String("Hello")) + DynamicArray(String("World"))
    byte "World"
    len
    itob
    extract 6 2
    byte "World"
    concat
    int 2
    itob
    extract 6 2
    byte 0x0001
    swap
    concat
    swap
    concat
    dup
    int 0
    extract_uint16
    dup
    int 2
    *
    int 2
    +
    dig 2
    len
    swap
    uncover 3
    swap
    uncover 2
    substring3
    byte "Hello"
    len
    itob
    extract 6 2
    byte "Hello"
    concat
    int 2
    itob
    extract 6 2
    byte 0x0001
    swap
    concat
    swap
    concat
    swap
    uncover 2
    callsub dynamic_array_concat_variable_size
    // arc4_types/mutation.py:68
    // assert hello_world == hello_world_concat
    ==
    assert
    retsub


// algopy_lib_arc4.dynamic_array_pop_bit(source: bytes) -> bytes, bytes:
dynamic_array_pop_bit:
    // <algopy>/algopy_lib_arc4.py:20-21
    proto 1 2
    // <algopy>/algopy_lib_arc4.py:29
    frame_dig -1
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:30
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:31
    dup
    itob
    extract 6 0
    frame_dig -1
    swap
    replace2 0
    // <algopy>/algopy_lib_arc4.py:32
    dig 1
    int 16
    +
    // <algopy>/algopy_lib_arc4.py:33
    dig 1
    dig 1
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 3
    // <algopy>/algopy_lib_arc4.py:34
    int 0
    setbit
    // <algopy>/algopy_lib_arc4.py:35
    swap
    int 7
    +
    int 8
    /
    int 2
    swap
    +
    swap
    int 0
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:36
    retsub


// algopy_lib_arc4.dynamic_array_pop_fixed_size(source: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    // <algopy>/algopy_lib_arc4.py:39-40
    proto 2 2
    // <algopy>/algopy_lib_arc4.py:48
    frame_dig -2
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:49
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:50
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    // <algopy>/algopy_lib_arc4.py:51
    dup
    len
    frame_dig -1
    -
    // <algopy>/algopy_lib_arc4.py:52
    dig 1
    dig 1
    frame_dig -1
    extract3
    cover 2
    // <algopy>/algopy_lib_arc4.py:53
    swap
    int 0
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:54
    retsub


// algopy_lib_arc4.dynamic_array_pop_variable_size(source: bytes) -> bytes, bytes:
dynamic_array_pop_variable_size:
    // <algopy>/algopy_lib_arc4.py:57-58
    proto 1 2
    // <algopy>/algopy_lib_arc4.py:66
    frame_dig -1
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:67
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:68
    dup
    int 2
    *
    // <algopy>/algopy_lib_arc4.py:69
    frame_dig -1
    extract 2 0
    // <algopy>/algopy_lib_arc4.py:70
    dup
    dig 2
    extract_uint16
    swap
    // <algopy>/algopy_lib_arc4.py:72
    dup
    len
    swap
    dup
    dig 3
    uncover 3
    substring3
    cover 3
    // <algopy>/algopy_lib_arc4.py:73
    dup
    int 0
    dig 4
    substring3
    cover 2
    // <algopy>/algopy_lib_arc4.py:74
    uncover 3
    int 2
    +
    // <algopy>/algopy_lib_arc4.py:73-75
    uncover 2
    substring3
    concat
    // <algopy>/algopy_lib_arc4.py:77
    dig 2
    itob
    extract 6 0
    // <algopy>/algopy_lib_arc4.py:77-79
    swap
    uncover 3
    // <algopy>/algopy_lib_arc4.py:78
    int 0
    // <algopy>/algopy_lib_arc4.py:77-79
    callsub recalculate_array_offsets_static
    concat
    // <algopy>/algopy_lib_arc4.py:81
    retsub


// algopy_lib_arc4.dynamic_array_concat_bits(source: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: uint64) -> bytes:
dynamic_array_concat_bits:
    // <algopy>/algopy_lib_arc4.py:84-87
    proto 4 1
    byte ""
    dupn 2
    // <algopy>/algopy_lib_arc4.py:100
    frame_dig -4
    int 0
    extract_uint16
    dup
    swap
    // <algopy>/algopy_lib_arc4.py:101
    dup
    frame_dig -2
    +
    // <algopy>/algopy_lib_arc4.py:102
    dup
    itob
    extract 6 0
    // <algopy>/algopy_lib_arc4.py:103
    frame_dig -4
    swap
    replace2 0
    dup
    cover 3
    cover 3
    // <algopy>/algopy_lib_arc4.py:104
    swap
    int 7
    +
    int 8
    /
    dup
    cover 3
    // <algopy>/algopy_lib_arc4.py:105
    swap
    int 7
    +
    int 8
    /
    dup
    cover 3
    // <algopy>/algopy_lib_arc4.py:106
    <
    bz dynamic_array_concat_bits_after_if_else@2
    // <algopy>/algopy_lib_arc4.py:107
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    // <algopy>/algopy_lib_arc4.py:109
    frame_dig 3
    int 16
    +
    frame_bury 2
    // <algopy>/algopy_lib_arc4.py:110
    frame_dig -1
    bz dynamic_array_concat_bits_ternary_false@4
    int 1
    frame_bury 1
    b dynamic_array_concat_bits_ternary_merge@5

dynamic_array_concat_bits_ternary_false@4:
    // <algopy>/algopy_lib_arc4.py:110
    int 8
    frame_bury 1

dynamic_array_concat_bits_ternary_merge@5:
    // <algopy>/algopy_lib_arc4.py:110
    frame_dig 1
    assert // Step cannot be zero
    int 0
    frame_bury 0

dynamic_array_concat_bits_for_header@6:
    // <algopy>/algopy_lib_arc4.py:110
    frame_dig 0
    frame_dig -2
    <
    bz dynamic_array_concat_bits_after_for@10
    frame_dig 0
    // <algopy>/algopy_lib_arc4.py:111
    frame_dig -3
    swap
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    // <algopy>/algopy_lib_arc4.py:112
    int 1
    +
    frame_bury 2
    // <algopy>/algopy_lib_arc4.py:110
    frame_dig 0
    frame_dig 1
    +
    frame_bury 0
    b dynamic_array_concat_bits_for_header@6

dynamic_array_concat_bits_after_for@10:
    // <algopy>/algopy_lib_arc4.py:114
    frame_dig 4
    frame_bury 0
    retsub


// algopy_lib_arc4.dynamic_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_variable_size:
    // <algopy>/algopy_lib_arc4.py:117-118
    proto 3 1
    // <algopy>/algopy_lib_arc4.py:129
    frame_dig -3
    substring 0 2
    // <algopy>/algopy_lib_arc4.py:130
    dup
    btoi
    // <algopy>/algopy_lib_arc4.py:132
    frame_dig -3
    extract 2 0
    // <algopy>/algopy_lib_arc4.py:131-136
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_variable_size
    concat
    retsub


// algopy_lib_arc4.static_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_variable_size:
    // <algopy>/algopy_lib_arc4.py:139-142
    proto 4 1
    // <algopy>/algopy_lib_arc4.py:153
    frame_dig -2
    frame_dig -1
    <
    assert // Index out of bounds
    // <algopy>/algopy_lib_arc4.py:154
    frame_dig -2
    int 2
    *
    frame_dig -4
    swap
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:155
    frame_dig -4
    dig 1
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:156
    dig 1
    swap
    +
    int 2
    +
    swap
    // <algopy>/algopy_lib_arc4.py:158
    frame_dig -4
    int 0
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:158-159
    frame_dig -3
    concat
    // <algopy>/algopy_lib_arc4.py:160
    frame_dig -4
    len
    frame_dig -4
    uncover 3
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:158-160
    concat
    // <algopy>/algopy_lib_arc4.py:157-163
    frame_dig -1
    frame_dig -2
    callsub recalculate_array_offsets_static
    retsub


// algopy_lib_arc4.dynamic_array_concat_variable_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_variable_size:
    // <algopy>/algopy_lib_arc4.py:166-169
    proto 3 1
    // <algopy>/algopy_lib_arc4.py:179
    frame_dig -3
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:180
    dup
    frame_dig -1
    +
    swap
    // <algopy>/algopy_lib_arc4.py:181
    int 2
    *
    int 2
    +
    swap
    // <algopy>/algopy_lib_arc4.py:183
    dup
    itob
    extract 6 0
    swap
    // <algopy>/algopy_lib_arc4.py:185
    frame_dig -3
    int 2
    dig 4
    substring3
    // <algopy>/algopy_lib_arc4.py:186
    frame_dig -1
    int 2
    *
    bzero
    // <algopy>/algopy_lib_arc4.py:185-186
    concat
    // <algopy>/algopy_lib_arc4.py:187
    frame_dig -3
    len
    frame_dig -3
    uncover 5
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:185-187
    concat
    // <algopy>/algopy_lib_arc4.py:185-188
    frame_dig -2
    concat
    // <algopy>/algopy_lib_arc4.py:183-192
    swap
    // <algopy>/algopy_lib_arc4.py:191
    int 0
    // <algopy>/algopy_lib_arc4.py:183-192
    callsub recalculate_array_offsets_static
    concat
    retsub


// algopy_lib_arc4.recalculate_array_offsets_static(array_data: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_array_offsets_static:
    // <algopy>/algopy_lib_arc4.py:195-198
    proto 3 1
    byte ""
    dup
    // <algopy>/algopy_lib_arc4.py:209
    frame_dig -1
    int 2
    *
    // <algopy>/algopy_lib_arc4.py:210
    frame_dig -1
    int 0
    ==
    bz recalculate_array_offsets_static_else_body@2
    // <algopy>/algopy_lib_arc4.py:211
    frame_dig -2
    int 2
    *
    frame_bury 1
    b recalculate_array_offsets_static_after_if_else@3

recalculate_array_offsets_static_else_body@2:
    // <algopy>/algopy_lib_arc4.py:213
    frame_dig -3
    frame_dig 2
    extract_uint16
    frame_bury 1

recalculate_array_offsets_static_after_if_else@3:
    // <algopy>/algopy_lib_arc4.py:215
    int 1
    assert // Step cannot be zero
    frame_dig -1
    frame_bury 0

recalculate_array_offsets_static_for_header@4:
    // <algopy>/algopy_lib_arc4.py:215
    frame_dig 0
    frame_dig -2
    <
    bz recalculate_array_offsets_static_after_for@8
    // <algopy>/algopy_lib_arc4.py:216
    frame_dig 1
    dup
    itob
    extract 6 0
    // <algopy>/algopy_lib_arc4.py:217
    frame_dig -3
    frame_dig 2
    dup
    cover 4
    uncover 2
    replace3
    dup
    frame_bury -3
    // <algopy>/algopy_lib_arc4.py:218
    dig 1
    extract_uint16
    int 2
    +
    +
    frame_bury 1
    // <algopy>/algopy_lib_arc4.py:219
    int 2
    +
    frame_bury 2
    // <algopy>/algopy_lib_arc4.py:215
    frame_dig 0
    int 1
    +
    frame_bury 0
    b recalculate_array_offsets_static_for_header@4

recalculate_array_offsets_static_after_for@8:
    // <algopy>/algopy_lib_arc4.py:221
    frame_dig -3
    frame_bury 0
    retsub
