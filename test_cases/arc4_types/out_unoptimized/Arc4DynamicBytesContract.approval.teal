#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program() -> uint64:
main:
    intcblock 0 1 3
    bytecblock 0x 0x0304 0x03 0x33 0x00020304 0x616263
    intc_0 // 0
    dup
    bytec_0 // ""
    dupn 3

main_block@0:
    // arc4_types/dynamic_bytes.py:11
    // total = UInt64(0)
    intc_0 // 0
    // arc4_types/dynamic_bytes.py:12
    // dynamic_bytes = DynamicBytes(Byte(2), UInt8(3), 1)
    bytec_0 // 0x
    pushbytes 0x02
    concat
    bytec_2 // 0x03
    concat
    pushbytes 0x01
    concat
    bytec_0 // 0x
    concat
    intc_2 // 3
    itob
    extract 6 2
    swap
    concat
    dupn 2
    // arc4_types/dynamic_bytes.py:13
    // assert dynamic_bytes.native == b"\x02\x03\x01"
    extract 2 0
    pushbytes 0x020301
    ==
    assert
    // arc4_types/dynamic_bytes.py:14
    // assert dynamic_bytes.bytes == b"\x00\x03\x02\x03\x01"
    dup
    pushbytes 0x0003020301
    ==
    assert
    // arc4_types/dynamic_bytes.py:16
    // for uint8_item in dynamic_bytes:
    intc_0 // 0
    extract_uint16
    intc_0 // 0

main_for_header@1:
    // arc4_types/dynamic_bytes.py:16
    // for uint8_item in dynamic_bytes:
    dup
    dig 2
    <
    bz main_after_for@4

main_for_body@2:
    // arc4_types/dynamic_bytes.py:16
    // for uint8_item in dynamic_bytes:
    dig 2
    extract 2 0
    dig 1
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    // arc4_types/dynamic_bytes.py:17
    // total += uint8_item.native
    btoi
    dig 4
    +
    bury 4

main_for_footer@3:
    dup
    intc_1 // 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    // arc4_types/dynamic_bytes.py:19
    // assert total == 6, "Total should be of dynamic_bytes items"
    dig 3
    pushint 6 // 6
    ==
    assert // Total should be of dynamic_bytes items
    // arc4_types/dynamic_bytes.py:21
    // dynamic_bytes2 = DynamicBytes(b"\x03\x04")
    bytec_1 // 0x0304
    len
    itob
    extract 6 2
    bytec_1 // 0x0304
    concat
    dup
    bury 11
    // arc4_types/dynamic_bytes.py:22
    // assert dynamic_bytes2.native == b"\x03\x04"
    dup
    extract 2 0
    bytec_1 // 0x0304
    ==
    assert
    // arc4_types/dynamic_bytes.py:23
    // assert dynamic_bytes2.bytes == b"\x00\x02\x03\x04"
    dup
    bytec 4 // 0x00020304
    ==
    assert
    // arc4_types/dynamic_bytes.py:25
    // for uint8_item in dynamic_bytes2:
    intc_0 // 0
    extract_uint16
    bury 8
    intc_0 // 0
    bury 6

main_for_header@5:
    // arc4_types/dynamic_bytes.py:25
    // for uint8_item in dynamic_bytes2:
    dig 5
    dig 8
    <
    bz main_after_for@8

main_for_body@6:
    // arc4_types/dynamic_bytes.py:25
    // for uint8_item in dynamic_bytes2:
    dig 9
    extract 2 0
    dig 6
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    // arc4_types/dynamic_bytes.py:26
    // total += uint8_item.native
    btoi
    dig 4
    +
    bury 4

main_for_footer@7:
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@5

main_after_for@8:
    // arc4_types/dynamic_bytes.py:28
    // dynamic_bytes3 = DynamicBytes(dynamic_bytes2.native)
    dig 9
    extract 2 0
    dup
    len
    itob
    extract 6 2
    swap
    concat
    dup
    bury 10
    // arc4_types/dynamic_bytes.py:29
    // assert dynamic_bytes3.native == b"\x03\x04"
    dup
    extract 2 0
    bytec_1 // 0x0304
    ==
    assert
    // arc4_types/dynamic_bytes.py:30
    // assert dynamic_bytes3.bytes == b"\x00\x02\x03\x04"
    dup
    bytec 4 // 0x00020304
    ==
    assert
    // arc4_types/dynamic_bytes.py:32
    // for uint8_item in dynamic_bytes3:
    intc_0 // 0
    extract_uint16
    bury 7
    intc_0 // 0
    bury 5

main_for_header@9:
    // arc4_types/dynamic_bytes.py:32
    // for uint8_item in dynamic_bytes3:
    dig 4
    dig 7
    <
    bz main_after_for@12

main_for_body@10:
    // arc4_types/dynamic_bytes.py:32
    // for uint8_item in dynamic_bytes3:
    dig 8
    extract 2 0
    dig 5
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    // arc4_types/dynamic_bytes.py:33
    // total += uint8_item.native
    btoi
    dig 4
    +
    bury 4

main_for_footer@11:
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@9

main_after_for@12:
    // arc4_types/dynamic_bytes.py:35
    // assert total == 20, "Total should now include sum of dynamic_bytes3 items"
    dig 3
    pushint 20 // 20
    ==
    assert // Total should now include sum of dynamic_bytes3 items
    // arc4_types/dynamic_bytes.py:37
    // dynamic_bytes3.extend(DynamicBytes(b"abc"))
    dig 8
    extract 2 0
    bytec 5 // 0x616263
    len
    itob
    extract 6 2
    bytec 5 // 0x616263
    concat
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/dynamic_bytes.py:38
    // assert dynamic_bytes3.bytes == b"\x00\x05\x03\x04abc"
    dup
    pushbytes 0x00050304616263
    ==
    assert
    // arc4_types/dynamic_bytes.py:39
    // assert dynamic_bytes3.native == b"\x03\x04abc"
    extract 2 0
    pushbytes 0x0304616263
    ==
    assert
    // arc4_types/dynamic_bytes.py:41
    // dynamic_bytes = DynamicBytes(2 if Txn.num_app_args else 3, UInt8(3), 1)
    txn NumAppArgs
    intc_0 // 0
    !=
    bytec_2 // 0x03
    pushbytes 0x02
    uncover 2
    select
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x03
    concat
    pushbytes 0x01
    concat
    bytec_0 // 0x
    concat
    intc_2 // 3
    itob
    extract 6 2
    swap
    concat
    // arc4_types/dynamic_bytes.py:42
    // assert dynamic_bytes.native == Bytes.from_hex("030301")
    extract 2 0
    pushbytes 0x030301
    ==
    assert
    // arc4_types/dynamic_bytes.py:44
    // dynamic_bytes = DynamicBytes(b"2" if Txn.num_app_args else b"3")
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_ternary_false@14

main_ternary_true@13:
    // arc4_types/dynamic_bytes.py:44
    // dynamic_bytes = DynamicBytes(b"2" if Txn.num_app_args else b"3")
    pushbytes 0x32
    len
    itob
    extract 6 2
    pushbytes 0x32
    concat

main_ternary_merge@15:
    // arc4_types/dynamic_bytes.py:45
    // assert dynamic_bytes.native == b"3"
    extract 2 0
    bytec_3 // 0x33
    ==
    assert
    // arc4_types/dynamic_bytes.py:46
    // return True
    intc_1 // 1
    return

main_ternary_false@14:
    // arc4_types/dynamic_bytes.py:44
    // dynamic_bytes = DynamicBytes(b"2" if Txn.num_app_args else b"3")
    bytec_3 // 0x33
    len
    itob
    extract 6 2
    bytec_3 // 0x33
    concat
    b main_ternary_merge@15
