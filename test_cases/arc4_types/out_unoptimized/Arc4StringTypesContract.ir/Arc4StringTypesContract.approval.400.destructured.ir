main test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    block@0: // L7
        let aggregate%length%0#1: uint64 = (len 0x48656c6c6f20576f726c6421)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x48656c6c6f20576f726c6421)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let some_bytes_as_string#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) some_bytes_as_string#0)
        let some_bytes_as_bytes_again#0: bytes = tmp%1#0
        let tmp%2#0: bool = (!= some_bytes_as_string#0 0x48656c6c6f20576f726c6421)
        (assert tmp%2#0) // Original bytes should not match encoded bytes
        let length%0#0: uint64 = (len some_bytes_as_string#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%0#0)
        let bounded_index%0#0: uint64 = (select 2u length%0#0 is_out_of_bounds%0#0)
        let tmp%3#0: bytes = (substring3 some_bytes_as_string#0 bounded_index%0#0 length%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x48656c6c6f20576f726c6421)
        (assert tmp%4#0) // Original bytes should match encoded if we strip the length header
        let tmp%5#0: bool = (== some_bytes_as_bytes_again#0 0x48656c6c6f20576f726c6421)
        (assert tmp%5#0)
        let aggregate%length%1#1: uint64 = (len 0x48656c6c6f)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x48656c6c6f)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let hello#0: Encoded(len+utf8[]) = encoded%0#0
        let aggregate%length%2#1: uint64 = (len 0x20)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x20)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let space#0: Encoded(len+utf8[]) = encoded%1#0
        let aggregate%length%3#1: uint64 = (len 0x576f726c6421)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x576f726c6421)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let world#0: Encoded(len+utf8[]) = encoded%2#0
        let aggregate%length%4#1: uint64 = (len 0x48656c6c6f20576f726c6421)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 0x48656c6c6f20576f726c6421)
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        let extract_to_end%0#0: bytes = ((extract 2 0) space#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat hello#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = replace%0#0
        let extract_to_end%2#0: bytes = ((extract 2 0) world#0)
        let concat%1#0: Encoded(len+utf8[]) = (concat as_Encoded(len+utf8[])%0#0 extract_to_end%2#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = replace%1#0
        let tmp%6#0: bool = (== encoded%3#0 as_Encoded(len+utf8[])%1#0)
        (assert tmp%6#0)
        let aggregate%length%5#1: uint64 = (len 0x6869)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 0x6869)
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let encoded%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#1
        let thing#0: Encoded(len+utf8[]) = encoded%4#0
        let extract_to_end%4#0: bytes = ((extract 2 0) thing#0)
        let concat%2#0: Encoded(len+utf8[]) = (concat thing#0 extract_to_end%4#0) // on error: max array length exceeded
        let extract_to_end%5#0: bytes = ((extract 2 0) concat%2#0)
        let len%2#0: uint64 = (len extract_to_end%5#0)
        let div_floor%2#0: uint64 = (/ len%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = replace%2#0
        let thing#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let aggregate%length%6#1: uint64 = (len 0x68696869)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 0x68696869)
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let encoded%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#1
        let tmp%7#0: bool = (== thing#0 encoded%5#0)
        (assert tmp%7#0)
        let aggregate%length%7#1: uint64 = (len 0x61)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 0x61)
        let aggregate%as_Encoded(len+utf8[])%7#1: Encoded(len+utf8[]) = aggregate%encoded_value%7#1
        let encoded%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#1
        let aggregate%length%8#1: uint64 = (len 0x62)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%8#1)
        let aggregate%length_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%8#1: bytes = (concat aggregate%length_uint16%8#1 0x62)
        let aggregate%as_Encoded(len+utf8[])%8#1: Encoded(len+utf8[]) = aggregate%encoded_value%8#1
        let encoded%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%8#1
        let extract_to_end%6#0: bytes = ((extract 2 0) encoded%7#0)
        let concat%3#0: Encoded(len+utf8[]) = (concat encoded%6#0 extract_to_end%6#0) // on error: max array length exceeded
        let extract_to_end%7#0: bytes = ((extract 2 0) concat%3#0)
        let len%3#0: uint64 = (len extract_to_end%7#0)
        let div_floor%3#0: uint64 = (/ len%3#0 1u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = (replace3 concat%3#0 0u as_u16_bytes%3#0)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = replace%3#0
        let aggregate%length%9#1: uint64 = (len 0x6364)
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%length%9#1)
        let aggregate%length_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded_value%9#1: bytes = (concat aggregate%length_uint16%9#1 0x6364)
        let aggregate%as_Encoded(len+utf8[])%9#1: Encoded(len+utf8[]) = aggregate%encoded_value%9#1
        let encoded%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%9#1
        let extract_to_end%8#0: bytes = ((extract 2 0) encoded%8#0)
        let concat%4#0: Encoded(len+utf8[]) = (concat as_Encoded(len+utf8[])%3#0 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%9#0: bytes = ((extract 2 0) concat%4#0)
        let len%4#0: uint64 = (len extract_to_end%9#0)
        let div_floor%4#0: uint64 = (/ len%4#0 1u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%4#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let replace%4#0: bytes = (replace3 concat%4#0 0u as_u16_bytes%4#0)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = replace%4#0
        let value#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%4#0
        let aggregate%length%10#1: uint64 = (len 0x65)
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%length%10#1)
        let aggregate%length_uint16%10#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded_value%10#1: bytes = (concat aggregate%length_uint16%10#1 0x65)
        let aggregate%as_Encoded(len+utf8[])%10#1: Encoded(len+utf8[]) = aggregate%encoded_value%10#1
        let encoded%9#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%10#1
        let extract_to_end%10#0: bytes = ((extract 2 0) encoded%9#0)
        let concat%5#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%10#0) // on error: max array length exceeded
        let extract_to_end%11#0: bytes = ((extract 2 0) concat%5#0)
        let len%5#0: uint64 = (len extract_to_end%11#0)
        let div_floor%5#0: uint64 = (/ len%5#0 1u)
        let as_bytes%5#0: bytes[8] = (itob div_floor%5#0)
        let as_u16_bytes%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let replace%5#0: bytes = (replace3 concat%5#0 0u as_u16_bytes%5#0)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = replace%5#0
        let value#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%5#0
        let aggregate%length%11#1: uint64 = (len 0x66)
        let aggregate%as_bytes%11#1: bytes[8] = (itob aggregate%length%11#1)
        let aggregate%length_uint16%11#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%encoded_value%11#1: bytes = (concat aggregate%length_uint16%11#1 0x66)
        let aggregate%as_Encoded(len+utf8[])%11#1: Encoded(len+utf8[]) = aggregate%encoded_value%11#1
        let encoded%10#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%11#1
        let extract_to_end%12#0: bytes = ((extract 2 0) encoded%10#0)
        let concat%6#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%12#0) // on error: max array length exceeded
        let extract_to_end%13#0: bytes = ((extract 2 0) concat%6#0)
        let len%6#0: uint64 = (len extract_to_end%13#0)
        let div_floor%6#0: uint64 = (/ len%6#0 1u)
        let as_bytes%6#0: bytes[8] = (itob div_floor%6#0)
        let as_u16_bytes%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let replace%6#0: bytes = (replace3 concat%6#0 0u as_u16_bytes%6#0)
        let as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = replace%6#0
        let value#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%6#0
        let aggregate%length%12#1: uint64 = (len 0x67)
        let aggregate%as_bytes%12#1: bytes[8] = (itob aggregate%length%12#1)
        let aggregate%length_uint16%12#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded_value%12#1: bytes = (concat aggregate%length_uint16%12#1 0x67)
        let aggregate%as_Encoded(len+utf8[])%12#1: Encoded(len+utf8[]) = aggregate%encoded_value%12#1
        let encoded%11#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%12#1
        let extract_to_end%14#0: bytes = ((extract 2 0) encoded%11#0)
        let concat%7#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%14#0) // on error: max array length exceeded
        let extract_to_end%15#0: bytes = ((extract 2 0) concat%7#0)
        let len%7#0: uint64 = (len extract_to_end%15#0)
        let div_floor%7#0: uint64 = (/ len%7#0 1u)
        let as_bytes%7#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let replace%7#0: bytes = (replace3 concat%7#0 0u as_u16_bytes%7#0)
        let as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = replace%7#0
        let value#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%7#0
        let aggregate%length%13#1: uint64 = (len 0x61626364656667)
        let aggregate%as_bytes%13#1: bytes[8] = (itob aggregate%length%13#1)
        let aggregate%length_uint16%13#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%encoded_value%13#1: bytes = (concat aggregate%length_uint16%13#1 0x61626364656667)
        let aggregate%as_Encoded(len+utf8[])%13#1: Encoded(len+utf8[]) = aggregate%encoded_value%13#1
        let encoded%12#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%13#1
        let tmp%8#0: bool = (== encoded%12#0 value#0)
        (assert tmp%8#0)
        let aggregate%length%14#1: uint64 = (len 0x)
        let aggregate%as_bytes%14#1: bytes[8] = (itob aggregate%length%14#1)
        let aggregate%length_uint16%14#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded_value%14#1: bytes = (concat aggregate%length_uint16%14#1 0x)
        let aggregate%as_Encoded(len+utf8[])%14#1: Encoded(len+utf8[]) = aggregate%encoded_value%14#1
        let encoded%13#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%14#1
        let tmp%9#0: string = ((extract 2 0) encoded%13#0)
        let tmp%10#0: bool = (== tmp%9#0 "")
        (assert tmp%10#0)
        let aggregate%length%15#1: uint64 = (len 0x68656c6c6f)
        let aggregate%as_bytes%15#1: bytes[8] = (itob aggregate%length%15#1)
        let aggregate%length_uint16%15#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded_value%15#1: bytes = (concat aggregate%length_uint16%15#1 0x68656c6c6f)
        let aggregate%as_Encoded(len+utf8[])%15#1: Encoded(len+utf8[]) = aggregate%encoded_value%15#1
        let encoded%14#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%15#1
        let tmp%11#0: string = ((extract 2 0) encoded%14#0)
        let tmp%12#0: bool = (== tmp%11#0 "hello")
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        goto tmp%14#0 ? block@1 : block@2
    block@1: // ternary_true_L41
        let aggregate%length%16#1: uint64 = (len 0x617965)
        let aggregate%as_bytes%16#1: bytes[8] = (itob aggregate%length%16#1)
        let aggregate%length_uint16%16#1: bytes = ((extract 6 2) aggregate%as_bytes%16#1)
        let aggregate%encoded_value%16#1: bytes = (concat aggregate%length_uint16%16#1 0x617965)
        let aggregate%as_Encoded(len+utf8[])%16#1: Encoded(len+utf8[]) = aggregate%encoded_value%16#1
        let encoded%15#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%16#1
        let ternary_result%0#0: Encoded(len+utf8[]) = encoded%15#0
        goto block@3
    block@2: // ternary_false_L41
        let aggregate%length%17#1: uint64 = (len 0x626565)
        let aggregate%as_bytes%17#1: bytes[8] = (itob aggregate%length%17#1)
        let aggregate%length_uint16%17#1: bytes = ((extract 6 2) aggregate%as_bytes%17#1)
        let aggregate%encoded_value%17#1: bytes = (concat aggregate%length_uint16%17#1 0x626565)
        let aggregate%as_Encoded(len+utf8[])%17#1: Encoded(len+utf8[]) = aggregate%encoded_value%17#1
        let encoded%16#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%17#1
        let ternary_result%0#0: Encoded(len+utf8[]) = encoded%16#0
        goto block@3
    block@3: // ternary_merge_L41
        let aggregate%length%18#1: uint64 = (len 0x626565)
        let aggregate%as_bytes%18#1: bytes[8] = (itob aggregate%length%18#1)
        let aggregate%length_uint16%18#1: bytes = ((extract 6 2) aggregate%as_bytes%18#1)
        let aggregate%encoded_value%18#1: bytes = (concat aggregate%length_uint16%18#1 0x626565)
        let aggregate%as_Encoded(len+utf8[])%18#1: Encoded(len+utf8[]) = aggregate%encoded_value%18#1
        let encoded%17#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%18#1
        let tmp%15#0: bool = (== ternary_result%0#0 encoded%17#0)
        (assert tmp%15#0)
        return 1u