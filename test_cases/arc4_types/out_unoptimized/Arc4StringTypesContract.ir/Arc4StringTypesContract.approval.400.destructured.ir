main test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    block@0: // L7
        let aggregate%length%0#0: uint64 = (len 0x48656c6c6f20576f726c6421)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x48656c6c6f20576f726c6421)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let some_bytes_as_string#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) some_bytes_as_string#0)
        let some_bytes_as_bytes_again#0: bytes = tmp%1#0
        let tmp%2#0: bool = (!= some_bytes_as_string#0 0x48656c6c6f20576f726c6421)
        (assert tmp%2#0) // Original bytes should not match encoded bytes
        let length%0#0: uint64 = (len some_bytes_as_string#0)
        let is_out_of_bounds%0#0: bool = (>= 2u length%0#0)
        let bounded_index%0#0: uint64 = (select 2u length%0#0 is_out_of_bounds%0#0)
        let tmp%3#0: bytes = (substring3 some_bytes_as_string#0 bounded_index%0#0 length%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x48656c6c6f20576f726c6421)
        (assert tmp%4#0) // Original bytes should match encoded if we strip the length header
        let tmp%5#0: bool = (== some_bytes_as_bytes_again#0 0x48656c6c6f20576f726c6421)
        (assert tmp%5#0)
        let aggregate%length%1#0: uint64 = (len "Hello")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let hello#0: Encoded(len+utf8[]) = tmp%6#0
        let aggregate%length%2#0: uint64 = (len " ")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 " ")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let space#0: Encoded(len+utf8[]) = tmp%7#0
        let aggregate%length%3#0: uint64 = (len "World!")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "World!")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let world#0: Encoded(len+utf8[]) = tmp%8#0
        let aggregate%length%4#0: uint64 = (len "Hello World!")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 "Hello World!")
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%9#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        let total_length%0#0: uint64 = (len space#0)
        let extract_to_end%0#0: bytes = (substring3 space#0 2u total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 space#0 0u)
        let tmp%10#0: uint64 = aggregate%array_length%0#0
        let aggregate%concat%0#0: Encoded(len+utf8[]) = (concat hello#0 extract_to_end%0#0) // on error: max array length exceeded
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 aggregate%concat%0#0 0u)
        let aggregate%add%0#0: uint64 = (+ aggregate%extract_uint16%0#0 tmp%10#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%add%0#0)
        let aggregate%as_u16_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%replace%0#0: bytes = (replace3 aggregate%concat%0#0 0u aggregate%as_u16_bytes%0#0)
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%replace%0#0
        let tmp%11#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let total_length%1#0: uint64 = (len world#0)
        let extract_to_end%1#0: bytes = (substring3 world#0 2u total_length%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 world#0 0u)
        let tmp%12#0: uint64 = aggregate%array_length%1#0
        let aggregate%concat%1#0: Encoded(len+utf8[]) = (concat tmp%11#0 extract_to_end%1#0) // on error: max array length exceeded
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 aggregate%concat%1#0 0u)
        let aggregate%add%1#0: uint64 = (+ aggregate%extract_uint16%1#0 tmp%12#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%add%1#0)
        let aggregate%as_u16_bytes%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%replace%1#0: bytes = (replace3 aggregate%concat%1#0 0u aggregate%as_u16_bytes%1#0)
        let aggregate%as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = aggregate%replace%1#0
        let tmp%13#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#0
        let tmp%14#0: bool = (== tmp%9#0 tmp%13#0)
        (assert tmp%14#0)
        let aggregate%length%5#0: uint64 = (len "hi")
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 "hi")
        let aggregate%as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%15#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#0
        let thing#0: Encoded(len+utf8[]) = tmp%15#0
        let total_length%2#0: uint64 = (len thing#0)
        let extract_to_end%2#0: bytes = (substring3 thing#0 2u total_length%2#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 thing#0 0u)
        let tmp%16#0: uint64 = aggregate%array_length%2#0
        let aggregate%concat%2#0: Encoded(len+utf8[]) = (concat thing#0 extract_to_end%2#0) // on error: max array length exceeded
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 aggregate%concat%2#0 0u)
        let aggregate%add%2#0: uint64 = (+ aggregate%extract_uint16%2#0 tmp%16#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%add%2#0)
        let aggregate%as_u16_bytes%2#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%replace%2#0: bytes = (replace3 aggregate%concat%2#0 0u aggregate%as_u16_bytes%2#0)
        let aggregate%as_Encoded(len+utf8[])%8#0: Encoded(len+utf8[]) = aggregate%replace%2#0
        let tmp%17#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%8#0
        let thing#0: Encoded(len+utf8[]) = tmp%17#0
        let aggregate%length%6#0: uint64 = (len "hihi")
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 "hihi")
        let aggregate%as_Encoded(len+utf8[])%9#0: Encoded(len+utf8[]) = aggregate%encoded_value%6#0
        let tmp%18#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%9#0
        let tmp%19#0: bool = (== thing#0 tmp%18#0)
        (assert tmp%19#0)
        let aggregate%length%7#0: uint64 = (len "a")
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 "a")
        let aggregate%as_Encoded(len+utf8[])%10#0: Encoded(len+utf8[]) = aggregate%encoded_value%7#0
        let tmp%20#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%10#0
        let aggregate%length%8#0: uint64 = (len "b")
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%length%8#0)
        let aggregate%length_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%encoded_value%8#0: bytes = (concat aggregate%length_uint16%8#0 "b")
        let aggregate%as_Encoded(len+utf8[])%11#0: Encoded(len+utf8[]) = aggregate%encoded_value%8#0
        let tmp%21#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%11#0
        let total_length%3#0: uint64 = (len tmp%21#0)
        let extract_to_end%3#0: bytes = (substring3 tmp%21#0 2u total_length%3#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 tmp%21#0 0u)
        let tmp%22#0: uint64 = aggregate%array_length%3#0
        let aggregate%concat%3#0: Encoded(len+utf8[]) = (concat tmp%20#0 extract_to_end%3#0) // on error: max array length exceeded
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 aggregate%concat%3#0 0u)
        let aggregate%add%3#0: uint64 = (+ aggregate%extract_uint16%3#0 tmp%22#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%add%3#0)
        let aggregate%as_u16_bytes%3#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%replace%3#0: bytes = (replace3 aggregate%concat%3#0 0u aggregate%as_u16_bytes%3#0)
        let aggregate%as_Encoded(len+utf8[])%12#0: Encoded(len+utf8[]) = aggregate%replace%3#0
        let tmp%23#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%12#0
        let aggregate%length%9#0: uint64 = (len "cd")
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%length%9#0)
        let aggregate%length_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%encoded_value%9#0: bytes = (concat aggregate%length_uint16%9#0 "cd")
        let aggregate%as_Encoded(len+utf8[])%13#0: Encoded(len+utf8[]) = aggregate%encoded_value%9#0
        let tmp%24#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%13#0
        let total_length%4#0: uint64 = (len tmp%24#0)
        let extract_to_end%4#0: bytes = (substring3 tmp%24#0 2u total_length%4#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 tmp%24#0 0u)
        let tmp%25#0: uint64 = aggregate%array_length%4#0
        let aggregate%concat%4#0: Encoded(len+utf8[]) = (concat tmp%23#0 extract_to_end%4#0) // on error: max array length exceeded
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 aggregate%concat%4#0 0u)
        let aggregate%add%4#0: uint64 = (+ aggregate%extract_uint16%4#0 tmp%25#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%add%4#0)
        let aggregate%as_u16_bytes%4#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%replace%4#0: bytes = (replace3 aggregate%concat%4#0 0u aggregate%as_u16_bytes%4#0)
        let aggregate%as_Encoded(len+utf8[])%14#0: Encoded(len+utf8[]) = aggregate%replace%4#0
        let tmp%26#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%14#0
        let value#0: Encoded(len+utf8[]) = tmp%26#0
        let aggregate%length%10#0: uint64 = (len "e")
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%length%10#0)
        let aggregate%length_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%encoded_value%10#0: bytes = (concat aggregate%length_uint16%10#0 "e")
        let aggregate%as_Encoded(len+utf8[])%15#0: Encoded(len+utf8[]) = aggregate%encoded_value%10#0
        let tmp%27#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%15#0
        let total_length%5#0: uint64 = (len tmp%27#0)
        let extract_to_end%5#0: bytes = (substring3 tmp%27#0 2u total_length%5#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 tmp%27#0 0u)
        let tmp%28#0: uint64 = aggregate%array_length%5#0
        let aggregate%concat%5#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%5#0) // on error: max array length exceeded
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 aggregate%concat%5#0 0u)
        let aggregate%add%5#0: uint64 = (+ aggregate%extract_uint16%5#0 tmp%28#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob aggregate%add%5#0)
        let aggregate%as_u16_bytes%5#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%replace%5#0: bytes = (replace3 aggregate%concat%5#0 0u aggregate%as_u16_bytes%5#0)
        let aggregate%as_Encoded(len+utf8[])%16#0: Encoded(len+utf8[]) = aggregate%replace%5#0
        let tmp%29#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%16#0
        let value#0: Encoded(len+utf8[]) = tmp%29#0
        let aggregate%length%11#0: uint64 = (len "f")
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%length%11#0)
        let aggregate%length_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%encoded_value%11#0: bytes = (concat aggregate%length_uint16%11#0 "f")
        let aggregate%as_Encoded(len+utf8[])%17#0: Encoded(len+utf8[]) = aggregate%encoded_value%11#0
        let tmp%30#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%17#0
        let total_length%6#0: uint64 = (len tmp%30#0)
        let extract_to_end%6#0: bytes = (substring3 tmp%30#0 2u total_length%6#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 tmp%30#0 0u)
        let tmp%31#0: uint64 = aggregate%array_length%6#0
        let aggregate%concat%6#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%6#0) // on error: max array length exceeded
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 aggregate%concat%6#0 0u)
        let aggregate%add%6#0: uint64 = (+ aggregate%extract_uint16%6#0 tmp%31#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%add%6#0)
        let aggregate%as_u16_bytes%6#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%replace%6#0: bytes = (replace3 aggregate%concat%6#0 0u aggregate%as_u16_bytes%6#0)
        let aggregate%as_Encoded(len+utf8[])%18#0: Encoded(len+utf8[]) = aggregate%replace%6#0
        let tmp%32#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%18#0
        let value#0: Encoded(len+utf8[]) = tmp%32#0
        let aggregate%length%12#0: uint64 = (len "g")
        let aggregate%as_bytes%19#0: bytes[8] = (itob aggregate%length%12#0)
        let aggregate%length_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%encoded_value%12#0: bytes = (concat aggregate%length_uint16%12#0 "g")
        let aggregate%as_Encoded(len+utf8[])%19#0: Encoded(len+utf8[]) = aggregate%encoded_value%12#0
        let tmp%33#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%19#0
        let total_length%7#0: uint64 = (len tmp%33#0)
        let extract_to_end%7#0: bytes = (substring3 tmp%33#0 2u total_length%7#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 tmp%33#0 0u)
        let tmp%34#0: uint64 = aggregate%array_length%7#0
        let aggregate%concat%7#0: Encoded(len+utf8[]) = (concat value#0 extract_to_end%7#0) // on error: max array length exceeded
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 aggregate%concat%7#0 0u)
        let aggregate%add%7#0: uint64 = (+ aggregate%extract_uint16%7#0 tmp%34#0)
        let aggregate%as_bytes%20#0: bytes[8] = (itob aggregate%add%7#0)
        let aggregate%as_u16_bytes%7#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%replace%7#0: bytes = (replace3 aggregate%concat%7#0 0u aggregate%as_u16_bytes%7#0)
        let aggregate%as_Encoded(len+utf8[])%20#0: Encoded(len+utf8[]) = aggregate%replace%7#0
        let tmp%35#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%20#0
        let value#0: Encoded(len+utf8[]) = tmp%35#0
        let aggregate%length%13#0: uint64 = (len "abcdefg")
        let aggregate%as_bytes%21#0: bytes[8] = (itob aggregate%length%13#0)
        let aggregate%length_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%encoded_value%13#0: bytes = (concat aggregate%length_uint16%13#0 "abcdefg")
        let aggregate%as_Encoded(len+utf8[])%21#0: Encoded(len+utf8[]) = aggregate%encoded_value%13#0
        let tmp%36#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%21#0
        let tmp%37#0: bool = (== tmp%36#0 value#0)
        (assert tmp%37#0)
        let aggregate%length%14#0: uint64 = (len "")
        let aggregate%as_bytes%22#0: bytes[8] = (itob aggregate%length%14#0)
        let aggregate%length_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%22#0)
        let aggregate%encoded_value%14#0: bytes = (concat aggregate%length_uint16%14#0 "")
        let aggregate%as_Encoded(len+utf8[])%22#0: Encoded(len+utf8[]) = aggregate%encoded_value%14#0
        let tmp%38#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%22#0
        let tmp%39#0: string = ((extract 2 0) tmp%38#0)
        let tmp%40#0: bool = (== tmp%39#0 "")
        (assert tmp%40#0)
        let aggregate%length%15#0: uint64 = (len "hello")
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%length%15#0)
        let aggregate%length_uint16%15#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%encoded_value%15#0: bytes = (concat aggregate%length_uint16%15#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%23#0: Encoded(len+utf8[]) = aggregate%encoded_value%15#0
        let tmp%41#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%23#0
        let tmp%42#0: string = ((extract 2 0) tmp%41#0)
        let tmp%43#0: bool = (== tmp%42#0 "hello")
        (assert tmp%43#0)
        let tmp%44#0: uint64 = (txn NumAppArgs)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        goto tmp%45#0 ? block@1 : block@2
    block@1: // ternary_true_L41
        let aggregate%length%16#0: uint64 = (len "aye")
        let aggregate%as_bytes%24#0: bytes[8] = (itob aggregate%length%16#0)
        let aggregate%length_uint16%16#0: bytes = ((extract 6 2) aggregate%as_bytes%24#0)
        let aggregate%encoded_value%16#0: bytes = (concat aggregate%length_uint16%16#0 "aye")
        let aggregate%as_Encoded(len+utf8[])%24#0: Encoded(len+utf8[]) = aggregate%encoded_value%16#0
        let ternary_result%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%24#0
        goto block@3
    block@2: // ternary_false_L41
        let aggregate%length%17#0: uint64 = (len "bee")
        let aggregate%as_bytes%25#0: bytes[8] = (itob aggregate%length%17#0)
        let aggregate%length_uint16%17#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%encoded_value%17#0: bytes = (concat aggregate%length_uint16%17#0 "bee")
        let aggregate%as_Encoded(len+utf8[])%25#0: Encoded(len+utf8[]) = aggregate%encoded_value%17#0
        let ternary_result%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%25#0
        goto block@3
    block@3: // ternary_merge_L41
        let aggregate%length%18#0: uint64 = (len "bee")
        let aggregate%as_bytes%26#0: bytes[8] = (itob aggregate%length%18#0)
        let aggregate%length_uint16%18#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%encoded_value%18#0: bytes = (concat aggregate%length_uint16%18#0 "bee")
        let aggregate%as_Encoded(len+utf8[])%26#0: Encoded(len+utf8[]) = aggregate%encoded_value%18#0
        let tmp%46#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%26#0
        let tmp%47#0: bool = (== ternary_result%0#0 tmp%46#0)
        (assert tmp%47#0)
        return 1u