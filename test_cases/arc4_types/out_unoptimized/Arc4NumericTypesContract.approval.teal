#pragma version 10

test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    // arc4_types/numeric.py:28
    // uint8 = UInt64(255)
    int 255
    // arc4_types/numeric.py:30
    // int8_encoded = UInt8(uint8)
    itob
    extract 7 1
    // arc4_types/numeric.py:32
    // int8_decoded = int8_encoded.native
    btoi
    // arc4_types/numeric.py:28
    // uint8 = UInt64(255)
    int 255
    // arc4_types/numeric.py:34
    // assert uint8 == int8_decoded
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:37
    // assert UInt8.from_bytes(test_bytes[:1]).native == 2**8 - 1 - 2**7
    len
    int 1
    dig 1
    >=
    int 1
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:37
    // assert UInt8.from_bytes(test_bytes[:1]).native == 2**8 - 1 - 2**7
    int 0
    uncover 2
    substring3
    btoi
    int 127
    ==
    assert
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:38
    // assert UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).native == 2**24 - 1 - 2**23
    len
    int 3
    dig 1
    >=
    int 3
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:38
    // assert UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).native == 2**24 - 1 - 2**23
    int 0
    uncover 2
    substring3
    btoi
    int 8388607
    ==
    assert
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:39
    // assert UInt16.from_bytes(test_bytes[:2]).native == 2**16 - 1 - 2**15
    len
    int 2
    dig 1
    >=
    int 2
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:39
    // assert UInt16.from_bytes(test_bytes[:2]).native == 2**16 - 1 - 2**15
    int 0
    uncover 2
    substring3
    btoi
    int 32767
    ==
    assert
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt32.from_bytes(test_bytes[:4]).native == 2**32 - 1 - 2**31
    len
    int 4
    dig 1
    >=
    int 4
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt32.from_bytes(test_bytes[:4]).native == 2**32 - 1 - 2**31
    int 0
    uncover 2
    substring3
    btoi
    int 2147483647
    ==
    assert
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:41
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).native == 2**64 - 1 - 2**63
    len
    int 8
    dig 1
    >=
    int 8
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:36
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:41
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).native == 2**64 - 1 - 2**63
    int 0
    uncover 2
    substring3
    btoi
    int 9223372036854775807
    ==
    assert
    // arc4_types/numeric.py:45
    // assert decimals.bytes == op.itob(145_6853943940)
    int 1456853943940
    itob
    // arc4_types/numeric.py:43
    // decimals = Decimal("145.6853943940")
    byte 0x0000015333430684
    // arc4_types/numeric.py:45
    // assert decimals.bytes == op.itob(145_6853943940)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:49
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    int 1450000000000
    itob
    // arc4_types/numeric.py:47
    // decimals_from_truncated_str = Decimal("145.0")
    byte 0x000001519abc2400
    // arc4_types/numeric.py:49
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:51
    // thousand = Decimal("1e3")
    byte 0x000009184e72a000
    // arc4_types/numeric.py:53
    // assert thousand.bytes.length == 8
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:54
    // assert thousand.bytes == op.itob(1000_0000000000)
    int 10000000000000
    itob
    // arc4_types/numeric.py:51
    // thousand = Decimal("1e3")
    byte 0x000009184e72a000
    // arc4_types/numeric.py:54
    // assert thousand.bytes == op.itob(1000_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:58
    // assert one_decimal.bytes == op.itob(1_0000000000)
    int 10000000000
    itob
    // arc4_types/numeric.py:56
    // one_decimal = Decimal("1.0")
    byte 0x00000002540be400
    // arc4_types/numeric.py:58
    // assert one_decimal.bytes == op.itob(1_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:62
    // assert zero_decimal.bytes == op.itob(0)
    int 0
    itob
    // arc4_types/numeric.py:60
    // zero_decimal = Decimal("0.0")
    byte 0x0000000000000000
    // arc4_types/numeric.py:62
    // assert zero_decimal.bytes == op.itob(0)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:66
    // assert small_decimal.bytes == op.itob(100)
    int 100
    itob
    // arc4_types/numeric.py:64
    // small_decimal = Decimal("0.00000001")
    byte 0x0000000000000064
    // arc4_types/numeric.py:66
    // assert small_decimal.bytes == op.itob(100)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:70
    // assert smaller_decimal.bytes == op.itob(10)
    int 10
    itob
    // arc4_types/numeric.py:68
    // smaller_decimal = Decimal("1E-9")
    byte 0x000000000000000a
    // arc4_types/numeric.py:70
    // assert smaller_decimal.bytes == op.itob(10)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:74
    // assert smallest_decimal.bytes == op.itob(1)
    int 1
    itob
    // arc4_types/numeric.py:72
    // smallest_decimal = Decimal("0.0000000001")
    byte 0x0000000000000001
    // arc4_types/numeric.py:74
    // assert smallest_decimal.bytes == op.itob(1)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:78
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    int 18446744073709551615
    itob
    // arc4_types/numeric.py:76
    // sixty_four_decimal = Decimal("1844674407.3709551615")
    byte 0xffffffffffffffff
    // arc4_types/numeric.py:78
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:80
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:82
    // assert really_big_int == BigUIntN[t.Literal[512]].from_bytes(really_big_int.bytes)
    b==
    assert
    // arc4_types/numeric.py:88
    // biguint = BigUInt(1)
    byte 0x01
    // arc4_types/numeric.py:90
    // arc4_biguint_dynamic = ARC4BigUInt(biguint + 1)
    byte 0x01
    b+
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    // arc4_types/numeric.py:88
    // biguint = BigUInt(1)
    byte 0x01
    // arc4_types/numeric.py:89
    // arc4_biguint_const = ARC4BigUInt(1)
    byte 0x00000000000000000000000000000001
    // arc4_types/numeric.py:92
    // assert biguint == arc4_biguint_const.native
    b==
    assert
    // arc4_types/numeric.py:94
    // assert arc4_biguint_dynamic.bytes.length == (128 // 8)
    len
    int 16
    ==
    assert
    // arc4_types/numeric.py:85
    // BigUInt(sixty_four_byte_num).bytes
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:96
    // assert really_big_decimal.bytes.length == 64
    len
    int 64
    ==
    assert
    // arc4_types/numeric.py:98
    // return True
    int 1
    return
