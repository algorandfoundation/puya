#pragma version 11
#pragma typetrack false

// test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
main:
    intcblock 0 8 64 1 255 18446744073709551615
    bytecblock 0x7fffffffffffffff00 0x01 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 0x0000000000000000 0xffffffffffffffff 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x000009184e72a000 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff
    b main_block@0

main_block@0:
    // arc4_types/numeric.py:31
    // uint8 = UInt64(255)
    intc 4 // 255
    // arc4_types/numeric.py:33
    // int8_encoded = UInt8(uint8)
    itob
    dup
    bitlen
    intc_1 // 8
    <=
    assert // overflow
    pushint 7 // 7
    intc_3 // 1
    extract3
    // arc4_types/numeric.py:35
    // int8_decoded = int8_encoded.as_uint64()
    dup
    btoi
    // arc4_types/numeric.py:31
    // uint8 = UInt64(255)
    intc 4 // 255
    // arc4_types/numeric.py:37
    // assert uint8 == int8_decoded
    ==
    assert
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt8.from_bytes(test_bytes[:1]).as_uint64() == 2**8 - 1 - 2**7
    len
    intc_3 // 1
    dig 1
    >=
    intc_3 // 1
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt8.from_bytes(test_bytes[:1]).as_uint64() == 2**8 - 1 - 2**7
    intc_0 // 0
    uncover 2
    substring3
    btoi
    pushint 127 // 127
    ==
    assert
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:42
    // UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).as_uint64() == 2**24 - 1 - 2**23
    len
    pushint 3 // 3
    dig 1
    >=
    pushint 3 // 3
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:42
    // UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).as_uint64() == 2**24 - 1 - 2**23
    intc_0 // 0
    uncover 2
    substring3
    btoi
    pushint 8388607 // 8388607
    ==
    // arc4_types/numeric.py:41-43
    // assert (
    //     UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).as_uint64() == 2**24 - 1 - 2**23
    // )
    assert
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:44
    // assert UInt16.from_bytes(test_bytes[:2]).as_uint64() == 2**16 - 1 - 2**15
    len
    pushint 2 // 2
    dig 1
    >=
    pushint 2 // 2
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:44
    // assert UInt16.from_bytes(test_bytes[:2]).as_uint64() == 2**16 - 1 - 2**15
    intc_0 // 0
    uncover 2
    substring3
    btoi
    pushint 32767 // 32767
    ==
    assert
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:45
    // assert UInt32.from_bytes(test_bytes[:4]).as_uint64() == 2**32 - 1 - 2**31
    len
    pushint 4 // 4
    dig 1
    >=
    pushint 4 // 4
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:45
    // assert UInt32.from_bytes(test_bytes[:4]).as_uint64() == 2**32 - 1 - 2**31
    intc_0 // 0
    uncover 2
    substring3
    btoi
    pushint 2147483647 // 2147483647
    ==
    assert
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:46
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).as_uint64() == 2**64 - 1 - 2**63
    len
    intc_1 // 8
    dig 1
    >=
    intc_1 // 8
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:39
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    bytec_0 // 0x7fffffffffffffff00
    // arc4_types/numeric.py:46
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).as_uint64() == 2**64 - 1 - 2**63
    intc_0 // 0
    uncover 2
    substring3
    btoi
    pushint 9223372036854775807 // 9223372036854775807
    ==
    assert
    // arc4_types/numeric.py:47
    // assert UInt8(1 if Txn.num_app_args else 2) == 2
    txn NumAppArgs
    intc_0 // 0
    !=
    pushbytes 0x02
    bytec_1 // 0x01
    uncover 2
    select
    pushbytes 0x02
    b==
    assert
    // arc4_types/numeric.py:48
    // assert UInt512(1 if Txn.num_app_args else 2) == 2
    txn NumAppArgs
    intc_0 // 0
    !=
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    bytec_2 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    uncover 2
    select
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    b==
    assert
    // arc4_types/numeric.py:49
    // assert UInt512(Txn.num_app_args) == 0
    txn NumAppArgs
    itob
    intc_2 // 64
    bzero
    b|
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    b==
    assert
    // arc4_types/numeric.py:53
    // assert decimals.bytes == op.itob(145_6853943940)
    pushint 1456853943940 // 1456853943940
    itob
    // arc4_types/numeric.py:51
    // decimals = Decimal("145.6853943940")
    pushbytes 0x0000015333430684
    // arc4_types/numeric.py:53
    // assert decimals.bytes == op.itob(145_6853943940)
    ==
    assert
    // arc4_types/numeric.py:57
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    pushint 1450000000000 // 1450000000000
    itob
    // arc4_types/numeric.py:55
    // decimals_from_truncated_str = Decimal("145.0")
    pushbytes 0x000001519abc2400
    // arc4_types/numeric.py:57
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    ==
    assert
    // arc4_types/numeric.py:59
    // thousand = Decimal("1e3")
    bytec 7 // 0x000009184e72a000
    // arc4_types/numeric.py:61
    // assert thousand.bytes.length == 8
    len
    intc_1 // 8
    ==
    assert
    // arc4_types/numeric.py:62
    // assert thousand.bytes == op.itob(1000_0000000000)
    pushint 10000000000000 // 10000000000000
    itob
    // arc4_types/numeric.py:59
    // thousand = Decimal("1e3")
    bytec 7 // 0x000009184e72a000
    // arc4_types/numeric.py:62
    // assert thousand.bytes == op.itob(1000_0000000000)
    ==
    assert
    // arc4_types/numeric.py:66
    // assert one_decimal.bytes == op.itob(1_0000000000)
    pushint 10000000000 // 10000000000
    itob
    // arc4_types/numeric.py:64
    // one_decimal = Decimal("1.0")
    pushbytes 0x00000002540be400
    // arc4_types/numeric.py:66
    // assert one_decimal.bytes == op.itob(1_0000000000)
    ==
    assert
    // arc4_types/numeric.py:70
    // assert zero_decimal.bytes == op.itob(0)
    intc_0 // 0
    itob
    // arc4_types/numeric.py:68
    // zero_decimal = Decimal("0.0")
    bytec_3 // 0x0000000000000000
    // arc4_types/numeric.py:70
    // assert zero_decimal.bytes == op.itob(0)
    ==
    assert
    // arc4_types/numeric.py:74
    // assert small_decimal.bytes == op.itob(100)
    pushint 100 // 100
    itob
    // arc4_types/numeric.py:72
    // small_decimal = Decimal("0.00000001")
    pushbytes 0x0000000000000064
    // arc4_types/numeric.py:74
    // assert small_decimal.bytes == op.itob(100)
    ==
    assert
    // arc4_types/numeric.py:78
    // assert smaller_decimal.bytes == op.itob(10)
    pushint 10 // 10
    itob
    // arc4_types/numeric.py:76
    // smaller_decimal = Decimal("1E-9")
    pushbytes 0x000000000000000a
    // arc4_types/numeric.py:78
    // assert smaller_decimal.bytes == op.itob(10)
    ==
    assert
    // arc4_types/numeric.py:82
    // assert smallest_decimal.bytes == op.itob(1)
    intc_3 // 1
    itob
    // arc4_types/numeric.py:80
    // smallest_decimal = Decimal("0.0000000001")
    pushbytes 0x0000000000000001
    // arc4_types/numeric.py:82
    // assert smallest_decimal.bytes == op.itob(1)
    ==
    assert
    // arc4_types/numeric.py:86
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    intc 5 // 18446744073709551615
    itob
    // arc4_types/numeric.py:84
    // sixty_four_decimal = Decimal("1844674407.3709551615")
    bytec 4 // 0xffffffffffffffff
    // arc4_types/numeric.py:86
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    ==
    assert
    // arc4_types/numeric.py:88
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:90
    // assert really_big_int == BigUIntN[t.Literal[512]].from_bytes(really_big_int.bytes)
    b==
    assert
    // arc4_types/numeric.py:96
    // assert Decimal("1844674407.3709551615" if Txn.num_app_args else "0.0") == Decimal()
    txn NumAppArgs
    intc_0 // 0
    !=
    bytec_3 // 0x0000000000000000
    bytec 4 // 0xffffffffffffffff
    uncover 2
    select
    bytec_3 // 0x0000000000000000
    ==
    assert
    // arc4_types/numeric.py:98
    // biguint = BigUInt(1)
    bytec_1 // 0x01
    // arc4_types/numeric.py:100
    // arc4_biguint_dynamic = ARC4BigUInt(biguint + 1)
    bytec_1 // 0x01
    b+
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    // arc4_types/numeric.py:98
    // biguint = BigUInt(1)
    bytec_1 // 0x01
    // arc4_types/numeric.py:99
    // arc4_biguint_const = ARC4BigUInt(1)
    bytec_2 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    // arc4_types/numeric.py:102
    // assert biguint == arc4_biguint_const.as_biguint()
    b==
    assert
    // arc4_types/numeric.py:99
    // arc4_biguint_const = ARC4BigUInt(1)
    bytec_2 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    // arc4_types/numeric.py:103
    // assert biguint == arc4_biguint_const.as_uint64()
    bitlen
    intc_2 // 64
    <=
    assert // overflow
    // arc4_types/numeric.py:99
    // arc4_biguint_const = ARC4BigUInt(1)
    bytec_2 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    // arc4_types/numeric.py:103
    // assert biguint == arc4_biguint_const.as_uint64()
    len
    intc_1 // 8
    -
    // arc4_types/numeric.py:99
    // arc4_biguint_const = ARC4BigUInt(1)
    bytec_2 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    // arc4_types/numeric.py:103
    // assert biguint == arc4_biguint_const.as_uint64()
    uncover 1
    extract_uint64
    itob
    // arc4_types/numeric.py:98
    // biguint = BigUInt(1)
    bytec_1 // 0x01
    // arc4_types/numeric.py:103
    // assert biguint == arc4_biguint_const.as_uint64()
    b==
    assert
    // arc4_types/numeric.py:105
    // assert arc4_biguint_dynamic.bytes.length == (512 // 8)
    len
    intc_2 // 64
    ==
    assert
    // arc4_types/numeric.py:93
    // BigUInt(sixty_four_byte_num).bytes
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:107
    // assert really_big_decimal.bytes.length == 64
    len
    intc_2 // 64
    ==
    assert
    // arc4_types/numeric.py:109-110
    // # check UInt64 sub-types are converted properly
    // tup = Tuple((ARC4UInt64(OnCompleteAction.ClearState),))
    pushint 3 // ClearState
    itob
    pushbytes 0x
    uncover 1
    concat
    // arc4_types/numeric.py:111
    // assert tup[0].as_uint64() == OnCompleteAction.ClearState
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 3 // ClearState
    ==
    assert
    // arc4_types/numeric.py:113
    // assert ARC4BiggieSmalls(1).as_biguint() == BigUInt(1)
    pushbytes 0x00000001
    bytec_1 // 0x01
    b==
    assert
    // arc4_types/numeric.py:115
    // assert int8_encoded.as_uint64() == UInt64(255)
    dup
    btoi
    intc 4 // 255
    ==
    assert
    // arc4_types/numeric.py:116
    // assert int8_encoded.as_biguint() == BigUInt(255)
    pushbytes 0xff
    b==
    assert
    // arc4_types/numeric.py:118-120
    // uint64_encoded_as_biguint = ARC4BigUInt(
    //     0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF
    // )
    bytec 8 // 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff
    // arc4_types/numeric.py:121
    // assert uint64_encoded_as_biguint.as_biguint() == BigUInt(0xFFFFFFFFFFFFFFFF)
    bytec 4 // 0xffffffffffffffff
    b==
    assert
    // arc4_types/numeric.py:122
    // assert uint64_encoded_as_biguint == UInt64(0xFFFFFFFFFFFFFFFF)
    intc 5 // 18446744073709551615
    itob
    // arc4_types/numeric.py:118-120
    // uint64_encoded_as_biguint = ARC4BigUInt(
    //     0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF
    // )
    bytec 8 // 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff
    // arc4_types/numeric.py:122
    // assert uint64_encoded_as_biguint == UInt64(0xFFFFFFFFFFFFFFFF)
    b==
    assert
    // arc4_types/numeric.py:124
    // return True
    intc_3 // 1
    return
