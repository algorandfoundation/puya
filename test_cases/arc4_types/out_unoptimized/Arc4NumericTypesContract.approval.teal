#pragma version 10

test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    // arc4_types/numeric.py:29
    // uint8 = UInt64(255)
    pushint 255 // 255
    // arc4_types/numeric.py:31
    // int8_encoded = UInt8(uint8)
    itob
    extract 7 1
    // arc4_types/numeric.py:33
    // int8_decoded = int8_encoded.native
    btoi
    // arc4_types/numeric.py:29
    // uint8 = UInt64(255)
    pushint 255 // 255
    // arc4_types/numeric.py:35
    // assert uint8 == int8_decoded
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:38
    // assert UInt8.from_bytes(test_bytes[:1]).native == 2**8 - 1 - 2**7
    len
    pushint 1 // 1
    dig 1
    >=
    pushint 1 // 1
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:38
    // assert UInt8.from_bytes(test_bytes[:1]).native == 2**8 - 1 - 2**7
    pushint 0 // 0
    uncover 2
    substring3
    btoi
    pushint 127 // 127
    ==
    assert
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:39
    // assert UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).native == 2**24 - 1 - 2**23
    len
    pushint 3 // 3
    dig 1
    >=
    pushint 3 // 3
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:39
    // assert UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).native == 2**24 - 1 - 2**23
    pushint 0 // 0
    uncover 2
    substring3
    btoi
    pushint 8388607 // 8388607
    ==
    assert
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt16.from_bytes(test_bytes[:2]).native == 2**16 - 1 - 2**15
    len
    pushint 2 // 2
    dig 1
    >=
    pushint 2 // 2
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:40
    // assert UInt16.from_bytes(test_bytes[:2]).native == 2**16 - 1 - 2**15
    pushint 0 // 0
    uncover 2
    substring3
    btoi
    pushint 32767 // 32767
    ==
    assert
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:41
    // assert UInt32.from_bytes(test_bytes[:4]).native == 2**32 - 1 - 2**31
    len
    pushint 4 // 4
    dig 1
    >=
    pushint 4 // 4
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:41
    // assert UInt32.from_bytes(test_bytes[:4]).native == 2**32 - 1 - 2**31
    pushint 0 // 0
    uncover 2
    substring3
    btoi
    pushint 2147483647 // 2147483647
    ==
    assert
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:42
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).native == 2**64 - 1 - 2**63
    len
    pushint 8 // 8
    dig 1
    >=
    pushint 8 // 8
    uncover 2
    uncover 2
    select
    // arc4_types/numeric.py:37
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    pushbytes 0x7fffffffffffffff00
    // arc4_types/numeric.py:42
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).native == 2**64 - 1 - 2**63
    pushint 0 // 0
    uncover 2
    substring3
    btoi
    pushint 9223372036854775807 // 9223372036854775807
    ==
    assert
    // arc4_types/numeric.py:43
    // assert UInt8(1 if Txn.num_app_args else 2) == 2
    txn NumAppArgs
    pushint 0 // 0
    !=
    pushbytes 0x02
    pushbytes 0x01
    uncover 2
    select
    pushbytes 0x02
    b==
    assert
    // arc4_types/numeric.py:44
    // assert UInt512(1 if Txn.num_app_args else 2) == 2
    txn NumAppArgs
    pushint 0 // 0
    !=
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    uncover 2
    select
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    b==
    assert
    // arc4_types/numeric.py:48
    // assert decimals.bytes == op.itob(145_6853943940)
    pushint 1456853943940 // 1456853943940
    itob
    // arc4_types/numeric.py:46
    // decimals = Decimal("145.6853943940")
    pushbytes 0x0000015333430684
    // arc4_types/numeric.py:48
    // assert decimals.bytes == op.itob(145_6853943940)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:52
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    pushint 1450000000000 // 1450000000000
    itob
    // arc4_types/numeric.py:50
    // decimals_from_truncated_str = Decimal("145.0")
    pushbytes 0x000001519abc2400
    // arc4_types/numeric.py:52
    // assert decimals_from_truncated_str.bytes == op.itob(145_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:54
    // thousand = Decimal("1e3")
    pushbytes 0x000009184e72a000
    // arc4_types/numeric.py:56
    // assert thousand.bytes.length == 8
    len
    pushint 8 // 8
    ==
    assert
    // arc4_types/numeric.py:57
    // assert thousand.bytes == op.itob(1000_0000000000)
    pushint 10000000000000 // 10000000000000
    itob
    // arc4_types/numeric.py:54
    // thousand = Decimal("1e3")
    pushbytes 0x000009184e72a000
    // arc4_types/numeric.py:57
    // assert thousand.bytes == op.itob(1000_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:61
    // assert one_decimal.bytes == op.itob(1_0000000000)
    pushint 10000000000 // 10000000000
    itob
    // arc4_types/numeric.py:59
    // one_decimal = Decimal("1.0")
    pushbytes 0x00000002540be400
    // arc4_types/numeric.py:61
    // assert one_decimal.bytes == op.itob(1_0000000000)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:65
    // assert zero_decimal.bytes == op.itob(0)
    pushint 0 // 0
    itob
    // arc4_types/numeric.py:63
    // zero_decimal = Decimal("0.0")
    pushbytes 0x0000000000000000
    // arc4_types/numeric.py:65
    // assert zero_decimal.bytes == op.itob(0)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:69
    // assert small_decimal.bytes == op.itob(100)
    pushint 100 // 100
    itob
    // arc4_types/numeric.py:67
    // small_decimal = Decimal("0.00000001")
    pushbytes 0x0000000000000064
    // arc4_types/numeric.py:69
    // assert small_decimal.bytes == op.itob(100)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:73
    // assert smaller_decimal.bytes == op.itob(10)
    pushint 10 // 10
    itob
    // arc4_types/numeric.py:71
    // smaller_decimal = Decimal("1E-9")
    pushbytes 0x000000000000000a
    // arc4_types/numeric.py:73
    // assert smaller_decimal.bytes == op.itob(10)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:77
    // assert smallest_decimal.bytes == op.itob(1)
    pushint 1 // 1
    itob
    // arc4_types/numeric.py:75
    // smallest_decimal = Decimal("0.0000000001")
    pushbytes 0x0000000000000001
    // arc4_types/numeric.py:77
    // assert smallest_decimal.bytes == op.itob(1)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:81
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    pushint 18446744073709551615 // 18446744073709551615
    itob
    // arc4_types/numeric.py:79
    // sixty_four_decimal = Decimal("1844674407.3709551615")
    pushbytes 0xffffffffffffffff
    // arc4_types/numeric.py:81
    // assert sixty_four_decimal.bytes == op.itob(1844674407_3709551615)
    uncover 1
    ==
    assert
    // arc4_types/numeric.py:83
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    pushbytes 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    pushbytes 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:85
    // assert really_big_int == BigUIntN[t.Literal[512]].from_bytes(really_big_int.bytes)
    b==
    assert
    // arc4_types/numeric.py:91
    // assert Decimal("1844674407.3709551615" if Txn.num_app_args else "0.0") == Decimal()
    txn NumAppArgs
    pushint 0 // 0
    !=
    pushbytes 0x0000000000000000
    pushbytes 0xffffffffffffffff
    uncover 2
    select
    pushbytes 0x0000000000000000
    ==
    assert
    // arc4_types/numeric.py:93
    // biguint = BigUInt(1)
    pushbytes 0x01
    // arc4_types/numeric.py:95
    // arc4_biguint_dynamic = ARC4BigUInt(biguint + 1)
    pushbytes 0x01
    b+
    dig 0
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    b|
    // arc4_types/numeric.py:93
    // biguint = BigUInt(1)
    pushbytes 0x01
    // arc4_types/numeric.py:94
    // arc4_biguint_const = ARC4BigUInt(1)
    pushbytes 0x00000000000000000000000000000001
    // arc4_types/numeric.py:97
    // assert biguint == arc4_biguint_const.native
    b==
    assert
    // arc4_types/numeric.py:99
    // assert arc4_biguint_dynamic.bytes.length == (128 // 8)
    len
    pushint 16 // 16
    ==
    assert
    // arc4_types/numeric.py:88
    // BigUInt(sixty_four_byte_num).bytes
    pushbytes 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:101
    // assert really_big_decimal.bytes.length == 64
    len
    pushint 64 // 64
    ==
    assert
    // arc4_types/numeric.py:103-104
    // # check UInt64 sub-types are converted properly
    // tup = Tuple((ARC4UInt64(OnCompleteAction.ClearState),))
    pushint 3 // ClearState
    itob
    pushbytes 0x
    uncover 1
    concat
    // arc4_types/numeric.py:105
    // assert tup[0].native == OnCompleteAction.ClearState
    pushint 0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 3 // ClearState
    ==
    assert
    // arc4_types/numeric.py:107
    // return True
    pushint 1 // 1
    return
