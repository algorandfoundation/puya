#pragma version 10

test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    // arc4_types/numeric.py:26
    // uint8 = UInt64(255)
    int 255
    // arc4_types/numeric.py:28
    // int8_encoded = UInt8(uint8)
    dup
    itob
    extract 7 1
    // arc4_types/numeric.py:30
    // int8_decoded = int8_encoded.decode()
    btoi
    // arc4_types/numeric.py:32
    // assert uint8 == int8_decoded
    ==
    assert
    // arc4_types/numeric.py:34
    // test_bytes = Bytes.from_hex("7FFFFFFFFFFFFFFF00")
    byte 0x7fffffffffffffff00
    // arc4_types/numeric.py:35
    // assert UInt8.from_bytes(test_bytes[:1]).decode() == 2**8 - 1 - 2**7
    dup
    dup
    len
    swap
    dup
    len
    int 1
    swap
    <
    uncover 2
    int 1
    uncover 2
    select
    swap
    int 0
    uncover 2
    substring3
    btoi
    int 127
    ==
    assert
    // arc4_types/numeric.py:37
    // UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).decode() == 2**24 - 1 - 2**23
    dup
    dup
    len
    swap
    dup
    len
    int 3
    swap
    <
    uncover 2
    int 3
    uncover 2
    select
    swap
    int 0
    uncover 2
    substring3
    btoi
    int 8388607
    ==
    // arc4_types/numeric.py:36-38
    // assert (
    //     UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).decode() == 2**24 - 1 - 2**23
    // )
    assert
    // arc4_types/numeric.py:39
    // assert UInt16.from_bytes(test_bytes[:2]).decode() == 2**16 - 1 - 2**15
    dup
    dup
    len
    swap
    dup
    len
    int 2
    swap
    <
    uncover 2
    int 2
    uncover 2
    select
    swap
    int 0
    uncover 2
    substring3
    btoi
    int 32767
    ==
    assert
    // arc4_types/numeric.py:40
    // assert UInt32.from_bytes(test_bytes[:4]).decode() == 2**32 - 1 - 2**31
    dup
    dup
    len
    swap
    dup
    len
    int 4
    swap
    <
    uncover 2
    int 4
    uncover 2
    select
    swap
    int 0
    uncover 2
    substring3
    btoi
    int 2147483647
    ==
    assert
    // arc4_types/numeric.py:41
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).decode() == 2**64 - 1 - 2**63
    dup
    len
    swap
    dup
    len
    int 8
    swap
    <
    uncover 2
    int 8
    uncover 2
    select
    swap
    int 0
    uncover 2
    substring3
    btoi
    int 9223372036854775807
    ==
    assert
    // arc4_types/numeric.py:43
    // decimals = Decimal("145.6853943940")
    byte 0x0000015333430684
    // arc4_types/numeric.py:45
    // assert decimals.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:46
    // assert decimals.decode() == 145_6853943940
    btoi
    int 1456853943940
    ==
    assert
    // arc4_types/numeric.py:48
    // decimals_from_truncated_str = Decimal("145.0")
    byte 0x000001519abc2400
    // arc4_types/numeric.py:50
    // assert decimals_from_truncated_str.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:51
    // assert decimals_from_truncated_str.decode() == 145_0000000000
    btoi
    int 1450000000000
    ==
    assert
    // arc4_types/numeric.py:53
    // one_decimal = Decimal("1.0")
    byte 0x00000002540be400
    // arc4_types/numeric.py:55
    // assert one_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:56
    // assert one_decimal.decode() == 1_0000000000
    btoi
    int 10000000000
    ==
    assert
    // arc4_types/numeric.py:58
    // zero_decimal = Decimal("0.0")
    byte 0x0000000000000000
    // arc4_types/numeric.py:60
    // assert zero_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:61
    // assert zero_decimal.decode() == 0
    btoi
    int 0
    ==
    assert
    // arc4_types/numeric.py:63
    // small_decimal = Decimal("0.00000001")
    byte 0x0000000000000064
    // arc4_types/numeric.py:65
    // assert small_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:66
    // assert small_decimal.decode() == 100
    btoi
    int 100
    ==
    assert
    // arc4_types/numeric.py:68
    // smaller_decimal = Decimal("1E-9")
    byte 0x000000000000000a
    // arc4_types/numeric.py:70
    // assert smaller_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:71
    // assert smaller_decimal.decode() == 10
    btoi
    int 10
    ==
    assert
    // arc4_types/numeric.py:73
    // smallest_decimal = Decimal("0.0000000001")
    byte 0x0000000000000001
    // arc4_types/numeric.py:75
    // assert smallest_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:76
    // assert smallest_decimal.decode() == 1
    btoi
    int 1
    ==
    assert
    // arc4_types/numeric.py:78
    // sixty_four_decimal = Decimal("1844674407.3709551615")
    byte 0xffffffffffffffff
    // arc4_types/numeric.py:80
    // assert sixty_four_decimal.bytes.length == (64 // 8)
    dup
    len
    int 8
    ==
    assert
    // arc4_types/numeric.py:81
    // assert sixty_four_decimal.decode() == 1844674407_3709551615
    btoi
    int 18446744073709551615
    ==
    assert
    // arc4_types/numeric.py:83
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:85
    // assert really_big_int.bytes.length == 64
    dup
    len
    int 64
    ==
    assert
    // arc4_types/numeric.py:86
    // assert really_big_int == BigUIntN[t.Literal[512]](really_big_int.decode())
    dup
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    dig 1
    swap
    b|
    b==
    assert
    // arc4_types/numeric.py:89
    // BigUInt(sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:88-90
    // really_big_decimal = BigUFixedNxM[t.Literal[512], t.Literal[2]].encode(
    //     BigUInt(sixty_four_byte_num)
    // )
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    // arc4_types/numeric.py:89
    // BigUInt(sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:88-90
    // really_big_decimal = BigUFixedNxM[t.Literal[512], t.Literal[2]].encode(
    //     BigUInt(sixty_four_byte_num)
    // )
    swap
    b|
    // arc4_types/numeric.py:92
    // biguint = BigUInt(1)
    byte 0x01
    // arc4_types/numeric.py:93
    // arc4_biguint_const = ARC4BigUInt(1)
    byte 0x00000000000000000000000000000001
    swap
    // arc4_types/numeric.py:94
    // arc4_biguint_dynamic = ARC4BigUInt(biguint + 1)
    dup
    byte 0x01
    b+
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    // arc4_types/numeric.py:96
    // assert biguint == arc4_biguint_const.decode()
    swap
    uncover 2
    b==
    assert
    // arc4_types/numeric.py:98
    // assert arc4_biguint_dynamic.bytes.length == (128 // 8)
    len
    int 16
    ==
    assert
    // arc4_types/numeric.py:100
    // assert really_big_decimal.bytes.length == 64
    len
    int 64
    ==
    assert
    // arc4_types/numeric.py:102
    // return True
    int 1
    return
