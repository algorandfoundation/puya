{
  "version": 3,
  "sources": [
    "../structs.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCkB;AAAS;AAAT;AAAoC;AAApC;AAAV;AACU;AAAqC;AAArC;AAAS;AAAT;AACA;;;AAAA;;AAAA;;AACE;AAAA;AAAA;AAAA;AAAA;;AAAW;AAAA;AAAA;AAAA;;;;;;;;AACnB;AAAA;;;;AADZ;;AAAA;;;;AAAA;;;AAGwB;AAAA;AAAU;AAAV;AAAmB;AAAA;AAAU;AAAV;AAAoB;AAAA;AAAU;AAAV;AAAA;;AAAmB;AAAA;AAAU;AAAV;AAAA;;AAAlE;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACR;AAAA;;;AAAA;;AACA;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAP;AAEc;AAAA;;AAAA;AAAA;;AAAA;AAAd;;;AAAA;;AAE2B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAjB;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACV;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAoB;;;AAApB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACO;AAAP;AAEY;AAAmB;;;;;;;;;;AAAnB;AAAoC;;;;;;;;;;AAApC;AACZ;;AACA;;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AAEa;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAuB;;AAAvB;AACN;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;AAAA;AAAA;AAAkB;;AAAA;AAAA;AAAA;AAAlB;AAAP;AAEO;AAAiB;AAAjB;AAAP;AAEO;AAAP;;;;AA3BI;;AAAA;;;;;AAiCX;;;;;;AAGqB;;AAAA;AAAA;AAAA;AAAM;;AAAA;AAAA;AAAA;AAAlB;;;AACY;;AAAA;AAAA;AAAA;AAAM;;AAAA;AAAA;AAAA;AAAlB;;;AAFC;AAAA;;AAAA;AAAA;;AAAA;AAAP;;AAAA;;AAAA;AAMH;;;;;;;;AAEU;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AACW;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAJ;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AACW;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAJ;AAAP;;AAGH;;;;;;;;AAEU;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAuC;;;;;;;AAAR;AAA/B;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAGH;;;;;;AAEqC;;AAAA;AAAmB;;AAAA;AAAnB;AAAR;AAA1B",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 2"
    },
    "7": {
      "op": "bytecblock 0x 0x00 0x000000083cfbf217 0x000000230384b842 0x000000000000007b"
    },
    "39": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0"
      ]
    },
    "40": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0"
      ]
    },
    "41": {
      "op": "b main_block@0"
    },
    "44": {
      "block": "main_block@0",
      "stack_in": [
        "check%0#0",
        "nested_decode%0#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "0x"
      ]
    },
    "45": {
      "op": "bytec_2 // 0x000000083cfbf217",
      "defined_out": [
        "0x",
        "0x000000083cfbf217"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "0x",
        "0x000000083cfbf217"
      ]
    },
    "46": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "aggregate%head%0#0"
      ]
    },
    "47": {
      "op": "bytec_3 // 0x000000230384b842",
      "defined_out": [
        "0x000000230384b842",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "aggregate%head%0#0",
        "0x000000230384b842"
      ]
    },
    "48": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "tmp%0#0"
      ]
    },
    "49": {
      "op": "dup",
      "defined_out": [
        "coord_1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0"
      ]
    },
    "50": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0",
        "0x"
      ]
    },
    "51": {
      "op": "bytec_2 // 0x000000083cfbf217",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0",
        "0x",
        "0x000000083cfbf217"
      ]
    },
    "52": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "coord_1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0",
        "aggregate%head%2#0"
      ]
    },
    "53": {
      "op": "bytec_3 // 0x000000230384b842",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0",
        "aggregate%head%2#0",
        "0x000000230384b842"
      ]
    },
    "54": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "coord_2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "coord_1#0",
        "coord_2#0"
      ]
    },
    "55": {
      "callsub": "test_cases.arc4_types.structs.add",
      "op": "callsub add",
      "defined_out": [
        "add%0#0",
        "add%1#0",
        "add%2#0",
        "coord_1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "58": {
      "op": "cover 2",
      "defined_out": [
        "add%0#0",
        "add%1#0",
        "add%2#0",
        "coord_1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%0#0",
        "add%1#0"
      ]
    },
    "60": {
      "op": "cover 1",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "coord_1#0",
        "coord_3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "coord_3#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "coord_3#0",
        "coord_3#0 (copy)",
        "0"
      ]
    },
    "64": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "add%1#0",
        "add%2#0",
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "coord_3#0",
        "coord_3#0 (copy)",
        "0",
        "8"
      ]
    },
    "65": {
      "op": "extract3",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "aggregate%extract%0#0",
        "coord_1#0",
        "coord_3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "coord_3#0",
        "aggregate%extract%0#0"
      ]
    },
    "66": {
      "op": "cover 1",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "coord_1#0",
        "coord_3#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%0#0",
        "coord_3#0"
      ]
    },
    "68": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%0#0",
        "coord_3#0",
        "8"
      ]
    },
    "69": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%0#0",
        "coord_3#0",
        "8",
        "8"
      ]
    },
    "70": {
      "op": "extract3",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "aggregate%extract%1#0",
        "coord_1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "71": {
      "op": "cover 1",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "coord_1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "tuple_item%0#0"
      ]
    },
    "73": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "tuple_item%0#0",
        "0"
      ]
    },
    "74": {
      "op": "cover 1",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "coord_1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "76": {
      "op": "b main_for_body@1"
    },
    "79": {
      "block": "main_for_body@1",
      "stack_in": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "op": "dup",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "val#0"
      ]
    },
    "80": {
      "op": "log",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "81": {
      "op": "b main_for_footer@2"
    },
    "84": {
      "block": "main_for_footer@2",
      "stack_in": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "loop_counter%0#0"
      ]
    },
    "86": {
      "op": "switch main_for_header_1@3",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "90": {
      "op": "b main_after_for@4"
    },
    "93": {
      "block": "main_after_for@4",
      "stack_in": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x00"
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x00",
        "0"
      ]
    },
    "95": {
      "op": "intc_2 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "96": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0"
      ]
    },
    "97": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "0x00"
      ]
    },
    "98": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "0x00",
        "0"
      ]
    },
    "99": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "100": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "101": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x00"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x00",
        "0"
      ]
    },
    "103": {
      "op": "intc_2 // 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "104": {
      "op": "setbit",
      "defined_out": [
        "aggregate%as_Encoded(bool8)%2#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%as_Encoded(bool8)%2#0"
      ]
    },
    "105": {
      "op": "cover 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "107": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x00"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x00",
        "0"
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "110": {
      "op": "setbit",
      "defined_out": [
        "aggregate%as_Encoded(bool8)%3#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(bool8)%3#0"
      ]
    },
    "111": {
      "op": "cover 2",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "113": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "0"
      ]
    },
    "114": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "115": {
      "op": "uncover 3",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%get_bit%0#0",
        "tmp%2#0"
      ]
    },
    "117": {
      "op": "intc_2 // 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%get_bit%0#0",
        "tmp%2#0",
        "1"
      ]
    },
    "118": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%2#0",
        "1",
        "aggregate%get_bit%0#0"
      ]
    },
    "120": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "121": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%set_bit%0#0",
        "tmp%4#0"
      ]
    },
    "123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%set_bit%0#0",
        "tmp%4#0",
        "0"
      ]
    },
    "124": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "aggregate%set_bit%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%set_bit%0#0",
        "aggregate%get_bit%1#0"
      ]
    },
    "125": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%get_bit%1#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "127": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%get_bit%1#0",
        "aggregate%set_bit%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%get_bit%1#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "128": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%set_bit%0#0",
        "2",
        "aggregate%get_bit%1#0"
      ]
    },
    "130": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%5#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "131": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%1#0",
        "tmp%5#0"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%1#0",
        "tmp%5#0",
        "0"
      ]
    },
    "134": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%2#0",
        "aggregate%set_bit%1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%1#0",
        "aggregate%get_bit%2#0"
      ]
    },
    "135": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%get_bit%2#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "137": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%get_bit%2#0",
        "aggregate%set_bit%1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%get_bit%2#0",
        "aggregate%set_bit%1#0",
        "3"
      ]
    },
    "139": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%1#0",
        "3",
        "aggregate%get_bit%2#0"
      ]
    },
    "141": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%2#0"
      ]
    },
    "142": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%set_bit%2#0",
        "0x"
      ]
    },
    "143": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x",
        "aggregate%set_bit%2#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0"
      ]
    },
    "146": {
      "op": "dup",
      "defined_out": [
        "flags#0",
        "flags#0 (copy)"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "flags#0 (copy)"
      ]
    },
    "147": {
      "callsub": "test_cases.arc4_types.structs.check",
      "op": "callsub check",
      "defined_out": [
        "check%0#0",
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "check%0#0"
      ]
    },
    "150": {
      "op": "bury 9",
      "defined_out": [
        "check%0#0",
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0"
      ]
    },
    "152": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "flags#0 (copy)"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0"
      ]
    },
    "154": {
      "op": "dig 6",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0"
      ]
    },
    "156": {
      "op": "dup",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "coord_1#0 (copy)",
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0",
        "coord_1#0 (copy)"
      ]
    },
    "157": {
      "op": "dig 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0",
        "coord_1#0 (copy)",
        "coord_1#0 (copy)"
      ]
    },
    "159": {
      "op": "==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "flags#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0",
        "tmp%7#0"
      ]
    },
    "160": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0"
      ]
    },
    "161": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "coord_1#0",
        "0x"
      ]
    },
    "162": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "0x",
        "coord_1#0"
      ]
    },
    "164": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "check%0#0",
        "coord_1#0",
        "flags#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "flags#0",
        "aggregate%head%5#0"
      ]
    },
    "165": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%head%5#0",
        "flags#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%8#0"
      ]
    },
    "168": {
      "callsub": "test_cases.arc4_types.structs.nested_decode",
      "op": "callsub nested_decode",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "nested_decode%0#0"
      ]
    },
    "171": {
      "op": "bury 7",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "173": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x"
      ]
    },
    "174": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%length%0#0"
      ]
    },
    "175": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "176": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "179": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%length_uint16%0#0",
        "0x"
      ]
    },
    "180": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0"
      ]
    },
    "181": {
      "op": "intc_3 // 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "2"
      ]
    },
    "182": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "183": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "186": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "187": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%9#0",
        "aggregate%head%7#0"
      ]
    },
    "190": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%head%7#0",
        "tmp%9#0"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0"
      ]
    },
    "193": {
      "op": "dupn 2",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "copy#0 (copy)",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "195": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)",
        "0"
      ]
    },
    "196": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "197": {
      "op": "cover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%extract_uint16%0#0",
        "copy#0"
      ]
    },
    "199": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%extract_uint16%0#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "200": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%extract_uint16%0#0",
        "copy#0",
        "aggregate%len%0#0"
      ]
    },
    "201": {
      "op": "cover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "copy#0"
      ]
    },
    "203": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "204": {
      "op": "uncover 3",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%len%0#0",
        "copy#0",
        "copy#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "206": {
      "op": "uncover 3",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "208": {
      "op": "substring3",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0"
      ]
    },
    "209": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "0x"
      ]
    },
    "210": {
      "op": "pushbytes 0x2a",
      "defined_out": [
        "0x",
        "0x2a",
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "0x",
        "0x2a"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0",
        "tmp%11#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "tmp%11#0"
      ]
    },
    "214": {
      "op": "dig 1",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0",
        "tmp%11#0",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "tmp%11#0",
        "tuple_item%2#0 (copy)"
      ]
    },
    "216": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)",
        "tmp%11#0"
      ]
    },
    "218": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "check%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "tuple_item%2#0",
        "concat%0#0"
      ]
    },
    "219": {
      "op": "cover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "tuple_item%2#0"
      ]
    },
    "221": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "tuple_item%2#0",
        "0"
      ]
    },
    "222": {
      "op": "extract_uint16",
      "defined_out": [
        "check%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "extract_uint16%0#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "223": {
      "op": "intc_2 // 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "224": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "check%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "add%3#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "check%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "226": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "check%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "229": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "232": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "234": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "235": {
      "op": "dig 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%0#0",
        "copy#0 (copy)"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%0#0",
        "copy#0 (copy)",
        "0"
      ]
    },
    "238": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "as_Encoded(len+uint8[])%0#0",
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "239": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%0#0",
        "aggregate%item_offset%0#0",
        "copy#0"
      ]
    },
    "241": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%0#0",
        "aggregate%item_offset%0#0",
        "copy#0",
        "0"
      ]
    },
    "242": {
      "op": "uncover 2",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%0#0",
        "copy#0",
        "0",
        "aggregate%item_offset%0#0"
      ]
    },
    "244": {
      "op": "extract3",
      "defined_out": [
        "aggregate%data_up_to_item%0#0",
        "as_Encoded(len+uint8[])%0#0",
        "check%0#0",
        "coord_1#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%0#0",
        "aggregate%data_up_to_item%0#0"
      ]
    },
    "245": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "aggregate%data_up_to_item%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "mutable#0",
        "copy#0"
      ]
    },
    "248": {
      "op": "!=",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%12#0"
      ]
    },
    "249": {
      "error": "expected copy is different",
      "op": "assert // expected copy is different",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "250": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x"
      ]
    },
    "251": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x",
        "0x000000000000000c",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x",
        "0x000000000000000c"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%9#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%head%9#0"
      ]
    },
    "262": {
      "op": "pushbytes 0x0000000000000022",
      "defined_out": [
        "0x0000000000000022",
        "aggregate%head%9#0",
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "aggregate%head%9#0",
        "0x0000000000000022"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0"
      ]
    },
    "273": {
      "op": "dupn 2",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable#0 (copy)",
        "nested_decode%0#0",
        "no_copy#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "no_copy#0",
        "immutable#0",
        "immutable#0 (copy)"
      ]
    },
    "275": {
      "op": "cover 2",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable_copy#0",
        "nested_decode%0#0",
        "no_copy#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable_copy#0",
        "no_copy#0",
        "immutable#0"
      ]
    },
    "277": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable_copy#0",
        "immutable#0",
        "no_copy#0"
      ]
    },
    "279": {
      "op": "dig 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable_copy#0",
        "immutable#0",
        "no_copy#0",
        "immutable#0 (copy)"
      ]
    },
    "281": {
      "op": "==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable_copy#0",
        "nested_decode%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable_copy#0",
        "immutable#0",
        "tmp%14#0"
      ]
    },
    "282": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable_copy#0",
        "immutable#0"
      ]
    },
    "283": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable_copy#0"
      ]
    },
    "285": {
      "op": "dig 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable_copy#0",
        "immutable#0 (copy)"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "tmp%15#0"
      ]
    },
    "288": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0"
      ]
    },
    "289": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable#0 (copy)"
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable#0 (copy)",
        "0"
      ]
    },
    "291": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable#0 (copy)",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable#0 (copy)",
        "0",
        "8"
      ]
    },
    "292": {
      "op": "extract3",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "tuple_item%3#0"
      ]
    },
    "293": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "tuple_item%3#0",
        "0x"
      ]
    },
    "294": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "0x",
        "tuple_item%3#0"
      ]
    },
    "296": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%11#0",
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "aggregate%head%11#0"
      ]
    },
    "297": {
      "op": "bytec 4 // 0x000000000000007b",
      "defined_out": [
        "0x000000000000007b",
        "aggregate%head%11#0",
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "aggregate%head%11#0",
        "0x000000000000007b"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0"
      ]
    },
    "300": {
      "op": "dup",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)"
      ]
    },
    "301": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)",
        "8"
      ]
    },
    "302": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)",
        "8",
        "8"
      ]
    },
    "303": {
      "op": "extract3",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "nested_decode%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "304": {
      "op": "bytec 4 // 0x000000000000007b",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "reinterpret_biguint%0#0",
        "0x000000000000007b"
      ]
    },
    "306": {
      "op": "b==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "nested_decode%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "tmp%17#0"
      ]
    },
    "307": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0"
      ]
    },
    "308": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "0"
      ]
    },
    "309": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "immutable2#0",
        "0",
        "8"
      ]
    },
    "310": {
      "op": "extract3",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "immutable#0",
        "nested_decode%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "immutable#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "311": {
      "op": "uncover 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "reinterpret_biguint%2#0",
        "immutable#0"
      ]
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "reinterpret_biguint%2#0",
        "immutable#0",
        "0"
      ]
    },
    "314": {
      "op": "intc_1 // 8",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "reinterpret_biguint%2#0",
        "immutable#0",
        "0",
        "8"
      ]
    },
    "315": {
      "op": "extract3",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "316": {
      "op": "b==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%18#0"
      ]
    },
    "317": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "318": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x"
      ]
    },
    "319": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "0x",
        "0x"
      ]
    },
    "320": {
      "op": "==",
      "defined_out": [
        "check%0#0",
        "coord_1#0",
        "nested_decode%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tmp%21#0"
      ]
    },
    "321": {
      "op": "assert",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "322": {
      "op": "intc_2 // 1",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "1"
      ]
    },
    "323": {
      "op": "return",
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "324": {
      "block": "main_for_header_1@3",
      "stack_in": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "1"
      ]
    },
    "325": {
      "op": "bury 2",
      "defined_out": [],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "327": {
      "op": "dig 2",
      "defined_out": [
        "tuple_item%1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0",
        "tuple_item%1#0"
      ]
    },
    "329": {
      "op": "bury 1",
      "defined_out": [
        "tuple_item%1#0"
      ],
      "stack_out": [
        "check%0#0",
        "nested_decode%0#0",
        "coord_1#0",
        "add%2#0",
        "add%1#0",
        "tuple_item%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "331": {
      "op": "b main_for_body@1"
    },
    "334": {
      "subroutine": "test_cases.arc4_types.structs.add",
      "params": {
        "v1#0": "bytes",
        "v2#0": "bytes"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "337": {
      "op": "b add_block@0"
    },
    "340": {
      "block": "add_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)"
      ]
    },
    "342": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0"
      ]
    },
    "343": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0",
        "8"
      ]
    },
    "344": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "345": {
      "op": "frame_dig -1",
      "defined_out": [
        "tuple_item%0#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "v2#0 (copy)"
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tuple_item%0#0",
        "v2#0 (copy)",
        "0"
      ]
    },
    "348": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tuple_item%0#0",
        "v2#0 (copy)",
        "0",
        "8"
      ]
    },
    "349": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "350": {
      "callsub": "test_cases.arc4_types.structs.add_decimal",
      "op": "callsub add_decimal",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)"
      ]
    },
    "355": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)",
        "8"
      ]
    },
    "356": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)",
        "8",
        "8"
      ]
    },
    "357": {
      "op": "extract3",
      "defined_out": [
        "tmp%0#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0"
      ]
    },
    "358": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "v2#0 (copy)"
      ]
    },
    "360": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "v2#0 (copy)",
        "8"
      ]
    },
    "361": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "v2#0 (copy)",
        "8",
        "8"
      ]
    },
    "362": {
      "op": "extract3",
      "defined_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ]
    },
    "363": {
      "callsub": "test_cases.arc4_types.structs.add_decimal",
      "op": "callsub add_decimal",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "366": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "367": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "370": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "373": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "v1#0 (copy)"
      ]
    },
    "375": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "v1#0 (copy)",
        "v2#0 (copy)"
      ]
    },
    "377": {
      "retsub": true,
      "op": "retsub"
    },
    "378": {
      "subroutine": "test_cases.arc4_types.structs.check",
      "params": {
        "flags#0": "bytes"
      },
      "block": "check",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "381": {
      "op": "b check_block@0"
    },
    "384": {
      "block": "check_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0"
      ]
    },
    "386": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "388": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "0"
      ]
    },
    "389": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tuple_item%0#0"
      ]
    },
    "390": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "flags%out#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tuple_item%0#0",
        "0x00"
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tuple_item%0#0",
        "0x00",
        "0"
      ]
    },
    "392": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "tuple_item%0#0"
      ]
    },
    "394": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "values%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "values%0#0"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "values%0#0",
        "0"
      ]
    },
    "396": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%0#0"
      ]
    },
    "397": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "398": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "400": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "1"
      ]
    },
    "401": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tuple_item%1#0"
      ]
    },
    "402": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "tuple_item%1#0",
        "0x00"
      ]
    },
    "403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tuple_item%1#0",
        "0x00",
        "0"
      ]
    },
    "404": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "tuple_item%1#0"
      ]
    },
    "406": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "flags%out#0",
        "values%1#0"
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "values%1#0",
        "0"
      ]
    },
    "408": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%1#0"
      ]
    },
    "409": {
      "op": "!",
      "defined_out": [
        "flags%out#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%2#0"
      ]
    },
    "410": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "411": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "413": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "2"
      ]
    },
    "414": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tuple_item%2#0"
      ]
    },
    "415": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "tuple_item%2#0",
        "0x00"
      ]
    },
    "416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tuple_item%2#0",
        "0x00",
        "0"
      ]
    },
    "417": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "tuple_item%2#0"
      ]
    },
    "419": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "values%2#0"
      ],
      "stack_out": [
        "flags%out#0",
        "values%2#0"
      ]
    },
    "420": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "values%2#0",
        "0"
      ]
    },
    "421": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%3#0"
      ]
    },
    "422": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "423": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "425": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "3"
      ]
    },
    "427": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tuple_item%3#0"
      ]
    },
    "428": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "tuple_item%3#0",
        "0x00"
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tuple_item%3#0",
        "0x00",
        "0"
      ]
    },
    "430": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "tuple_item%3#0"
      ]
    },
    "432": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "values%3#0"
      ],
      "stack_out": [
        "flags%out#0",
        "values%3#0"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "values%3#0",
        "0"
      ]
    },
    "434": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%4#0"
      ]
    },
    "435": {
      "op": "!",
      "defined_out": [
        "flags%out#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%5#0"
      ]
    },
    "436": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "437": {
      "retsub": true,
      "op": "retsub"
    },
    "438": {
      "subroutine": "test_cases.arc4_types.structs.nested_decode",
      "params": {
        "vector_flags#0": "bytes"
      },
      "block": "nested_decode",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "441": {
      "op": "b nested_decode_block@0"
    },
    "444": {
      "block": "nested_decode_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "446": {
      "op": "frame_dig -1",
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)"
      ]
    },
    "448": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "0"
      ]
    },
    "449": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "0",
        "16",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "0",
        "16"
      ]
    },
    "451": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%0#0"
      ]
    },
    "452": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%0#0",
        "0"
      ]
    },
    "453": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "tuple_item%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%0#0",
        "0",
        "8"
      ]
    },
    "454": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%1#0"
      ]
    },
    "455": {
      "op": "pushint 35382882839 // 35382882839",
      "defined_out": [
        "35382882839",
        "tuple_item%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%1#0",
        "35382882839"
      ]
    },
    "462": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tuple_item%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%1#0",
        "tmp%0#0"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "assert",
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "465": {
      "op": "frame_dig -1",
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)"
      ]
    },
    "467": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "16"
      ]
    },
    "469": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "16",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "16",
        "1"
      ]
    },
    "470": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%2#0"
      ]
    },
    "471": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tuple_item%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%2#0",
        "2"
      ]
    },
    "472": {
      "op": "getbit",
      "defined_out": [
        "tuple_item%3#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%3#0"
      ]
    },
    "473": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "tuple_item%3#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%3#0",
        "0x00"
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "tuple_item%3#0",
        "0x00",
        "0"
      ]
    },
    "475": {
      "op": "uncover 2",
      "stack_out": [
        "vector_flags%out#0",
        "0x00",
        "0",
        "tuple_item%3#0"
      ]
    },
    "477": {
      "op": "setbit",
      "defined_out": [
        "values%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "values%0#0"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "values%0#0",
        "0"
      ]
    },
    "479": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tmp%2#0"
      ]
    },
    "480": {
      "op": "assert",
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "481": {
      "retsub": true,
      "op": "retsub"
    },
    "482": {
      "subroutine": "test_cases.arc4_types.structs.add_decimal",
      "params": {
        "x#0": "bytes",
        "y#0": "bytes"
      },
      "block": "add_decimal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "485": {
      "op": "b add_decimal_block@0"
    },
    "488": {
      "block": "add_decimal_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "490": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "y#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "y#0 (copy)"
      ]
    },
    "493": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "494": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "495": {
      "op": "itob",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "496": {
      "retsub": true,
      "op": "retsub"
    }
  }
}