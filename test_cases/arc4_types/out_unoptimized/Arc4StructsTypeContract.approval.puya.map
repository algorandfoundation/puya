{
  "version": 3,
  "sources": [
    "../structs.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCkB;AAAS;AAAT;AAAoC;AAApC;AAAA;AAAA;AAAV;AACU;AAAqC;AAArC;AAAS;AAAT;AAAA;AAAA;AACA;;;AAAA;;AACE;AAAA;AAAA;AAAA;AAAA;AAAW;AAAA;AAAA;AAAA;;;AACnB;AADZ;AAAA;;;;AAGwB;AAAA;AAAU;AAAV;AAAmB;AAAA;AAAU;AAAV;AAAoB;AAAA;AAAU;AAAV;AAAA;AAAmB;AAAA;AAAU;AAAV;AAAA;;AAAlE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACF;AAAN;;;AAAA;AACA;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAP;AAEc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;;;AAAA;AAE2B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAoB;;;AAApB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACO;AAAP;AAEY;AAAmB;;;;;;;;;;AAAnB;AAAoC;;;;;;;;;;AAApC;AAAA;AAAA;AACZ;;AACA;;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;AAAP;AAEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;;AAAvB;AAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;AAAA;AAAA;AAAkB;AAAA;AAAA;AAAA;AAAlB;AAAP;AAEO;AAAP;;;;AAzBI;;;;;AA+BZ;;;AAGsB;;AAAA;AAAA;AAAA;AAAM;;AAAA;AAAA;AAAA;AAAlB;;;AACY;;AAAA;AAAA;AAAA;AAAM;;AAAA;AAAA;AAAA;AAAlB;;;AAFC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;;AAAA;AAMJ;;;;;AAEW;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AACW;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AACW;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;;AAGJ;;;;;AAEW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAuC;;;;;;;AAAR;AAA/B;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;;AAGJ;;;AAEsC;;AAAA;AAAmB;;AAAA;AAAnB;AAAR;AAA1B",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 2"
    },
    "7": {
      "op": "bytecblock 0x 0x00 0x000000083cfbf217 0x000000230384b842 0x000000000000007b"
    },
    "39": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "40": {
      "op": "bytec_2 // 0x000000083cfbf217",
      "defined_out": [
        "0x",
        "0x000000083cfbf217"
      ],
      "stack_out": [
        "0x",
        "0x000000083cfbf217"
      ]
    },
    "41": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "42": {
      "op": "bytec_3 // 0x000000230384b842",
      "defined_out": [
        "0x000000230384b842",
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "0x000000230384b842"
      ]
    },
    "43": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "44": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0"
      ]
    },
    "46": {
      "op": "dup",
      "defined_out": [
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_1#0"
      ]
    },
    "47": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "0x"
      ]
    },
    "48": {
      "op": "bytec_2 // 0x000000083cfbf217",
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "0x",
        "0x000000083cfbf217"
      ]
    },
    "49": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "encoded%3#0"
      ]
    },
    "50": {
      "op": "bytec_3 // 0x000000230384b842",
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "encoded%3#0",
        "0x000000230384b842"
      ]
    },
    "51": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%4#0"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "encoded%4#0"
      ]
    },
    "52": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "coord_1#0",
        "encoded%4#0",
        "0x"
      ]
    },
    "53": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "copy%0#0",
        "copy%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "copy%0#0",
        "copy%1#0"
      ]
    },
    "54": {
      "callsub": "test_cases.arc4_types.structs.add",
      "op": "callsub add",
      "defined_out": [
        "add%0#0",
        "add%1#0",
        "add%2#0",
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "add%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "57": {
      "op": "popn 2",
      "defined_out": [
        "coord_1#0",
        "coord_3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_3#0"
      ]
    },
    "59": {
      "op": "dup",
      "defined_out": [
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ]
    },
    "60": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)",
        "0"
      ]
    },
    "61": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_3#0",
        "coord_3#0 (copy)",
        "0",
        "8"
      ]
    },
    "62": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "coord_3#0",
        "extract%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "coord_3#0",
        "extract%0#0"
      ]
    },
    "63": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%0#0",
        "coord_3#0"
      ]
    },
    "64": {
      "op": "intc_1 // 8",
      "stack_out": [
        "coord_1#0",
        "extract%0#0",
        "coord_3#0",
        "8"
      ]
    },
    "65": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%0#0",
        "coord_3#0",
        "8",
        "8"
      ]
    },
    "66": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "extract%0#0",
        "extract%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%0#0",
        "extract%1#0"
      ]
    },
    "67": {
      "op": "swap",
      "defined_out": [
        "coord_1#0",
        "extract%0#0",
        "extract%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "extract%0#0"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "coord_1#0",
        "extract%0#0",
        "extract%1#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "extract%0#0",
        "loop_counter%0#0"
      ]
    },
    "69": {
      "op": "swap",
      "defined_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "70": {
      "block": "main_for_body@1",
      "stack_in": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "val#0"
      ],
      "op": "log",
      "defined_out": [],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "71": {
      "block": "main_for_footer@2",
      "stack_in": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "72": {
      "op": "switch main_for_header_1@3",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "76": {
      "block": "main_after_for@4",
      "stack_in": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ],
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x00"
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x00",
        "0"
      ]
    },
    "78": {
      "op": "intc_2 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "79": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0"
      ]
    },
    "80": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "0x00"
      ]
    },
    "81": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "0x00",
        "0"
      ]
    },
    "82": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "83": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "84": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "85": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "86": {
      "op": "intc_2 // 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "87": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "89": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "90": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "91": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "92": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%3#0"
      ]
    },
    "93": {
      "op": "cover 3",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "95": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x"
      ]
    },
    "96": {
      "op": "uncover 3",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x",
        "as_Encoded(bool8)%0#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "encoded%6#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "encoded%6#0"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%6#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%6#0",
        "as_Encoded(bool8)%1#0",
        "0"
      ]
    },
    "101": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "encoded%6#0",
        "get_bit%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%6#0",
        "get_bit%0#0"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "get_bit%0#0",
        "encoded%6#0"
      ]
    },
    "103": {
      "op": "intc_2 // 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "get_bit%0#0",
        "encoded%6#0",
        "1"
      ]
    },
    "104": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%6#0",
        "1",
        "get_bit%0#0"
      ]
    },
    "106": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "set_bit%0#0"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "as_Encoded(bool8)%2#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "as_Encoded(bool8)%2#0",
        "0"
      ]
    },
    "109": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "get_bit%1#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0"
      ]
    },
    "111": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0",
        "2"
      ]
    },
    "112": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "2",
        "get_bit%1#0"
      ]
    },
    "114": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%3#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%1#0"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%1#0",
        "as_Encoded(bool8)%3#0"
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%1#0",
        "as_Encoded(bool8)%3#0",
        "0"
      ]
    },
    "117": {
      "op": "getbit",
      "defined_out": [
        "get_bit%2#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%1#0",
        "get_bit%2#0"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "get_bit%2#0",
        "set_bit%1#0"
      ]
    },
    "119": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "get_bit%2#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "get_bit%2#0",
        "set_bit%1#0",
        "3"
      ]
    },
    "121": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%1#0",
        "3",
        "get_bit%2#0"
      ]
    },
    "123": {
      "op": "setbit",
      "defined_out": [
        "set_bit%2#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%2#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "set_bit%2#0",
        "0x"
      ]
    },
    "125": {
      "op": "concat",
      "defined_out": [
        "flags#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0"
      ]
    },
    "126": {
      "op": "dup",
      "defined_out": [
        "copy%2#0",
        "flags#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "copy%2#0"
      ]
    },
    "127": {
      "callsub": "test_cases.arc4_types.structs.check",
      "op": "callsub check",
      "defined_out": [
        "check%0#0",
        "flags#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "check%0#0"
      ]
    },
    "130": {
      "op": "pop",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "flags#0",
        "flags#0 (copy)"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "flags#0 (copy)"
      ]
    },
    "132": {
      "op": "log",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0"
      ]
    },
    "133": {
      "op": "dig 3",
      "defined_out": [
        "coord_1#0",
        "flags#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "coord_1#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "coord_1#0",
        "coord_1#0 (copy)",
        "flags#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "coord_1#0",
        "coord_1#0 (copy)"
      ]
    },
    "136": {
      "op": "dig 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "coord_1#0",
        "coord_1#0 (copy)",
        "coord_1#0 (copy)"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "coord_1#0",
        "flags#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "flags#0",
        "coord_1#0",
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "assert",
      "defined_out": [
        "coord_1#0",
        "copy%3#0",
        "copy%4#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "copy%4#0",
        "copy%3#0"
      ]
    },
    "140": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "copy%4#0",
        "copy%3#0",
        "0x"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "copy%4#0",
        "0x",
        "copy%3#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "copy%4#0",
        "encoded%8#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "copy%4#0",
        "encoded%8#0"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%8#0",
        "copy%4#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%9#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%9#0"
      ]
    },
    "145": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%9#0",
        "0x"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%10#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%10#0"
      ]
    },
    "147": {
      "callsub": "test_cases.arc4_types.structs.nested_decode",
      "op": "callsub nested_decode",
      "defined_out": [
        "coord_1#0",
        "nested_decode%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "nested_decode%0#0"
      ]
    },
    "150": {
      "op": "pop",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "151": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x"
      ]
    },
    "152": {
      "op": "len",
      "defined_out": [
        "coord_1#0",
        "length%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "length%0#0"
      ]
    },
    "153": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_bytes%0#0"
      ]
    },
    "154": {
      "op": "extract 6 2",
      "defined_out": [
        "coord_1#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "length_uint16%0#0"
      ]
    },
    "157": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "length_uint16%0#0",
        "0x"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "159": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "as_Encoded(len+uint8[])%0#0",
        "0x"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0"
      ]
    },
    "162": {
      "op": "intc_3 // 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "2"
      ]
    },
    "163": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "coord_1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "as_bytes%1#0"
      ]
    },
    "164": {
      "op": "extract 6 2",
      "defined_out": [
        "coord_1#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%11#0",
        "tail%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tail%0#0",
        "encoded%11#0"
      ]
    },
    "170": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%11#0",
        "tail%0#0"
      ]
    },
    "171": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0"
      ]
    },
    "172": {
      "op": "dupn 2",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "copy#0 (copy)",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "174": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)",
        "0"
      ]
    },
    "175": {
      "op": "extract_uint16",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "extract_uint16%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "extract_uint16%0#0"
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "extract_uint16%0#0",
        "copy#0"
      ]
    },
    "177": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "extract_uint16%0#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "178": {
      "op": "len",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "extract_uint16%0#0",
        "len%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "extract_uint16%0#0",
        "copy#0",
        "len%0#0"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "extract_uint16%0#0",
        "len%0#0",
        "copy#0"
      ]
    },
    "180": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "extract_uint16%0#0",
        "len%0#0",
        "copy#0",
        "copy#0 (copy)"
      ]
    },
    "181": {
      "op": "uncover 3",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "len%0#0",
        "copy#0",
        "copy#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "183": {
      "op": "uncover 3",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "copy#0 (copy)",
        "extract_uint16%0#0",
        "len%0#0"
      ]
    },
    "185": {
      "op": "substring3",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0"
      ]
    },
    "186": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0",
        "0x"
      ]
    },
    "187": {
      "op": "pushbytes 0x2a",
      "defined_out": [
        "0x",
        "0x2a",
        "coord_1#0",
        "copy#0",
        "mutable#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0",
        "0x",
        "0x2a"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "encoded%13#0",
        "mutable#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0",
        "encoded%13#0"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0",
        "encoded%13#0",
        "0x"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "copy#0",
        "encoded%14#0",
        "mutable#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "substring3%0#0",
        "encoded%14#0"
      ]
    },
    "193": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0"
      ]
    },
    "194": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "coord_1#0",
        "copy#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "195": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "extract_to_end%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "extract_to_end%0#0"
      ]
    },
    "198": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "len%1#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "len%1#0"
      ]
    },
    "199": {
      "op": "intc_2 // 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "len%1#0",
        "1"
      ]
    },
    "200": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "div_floor%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "201": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "as_bytes%2#0"
      ]
    },
    "202": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "coord_1#0",
        "copy#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "207": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "209": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "coord_1#0",
        "copy#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "210": {
      "op": "dig 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%1#0",
        "copy#0 (copy)"
      ]
    },
    "212": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%1#0",
        "copy#0 (copy)",
        "0"
      ]
    },
    "213": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "coord_1#0",
        "copy#0",
        "item_offset%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0",
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0",
        "copy#0"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0",
        "copy#0",
        "0"
      ]
    },
    "217": {
      "op": "uncover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%1#0",
        "copy#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "219": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "coord_1#0",
        "data_up_to_item%0#0",
        "mutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "as_Encoded(len+uint8[])%1#0",
        "data_up_to_item%0#0"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "data_up_to_item%0#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "221": {
      "op": "concat",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "mutable#0",
        "copy#0"
      ]
    },
    "222": {
      "op": "!=",
      "defined_out": [
        "coord_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tmp%1#0"
      ]
    },
    "223": {
      "error": "expected copy is different",
      "op": "assert // expected copy is different",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "224": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x"
      ]
    },
    "225": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x",
        "0x000000000000000c",
        "coord_1#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "0x",
        "0x000000000000000c"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%15#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%15#0"
      ]
    },
    "236": {
      "op": "pushbytes 0x0000000000000022",
      "defined_out": [
        "0x0000000000000022",
        "coord_1#0",
        "encoded%15#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%15#0",
        "0x0000000000000022"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%16#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%16#0"
      ]
    },
    "247": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "encoded%16#0",
        "0x"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "immutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0"
      ]
    },
    "249": {
      "op": "dupn 2",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable_copy#0",
        "no_copy#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "no_copy#0",
        "immutable#0",
        "immutable_copy#0"
      ]
    },
    "251": {
      "op": "cover 2",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable_copy#0",
        "no_copy#0",
        "immutable#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable_copy#0",
        "immutable#0",
        "no_copy#0"
      ]
    },
    "254": {
      "op": "dig 1",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable#0 (copy)",
        "immutable_copy#0",
        "no_copy#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable_copy#0",
        "immutable#0",
        "no_copy#0",
        "immutable#0 (copy)"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable_copy#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable_copy#0",
        "immutable#0",
        "tmp%2#0"
      ]
    },
    "257": {
      "op": "assert",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable_copy#0",
        "immutable#0"
      ]
    },
    "258": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable_copy#0"
      ]
    },
    "259": {
      "op": "dig 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable_copy#0",
        "immutable#0 (copy)"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "tmp%3#0"
      ]
    },
    "262": {
      "op": "assert",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0"
      ]
    },
    "263": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable#0 (copy)"
      ]
    },
    "264": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable#0 (copy)",
        "0"
      ]
    },
    "265": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "coord_1#0",
        "immutable#0",
        "immutable#0 (copy)"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable#0 (copy)",
        "0",
        "8"
      ]
    },
    "266": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "extract%2#0",
        "immutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "extract%2#0"
      ]
    },
    "267": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "extract%2#0",
        "0x"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "0x",
        "extract%2#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%18#0",
        "immutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "encoded%18#0"
      ]
    },
    "270": {
      "op": "bytec 4 // 0x000000000000007b",
      "defined_out": [
        "0x000000000000007b",
        "coord_1#0",
        "encoded%18#0",
        "immutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "encoded%18#0",
        "0x000000000000007b"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "encoded%19#0",
        "immutable#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "encoded%19#0"
      ]
    },
    "273": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "encoded%19#0",
        "0x"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable2#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0"
      ]
    },
    "275": {
      "op": "dup",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)"
      ]
    },
    "276": {
      "op": "intc_1 // 8",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)",
        "8"
      ]
    },
    "277": {
      "op": "dup",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "immutable2#0 (copy)",
        "8",
        "8"
      ]
    },
    "278": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "279": {
      "op": "bytec 4 // 0x000000000000007b",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "reinterpret_biguint%0#0",
        "0x000000000000007b"
      ]
    },
    "281": {
      "op": "b==",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "immutable2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "tmp%4#0"
      ]
    },
    "282": {
      "op": "assert",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0"
      ]
    },
    "283": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "0"
      ]
    },
    "284": {
      "op": "intc_1 // 8",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "immutable2#0",
        "0",
        "8"
      ]
    },
    "285": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "immutable#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "immutable#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "reinterpret_biguint%2#0",
        "immutable#0"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "reinterpret_biguint%2#0",
        "immutable#0",
        "0"
      ]
    },
    "288": {
      "op": "intc_1 // 8",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "reinterpret_biguint%2#0",
        "immutable#0",
        "0",
        "8"
      ]
    },
    "289": {
      "op": "extract3",
      "defined_out": [
        "coord_1#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "290": {
      "op": "b==",
      "defined_out": [
        "coord_1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "tmp%5#0"
      ]
    },
    "291": {
      "op": "assert",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "292": {
      "op": "intc_2 // 1",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "1"
      ]
    },
    "293": {
      "op": "return",
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "294": {
      "block": "main_for_header_1@3",
      "stack_in": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "295": {
      "op": "bury 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0"
      ]
    },
    "297": {
      "op": "dig 1",
      "defined_out": [
        "loop_counter%0#0",
        "val#0"
      ],
      "stack_out": [
        "coord_1#0",
        "extract%1#0",
        "loop_counter%0#0",
        "val#0"
      ]
    },
    "299": {
      "op": "b main_for_body@1"
    },
    "302": {
      "subroutine": "test_cases.arc4_types.structs.add",
      "params": {
        "v1#0": "bytes",
        "v2#0": "bytes"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "305": {
      "block": "add_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)"
      ]
    },
    "307": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0"
      ]
    },
    "308": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0",
        "8"
      ]
    },
    "309": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0"
      ],
      "stack_out": [
        "extract%0#0"
      ]
    },
    "310": {
      "op": "frame_dig -1",
      "defined_out": [
        "extract%0#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "extract%0#0",
        "v2#0 (copy)"
      ]
    },
    "312": {
      "op": "intc_0 // 0",
      "stack_out": [
        "extract%0#0",
        "v2#0 (copy)",
        "0"
      ]
    },
    "313": {
      "op": "intc_1 // 8",
      "stack_out": [
        "extract%0#0",
        "v2#0 (copy)",
        "0",
        "8"
      ]
    },
    "314": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0",
        "extract%1#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0"
      ]
    },
    "315": {
      "callsub": "test_cases.arc4_types.structs.add_decimal",
      "op": "callsub add_decimal",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "318": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)"
      ]
    },
    "320": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)",
        "8"
      ]
    },
    "321": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "v1#0 (copy)",
        "8",
        "8"
      ]
    },
    "322": {
      "op": "extract3",
      "defined_out": [
        "extract%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract%2#0"
      ]
    },
    "323": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "extract%2#0",
        "v2#0 (copy)"
      ]
    },
    "325": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "extract%2#0",
        "v2#0 (copy)",
        "8"
      ]
    },
    "326": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "extract%2#0",
        "v2#0 (copy)",
        "8",
        "8"
      ]
    },
    "327": {
      "op": "extract3",
      "defined_out": [
        "extract%2#0",
        "extract%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract%2#0",
        "extract%3#0"
      ]
    },
    "328": {
      "callsub": "test_cases.arc4_types.structs.add_decimal",
      "op": "callsub add_decimal",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "331": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "332": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded%0#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "tmp%1#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "337": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "339": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded%2#0",
        "v1#0 (copy)"
      ]
    },
    "341": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded%2#0",
        "v1#0 (copy)",
        "v2#0 (copy)"
      ]
    },
    "343": {
      "retsub": true,
      "op": "retsub"
    },
    "344": {
      "subroutine": "test_cases.arc4_types.structs.check",
      "params": {
        "flags#0": "bytes"
      },
      "block": "check",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "347": {
      "block": "check_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "350": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "0"
      ]
    },
    "351": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "get_bit%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "get_bit%0#0"
      ]
    },
    "352": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "flags%out#0",
        "get_bit%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "get_bit%0#0",
        "0x00"
      ]
    },
    "353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "get_bit%0#0",
        "0x00",
        "0"
      ]
    },
    "354": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "get_bit%0#0"
      ]
    },
    "356": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tmp%0#0",
        "0"
      ]
    },
    "358": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%1#0"
      ]
    },
    "359": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "360": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "362": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "1"
      ]
    },
    "363": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "get_bit%1#0"
      ],
      "stack_out": [
        "flags%out#0",
        "get_bit%1#0"
      ]
    },
    "364": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "get_bit%1#0",
        "0x00"
      ]
    },
    "365": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "get_bit%1#0",
        "0x00",
        "0"
      ]
    },
    "366": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "get_bit%1#0"
      ]
    },
    "368": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%2#0"
      ]
    },
    "369": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tmp%2#0",
        "0"
      ]
    },
    "370": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%3#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "flags%out#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%4#0"
      ]
    },
    "372": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "373": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "375": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "2"
      ]
    },
    "376": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "get_bit%2#0"
      ],
      "stack_out": [
        "flags%out#0",
        "get_bit%2#0"
      ]
    },
    "377": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "get_bit%2#0",
        "0x00"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "get_bit%2#0",
        "0x00",
        "0"
      ]
    },
    "379": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "get_bit%2#0"
      ]
    },
    "381": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%5#0"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tmp%5#0",
        "0"
      ]
    },
    "383": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%6#0"
      ]
    },
    "384": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "385": {
      "op": "frame_dig -1",
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)"
      ]
    },
    "387": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "flags#0 (copy)",
        "flags%out#0"
      ],
      "stack_out": [
        "flags%out#0",
        "flags#0 (copy)",
        "3"
      ]
    },
    "389": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "get_bit%3#0"
      ],
      "stack_out": [
        "flags%out#0",
        "get_bit%3#0"
      ]
    },
    "390": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "flags%out#0",
        "get_bit%3#0",
        "0x00"
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "get_bit%3#0",
        "0x00",
        "0"
      ]
    },
    "392": {
      "op": "uncover 2",
      "stack_out": [
        "flags%out#0",
        "0x00",
        "0",
        "get_bit%3#0"
      ]
    },
    "394": {
      "op": "setbit",
      "defined_out": [
        "flags%out#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%7#0"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "flags%out#0",
        "tmp%7#0",
        "0"
      ]
    },
    "396": {
      "op": "getbit",
      "defined_out": [
        "flags%out#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%8#0"
      ]
    },
    "397": {
      "op": "!",
      "defined_out": [
        "flags%out#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "flags%out#0",
        "tmp%9#0"
      ]
    },
    "398": {
      "op": "assert",
      "stack_out": [
        "flags%out#0"
      ]
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "subroutine": "test_cases.arc4_types.structs.nested_decode",
      "params": {
        "vector_flags#0": "bytes"
      },
      "block": "nested_decode",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "403": {
      "block": "nested_decode_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "405": {
      "op": "dup",
      "defined_out": [
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)"
      ]
    },
    "406": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "0"
      ]
    },
    "407": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "0",
        "16",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "0",
        "16"
      ]
    },
    "409": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%0#0"
      ]
    },
    "410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "extract%0#0",
        "0"
      ]
    },
    "411": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "extract%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%0#0",
        "0",
        "8"
      ]
    },
    "412": {
      "op": "extract3",
      "defined_out": [
        "extract%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%1#0"
      ]
    },
    "413": {
      "op": "pushint 35382882839 // 35382882839",
      "defined_out": [
        "35382882839",
        "extract%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%1#0",
        "35382882839"
      ]
    },
    "420": {
      "op": "itob",
      "defined_out": [
        "extract%1#0",
        "tmp%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%1#0",
        "tmp%0#0"
      ]
    },
    "421": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tmp%1#0"
      ]
    },
    "422": {
      "op": "assert",
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "423": {
      "op": "frame_dig -1",
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)"
      ]
    },
    "425": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "16"
      ]
    },
    "427": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "16",
        "vector_flags#0 (copy)",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "vector_flags#0 (copy)",
        "16",
        "1"
      ]
    },
    "428": {
      "op": "extract3",
      "defined_out": [
        "extract%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%2#0"
      ]
    },
    "429": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "extract%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "extract%2#0",
        "2"
      ]
    },
    "430": {
      "op": "getbit",
      "defined_out": [
        "get_bit%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "get_bit%0#0"
      ]
    },
    "431": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "get_bit%0#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "get_bit%0#0",
        "0x00"
      ]
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "get_bit%0#0",
        "0x00",
        "0"
      ]
    },
    "433": {
      "op": "uncover 2",
      "stack_out": [
        "vector_flags%out#0",
        "0x00",
        "0",
        "get_bit%0#0"
      ]
    },
    "435": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tmp%2#0"
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "vector_flags%out#0",
        "tmp%2#0",
        "0"
      ]
    },
    "437": {
      "op": "getbit",
      "defined_out": [
        "tmp%3#0",
        "vector_flags%out#0"
      ],
      "stack_out": [
        "vector_flags%out#0",
        "tmp%3#0"
      ]
    },
    "438": {
      "op": "assert",
      "stack_out": [
        "vector_flags%out#0"
      ]
    },
    "439": {
      "retsub": true,
      "op": "retsub"
    },
    "440": {
      "subroutine": "test_cases.arc4_types.structs.add_decimal",
      "params": {
        "x#0": "bytes",
        "y#0": "bytes"
      },
      "block": "add_decimal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "443": {
      "block": "add_decimal_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "445": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "446": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "y#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "y#0 (copy)"
      ]
    },
    "448": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "449": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "450": {
      "op": "itob",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "451": {
      "retsub": true,
      "op": "retsub"
    }
  }
}