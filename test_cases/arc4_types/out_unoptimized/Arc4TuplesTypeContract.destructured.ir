contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x01)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x02)
                let as_bytes%0#0: bytes = (itob 7u)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len 0x000568656c6c6f)
                let current_tail_offset%1#0: uint64 = (+ 7u data_length%0#0)
                let as_bytes%1#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0xff)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 0x000568656c6c6f)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 0x0005776f726c64)
                let my_tuple#0: bytes = encoded_tuple_buffer%7#0
                let tmp%0#0: bool = (== my_tuple#0 0x01020007000eff000568656c6c6f0005776f726c64)
                (assert tmp%0#0)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u 0u)
                let encoded_bool%2#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%3#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%4#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%5#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%6#0: bytes = (setbit 0x00 0u 0u)
                let encoded_bool%7#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%8#0: bytes = (setbit 0x00 0u 1u)
                let encoded_tuple_buffer%9#0: bytes = (concat 0x 0x04)
                let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_bool%0#0)
                let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
                let encoded_tuple_buffer%11#0: bytes = (setbit encoded_tuple_buffer%10#0 9u is_true%0#0)
                let is_true%1#0: uint64 = (getbit encoded_bool%2#0 0u)
                let encoded_tuple_buffer%12#0: bytes = (setbit encoded_tuple_buffer%11#0 10u is_true%1#0)
                let is_true%2#0: uint64 = (getbit encoded_bool%3#0 0u)
                let encoded_tuple_buffer%13#0: bytes = (setbit encoded_tuple_buffer%12#0 11u is_true%2#0)
                let is_true%3#0: uint64 = (getbit encoded_bool%4#0 0u)
                let encoded_tuple_buffer%14#0: bytes = (setbit encoded_tuple_buffer%13#0 12u is_true%3#0)
                let is_true%4#0: uint64 = (getbit encoded_bool%5#0 0u)
                let encoded_tuple_buffer%15#0: bytes = (setbit encoded_tuple_buffer%14#0 13u is_true%4#0)
                let is_true%5#0: uint64 = (getbit encoded_bool%6#0 0u)
                let encoded_tuple_buffer%16#0: bytes = (setbit encoded_tuple_buffer%15#0 14u is_true%5#0)
                let is_true%6#0: uint64 = (getbit encoded_bool%7#0 0u)
                let encoded_tuple_buffer%17#0: bytes = (setbit encoded_tuple_buffer%16#0 15u is_true%6#0)
                let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 encoded_bool%8#0)
                let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 0x10)
                let boolean_packing#0: bytes = encoded_tuple_buffer%19#0
                let tmp%1#0: bool = (== boolean_packing#0 0x04bd8010)
                (assert tmp%1#0)
                let item0%0#0: bytes = (extract3 boolean_packing#0 0u 1u) // on error: Index access is out of bounds
                let is_true%7#0: uint64 = (getbit boolean_packing#0 8u)
                let encoded_bool%9#0: bytes = (setbit 0x00 0u is_true%7#0)
                let item1%0#0: bytes = encoded_bool%9#0
                let is_true%8#0: uint64 = (getbit boolean_packing#0 9u)
                let encoded_bool%10#0: bytes = (setbit 0x00 0u is_true%8#0)
                let item2%0#0: bytes = encoded_bool%10#0
                let is_true%9#0: uint64 = (getbit boolean_packing#0 10u)
                let encoded_bool%11#0: bytes = (setbit 0x00 0u is_true%9#0)
                let item3%0#0: bytes = encoded_bool%11#0
                let is_true%10#0: uint64 = (getbit boolean_packing#0 11u)
                let encoded_bool%12#0: bytes = (setbit 0x00 0u is_true%10#0)
                let item4%0#0: bytes = encoded_bool%12#0
                let is_true%11#0: uint64 = (getbit boolean_packing#0 12u)
                let encoded_bool%13#0: bytes = (setbit 0x00 0u is_true%11#0)
                let item5%0#0: bytes = encoded_bool%13#0
                let is_true%12#0: uint64 = (getbit boolean_packing#0 13u)
                let encoded_bool%14#0: bytes = (setbit 0x00 0u is_true%12#0)
                let item6%0#0: bytes = encoded_bool%14#0
                let is_true%13#0: uint64 = (getbit boolean_packing#0 14u)
                let encoded_bool%15#0: bytes = (setbit 0x00 0u is_true%13#0)
                let item7%0#0: bytes = encoded_bool%15#0
                let is_true%14#0: uint64 = (getbit boolean_packing#0 15u)
                let encoded_bool%16#0: bytes = (setbit 0x00 0u is_true%14#0)
                let item8%0#0: bytes = encoded_bool%16#0
                let is_true%15#0: uint64 = (getbit boolean_packing#0 16u)
                let encoded_bool%17#0: bytes = (setbit 0x00 0u is_true%15#0)
                let item9%0#0: bytes = encoded_bool%17#0
                let item10%0#0: bytes = (extract3 boolean_packing#0 3u 1u) // on error: Index access is out of bounds
                let a#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let c#0: bytes = item2%0#0
                let d#0: bytes = item3%0#0
                let e#0: bytes = item4%0#0
                let f#0: bytes = item5%0#0
                let g#0: bytes = item6%0#0
                let h#0: bytes = item7%0#0
                let i#0: bytes = item8%0#0
                let j#0: bytes = item9%0#0
                let k#0: bytes = item10%0#0
                let reinterpret_biguint%0#0: biguint = (extract3 boolean_packing#0 3u 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%1#0: biguint = k#0
                let tmp%2#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (btoi a#0)
                let tmp%4#0: bool = (== tmp%3#0 4u)
                (assert tmp%4#0) // a is 4
                let tmp%5#0: bool = (!= b#0 0x00)
                goto tmp%5#0 ? block@1 : block@8
            block@1: // and_contd_L39
                let tmp%6#0: bool = (!= d#0 0x00)
                goto tmp%6#0 ? block@2 : block@8
            block@2: // and_contd_L39
                let tmp%7#0: bool = (!= e#0 0x00)
                goto tmp%7#0 ? block@3 : block@8
            block@3: // and_contd_L39
                let tmp%8#0: bool = (!= f#0 0x00)
                goto tmp%8#0 ? block@4 : block@8
            block@4: // and_contd_L39
                let tmp%9#0: bool = (!= g#0 0x00)
                goto tmp%9#0 ? block@5 : block@8
            block@5: // and_contd_L39
                let tmp%10#0: bool = (!= i#0 0x00)
                goto tmp%10#0 ? block@6 : block@8
            block@6: // and_contd_L39
                let tmp%11#0: bool = (!= j#0 0x00)
                goto tmp%11#0 ? block@7 : block@8
            block@7: // bool_true_L39
                let and_result%0#0: bool = 1u
                goto block@9
            block@8: // bool_false_L39
                let and_result%0#0: bool = 0u
                goto block@9
            block@9: // bool_merge_L39
                (assert and_result%0#0) // b,d,e,f,g,i,j are true
                let tmp%12#0: bool = (!= c#0 0x00)
                goto tmp%12#0 ? block@11 : block@10
            block@10: // or_contd_L40
                let tmp%13#0: bool = (!= h#0 0x00)
                goto tmp%13#0 ? block@11 : block@12
            block@11: // bool_true_L40
                let or_result%0#0: bool = 1u
                goto block@13
            block@12: // bool_false_L40
                let or_result%0#0: bool = 0u
                goto block@13
            block@13: // bool_merge_L40
                let tmp%14#0: bool = (! or_result%0#0)
                (assert tmp%14#0) // c and h are false
                let tmp%15#0: uint64 = (btoi k#0)
                let tmp%16#0: bool = (== tmp%15#0 16u)
                (assert tmp%16#0) // k is 16
                let item0%1#0: bytes = (extract3 boolean_packing#0 0u 1u) // on error: Index access is out of bounds
                let is_true%16#0: uint64 = (getbit boolean_packing#0 8u)
                let encoded_bool%18#0: bytes = (setbit 0x00 0u is_true%16#0)
                let item1%1#0: bytes = encoded_bool%18#0
                let is_true%17#0: uint64 = (getbit boolean_packing#0 9u)
                let encoded_bool%19#0: bytes = (setbit 0x00 0u is_true%17#0)
                let item2%1#0: bytes = encoded_bool%19#0
                let is_true%18#0: uint64 = (getbit boolean_packing#0 10u)
                let encoded_bool%20#0: bytes = (setbit 0x00 0u is_true%18#0)
                let item3%1#0: bytes = encoded_bool%20#0
                let is_true%19#0: uint64 = (getbit boolean_packing#0 11u)
                let encoded_bool%21#0: bytes = (setbit 0x00 0u is_true%19#0)
                let item4%1#0: bytes = encoded_bool%21#0
                let is_true%20#0: uint64 = (getbit boolean_packing#0 12u)
                let encoded_bool%22#0: bytes = (setbit 0x00 0u is_true%20#0)
                let item5%1#0: bytes = encoded_bool%22#0
                let is_true%21#0: uint64 = (getbit boolean_packing#0 13u)
                let encoded_bool%23#0: bytes = (setbit 0x00 0u is_true%21#0)
                let item6%1#0: bytes = encoded_bool%23#0
                let is_true%22#0: uint64 = (getbit boolean_packing#0 14u)
                let encoded_bool%24#0: bytes = (setbit 0x00 0u is_true%22#0)
                let item7%1#0: bytes = encoded_bool%24#0
                let is_true%23#0: uint64 = (getbit boolean_packing#0 15u)
                let encoded_bool%25#0: bytes = (setbit 0x00 0u is_true%23#0)
                let item8%1#0: bytes = encoded_bool%25#0
                let is_true%24#0: uint64 = (getbit boolean_packing#0 16u)
                let encoded_bool%26#0: bytes = (setbit 0x00 0u is_true%24#0)
                let item9%1#0: bytes = encoded_bool%26#0
                let item10%1#0: bytes = (extract3 boolean_packing#0 3u 1u) // on error: Index access is out of bounds
                let encoded_tuple_buffer%21#0: bytes = (concat 0x item0%1#0)
                let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 item1%1#0)
                let is_true%25#0: uint64 = (getbit item2%1#0 0u)
                let encoded_tuple_buffer%23#0: bytes = (setbit encoded_tuple_buffer%22#0 9u is_true%25#0)
                let is_true%26#0: uint64 = (getbit item3%1#0 0u)
                let encoded_tuple_buffer%24#0: bytes = (setbit encoded_tuple_buffer%23#0 10u is_true%26#0)
                let is_true%27#0: uint64 = (getbit item4%1#0 0u)
                let encoded_tuple_buffer%25#0: bytes = (setbit encoded_tuple_buffer%24#0 11u is_true%27#0)
                let is_true%28#0: uint64 = (getbit item5%1#0 0u)
                let encoded_tuple_buffer%26#0: bytes = (setbit encoded_tuple_buffer%25#0 12u is_true%28#0)
                let is_true%29#0: uint64 = (getbit item6%1#0 0u)
                let encoded_tuple_buffer%27#0: bytes = (setbit encoded_tuple_buffer%26#0 13u is_true%29#0)
                let is_true%30#0: uint64 = (getbit item7%1#0 0u)
                let encoded_tuple_buffer%28#0: bytes = (setbit encoded_tuple_buffer%27#0 14u is_true%30#0)
                let is_true%31#0: uint64 = (getbit item8%1#0 0u)
                let encoded_tuple_buffer%29#0: bytes = (setbit encoded_tuple_buffer%28#0 15u is_true%31#0)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 item9%1#0)
                let encoded_tuple_buffer%31#0: bytes = (concat encoded_tuple_buffer%30#0 item10%1#0)
                let tmp%17#0: bool = (== boolean_packing#0 encoded_tuple_buffer%31#0)
                (assert tmp%17#0)
                let (tuple_assignment%0#0: uint64, tuple_assignment%1#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
                let total#0: uint64 = tuple_assignment%0#0
                let concat#0: bytes = tuple_assignment%1#0
                let tmp%18#0: bytes = ((extract 2 0) concat#0)
                let tmp%19#0: bool = (== tmp%18#0 "hello world")
                (assert tmp%19#0)
                let tmp%20#0: bool = (== total#0 258u)
                (assert tmp%20#0)
                test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy()
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L56
                let item0%0#0: bytes = (extract3 test_tuple#0 0u 1u) // on error: Index access is out of bounds
                let item1%0#0: bytes = (extract3 test_tuple#0 1u 1u) // on error: Index access is out of bounds
                let item_start_offset%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item2%0#0: bytes = (substring3 test_tuple#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_start_offset%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_end_offset%1#0: uint64 = (len test_tuple#0)
                let item3%0#0: bytes = (substring3 test_tuple#0 item_start_offset%1#0 item_end_offset%1#0)
                let item4%0#0: bytes = (extract3 test_tuple#0 6u 1u) // on error: Index access is out of bounds
                let a#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let c#0: bytes = item2%0#0
                let d#0: bytes = item3%0#0
                let e#0: bytes = item4%0#0
                let reinterpret_biguint%0#0: biguint = (extract3 test_tuple#0 0u 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%1#0: biguint = a#0
                let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%0#0)
                let reinterpret_biguint%2#0: biguint = (extract3 test_tuple#0 6u 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%3#0: biguint = e#0
                let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
                (assert tmp%1#0)
                let item_start_offset%2#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_end_offset%2#0: uint64 = (len test_tuple#0)
                let tmp%2#0: bytes = (substring3 test_tuple#0 item_start_offset%2#0 item_end_offset%2#0)
                let tmp%3#0: bool = (== tmp%2#0 d#0)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 text#0)
                return total#0 encoded_value%0#0
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
            block@0: // L69
                let length%0#0: uint64 = (len 0x)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
                let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x00)
                let as_bytes%1#0: bytes = (itob 3u)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
                let tup#0: bytes = encoded_tuple_buffer%3#0
                let item_start_offset%0#0: uint64 = (extract_uint16 tup#0 1u)
                let item_end_offset%0#0: uint64 = (len tup#0)
                let tmp%0#0: bytes = (substring3 tup#0 item_start_offset%0#0 item_end_offset%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%0#0)
                let data%0#0: bytes = (concat 0x 0x00)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%2#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let assigned_value%0#0: bytes = concat_result%0#0
                let item_offset%0#0: uint64 = (extract_uint16 tup#0 1u)
                let data_up_to_item%0#0: bytes = (extract3 tup#0 0u item_offset%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 assigned_value%0#0)
                let tup#0: bytes = updated_data%0#0
                let item_start_offset%1#0: uint64 = (extract_uint16 tup#0 1u)
                let item_end_offset%1#0: uint64 = (len tup#0)
                let tmp%1#0: bytes = (substring3 tup#0 item_start_offset%1#0 item_end_offset%1#0)
                let result%0#0: bytes = (concat 0x 0x00)
                let array_data%0#0: bytes = (concat 0x0001 result%0#0)
                let tmp%2#0: bool = (== tmp%1#0 array_data%0#0)
                (assert tmp%2#0)
                let copy%0#0: bytes = tup#0
                let tup2#0: bytes = copy%0#0
                let item_start_offset%2#0: uint64 = (extract_uint16 tup#0 1u)
                let item_end_offset%2#0: uint64 = (len tup#0)
                let tmp%3#0: bytes = (substring3 tup#0 item_start_offset%2#0 item_end_offset%2#0)
                let array_length%0#0: uint64 = (extract_uint16 tmp%3#0 0u)
                let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let updated_target%0#0: bytes = (replace3 tmp%3#0 2u 0x01)
                let assigned_value%2#0: bytes = updated_target%0#0
                let item_offset%1#0: uint64 = (extract_uint16 tup#0 1u)
                let data_up_to_item%1#0: bytes = (extract3 tup#0 0u item_offset%1#0)
                let updated_data%1#0: bytes = (concat data_up_to_item%1#0 assigned_value%2#0)
                let tup#0: bytes = updated_data%1#0
                let item_start_offset%3#0: uint64 = (extract_uint16 tup#0 1u)
                let item_end_offset%3#0: uint64 = (len tup#0)
                let tmp%4#0: bytes = (substring3 tup#0 item_start_offset%3#0 item_end_offset%3#0)
                let item_start_offset%4#0: uint64 = (extract_uint16 tup2#0 1u)
                let item_end_offset%4#0: uint64 = (len tup2#0)
                let tmp%5#0: bytes = (substring3 tup2#0 item_start_offset%4#0 item_end_offset%4#0)
                let tmp%6#0: bool = (!= tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L53
                return 1u