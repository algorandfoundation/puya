contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let length%0#0: uint64 = (len "hello")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "hello")
                let length%1#0: uint64 = (len "world")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%1#0: bytes = (concat value_as_uint16%1#0 "world")
                let encoded_tuple_buffer%0#1: bytes = (concat 0x 0x01)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0x02)
                let value_as_bytes%2#0: bytes = (itob 7u)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 value_as_uint16%2#0)
                let data_length%0#0: uint64 = (len tmp%0#0)
                let current_tail_offset%0#1: uint64 = (+ 7u data_length%0#0)
                let value_as_bytes%3#0: bytes = (itob current_tail_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 value_as_uint16%3#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0xff)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 tmp%0#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 tmp%1#0)
                let my_tuple#0: bytes = encoded_tuple_buffer%0#1
                let tmp%2#0: bool = (== my_tuple#0 0x01020007000eff000568656c6c6f0005776f726c64)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (setbit 0x00 0u 1u)
                let tmp%4#0: bytes = (setbit 0x00 0u 0u)
                let tmp%5#0: bytes = (setbit 0x00 0u 1u)
                let tmp%6#0: bytes = (setbit 0x00 0u 1u)
                let tmp%7#0: bytes = (setbit 0x00 0u 1u)
                let tmp%8#0: bytes = (setbit 0x00 0u 1u)
                let tmp%9#0: bytes = (setbit 0x00 0u 0u)
                let tmp%10#0: bytes = (setbit 0x00 0u 1u)
                let tmp%11#0: bytes = (setbit 0x00 0u 1u)
                let encoded_tuple_buffer%1#1: bytes = (concat 0x 0x04)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 tmp%3#0)
                let is_true%0#0: uint64 = (getbit tmp%4#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 9u is_true%0#0)
                let is_true%1#0: uint64 = (getbit tmp%5#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 10u is_true%1#0)
                let is_true%2#0: uint64 = (getbit tmp%6#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 11u is_true%2#0)
                let is_true%3#0: uint64 = (getbit tmp%7#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 12u is_true%3#0)
                let is_true%4#0: uint64 = (getbit tmp%8#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 13u is_true%4#0)
                let is_true%5#0: uint64 = (getbit tmp%9#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 14u is_true%5#0)
                let is_true%6#0: uint64 = (getbit tmp%10#0 0u)
                let encoded_tuple_buffer%1#1: bytes = (setbit encoded_tuple_buffer%1#1 15u is_true%6#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 tmp%11#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x10)
                let boolean_packing#0: bytes = encoded_tuple_buffer%1#1
                let tmp%12#0: bool = (== boolean_packing#0 0x04bd8010)
                (assert tmp%12#0)
                let item0%0#0: bytes = (extract3 boolean_packing#0 0u 1u)
                let is_true%7#0: uint64 = (getbit boolean_packing#0 8u)
                let item1%0#0: bytes = (setbit 0x00 0u is_true%7#0)
                let is_true%8#0: uint64 = (getbit boolean_packing#0 9u)
                let item2%0#0: bytes = (setbit 0x00 0u is_true%8#0)
                let is_true%9#0: uint64 = (getbit boolean_packing#0 10u)
                let item3%0#0: bytes = (setbit 0x00 0u is_true%9#0)
                let is_true%10#0: uint64 = (getbit boolean_packing#0 11u)
                let item4%0#0: bytes = (setbit 0x00 0u is_true%10#0)
                let is_true%11#0: uint64 = (getbit boolean_packing#0 12u)
                let item5%0#0: bytes = (setbit 0x00 0u is_true%11#0)
                let is_true%12#0: uint64 = (getbit boolean_packing#0 13u)
                let item6%0#0: bytes = (setbit 0x00 0u is_true%12#0)
                let is_true%13#0: uint64 = (getbit boolean_packing#0 14u)
                let item7%0#0: bytes = (setbit 0x00 0u is_true%13#0)
                let is_true%14#0: uint64 = (getbit boolean_packing#0 15u)
                let item8%0#0: bytes = (setbit 0x00 0u is_true%14#0)
                let is_true%15#0: uint64 = (getbit boolean_packing#0 16u)
                let item9%0#0: bytes = (setbit 0x00 0u is_true%15#0)
                let item10%0#0: bytes = (extract3 boolean_packing#0 3u 1u)
                let a#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let c#0: bytes = item2%0#0
                let d#0: bytes = item3%0#0
                let e#0: bytes = item4%0#0
                let f#0: bytes = item5%0#0
                let g#0: bytes = item6%0#0
                let h#0: bytes = item7%0#0
                let i#0: bytes = item8%0#0
                let j#0: bytes = item9%0#0
                let k#0: bytes = item10%0#0
                let reinterpret_biguint%0#0: biguint = (extract3 boolean_packing#0 3u 1u)
                let reinterpret_biguint%1#0: biguint = k#0
                let tmp%13#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%13#0)
                let tmp%14#0: uint64 = (btoi a#0)
                let tmp%15#0: bool = (== tmp%14#0 4u)
                (assert tmp%15#0) // a is 4
                let tmp%16#0: bool = (== b#0 0x00)
                goto tmp%16#0 ? block@1 : block@2
            block@1: // ternary_true_L39
                let ternary_result%0#0: bytes = b#0
                goto block@18
            block@2: // ternary_false_L39
                let tmp%17#0: bool = (== d#0 0x00)
                goto tmp%17#0 ? block@3 : block@4
            block@3: // ternary_true_L39
                let ternary_result%1#0: bytes = d#0
                goto block@17
            block@4: // ternary_false_L39
                let tmp%18#0: bool = (== e#0 0x00)
                goto tmp%18#0 ? block@5 : block@6
            block@5: // ternary_true_L39
                let ternary_result%2#0: bytes = e#0
                goto block@16
            block@6: // ternary_false_L39
                let tmp%19#0: bool = (== f#0 0x00)
                goto tmp%19#0 ? block@7 : block@8
            block@7: // ternary_true_L39
                let ternary_result%3#0: bytes = f#0
                goto block@15
            block@8: // ternary_false_L39
                let tmp%20#0: bool = (== g#0 0x00)
                goto tmp%20#0 ? block@9 : block@10
            block@9: // ternary_true_L39
                let ternary_result%4#0: bytes = g#0
                goto block@14
            block@10: // ternary_false_L39
                let tmp%21#0: bool = (== i#0 0x00)
                goto tmp%21#0 ? block@11 : block@12
            block@11: // ternary_true_L39
                let ternary_result%5#0: bytes = i#0
                goto block@13
            block@12: // ternary_false_L39
                let ternary_result%5#0: bytes = j#0
                goto block@13
            block@13: // ternary_merge_L39
                let ternary_result%4#0: bytes = ternary_result%5#0
                goto block@14
            block@14: // ternary_merge_L39
                let ternary_result%3#0: bytes = ternary_result%4#0
                goto block@15
            block@15: // ternary_merge_L39
                let ternary_result%2#0: bytes = ternary_result%3#0
                goto block@16
            block@16: // ternary_merge_L39
                let ternary_result%1#0: bytes = ternary_result%2#0
                goto block@17
            block@17: // ternary_merge_L39
                let ternary_result%0#0: bytes = ternary_result%1#0
                goto block@18
            block@18: // ternary_merge_L39
                let tmp%22#0: bool = (!= ternary_result%0#0 0x00)
                (assert tmp%22#0) // b,d,e,f,g,i,j are true
                let tmp%23#0: bool = (!= c#0 0x00)
                goto tmp%23#0 ? block@19 : block@20
            block@19: // ternary_true_L40
                let ternary_result%6#0: bytes = c#0
                goto block@21
            block@20: // ternary_false_L40
                let ternary_result%6#0: bytes = h#0
                goto block@21
            block@21: // ternary_merge_L40
                let tmp%24#0: bool = (== ternary_result%6#0 0x00)
                (assert tmp%24#0) // c and h are false
                let tmp%25#0: uint64 = (btoi k#0)
                let tmp%26#0: bool = (== tmp%25#0 16u)
                (assert tmp%26#0) // k is 16
                let item0%1#0: bytes = (extract3 boolean_packing#0 0u 1u)
                let is_true%16#0: uint64 = (getbit boolean_packing#0 8u)
                let item1%1#0: bytes = (setbit 0x00 0u is_true%16#0)
                let is_true%17#0: uint64 = (getbit boolean_packing#0 9u)
                let item2%1#0: bytes = (setbit 0x00 0u is_true%17#0)
                let is_true%18#0: uint64 = (getbit boolean_packing#0 10u)
                let item3%1#0: bytes = (setbit 0x00 0u is_true%18#0)
                let is_true%19#0: uint64 = (getbit boolean_packing#0 11u)
                let item4%1#0: bytes = (setbit 0x00 0u is_true%19#0)
                let is_true%20#0: uint64 = (getbit boolean_packing#0 12u)
                let item5%1#0: bytes = (setbit 0x00 0u is_true%20#0)
                let is_true%21#0: uint64 = (getbit boolean_packing#0 13u)
                let item6%1#0: bytes = (setbit 0x00 0u is_true%21#0)
                let is_true%22#0: uint64 = (getbit boolean_packing#0 14u)
                let item7%1#0: bytes = (setbit 0x00 0u is_true%22#0)
                let is_true%23#0: uint64 = (getbit boolean_packing#0 15u)
                let item8%1#0: bytes = (setbit 0x00 0u is_true%23#0)
                let is_true%24#0: uint64 = (getbit boolean_packing#0 16u)
                let item9%1#0: bytes = (setbit 0x00 0u is_true%24#0)
                let item10%1#0: bytes = (extract3 boolean_packing#0 3u 1u)
                let encoded_tuple_buffer%2#1: bytes = (concat 0x item0%1#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 item1%1#0)
                let is_true%25#0: uint64 = (getbit item2%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 9u is_true%25#0)
                let is_true%26#0: uint64 = (getbit item3%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 10u is_true%26#0)
                let is_true%27#0: uint64 = (getbit item4%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 11u is_true%27#0)
                let is_true%28#0: uint64 = (getbit item5%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 12u is_true%28#0)
                let is_true%29#0: uint64 = (getbit item6%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 13u is_true%29#0)
                let is_true%30#0: uint64 = (getbit item7%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 14u is_true%30#0)
                let is_true%31#0: uint64 = (getbit item8%1#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 15u is_true%31#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 item9%1#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 item10%1#0)
                let tmp%27#0: bool = (== boolean_packing#0 encoded_tuple_buffer%2#1)
                (assert tmp%27#0)
                let (tuple_assignment%0#0: uint64, tuple_assignment%1#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
                let total#0: uint64 = tuple_assignment%0#0
                let concat#0: bytes = tuple_assignment%1#0
                let tmp%28#0: bytes = ((extract 2 0) concat#0)
                let tmp%29#0: bool = (== tmp%28#0 "hello world")
                (assert tmp%29#0)
                let tmp%30#0: bool = (== total#0 258u)
                (assert tmp%30#0)
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L54
                let item0%0#0: bytes = (extract3 test_tuple#0 0u 1u)
                let item1%0#0: bytes = (extract3 test_tuple#0 1u 1u)
                let item_index%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_length%0#0: uint64 = (extract_uint16 test_tuple#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let item2%0#0: bytes = (extract3 test_tuple#0 item_index%0#0 item_length_plus_2%0#0)
                let item_index%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_length%1#0: uint64 = (extract_uint16 test_tuple#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let item3%0#0: bytes = (extract3 test_tuple#0 item_index%1#0 item_length_plus_2%1#0)
                let item4%0#0: bytes = (extract3 test_tuple#0 6u 1u)
                let a#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let c#0: bytes = item2%0#0
                let d#0: bytes = item3%0#0
                let e#0: bytes = item4%0#0
                let reinterpret_biguint%0#0: biguint = (extract3 test_tuple#0 0u 1u)
                let reinterpret_biguint%1#0: biguint = a#0
                let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%0#0)
                let reinterpret_biguint%2#0: biguint = (extract3 test_tuple#0 6u 1u)
                let reinterpret_biguint%3#0: biguint = e#0
                let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
                (assert tmp%1#0)
                let item_index%2#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_length%2#0: uint64 = (extract_uint16 test_tuple#0 item_index%2#0)
                let item_length_plus_2%2#0: uint64 = (+ item_length%2#0 2u)
                let tmp%2#0: bytes = (extract3 test_tuple#0 item_index%2#0 item_length_plus_2%2#0)
                let tmp%3#0: bool = (== tmp%2#0 d#0)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%11#0: bytes = (concat value_as_uint16%0#0 text#0)
                return total#0 tmp%11#0
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u