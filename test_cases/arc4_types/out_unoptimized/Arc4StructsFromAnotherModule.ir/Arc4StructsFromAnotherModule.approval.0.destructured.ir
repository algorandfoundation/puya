main test_cases.arc4_types.structs2.Arc4StructsFromAnotherModule.approval_program:
    block@0: // L7
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded%0#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%0#0)
        let get_bit%0#0: uint64 = (getbit as_Encoded(bool8)%1#0 0u)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded%0#0 1u get_bit%0#0)
        let get_bit%1#0: uint64 = (getbit as_Encoded(bool8)%2#0 0u)
        let set_bit%1#0: Encoded((bool1)) = (setbit set_bit%0#0 2u get_bit%1#0)
        let get_bit%2#0: uint64 = (getbit as_Encoded(bool8)%3#0 0u)
        let set_bit%2#0: Encoded((bool1)) = (setbit set_bit%1#0 3u get_bit%2#0)
        let encoded%1#0: Encoded((bool1,bool1,bool1,bool1)) = (concat set_bit%2#0 0x)
        let flags#0: Encoded((bool1,bool1,bool1,bool1)) = encoded%1#0
        (log flags#0)
        return 1u