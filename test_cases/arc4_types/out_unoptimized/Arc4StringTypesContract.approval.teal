#pragma version 10

test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    // arc4_types/string.py:8
    // some_bytes_as_string = arc4.String(String.from_bytes(HELLO_WORLD))
    pushbytes 0x48656c6c6f20576f726c6421
    len
    itob
    extract 6 2
    pushbytes 0x48656c6c6f20576f726c6421
    concat
    // arc4_types/string.py:10
    // some_bytes_as_bytes_again = some_bytes_as_string.native.bytes
    dig 0
    extract 2 0
    cover 1
    // arc4_types/string.py:13
    // some_bytes_as_string.bytes != HELLO_WORLD
    dig 0
    pushbytes 0x48656c6c6f20576f726c6421
    !=
    // arc4_types/string.py:12-14
    // assert (
    //     some_bytes_as_string.bytes != HELLO_WORLD
    // ), "Original bytes should not match encoded bytes"
    assert // Original bytes should not match encoded bytes
    // arc4_types/string.py:17
    // some_bytes_as_string.bytes[2:] == HELLO_WORLD
    dig 0
    len
    pushint 2 // 2
    dig 1
    >=
    pushint 2 // 2
    dig 2
    uncover 2
    select
    uncover 2
    uncover 1
    uncover 2
    substring3
    pushbytes 0x48656c6c6f20576f726c6421
    ==
    // arc4_types/string.py:16-18
    // assert (
    //     some_bytes_as_string.bytes[2:] == HELLO_WORLD
    // ), "Original bytes should match encoded if we strip the length header"
    assert // Original bytes should match encoded if we strip the length header
    // arc4_types/string.py:20
    // assert some_bytes_as_bytes_again == HELLO_WORLD
    pushbytes 0x48656c6c6f20576f726c6421
    ==
    assert
    // arc4_types/string.py:22
    // hello = arc4.String("Hello")
    pushbytes "Hello"
    len
    itob
    extract 6 2
    pushbytes "Hello"
    concat
    // arc4_types/string.py:23
    // space = arc4.String(" ")
    pushbytes " "
    len
    itob
    extract 6 2
    pushbytes " "
    concat
    // arc4_types/string.py:24
    // world = arc4.String("World!")
    pushbytes "World!"
    len
    itob
    extract 6 2
    pushbytes "World!"
    concat
    cover 1
    // arc4_types/string.py:26
    // assert arc4.String("Hello World!") == (hello + space + world)
    pushbytes "Hello World!"
    len
    itob
    extract 6 2
    pushbytes "Hello World!"
    concat
    cover 3
    uncover 2
    extract 2 0
    uncover 1
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    extract 2 0
    uncover 1
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    ==
    assert
    // arc4_types/string.py:28
    // thing = arc4.String("hi")
    pushbytes "hi"
    len
    itob
    extract 6 2
    pushbytes "hi"
    concat
    // arc4_types/string.py:29
    // thing += thing
    dig 0
    extract 2 0
    cover 1
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    // arc4_types/string.py:30
    // assert thing == arc4.String("hihi")
    pushbytes "hihi"
    len
    itob
    extract 6 2
    pushbytes "hihi"
    concat
    ==
    assert
    // arc4_types/string.py:32
    // value = arc4.String("a") + arc4.String("b") + "cd"
    pushbytes "a"
    len
    itob
    extract 6 2
    pushbytes "a"
    concat
    extract 2 0
    pushbytes "b"
    len
    itob
    extract 6 2
    pushbytes "b"
    concat
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    extract 2 0
    pushbytes "cd"
    len
    itob
    extract 6 2
    pushbytes "cd"
    concat
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    // arc4_types/string.py:33
    // value += "e"
    extract 2 0
    pushbytes "e"
    len
    itob
    extract 6 2
    pushbytes "e"
    concat
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    // arc4_types/string.py:34
    // value += arc4.String("f")
    extract 2 0
    pushbytes "f"
    len
    itob
    extract 6 2
    pushbytes "f"
    concat
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    // arc4_types/string.py:35
    // value += arc4.String("g")
    extract 2 0
    pushbytes "g"
    len
    itob
    extract 6 2
    pushbytes "g"
    concat
    extract 2 0
    concat
    dig 0
    len
    itob
    extract 6 2
    uncover 1
    concat
    // arc4_types/string.py:36
    // assert arc4.String("abcdefg") == value
    pushbytes "abcdefg"
    len
    itob
    extract 6 2
    pushbytes "abcdefg"
    concat
    uncover 1
    ==
    assert
    // arc4_types/string.py:38
    // assert arc4.String().native == ""
    pushbytes ""
    len
    itob
    extract 6 2
    pushbytes ""
    concat
    extract 2 0
    pushbytes ""
    ==
    assert
    // arc4_types/string.py:39
    // assert arc4.String("hello") == String("hello")
    pushbytes "hello"
    len
    itob
    extract 6 2
    pushbytes "hello"
    concat
    extract 2 0
    pushbytes "hello"
    ==
    assert
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    txn NumAppArgs
    pushint 0 // 0
    !=
    bz main_ternary_false@2
    pushbytes "aye"
    len
    itob
    extract 6 2
    pushbytes "aye"
    concat
    b main_ternary_merge@3

main_ternary_false@2:
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    pushbytes "bee"
    len
    itob
    extract 6 2
    pushbytes "bee"
    concat

main_ternary_merge@3:
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    pushbytes "bee"
    len
    itob
    extract 6 2
    pushbytes "bee"
    concat
    ==
    assert
    // arc4_types/string.py:42
    // return True
    pushint 1 // 1
    return
