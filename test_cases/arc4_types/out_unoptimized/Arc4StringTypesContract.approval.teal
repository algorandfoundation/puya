#pragma version 10

test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    bytecblock 0x48656c6c6f20576f726c6421 "\x00\x02hi" "\x00\x03bee"
    // arc4_types/string.py:8
    // some_bytes_as_string = arc4.String(String.from_bytes(HELLO_WORLD))
    bytec_0 // 0x48656c6c6f20576f726c6421
    len
    itob
    extract 6 2
    bytec_0 // 0x48656c6c6f20576f726c6421
    concat
    // arc4_types/string.py:10
    // some_bytes_as_bytes_again = some_bytes_as_string.native.bytes
    dup
    extract 2 0
    swap
    // arc4_types/string.py:13
    // some_bytes_as_string.bytes != HELLO_WORLD
    dup
    bytec_0 // 0x48656c6c6f20576f726c6421
    !=
    // arc4_types/string.py:12-14
    // assert (
    //     some_bytes_as_string.bytes != HELLO_WORLD
    // ), "Original bytes should not match encoded bytes"
    assert // Original bytes should not match encoded bytes
    // arc4_types/string.py:17
    // some_bytes_as_string.bytes[2:] == HELLO_WORLD
    dup
    len
    pushint 2 // 2
    dig 1
    >=
    pushint 2 // 2
    dig 2
    uncover 2
    select
    uncover 2
    swap
    uncover 2
    substring3
    bytec_0 // 0x48656c6c6f20576f726c6421
    ==
    // arc4_types/string.py:16-18
    // assert (
    //     some_bytes_as_string.bytes[2:] == HELLO_WORLD
    // ), "Original bytes should match encoded if we strip the length header"
    assert // Original bytes should match encoded if we strip the length header
    // arc4_types/string.py:20
    // assert some_bytes_as_bytes_again == HELLO_WORLD
    bytec_0 // 0x48656c6c6f20576f726c6421
    ==
    assert
    // arc4_types/string.py:22
    // hello = arc4.String("Hello")
    pushbytes "\x00\x05Hello"
    // arc4_types/string.py:26
    // assert arc4.String("Hello World!") == (hello + space + world)
    extract 2 0
    // arc4_types/string.py:23
    // space = arc4.String(" ")
    pushbytes "\x00\x01 "
    // arc4_types/string.py:26
    // assert arc4.String("Hello World!") == (hello + space + world)
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    extract 2 0
    // arc4_types/string.py:24
    // world = arc4.String("World!")
    pushbytes "\x00\x06World!"
    // arc4_types/string.py:26
    // assert arc4.String("Hello World!") == (hello + space + world)
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes "\x00\x0cHello World!"
    ==
    assert
    // arc4_types/string.py:28
    // thing = arc4.String("hi")
    bytec_1 // "\x00\x02hi"
    // arc4_types/string.py:29
    // thing += thing
    extract 2 0
    // arc4_types/string.py:28
    // thing = arc4.String("hi")
    bytec_1 // "\x00\x02hi"
    // arc4_types/string.py:29
    // thing += thing
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/string.py:30
    // assert thing == arc4.String("hihi")
    pushbytes "\x00\x04hihi"
    ==
    assert
    // arc4_types/string.py:32
    // value = arc4.String("a") + arc4.String("b") + "cd"
    pushbytes "\x00\x01a"
    extract 2 0
    pushbytes "\x00\x01b"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    extract 2 0
    pushbytes "\x00\x02cd"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/string.py:33
    // value += "e"
    extract 2 0
    pushbytes "\x00\x01e"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/string.py:34
    // value += arc4.String("f")
    extract 2 0
    pushbytes "\x00\x01f"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/string.py:35
    // value += arc4.String("g")
    extract 2 0
    pushbytes "\x00\x01g"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // arc4_types/string.py:36
    // assert arc4.String("abcdefg") == value
    pushbytes "\x00\x07abcdefg"
    ==
    assert
    // arc4_types/string.py:38
    // assert arc4.String().native == ""
    pushbytes "\x00\x00"
    extract 2 0
    pushbytes ""
    ==
    assert
    // arc4_types/string.py:39
    // assert arc4.String("hello") == String("hello")
    pushbytes "\x00\x05hello"
    extract 2 0
    pushbytes "hello"
    ==
    assert
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    txn NumAppArgs
    pushint 0 // 0
    !=
    bz main_ternary_false@2
    pushbytes "\x00\x03aye"
    b main_ternary_merge@3

main_ternary_false@2:
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    bytec_2 // "\x00\x03bee"

main_ternary_merge@3:
    // arc4_types/string.py:41
    // assert arc4.String("aye" if Txn.num_app_args else "bee") == "bee"
    bytec_2 // "\x00\x03bee"
    ==
    assert
    // arc4_types/string.py:42
    // return True
    pushint 1 // 1
    return
