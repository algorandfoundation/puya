#pragma version 10

test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    // arc4_types/string.py:9
    // some_bytes = Bytes(b"Hello World!")
    byte "Hello World!"
    dup
    swap
    // arc4_types/string.py:11
    // some_bytes_as_string = String.encode(some_bytes)
    dup
    len
    itob
    extract 6 2
    dig 1
    concat
    dup
    cover 2
    // arc4_types/string.py:13
    // some_bytes_as_bytes_again = some_bytes_as_string.decode()
    dup
    extract 2 0
    cover 2
    // arc4_types/string.py:16
    // some_bytes != some_bytes_as_string.bytes
    dup
    cover 2
    !=
    // arc4_types/string.py:15-17
    // assert (
    //     some_bytes != some_bytes_as_string.bytes
    // ), "Original bytes should not match encoded bytes"
    assert // Original bytes should not match encoded bytes
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    len
    dup
    swap
    int 2
    swap
    <
    bz main_ternary_false@2
    int 2
    b main_ternary_merge@3

main_ternary_false@2:
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    dup

main_ternary_merge@3:
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    dig 3
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dig 4
    dup
    cover 2
    swap
    ==
    // arc4_types/string.py:19-21
    // assert (
    //     some_bytes == some_bytes_as_string.bytes[2:]
    // ), "Original bytes should match encoded if we strip the length header"
    assert // Original bytes should match encoded if we strip the length header
    // arc4_types/string.py:23
    // assert some_bytes == some_bytes_as_bytes_again
    dig 2
    ==
    assert
    // arc4_types/string.py:25
    // hello = String("Hello")
    byte "\x00\x05Hello"
    // arc4_types/string.py:26
    // space = String(" ")
    byte "\x00\x01 "
    swap
    // arc4_types/string.py:27
    // world = String("World!")
    byte "\x00\x06World!"
    cover 2
    // arc4_types/string.py:29
    // assert String("Hello World!") == (hello + space + world)
    extract 2 0
    swap
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    extract 2 0
    swap
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    byte "\x00\x0cHello World!"
    swap
    ==
    assert
    // arc4_types/string.py:31
    // thing = String("hi")
    byte "\x00\x02hi"
    // arc4_types/string.py:32
    // thing += thing
    dup
    extract 2 0
    swap
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:33
    // assert thing == String("hihi")
    byte "\x00\x04hihi"
    ==
    assert
    // arc4_types/string.py:35
    // value = String("a") + Bytes(b"b") + b"c" + "d"
    byte "\x00\x01a"
    extract 2 0
    byte "\x00\x01b"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    extract 2 0
    byte "\x00\x01c"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    extract 2 0
    byte "\x00\x01d"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:36
    // value += "e"
    extract 2 0
    byte "\x00\x01e"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:37
    // value += b"f"
    extract 2 0
    byte "\x00\x01f"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:38
    // value += Bytes(b"g")
    extract 2 0
    byte "\x00\x01g"
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:39
    // assert String("abcdefg") == value
    byte "\x00\x07abcdefg"
    swap
    ==
    assert
    // arc4_types/string.py:40
    // return True
    int 1
    return
