contract test_cases.arc4_types.mutation.Arc4MutationContract:
    program approval:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.approval_program() -> bool:
            block@0: // L34
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
                test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
                return 1u
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
            block@0: // L143
                let array_data%0#1: bytes = (concat 0x0002 0x01)
                let array_data%0#1: bytes = (concat array_data%0#1 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#1
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let data%0#1: bytes = (concat 0x 0x32)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#1)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let dynamic_uint8_array#0: bytes = concat_result%0#0
                let array_data%1#1: bytes = (concat 0x0003 0x01)
                let array_data%1#1: bytes = (concat array_data%1#1 0x02)
                let array_data%1#1: bytes = (concat array_data%1#1 0x32)
                let tmp%0#0: bool = (== dynamic_uint8_array#0 array_data%1#1)
                (assert tmp%0#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let expr_value_trimmed%2#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 expr_value_trimmed%2#0)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let dynamic_uint8_array#0: bytes = concat_result%1#0
                let array_data%2#1: bytes = (concat 0x0006 0x01)
                let array_data%2#1: bytes = (concat array_data%2#1 0x02)
                let array_data%2#1: bytes = (concat array_data%2#1 0x32)
                let array_data%2#1: bytes = (concat array_data%2#1 0x01)
                let array_data%2#1: bytes = (concat array_data%2#1 0x02)
                let array_data%2#1: bytes = (concat array_data%2#1 0x32)
                let tmp%1#0: bool = (== dynamic_uint8_array#0 array_data%2#1)
                (assert tmp%1#0)
                let expr_value_trimmed%3#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let data%1#1: bytes = (concat 0x 0x04)
                let data%1#1: bytes = (concat data%1#1 0x5a)
                let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 data%1#1)
                let len_%2#0: uint64 = (len concatenated%2#0)
                let len_bytes%2#0: bytes = (itob len_%2#0)
                let len_16_bit%2#0: bytes = ((extract 6 0) len_bytes%2#0)
                let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
                let dynamic_uint8_array#0: bytes = concat_result%2#0
                let array_data%3#1: bytes = (concat 0x0008 0x01)
                let array_data%3#1: bytes = (concat array_data%3#1 0x02)
                let array_data%3#1: bytes = (concat array_data%3#1 0x32)
                let array_data%3#1: bytes = (concat array_data%3#1 0x01)
                let array_data%3#1: bytes = (concat array_data%3#1 0x02)
                let array_data%3#1: bytes = (concat array_data%3#1 0x32)
                let array_data%3#1: bytes = (concat array_data%3#1 0x04)
                let array_data%3#1: bytes = (concat array_data%3#1 0x5a)
                let tmp%2#0: bool = (== dynamic_uint8_array#0 array_data%3#1)
                (assert tmp%2#0)
                let (popped%0#1: bytes, data%2#1: bytes) = algopy_lib_arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#0, 1u)
                let dynamic_uint8_array#0: bytes = data%2#1
                let popped#0: bytes = popped%0#1
                let reinterpret_biguint%0#0: biguint = popped#0
                let tmp%3#0: bool = (b== reinterpret_biguint%0#0 0x5a)
                (assert tmp%3#0)
                let array_data%4#1: bytes = (concat 0x0007 0x01)
                let array_data%4#1: bytes = (concat array_data%4#1 0x02)
                let array_data%4#1: bytes = (concat array_data%4#1 0x32)
                let array_data%4#1: bytes = (concat array_data%4#1 0x01)
                let array_data%4#1: bytes = (concat array_data%4#1 0x02)
                let array_data%4#1: bytes = (concat array_data%4#1 0x32)
                let array_data%4#1: bytes = (concat array_data%4#1 0x04)
                let tmp%4#0: bool = (== dynamic_uint8_array#0 array_data%4#1)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
            block@0: // L166
                let tmp%0#0: bytes = (setbit 0x00 0u 1u)
                let tmp%1#0: bytes = (setbit 0x00 0u 0u)
                let array_data%0#1: bytes = (concat 0x0002 tmp%0#0)
                let is_true%0#0: uint64 = (getbit tmp%1#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 17u is_true%0#0)
                let dynamic_bool_array#0: bytes = array_data%0#1
                let tmp%2#0: bool = (== dynamic_bool_array#0 0x000280)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (setbit 0x00 0u 1u)
                let tmp%4#0: bytes = (setbit 0x00 0u 0u)
                let data%0#1: bytes = (concat 0x tmp%3#0)
                let data%0#1: bytes = (concat data%0#1 tmp%4#0)
                let concat_result%0#0: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%0#1, 2u, 0u)
                let dynamic_bool_array#0: bytes = concat_result%0#0
                let tmp%5#0: bool = (== dynamic_bool_array#0 0x0004a0)
                (assert tmp%5#0)
                let tmp%6#0: bytes = (setbit 0x00 0u 1u)
                let tmp%7#0: bytes = (setbit 0x00 0u 0u)
                let tmp%8#0: bytes = (setbit 0x00 0u 1u)
                let tmp%9#0: bytes = (setbit 0x00 0u 0u)
                let array_data%1#1: bytes = (concat 0x0004 tmp%6#0)
                let is_true%1#0: uint64 = (getbit tmp%7#0 0u)
                let array_data%1#1: bytes = (setbit array_data%1#1 17u is_true%1#0)
                let is_true%2#0: uint64 = (getbit tmp%8#0 0u)
                let array_data%1#1: bytes = (setbit array_data%1#1 18u is_true%2#0)
                let is_true%3#0: uint64 = (getbit tmp%9#0 0u)
                let array_data%1#1: bytes = (setbit array_data%1#1 19u is_true%3#0)
                let tmp%10#0: bool = (== dynamic_bool_array#0 array_data%1#1)
                (assert tmp%10#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
                let data%1#0: bytes = ((extract 2 0) dynamic_bool_array#0)
                let concat_result%1#0: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%1#0, array_length%0#0, 1u)
                let dynamic_bool_array#0: bytes = concat_result%1#0
                let tmp%11#0: bytes = (setbit 0x00 0u 1u)
                let tmp%12#0: bytes = (setbit 0x00 0u 0u)
                let tmp%13#0: bytes = (setbit 0x00 0u 1u)
                let tmp%14#0: bytes = (setbit 0x00 0u 0u)
                let tmp%15#0: bytes = (setbit 0x00 0u 1u)
                let tmp%16#0: bytes = (setbit 0x00 0u 0u)
                let tmp%17#0: bytes = (setbit 0x00 0u 1u)
                let tmp%18#0: bytes = (setbit 0x00 0u 0u)
                let array_data%2#1: bytes = (concat 0x0008 tmp%11#0)
                let is_true%4#0: uint64 = (getbit tmp%12#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 17u is_true%4#0)
                let is_true%5#0: uint64 = (getbit tmp%13#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 18u is_true%5#0)
                let is_true%6#0: uint64 = (getbit tmp%14#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 19u is_true%6#0)
                let is_true%7#0: uint64 = (getbit tmp%15#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 20u is_true%7#0)
                let is_true%8#0: uint64 = (getbit tmp%16#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 21u is_true%8#0)
                let is_true%9#0: uint64 = (getbit tmp%17#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 22u is_true%9#0)
                let is_true%10#0: uint64 = (getbit tmp%18#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 23u is_true%10#0)
                let tmp%19#0: bool = (== dynamic_bool_array#0 array_data%2#1)
                (assert tmp%19#0)
                let tmp%20#0: bytes = (setbit 0x00 0u 1u)
                let data%2#1: bytes = (concat 0x tmp%20#0)
                let concat_result%2#0: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%2#1, 1u, 0u)
                let dynamic_bool_array#0: bytes = concat_result%2#0
                let tmp%21#0: bytes = (setbit 0x00 0u 1u)
                let tmp%22#0: bytes = (setbit 0x00 0u 0u)
                let tmp%23#0: bytes = (setbit 0x00 0u 1u)
                let tmp%24#0: bytes = (setbit 0x00 0u 0u)
                let tmp%25#0: bytes = (setbit 0x00 0u 1u)
                let tmp%26#0: bytes = (setbit 0x00 0u 0u)
                let tmp%27#0: bytes = (setbit 0x00 0u 1u)
                let tmp%28#0: bytes = (setbit 0x00 0u 0u)
                let tmp%29#0: bytes = (setbit 0x00 0u 1u)
                let array_data%3#1: bytes = (concat 0x0009 tmp%21#0)
                let is_true%11#0: uint64 = (getbit tmp%22#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 17u is_true%11#0)
                let is_true%12#0: uint64 = (getbit tmp%23#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 18u is_true%12#0)
                let is_true%13#0: uint64 = (getbit tmp%24#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 19u is_true%13#0)
                let is_true%14#0: uint64 = (getbit tmp%25#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 20u is_true%14#0)
                let is_true%15#0: uint64 = (getbit tmp%26#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 21u is_true%15#0)
                let is_true%16#0: uint64 = (getbit tmp%27#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 22u is_true%16#0)
                let is_true%17#0: uint64 = (getbit tmp%28#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 23u is_true%17#0)
                let array_data%3#1: bytes = (concat array_data%3#1 tmp%29#0)
                let tmp%30#0: bool = (== dynamic_bool_array#0 array_data%3#1)
                (assert tmp%30#0)
                let (popped%0#1: bytes, data%3#1: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
                let dynamic_bool_array#0: bytes = data%3#1
                let tmp%31#0: bytes = (setbit 0x00 0u 1u)
                let tmp%32#0: bool = (== popped%0#1 tmp%31#0)
                (assert tmp%32#0)
                let (popped%1#1: bytes, data%4#1: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
                let dynamic_bool_array#0: bytes = data%4#1
                let tmp%33#0: bytes = (setbit 0x00 0u 0u)
                let tmp%34#0: bool = (== popped%1#1 tmp%33#0)
                (assert tmp%34#0)
                let tmp%35#0: bytes = (setbit 0x00 0u 1u)
                let tmp%36#0: bytes = (setbit 0x00 0u 0u)
                let tmp%37#0: bytes = (setbit 0x00 0u 1u)
                let tmp%38#0: bytes = (setbit 0x00 0u 0u)
                let tmp%39#0: bytes = (setbit 0x00 0u 1u)
                let tmp%40#0: bytes = (setbit 0x00 0u 0u)
                let tmp%41#0: bytes = (setbit 0x00 0u 1u)
                let array_data%4#1: bytes = (concat 0x0007 tmp%35#0)
                let is_true%18#0: uint64 = (getbit tmp%36#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 17u is_true%18#0)
                let is_true%19#0: uint64 = (getbit tmp%37#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 18u is_true%19#0)
                let is_true%20#0: uint64 = (getbit tmp%38#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 19u is_true%20#0)
                let is_true%21#0: uint64 = (getbit tmp%39#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 20u is_true%21#0)
                let is_true%22#0: uint64 = (getbit tmp%40#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 21u is_true%22#0)
                let is_true%23#0: uint64 = (getbit tmp%41#0 0u)
                let array_data%4#1: bytes = (setbit array_data%4#1 22u is_true%23#0)
                let tmp%42#0: bool = (== dynamic_bool_array#0 array_data%4#1)
                (assert tmp%42#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
            block@0: // L213
                let length%0#0: uint64 = (len "Hello")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let hello#0: bytes = (concat value_as_uint16%0#0 "Hello")
                let length%1#0: uint64 = (len "World")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let world#0: bytes = (concat value_as_uint16%1#0 "World")
                let length%2#0: uint64 = (len "Foo")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let foo#0: bytes = (concat value_as_uint16%2#0 "Foo")
                let length%3#0: uint64 = (len "Bar")
                let value_as_bytes%3#0: bytes = (itob length%3#0)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let bar#0: bytes = (concat value_as_uint16%3#0 "Bar")
                let value_as_bytes%4#0: bytes = (itob 4u)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let array_data%0#1: bytes = (concat 0x0002 value_as_uint16%4#0)
                let element_length%0#0: uint64 = (len hello#0)
                let next_offset%0#1: uint64 = (+ 4u element_length%0#0)
                let value_as_bytes%5#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let array_data%0#1: bytes = (concat array_data%0#1 value_as_uint16%5#0)
                let array_data%0#1: bytes = (concat array_data%0#1 hello#0)
                let array_data%0#1: bytes = (concat array_data%0#1 world#0)
                let dynamic_string_array#0: bytes = array_data%0#1
                let tmp%0#0: bool = (== dynamic_string_array#0 0x00020004000b000548656c6c6f0005576f726c64)
                (assert tmp%0#0)
                let data%0#1: bytes = (concat 0x foo#0)
                let data%0#1: bytes = (concat data%0#1 bar#0)
                let concat_result%0#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#0, data%0#1, 2u)
                let dynamic_string_array#0: bytes = concat_result%0#0
                let tmp%1#0: bool = (== dynamic_string_array#0 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
                (assert tmp%1#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let start_of_data%0#0: uint64 = (* array_length%0#0 2u)
                let start_of_data%0#0: uint64 = (+ start_of_data%0#0 2u)
                let total_length%0#0: uint64 = (len dynamic_string_array#0)
                let data%1#0: bytes = (substring3 dynamic_string_array#0 start_of_data%0#0 total_length%0#0)
                let concat_result%1#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#0, data%1#0, array_length%0#0)
                let dynamic_string_array#0: bytes = concat_result%1#0
                let value_as_bytes%6#0: bytes = (itob 16u)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let array_data%1#1: bytes = (concat 0x0008 value_as_uint16%6#0)
                let element_length%2#0: uint64 = (len hello#0)
                let next_offset%1#1: uint64 = (+ 16u element_length%2#0)
                let value_as_bytes%7#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%7#0)
                let element_length%3#0: uint64 = (len world#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%3#0)
                let value_as_bytes%8#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%8#0)
                let element_length%4#0: uint64 = (len foo#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%4#0)
                let value_as_bytes%9#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%9#0: bytes = ((extract 6 2) value_as_bytes%9#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%9#0)
                let element_length%5#0: uint64 = (len bar#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%5#0)
                let value_as_bytes%10#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%10#0: bytes = ((extract 6 2) value_as_bytes%10#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%10#0)
                let element_length%6#0: uint64 = (len hello#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%6#0)
                let value_as_bytes%11#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%11#0: bytes = ((extract 6 2) value_as_bytes%11#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%11#0)
                let element_length%7#0: uint64 = (len world#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%7#0)
                let value_as_bytes%12#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%12#0: bytes = ((extract 6 2) value_as_bytes%12#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%12#0)
                let element_length%8#0: uint64 = (len foo#0)
                let next_offset%1#1: uint64 = (+ next_offset%1#1 element_length%8#0)
                let value_as_bytes%13#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%13#0: bytes = ((extract 6 2) value_as_bytes%13#0)
                let array_data%1#1: bytes = (concat array_data%1#1 value_as_uint16%13#0)
                let array_data%1#1: bytes = (concat array_data%1#1 hello#0)
                let array_data%1#1: bytes = (concat array_data%1#1 world#0)
                let array_data%1#1: bytes = (concat array_data%1#1 foo#0)
                let array_data%1#1: bytes = (concat array_data%1#1 bar#0)
                let array_data%1#1: bytes = (concat array_data%1#1 hello#0)
                let array_data%1#1: bytes = (concat array_data%1#1 world#0)
                let array_data%1#1: bytes = (concat array_data%1#1 foo#0)
                let array_data%1#1: bytes = (concat array_data%1#1 bar#0)
                let tmp%2#0: bool = (== dynamic_string_array#0 array_data%1#1)
                (assert tmp%2#0)
                let value_as_bytes%14#0: bytes = (itob 16u)
                let value_as_uint16%14#0: bytes = ((extract 6 2) value_as_bytes%14#0)
                let array_data%2#1: bytes = (concat 0x0008 value_as_uint16%14#0)
                let element_length%10#0: uint64 = (len hello#0)
                let next_offset%2#1: uint64 = (+ 16u element_length%10#0)
                let value_as_bytes%15#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%15#0: bytes = ((extract 6 2) value_as_bytes%15#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%15#0)
                let element_length%11#0: uint64 = (len world#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%11#0)
                let value_as_bytes%16#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%16#0: bytes = ((extract 6 2) value_as_bytes%16#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%16#0)
                let element_length%12#0: uint64 = (len foo#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%12#0)
                let value_as_bytes%17#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%17#0: bytes = ((extract 6 2) value_as_bytes%17#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%17#0)
                let element_length%13#0: uint64 = (len bar#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%13#0)
                let value_as_bytes%18#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%18#0: bytes = ((extract 6 2) value_as_bytes%18#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%18#0)
                let element_length%14#0: uint64 = (len hello#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%14#0)
                let value_as_bytes%19#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%19#0: bytes = ((extract 6 2) value_as_bytes%19#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%19#0)
                let element_length%15#0: uint64 = (len world#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%15#0)
                let value_as_bytes%20#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%20#0: bytes = ((extract 6 2) value_as_bytes%20#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%20#0)
                let element_length%16#0: uint64 = (len foo#0)
                let next_offset%2#1: uint64 = (+ next_offset%2#1 element_length%16#0)
                let value_as_bytes%21#0: bytes = (itob next_offset%2#1)
                let value_as_uint16%21#0: bytes = ((extract 6 2) value_as_bytes%21#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%21#0)
                let array_data%2#1: bytes = (concat array_data%2#1 hello#0)
                let array_data%2#1: bytes = (concat array_data%2#1 world#0)
                let array_data%2#1: bytes = (concat array_data%2#1 foo#0)
                let array_data%2#1: bytes = (concat array_data%2#1 bar#0)
                let array_data%2#1: bytes = (concat array_data%2#1 hello#0)
                let array_data%2#1: bytes = (concat array_data%2#1 world#0)
                let array_data%2#1: bytes = (concat array_data%2#1 foo#0)
                let array_data%2#1: bytes = (concat array_data%2#1 bar#0)
                let dynamic_string_array#0: bytes = array_data%2#1
                let assigned_value%0#0: bytes = hello#0
                let updated_value%0#0: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#0, assigned_value%0#0, 3u)
                let dynamic_string_array#0: bytes = updated_value%0#0
                let assigned_value%1#0: bytes = hello#0
                let updated_value%1#0: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#0, assigned_value%1#0, 5u)
                let dynamic_string_array#0: bytes = updated_value%1#0
                let value_as_bytes%22#0: bytes = (itob 16u)
                let value_as_uint16%22#0: bytes = ((extract 6 2) value_as_bytes%22#0)
                let array_data%3#1: bytes = (concat 0x0008 value_as_uint16%22#0)
                let element_length%18#0: uint64 = (len hello#0)
                let next_offset%3#1: uint64 = (+ 16u element_length%18#0)
                let value_as_bytes%23#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%23#0: bytes = ((extract 6 2) value_as_bytes%23#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%23#0)
                let element_length%19#0: uint64 = (len world#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%19#0)
                let value_as_bytes%24#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%24#0: bytes = ((extract 6 2) value_as_bytes%24#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%24#0)
                let element_length%20#0: uint64 = (len foo#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%20#0)
                let value_as_bytes%25#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%25#0: bytes = ((extract 6 2) value_as_bytes%25#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%25#0)
                let element_length%21#0: uint64 = (len hello#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%21#0)
                let value_as_bytes%26#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%26#0: bytes = ((extract 6 2) value_as_bytes%26#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%26#0)
                let element_length%22#0: uint64 = (len hello#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%22#0)
                let value_as_bytes%27#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%27#0: bytes = ((extract 6 2) value_as_bytes%27#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%27#0)
                let element_length%23#0: uint64 = (len hello#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%23#0)
                let value_as_bytes%28#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%28#0: bytes = ((extract 6 2) value_as_bytes%28#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%28#0)
                let element_length%24#0: uint64 = (len foo#0)
                let next_offset%3#1: uint64 = (+ next_offset%3#1 element_length%24#0)
                let value_as_bytes%29#0: bytes = (itob next_offset%3#1)
                let value_as_uint16%29#0: bytes = ((extract 6 2) value_as_bytes%29#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%29#0)
                let array_data%3#1: bytes = (concat array_data%3#1 hello#0)
                let array_data%3#1: bytes = (concat array_data%3#1 world#0)
                let array_data%3#1: bytes = (concat array_data%3#1 foo#0)
                let array_data%3#1: bytes = (concat array_data%3#1 hello#0)
                let array_data%3#1: bytes = (concat array_data%3#1 hello#0)
                let array_data%3#1: bytes = (concat array_data%3#1 hello#0)
                let array_data%3#1: bytes = (concat array_data%3#1 foo#0)
                let array_data%3#1: bytes = (concat array_data%3#1 bar#0)
                let tmp%3#0: bool = (== dynamic_string_array#0 array_data%3#1)
                (assert tmp%3#0)
                let (popped%0#1: bytes, data%2#1: bytes) = algopy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#0)
                let dynamic_string_array#0: bytes = data%2#1
                let tmp%4#0: bool = (== popped%0#1 bar#0)
                (assert tmp%4#0)
                let (popped%1#1: bytes, data%3#1: bytes) = algopy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#0)
                let dynamic_string_array#0: bytes = data%3#1
                let tmp%5#0: bool = (== popped%1#1 foo#0)
                (assert tmp%5#0)
                let value_as_bytes%30#0: bytes = (itob 12u)
                let value_as_uint16%30#0: bytes = ((extract 6 2) value_as_bytes%30#0)
                let array_data%4#1: bytes = (concat 0x0006 value_as_uint16%30#0)
                let element_length%26#0: uint64 = (len hello#0)
                let next_offset%4#1: uint64 = (+ 12u element_length%26#0)
                let value_as_bytes%31#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%31#0: bytes = ((extract 6 2) value_as_bytes%31#0)
                let array_data%4#1: bytes = (concat array_data%4#1 value_as_uint16%31#0)
                let element_length%27#0: uint64 = (len world#0)
                let next_offset%4#1: uint64 = (+ next_offset%4#1 element_length%27#0)
                let value_as_bytes%32#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%32#0: bytes = ((extract 6 2) value_as_bytes%32#0)
                let array_data%4#1: bytes = (concat array_data%4#1 value_as_uint16%32#0)
                let element_length%28#0: uint64 = (len foo#0)
                let next_offset%4#1: uint64 = (+ next_offset%4#1 element_length%28#0)
                let value_as_bytes%33#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%33#0: bytes = ((extract 6 2) value_as_bytes%33#0)
                let array_data%4#1: bytes = (concat array_data%4#1 value_as_uint16%33#0)
                let element_length%29#0: uint64 = (len hello#0)
                let next_offset%4#1: uint64 = (+ next_offset%4#1 element_length%29#0)
                let value_as_bytes%34#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%34#0: bytes = ((extract 6 2) value_as_bytes%34#0)
                let array_data%4#1: bytes = (concat array_data%4#1 value_as_uint16%34#0)
                let element_length%30#0: uint64 = (len hello#0)
                let next_offset%4#1: uint64 = (+ next_offset%4#1 element_length%30#0)
                let value_as_bytes%35#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%35#0: bytes = ((extract 6 2) value_as_bytes%35#0)
                let array_data%4#1: bytes = (concat array_data%4#1 value_as_uint16%35#0)
                let array_data%4#1: bytes = (concat array_data%4#1 hello#0)
                let array_data%4#1: bytes = (concat array_data%4#1 world#0)
                let array_data%4#1: bytes = (concat array_data%4#1 foo#0)
                let array_data%4#1: bytes = (concat array_data%4#1 hello#0)
                let array_data%4#1: bytes = (concat array_data%4#1 hello#0)
                let array_data%4#1: bytes = (concat array_data%4#1 hello#0)
                let tmp%6#0: bool = (== dynamic_string_array#0 array_data%4#1)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
            block@0: // L70
                let tmp%0#0: bool = (== 0x0000 0x0000)
                (assert tmp%0#0)
                let array_data%0#1: bytes = (concat 0x0001 0x0a)
                let data%0#1: bytes = (concat 0x array_data%0#1)
                let concat_result%0#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(0x0000, data%0#1, 1u)
                let array_of_array#1: bytes = concat_result%0#0
                let tmp%1#0: bool = (== array_of_array#1 0x0001000200010a)
                (assert tmp%1#0)
                let array_data%1#1: bytes = (concat 0x0001 0x10)
                let data%1#1: bytes = (concat 0x array_data%1#1)
                let concat_result%1#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(array_of_array#1, data%1#1, 1u)
                let array_of_array#1: bytes = concat_result%1#0
                let tmp%2#0: bool = (== array_of_array#1 0x00020004000700010a000110)
                (assert tmp%2#0)
                let array_length%0#0: uint64 = (extract_uint16 array_of_array#1 0u)
                let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let array_data_sans_header%0#0: bytes = ((extract 2 0) array_of_array#1)
                let item_index_index%0#0: uint64 = (* 0u 2u)
                let item_index%0#0: uint64 = (extract_uint16 array_data_sans_header%0#0 item_index_index%0#0)
                let item_length%0#0: uint64 = (extract_uint16 array_data_sans_header%0#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%3#0: bytes = (extract3 array_data_sans_header%0#0 item_index%0#0 item_length_plus_2%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%3#0)
                let data%2#1: bytes = (concat 0x 0xff)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%2#1)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%2#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let assigned_value%0#0: bytes = concat_result%2#0
                let updated_value%0#0: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#1, assigned_value%0#0, 0u)
                let array_of_array#1: bytes = updated_value%0#0
                let tmp%4#0: bool = (== array_of_array#1 0x00020004000800020aff000110)
                (assert tmp%4#0)
                let array_length%1#0: uint64 = (extract_uint16 array_of_array#1 0u)
                let index_is_in_bounds%1#0: bool = (< 0u array_length%1#0)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let array_data_sans_header%1#0: bytes = ((extract 2 0) array_of_array#1)
                let item_index_index%1#0: uint64 = (* 0u 2u)
                let item_index%1#0: uint64 = (extract_uint16 array_data_sans_header%1#0 item_index_index%1#0)
                let item_length%1#0: uint64 = (extract_uint16 array_data_sans_header%1#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let tmp%5#0: bytes = (extract3 array_data_sans_header%1#0 item_index%1#0 item_length_plus_2%1#0)
                let array_length%2#0: uint64 = (extract_uint16 tmp%5#0 0u)
                let index_is_in_bounds%2#0: bool = (< 1u array_length%2#0)
                (assert index_is_in_bounds%2#0) // Index access is out of bounds
                let updated_target%0#0: bytes = (replace3 tmp%5#0 3u 0x00)
                let assigned_value%2#0: bytes = updated_target%0#0
                let updated_value%1#0: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#1, assigned_value%2#0, 0u)
                let array_of_array#1: bytes = updated_value%1#0
                let tmp%6#0: bool = (== array_of_array#1 0x00020004000800020a00000110)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
            block@0: // L85
                let array_data%0#1: bytes = (concat 0x 0x0a)
                let array_data%0#1: bytes = (concat array_data%0#1 0x09)
                let array_data%1#1: bytes = (concat 0x 0x40)
                let array_data%1#1: bytes = (concat array_data%1#1 0x80)
                let array_data%2#1: bytes = (concat 0x array_data%0#1)
                let array_data%2#1: bytes = (concat array_data%2#1 array_data%1#1)
                let array_of_array#0: bytes = array_data%2#1
                let tmp%0#0: bool = (== array_of_array#0 0x0a094080)
                (assert tmp%0#0)
                let array_data%3#1: bytes = (concat 0x 0xff)
                let array_data%3#1: bytes = (concat array_data%3#1 0xfe)
                let assigned_value%0#0: bytes = array_data%3#1
                let updated_target%0#0: bytes = (replace3 array_of_array#0 0u assigned_value%0#0)
                let array_of_array#0: bytes = updated_target%0#0
                let tmp%1#0: bool = (== array_of_array#0 0xfffe4080)
                (assert tmp%1#0)
                let item_index%0#0: uint64 = (* 1u 2u)
                let tmp%2#0: bytes = (extract3 array_of_array#0 item_index%0#0 2u)
                let updated_target%1#0: bytes = (replace3 tmp%2#0 0u 0x01)
                let assigned_value%2#0: bytes = updated_target%1#0
                let updated_target%2#0: bytes = (replace3 array_of_array#0 2u assigned_value%2#0)
                let array_of_array#0: bytes = updated_target%2#0
                let tmp%3#0: bool = (== array_of_array#0 0xfffe0180)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
            block@0: // L100
                let array_data%0#1: bytes = (concat 0x0002 0x01)
                let array_data%0#1: bytes = (concat array_data%0#1 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#1
                let array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
                let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let updated_target%0#0: bytes = (replace3 dynamic_uint8_array#0 2u 0xff)
                let dynamic_uint8_array#0: bytes = updated_target%0#0
                let tmp%0#0: bool = (== dynamic_uint8_array#0 0x0002ff02)
                (assert tmp%0#0)
                let array_data%1#1: bytes = (concat 0x 0x01)
                let array_data%1#1: bytes = (concat array_data%1#1 0x02)
                let static_uint8_array#0: bytes = array_data%1#1
                let updated_target%1#0: bytes = (replace3 static_uint8_array#0 1u 0xff)
                let static_uint8_array#0: bytes = updated_target%1#0
                let tmp%1#0: bool = (== static_uint8_array#0 0x01ff)
                (assert tmp%1#0)
                let tmp%2#0: bytes = (setbit 0x00 0u 1u)
                let tmp%3#0: bytes = (setbit 0x00 0u 0u)
                let array_data%2#1: bytes = (concat 0x0002 tmp%2#0)
                let is_true%0#0: uint64 = (getbit tmp%3#0 0u)
                let array_data%2#1: bytes = (setbit array_data%2#1 17u is_true%0#0)
                let dynamic_bool_array#0: bytes = array_data%2#1
                let assigned_value%2#0: bytes = (setbit 0x00 0u 0u)
                let array_length%1#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
                let index_is_in_bounds%1#0: bool = (< 0u array_length%1#0)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let is_true%1#0: uint64 = (getbit assigned_value%2#0 0u)
                let updated_target%2#0: bytes = (setbit dynamic_bool_array#0 16u is_true%1#0)
                let dynamic_bool_array#0: bytes = updated_target%2#0
                let tmp%4#0: bool = (== dynamic_bool_array#0 0x000200)
                (assert tmp%4#0)
                let tmp%5#0: bytes = (setbit 0x00 0u 1u)
                let tmp%6#0: bytes = (setbit 0x00 0u 1u)
                let array_data%3#1: bytes = (concat 0x tmp%5#0)
                let is_true%2#0: uint64 = (getbit tmp%6#0 0u)
                let array_data%3#1: bytes = (setbit array_data%3#1 1u is_true%2#0)
                let static_bool_array#0: bytes = array_data%3#1
                let assigned_value%3#0: bytes = (setbit 0x00 0u 0u)
                let is_true%3#0: uint64 = (getbit assigned_value%3#0 0u)
                let updated_target%3#0: bytes = (setbit static_bool_array#0 1u is_true%3#0)
                let static_bool_array#0: bytes = updated_target%3#0
                let tmp%7#0: bool = (== static_bool_array#0 0x80)
                (assert tmp%7#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
            block@0: // L116
                let tmp%0#0: bytes = (setbit 0x00 0u 1u)
                let length%0#0: uint64 = (len "Happy")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%1#0: bytes = (concat value_as_uint16%0#0 "Happy")
                let length%1#0: uint64 = (len "Days")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%2#0: bytes = (concat value_as_uint16%1#0 "Days")
                let encoded_tuple_buffer%0#1: bytes = (concat 0x tmp%0#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0x32)
                let value_as_bytes%2#0: bytes = (itob 6u)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 value_as_uint16%2#0)
                let data_length%0#0: uint64 = (len tmp%1#0)
                let current_tail_offset%0#1: uint64 = (+ 6u data_length%0#0)
                let value_as_bytes%3#0: bytes = (itob current_tail_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 value_as_uint16%3#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 tmp%1#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 tmp%2#0)
                let test_struct#0: bytes = encoded_tuple_buffer%0#1
                let assigned_value%0#0: bytes = (setbit 0x00 0u 0u)
                let is_true%0#0: uint64 = (getbit assigned_value%0#0 0u)
                let updated_data%0#0: bytes = (setbit test_struct#0 0u is_true%0#0)
                let test_struct#0: bytes = updated_data%0#0
                let updated_data%1#0: bytes = ((replace2 1) test_struct#0 0x0c)
                let test_struct#0: bytes = updated_data%1#0
                let tmp%3#0: bytes = (setbit 0x00 0u 0u)
                let length%2#0: uint64 = (len "Happy")
                let value_as_bytes%4#0: bytes = (itob length%2#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%4#0: bytes = (concat value_as_uint16%4#0 "Happy")
                let length%3#0: uint64 = (len "Days")
                let value_as_bytes%5#0: bytes = (itob length%3#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let tmp%5#0: bytes = (concat value_as_uint16%5#0 "Days")
                let encoded_tuple_buffer%1#1: bytes = (concat 0x tmp%3#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x0c)
                let value_as_bytes%6#0: bytes = (itob 6u)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 value_as_uint16%6#0)
                let data_length%2#0: uint64 = (len tmp%4#0)
                let current_tail_offset%1#1: uint64 = (+ 6u data_length%2#0)
                let value_as_bytes%7#0: bytes = (itob current_tail_offset%1#1)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 value_as_uint16%7#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 tmp%4#0)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 tmp%5#0)
                let tmp%6#0: bool = (== test_struct#0 encoded_tuple_buffer%1#1)
                (assert tmp%6#0)
                let length%4#0: uint64 = (len "Hmmmm")
                let value_as_bytes%8#0: bytes = (itob length%4#0)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let assigned_value%2#0: bytes = (concat value_as_uint16%8#0 "Hmmmm")
                let item_offset%0#0: uint64 = (extract_uint16 test_struct#0 2u)
                let data_up_to_item%0#0: bytes = (extract3 test_struct#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 test_struct#0 4u)
                let total_data_length%0#0: uint64 = (len test_struct#0)
                let data_beyond_item%0#0: bytes = (substring3 test_struct#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%2#0: bytes = (concat data_up_to_item%0#0 assigned_value%2#0)
                let updated_data%2#0: bytes = (concat updated_data%2#0 data_beyond_item%0#0)
                let new_value_length%0#0: uint64 = (len assigned_value%2#0)
                let tail_cursor%0#0: uint64 = (+ item_offset%0#0 new_value_length%0#0)
                let updated_header_bytes%0#0: bytes = (itob tail_cursor%0#0)
                let updated_header_bytes%0#0: bytes = ((substring 6 8) updated_header_bytes%0#0)
                let updated_data%2#0: bytes = ((replace2 4) updated_data%2#0 updated_header_bytes%0#0)
                let test_struct#0: bytes = updated_data%2#0
                let length%5#0: uint64 = (len "Oh well")
                let value_as_bytes%9#0: bytes = (itob length%5#0)
                let value_as_uint16%9#0: bytes = ((extract 6 2) value_as_bytes%9#0)
                let assigned_value%3#0: bytes = (concat value_as_uint16%9#0 "Oh well")
                let item_offset%1#0: uint64 = (extract_uint16 test_struct#0 4u)
                let data_up_to_item%1#0: bytes = (extract3 test_struct#0 0u item_offset%1#0)
                let updated_data%3#0: bytes = (concat data_up_to_item%1#0 assigned_value%3#0)
                let test_struct#0: bytes = updated_data%3#0
                let tmp%7#0: bytes = (setbit 0x00 0u 0u)
                let length%6#0: uint64 = (len "Hmmmm")
                let value_as_bytes%10#0: bytes = (itob length%6#0)
                let value_as_uint16%10#0: bytes = ((extract 6 2) value_as_bytes%10#0)
                let tmp%8#0: bytes = (concat value_as_uint16%10#0 "Hmmmm")
                let length%7#0: uint64 = (len "Oh well")
                let value_as_bytes%11#0: bytes = (itob length%7#0)
                let value_as_uint16%11#0: bytes = ((extract 6 2) value_as_bytes%11#0)
                let tmp%9#0: bytes = (concat value_as_uint16%11#0 "Oh well")
                let encoded_tuple_buffer%2#1: bytes = (concat 0x tmp%7#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 0x0c)
                let value_as_bytes%12#0: bytes = (itob 6u)
                let value_as_uint16%12#0: bytes = ((extract 6 2) value_as_bytes%12#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 value_as_uint16%12#0)
                let data_length%4#0: uint64 = (len tmp%8#0)
                let current_tail_offset%2#1: uint64 = (+ 6u data_length%4#0)
                let value_as_bytes%13#0: bytes = (itob current_tail_offset%2#1)
                let value_as_uint16%13#0: bytes = ((extract 6 2) value_as_bytes%13#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 value_as_uint16%13#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 tmp%8#0)
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#1 tmp%9#0)
                let tmp%10#0: bool = (== test_struct#0 encoded_tuple_buffer%2#1)
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
            block@0: // L58
                let array_data%0#1: bytes = (concat 0x0002 0x01)
                let array_data%0#1: bytes = (concat array_data%0#1 0x02)
                let uint8_array#0: bytes = array_data%0#1
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) uint8_array#0)
                let data%0#1: bytes = (concat 0x 0x03)
                let data%0#1: bytes = (concat data%0#1 0x04)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#1)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let array_concat_tuple#0: bytes = concat_result%0#0
                let array_data%1#1: bytes = (concat 0x0004 0x01)
                let array_data%1#1: bytes = (concat array_data%1#1 0x02)
                let array_data%1#1: bytes = (concat array_data%1#1 0x03)
                let array_data%1#1: bytes = (concat array_data%1#1 0x04)
                let tmp%0#0: bool = (== array_concat_tuple#0 array_data%1#1)
                (assert tmp%0#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) array_concat_tuple#0)
                let data%1#1: bytes = (concat 0x 0x05)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 data%1#1)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let array_concat_tuple#0: bytes = concat_result%1#0
                let array_data%2#1: bytes = (concat 0x0005 0x01)
                let array_data%2#1: bytes = (concat array_data%2#1 0x02)
                let array_data%2#1: bytes = (concat array_data%2#1 0x03)
                let array_data%2#1: bytes = (concat array_data%2#1 0x04)
                let array_data%2#1: bytes = (concat array_data%2#1 0x05)
                let tmp%1#0: bool = (== array_concat_tuple#0 array_data%2#1)
                (assert tmp%1#0)
                let length%0#0: uint64 = (len "Hello")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%2#0: bytes = (concat value_as_uint16%0#0 "Hello")
                let length%1#0: uint64 = (len "World")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%3#0: bytes = (concat value_as_uint16%1#0 "World")
                let value_as_bytes%2#0: bytes = (itob 4u)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let array_data%3#1: bytes = (concat 0x0002 value_as_uint16%2#0)
                let element_length%0#0: uint64 = (len tmp%2#0)
                let next_offset%0#1: uint64 = (+ 4u element_length%0#0)
                let value_as_bytes%3#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let array_data%3#1: bytes = (concat array_data%3#1 value_as_uint16%3#0)
                let array_data%3#1: bytes = (concat array_data%3#1 tmp%2#0)
                let array_data%3#1: bytes = (concat array_data%3#1 tmp%3#0)
                let hello_world#0: bytes = array_data%3#1
                let length%2#0: uint64 = (len "World")
                let value_as_bytes%4#0: bytes = (itob length%2#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%4#0: bytes = (concat value_as_uint16%4#0 "World")
                let value_as_bytes%5#0: bytes = (itob 2u)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let array_data%4#1: bytes = (concat 0x0001 value_as_uint16%5#0)
                let array_data%4#1: bytes = (concat array_data%4#1 tmp%4#0)
                let array_length%0#0: uint64 = (extract_uint16 array_data%4#1 0u)
                let start_of_data%0#0: uint64 = (* array_length%0#0 2u)
                let start_of_data%0#0: uint64 = (+ start_of_data%0#0 2u)
                let total_length%0#0: uint64 = (len array_data%4#1)
                let data%2#0: bytes = (substring3 array_data%4#1 start_of_data%0#0 total_length%0#0)
                let length%3#0: uint64 = (len "Hello")
                let value_as_bytes%6#0: bytes = (itob length%3#0)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let tmp%5#0: bytes = (concat value_as_uint16%6#0 "Hello")
                let value_as_bytes%7#0: bytes = (itob 2u)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let array_data%5#1: bytes = (concat 0x0001 value_as_uint16%7#0)
                let array_data%5#1: bytes = (concat array_data%5#1 tmp%5#0)
                let concat_result%2#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(array_data%5#1, data%2#0, array_length%0#0)
                let hello_world_concat#0: bytes = concat_result%2#0
                let tmp%6#0: bool = (== hello_world#0 hello_world_concat#0)
                (assert tmp%6#0)
                return 
        
        subroutine algopy_lib_arc4.dynamic_array_pop_bit(source: bytes) -> <bytes, bytes>:
            block@0: // L20
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let popped_location#0: uint64 = (+ length_minus_1#0 16u)
                let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
                let popped#0: bytes = (setbit 0x00 0u tmp%2#0)
                let result#0: bytes = (setbit result#0 popped_location#0 0u)
                let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
                let tmp%4#0: uint64 = (/ tmp%3#0 8u)
                let tmp%5#0: uint64 = (+ 2u tmp%4#0)
                let result#0: bytes = (substring3 result#0 0u tmp%5#0)
                return popped#0 result#0
        
        subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size(source: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
            block@0: // L39
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let tmp%2#0: uint64 = (len result#0)
                let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
                let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
                let result#0: bytes = (substring3 result#0 0u item_location#0)
                return popped#0 result#0
        
        subroutine algopy_lib_arc4.dynamic_array_pop_variable_size(source: bytes) -> <bytes, bytes>:
            block@0: // L57
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
                let data_sans_header#0: bytes = ((extract 2 0) source#0)
                let popped_header#0: uint64 = (extract_uint16 data_sans_header#0 popped_header_offset#0)
                let tmp%0#0: uint64 = (len data_sans_header#0)
                let popped#0: bytes = (substring3 data_sans_header#0 popped_header#0 tmp%0#0)
                let tmp%1#0: bytes = (substring3 data_sans_header#0 0u popped_header_offset#0)
                let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
                let tmp%3#0: bytes = (substring3 data_sans_header#0 tmp%2#0 popped_header#0)
                let data_sans_header#0: bytes = (concat tmp%1#0 tmp%3#0)
                let tmp%4#0: bytes = (itob length_minus_1#0)
                let tmp%5#0: bytes = ((extract 6 0) tmp%4#0)
                let tmp%6#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(data_sans_header#0, length_minus_1#0, 0u)
                let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
                return popped#0 updated#0
        
        subroutine algopy_lib_arc4.dynamic_array_concat_bits(source: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: bool) -> bytes:
            block@0: // L84
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_array_length#0)
                let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 new_array_length_b#0)
                let tmp%1#0: uint64 = (+ array_length#0 7u)
                let current_bytes#0: uint64 = (/ tmp%1#0 8u)
                let tmp%2#0: uint64 = (+ new_array_length#0 7u)
                let required_bytes#0: uint64 = (/ tmp%2#0 8u)
                let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
                let result#9: bytes = result#0
                goto tmp%3#0 ? block@1 : block@2
            block@1: // if_body_L106
                let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let result#0: bytes = (concat result#0 tmp%5#0)
                let result#9: bytes = result#0
                goto block@2
            block@2: // after_if_else_L106
                let result#0: bytes = result#9
                let write_offset#0: uint64 = (+ array_length#0 16u)
                goto is_packed#0 ? block@3 : block@4
            block@3: // ternary_true_L110
                let ternary_result%0#0: uint64 = 1u
                goto block@5
            block@4: // ternary_false_L110
                let ternary_result%0#0: uint64 = 8u
                goto block@5
            block@5: // ternary_merge_L110
                (assert ternary_result%0#0) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@6
            block@6: // for_header_L110
                let continue_looping%0#0: bool = (< range_item%0#0 new_items_count#0)
                goto continue_looping%0#0 ? block@7 : block@10
            block@7: // for_body_L110
                let i#0: uint64 = range_item%0#0
                let tmp%6#0: uint64 = (getbit new_items_bytes#0 i#0)
                let result#0: bytes = (setbit result#0 write_offset#0 tmp%6#0)
                let write_offset#0: uint64 = (+ write_offset#0 1u)
                goto block@8
            block@8: // for_footer_L110
                goto block@9
            block@9: // for_increment_L110
                let range_item%0#0: uint64 = (+ range_item%0#0 ternary_result%0#0)
                goto block@6
            block@10: // after_for_L110
                return result#0
        
        subroutine algopy_lib_arc4.dynamic_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L117
                let size_b#0: bytes = ((substring 0 2) source#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) source#0)
                let tmp%1#0: bytes = algopy_lib_arc4.static_array_replace_variable_size(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine algopy_lib_arc4.static_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L139
                let tmp%0#0: bool = (< index#0 array_length#0)
                (assert tmp%0#0) // Index out of bounds
                let tmp%1#0: uint64 = (* index#0 2u)
                let offset_for_index#0: uint64 = (extract_uint16 source#0 tmp%1#0)
                let old_item_length#0: uint64 = (extract_uint16 source#0 offset_for_index#0)
                let tmp%2#0: uint64 = (+ offset_for_index#0 old_item_length#0)
                let old_item_end#0: uint64 = (+ tmp%2#0 2u)
                let tmp%3#0: bytes = (substring3 source#0 0u offset_for_index#0)
                let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
                let tmp%5#0: uint64 = (len source#0)
                let tmp%6#0: bytes = (substring3 source#0 old_item_end#0 tmp%5#0)
                let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
                let tmp%8#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(tmp%7#0, array_length#0, index#0)
                return tmp%8#0
        
        subroutine algopy_lib_arc4.dynamic_array_concat_variable_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L166
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: uint64 = (* array_length#0 2u)
                let header_end#0: uint64 = (+ tmp%0#0 2u)
                let tmp%1#0: bytes = (itob new_length#0)
                let tmp%2#0: bytes = ((extract 6 0) tmp%1#0)
                let tmp%3#0: bytes = (substring3 source#0 2u header_end#0)
                let tmp%4#0: uint64 = (* new_items_count#0 2u)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                let tmp%7#0: uint64 = (len source#0)
                let tmp%8#0: bytes = (substring3 source#0 header_end#0 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
                let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
                let tmp%11#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(tmp%10#0, new_length#0, 0u)
                let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
                return tmp%12#0
        
        subroutine algopy_lib_arc4.recalculate_array_offsets_static(array_data: bytes, length: uint64, start_at_index: uint64) -> bytes:
            block@0: // L195
                let header_cursor#0: uint64 = (* start_at_index#0 2u)
                let tmp%0#0: bool = (== start_at_index#0 0u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L210
                let tail_cursor#0: uint64 = (* length#0 2u)
                goto block@3
            block@2: // else_body_L210
                let tail_cursor#0: uint64 = (extract_uint16 array_data#0 header_cursor#0)
                goto block@3
            block@3: // after_if_else_L210
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = start_at_index#0
                goto block@4
            block@4: // for_header_L215
                let continue_looping%0#0: bool = (< range_item%0#0 length#0)
                goto continue_looping%0#0 ? block@5 : block@8
            block@5: // for_body_L215
                let tmp%1#0: bytes = (itob tail_cursor#0)
                let tail_cursor_bytes#0: bytes = ((extract 6 0) tmp%1#0)
                let array_data#0: bytes = (replace3 array_data#0 header_cursor#0 tail_cursor_bytes#0)
                let tmp%2#0: uint64 = (extract_uint16 array_data#0 tail_cursor#0)
                let tmp%3#0: uint64 = (+ tmp%2#0 2u)
                let tail_cursor#0: uint64 = (+ tail_cursor#0 tmp%3#0)
                let header_cursor#0: uint64 = (+ header_cursor#0 2u)
                goto block@6
            block@6: // for_footer_L215
                goto block@7
            block@7: // for_increment_L215
                let range_item%0#0: uint64 = (+ range_item%0#0 1u)
                goto block@4
            block@8: // after_for_L215
                return array_data#0
    
    program clear-state:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.clear_state_program() -> bool:
            block@0: // L45
                return 1u