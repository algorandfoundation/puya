main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L39
        let aggregate%head%0#0: bytes = (concat 0x 0x000000083cfbf217)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x000000230384b842)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let coord_1#0: Encoded(uint64,uint64) = tmp%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x000000083cfbf217)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x000000230384b842)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let coord_2#0: Encoded(uint64,uint64) = tmp%1#0
        let (add%0#0: Encoded(uint64,uint64), add%1#0: Encoded(uint64,uint64), add%2#0: Encoded(uint64,uint64)) = test_cases.arc4_types.structs.add(coord_1#0, coord_2#0)
        let coord_3#0: Encoded(uint64,uint64) = add%0#0
        let aggregate%extract%0#0: bytes = (extract3 coord_3#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 coord_3#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let loop_counter%0#0: uint64 = 0u
        let val#0: Encoded(uint64) = tuple_item%0#0
        goto block@1
    block@1: // for_body_L44
        (log val#0)
        goto block@2
    block@2: // for_footer_L43
        goto_nth [block@3][loop_counter%0#0] else goto block@4
    block@3: // for_header_1_L43
        let loop_counter%0#0: uint64 = 1u
        let val#0: Encoded(uint64) = tuple_item%1#0
        goto block@1
    block@4: // after_for_L43
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%5#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%get_bit%0#0: uint64 = (getbit tmp%3#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%2#0 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: uint64 = (getbit tmp%4#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit aggregate%set_bit%0#0 2u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: uint64 = (getbit tmp%5#0 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit aggregate%set_bit%1#0 3u aggregate%get_bit%2#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%set_bit%2#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%head%4#0
        let tmp%6#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0
        let flags#0: Encoded(bool1,bool1,bool1,bool1) = tmp%6#0
        let check%0#0: Encoded(bool1,bool1,bool1,bool1) = test_cases.arc4_types.structs.check(flags#0)
        (log flags#0)
        let tmp%7#0: bool = (== coord_1#0 coord_1#0)
        (assert tmp%7#0)
        let aggregate%head%5#0: bytes = (concat 0x coord_1#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 flags#0)
        let aggregate%as_Encoded((uint64,uint64),(bool1,bool1,bool1,bool1))%0#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = aggregate%head%6#0
        let tmp%8#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = aggregate%as_Encoded((uint64,uint64),(bool1,bool1,bool1,bool1))%0#0
        let nested_decode%0#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = test_cases.arc4_types.structs.nested_decode(tmp%8#0)
        let aggregate%length%0#0: uint64 = (len 0x)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%7#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%7#0 tmp%9#0)
        let aggregate%as_Encoded((len+uint8[]))%0#0: Encoded((len+uint8[])) = aggregate%concat%0#0
        let tmp%10#0: Encoded((len+uint8[])) = aggregate%as_Encoded((len+uint8[]))%0#0
        let mutable#0: Encoded((len+uint8[])) = tmp%10#0
        let copy#0: Encoded((len+uint8[])) = mutable#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 copy#0 0u)
        let aggregate%len%0#0: uint64 = (len copy#0)
        let aggregate%substring3%0#0: bytes = (substring3 copy#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%head%8#0: bytes = (concat 0x 0x2a)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%8#0
        let tmp%11#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let aggregate%concat%1#0: Encoded(len+uint8[]) = (concat tuple_item%2#0 tmp%11#0) // on error: max array length exceeded
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 aggregate%concat%1#0 0u)
        let aggregate%add%0#0: uint64 = (+ aggregate%extract_uint16%1#0 1u)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%add%0#0)
        let aggregate%as_u16_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%replace%0#0: bytes = (replace3 aggregate%concat%1#0 0u aggregate%as_u16_bytes%0#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%replace%0#0
        let tmp%12#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 copy#0 0u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 copy#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%0#0: bytes = (concat aggregate%data_up_to_item%0#0 tmp%12#0)
        let updated_tuple%0#0: Encoded((len+uint8[])) = aggregate%updated_data%0#0
        let copy#0: Encoded((len+uint8[])) = updated_tuple%0#0
        let tmp%13#0: bool = (!= mutable#0 copy#0)
        (assert tmp%13#0) // expected copy is different
        let aggregate%head%9#0: bytes = (concat 0x 0x000000000000000c)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x0000000000000022)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%10#0
        let tmp%14#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let immutable#0: Encoded(uint64,uint64) = tmp%14#0
        let no_copy#0: Encoded(uint64,uint64) = immutable#0
        let immutable_copy#0: Encoded(uint64,uint64) = immutable#0
        let tmp%15#0: bool = (== no_copy#0 immutable#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== immutable_copy#0 immutable#0)
        (assert tmp%16#0)
        let aggregate%extract%2#0: bytes = (extract3 immutable#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%2#0
        let aggregate%head%11#0: bytes = (concat 0x tuple_item%3#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 0x000000000000007b)
        let aggregate%as_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = aggregate%head%12#0
        let tmp%17#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%3#0
        let immutable2#0: Encoded(uint64,uint64) = tmp%17#0
        let aggregate%extract%3#0: bytes = (extract3 immutable2#0 8u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%3#0
        let reinterpret_biguint%0#0: biguint = tuple_item%4#0
        let tmp%18#0: bool = (b== reinterpret_biguint%0#0 0x000000000000007b)
        (assert tmp%18#0)
        let aggregate%extract%4#0: bytes = (extract3 immutable2#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%4#0
        let reinterpret_biguint%2#0: biguint = tuple_item%5#0
        let aggregate%extract%5#0: bytes = (extract3 immutable#0 0u 8u)
        let tuple_item%6#0: Encoded(uint64) = aggregate%extract%5#0
        let reinterpret_biguint%3#0: biguint = tuple_item%6#0
        let tmp%19#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%19#0)
        let tmp%22#0: bool = (== 0x 0x)
        (assert tmp%22#0)
        return 1u

subroutine test_cases.arc4_types.structs.add(v1: Encoded(uint64,uint64), v2: Encoded(uint64,uint64)) -> <Encoded(uint64,uint64), Encoded(uint64,uint64), Encoded(uint64,uint64)>:
    block@0: // L76
        let aggregate%extract%0#0: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%0#0, tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let aggregate%extract%3#0: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let tmp%1#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%2#0, tuple_item%3#0)
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%2#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        return tmp%2#0 v1#0 v2#0

subroutine test_cases.arc4_types.structs.check(flags: Encoded(bool1,bool1,bool1,bool1)) -> Encoded(bool1,bool1,bool1,bool1):
    block@0: // L84
        let flags%out#0: Encoded(bool1,bool1,bool1,bool1) = flags#0
        let aggregate%get_bit%0#0: uint64 = (getbit flags#0 0u)
        let tuple_item%0#0: bool = aggregate%get_bit%0#0
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tuple_item%0#0)
        let values%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let aggregate%get_bit%1#0: bool = (getbit values%0#0 0u)
        let tmp%0#0: bool = aggregate%get_bit%1#0
        (assert tmp%0#0)
        let aggregate%get_bit%2#0: uint64 = (getbit flags#0 1u)
        let tuple_item%1#0: bool = aggregate%get_bit%2#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tuple_item%1#0)
        let values%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let aggregate%get_bit%3#0: bool = (getbit values%1#0 0u)
        let tmp%1#0: bool = aggregate%get_bit%3#0
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let aggregate%get_bit%4#0: uint64 = (getbit flags#0 2u)
        let tuple_item%2#0: bool = aggregate%get_bit%4#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u tuple_item%2#0)
        let values%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let aggregate%get_bit%5#0: bool = (getbit values%2#0 0u)
        let tmp%3#0: bool = aggregate%get_bit%5#0
        (assert tmp%3#0)
        let aggregate%get_bit%6#0: uint64 = (getbit flags#0 3u)
        let tuple_item%3#0: bool = aggregate%get_bit%6#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u tuple_item%3#0)
        let values%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let aggregate%get_bit%7#0: bool = (getbit values%3#0 0u)
        let tmp%4#0: bool = aggregate%get_bit%7#0
        let tmp%5#0: bool = (! tmp%4#0)
        (assert tmp%5#0)
        return flags%out#0

subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1))) -> Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)):
    block@0: // L92
        let vector_flags%out#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = vector_flags#0
        let aggregate%extract%0#0: bytes = (extract3 vector_flags#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 tuple_item%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%0#0: bytes = (itob 35382882839u)
        let tmp%1#0: bool = (== tuple_item%1#0 tmp%0#0)
        (assert tmp%1#0)
        let aggregate%extract%2#0: bytes = (extract3 vector_flags#0 16u 1u)
        let tuple_item%2#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%extract%2#0
        let aggregate%get_bit%0#0: uint64 = (getbit tuple_item%2#0 2u)
        let tuple_item%3#0: bool = aggregate%get_bit%0#0
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tuple_item%3#0)
        let values%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let aggregate%get_bit%1#0: bool = (getbit values%0#0 0u)
        let tmp%2#0: bool = aggregate%get_bit%1#0
        (assert tmp%2#0)
        return vector_flags%out#0

subroutine test_cases.arc4_types.structs.add_decimal(x: Encoded(uint64), y: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L98
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#0)
        return reinterpret_Encoded(uint64)%0#0