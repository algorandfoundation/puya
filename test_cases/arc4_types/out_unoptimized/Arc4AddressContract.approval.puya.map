{
  "version": 3,
  "sources": [
    "../address.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO+B;;AACL;;AAAX;;AAAA;AAAP;AACO;;AAAkB;;AAAlB;AAAP;AACyB;;AAAlB;AAAP;AAE4B;;AAAA;AAAb;AAAA;;AAAA;AAAA;AACc;;AAAtB;AAAP;AAEe;AACQ;AAAhB;AAAP;AADe;AAAA;AAKR;AAAP;AACO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.address.Arc4AddressContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ)"
    },
    "36": {
      "op": "b block@0"
    },
    "39": {
      "block": "block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "41": {
      "op": "txn Sender",
      "defined_out": [
        "address#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "address#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "43": {
      "op": "dig 1",
      "defined_out": [
        "address#0",
        "address#0 (copy)",
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "address#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "address#0 (copy)"
      ]
    },
    "45": {
      "op": "==",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "assert",
      "stack_out": [
        "address#0"
      ]
    },
    "47": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "32"
      ]
    },
    "49": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "address#0",
        "32",
        "32"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "address#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "tmp%1#0"
      ]
    },
    "52": {
      "op": "assert",
      "defined_out": [
        "reinterpret_account%0#0"
      ],
      "stack_out": [
        "reinterpret_account%0#0"
      ]
    },
    "53": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_account%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "reinterpret_account%0#0",
        "tmp%2#0"
      ]
    },
    "55": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "56": {
      "op": "assert",
      "stack_out": []
    },
    "57": {
      "op": "global ZeroAddress",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "59": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_Encoded(uint8[32])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "awst_tmp%0#0"
      ]
    },
    "60": {
      "op": "len",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%4#0"
      ]
    },
    "61": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%4#0",
        "32"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%5#0"
      ]
    },
    "64": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "defined_out": [
        "zero_address#0"
      ],
      "stack_out": [
        "zero_address#0"
      ]
    },
    "65": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%6#0",
        "zero_address#0"
      ],
      "stack_out": [
        "zero_address#0",
        "tmp%6#0"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "68": {
      "op": "assert",
      "stack_out": []
    },
    "69": {
      "op": "bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "defined_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ],
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "70": {
      "op": "bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "72": {
      "op": "assert",
      "stack_out": []
    },
    "73": {
      "op": "bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "74": {
      "op": "bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA",
      "stack_out": [
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)",
        "Address(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "76": {
      "op": "assert",
      "stack_out": []
    },
    "77": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    }
  }
}