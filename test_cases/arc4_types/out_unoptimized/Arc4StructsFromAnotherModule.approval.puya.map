{
  "version": 3,
  "sources": [
    "../structs2.py"
  ],
  "mappings": ";;;;;;;;;;AAOwB;AAAA;AAAU;AAAV;AAAmB;AAAA;AAAU;AAAV;AAAoB;AAAA;AAAU;AAAV;AAAA;AAAmB;AAAA;AAAU;AAAV;AAAA;;AAAlE;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACR;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.structs2.Arc4StructsFromAnotherModule.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x00 0x"
    },
    "10": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "11": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "12": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "0x00",
        "0",
        "1"
      ]
    },
    "13": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "14": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "15": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "16": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "17": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "18": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x00"
      ]
    },
    "19": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x00",
        "0"
      ]
    },
    "20": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "21": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "23": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x00"
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x00",
        "0"
      ]
    },
    "25": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "26": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "27": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0"
      ]
    },
    "30": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#1",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%get_bit%0#1"
      ]
    },
    "31": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%get_bit%0#1",
        "tmp%0#0"
      ]
    },
    "33": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%get_bit%0#1",
        "tmp%0#0",
        "1"
      ]
    },
    "34": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "1",
        "aggregate%get_bit%0#1"
      ]
    },
    "36": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%set_bit%0#1"
      ]
    },
    "37": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "aggregate%set_bit%0#1",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "aggregate%set_bit%0#1",
        "tmp%2#0",
        "0"
      ]
    },
    "39": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%1#1",
        "aggregate%set_bit%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%set_bit%0#1",
        "aggregate%get_bit%1#1"
      ]
    },
    "40": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "aggregate%get_bit%1#1",
        "aggregate%set_bit%0#1"
      ]
    },
    "41": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%get_bit%1#1",
        "aggregate%set_bit%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%get_bit%1#1",
        "aggregate%set_bit%0#1",
        "2"
      ]
    },
    "43": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "aggregate%set_bit%0#1",
        "2",
        "aggregate%get_bit%1#1"
      ]
    },
    "45": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%set_bit%1#1"
      ]
    },
    "46": {
      "op": "swap",
      "stack_out": [
        "aggregate%set_bit%1#1",
        "tmp%3#0"
      ]
    },
    "47": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%set_bit%1#1",
        "tmp%3#0",
        "0"
      ]
    },
    "48": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%2#1",
        "aggregate%set_bit%1#1"
      ],
      "stack_out": [
        "aggregate%set_bit%1#1",
        "aggregate%get_bit%2#1"
      ]
    },
    "49": {
      "op": "swap",
      "stack_out": [
        "aggregate%get_bit%2#1",
        "aggregate%set_bit%1#1"
      ]
    },
    "50": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%get_bit%2#1",
        "aggregate%set_bit%1#1"
      ],
      "stack_out": [
        "aggregate%get_bit%2#1",
        "aggregate%set_bit%1#1",
        "3"
      ]
    },
    "52": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#1",
        "3",
        "aggregate%get_bit%2#1"
      ]
    },
    "54": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#1"
      ],
      "stack_out": [
        "aggregate%set_bit%2#1"
      ]
    },
    "55": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%set_bit%2#1"
      ],
      "stack_out": [
        "aggregate%set_bit%2#1",
        "0x"
      ]
    },
    "56": {
      "op": "swap",
      "stack_out": [
        "0x",
        "aggregate%set_bit%2#1"
      ]
    },
    "57": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1"
      ]
    },
    "58": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "aggregate%encoded%0#1",
        "0x"
      ]
    },
    "59": {
      "op": "concat",
      "defined_out": [
        "flags#0"
      ],
      "stack_out": [
        "flags#0"
      ]
    },
    "60": {
      "op": "log",
      "stack_out": []
    },
    "61": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    }
  }
}