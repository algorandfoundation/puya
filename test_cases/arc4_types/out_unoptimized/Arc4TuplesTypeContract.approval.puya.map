{
  "version": 3,
  "sources": [
    "../tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAcmB;AAAO;AAAP;AAAiB;;;AAAjB;AAAA;;AAAA;AAAA;;;AAAA;AAA2B;AAA3B;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAA6D;;;AAA7D;AAA2B;AAA3B;AAA4C;;;;;;;;;AAA5C;AAAX;AAGI;;;;;;;;;;;;;;;;;;;;;;;AADG;AAAP;AAMQ;AAAA;AAAK;AAAL;AACA;AAAA;AAAK;AAAL;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AAXU;AAEV;;;AAFU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAYV;;;AAZU;AAAlB;;AAegC;;;;;;AAAzB;AAAP;AACkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAlC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;AAAY;;AAAZ;AAAP;AACO;AAAA;AAAA;;;AAAM;;AAAA;AAAA;AAAN;;;AAAY;;AAAA;AAAA;AAAZ;;;AAAkB;;AAAA;AAAA;AAAlB;;;AAAwB;;AAAA;AAAA;AAAxB;;;AAA8B;;AAAA;AAAA;AAA9B;;;AAAoC;;AAAA;AAAA;AAApC;;;;AAAP;AACY;;AAAA;AAAA;AAAL;;;AAAU;;AAAA;AAAA;AAAV;;;;AAAA;AAAP;AACO;AAAA;AAAY;;AAAZ;AAAP;AAE6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAnB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAnB;AAAP;AAEgB;;AAAA;;;AACT;;;AAAiB;;;;;;;;;;;;;AAAjB;AAAP;AACgB;;;AAAT;AAAP;AAEA;;;AAEO;AAAP;;;;;;;;;AAKR;;;AAEwB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAhB;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAEO;;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAEQ;AAAW;;AAAA;AAAX;AAAsB;AAAA;AAAtB;AACD;;AAAA;;;AAAW;;;AAAX;AAAiB;;AAAA;;;AAAjB;AAEO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAd;AAIsB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAhB;AAAO;AAAP;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAc;AAAd;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAU;AAAa;AAAb;AAAA;;;;AAAA;AAAA;AAAV;AAAP;AAEO;;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAO;AAAP;AAAA;AAAA;;AAAY;AAAZ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAV;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 9 10"
    },
    "7": {
      "op": "bytecblock 0x00 0x 0x01 0x000568656c6c6f"
    },
    "22": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "23": {
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x",
        "0x01"
      ],
      "stack_out": [
        "0x",
        "0x01"
      ]
    },
    "24": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "25": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "0x02"
      ]
    },
    "28": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "29": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "7"
      ]
    },
    "31": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "as_bytes%0#0"
      ]
    },
    "32": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%0#0"
      ]
    },
    "35": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "36": {
      "op": "bytec_3 // 0x000568656c6c6f",
      "defined_out": [
        "0x000568656c6c6f",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x000568656c6c6f"
      ]
    },
    "37": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "38": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "7"
      ]
    },
    "40": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "41": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "as_bytes%1#0"
      ]
    },
    "42": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "46": {
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0xff"
      ]
    },
    "49": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "50": {
      "op": "bytec_3 // 0x000568656c6c6f",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x000568656c6c6f"
      ]
    },
    "51": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "52": {
      "op": "pushbytes 0x0005776f726c64",
      "defined_out": [
        "0x0005776f726c64",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0005776f726c64"
      ]
    },
    "61": {
      "op": "concat",
      "defined_out": [
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "my_tuple#0"
      ]
    },
    "63": {
      "op": "pushbytes 0x01020007000eff000568656c6c6f0005776f726c64",
      "defined_out": [
        "0x01020007000eff000568656c6c6f0005776f726c64",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "my_tuple#0",
        "0x01020007000eff000568656c6c6f0005776f726c64"
      ]
    },
    "86": {
      "op": "==",
      "defined_out": [
        "my_tuple#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0"
      ]
    },
    "88": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "0x00"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "0x00",
        "0"
      ]
    },
    "90": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "91": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "94": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "95": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "96": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "98": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "99": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0"
      ]
    },
    "100": {
      "op": "cover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "102": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "104": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "105": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%3#0"
      ]
    },
    "106": {
      "op": "cover 3",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "108": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "110": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "111": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%4#0"
      ]
    },
    "112": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "114": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "116": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "117": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%5#0"
      ]
    },
    "118": {
      "op": "cover 5",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "120": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "122": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "123": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%6#0"
      ]
    },
    "124": {
      "op": "cover 6",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "126": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "128": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "129": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%7#0"
      ]
    },
    "130": {
      "op": "cover 7",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "132": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "134": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "135": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%8#0"
      ]
    },
    "136": {
      "op": "cover 8",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "138": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x"
      ]
    },
    "139": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x",
        "0x04",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x",
        "0x04"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%9#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "143": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "encoded_bool%0#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%10#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "146": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%10#0",
        "encoded_bool%1#0"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%10#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "148": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%10#0",
        "is_true%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%10#0",
        "is_true%0#0"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "is_true%0#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "150": {
      "op": "intc_2 // 9",
      "defined_out": [
        "9",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%10#0",
        "is_true%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "is_true%0#0",
        "encoded_tuple_buffer%10#0",
        "9"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%10#0",
        "9",
        "is_true%0#0"
      ]
    },
    "153": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%11#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_bool%2#0"
      ]
    },
    "155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "156": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%11#0",
        "is_true%1#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%11#0",
        "is_true%1#0"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "is_true%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "158": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%11#0",
        "is_true%1#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "is_true%1#0",
        "encoded_tuple_buffer%11#0",
        "10"
      ]
    },
    "159": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%11#0",
        "10",
        "is_true%1#0"
      ]
    },
    "161": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%12#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%12#0",
        "encoded_bool%3#0"
      ]
    },
    "163": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%12#0",
        "encoded_bool%3#0",
        "0"
      ]
    },
    "164": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%12#0",
        "is_true%2#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%12#0",
        "is_true%2#0"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "is_true%2#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "166": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%12#0",
        "is_true%2#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "is_true%2#0",
        "encoded_tuple_buffer%12#0",
        "11"
      ]
    },
    "168": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%12#0",
        "11",
        "is_true%2#0"
      ]
    },
    "170": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%13#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%13#0",
        "encoded_bool%4#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%13#0",
        "encoded_bool%4#0",
        "0"
      ]
    },
    "173": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%13#0",
        "is_true%3#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%13#0",
        "is_true%3#0"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "is_true%3#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "175": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%13#0",
        "is_true%3#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "is_true%3#0",
        "encoded_tuple_buffer%13#0",
        "12"
      ]
    },
    "177": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%13#0",
        "12",
        "is_true%3#0"
      ]
    },
    "179": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%14#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "180": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_tuple_buffer%14#0",
        "encoded_bool%5#0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_tuple_buffer%14#0",
        "encoded_bool%5#0",
        "0"
      ]
    },
    "182": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%14#0",
        "is_true%4#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_tuple_buffer%14#0",
        "is_true%4#0"
      ]
    },
    "183": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "is_true%4#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "184": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%14#0",
        "is_true%4#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "is_true%4#0",
        "encoded_tuple_buffer%14#0",
        "13"
      ]
    },
    "186": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_tuple_buffer%14#0",
        "13",
        "is_true%4#0"
      ]
    },
    "188": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%15#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_bool%6#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_tuple_buffer%15#0",
        "encoded_bool%6#0"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_tuple_buffer%15#0",
        "encoded_bool%6#0",
        "0"
      ]
    },
    "191": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%15#0",
        "is_true%5#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_tuple_buffer%15#0",
        "is_true%5#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "is_true%5#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "193": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%15#0",
        "is_true%5#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "is_true%5#0",
        "encoded_tuple_buffer%15#0",
        "14"
      ]
    },
    "195": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_tuple_buffer%15#0",
        "14",
        "is_true%5#0"
      ]
    },
    "197": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_bool%7#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "encoded_bool%7#0"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "encoded_bool%7#0",
        "0"
      ]
    },
    "200": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "is_true%6#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "is_true%6#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "is_true%6#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "202": {
      "op": "pushint 15 // 15",
      "defined_out": [
        "15",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "is_true%6#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "is_true%6#0",
        "encoded_tuple_buffer%16#0",
        "15"
      ]
    },
    "204": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%16#0",
        "15",
        "is_true%6#0"
      ]
    },
    "206": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%8#0",
        "encoded_tuple_buffer%17#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_bool%8#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "encoded_tuple_buffer%17#0",
        "encoded_bool%8#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "209": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "encoded_tuple_buffer%18#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded_tuple_buffer%18#0",
        "0x10"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0"
      ]
    },
    "213": {
      "op": "dupn 2",
      "defined_out": [
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "215": {
      "op": "pushbytes 0x04bd8010",
      "defined_out": [
        "0x04bd8010",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0x04bd8010"
      ]
    },
    "221": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "my_tuple#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0"
      ]
    },
    "223": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "224": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0"
      ]
    },
    "225": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0",
        "1"
      ]
    },
    "226": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "item0%0#0"
      ]
    },
    "227": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0"
      ]
    },
    "228": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "229": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "8"
      ]
    },
    "231": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%7#0",
        "item0%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "is_true%7#0"
      ]
    },
    "232": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "is_true%7#0",
        "0x00"
      ]
    },
    "233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "is_true%7#0",
        "0x00",
        "0"
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%7#0"
      ]
    },
    "236": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "boolean_packing#0",
        "item1%0#0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0"
      ]
    },
    "238": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "239": {
      "op": "intc_2 // 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "9"
      ]
    },
    "240": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%8#0",
        "item0%0#0",
        "item1%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "is_true%8#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "is_true%8#0",
        "0x00"
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "is_true%8#0",
        "0x00",
        "0"
      ]
    },
    "243": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%8#0"
      ]
    },
    "245": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "boolean_packing#0",
        "item2%0#0"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0"
      ]
    },
    "247": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "248": {
      "op": "intc_3 // 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "10"
      ]
    },
    "249": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%9#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "is_true%9#0"
      ]
    },
    "250": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "is_true%9#0",
        "0x00"
      ]
    },
    "251": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "is_true%9#0",
        "0x00",
        "0"
      ]
    },
    "252": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%9#0"
      ]
    },
    "254": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "boolean_packing#0",
        "item3%0#0"
      ]
    },
    "255": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0"
      ]
    },
    "256": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "257": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "11"
      ]
    },
    "259": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%10#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "is_true%10#0"
      ]
    },
    "260": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "is_true%10#0",
        "0x00"
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "is_true%10#0",
        "0x00",
        "0"
      ]
    },
    "262": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%10#0"
      ]
    },
    "264": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "boolean_packing#0",
        "item4%0#0"
      ]
    },
    "265": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0"
      ]
    },
    "266": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "267": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "12"
      ]
    },
    "269": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%11#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "is_true%11#0"
      ]
    },
    "270": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "is_true%11#0",
        "0x00"
      ]
    },
    "271": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "is_true%11#0",
        "0x00",
        "0"
      ]
    },
    "272": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%11#0"
      ]
    },
    "274": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "boolean_packing#0",
        "item5%0#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0"
      ]
    },
    "276": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "277": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "13"
      ]
    },
    "279": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%12#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "is_true%12#0"
      ]
    },
    "280": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "is_true%12#0",
        "0x00"
      ]
    },
    "281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "is_true%12#0",
        "0x00",
        "0"
      ]
    },
    "282": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%12#0"
      ]
    },
    "284": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "boolean_packing#0",
        "item6%0#0"
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0"
      ]
    },
    "286": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "287": {
      "op": "pushint 14 // 14",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "14"
      ]
    },
    "289": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%13#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "is_true%13#0"
      ]
    },
    "290": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "is_true%13#0",
        "0x00"
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "is_true%13#0",
        "0x00",
        "0"
      ]
    },
    "292": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%13#0"
      ]
    },
    "294": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "boolean_packing#0",
        "item7%0#0"
      ]
    },
    "295": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0"
      ]
    },
    "296": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "297": {
      "op": "pushint 15 // 15",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "15"
      ]
    },
    "299": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%14#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "is_true%14#0"
      ]
    },
    "300": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "is_true%14#0",
        "0x00"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "is_true%14#0",
        "0x00",
        "0"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%14#0"
      ]
    },
    "304": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "boolean_packing#0",
        "item8%0#0"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0"
      ]
    },
    "306": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "307": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "16"
      ]
    },
    "309": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%15#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "is_true%15#0"
      ]
    },
    "310": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "is_true%15#0",
        "0x00"
      ]
    },
    "311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "is_true%15#0",
        "0x00",
        "0"
      ]
    },
    "312": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%15#0"
      ]
    },
    "314": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "boolean_packing#0",
        "item9%0#0"
      ]
    },
    "315": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0"
      ]
    },
    "316": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "317": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3"
      ]
    },
    "319": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3",
        "1"
      ]
    },
    "320": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item10%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0"
      ]
    },
    "321": {
      "op": "uncover 11",
      "defined_out": [
        "a#0",
        "boolean_packing#0",
        "item1%0#0",
        "item10%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0",
        "a#0"
      ]
    },
    "323": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "a#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0"
      ]
    },
    "325": {
      "op": "uncover 11",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "item10%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "item5%0#0",
        "item6%0#0",
        "item7%0#0",
        "a#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0",
        "b#0"
      ]
    },
    "327": {
      "op": "cover 5",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "item10%0#0",
        "item8%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "b#0",
        "a#0",
        "item8%0#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0"
      ]
    },
    "329": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "item10%0#0",
        "item9%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "b#0",
        "a#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0",
        "i#0"
      ]
    },
    "331": {
      "op": "cover 5",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "b#0",
        "a#0",
        "item9%0#0",
        "boolean_packing#0",
        "item10%0#0"
      ]
    },
    "333": {
      "op": "uncover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "item10%0#0",
        "j#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "item10%0#0",
        "j#0"
      ]
    },
    "335": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0"
      ]
    },
    "337": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0",
        "k#0"
      ]
    },
    "338": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0"
      ]
    },
    "341": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0",
        "3"
      ]
    },
    "343": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0",
        "3",
        "1"
      ]
    },
    "344": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "345": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "346": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0"
      ]
    },
    "347": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "348": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%3#0",
        "4"
      ]
    },
    "350": {
      "op": "==",
      "defined_out": [
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "351": {
      "error": "a is 4",
      "op": "assert // a is 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0"
      ]
    },
    "352": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "0x00"
      ]
    },
    "353": {
      "op": "!=",
      "defined_out": [
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%5#0"
      ]
    },
    "354": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "357": {
      "block": "main_and_contd@1",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 7",
      "defined_out": [
        "d#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "d#0"
      ]
    },
    "359": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "d#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "d#0",
        "0x00"
      ]
    },
    "360": {
      "op": "!=",
      "defined_out": [
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%6#0"
      ]
    },
    "361": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "364": {
      "block": "main_and_contd@2",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 6",
      "defined_out": [
        "e#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "e#0"
      ]
    },
    "366": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "e#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "e#0",
        "0x00"
      ]
    },
    "367": {
      "op": "!=",
      "defined_out": [
        "e#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%7#0"
      ]
    },
    "368": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "371": {
      "block": "main_and_contd@3",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 5",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "f#0"
      ]
    },
    "373": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "f#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "f#0",
        "0x00"
      ]
    },
    "374": {
      "op": "!=",
      "defined_out": [
        "f#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%8#0"
      ]
    },
    "375": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "378": {
      "block": "main_and_contd@4",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 4",
      "defined_out": [
        "g#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "g#0"
      ]
    },
    "380": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "g#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "g#0",
        "0x00"
      ]
    },
    "381": {
      "op": "!=",
      "defined_out": [
        "g#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%9#0"
      ]
    },
    "382": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "385": {
      "block": "main_and_contd@5",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "i#0"
      ]
    },
    "387": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "i#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "i#0",
        "0x00"
      ]
    },
    "388": {
      "op": "!=",
      "defined_out": [
        "i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%10#0"
      ]
    },
    "389": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "392": {
      "block": "main_and_contd@6",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "j#0"
      ]
    },
    "394": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "j#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "j#0",
        "0x00"
      ]
    },
    "395": {
      "op": "!=",
      "defined_out": [
        "j#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%11#0"
      ]
    },
    "396": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "399": {
      "block": "main_bool_true@7",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ]
    },
    "400": {
      "block": "main_bool_merge@9",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ],
      "error": "b,d,e,f,g,i,j are true",
      "op": "assert // b,d,e,f,g,i,j are true",
      "defined_out": [],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "401": {
      "op": "dig 8",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "c#0"
      ]
    },
    "403": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "c#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "c#0",
        "0x00"
      ]
    },
    "404": {
      "op": "!=",
      "defined_out": [
        "c#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%12#0"
      ]
    },
    "405": {
      "op": "bnz main_bool_true@11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "408": {
      "block": "main_or_contd@10",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "h#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "h#0"
      ]
    },
    "410": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "h#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "h#0",
        "0x00"
      ]
    },
    "411": {
      "op": "!=",
      "defined_out": [
        "h#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%13#0"
      ]
    },
    "412": {
      "op": "bz main_bool_false@12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "415": {
      "block": "main_bool_true@11",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ]
    },
    "416": {
      "block": "main_bool_merge@13",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%14#0"
      ]
    },
    "417": {
      "error": "c and h are false",
      "op": "assert // c and h are false",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "418": {
      "op": "dup",
      "defined_out": [
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "k#0"
      ]
    },
    "419": {
      "op": "btoi",
      "defined_out": [
        "k#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%15#0"
      ]
    },
    "420": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "k#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%15#0",
        "16"
      ]
    },
    "422": {
      "op": "==",
      "defined_out": [
        "k#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%16#0"
      ]
    },
    "423": {
      "error": "k is 16",
      "op": "assert // k is 16",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "424": {
      "op": "dig 9",
      "defined_out": [
        "boolean_packing#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0"
      ]
    },
    "426": {
      "op": "dup",
      "defined_out": [
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "427": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0"
      ]
    },
    "428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0",
        "1"
      ]
    },
    "429": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "item0%1#0"
      ]
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0"
      ]
    },
    "431": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "432": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "8"
      ]
    },
    "434": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%16#0",
        "item0%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "is_true%16#0"
      ]
    },
    "435": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "boolean_packing#0",
        "is_true%16#0",
        "item0%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "is_true%16#0",
        "0x00"
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "is_true%16#0",
        "0x00",
        "0"
      ]
    },
    "437": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%16#0"
      ]
    },
    "439": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "boolean_packing#0",
        "item1%1#0"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0"
      ]
    },
    "441": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "442": {
      "op": "intc_2 // 9",
      "defined_out": [
        "9",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "9"
      ]
    },
    "443": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%17#0",
        "item0%1#0",
        "item1%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "is_true%17#0"
      ]
    },
    "444": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "is_true%17#0",
        "0x00"
      ]
    },
    "445": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "is_true%17#0",
        "0x00",
        "0"
      ]
    },
    "446": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%17#0"
      ]
    },
    "448": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "boolean_packing#0",
        "item2%1#0"
      ]
    },
    "449": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0"
      ]
    },
    "450": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "451": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "10"
      ]
    },
    "452": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%18#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "is_true%18#0"
      ]
    },
    "453": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "is_true%18#0",
        "0x00"
      ]
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "is_true%18#0",
        "0x00",
        "0"
      ]
    },
    "455": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%18#0"
      ]
    },
    "457": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "boolean_packing#0",
        "item3%1#0"
      ]
    },
    "458": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0"
      ]
    },
    "459": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "460": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "11"
      ]
    },
    "462": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%19#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "is_true%19#0"
      ]
    },
    "463": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "is_true%19#0",
        "0x00"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "is_true%19#0",
        "0x00",
        "0"
      ]
    },
    "465": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%19#0"
      ]
    },
    "467": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "boolean_packing#0",
        "item4%1#0"
      ]
    },
    "468": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0"
      ]
    },
    "469": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "470": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "12"
      ]
    },
    "472": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%20#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "is_true%20#0"
      ]
    },
    "473": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "is_true%20#0",
        "0x00"
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "is_true%20#0",
        "0x00",
        "0"
      ]
    },
    "475": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%20#0"
      ]
    },
    "477": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "boolean_packing#0",
        "item5%1#0"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0"
      ]
    },
    "479": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "480": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "13"
      ]
    },
    "482": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%21#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "is_true%21#0"
      ]
    },
    "483": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "is_true%21#0",
        "0x00"
      ]
    },
    "484": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "is_true%21#0",
        "0x00",
        "0"
      ]
    },
    "485": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%21#0"
      ]
    },
    "487": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "boolean_packing#0",
        "item6%1#0"
      ]
    },
    "488": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0"
      ]
    },
    "489": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "490": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "14"
      ]
    },
    "492": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%22#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "is_true%22#0"
      ]
    },
    "493": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "is_true%22#0",
        "0x00"
      ]
    },
    "494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "is_true%22#0",
        "0x00",
        "0"
      ]
    },
    "495": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%22#0"
      ]
    },
    "497": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "boolean_packing#0",
        "item7%1#0"
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0"
      ]
    },
    "499": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "500": {
      "op": "pushint 15 // 15",
      "defined_out": [
        "15",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "15"
      ]
    },
    "502": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%23#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "is_true%23#0"
      ]
    },
    "503": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "is_true%23#0",
        "0x00"
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "is_true%23#0",
        "0x00",
        "0"
      ]
    },
    "505": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%23#0"
      ]
    },
    "507": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "boolean_packing#0",
        "item8%1#0"
      ]
    },
    "508": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0"
      ]
    },
    "509": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "510": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "16"
      ]
    },
    "512": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "is_true%24#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "is_true%24#0"
      ]
    },
    "513": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "is_true%24#0",
        "0x00"
      ]
    },
    "514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "is_true%24#0",
        "0x00",
        "0"
      ]
    },
    "515": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "is_true%24#0"
      ]
    },
    "517": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "boolean_packing#0",
        "item9%1#0"
      ]
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0"
      ]
    },
    "519": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "520": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3"
      ]
    },
    "522": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3",
        "1"
      ]
    },
    "523": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item10%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0"
      ]
    },
    "524": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "boolean_packing#0",
        "item0%1#0",
        "item1%1#0",
        "item10%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "0x"
      ]
    },
    "525": {
      "op": "uncover 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "0x",
        "item0%1#0"
      ]
    },
    "527": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%21#0",
        "item1%1#0",
        "item10%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "528": {
      "op": "uncover 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%21#0",
        "item1%1#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%22#0",
        "item10%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "531": {
      "op": "uncover 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%22#0",
        "item2%1#0"
      ]
    },
    "533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%22#0",
        "item2%1#0",
        "0"
      ]
    },
    "534": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%22#0",
        "is_true%25#0",
        "item10%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%22#0",
        "is_true%25#0"
      ]
    },
    "535": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%25#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "536": {
      "op": "intc_2 // 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%25#0",
        "encoded_tuple_buffer%22#0",
        "9"
      ]
    },
    "537": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%22#0",
        "9",
        "is_true%25#0"
      ]
    },
    "539": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%23#0",
        "item10%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "540": {
      "op": "uncover 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%23#0",
        "item3%1#0"
      ]
    },
    "542": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%23#0",
        "item3%1#0",
        "0"
      ]
    },
    "543": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%23#0",
        "is_true%26#0",
        "item10%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%23#0",
        "is_true%26#0"
      ]
    },
    "544": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%26#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "545": {
      "op": "intc_3 // 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%26#0",
        "encoded_tuple_buffer%23#0",
        "10"
      ]
    },
    "546": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%23#0",
        "10",
        "is_true%26#0"
      ]
    },
    "548": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%24#0",
        "item10%1#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item4%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "549": {
      "op": "uncover 8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%24#0",
        "item4%1#0"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%24#0",
        "item4%1#0",
        "0"
      ]
    },
    "552": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%24#0",
        "is_true%27#0",
        "item10%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%24#0",
        "is_true%27#0"
      ]
    },
    "553": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%27#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "554": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%27#0",
        "encoded_tuple_buffer%24#0",
        "11"
      ]
    },
    "556": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%24#0",
        "11",
        "is_true%27#0"
      ]
    },
    "558": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%25#0",
        "item10%1#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item5%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "559": {
      "op": "uncover 7",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%25#0",
        "item5%1#0"
      ]
    },
    "561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%25#0",
        "item5%1#0",
        "0"
      ]
    },
    "562": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%25#0",
        "is_true%28#0",
        "item10%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%25#0",
        "is_true%28#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%28#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "564": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%28#0",
        "encoded_tuple_buffer%25#0",
        "12"
      ]
    },
    "566": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%25#0",
        "12",
        "is_true%28#0"
      ]
    },
    "568": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%26#0",
        "item10%1#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item6%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "569": {
      "op": "uncover 6",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%26#0",
        "item6%1#0"
      ]
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%26#0",
        "item6%1#0",
        "0"
      ]
    },
    "572": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%26#0",
        "is_true%29#0",
        "item10%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%26#0",
        "is_true%29#0"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%29#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "574": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%29#0",
        "encoded_tuple_buffer%26#0",
        "13"
      ]
    },
    "576": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%26#0",
        "13",
        "is_true%29#0"
      ]
    },
    "578": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%27#0",
        "item10%1#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item7%1#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "579": {
      "op": "uncover 5",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%27#0",
        "item7%1#0"
      ]
    },
    "581": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%27#0",
        "item7%1#0",
        "0"
      ]
    },
    "582": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%27#0",
        "is_true%30#0",
        "item10%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%27#0",
        "is_true%30#0"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%30#0",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "584": {
      "op": "pushint 14 // 14",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%30#0",
        "encoded_tuple_buffer%27#0",
        "14"
      ]
    },
    "586": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%27#0",
        "14",
        "is_true%30#0"
      ]
    },
    "588": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%28#0",
        "item10%1#0",
        "item8%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item8%1#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%28#0"
      ]
    },
    "589": {
      "op": "uncover 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%28#0",
        "item8%1#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%28#0",
        "item8%1#0",
        "0"
      ]
    },
    "592": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%28#0",
        "is_true%31#0",
        "item10%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%28#0",
        "is_true%31#0"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%31#0",
        "encoded_tuple_buffer%28#0"
      ]
    },
    "594": {
      "op": "pushint 15 // 15",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "is_true%31#0",
        "encoded_tuple_buffer%28#0",
        "15"
      ]
    },
    "596": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%28#0",
        "15",
        "is_true%31#0"
      ]
    },
    "598": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%29#0",
        "item10%1#0",
        "item9%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "item9%1#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%29#0"
      ]
    },
    "599": {
      "op": "uncover 3",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%29#0",
        "item9%1#0"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%30#0",
        "item10%1#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "item10%1#0",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded_tuple_buffer%30#0",
        "item10%1#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded_tuple_buffer%31#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "604": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%17#0"
      ]
    },
    "605": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "606": {
      "op": "dig 10",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0"
      ]
    },
    "608": {
      "callsub": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff",
      "op": "callsub test_stuff",
      "defined_out": [
        "boolean_packing#0",
        "concat#0",
        "k#0",
        "my_tuple#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "concat#0"
      ]
    },
    "611": {
      "op": "extract 2 0",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%18#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%18#0"
      ]
    },
    "614": {
      "op": "pushbytes \"hello world\"",
      "defined_out": [
        "\"hello world\"",
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%18#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%18#0",
        "\"hello world\""
      ]
    },
    "627": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%19#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%19#0"
      ]
    },
    "628": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0"
      ]
    },
    "629": {
      "op": "pushint 258 // 258",
      "defined_out": [
        "258",
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "258"
      ]
    },
    "632": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%20#0"
      ]
    },
    "633": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "634": {
      "callsub": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy",
      "op": "callsub test_copy"
    },
    "637": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "1"
      ]
    },
    "638": {
      "op": "return",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "639": {
      "block": "main_bool_false@12",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ]
    },
    "640": {
      "op": "b main_bool_merge@13"
    },
    "643": {
      "block": "main_bool_false@8",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ]
    },
    "644": {
      "op": "b main_bool_merge@9"
    },
    "647": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff",
      "params": {
        "test_tuple#0": "bytes"
      },
      "block": "test_stuff",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "650": {
      "op": "frame_dig -1",
      "defined_out": [
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)"
      ]
    },
    "652": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)",
        "0"
      ]
    },
    "653": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)",
        "0",
        "1"
      ]
    },
    "654": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0"
      ],
      "stack_out": [
        "item0%0#0"
      ]
    },
    "655": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "657": {
      "op": "intc_1 // 1",
      "stack_out": [
        "item0%0#0",
        "test_tuple#0 (copy)",
        "1"
      ]
    },
    "658": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "test_tuple#0 (copy)",
        "1",
        "1"
      ]
    },
    "659": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "660": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "662": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item0%0#0",
        "item1%0#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "test_tuple#0 (copy)",
        "2"
      ]
    },
    "664": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0"
      ]
    },
    "665": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "667": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "669": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "670": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "672": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "test_tuple#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "674": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "test_tuple#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "676": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0"
      ]
    },
    "677": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "679": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "681": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%1#0"
      ]
    },
    "682": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "684": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "685": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "687": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%1#0",
        "test_tuple#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "689": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "test_tuple#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "691": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0"
      ]
    },
    "692": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "694": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "test_tuple#0 (copy)",
        "6"
      ]
    },
    "696": {
      "op": "intc_1 // 1",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "test_tuple#0 (copy)",
        "6",
        "1"
      ]
    },
    "697": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0"
      ]
    },
    "698": {
      "op": "uncover 4",
      "defined_out": [
        "a#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0"
      ],
      "stack_out": [
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0",
        "a#0"
      ]
    },
    "700": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "item2%0#0",
        "item3%0#0",
        "item4%0#0"
      ],
      "stack_out": [
        "b#0",
        "item2%0#0",
        "a#0",
        "item3%0#0",
        "item4%0#0"
      ]
    },
    "702": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "item3%0#0",
        "item4%0#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "item3%0#0",
        "item4%0#0",
        "c#0"
      ]
    },
    "704": {
      "op": "cover 4",
      "stack_out": [
        "c#0",
        "b#0",
        "a#0",
        "item3%0#0",
        "item4%0#0"
      ]
    },
    "706": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "item4%0#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "a#0",
        "item4%0#0",
        "d#0"
      ]
    },
    "707": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "a#0",
        "e#0"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "0"
      ]
    },
    "713": {
      "op": "intc_1 // 1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "0",
        "1"
      ]
    },
    "714": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "715": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "717": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%0#0"
      ]
    },
    "718": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "719": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "721": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "6"
      ]
    },
    "723": {
      "op": "intc_1 // 1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "6",
        "1"
      ]
    },
    "724": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "725": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "727": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "728": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "729": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "731": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "733": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "item_start_offset%2#0"
      ]
    },
    "734": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "item_start_offset%2#0",
        "test_tuple#0 (copy)"
      ]
    },
    "736": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "737": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "test_tuple#0 (copy)"
      ]
    },
    "739": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "item_end_offset%2#0",
        "test_tuple#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "741": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "743": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "744": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)",
        "e#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%2#0",
        "d#0 (copy)"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%3#0"
      ]
    },
    "747": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "748": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "tmp%4#0"
      ]
    },
    "749": {
      "op": "uncover 3",
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "b#0"
      ]
    },
    "751": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "752": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%6#0"
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%6#0",
        "e#0"
      ]
    },
    "754": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "755": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "total#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "total#0"
      ]
    },
    "756": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "total#0",
        "c#0"
      ]
    },
    "758": {
      "op": "extract 2 0",
      "defined_out": [
        "d#0",
        "tmp%8#0",
        "total#0"
      ],
      "stack_out": [
        "d#0",
        "total#0",
        "tmp%8#0"
      ]
    },
    "761": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "d#0",
        "tmp%8#0",
        "total#0"
      ],
      "stack_out": [
        "d#0",
        "total#0",
        "tmp%8#0",
        "\" \""
      ]
    },
    "764": {
      "op": "concat",
      "defined_out": [
        "d#0",
        "tmp%9#0",
        "total#0"
      ],
      "stack_out": [
        "d#0",
        "total#0",
        "tmp%9#0"
      ]
    },
    "765": {
      "op": "uncover 2",
      "stack_out": [
        "total#0",
        "tmp%9#0",
        "d#0"
      ]
    },
    "767": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "770": {
      "op": "concat",
      "defined_out": [
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0"
      ]
    },
    "771": {
      "op": "dup",
      "defined_out": [
        "text#0",
        "text#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "text#0 (copy)"
      ]
    },
    "772": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "length%0#0"
      ]
    },
    "773": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "as_bytes%0#0"
      ]
    },
    "774": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "length_uint16%0#0"
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "length_uint16%0#0",
        "text#0"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "encoded_value%0#0"
      ]
    },
    "779": {
      "retsub": true,
      "op": "retsub"
    },
    "780": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy",
      "params": {},
      "block": "test_copy",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "781": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "782": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "783": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "786": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "length_uint16%0#0",
        "0x"
      ]
    },
    "787": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "788": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "0x"
      ]
    },
    "789": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x",
        "0x00",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "0x00"
      ]
    },
    "790": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "791": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "3"
      ]
    },
    "793": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%1#0"
      ]
    },
    "794": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "797": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "798": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "799": {
      "op": "concat",
      "defined_out": [
        "tup#0"
      ],
      "stack_out": [
        "tup#0"
      ]
    },
    "800": {
      "op": "dup",
      "defined_out": [
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "801": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "802": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "item_start_offset%0#0"
      ]
    },
    "803": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tup#0"
      ]
    },
    "804": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "805": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tup#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tup#0",
        "item_end_offset%0#0"
      ]
    },
    "806": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tup#0"
      ]
    },
    "807": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "808": {
      "op": "uncover 3",
      "stack_out": [
        "item_end_offset%0#0",
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "810": {
      "op": "uncover 3",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "812": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%0#0"
      ]
    },
    "813": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "816": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "817": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tup#0",
        "expr_value_trimmed%0#0",
        "0x",
        "0x00"
      ]
    },
    "818": {
      "op": "concat",
      "defined_out": [
        "data%0#0",
        "expr_value_trimmed%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "expr_value_trimmed%0#0",
        "data%0#0"
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concatenated%0#0"
      ]
    },
    "820": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "821": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "822": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concatenated%0#0",
        "as_bytes%2#0"
      ]
    },
    "823": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "tup#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "827": {
      "op": "concat",
      "defined_out": [
        "assigned_value%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "assigned_value%0#0"
      ]
    },
    "828": {
      "op": "dig 1",
      "stack_out": [
        "tup#0",
        "assigned_value%0#0",
        "tup#0 (copy)"
      ]
    },
    "830": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "assigned_value%0#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "831": {
      "op": "extract_uint16",
      "defined_out": [
        "assigned_value%0#0",
        "item_offset%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "assigned_value%0#0",
        "item_offset%0#0"
      ]
    },
    "832": {
      "op": "uncover 2",
      "stack_out": [
        "assigned_value%0#0",
        "item_offset%0#0",
        "tup#0"
      ]
    },
    "834": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "assigned_value%0#0",
        "item_offset%0#0",
        "tup#0"
      ],
      "stack_out": [
        "assigned_value%0#0",
        "item_offset%0#0",
        "tup#0",
        "0"
      ]
    },
    "835": {
      "op": "uncover 2",
      "stack_out": [
        "assigned_value%0#0",
        "tup#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "837": {
      "op": "extract3",
      "defined_out": [
        "assigned_value%0#0",
        "data_up_to_item%0#0"
      ],
      "stack_out": [
        "assigned_value%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "838": {
      "op": "swap",
      "stack_out": [
        "data_up_to_item%0#0",
        "assigned_value%0#0"
      ]
    },
    "839": {
      "op": "concat",
      "stack_out": [
        "tup#0"
      ]
    },
    "840": {
      "op": "dup",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "841": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "842": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "item_start_offset%1#0"
      ]
    },
    "843": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%1#0",
        "tup#0"
      ]
    },
    "844": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%1#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "845": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tup#0"
      ],
      "stack_out": [
        "item_start_offset%1#0",
        "tup#0",
        "item_end_offset%1#0"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tup#0"
      ]
    },
    "847": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "848": {
      "op": "uncover 3",
      "stack_out": [
        "item_end_offset%1#0",
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "850": {
      "op": "uncover 3",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "852": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%1#0"
      ]
    },
    "853": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "854": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "0x",
        "0x00"
      ]
    },
    "855": {
      "op": "concat",
      "defined_out": [
        "result%0#0",
        "tmp%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "result%0#0"
      ]
    },
    "856": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "result%0#0",
        "tmp%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "result%0#0",
        "0x0001"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "0x0001",
        "result%0#0"
      ]
    },
    "861": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "tmp%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%1#0",
        "array_data%0#0"
      ]
    },
    "862": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%2#0"
      ]
    },
    "863": {
      "op": "assert",
      "stack_out": [
        "tup#0"
      ]
    },
    "864": {
      "op": "dupn 2",
      "defined_out": [
        "tup#0",
        "tup#0 (copy)",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "866": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "867": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "item_start_offset%2#0"
      ]
    },
    "868": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%2#0",
        "tup#0"
      ]
    },
    "869": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "item_start_offset%2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "870": {
      "op": "len",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "item_start_offset%2#0",
        "tup#0",
        "item_end_offset%2#0"
      ]
    },
    "871": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tup#0"
      ]
    },
    "872": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "873": {
      "op": "uncover 3",
      "stack_out": [
        "tup2#0",
        "item_end_offset%2#0",
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "875": {
      "op": "uncover 3",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "877": {
      "op": "substring3",
      "defined_out": [
        "tmp%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0"
      ]
    },
    "878": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0"
      ]
    },
    "880": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "tmp%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "array_length%0#0"
      ]
    },
    "881": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "array_length%0#0",
        "0"
      ]
    },
    "882": {
      "op": ">",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "tmp%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "883": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0"
      ]
    },
    "884": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "2"
      ]
    },
    "886": {
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01",
        "2",
        "tmp%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tmp%3#0",
        "2",
        "0x01"
      ]
    },
    "887": {
      "op": "replace3",
      "defined_out": [
        "assigned_value%2#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "assigned_value%2#0"
      ]
    },
    "888": {
      "op": "dig 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "assigned_value%2#0",
        "tup#0 (copy)"
      ]
    },
    "890": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "assigned_value%2#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "891": {
      "op": "extract_uint16",
      "defined_out": [
        "assigned_value%2#0",
        "item_offset%1#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "assigned_value%2#0",
        "item_offset%1#0"
      ]
    },
    "892": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "assigned_value%2#0",
        "item_offset%1#0",
        "tup#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup2#0",
        "assigned_value%2#0",
        "item_offset%1#0",
        "tup#0",
        "0"
      ]
    },
    "895": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "assigned_value%2#0",
        "tup#0",
        "0",
        "item_offset%1#0"
      ]
    },
    "897": {
      "op": "extract3",
      "defined_out": [
        "assigned_value%2#0",
        "data_up_to_item%1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "assigned_value%2#0",
        "data_up_to_item%1#0"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "data_up_to_item%1#0",
        "assigned_value%2#0"
      ]
    },
    "899": {
      "op": "concat",
      "stack_out": [
        "tup2#0",
        "tup#0"
      ]
    },
    "900": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "901": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "902": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "item_start_offset%3#0"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%3#0",
        "tup#0"
      ]
    },
    "904": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "item_start_offset%3#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "905": {
      "op": "len",
      "defined_out": [
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "item_start_offset%3#0",
        "tup#0",
        "item_end_offset%3#0"
      ]
    },
    "906": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tup#0"
      ]
    },
    "907": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "item_end_offset%3#0",
        "tup#0",
        "item_start_offset%3#0"
      ]
    },
    "909": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "911": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tmp%4#0"
      ]
    },
    "912": {
      "op": "dig 1",
      "defined_out": [
        "tmp%4#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup2#0",
        "tmp%4#0",
        "tup2#0 (copy)"
      ]
    },
    "914": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tmp%4#0",
        "tup2#0 (copy)",
        "1"
      ]
    },
    "915": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%4#0",
        "tmp%4#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tmp%4#0",
        "item_start_offset%4#0"
      ]
    },
    "916": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%4#0",
        "tmp%4#0"
      ]
    },
    "917": {
      "op": "dig 2",
      "stack_out": [
        "tup2#0",
        "item_start_offset%4#0",
        "tmp%4#0",
        "tup2#0 (copy)"
      ]
    },
    "919": {
      "op": "len",
      "defined_out": [
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%4#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "item_start_offset%4#0",
        "tmp%4#0",
        "item_end_offset%4#0"
      ]
    },
    "920": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "tmp%4#0"
      ]
    },
    "921": {
      "op": "uncover 3",
      "stack_out": [
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "tmp%4#0",
        "tup2#0"
      ]
    },
    "923": {
      "op": "uncover 3",
      "stack_out": [
        "item_end_offset%4#0",
        "tmp%4#0",
        "tup2#0",
        "item_start_offset%4#0"
      ]
    },
    "925": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "tup2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "927": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "928": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "929": {
      "op": "assert",
      "stack_out": []
    },
    "930": {
      "retsub": true,
      "op": "retsub"
    }
  }
}