{
  "version": 3,
  "sources": [
    "../tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAc8C;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAiB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA5C;AAAO;;;AAAP;AAAiB;;;AAAjB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAA6D;;;AAA7D;AAAA;AAAA;AAAX;AAGI;;;;;;;;;;;;;;;;;;;;;;;AADG;AAAP;AAMQ;AAAA;AAAK;AAAL;AACA;AAAA;AAAK;AAAL;AACA;AAAA;AAAK;AAAL;AAAA;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AACA;AAAA;AAAK;AAAL;AAAA;;AAXU;AAEV;;;AAFU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAYV;;;AAZU;AAAA;AAAA;AAAlB;;AAegC;;;;;;AAAzB;AAAP;AACkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAlC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;AAAY;;AAAZ;AAAP;AACO;AAAA;AAAA;;;AAAM;;AAAA;AAAA;AAAN;;;AAAY;;AAAA;AAAA;AAAZ;;;AAAkB;;AAAA;AAAA;AAAlB;;;AAAwB;;AAAA;AAAA;AAAxB;;;AAA8B;;AAAA;AAAA;AAA9B;;;AAAoC;;AAAA;AAAA;AAApC;;;;AAAP;AACY;;AAAA;AAAA;AAAL;;;AAAU;;AAAA;AAAA;AAAV;;;;AAAA;AAAP;AACO;AAAA;AAAY;;AAAZ;AAAP;AAE6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAnB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAnB;AAAP;AAEgB;;AAAA;;;AACT;;;AAAiB;;;;;;;;;;;;;AAAjB;AAAP;AACgB;;;AAAT;AAAP;AAEA;;;AAEO;AAAP;;;;;;;;;AAKR;;;AAEwB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAhB;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAEO;;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAEQ;AAAW;;AAAA;AAAX;AAAsB;AAAA;AAAtB;AAAR;AACO;;AAAA;;;AAAW;;;AAAX;AAAiB;AAAA;;;AAAjB;AAEO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAd;AAIsB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAhB;AAAO;AAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAc;AAAd;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAU;AAAa;AAAb;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAV;AAAP;AAEO;;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAO;AAAP;AAAA;AAAA;;AAAA;AAAY;;;AAAZ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAV;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 9 10"
    },
    "7": {
      "op": "bytecblock 0x00 0x 0x68656c6c6f 0x776f726c64"
    },
    "24": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x68656c6c6f",
      "defined_out": [
        "0x68656c6c6f"
      ],
      "stack_out": [
        "0x68656c6c6f"
      ]
    },
    "25": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "26": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "27": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "30": {
      "op": "bytec_2 // 0x68656c6c6f",
      "stack_out": [
        "length_uint16%0#0",
        "0x68656c6c6f"
      ]
    },
    "31": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "32": {
      "op": "bytec_3 // 0x776f726c64",
      "defined_out": [
        "0x776f726c64",
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "0x776f726c64"
      ]
    },
    "33": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length%1#0"
      ]
    },
    "34": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_bytes%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_bytes%1#0"
      ]
    },
    "35": {
      "op": "extract 6 2",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length_uint16%1#0"
      ]
    },
    "38": {
      "op": "bytec_3 // 0x776f726c64",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "length_uint16%1#0",
        "0x776f726c64"
      ]
    },
    "39": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "40": {
      "op": "swap",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "41": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "0x"
      ]
    },
    "42": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x",
        "0x01",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "0x",
        "0x01"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%0#0"
      ]
    },
    "46": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%0#0",
        "0x02"
      ]
    },
    "49": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0",
        "encoded%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%1#0"
      ]
    },
    "50": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%1#0",
        "0x"
      ]
    },
    "51": {
      "op": "dig 2",
      "defined_out": [
        "0x",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%0#0 (copy)",
        "as_Encoded(len+utf8[])%1#0",
        "encoded%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%1#0",
        "0x",
        "as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "53": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(len+utf8[])%1#0",
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%1#0",
        "tail%0#0"
      ]
    },
    "54": {
      "op": "cover 2",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "encoded%1#0"
      ]
    },
    "56": {
      "op": "swap",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "57": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "data_length%0#0",
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "data_length%0#0"
      ]
    },
    "58": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "as_Encoded(len+utf8[])%1#0",
        "data_length%0#0",
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "data_length%0#0",
        "7"
      ]
    },
    "60": {
      "op": "+",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "61": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "current_tail_offset%0#0",
        "7"
      ]
    },
    "63": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "as_bytes%2#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "current_tail_offset%0#0",
        "as_bytes%2#0"
      ]
    },
    "64": {
      "op": "extract 6 2",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "encoded%1#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "67": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "encoded%1#0"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "71": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0"
      ]
    },
    "73": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%1#0"
      ],
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%1#0"
      ]
    },
    "76": {
      "op": "cover 2",
      "stack_out": [
        "tail%1#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "78": {
      "op": "swap",
      "stack_out": [
        "tail%1#0",
        "encoded%2#0",
        "current_tail_offset%0#0"
      ]
    },
    "79": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%2#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%2#0",
        "as_bytes%3#0"
      ]
    },
    "80": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%2#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "84": {
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "0xff"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0"
      ]
    },
    "90": {
      "op": "dup",
      "defined_out": [
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "my_tuple#0"
      ]
    },
    "91": {
      "op": "pushbytes 0x01020007000eff000568656c6c6f0005776f726c64",
      "defined_out": [
        "0x01020007000eff000568656c6c6f0005776f726c64",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "my_tuple#0",
        "0x01020007000eff000568656c6c6f0005776f726c64"
      ]
    },
    "114": {
      "op": "==",
      "defined_out": [
        "my_tuple#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0"
      ]
    },
    "116": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "0x00"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "0x00",
        "0"
      ]
    },
    "118": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "119": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0"
      ]
    },
    "120": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "0x00"
      ]
    },
    "121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "0x00",
        "0"
      ]
    },
    "122": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "123": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "126": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "127": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0"
      ]
    },
    "128": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "129": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "131": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "132": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%3#0"
      ]
    },
    "133": {
      "op": "cover 3",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "135": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "137": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "138": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%4#0"
      ]
    },
    "139": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "141": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "143": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "144": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%5#0"
      ]
    },
    "145": {
      "op": "cover 5",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "147": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "149": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "0"
      ]
    },
    "150": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%6#0"
      ]
    },
    "151": {
      "op": "cover 6",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "154": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "155": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "156": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%7#0"
      ]
    },
    "157": {
      "op": "cover 7",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "159": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0"
      ]
    },
    "161": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x00",
        "0",
        "1"
      ]
    },
    "162": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%8#0"
      ]
    },
    "163": {
      "op": "cover 8",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "165": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x"
      ]
    },
    "166": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x",
        "0x04",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "0x",
        "0x04"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "encoded%6#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%0#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "encoded%6#0"
      ]
    },
    "170": {
      "op": "uncover 3",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "encoded%6#0",
        "as_Encoded(bool8)%0#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(bool8)%1#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "encoded%7#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%1#0",
        "encoded%7#0"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%7#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "174": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%7#0",
        "as_Encoded(bool8)%1#0",
        "0"
      ]
    },
    "175": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "encoded%7#0",
        "get_bit%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%7#0",
        "get_bit%0#0"
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "get_bit%0#0",
        "encoded%7#0"
      ]
    },
    "177": {
      "op": "intc_2 // 9",
      "defined_out": [
        "9",
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "encoded%7#0",
        "get_bit%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "get_bit%0#0",
        "encoded%7#0",
        "9"
      ]
    },
    "178": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "encoded%7#0",
        "9",
        "get_bit%0#0"
      ]
    },
    "180": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%2#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%2#0",
        "set_bit%0#0"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "as_Encoded(bool8)%2#0"
      ]
    },
    "182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "as_Encoded(bool8)%2#0",
        "0"
      ]
    },
    "183": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%1#0",
        "my_tuple#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "get_bit%1#0"
      ]
    },
    "184": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0"
      ]
    },
    "185": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%1#0",
        "my_tuple#0",
        "set_bit%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "get_bit%1#0",
        "set_bit%0#0",
        "10"
      ]
    },
    "186": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%0#0",
        "10",
        "get_bit%1#0"
      ]
    },
    "188": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%3#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%3#0",
        "set_bit%1#0"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "set_bit%1#0",
        "as_Encoded(bool8)%3#0"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "set_bit%1#0",
        "as_Encoded(bool8)%3#0",
        "0"
      ]
    },
    "191": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%2#0",
        "my_tuple#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "set_bit%1#0",
        "get_bit%2#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "get_bit%2#0",
        "set_bit%1#0"
      ]
    },
    "193": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%2#0",
        "my_tuple#0",
        "set_bit%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "get_bit%2#0",
        "set_bit%1#0",
        "11"
      ]
    },
    "195": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "set_bit%1#0",
        "11",
        "get_bit%2#0"
      ]
    },
    "197": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%4#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%4#0",
        "set_bit%2#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "set_bit%2#0",
        "as_Encoded(bool8)%4#0"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "set_bit%2#0",
        "as_Encoded(bool8)%4#0",
        "0"
      ]
    },
    "200": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%3#0",
        "my_tuple#0",
        "set_bit%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "set_bit%2#0",
        "get_bit%3#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "get_bit%3#0",
        "set_bit%2#0"
      ]
    },
    "202": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%3#0",
        "my_tuple#0",
        "set_bit%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "get_bit%3#0",
        "set_bit%2#0",
        "12"
      ]
    },
    "204": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "set_bit%2#0",
        "12",
        "get_bit%3#0"
      ]
    },
    "206": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%5#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%5#0",
        "set_bit%3#0"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "set_bit%3#0",
        "as_Encoded(bool8)%5#0"
      ]
    },
    "208": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "set_bit%3#0",
        "as_Encoded(bool8)%5#0",
        "0"
      ]
    },
    "209": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%4#0",
        "my_tuple#0",
        "set_bit%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "set_bit%3#0",
        "get_bit%4#0"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "get_bit%4#0",
        "set_bit%3#0"
      ]
    },
    "211": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%4#0",
        "my_tuple#0",
        "set_bit%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "get_bit%4#0",
        "set_bit%3#0",
        "13"
      ]
    },
    "213": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "set_bit%3#0",
        "13",
        "get_bit%4#0"
      ]
    },
    "215": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%6#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%6#0",
        "set_bit%4#0"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "set_bit%4#0",
        "as_Encoded(bool8)%6#0"
      ]
    },
    "217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "set_bit%4#0",
        "as_Encoded(bool8)%6#0",
        "0"
      ]
    },
    "218": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%5#0",
        "my_tuple#0",
        "set_bit%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "set_bit%4#0",
        "get_bit%5#0"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "get_bit%5#0",
        "set_bit%4#0"
      ]
    },
    "220": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%5#0",
        "my_tuple#0",
        "set_bit%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "get_bit%5#0",
        "set_bit%4#0",
        "14"
      ]
    },
    "222": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "set_bit%4#0",
        "14",
        "get_bit%5#0"
      ]
    },
    "224": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%7#0",
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "as_Encoded(bool8)%7#0",
        "set_bit%5#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "set_bit%5#0",
        "as_Encoded(bool8)%7#0"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "set_bit%5#0",
        "as_Encoded(bool8)%7#0",
        "0"
      ]
    },
    "227": {
      "op": "getbit",
      "defined_out": [
        "as_Encoded(bool8)%8#0",
        "get_bit%6#0",
        "my_tuple#0",
        "set_bit%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "set_bit%5#0",
        "get_bit%6#0"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%6#0",
        "set_bit%5#0"
      ]
    },
    "229": {
      "op": "pushint 15 // 15",
      "defined_out": [
        "15",
        "as_Encoded(bool8)%8#0",
        "get_bit%6#0",
        "my_tuple#0",
        "set_bit%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "get_bit%6#0",
        "set_bit%5#0",
        "15"
      ]
    },
    "231": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "set_bit%5#0",
        "15",
        "get_bit%6#0"
      ]
    },
    "233": {
      "op": "setbit",
      "defined_out": [
        "as_Encoded(bool8)%8#0",
        "my_tuple#0",
        "set_bit%6#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "as_Encoded(bool8)%8#0",
        "set_bit%6#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "as_Encoded(bool8)%8#0"
      ]
    },
    "235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "as_Encoded(bool8)%8#0",
        "0"
      ]
    },
    "236": {
      "op": "getbit",
      "defined_out": [
        "get_bit%7#0",
        "my_tuple#0",
        "set_bit%6#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "get_bit%7#0"
      ]
    },
    "237": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "get_bit%7#0",
        "0x00"
      ]
    },
    "238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "get_bit%7#0",
        "0x00",
        "0"
      ]
    },
    "239": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "0x00",
        "0",
        "get_bit%7#0"
      ]
    },
    "241": {
      "op": "setbit",
      "defined_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "set_bit%7#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "set_bit%6#0",
        "set_bit%7#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded%8#0"
      ]
    },
    "243": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "encoded%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded%8#0",
        "0x10"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "encoded%9#0"
      ]
    },
    "247": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "my_tuple#0",
        "encoded%9#0",
        "0x"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0"
      ]
    },
    "249": {
      "op": "dupn 2",
      "defined_out": [
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "251": {
      "op": "pushbytes 0x04bd8010",
      "defined_out": [
        "0x04bd8010",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0x04bd8010"
      ]
    },
    "257": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "my_tuple#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "tmp%1#0"
      ]
    },
    "258": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0"
      ]
    },
    "259": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "260": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0"
      ]
    },
    "261": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0",
        "1"
      ]
    },
    "262": {
      "op": "extract3",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "boolean_packing#0",
        "extract%0#0"
      ]
    },
    "263": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0"
      ]
    },
    "264": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "265": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%0#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "8"
      ]
    },
    "267": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%8#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "get_bit%8#0"
      ]
    },
    "268": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "get_bit%8#0",
        "0x00"
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "get_bit%8#0",
        "0x00",
        "0"
      ]
    },
    "270": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%8#0"
      ]
    },
    "272": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "boolean_packing#0",
        "tmp%2#0"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0"
      ]
    },
    "274": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "275": {
      "op": "intc_2 // 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "9"
      ]
    },
    "276": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%9#0",
        "my_tuple#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "get_bit%9#0"
      ]
    },
    "277": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "get_bit%9#0",
        "0x00"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "get_bit%9#0",
        "0x00",
        "0"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%9#0"
      ]
    },
    "281": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "boolean_packing#0",
        "tmp%3#0"
      ]
    },
    "282": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0"
      ]
    },
    "283": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "284": {
      "op": "intc_3 // 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "10"
      ]
    },
    "285": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%10#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "get_bit%10#0"
      ]
    },
    "286": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "get_bit%10#0",
        "0x00"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "get_bit%10#0",
        "0x00",
        "0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%10#0"
      ]
    },
    "290": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "boolean_packing#0",
        "tmp%4#0"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0"
      ]
    },
    "292": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "293": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "11"
      ]
    },
    "295": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%11#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "get_bit%11#0"
      ]
    },
    "296": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "get_bit%11#0",
        "0x00"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "get_bit%11#0",
        "0x00",
        "0"
      ]
    },
    "298": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%11#0"
      ]
    },
    "300": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "boolean_packing#0",
        "tmp%5#0"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0"
      ]
    },
    "302": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "303": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "12"
      ]
    },
    "305": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%12#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "get_bit%12#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "get_bit%12#0",
        "0x00"
      ]
    },
    "307": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "get_bit%12#0",
        "0x00",
        "0"
      ]
    },
    "308": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%12#0"
      ]
    },
    "310": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "boolean_packing#0",
        "tmp%6#0"
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0"
      ]
    },
    "312": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "313": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "13"
      ]
    },
    "315": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%13#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "get_bit%13#0"
      ]
    },
    "316": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "get_bit%13#0",
        "0x00"
      ]
    },
    "317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "get_bit%13#0",
        "0x00",
        "0"
      ]
    },
    "318": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%13#0"
      ]
    },
    "320": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "boolean_packing#0",
        "tmp%7#0"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0"
      ]
    },
    "322": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "323": {
      "op": "pushint 14 // 14",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "14"
      ]
    },
    "325": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%14#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "get_bit%14#0"
      ]
    },
    "326": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "get_bit%14#0",
        "0x00"
      ]
    },
    "327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "get_bit%14#0",
        "0x00",
        "0"
      ]
    },
    "328": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%14#0"
      ]
    },
    "330": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "boolean_packing#0",
        "tmp%8#0"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0"
      ]
    },
    "332": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "333": {
      "op": "pushint 15 // 15",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "15"
      ]
    },
    "335": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%15#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "get_bit%15#0"
      ]
    },
    "336": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "get_bit%15#0",
        "0x00"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "get_bit%15#0",
        "0x00",
        "0"
      ]
    },
    "338": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%15#0"
      ]
    },
    "340": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "boolean_packing#0",
        "tmp%9#0"
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0"
      ]
    },
    "342": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "343": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%0#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "16"
      ]
    },
    "345": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "get_bit%16#0",
        "my_tuple#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "get_bit%16#0"
      ]
    },
    "346": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "get_bit%16#0",
        "0x00"
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "get_bit%16#0",
        "0x00",
        "0"
      ]
    },
    "348": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%16#0"
      ]
    },
    "350": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "boolean_packing#0",
        "tmp%10#0"
      ]
    },
    "351": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0"
      ]
    },
    "352": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "353": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%0#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3"
      ]
    },
    "355": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3",
        "1"
      ]
    },
    "356": {
      "op": "extract3",
      "defined_out": [
        "boolean_packing#0",
        "extract%0#0",
        "extract%1#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "extract%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0"
      ]
    },
    "357": {
      "op": "uncover 11",
      "defined_out": [
        "a#0",
        "boolean_packing#0",
        "extract%1#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0",
        "a#0"
      ]
    },
    "359": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "a#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0"
      ]
    },
    "361": {
      "op": "uncover 11",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "extract%1#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "a#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0",
        "b#0"
      ]
    },
    "363": {
      "op": "cover 5",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "extract%1#0",
        "f#0",
        "g#0",
        "h#0",
        "my_tuple#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "b#0",
        "a#0",
        "tmp%9#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0"
      ]
    },
    "365": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "extract%1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "my_tuple#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "b#0",
        "a#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0",
        "i#0"
      ]
    },
    "367": {
      "op": "cover 5",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "b#0",
        "a#0",
        "tmp%10#0",
        "boolean_packing#0",
        "extract%1#0"
      ]
    },
    "369": {
      "op": "uncover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "extract%1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "extract%1#0",
        "j#0"
      ]
    },
    "371": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0"
      ]
    },
    "373": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0",
        "k#0"
      ]
    },
    "374": {
      "op": "cover 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "boolean_packing#0",
        "k#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0"
      ]
    },
    "377": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0",
        "3"
      ]
    },
    "379": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "k#0",
        "boolean_packing#0",
        "3",
        "1"
      ]
    },
    "380": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "381": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0",
        "tmp%11#0"
      ]
    },
    "382": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "a#0"
      ]
    },
    "383": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%12#0"
      ]
    },
    "384": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%12#0",
        "4"
      ]
    },
    "386": {
      "op": "==",
      "defined_out": [
        "b#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "tmp%13#0"
      ]
    },
    "387": {
      "error": "a is 4",
      "op": "assert // a is 4",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0"
      ]
    },
    "388": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "b#0",
        "0x00"
      ]
    },
    "389": {
      "op": "!=",
      "defined_out": [
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%14#0"
      ]
    },
    "390": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "393": {
      "block": "main_and_contd@1",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 7",
      "defined_out": [
        "d#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "d#0"
      ]
    },
    "395": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "d#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "d#0",
        "0x00"
      ]
    },
    "396": {
      "op": "!=",
      "defined_out": [
        "d#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%15#0"
      ]
    },
    "397": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "400": {
      "block": "main_and_contd@2",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 6",
      "defined_out": [
        "e#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "e#0"
      ]
    },
    "402": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "e#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "e#0",
        "0x00"
      ]
    },
    "403": {
      "op": "!=",
      "defined_out": [
        "e#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%16#0"
      ]
    },
    "404": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "407": {
      "block": "main_and_contd@3",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 5",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "f#0"
      ]
    },
    "409": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "f#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "f#0",
        "0x00"
      ]
    },
    "410": {
      "op": "!=",
      "defined_out": [
        "f#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%17#0"
      ]
    },
    "411": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "414": {
      "block": "main_and_contd@4",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 4",
      "defined_out": [
        "g#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "g#0"
      ]
    },
    "416": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "g#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "g#0",
        "0x00"
      ]
    },
    "417": {
      "op": "!=",
      "defined_out": [
        "g#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%18#0"
      ]
    },
    "418": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "421": {
      "block": "main_and_contd@5",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "i#0"
      ]
    },
    "423": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "i#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "i#0",
        "0x00"
      ]
    },
    "424": {
      "op": "!=",
      "defined_out": [
        "i#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%19#0"
      ]
    },
    "425": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "428": {
      "block": "main_and_contd@6",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "j#0"
      ]
    },
    "430": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "j#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "j#0",
        "0x00"
      ]
    },
    "431": {
      "op": "!=",
      "defined_out": [
        "j#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%20#0"
      ]
    },
    "432": {
      "op": "bz main_bool_false@8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "435": {
      "block": "main_bool_true@7",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ]
    },
    "436": {
      "block": "main_bool_merge@9",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ],
      "error": "b,d,e,f,g,i,j are true",
      "op": "assert // b,d,e,f,g,i,j are true",
      "defined_out": [],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "437": {
      "op": "dig 8",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "c#0"
      ]
    },
    "439": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "c#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "c#0",
        "0x00"
      ]
    },
    "440": {
      "op": "!=",
      "defined_out": [
        "c#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%21#0"
      ]
    },
    "441": {
      "op": "bnz main_bool_true@11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "444": {
      "block": "main_or_contd@10",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "h#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "h#0"
      ]
    },
    "446": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "h#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "h#0",
        "0x00"
      ]
    },
    "447": {
      "op": "!=",
      "defined_out": [
        "h#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%22#0"
      ]
    },
    "448": {
      "op": "bz main_bool_false@12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "451": {
      "block": "main_bool_true@11",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ]
    },
    "452": {
      "block": "main_bool_merge@13",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%23#0"
      ]
    },
    "453": {
      "error": "c and h are false",
      "op": "assert // c and h are false",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "454": {
      "op": "dup",
      "defined_out": [
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "k#0"
      ]
    },
    "455": {
      "op": "btoi",
      "defined_out": [
        "k#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%24#0"
      ]
    },
    "456": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "k#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%24#0",
        "16"
      ]
    },
    "458": {
      "op": "==",
      "defined_out": [
        "k#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%25#0"
      ]
    },
    "459": {
      "error": "k is 16",
      "op": "assert // k is 16",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "460": {
      "op": "dig 9",
      "defined_out": [
        "boolean_packing#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0"
      ]
    },
    "462": {
      "op": "dup",
      "defined_out": [
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0"
      ]
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "0",
        "1"
      ]
    },
    "465": {
      "op": "extract3",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "extract%3#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0"
      ]
    },
    "467": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "468": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "8"
      ]
    },
    "470": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%17#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "get_bit%17#0"
      ]
    },
    "471": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%17#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "get_bit%17#0",
        "0x00"
      ]
    },
    "472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "get_bit%17#0",
        "0x00",
        "0"
      ]
    },
    "473": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%17#0"
      ]
    },
    "475": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "boolean_packing#0",
        "tmp%26#0"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0"
      ]
    },
    "477": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "478": {
      "op": "intc_2 // 9",
      "defined_out": [
        "9",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "9"
      ]
    },
    "479": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%18#0",
        "k#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "get_bit%18#0"
      ]
    },
    "480": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "get_bit%18#0",
        "0x00"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "get_bit%18#0",
        "0x00",
        "0"
      ]
    },
    "482": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%18#0"
      ]
    },
    "484": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "boolean_packing#0",
        "tmp%27#0"
      ]
    },
    "485": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0"
      ]
    },
    "486": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "487": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "10"
      ]
    },
    "488": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%19#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "get_bit%19#0"
      ]
    },
    "489": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "get_bit%19#0",
        "0x00"
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "get_bit%19#0",
        "0x00",
        "0"
      ]
    },
    "491": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%19#0"
      ]
    },
    "493": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "boolean_packing#0",
        "tmp%28#0"
      ]
    },
    "494": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0"
      ]
    },
    "495": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "496": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "11"
      ]
    },
    "498": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%20#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "get_bit%20#0"
      ]
    },
    "499": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "get_bit%20#0",
        "0x00"
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "get_bit%20#0",
        "0x00",
        "0"
      ]
    },
    "501": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%20#0"
      ]
    },
    "503": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "boolean_packing#0",
        "tmp%29#0"
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0"
      ]
    },
    "505": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "506": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "12"
      ]
    },
    "508": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%21#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "get_bit%21#0"
      ]
    },
    "509": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "get_bit%21#0",
        "0x00"
      ]
    },
    "510": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "get_bit%21#0",
        "0x00",
        "0"
      ]
    },
    "511": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%21#0"
      ]
    },
    "513": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "boolean_packing#0",
        "tmp%30#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0"
      ]
    },
    "515": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "516": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "13"
      ]
    },
    "518": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%22#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "get_bit%22#0"
      ]
    },
    "519": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "get_bit%22#0",
        "0x00"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "get_bit%22#0",
        "0x00",
        "0"
      ]
    },
    "521": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%22#0"
      ]
    },
    "523": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "boolean_packing#0",
        "tmp%31#0"
      ]
    },
    "524": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0"
      ]
    },
    "525": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "526": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "14"
      ]
    },
    "528": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%23#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "get_bit%23#0"
      ]
    },
    "529": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "get_bit%23#0",
        "0x00"
      ]
    },
    "530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "get_bit%23#0",
        "0x00",
        "0"
      ]
    },
    "531": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%23#0"
      ]
    },
    "533": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "boolean_packing#0",
        "tmp%32#0"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0"
      ]
    },
    "535": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "536": {
      "op": "pushint 15 // 15",
      "defined_out": [
        "15",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "15"
      ]
    },
    "538": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%24#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "get_bit%24#0"
      ]
    },
    "539": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "get_bit%24#0",
        "0x00"
      ]
    },
    "540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "get_bit%24#0",
        "0x00",
        "0"
      ]
    },
    "541": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%24#0"
      ]
    },
    "543": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "boolean_packing#0",
        "tmp%33#0"
      ]
    },
    "544": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0"
      ]
    },
    "545": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "546": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "16"
      ]
    },
    "548": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "get_bit%25#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "get_bit%25#0"
      ]
    },
    "549": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "get_bit%25#0",
        "0x00"
      ]
    },
    "550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "get_bit%25#0",
        "0x00",
        "0"
      ]
    },
    "551": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "0x00",
        "0",
        "get_bit%25#0"
      ]
    },
    "553": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "boolean_packing#0",
        "tmp%34#0"
      ]
    },
    "554": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0"
      ]
    },
    "555": {
      "op": "dup",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)"
      ]
    },
    "556": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "extract%3#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3"
      ]
    },
    "558": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "boolean_packing#0 (copy)",
        "3",
        "1"
      ]
    },
    "559": {
      "op": "extract3",
      "defined_out": [
        "boolean_packing#0",
        "extract%3#0",
        "extract%4#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "extract%4#0"
      ]
    },
    "560": {
      "op": "cover 3",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0"
      ]
    },
    "562": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "boolean_packing#0",
        "extract%3#0",
        "extract%4#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "0x"
      ]
    },
    "563": {
      "op": "uncover 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "0x",
        "extract%3#0"
      ]
    },
    "565": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded%11#0",
        "extract%4#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%11#0"
      ]
    },
    "566": {
      "op": "uncover 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%11#0",
        "tmp%26#0"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded%12#0",
        "extract%4#0",
        "k#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%12#0"
      ]
    },
    "569": {
      "op": "uncover 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%12#0",
        "tmp%27#0"
      ]
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%12#0",
        "tmp%27#0",
        "0"
      ]
    },
    "572": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "encoded%12#0",
        "extract%4#0",
        "get_bit%26#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%12#0",
        "get_bit%26#0"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%26#0",
        "encoded%12#0"
      ]
    },
    "574": {
      "op": "intc_2 // 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%26#0",
        "encoded%12#0",
        "9"
      ]
    },
    "575": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "encoded%12#0",
        "9",
        "get_bit%26#0"
      ]
    },
    "577": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%8#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%8#0"
      ]
    },
    "578": {
      "op": "uncover 9",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%8#0",
        "tmp%28#0"
      ]
    },
    "580": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%8#0",
        "tmp%28#0",
        "0"
      ]
    },
    "581": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%27#0",
        "k#0",
        "set_bit%8#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%8#0",
        "get_bit%27#0"
      ]
    },
    "582": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%27#0",
        "set_bit%8#0"
      ]
    },
    "583": {
      "op": "intc_3 // 10",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%27#0",
        "set_bit%8#0",
        "10"
      ]
    },
    "584": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%8#0",
        "10",
        "get_bit%27#0"
      ]
    },
    "586": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%9#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%9#0"
      ]
    },
    "587": {
      "op": "uncover 8",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%9#0",
        "tmp%29#0"
      ]
    },
    "589": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%9#0",
        "tmp%29#0",
        "0"
      ]
    },
    "590": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%28#0",
        "k#0",
        "set_bit%9#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%9#0",
        "get_bit%28#0"
      ]
    },
    "591": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%28#0",
        "set_bit%9#0"
      ]
    },
    "592": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%28#0",
        "set_bit%9#0",
        "11"
      ]
    },
    "594": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%9#0",
        "11",
        "get_bit%28#0"
      ]
    },
    "596": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%10#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%10#0"
      ]
    },
    "597": {
      "op": "uncover 7",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%10#0",
        "tmp%30#0"
      ]
    },
    "599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%10#0",
        "tmp%30#0",
        "0"
      ]
    },
    "600": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%29#0",
        "k#0",
        "set_bit%10#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%10#0",
        "get_bit%29#0"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%29#0",
        "set_bit%10#0"
      ]
    },
    "602": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%29#0",
        "set_bit%10#0",
        "12"
      ]
    },
    "604": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%10#0",
        "12",
        "get_bit%29#0"
      ]
    },
    "606": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%11#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%31#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%11#0"
      ]
    },
    "607": {
      "op": "uncover 6",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%11#0",
        "tmp%31#0"
      ]
    },
    "609": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%11#0",
        "tmp%31#0",
        "0"
      ]
    },
    "610": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%30#0",
        "k#0",
        "set_bit%11#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%11#0",
        "get_bit%30#0"
      ]
    },
    "611": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%30#0",
        "set_bit%11#0"
      ]
    },
    "612": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%30#0",
        "set_bit%11#0",
        "13"
      ]
    },
    "614": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%11#0",
        "13",
        "get_bit%30#0"
      ]
    },
    "616": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%12#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%32#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%12#0"
      ]
    },
    "617": {
      "op": "uncover 5",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%12#0",
        "tmp%32#0"
      ]
    },
    "619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%12#0",
        "tmp%32#0",
        "0"
      ]
    },
    "620": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%31#0",
        "k#0",
        "set_bit%12#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%12#0",
        "get_bit%31#0"
      ]
    },
    "621": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%31#0",
        "set_bit%12#0"
      ]
    },
    "622": {
      "op": "pushint 14 // 14",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%31#0",
        "set_bit%12#0",
        "14"
      ]
    },
    "624": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%12#0",
        "14",
        "get_bit%31#0"
      ]
    },
    "626": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%13#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%33#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%13#0"
      ]
    },
    "627": {
      "op": "uncover 3",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%13#0",
        "tmp%33#0"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%13#0",
        "tmp%33#0",
        "0"
      ]
    },
    "630": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%32#0",
        "k#0",
        "set_bit%13#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%13#0",
        "get_bit%32#0"
      ]
    },
    "631": {
      "op": "swap",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%32#0",
        "set_bit%13#0"
      ]
    },
    "632": {
      "op": "pushint 15 // 15",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "get_bit%32#0",
        "set_bit%13#0",
        "15"
      ]
    },
    "634": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%13#0",
        "15",
        "get_bit%32#0"
      ]
    },
    "636": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%14#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "tmp%34#0",
        "boolean_packing#0",
        "set_bit%14#0"
      ]
    },
    "637": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "tmp%34#0"
      ]
    },
    "639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "tmp%34#0",
        "0"
      ]
    },
    "640": {
      "op": "getbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "get_bit%33#0",
        "k#0",
        "set_bit%14#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "get_bit%33#0"
      ]
    },
    "641": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "get_bit%33#0",
        "0x00"
      ]
    },
    "642": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "get_bit%33#0",
        "0x00",
        "0"
      ]
    },
    "643": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "0x00",
        "0",
        "get_bit%33#0"
      ]
    },
    "645": {
      "op": "setbit",
      "defined_out": [
        "boolean_packing#0",
        "extract%4#0",
        "k#0",
        "set_bit%14#0",
        "set_bit%15#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "set_bit%14#0",
        "set_bit%15#0"
      ]
    },
    "646": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded%13#0",
        "extract%4#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "extract%4#0",
        "boolean_packing#0",
        "encoded%13#0"
      ]
    },
    "647": {
      "op": "uncover 2",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded%13#0",
        "extract%4#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded%14#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded%14#0"
      ]
    },
    "650": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded%14#0",
        "0x"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "boolean_packing#0",
        "encoded%15#0",
        "k#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "boolean_packing#0",
        "encoded%15#0"
      ]
    },
    "652": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%35#0"
      ]
    },
    "653": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "654": {
      "op": "dig 10",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "my_tuple#0"
      ]
    },
    "656": {
      "callsub": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff",
      "op": "callsub test_stuff",
      "defined_out": [
        "boolean_packing#0",
        "concat#0",
        "k#0",
        "my_tuple#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "concat#0"
      ]
    },
    "659": {
      "op": "extract 2 0",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%38#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%38#0"
      ]
    },
    "662": {
      "op": "pushbytes \"hello world\"",
      "defined_out": [
        "\"hello world\"",
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%38#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%38#0",
        "\"hello world\""
      ]
    },
    "675": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%39#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "tmp%39#0"
      ]
    },
    "676": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0"
      ]
    },
    "677": {
      "op": "pushint 258 // 258",
      "defined_out": [
        "258",
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "total#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "total#0",
        "258"
      ]
    },
    "680": {
      "op": "==",
      "defined_out": [
        "boolean_packing#0",
        "k#0",
        "my_tuple#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "tmp%40#0"
      ]
    },
    "681": {
      "op": "assert",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "682": {
      "callsub": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy",
      "op": "callsub test_copy"
    },
    "685": {
      "op": "intc_1 // 1",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "1"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "687": {
      "block": "main_bool_false@12",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "or_result%0#0"
      ]
    },
    "688": {
      "op": "b main_bool_merge@13"
    },
    "691": {
      "block": "main_bool_false@8",
      "stack_in": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "my_tuple#0",
        "boolean_packing#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "and_result%0#0"
      ]
    },
    "692": {
      "op": "b main_bool_merge@9"
    },
    "695": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff",
      "params": {
        "test_tuple#0": "bytes"
      },
      "block": "test_stuff",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "698": {
      "block": "test_stuff_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)"
      ]
    },
    "700": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)",
        "0"
      ]
    },
    "701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "test_tuple#0 (copy)",
        "0",
        "1"
      ]
    },
    "702": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0"
      ],
      "stack_out": [
        "extract%0#0"
      ]
    },
    "703": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "705": {
      "op": "intc_1 // 1",
      "stack_out": [
        "extract%0#0",
        "test_tuple#0 (copy)",
        "1"
      ]
    },
    "706": {
      "op": "dup",
      "stack_out": [
        "extract%0#0",
        "test_tuple#0 (copy)",
        "1",
        "1"
      ]
    },
    "707": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0",
        "extract%1#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0"
      ]
    },
    "708": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "710": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "extract%0#0",
        "extract%1#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "test_tuple#0 (copy)",
        "2"
      ]
    },
    "712": {
      "op": "extract_uint16",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0"
      ]
    },
    "713": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "715": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "717": {
      "op": "extract_uint16",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "extract_uint16%1#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "extract_uint16%1#0"
      ]
    },
    "718": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%0#0",
        "extract_uint16%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "720": {
      "op": "uncover 2",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%1#0",
        "test_tuple#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "722": {
      "op": "uncover 2",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "test_tuple#0 (copy)",
        "extract_uint16%0#0",
        "extract_uint16%1#0"
      ]
    },
    "724": {
      "op": "substring3",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0"
      ]
    },
    "725": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "727": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "729": {
      "op": "extract_uint16",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%2#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "extract_uint16%2#0"
      ]
    },
    "730": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "extract_uint16%2#0",
        "test_tuple#0 (copy)"
      ]
    },
    "732": {
      "op": "len",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "extract_uint16%2#0",
        "len%0#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "extract_uint16%2#0",
        "len%0#0"
      ]
    },
    "733": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "extract_uint16%2#0",
        "len%0#0",
        "test_tuple#0 (copy)"
      ]
    },
    "735": {
      "op": "uncover 2",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "len%0#0",
        "test_tuple#0 (copy)",
        "extract_uint16%2#0"
      ]
    },
    "737": {
      "op": "uncover 2",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "test_tuple#0 (copy)",
        "extract_uint16%2#0",
        "len%0#0"
      ]
    },
    "739": {
      "op": "substring3",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0"
      ]
    },
    "740": {
      "op": "frame_dig -1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "742": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "test_tuple#0 (copy)"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "test_tuple#0 (copy)",
        "6"
      ]
    },
    "744": {
      "op": "intc_1 // 1",
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "test_tuple#0 (copy)",
        "6",
        "1"
      ]
    },
    "745": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0",
        "extract%1#0",
        "extract%2#0",
        "substring3%0#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "extract%0#0",
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "extract%2#0"
      ]
    },
    "746": {
      "op": "uncover 4",
      "defined_out": [
        "a#0",
        "extract%1#0",
        "extract%2#0",
        "substring3%0#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "extract%1#0",
        "substring3%0#0",
        "substring3%1#0",
        "extract%2#0",
        "a#0"
      ]
    },
    "748": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "extract%2#0",
        "substring3%0#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "b#0",
        "substring3%0#0",
        "a#0",
        "substring3%1#0",
        "extract%2#0"
      ]
    },
    "750": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "extract%2#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "substring3%1#0",
        "extract%2#0",
        "c#0"
      ]
    },
    "752": {
      "op": "cover 4",
      "stack_out": [
        "c#0",
        "b#0",
        "a#0",
        "substring3%1#0",
        "extract%2#0"
      ]
    },
    "754": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "extract%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "a#0",
        "extract%2#0",
        "d#0"
      ]
    },
    "755": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "a#0",
        "e#0"
      ]
    },
    "757": {
      "op": "swap",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "758": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "0"
      ]
    },
    "761": {
      "op": "intc_1 // 1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "0",
        "1"
      ]
    },
    "762": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "763": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "765": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%0#0"
      ]
    },
    "766": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "767": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "769": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "6"
      ]
    },
    "771": {
      "op": "intc_1 // 1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "6",
        "1"
      ]
    },
    "772": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "773": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "775": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "776": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "777": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)"
      ]
    },
    "779": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "4"
      ]
    },
    "781": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "extract_uint16%3#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "extract_uint16%3#0"
      ]
    },
    "782": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "extract_uint16%3#0",
        "test_tuple#0 (copy)"
      ]
    },
    "784": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "extract_uint16%3#0",
        "len%1#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "extract_uint16%3#0",
        "len%1#0"
      ]
    },
    "785": {
      "op": "frame_dig -1",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "extract_uint16%3#0",
        "len%1#0",
        "test_tuple#0 (copy)"
      ]
    },
    "787": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "len%1#0",
        "test_tuple#0 (copy)",
        "extract_uint16%3#0"
      ]
    },
    "789": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "test_tuple#0 (copy)",
        "extract_uint16%3#0",
        "len%1#0"
      ]
    },
    "791": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "substring3%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "substring3%2#0"
      ]
    },
    "792": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)",
        "e#0",
        "substring3%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "substring3%2#0",
        "d#0 (copy)"
      ]
    },
    "794": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "795": {
      "op": "assert",
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "a#0"
      ]
    },
    "796": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "d#0",
        "e#0",
        "tmp%3#0"
      ]
    },
    "797": {
      "op": "uncover 3",
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%3#0",
        "b#0"
      ]
    },
    "799": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "800": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%5#0"
      ]
    },
    "801": {
      "op": "swap",
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%5#0",
        "e#0"
      ]
    },
    "802": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "803": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "total#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "total#0"
      ]
    },
    "804": {
      "op": "swap",
      "stack_out": [
        "c#0",
        "total#0",
        "d#0"
      ]
    },
    "805": {
      "op": "uncover 2",
      "stack_out": [
        "total#0",
        "d#0",
        "c#0"
      ]
    },
    "807": {
      "op": "extract 2 0",
      "defined_out": [
        "d#0",
        "tmp%8#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "d#0",
        "tmp%8#0"
      ]
    },
    "810": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "d#0",
        "tmp%8#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "d#0",
        "tmp%8#0",
        "\" \""
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "d#0",
        "tmp%9#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "d#0",
        "tmp%9#0"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "tmp%9#0",
        "d#0"
      ]
    },
    "815": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "818": {
      "op": "concat",
      "defined_out": [
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0"
      ]
    },
    "819": {
      "op": "dup",
      "defined_out": [
        "text#0",
        "text#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "text#0 (copy)"
      ]
    },
    "820": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "length%0#0"
      ]
    },
    "821": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "as_bytes%0#0"
      ]
    },
    "822": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "text#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "text#0",
        "length_uint16%0#0"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "length_uint16%0#0",
        "text#0"
      ]
    },
    "826": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "827": {
      "retsub": true,
      "op": "retsub"
    },
    "828": {
      "subroutine": "test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy",
      "params": {},
      "block": "test_copy_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "829": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "830": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "831": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "834": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "length_uint16%0#0",
        "0x"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "836": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "0x"
      ]
    },
    "837": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x",
        "0x00",
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "0x",
        "0x00"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "encoded%0#0"
      ]
    },
    "839": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "840": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%0#0",
        "as_Encoded(len+uint8[])%0#0",
        "0x"
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "0x",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "842": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "843": {
      "op": "swap",
      "stack_out": [
        "tail%0#0",
        "encoded%0#0"
      ]
    },
    "844": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "3"
      ]
    },
    "846": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "as_bytes%1#0"
      ]
    },
    "847": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "850": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%1#0"
      ]
    },
    "851": {
      "op": "swap",
      "stack_out": [
        "encoded%1#0",
        "tail%0#0"
      ]
    },
    "852": {
      "op": "concat",
      "defined_out": [
        "tup#0"
      ],
      "stack_out": [
        "tup#0"
      ]
    },
    "853": {
      "op": "dup",
      "defined_out": [
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "854": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "855": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_uint16%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "extract_uint16%0#0"
      ]
    },
    "856": {
      "op": "swap",
      "stack_out": [
        "extract_uint16%0#0",
        "tup#0"
      ]
    },
    "857": {
      "op": "dup",
      "stack_out": [
        "extract_uint16%0#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "858": {
      "op": "len",
      "defined_out": [
        "extract_uint16%0#0",
        "len%0#0",
        "tup#0"
      ],
      "stack_out": [
        "extract_uint16%0#0",
        "tup#0",
        "len%0#0"
      ]
    },
    "859": {
      "op": "swap",
      "stack_out": [
        "extract_uint16%0#0",
        "len%0#0",
        "tup#0"
      ]
    },
    "860": {
      "op": "dup",
      "stack_out": [
        "extract_uint16%0#0",
        "len%0#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "861": {
      "op": "uncover 3",
      "stack_out": [
        "len%0#0",
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "863": {
      "op": "uncover 3",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%0#0",
        "len%0#0"
      ]
    },
    "865": {
      "op": "substring3",
      "defined_out": [
        "substring3%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%0#0"
      ]
    },
    "866": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "substring3%0#0",
        "0x"
      ]
    },
    "867": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tup#0",
        "substring3%0#0",
        "0x",
        "0x00"
      ]
    },
    "868": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "substring3%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%0#0",
        "encoded%3#0"
      ]
    },
    "869": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "substring3%0#0",
        "encoded%3#0",
        "0x"
      ]
    },
    "870": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "substring3%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%0#0",
        "encoded%4#0"
      ]
    },
    "871": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0"
      ]
    },
    "872": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "873": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "extract_to_end%0#0"
      ]
    },
    "876": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "len%1#0"
      ]
    },
    "877": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "len%1#0",
        "1"
      ]
    },
    "878": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "879": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concat%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "as_bytes%2#0"
      ]
    },
    "880": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "883": {
      "op": "swap",
      "stack_out": [
        "tup#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "884": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "885": {
      "op": "uncover 2",
      "stack_out": [
        "tup#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "887": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "888": {
      "op": "dig 1",
      "stack_out": [
        "tup#0",
        "as_Encoded(len+uint8[])%1#0",
        "tup#0 (copy)"
      ]
    },
    "890": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "as_Encoded(len+uint8[])%1#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "891": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0"
      ]
    },
    "892": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0",
        "tup#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(len+uint8[])%1#0",
        "item_offset%0#0",
        "tup#0",
        "0"
      ]
    },
    "895": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tup#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "897": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "data_up_to_item%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%1#0",
        "data_up_to_item%0#0"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "data_up_to_item%0#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "899": {
      "op": "concat",
      "stack_out": [
        "tup#0"
      ]
    },
    "900": {
      "op": "dup",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "901": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "902": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_uint16%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "extract_uint16%1#0"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "extract_uint16%1#0",
        "tup#0"
      ]
    },
    "904": {
      "op": "dup",
      "stack_out": [
        "extract_uint16%1#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "905": {
      "op": "len",
      "defined_out": [
        "extract_uint16%1#0",
        "len%2#0",
        "tup#0"
      ],
      "stack_out": [
        "extract_uint16%1#0",
        "tup#0",
        "len%2#0"
      ]
    },
    "906": {
      "op": "swap",
      "stack_out": [
        "extract_uint16%1#0",
        "len%2#0",
        "tup#0"
      ]
    },
    "907": {
      "op": "dup",
      "stack_out": [
        "extract_uint16%1#0",
        "len%2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "908": {
      "op": "uncover 3",
      "stack_out": [
        "len%2#0",
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%1#0"
      ]
    },
    "910": {
      "op": "uncover 3",
      "stack_out": [
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%1#0",
        "len%2#0"
      ]
    },
    "912": {
      "op": "substring3",
      "defined_out": [
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0"
      ]
    },
    "913": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "0x"
      ]
    },
    "914": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "0x",
        "0x00"
      ]
    },
    "915": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0",
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%5#0"
      ]
    },
    "916": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%5#0",
        "1"
      ]
    },
    "917": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%5#0",
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%5#0",
        "as_bytes%3#0"
      ]
    },
    "918": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%5#0",
        "len_u16%0#0",
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%5#0",
        "len_u16%0#0"
      ]
    },
    "921": {
      "op": "swap",
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "len_u16%0#0",
        "encoded%5#0"
      ]
    },
    "922": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%6#0"
      ]
    },
    "923": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%6#0",
        "0x"
      ]
    },
    "924": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "substring3%1#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "substring3%1#0",
        "encoded%7#0"
      ]
    },
    "925": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tup#0"
      ],
      "stack_out": [
        "tup#0",
        "tmp%0#0"
      ]
    },
    "926": {
      "op": "assert",
      "stack_out": [
        "tup#0"
      ]
    },
    "927": {
      "op": "dupn 2",
      "defined_out": [
        "tup#0",
        "tup#0 (copy)",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "929": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "930": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_uint16%2#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "extract_uint16%2#0"
      ]
    },
    "931": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%2#0",
        "tup#0"
      ]
    },
    "932": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "extract_uint16%2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "933": {
      "op": "len",
      "defined_out": [
        "extract_uint16%2#0",
        "len%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "extract_uint16%2#0",
        "tup#0",
        "len%3#0"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%2#0",
        "len%3#0",
        "tup#0"
      ]
    },
    "935": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "extract_uint16%2#0",
        "len%3#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "936": {
      "op": "uncover 3",
      "stack_out": [
        "tup2#0",
        "len%3#0",
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%2#0"
      ]
    },
    "938": {
      "op": "uncover 3",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "extract_uint16%2#0",
        "len%3#0"
      ]
    },
    "940": {
      "op": "substring3",
      "defined_out": [
        "substring3%2#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0"
      ]
    },
    "941": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "0"
      ]
    },
    "942": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "0",
        "1"
      ]
    },
    "943": {
      "op": "*",
      "defined_out": [
        "substring3%2#0",
        "tup#0",
        "tup2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "write_offset%0#0"
      ]
    },
    "944": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "substring3%2#0",
        "tup#0",
        "tup2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "write_offset%0#0",
        "2"
      ]
    },
    "946": {
      "op": "+",
      "defined_out": [
        "substring3%2#0",
        "tup#0",
        "tup2#0",
        "write_offset_with_length_header%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "write_offset_with_length_header%0#0"
      ]
    },
    "947": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "substring3%2#0",
        "tup#0",
        "tup2#0",
        "write_offset_with_length_header%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "substring3%2#0",
        "write_offset_with_length_header%0#0",
        "0x01"
      ]
    },
    "950": {
      "op": "replace3",
      "defined_out": [
        "tup#0",
        "tup2#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "updated_array%0#0"
      ]
    },
    "951": {
      "op": "dig 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "updated_array%0#0",
        "tup#0 (copy)"
      ]
    },
    "953": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "updated_array%0#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "954": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%1#0",
        "tup#0",
        "tup2#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "updated_array%0#0",
        "item_offset%1#0"
      ]
    },
    "955": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "updated_array%0#0",
        "item_offset%1#0",
        "tup#0"
      ]
    },
    "957": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup2#0",
        "updated_array%0#0",
        "item_offset%1#0",
        "tup#0",
        "0"
      ]
    },
    "958": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "updated_array%0#0",
        "tup#0",
        "0",
        "item_offset%1#0"
      ]
    },
    "960": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%1#0",
        "tup2#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "tup2#0",
        "updated_array%0#0",
        "data_up_to_item%1#0"
      ]
    },
    "961": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "data_up_to_item%1#0",
        "updated_array%0#0"
      ]
    },
    "962": {
      "op": "concat",
      "stack_out": [
        "tup2#0",
        "tup#0"
      ]
    },
    "963": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "964": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "tup#0 (copy)",
        "1"
      ]
    },
    "965": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_uint16%3#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "tup#0",
        "extract_uint16%3#0"
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%3#0",
        "tup#0"
      ]
    },
    "967": {
      "op": "dup",
      "stack_out": [
        "tup2#0",
        "extract_uint16%3#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "968": {
      "op": "len",
      "defined_out": [
        "extract_uint16%3#0",
        "len%4#0",
        "tup#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "extract_uint16%3#0",
        "tup#0",
        "len%4#0"
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%3#0",
        "len%4#0",
        "tup#0"
      ]
    },
    "970": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "len%4#0",
        "tup#0",
        "extract_uint16%3#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "tup2#0",
        "tup#0",
        "extract_uint16%3#0",
        "len%4#0"
      ]
    },
    "974": {
      "op": "substring3",
      "defined_out": [
        "substring3%3#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "substring3%3#0"
      ]
    },
    "975": {
      "op": "dig 1",
      "defined_out": [
        "substring3%3#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup2#0",
        "substring3%3#0",
        "tup2#0 (copy)"
      ]
    },
    "977": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tup2#0",
        "substring3%3#0",
        "tup2#0 (copy)",
        "1"
      ]
    },
    "978": {
      "op": "extract_uint16",
      "defined_out": [
        "extract_uint16%4#0",
        "substring3%3#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "substring3%3#0",
        "extract_uint16%4#0"
      ]
    },
    "979": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%4#0",
        "substring3%3#0"
      ]
    },
    "980": {
      "op": "dig 2",
      "stack_out": [
        "tup2#0",
        "extract_uint16%4#0",
        "substring3%3#0",
        "tup2#0 (copy)"
      ]
    },
    "982": {
      "op": "len",
      "defined_out": [
        "extract_uint16%4#0",
        "len%5#0",
        "substring3%3#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup2#0",
        "extract_uint16%4#0",
        "substring3%3#0",
        "len%5#0"
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "tup2#0",
        "extract_uint16%4#0",
        "len%5#0",
        "substring3%3#0"
      ]
    },
    "984": {
      "op": "uncover 3",
      "stack_out": [
        "extract_uint16%4#0",
        "len%5#0",
        "substring3%3#0",
        "tup2#0"
      ]
    },
    "986": {
      "op": "uncover 3",
      "stack_out": [
        "len%5#0",
        "substring3%3#0",
        "tup2#0",
        "extract_uint16%4#0"
      ]
    },
    "988": {
      "op": "uncover 3",
      "stack_out": [
        "substring3%3#0",
        "tup2#0",
        "extract_uint16%4#0",
        "len%5#0"
      ]
    },
    "990": {
      "op": "substring3",
      "defined_out": [
        "substring3%3#0",
        "substring3%4#0"
      ],
      "stack_out": [
        "substring3%3#0",
        "substring3%4#0"
      ]
    },
    "991": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "992": {
      "op": "assert",
      "stack_out": []
    },
    "993": {
      "retsub": true,
      "op": "retsub"
    }
  }
}