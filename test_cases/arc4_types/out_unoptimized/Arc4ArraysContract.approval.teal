#pragma version 11
#pragma typetrack false

// test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> uint64:
main:
    intcblock 2 0 1 4
    bytecblock 0x "Hello" "Ping" " " "World" "Pong"
    intc_1 // 0
    intc_1 // 0
    intc_1 // 0
    intc_1 // 0
    intc_1 // 0
    intc_1 // 0
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b main_block@0

main_block@0:
    // arc4_types/array.py:25
    // dynamic_uint8_array = DynamicArray[UInt8](UInt8(1), UInt8(2))
    intc_0 // 2
    itob
    extract 6 2
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    dup
    // arc4_types/array.py:26
    // total = UInt64(0)
    intc_1 // 0
    cover 1
    // arc4_types/array.py:27
    // for uint8_item in dynamic_uint8_array:
    intc_1 // 0
    extract_uint16
    intc_1 // 0
    b main_for_header@1

main_for_header@1:
    // arc4_types/array.py:27
    // for uint8_item in dynamic_uint8_array:
    dup
    dig 2
    <
    bz main_after_for@4
    b main_for_body@2

main_for_body@2:
    // arc4_types/array.py:27
    // for uint8_item in dynamic_uint8_array:
    dig 3
    dup
    len
    cover 1
    intc_0 // 2
    uncover 2
    substring3
    dig 1
    intc_2 // 1
    *
    intc_2 // 1
    extract3 // on error: index access is out of bounds
    // arc4_types/array.py:28
    // total += uint8_item.as_uint64()
    btoi
    dig 3
    +
    bury 3
    b main_for_footer@3

main_for_footer@3:
    dup
    intc_2 // 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    // arc4_types/array.py:30
    // assert total == 3, "Total should be sum of dynamic_uint8_array items"
    dig 2
    pushint 3 // 3
    ==
    assert // Total should be sum of dynamic_uint8_array items
    // arc4_types/array.py:31
    // aliased_dynamic = AliasedDynamicArray(UInt16(1))
    intc_2 // 1
    itob
    extract 6 2
    pushbytes 0x0001
    concat
    dup
    bury 18
    // arc4_types/array.py:32
    // for uint16_item in aliased_dynamic:
    intc_1 // 0
    extract_uint16
    bury 11
    intc_1 // 0
    bury 9
    b main_for_header@5

main_for_header@5:
    // arc4_types/array.py:32
    // for uint16_item in aliased_dynamic:
    dig 8
    dig 11
    <
    bz main_after_for@8
    b main_for_body@6

main_for_body@6:
    // arc4_types/array.py:32
    // for uint16_item in aliased_dynamic:
    dig 16
    dup
    len
    cover 1
    intc_0 // 2
    uncover 2
    substring3
    dig 9
    intc_0 // 2
    *
    intc_0 // 2
    extract3 // on error: index access is out of bounds
    // arc4_types/array.py:33
    // total += uint16_item.as_uint64()
    btoi
    dig 3
    +
    bury 3
    b main_for_footer@7

main_for_footer@7:
    dig 8
    intc_2 // 1
    +
    bury 9
    b main_for_header@5

main_after_for@8:
    // arc4_types/array.py:34
    // assert total == 4, "Total should now include sum of aliased_dynamic items"
    dig 2
    intc_3 // 4
    ==
    assert // Total should now include sum of aliased_dynamic items
    // arc4_types/array.py:35
    // dynamic_string_array = DynamicArray[ARC4String](ARC4String("Hello"), ARC4String("World"))
    bytec_1 // "Hello"
    len
    itob
    extract 6 2
    bytec_1 // "Hello"
    concat
    bytec 4 // "World"
    len
    itob
    extract 6 2
    bytec 4 // "World"
    concat
    cover 1
    intc_0 // 2
    itob
    extract 6 2
    intc_3 // 4
    itob
    extract 6 2
    concat
    dig 1
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    dup
    bury 17
    // arc4_types/array.py:36
    // assert dynamic_string_array.length == 2
    dup
    intc_1 // 0
    extract_uint16
    intc_0 // 2
    ==
    assert
    // arc4_types/array.py:37
    // assert dynamic_string_array[0] == ARC4String("Hello")
    dup
    len
    cover 1
    dup
    intc_0 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_1 // 0
    extract_uint16
    intc_1 // 0
    >
    assert // index access is out of bounds
    intc_1 // 0
    intc_0 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    intc_2 // 1
    *
    intc_0 // 2
    +
    uncover 3
    uncover 2
    uncover 2
    extract3
    bytec_1 // "Hello"
    len
    itob
    extract 6 2
    bytec_1 // "Hello"
    concat
    ==
    assert
    // arc4_types/array.py:38
    // result = String("")
    bytec_0 // ""
    bury 16
    // arc4_types/array.py:39
    // for index, string_item in uenumerate(dynamic_string_array):
    intc_1 // 0
    extract_uint16
    bury 10
    intc_1 // 0
    bury 8
    b main_for_header@9

main_for_header@9:
    // arc4_types/array.py:39
    // for index, string_item in uenumerate(dynamic_string_array):
    dig 7
    dig 10
    <
    bz main_after_for@15
    b main_for_body@10

main_for_body@10:
    // arc4_types/array.py:39
    // for index, string_item in uenumerate(dynamic_string_array):
    dig 15
    dup
    len
    cover 1
    intc_0 // 2
    uncover 2
    substring3
    dig 8
    dup
    cover 2
    intc_0 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 1
    *
    intc_0 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    bury 13
    // arc4_types/array.py:40
    // if index == 0:
    intc_1 // 0
    ==
    bz main_else_body@12
    b main_if_body@11

main_if_body@11:
    // arc4_types/array.py:41
    // result = string_item.native
    dig 11
    extract 2 0
    bury 15
    b main_after_if_else@13

main_after_if_else@13:
    b main_for_footer@14

main_for_footer@14:
    dig 7
    intc_2 // 1
    +
    bury 8
    b main_for_header@9

main_else_body@12:
    // arc4_types/array.py:43
    // result += " " + string_item.native
    dig 11
    extract 2 0
    bytec_3 // " "
    uncover 1
    concat
    dig 15
    uncover 1
    concat
    bury 15
    b main_after_if_else@13

main_after_for@15:
    // arc4_types/array.py:45
    // assert result == "Hello World"
    dig 14
    pushbytes "Hello World"
    ==
    assert
    // arc4_types/array.py:47
    // static_uint32_array = StaticArray(UInt32(1), UInt32(10), UInt32(255), UInt32(128))
    bytec_0 // 0x
    pushbytes 0x00000001
    concat
    pushbytes 0x0000000a
    concat
    pushbytes 0x000000ff
    concat
    pushbytes 0x00000080
    concat
    bury 13
    intc_1 // 0
    bury 7
    b main_for_header@16

main_for_header@16:
    // arc4_types/array.py:49
    // for uint32_item in static_uint32_array:
    dig 6
    intc_3 // 4
    <
    bz main_after_for@19
    b main_for_body@17

main_for_body@17:
    // arc4_types/array.py:49
    // for uint32_item in static_uint32_array:
    dig 6
    intc_3 // 4
    *
    dig 13
    uncover 1
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // arc4_types/array.py:50
    // total += uint32_item.as_uint64()
    btoi
    dig 3
    +
    bury 3
    b main_for_footer@18

main_for_footer@18:
    dig 6
    intc_2 // 1
    +
    bury 7
    b main_for_header@16

main_after_for@19:
    // arc4_types/array.py:52
    // assert total == 4 + 1 + 10 + 255 + 128
    dig 2
    pushint 398 // 398
    ==
    assert
    // arc4_types/array.py:54
    // aliased_static = AliasedStaticArray(UInt8(101))
    bytec_0 // 0x
    pushbytes 0x65
    concat
    // arc4_types/array.py:58
    // assert (aliased_static[0].as_uint64() + aliased_static[index].as_uint64()) == 202
    intc_1 // 0
    intc_2 // 1
    *
    dig 1
    uncover 1
    intc_2 // 1
    extract3 // on error: index access is out of bounds
    btoi
    cover 1
    // arc4_types/array.py:56
    // index = UInt64(0)
    intc_1 // 0
    // arc4_types/array.py:58
    // assert (aliased_static[0].as_uint64() + aliased_static[index].as_uint64()) == 202
    intc_2 // 1
    *
    intc_2 // 1
    extract3 // on error: index access is out of bounds
    btoi
    +
    pushint 202 // 202
    ==
    assert
    // arc4_types/array.py:60
    // static_string_array = StaticArray(ARC4String("Ping"), ARC4String("Pong"))
    bytec_2 // "Ping"
    len
    itob
    extract 6 2
    bytec_2 // "Ping"
    concat
    bytec 5 // "Pong"
    len
    itob
    extract 6 2
    bytec 5 // "Pong"
    concat
    cover 1
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    bury 14
    // arc4_types/array.py:62
    // result = String("")
    bytec_0 // ""
    bury 15
    intc_1 // 0
    bury 6
    b main_for_header@20

main_for_header@20:
    // arc4_types/array.py:63
    // for index, string_item in uenumerate(static_string_array):
    dig 5
    intc_0 // 2
    <
    bz main_after_for@26
    b main_for_body@21

main_for_body@21:
    // arc4_types/array.py:63
    // for index, string_item in uenumerate(static_string_array):
    dig 5
    dup
    intc_0 // 2
    *
    dig 15
    dup
    cover 2
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 1
    *
    intc_0 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    bury 13
    // arc4_types/array.py:64
    // if index == 0:
    intc_1 // 0
    ==
    bz main_else_body@23
    b main_if_body@22

main_if_body@22:
    // arc4_types/array.py:65
    // result = string_item.native
    dig 11
    extract 2 0
    bury 15
    b main_after_if_else@24

main_after_if_else@24:
    b main_for_footer@25

main_for_footer@25:
    dig 5
    intc_2 // 1
    +
    bury 6
    b main_for_header@20

main_else_body@23:
    // arc4_types/array.py:67
    // result += " " + string_item.native
    dig 11
    extract 2 0
    bytec_3 // " "
    uncover 1
    concat
    dig 15
    uncover 1
    concat
    bury 15
    b main_after_if_else@24

main_after_for@26:
    // arc4_types/array.py:69
    // assert result == "Ping Pong"
    dig 14
    pushbytes "Ping Pong"
    ==
    assert
    // arc4_types/array.py:71
    // static_string_array[1] = ARC4String("Ping")
    bytec_2 // "Ping"
    len
    itob
    extract 6 2
    bytec_2 // "Ping"
    concat
    intc_2 // 1
    intc_0 // 2
    <
    assert // index access is out of bounds
    intc_2 // 1
    intc_0 // 2
    <
    assert // index access is out of bounds
    dig 14
    uncover 1
    intc_2 // 1
    intc_0 // 2
    callsub static_array_replace_byte_length_head
    bury 14
    // arc4_types/array.py:72
    // result = String()
    bytec_0 // ""
    bury 15
    intc_1 // 0
    bury 5
    b main_for_header@27

main_for_header@27:
    // arc4_types/array.py:73
    // for string_item in static_string_array:
    dig 4
    intc_0 // 2
    <
    bz main_after_for@30
    b main_for_body@28

main_for_body@28:
    // arc4_types/array.py:73
    // for string_item in static_string_array:
    dig 4
    intc_0 // 2
    *
    dig 14
    dup
    cover 2
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 1
    *
    intc_0 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    // arc4_types/array.py:74
    // result += string_item.native + " "
    extract 2 0
    bytec_3 // " "
    concat
    dig 15
    uncover 1
    concat
    bury 15
    b main_for_footer@29

main_for_footer@29:
    dig 4
    intc_2 // 1
    +
    bury 5
    b main_for_header@27

main_after_for@30:
    // arc4_types/array.py:75
    // assert result == "Ping Ping "
    dig 14
    pushbytes "Ping Ping "
    ==
    assert
    // arc4_types/array.py:77
    // self.hash_as_array(Bytes(b"Testing 123"))
    pushbytes 0x54657374696e6720313233
    callsub hash_as_array
    pop
    // arc4_types/array.py:79
    // return True
    intc_2 // 1
    return


// _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_byte_length_head:
    proto 4 1
    b static_array_replace_byte_length_head_block@0

static_array_replace_byte_length_head_block@0:
    frame_dig -2
    frame_dig -1
    <
    assert // Index out of bounds
    frame_dig -2
    intc_0 // 2
    *
    frame_dig -4
    uncover 1
    extract_uint16
    frame_dig -4
    dig 1
    extract_uint16
    dig 1
    +
    intc_0 // 2
    +
    cover 1
    frame_dig -4
    intc_1 // 0
    uncover 2
    substring3
    frame_dig -3
    concat
    frame_dig -4
    len
    frame_dig -4
    uncover 3
    uncover 2
    substring3
    concat
    frame_dig -1
    frame_dig -2
    callsub recalculate_head_for_elements_with_byte_length_head
    retsub


// _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    proto 3 1
    b recalculate_head_for_elements_with_byte_length_head_block@0

recalculate_head_for_elements_with_byte_length_head_block@0:
    frame_dig -2
    intc_0 // 2
    *
    frame_dig -1
    intc_0 // 2
    *
    frame_dig -3
    uncover 1
    extract_uint16
    frame_dig -1
    select
    frame_dig -2
    intc_0 // 2
    *
    frame_dig -1
    intc_0 // 2
    *
    intc_0 // 2
    assert // Step cannot be zero
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    frame_dig 2
    frame_dig 1
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4
    b recalculate_head_for_elements_with_byte_length_head_for_body@2

recalculate_head_for_elements_with_byte_length_head_for_body@2:
    frame_dig 2
    frame_dig 0
    dup
    cover 2
    itob
    extract 6 2
    frame_dig -3
    uncover 2
    uncover 2
    replace3
    dup
    frame_bury -3
    dig 1
    extract_uint16
    intc_0 // 2
    +
    +
    frame_bury 0
    b recalculate_head_for_elements_with_byte_length_head_for_footer@3

recalculate_head_for_elements_with_byte_length_head_for_footer@3:
    frame_dig 2
    intc_0 // 2
    +
    frame_bury 2
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    frame_dig -3
    frame_bury 0
    retsub


// test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
hash_as_array:
    // arc4_types/array.py:81-82
    // @subroutine
    // def hash_as_array(self, commitment_args_concat: Bytes) -> HashResult:
    proto 1 1
    b hash_as_array_block@0

hash_as_array_block@0:
    // arc4_types/array.py:83
    // return HashResult.from_bytes(op.sha3_256(commitment_args_concat))
    frame_dig -1
    sha3_256
    retsub
