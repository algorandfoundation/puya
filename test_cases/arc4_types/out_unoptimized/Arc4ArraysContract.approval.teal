#pragma version 10

test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    pushint 0 // 0
    pushint 0 // 0
    pushint 0 // 0
    pushint 0 // 0
    pushint 0 // 0
    pushbytes ""
    pushbytes ""
    pushbytes ""
    pushbytes ""
    pushbytes ""
    pushbytes ""
    // arc4_types/array.py:25
    // dynamic_uint8_array = DynamicArray[UInt8](UInt8(1), UInt8(2))
    pushbytes 0x
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    pushbytes 0x0002
    uncover 1
    concat
    dup
    cover 1
    cover 1
    // arc4_types/array.py:26
    // total = UInt64(0)
    pushint 0 // 0
    cover 1
    // arc4_types/array.py:27
    // for uint8_item in dynamic_uint8_array:
    pushint 0 // 0
    extract_uint16
    pushint 0 // 0

main_for_header@1:
    // arc4_types/array.py:27
    // for uint8_item in dynamic_uint8_array:
    dig 0
    dig 2
    <
    bz main_after_for@4
    dig 3
    extract 2 0
    dig 1
    pushint 1 // 1
    *
    pushint 1 // 1
    extract3 // on error: Index access is out of bounds
    // arc4_types/array.py:28
    // total += uint8_item.native
    btoi
    dig 3
    uncover 1
    +
    bury 3
    dig 0
    pushint 1 // 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    // arc4_types/array.py:30
    // assert total == 3, "Total should be sum of dynamic_uint8_array items"
    dig 2
    pushint 3 // 3
    ==
    assert // Total should be sum of dynamic_uint8_array items
    // arc4_types/array.py:31
    // aliased_dynamic = AliasedDynamicArray(UInt16(1))
    pushbytes 0x
    pushbytes 0x0001
    concat
    pushbytes 0x0001
    uncover 1
    concat
    dup
    cover 1
    bury 16
    // arc4_types/array.py:32
    // for uint16_item in aliased_dynamic:
    pushint 0 // 0
    extract_uint16
    bury 10
    pushint 0 // 0
    bury 8

main_for_header@5:
    // arc4_types/array.py:32
    // for uint16_item in aliased_dynamic:
    dig 7
    dig 10
    <
    bz main_after_for@8
    dig 14
    extract 2 0
    dig 8
    pushint 2 // 2
    *
    pushint 2 // 2
    extract3 // on error: Index access is out of bounds
    // arc4_types/array.py:33
    // total += uint16_item.native
    btoi
    dig 3
    uncover 1
    +
    bury 3
    dig 7
    pushint 1 // 1
    +
    bury 8
    b main_for_header@5

main_after_for@8:
    // arc4_types/array.py:34
    // assert total == 4, "Total should now include sum of aliased_dynamic items"
    dig 2
    pushint 4 // 4
    ==
    assert // Total should now include sum of aliased_dynamic items
    // arc4_types/array.py:35
    // dynamic_string_array = DynamicArray[ARC4String](ARC4String("Hello"), ARC4String("World"))
    pushbytes "Hello"
    len
    itob
    extract 6 2
    pushbytes "Hello"
    concat
    pushbytes "World"
    len
    itob
    extract 6 2
    pushbytes "World"
    concat
    cover 1
    pushint 4 // 4
    itob
    extract 6 2
    pushbytes 0x
    uncover 1
    concat
    dig 1
    len
    pushint 4 // 4
    uncover 1
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    pushbytes 0x0002
    uncover 1
    concat
    dup
    cover 1
    bury 15
    // arc4_types/array.py:36
    // assert dynamic_string_array.length == 2
    dig 0
    pushint 0 // 0
    extract_uint16
    pushint 2 // 2
    ==
    assert
    // arc4_types/array.py:37
    // assert dynamic_string_array[0] == ARC4String("Hello")
    dig 0
    extract 2 0
    cover 1
    dig 0
    pushint 0 // 0
    extract_uint16
    pushint 0 // 0
    uncover 1
    <
    assert // Index access is out of bounds
    pushint 0 // 0
    pushint 2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    pushint 1 // 1
    *
    pushint 2 // 2
    +
    uncover 3
    uncover 2
    uncover 2
    extract3
    pushbytes "Hello"
    len
    itob
    extract 6 2
    pushbytes "Hello"
    concat
    ==
    assert
    // arc4_types/array.py:38
    // result = String("")
    pushbytes ""
    bury 14
    // arc4_types/array.py:39
    // for index, string_item in uenumerate(dynamic_string_array):
    pushint 0 // 0
    extract_uint16
    bury 9
    pushint 0 // 0
    bury 7

main_for_header@9:
    // arc4_types/array.py:39
    // for index, string_item in uenumerate(dynamic_string_array):
    dig 6
    dig 9
    <
    bz main_after_for@15
    dig 13
    extract 2 0
    dig 7
    dup
    cover 2
    pushint 2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dig 1
    dig 1
    extract_uint16
    pushint 1 // 1
    *
    pushint 2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    cover 1
    // arc4_types/array.py:40
    // if index == 0:
    pushint 0 // 0
    ==
    bz main_else_body@12
    // arc4_types/array.py:41
    // result = string_item.native
    extract 2 0
    bury 13
    b main_after_if_else@13

main_else_body@12:
    // arc4_types/array.py:43
    // result += " " + string_item.native
    extract 2 0
    pushbytes " "
    uncover 1
    concat
    dig 13
    uncover 1
    concat
    bury 13

main_after_if_else@13:
    dig 6
    pushint 1 // 1
    +
    bury 7
    b main_for_header@9

main_after_for@15:
    // arc4_types/array.py:45
    // assert result == "Hello World"
    dig 12
    pushbytes "Hello World"
    ==
    assert
    // arc4_types/array.py:47
    // static_uint32_array = StaticArray(UInt32(1), UInt32(10), UInt32(255), UInt32(128))
    pushbytes 0x
    pushbytes 0x00000001
    concat
    pushbytes 0x0000000a
    concat
    pushbytes 0x000000ff
    concat
    pushbytes 0x00000080
    concat
    pushbytes 0x
    uncover 1
    concat
    bury 11
    pushint 0 // 0
    bury 6

main_for_header@16:
    // arc4_types/array.py:49
    // for uint32_item in static_uint32_array:
    dig 5
    pushint 4 // 4
    <
    bz main_after_for@19
    dig 10
    dig 6
    pushint 4 // 4
    *
    pushint 4 // 4
    extract3 // on error: Index access is out of bounds
    // arc4_types/array.py:50
    // total += uint32_item.native
    btoi
    dig 3
    uncover 1
    +
    bury 3
    dig 5
    pushint 1 // 1
    +
    bury 6
    b main_for_header@16

main_after_for@19:
    // arc4_types/array.py:52
    // assert total == 4 + 1 + 10 + 255 + 128
    dig 2
    pushint 398 // 398
    ==
    assert
    // arc4_types/array.py:54
    // aliased_static = AliasedStaticArray(UInt8(101))
    pushbytes 0x
    pushbytes 0x65
    concat
    pushbytes 0x
    uncover 1
    concat
    // arc4_types/array.py:58
    // assert (aliased_static[0].native + aliased_static[index].native) == 202
    dig 0
    pushint 0 // 0
    pushint 1 // 1
    *
    pushint 1 // 1
    extract3 // on error: Index access is out of bounds
    btoi
    cover 1
    // arc4_types/array.py:56
    // index = UInt64(0)
    pushint 0 // 0
    // arc4_types/array.py:58
    // assert (aliased_static[0].native + aliased_static[index].native) == 202
    pushint 1 // 1
    *
    pushint 1 // 1
    extract3 // on error: Index access is out of bounds
    btoi
    +
    pushint 202 // 202
    ==
    assert
    // arc4_types/array.py:60
    // static_string_array = StaticArray(ARC4String("Ping"), ARC4String("Pong"))
    pushbytes "Ping"
    len
    itob
    extract 6 2
    pushbytes "Ping"
    concat
    pushbytes "Pong"
    len
    itob
    extract 6 2
    pushbytes "Pong"
    concat
    cover 1
    pushint 4 // 4
    itob
    extract 6 2
    pushbytes 0x
    uncover 1
    concat
    dig 1
    len
    pushint 4 // 4
    uncover 1
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    pushbytes 0x
    uncover 1
    concat
    bury 12
    // arc4_types/array.py:62
    // result = String("")
    pushbytes ""
    bury 13
    pushint 0 // 0
    bury 5

main_for_header@20:
    // arc4_types/array.py:63
    // for index, string_item in uenumerate(static_string_array):
    dig 4
    pushint 2 // 2
    <
    bz main_after_for@26
    dig 11
    dig 5
    dup
    cover 2
    pushint 2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dig 1
    dig 1
    extract_uint16
    pushint 1 // 1
    *
    pushint 2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    cover 1
    // arc4_types/array.py:64
    // if index == 0:
    pushint 0 // 0
    ==
    bz main_else_body@23
    // arc4_types/array.py:65
    // result = string_item.native
    extract 2 0
    bury 13
    b main_after_if_else@24

main_else_body@23:
    // arc4_types/array.py:67
    // result += " " + string_item.native
    extract 2 0
    pushbytes " "
    uncover 1
    concat
    dig 13
    uncover 1
    concat
    bury 13

main_after_if_else@24:
    dig 4
    pushint 1 // 1
    +
    bury 5
    b main_for_header@20

main_after_for@26:
    // arc4_types/array.py:69
    // assert result == "Ping Pong"
    dig 12
    pushbytes "Ping Pong"
    ==
    assert
    // arc4_types/array.py:71
    // self.hash_as_array(Bytes(b"Testing 123"))
    pushbytes 0x54657374696e6720313233
    callsub hash_as_array
    pop
    // arc4_types/array.py:73
    // return True
    pushint 1 // 1
    return


// test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
hash_as_array:
    // arc4_types/array.py:75-76
    // @subroutine
    // def hash_as_array(self, commitment_args_concat: Bytes) -> HashResult:
    proto 1 1
    // arc4_types/array.py:77
    // return HashResult.from_bytes(op.sha3_256(commitment_args_concat))
    frame_dig -1
    sha3_256
    retsub
