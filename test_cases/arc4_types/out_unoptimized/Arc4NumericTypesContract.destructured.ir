contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
            block@0: // L25
                let uint8#0: uint64 = 255u
                let val_as_bytes%0#0: bytes = (itob uint8#0)
                let int8_encoded#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%1#0: uint64 = (== uint8#0 int8_decoded#0)
                (assert tmp%1#0)
                let test_bytes#0: bytes = 0x7fffffffffffffff00
                let awst_tmp%2#0: uint64 = (len test_bytes#0)
                let tmp%3#0: uint64 = (< 1u awst_tmp%2#0)
                goto tmp%3#0 ? block@1 : block@2
            block@1: // ternary_true_L35
                let ternary_result%4#0: uint64 = 1u
                goto block@3
            block@2: // ternary_false_L35
                let ternary_result%4#0: uint64 = awst_tmp%2#0
                goto block@3
            block@3: // ternary_merge_L35
                let tmp%5#0: bytes = (substring3 test_bytes#0 0u ternary_result%4#0)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = (== tmp%6#0 127u)
                (assert tmp%7#0)
                let awst_tmp%8#0: uint64 = (len test_bytes#0)
                let tmp%9#0: uint64 = (< 3u awst_tmp%8#0)
                goto tmp%9#0 ? block@4 : block@5
            block@4: // ternary_true_L37
                let ternary_result%10#0: uint64 = 3u
                goto block@6
            block@5: // ternary_false_L37
                let ternary_result%10#0: uint64 = awst_tmp%8#0
                goto block@6
            block@6: // ternary_merge_L37
                let tmp%11#0: bytes = (substring3 test_bytes#0 0u ternary_result%10#0)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = (== tmp%12#0 8388607u)
                (assert tmp%13#0)
                let awst_tmp%14#0: uint64 = (len test_bytes#0)
                let tmp%15#0: uint64 = (< 2u awst_tmp%14#0)
                goto tmp%15#0 ? block@7 : block@8
            block@7: // ternary_true_L39
                let ternary_result%16#0: uint64 = 2u
                goto block@9
            block@8: // ternary_false_L39
                let ternary_result%16#0: uint64 = awst_tmp%14#0
                goto block@9
            block@9: // ternary_merge_L39
                let tmp%17#0: bytes = (substring3 test_bytes#0 0u ternary_result%16#0)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = (== tmp%18#0 32767u)
                (assert tmp%19#0)
                let awst_tmp%20#0: uint64 = (len test_bytes#0)
                let tmp%21#0: uint64 = (< 4u awst_tmp%20#0)
                goto tmp%21#0 ? block@10 : block@11
            block@10: // ternary_true_L40
                let ternary_result%22#0: uint64 = 4u
                goto block@12
            block@11: // ternary_false_L40
                let ternary_result%22#0: uint64 = awst_tmp%20#0
                goto block@12
            block@12: // ternary_merge_L40
                let tmp%23#0: bytes = (substring3 test_bytes#0 0u ternary_result%22#0)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = (== tmp%24#0 2147483647u)
                (assert tmp%25#0)
                let awst_tmp%26#0: uint64 = (len test_bytes#0)
                let tmp%27#0: uint64 = (< 8u awst_tmp%26#0)
                goto tmp%27#0 ? block@13 : block@14
            block@13: // ternary_true_L41
                let ternary_result%28#0: uint64 = 8u
                goto block@15
            block@14: // ternary_false_L41
                let ternary_result%28#0: uint64 = awst_tmp%26#0
                goto block@15
            block@15: // ternary_merge_L41
                let tmp%29#0: bytes = (substring3 test_bytes#0 0u ternary_result%28#0)
                let tmp%30#0: uint64 = (btoi tmp%29#0)
                let tmp%31#0: uint64 = (== tmp%30#0 9223372036854775807u)
                (assert tmp%31#0)
                let decimals#0: bytes = 0x0000015333430684
                let tmp%32#0: uint64 = (len decimals#0)
                let tmp%33#0: uint64 = (== tmp%32#0 8u)
                (assert tmp%33#0)
                let really_big_int#0: bytes = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                let tmp%34#0: uint64 = (len really_big_int#0)
                let tmp%35#0: uint64 = (== tmp%34#0 64u)
                (assert tmp%35#0)
                let len_%36#0: uint64 = (len really_big_int#0)
                let no_overflow%37#0: uint64 = (<= len_%36#0 64u)
                (assert no_overflow%37#0) // overflow
                let b_zeros%38#0: bytes = (bzero 64u)
                let tmp%39#0: bytes = (b| really_big_int#0 b_zeros%38#0)
                let tmp%40#0: uint64 = (b== really_big_int#0 tmp%39#0)
                (assert tmp%40#0)
                let len_%41#0: uint64 = (len 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
                let no_overflow%42#0: uint64 = (<= len_%41#0 64u)
                (assert no_overflow%42#0) // overflow
                let b_zeros%43#0: bytes = (bzero 64u)
                let really_big_decimal#0: bytes = (b| 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b b_zeros%43#0)
                let biguint#0: bytes = 1b
                let arc4_biguint_const#0: bytes = 0x00000000000000000000000000000001
                let tmp%44#0: bytes = (b+ biguint#0 1b)
                let len_%45#0: uint64 = (len tmp%44#0)
                let no_overflow%46#0: uint64 = (<= len_%45#0 16u)
                (assert no_overflow%46#0) // overflow
                let b_zeros%47#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| tmp%44#0 b_zeros%47#0)
                let tmp%48#0: uint64 = (b== biguint#0 arc4_biguint_const#0)
                (assert tmp%48#0)
                let tmp%49#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%50#0: uint64 = (== tmp%49#0 16u)
                (assert tmp%50#0)
                let tmp%51#0: uint64 = (len really_big_decimal#0)
                let tmp%52#0: uint64 = (== tmp%51#0 64u)
                (assert tmp%52#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> uint64:
            block@0: // L68
                return 1u