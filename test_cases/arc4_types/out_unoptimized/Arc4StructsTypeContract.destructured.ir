contract test_cases.arc4_types.structs.Arc4StructsTypeContract:
    program approval:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program() -> bool:
            block@0: // L26
                let encoded_tuple_buffer%0#1: bytes = (concat 0x 0x000000083cfbf217)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0x000000230384b842)
                let coord_1#0: bytes = encoded_tuple_buffer%0#1
                let encoded_tuple_buffer%1#1: bytes = (concat 0x 0x000000083cfbf217)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x000000230384b842)
                let coord_2#0: bytes = encoded_tuple_buffer%1#1
                let copy%0#0: bytes = coord_1#0
                let copy%1#0: bytes = coord_2#0
                let (add%0#0: bytes, add%1#0: bytes, add%2#0: bytes) = test_cases.arc4_types.structs.add(copy%0#0, copy%1#0)
                let coord_3#0: bytes = add%0#0
                let tmp%0#0: bytes = (extract3 coord_3#0 0u 8u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 coord_3#0 8u 8u) // on error: Index access is out of bounds
                goto block@1
            block@1: // for_header_0_L30
                let tuple_index%0#0: uint64 = 0u
                let val#0: bytes = tmp%0#0
                goto block@3
            block@2: // for_header_1_L30
                let val#0: bytes = tmp%1#0
                let tuple_index%0#0: uint64 = tuple_index%0#3
                goto block@3
            block@3: // for_body_L30
                (log val#0)
                goto block@4
            block@4: // for_footer_L30
                let tuple_index%0#3: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@2][tuple_index%0#0] else goto block@5
            block@5: // after_for_L30
                let tmp%2#0: bytes = (setbit 0x00 0u 1u)
                let tmp%3#0: bytes = (setbit 0x00 0u 0u)
                let tmp%4#0: bytes = (setbit 0x00 0u 1u)
                let tmp%5#0: bytes = (setbit 0x00 0u 0u)
                let encoded_tuple_buffer%2#1: bytes = (concat 0x tmp%2#0)
                let is_true%0#0: uint64 = (getbit tmp%3#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 1u is_true%0#0)
                let is_true%1#0: uint64 = (getbit tmp%4#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 2u is_true%1#0)
                let is_true%2#0: uint64 = (getbit tmp%5#0 0u)
                let encoded_tuple_buffer%2#1: bytes = (setbit encoded_tuple_buffer%2#1 3u is_true%2#0)
                let flags#0: bytes = encoded_tuple_buffer%2#1
                let copy%2#0: bytes = flags#0
                let check%0#0: bytes = test_cases.arc4_types.structs.check(copy%2#0)
                (log flags#0)
                let tmp%6#0: bool = (== coord_1#0 coord_1#0)
                (assert tmp%6#0)
                let copy%3#0: bytes = coord_1#0
                let copy%4#0: bytes = flags#0
                let encoded_tuple_buffer%3#1: bytes = (concat 0x copy%3#0)
                let encoded_tuple_buffer%3#1: bytes = (concat encoded_tuple_buffer%3#1 copy%4#0)
                let nested_decode%0#0: bytes = test_cases.arc4_types.structs.nested_decode(encoded_tuple_buffer%3#1)
                return 1u
        
        subroutine test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> <bytes, bytes, bytes>:
            block@0: // L46
                let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
                let tmp%2#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%0#0, tmp%1#0)
                let tmp%3#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
                let tmp%4#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
                let tmp%5#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%3#0, tmp%4#0)
                let encoded_tuple_buffer%0#1: bytes = (concat 0x tmp%2#0)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 tmp%5#0)
                return encoded_tuple_buffer%0#1 v1#0 v2#0
        
        subroutine test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
            block@0: // L68
                let tmp%0#0: uint64 = (btoi x#0)
                let tmp%1#0: uint64 = (btoi y#0)
                let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let tmp%3#0: bytes = (itob tmp%2#0)
                return tmp%3#0
        
        subroutine test_cases.arc4_types.structs.check(flags: bytes) -> bytes:
            block@0: // L54
                let is_true%0#0: uint64 = (getbit flags#0 0u)
                let tmp%0#0: bytes = (setbit 0x00 0u is_true%0#0)
                let tmp%1#0: uint64 = (getbit tmp%0#0 0u)
                (assert tmp%1#0)
                let is_true%1#0: uint64 = (getbit flags#0 1u)
                let tmp%2#0: bytes = (setbit 0x00 0u is_true%1#0)
                let tmp%3#0: uint64 = (getbit tmp%2#0 0u)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0)
                let is_true%2#0: uint64 = (getbit flags#0 2u)
                let tmp%5#0: bytes = (setbit 0x00 0u is_true%2#0)
                let tmp%6#0: uint64 = (getbit tmp%5#0 0u)
                (assert tmp%6#0)
                let is_true%3#0: uint64 = (getbit flags#0 3u)
                let tmp%7#0: bytes = (setbit 0x00 0u is_true%3#0)
                let tmp%8#0: uint64 = (getbit tmp%7#0 0u)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0)
                return flags#0
        
        subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> bytes:
            block@0: // L62
                let tmp%0#0: bytes = (extract3 vector_flags#0 0u 16u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 tmp%0#0 0u 8u) // on error: Index access is out of bounds
                let tmp%2#0: bytes = (itob 35382882839u)
                let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bytes = (extract3 vector_flags#0 16u 1u) // on error: Index access is out of bounds
                let is_true%0#0: uint64 = (getbit tmp%4#0 2u)
                let tmp%5#0: bytes = (setbit 0x00 0u is_true%0#0)
                let tmp%6#0: uint64 = (getbit tmp%5#0 0u)
                (assert tmp%6#0)
                return vector_flags#0
    
    program clear-state:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.clear_state_program() -> bool:
            block@0: // L42
                return 1u