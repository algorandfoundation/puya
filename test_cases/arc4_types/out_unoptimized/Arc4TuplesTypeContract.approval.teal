#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> uint64:
main:
    intcblock 0 1 3 4
    bytecblock 0x00 0x "hello" "world"
    bytec_1 // ""
    bytec_1 // ""
    b main_block@0

main_block@0:
    // arc4_types/tuples.py:15
    // my_tuple = Tuple((UInt8(1), UInt8(2), String("hello"), String("world"), UInt8(255)))
    bytec_2 // "hello"
    len
    itob
    extract 6 2
    bytec_2 // "hello"
    concat
    bytec_3 // "world"
    len
    itob
    extract 6 2
    bytec_3 // "world"
    concat
    cover 1
    bytec_1 // 0x
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    pushint 7 // 7
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 7 // 7
    +
    itob
    extract 6 2
    concat
    pushbytes 0xff
    concat
    uncover 1
    concat
    uncover 1
    concat
    dup
    // arc4_types/tuples.py:18
    // Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    pushbytes 0x01020007000eff000568656c6c6f0005776f726c64
    // arc4_types/tuples.py:17-19
    // assert my_tuple == TestTuple.from_bytes(
    //     Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    // )
    ==
    assert
    // arc4_types/tuples.py:23
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/tuples.py:24
    // Bool(False),
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    // arc4_types/tuples.py:25
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 1
    // arc4_types/tuples.py:26
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 2
    // arc4_types/tuples.py:27
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 3
    // arc4_types/tuples.py:28
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 4
    // arc4_types/tuples.py:29
    // Bool(False),
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    cover 5
    // arc4_types/tuples.py:30
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 6
    // arc4_types/tuples.py:31
    // Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 7
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    bytec_1 // 0x
    // arc4_types/tuples.py:22
    // UInt8(4),
    pushbytes 0x04
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    concat
    uncover 1
    intc_0 // 0
    getbit
    uncover 9
    intc_1 // 1
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 2 // 2
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_2 // 3
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_3 // 4
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 5 // 5
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 6 // 6
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 7 // 7
    uncover 2
    setbit
    concat
    uncover 1
    concat
    // arc4_types/tuples.py:32
    // UInt8(16),
    pushbytes 0x10
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    concat
    dupn 2
    // arc4_types/tuples.py:35
    // assert boolean_packing.bytes == Bytes.from_hex("04BD8010")
    pushbytes 0x04bd8010
    ==
    assert
    // arc4_types/tuples.py:36
    // a, b, c, d, e, f, g, h, i, j, k = boolean_packing.native
    dup
    intc_0 // 0
    intc_1 // 1
    extract3
    cover 1
    dup
    pushint 8 // 8
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 9 // 9
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 10 // 10
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 11 // 11
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 12 // 12
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 13 // 13
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 14 // 14
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 15 // 15
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 16 // 16
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    intc_2 // 3
    intc_1 // 1
    extract3
    uncover 11
    cover 1
    uncover 11
    cover 2
    uncover 11
    cover 3
    uncover 11
    cover 4
    uncover 11
    cover 5
    uncover 11
    cover 6
    uncover 11
    cover 7
    uncover 11
    cover 8
    uncover 11
    cover 9
    uncover 11
    cover 10
    cover 10
    cover 10
    cover 11
    cover 11
    cover 10
    cover 9
    cover 8
    cover 7
    cover 6
    cover 5
    cover 4
    dup
    cover 4
    // arc4_types/tuples.py:37
    // assert boolean_packing[10] == k
    uncover 2
    intc_2 // 3
    intc_1 // 1
    extract3
    b==
    assert
    // arc4_types/tuples.py:38
    // assert a.native == 4, "a is 4"
    btoi
    intc_3 // 4
    ==
    assert // a is 4
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    !=
    bz main_bool_false@8
    b main_and_contd@1

main_and_contd@1:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 8
    !=
    bz main_bool_false@8
    b main_and_contd@2

main_and_contd@2:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 7
    !=
    bz main_bool_false@8
    b main_and_contd@3

main_and_contd@3:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 6
    !=
    bz main_bool_false@8
    b main_and_contd@4

main_and_contd@4:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 5
    !=
    bz main_bool_false@8
    b main_and_contd@5

main_and_contd@5:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 3
    !=
    bz main_bool_false@8
    b main_and_contd@6

main_and_contd@6:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 2
    !=
    bz main_bool_false@8
    b main_bool_true@7

main_bool_true@7:
    intc_1 // 1
    bury 13
    b main_bool_merge@9

main_bool_merge@9:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 12
    assert // b,d,e,f,g,i,j are true
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 9
    !=
    bnz main_bool_true@11
    b main_or_contd@10

main_or_contd@10:
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    dig 4
    !=
    bz main_bool_false@12
    b main_bool_true@11

main_bool_true@11:
    intc_1 // 1
    bury 12
    b main_bool_merge@13

main_bool_merge@13:
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    dig 11
    !
    assert // c and h are false
    // arc4_types/tuples.py:41
    // assert k.native == 16, "k is 16"
    dup
    btoi
    pushint 16 // 16
    ==
    assert // k is 16
    // arc4_types/tuples.py:43
    // assert boolean_packing == TestBooleanPacking(boolean_packing.native)
    dig 9
    dup
    intc_0 // 0
    intc_1 // 1
    extract3
    cover 1
    dup
    pushint 8 // 8
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 9 // 9
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 10 // 10
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 11 // 11
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 12 // 12
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 13 // 13
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 14 // 14
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 15 // 15
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    pushint 16 // 16
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 1
    dup
    intc_2 // 3
    intc_1 // 1
    extract3
    uncover 11
    cover 1
    uncover 11
    cover 3
    uncover 11
    cover 1
    uncover 11
    cover 5
    uncover 11
    cover 7
    uncover 11
    cover 9
    uncover 11
    cover 10
    uncover 11
    cover 10
    uncover 8
    cover 10
    uncover 6
    cover 10
    cover 10
    bytec_1 // 0x
    uncover 2
    concat
    cover 8
    intc_0 // 0
    getbit
    uncover 2
    intc_1 // 1
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 2 // 2
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_2 // 3
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_3 // 4
    uncover 2
    setbit
    uncover 7
    intc_0 // 0
    getbit
    uncover 1
    pushint 5 // 5
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 6 // 6
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    pushint 7 // 7
    uncover 2
    setbit
    uncover 2
    uncover 1
    concat
    uncover 2
    concat
    uncover 2
    concat
    ==
    assert
    // arc4_types/tuples.py:45
    // total, concat = self.test_stuff(my_tuple)
    dig 10
    callsub test_stuff
    // arc4_types/tuples.py:46
    // assert concat.native == "hello world"
    extract 2 0
    pushbytes "hello world"
    ==
    assert
    // arc4_types/tuples.py:47
    // assert total == 258
    pushint 258 // 258
    ==
    assert
    // arc4_types/tuples.py:49
    // self.test_copy()
    callsub test_copy
    // arc4_types/tuples.py:51
    // return True
    intc_1 // 1
    return

main_bool_false@12:
    intc_0 // 0
    bury 12
    b main_bool_merge@13

main_bool_false@8:
    intc_0 // 0
    bury 13
    b main_bool_merge@9


// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> uint64, bytes:
test_stuff:
    // arc4_types/tuples.py:56-57
    // @subroutine
    // def test_stuff(self, test_tuple: TestTuple) -> tuple[UInt64, String]:
    proto 1 2
    b test_stuff_block@0

test_stuff_block@0:
    // arc4_types/tuples.py:58
    // a, b, c, d, e = test_tuple.native
    frame_dig -1
    intc_0 // 0
    intc_1 // 1
    extract3
    frame_dig -1
    intc_1 // 1
    intc_1 // 1
    extract3
    frame_dig -1
    pushint 2 // 2
    extract_uint16
    frame_dig -1
    intc_3 // 4
    extract_uint16
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    intc_3 // 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    pushint 6 // 6
    intc_1 // 1
    extract3
    uncover 4
    cover 1
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    cover 4
    cover 4
    cover 4
    cover 2
    cover 1
    // arc4_types/tuples.py:60
    // assert test_tuple[-0] == a
    frame_dig -1
    intc_0 // 0
    intc_1 // 1
    extract3
    dig 1
    b==
    assert
    // arc4_types/tuples.py:61
    // assert test_tuple[-1] == e
    frame_dig -1
    pushint 6 // 6
    intc_1 // 1
    extract3
    dig 2
    b==
    assert
    // arc4_types/tuples.py:62
    // assert test_tuple[-2] == d
    frame_dig -1
    intc_3 // 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    dig 3
    ==
    assert
    // arc4_types/tuples.py:64
    // total = a.native + b.native + e.native
    btoi
    uncover 3
    btoi
    +
    uncover 1
    btoi
    +
    cover 1
    // arc4_types/tuples.py:65
    // text = c.native + " " + d.native
    uncover 2
    extract 2 0
    pushbytes " "
    concat
    uncover 1
    extract 2 0
    concat
    // arc4_types/tuples.py:67
    // return total, String(text)
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    retsub


// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
test_copy:
    b test_copy_block@0

test_copy_block@0:
    // arc4_types/tuples.py:71
    // tup = Tuple((UInt8(), DynamicBytes()))
    bytec_1 // 0x
    len
    itob
    extract 6 2
    bytec_1 // 0x
    concat
    bytec_1 // 0x
    bytec_0 // 0x00
    concat
    intc_2 // 3
    itob
    extract 6 2
    concat
    uncover 1
    concat
    // arc4_types/tuples.py:72
    // tup[1].append(Byte())
    dup
    intc_1 // 1
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    bytec_1 // 0x
    bytec_0 // 0x00
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    dig 1
    intc_1 // 1
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // arc4_types/tuples.py:74
    // assert tup[1] == DynamicBytes(0)
    dup
    intc_1 // 1
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_1 // 1
    itob
    extract 6 2
    bytec_0 // 0x00
    concat
    ==
    assert
    // arc4_types/tuples.py:76
    // tup2 = tup.copy()
    dupn 2
    // arc4_types/tuples.py:77
    // tup[1][0] = Byte(1)
    intc_1 // 1
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_0 // 0
    intc_1 // 1
    *
    pushint 2 // 2
    +
    pushbytes 0x01
    replace3 // on error: index access is out of bounds
    dig 1
    intc_1 // 1
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // arc4_types/tuples.py:79
    // assert tup[1] != tup2[1]
    dup
    intc_1 // 1
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dig 1
    intc_1 // 1
    extract_uint16
    cover 1
    dig 2
    len
    cover 1
    uncover 3
    uncover 3
    uncover 3
    substring3
    !=
    assert
    retsub
