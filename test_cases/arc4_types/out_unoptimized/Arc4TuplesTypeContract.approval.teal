#pragma version 10

test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    // arc4_types/tuples.py:15
    // my_tuple = Tuple((UInt8(1), UInt8(2), String("hello"), String("world"), UInt8(255)))
    byte 0x
    byte 0x01
    concat
    byte 0x02
    concat
    int 7
    itob
    extract 6 2
    concat
    byte "\x00\x05hello"
    len
    int 7
    swap
    +
    itob
    extract 6 2
    concat
    byte 0xff
    concat
    byte "\x00\x05hello"
    concat
    byte "\x00\x05world"
    concat
    dup
    swap
    // arc4_types/tuples.py:18
    // Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    byte 0x01020007000eff000568656c6c6f0005776f726c64
    // arc4_types/tuples.py:17-19
    // assert my_tuple == TestTuple.from_bytes(  # type: ignore[comparison-overlap]
    //     Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    // )
    ==
    assert
    // arc4_types/tuples.py:23
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/tuples.py:24
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    // arc4_types/tuples.py:25
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/tuples.py:26
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 3
    // arc4_types/tuples.py:27
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 4
    // arc4_types/tuples.py:28
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 5
    // arc4_types/tuples.py:29
    // Bool(False),
    byte 0x00
    int 0
    int 0
    setbit
    cover 6
    // arc4_types/tuples.py:30
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 7
    // arc4_types/tuples.py:31
    // Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 8
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    byte 0x
    // arc4_types/tuples.py:22
    // UInt8(4),
    byte 0x04
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    concat
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 9
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 10
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 11
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 12
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 13
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 14
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 15
    uncover 2
    setbit
    swap
    concat
    // arc4_types/tuples.py:32
    // UInt8(16),
    byte 0x10
    // arc4_types/tuples.py:20-34
    // boolean_packing = Tuple(
    //     (
    //         UInt8(4),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(True),
    //         Bool(False),
    //         Bool(True),
    //         Bool(True),
    //         UInt8(16),
    //     )
    // )
    concat
    dup
    swap
    // arc4_types/tuples.py:35
    // assert boolean_packing.bytes == Bytes.from_hex("04BD8010")
    dup
    byte 0x04bd8010
    ==
    assert
    // arc4_types/tuples.py:36
    // a, b, c, d, e, f, g, h, i, j, k = boolean_packing.native
    dup
    int 0
    int 1
    extract3 // on error: Index access is out of bounds
    swap
    dup
    int 8
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 9
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 10
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 11
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 12
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 13
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 14
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 15
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 16
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 3
    int 1
    extract3 // on error: Index access is out of bounds
    uncover 11
    cover 4
    uncover 11
    dup
    cover 7
    cover 12
    uncover 5
    cover 6
    uncover 3
    cover 5
    uncover 2
    cover 4
    dup
    cover 4
    // arc4_types/tuples.py:37
    // assert boolean_packing[10] == k
    swap
    int 3
    int 1
    extract3 // on error: Index access is out of bounds
    swap
    b==
    assert
    // arc4_types/tuples.py:38
    // assert a.native == 4, "a is 4"
    btoi
    int 4
    ==
    assert // a is 4
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    byte 0x00
    ==
    bz main_ternary_false@2
    dig 9
    b main_ternary_merge@18

main_ternary_false@2:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 7
    byte 0x00
    ==
    bz main_ternary_false@4
    dig 7
    b main_ternary_merge@17

main_ternary_false@4:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 6
    byte 0x00
    ==
    bz main_ternary_false@6
    dig 6
    b main_ternary_merge@16

main_ternary_false@6:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 5
    byte 0x00
    ==
    bz main_ternary_false@8
    dig 5
    b main_ternary_merge@15

main_ternary_false@8:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 4
    byte 0x00
    ==
    bz main_ternary_false@10
    dig 4
    b main_ternary_merge@14

main_ternary_false@10:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 2
    byte 0x00
    ==
    bz main_ternary_false@12
    dig 2
    b main_ternary_merge@13

main_ternary_false@12:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    dig 1

main_ternary_merge@13:

main_ternary_merge@14:

main_ternary_merge@15:

main_ternary_merge@16:

main_ternary_merge@17:

main_ternary_merge@18:
    // arc4_types/tuples.py:39
    // assert b and d and e and f and g and i and j, "b,d,e,f,g,i,j are true"
    byte 0x00
    !=
    assert // b,d,e,f,g,i,j are true
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    dig 8
    byte 0x00
    !=
    bz main_ternary_false@20
    dig 8
    b main_ternary_merge@21

main_ternary_false@20:
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    dig 3

main_ternary_merge@21:
    // arc4_types/tuples.py:40
    // assert not (c or h), "c and h are false"
    byte 0x00
    ==
    assert // c and h are false
    // arc4_types/tuples.py:41
    // assert k.native == 16, "k is 16"
    dup
    btoi
    int 16
    ==
    assert // k is 16
    // arc4_types/tuples.py:43
    // assert boolean_packing == TestBooleanPacking(boolean_packing.native)
    dig 10
    dup
    int 0
    int 1
    extract3 // on error: Index access is out of bounds
    swap
    dup
    int 8
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 9
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    int 10
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    dup
    int 11
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 3
    dup
    int 12
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 4
    dup
    int 13
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 5
    dup
    int 14
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 6
    dup
    int 15
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 7
    dup
    int 16
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 8
    dup
    int 3
    int 1
    extract3 // on error: Index access is out of bounds
    cover 7
    byte 0x
    uncover 12
    concat
    uncover 11
    concat
    uncover 2
    int 0
    getbit
    swap
    int 9
    uncover 2
    setbit
    uncover 2
    int 0
    getbit
    swap
    int 10
    uncover 2
    setbit
    uncover 2
    int 0
    getbit
    swap
    int 11
    uncover 2
    setbit
    uncover 2
    int 0
    getbit
    swap
    int 12
    uncover 2
    setbit
    uncover 2
    int 0
    getbit
    swap
    int 13
    uncover 2
    setbit
    uncover 2
    int 0
    getbit
    swap
    int 14
    uncover 2
    setbit
    uncover 3
    int 0
    getbit
    swap
    int 15
    uncover 2
    setbit
    uncover 3
    concat
    uncover 2
    concat
    ==
    assert
    // arc4_types/tuples.py:45
    // total, concat = self.test_stuff(my_tuple)
    dig 11
    callsub test_stuff
    // arc4_types/tuples.py:46
    // assert concat.native == "hello world"
    extract 2 0
    byte "hello world"
    ==
    assert
    // arc4_types/tuples.py:47
    // assert total == 258
    int 258
    ==
    assert
    // arc4_types/tuples.py:49
    // return True
    int 1
    return


// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> uint64, bytes:
test_stuff:
    // arc4_types/tuples.py:54-55
    // @subroutine
    // def test_stuff(self, test_tuple: TestTuple) -> tuple[UInt64, String]:
    proto 1 2
    // arc4_types/tuples.py:56
    // a, b, c, d, e = test_tuple.native
    frame_dig -1
    int 0
    int 1
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    int 1
    int 1
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    int 6
    int 1
    extract3 // on error: Index access is out of bounds
    uncover 4
    cover 2
    uncover 3
    cover 4
    swap
    cover 2
    swap
    // arc4_types/tuples.py:58
    // assert test_tuple[-0] == a
    frame_dig -1
    int 0
    int 1
    extract3 // on error: Index access is out of bounds
    dig 1
    b==
    assert
    // arc4_types/tuples.py:59
    // assert test_tuple[-1] == e
    frame_dig -1
    int 6
    int 1
    extract3 // on error: Index access is out of bounds
    dig 2
    b==
    assert
    // arc4_types/tuples.py:60
    // assert test_tuple[-2] == d
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    dig 3
    ==
    assert
    // arc4_types/tuples.py:62
    // total = a.native + b.native + e.native
    btoi
    uncover 3
    btoi
    +
    swap
    btoi
    +
    // arc4_types/tuples.py:63
    // text = c.native + " " + d.native
    uncover 2
    extract 2 0
    byte " "
    concat
    uncover 2
    extract 2 0
    concat
    // arc4_types/tuples.py:65
    // return total, String(text)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
