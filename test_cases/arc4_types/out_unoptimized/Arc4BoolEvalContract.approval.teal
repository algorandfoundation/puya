#pragma version 10

test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    intcblock 0 1
    bytecblock 0x00 0x0000 0x 0x0000000000000000 0x00000000 0x00000000000000000000000000000000 0x0000000000000000000000000000000000000000000000000000000000000000 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x000000 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x000000000000 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    // arc4_types/bool_eval.py:9
    // assert not arc4.Bool(False)
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    ==
    assert
    // arc4_types/bool_eval.py:10
    // assert arc4.Bool(True)
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    !=
    assert
    // arc4_types/bool_eval.py:12
    // assert not arc4.String("")
    bytec_2 // ""
    len
    itob
    extract 6 2
    bytec_2 // ""
    concat
    bytec_1 // 0x0000
    ==
    assert
    // arc4_types/bool_eval.py:13
    // assert arc4.String(".")
    pushbytes "."
    len
    itob
    extract 6 2
    pushbytes "."
    concat
    bytec_1 // 0x0000
    !=
    assert
    // arc4_types/bool_eval.py:15
    // assert not arc4.Address()
    global ZeroAddress
    dup
    ==
    assert
    // arc4_types/bool_eval.py:16
    // assert arc4.Address(Txn.sender)
    txn Sender
    global ZeroAddress
    !=
    assert
    // arc4_types/bool_eval.py:18
    // assert not arc4.UInt8(0)
    bytec_0 // 0x00
    dup
    ==
    assert
    // arc4_types/bool_eval.py:19
    // assert arc4.UInt8(1)
    pushbytes 0x01
    bytec_0 // 0x00
    !=
    assert
    // arc4_types/bool_eval.py:21
    // assert not arc4.UInt16(0)
    bytec_1 // 0x0000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:22
    // assert arc4.UInt16(1)
    pushbytes 0x0001
    bytec_1 // 0x0000
    !=
    assert
    // arc4_types/bool_eval.py:24
    // assert not arc4.UInt32(0)
    bytec 4 // 0x00000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:25
    // assert arc4.UInt32(1)
    pushbytes 0x00000001
    bytec 4 // 0x00000000
    !=
    assert
    // arc4_types/bool_eval.py:27
    // assert not arc4.UInt64(0)
    bytec_3 // 0x0000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:28
    // assert arc4.UInt64(1)
    pushbytes 0x0000000000000001
    bytec_3 // 0x0000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:30
    // assert not arc4.UInt128(0)
    bytec 5 // 0x00000000000000000000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:31
    // assert arc4.UInt128(1)
    pushbytes 0x00000000000000000000000000000001
    bytec 5 // 0x00000000000000000000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:33
    // assert not arc4.UInt256(0)
    bytec 6 // 0x0000000000000000000000000000000000000000000000000000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:34
    // assert arc4.UInt256(1)
    pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001
    bytec 6 // 0x0000000000000000000000000000000000000000000000000000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:36
    // assert not arc4.UInt512(0)
    bytec 7 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:37
    // assert arc4.UInt512(1)
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    bytec 7 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:39
    // assert not arc4.UIntN[t.Literal[24]](0)
    bytec 8 // 0x000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:40
    // assert arc4.UIntN[t.Literal[24]](1)
    pushbytes 0x000001
    bytec 8 // 0x000000
    !=
    assert
    // arc4_types/bool_eval.py:42
    // assert not arc4.BigUIntN[t.Literal[504]](0)
    bytec 9 // 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:43
    // assert arc4.BigUIntN[t.Literal[504]](1)
    pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    bytec 9 // 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:45
    // assert not arc4.UFixedNxM[t.Literal[48], t.Literal[10]]("0.0")
    bytec 10 // 0x000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:46
    // assert arc4.UFixedNxM[t.Literal[48], t.Literal[10]]("1.0")
    pushbytes 0x0002540be400
    bytec 10 // 0x000000000000
    !=
    assert
    // arc4_types/bool_eval.py:48
    // assert not arc4.BigUFixedNxM[t.Literal[496], t.Literal[10]]("0.0")
    bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    dup
    ==
    assert
    // arc4_types/bool_eval.py:49
    // assert arc4.BigUFixedNxM[t.Literal[496], t.Literal[10]]("0.01")
    pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100
    bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    !=
    assert
    // arc4_types/bool_eval.py:51
    // dynamic_arr = arc4.DynamicArray[arc4.UInt64]()
    bytec_1 // 0x0000
    bytec_2 // 0x
    concat
    // arc4_types/bool_eval.py:52
    // assert not dynamic_arr
    dup
    bytec_1 // 0x0000
    ==
    assert
    // arc4_types/bool_eval.py:53
    // dynamic_arr.append(arc4.UInt64(0))
    extract 2 0
    bytec_2 // 0x
    bytec_3 // 0x0000000000000000
    concat
    concat
    dup
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // arc4_types/bool_eval.py:54
    // assert dynamic_arr
    bytec_1 // 0x0000
    !=
    assert
    // arc4_types/bool_eval.py:56
    // assert arc4.Bool() == arc4.Bool(False)
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    ==
    assert
    // arc4_types/bool_eval.py:58
    // return True
    intc_1 // 1
    return
