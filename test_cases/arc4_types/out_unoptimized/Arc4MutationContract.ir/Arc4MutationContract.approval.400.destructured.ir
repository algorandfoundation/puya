main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
        test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bool, bytes>:
    block@0: // L26
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ length_minus_1#0 16u)
        let popped_location#0: uint64 = tmp%5#0
        let tmp%6#0: bool = (getbit result#0 popped_location#0)
        let popped#0: bool = tmp%6#0
        let tmp%7#0: bytes = (setbit result#0 popped_location#0 0u)
        let result#0: bytes = tmp%7#0
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let tmp%11#0: bytes = (substring3 result#0 0u tmp%10#0)
        let result#0: bytes = tmp%11#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L46
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#0: bytes = tmp%8#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L65
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* length_minus_1#0 2u)
        let popped_header_offset#0: uint64 = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) array#0)
        let head_and_tail#0: bytes = tmp%3#0
        let tmp%4#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let popped_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let tmp%6#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let popped#0: bytes = tmp%6#0
        let tmp%7#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%8#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%9#0: bytes = (substring3 head_and_tail#0 tmp%8#0 popped_offset#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let head_and_tail#0: bytes = tmp%10#0
        let tmp%11#0: bytes = (itob length_minus_1#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#0, length_minus_1#0, 0u)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let updated#0: bytes = tmp%14#0
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L129
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#4: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L154
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#0: bytes = tmp%12#0
        let result#4: bytes = result#0
        goto block@2
    block@2: // after_if_else_L153
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        let result#0: bytes = result#4
        goto block@3
    block@3: // while_top_L159
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L160
        let tmp%16#0: bool = (getbit new_items_bytes#0 read_offset#0)
        let tmp%17#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let result#0: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#0 1u)
        let write_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#0 read_step#0)
        let read_offset#0: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L159
        return result#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L167
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_length#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let header_end#0: uint64 = tmp%3#0
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let value_internal%0#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L342
        let continue_looping%0#0: bool = (< value_internal%0#0 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let head_offset#0: uint64 = value_internal%0#0
        let tmp%6#0: bytes = (itob tail_offset#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let array_head_and_tail#0: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#0 tail_offset#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#0 tmp%10#0)
        let tail_offset#0: uint64 = tmp%11#0
        goto block@3
    block@3: // for_footer_L342
        let value_internal%0#0: uint64 = (+ value_internal%0#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#0

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
    block@0: // L58
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x03)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x04)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%3#0
        let tmp%0#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let concat%0#0: Encoded(len+uint8[]) = (concat uint8_array#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 uint8_array#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 2u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let array_concat_tuple#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%1#0 0x01)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x02)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x03)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x04)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%7#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%1#0: bool = (== array_concat_tuple#0 encoded_array%1#0)
        (assert tmp%1#0)
        let aggregate%head%8#0: bytes = (concat 0x 0x05)
        let aggregate%as_Encoded(uint8[])%1#0: Encoded(uint8[]) = aggregate%head%8#0
        let tmp%2#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%1#0
        let concat%1#0: Encoded(len+uint8[]) = (concat array_concat_tuple#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 array_concat_tuple#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let array_concat_tuple#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 5u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%9#0: bytes = (concat aggregate%len_u16%2#0 0x01)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x02)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 0x03)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 0x04)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 0x05)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%head%13#0
        let encoded_array%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let tmp%3#0: bool = (== array_concat_tuple#0 encoded_array%2#0)
        (assert tmp%3#0)
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "World")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "World")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%14#0: bytes = (concat aggregate%len_u16%3#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%4#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%15#0 tmp%4#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%5#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let encoded_array%3#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let hello_world#0: Encoded(len+(len+utf8[])[]) = encoded_array%3#0
        let aggregate%length%2#0: uint64 = (len "Hello")
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%16#0: bytes = (concat aggregate%len_u16%4#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%16#0 tmp%6#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%2#0
        let encoded_array%4#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%1#0
        let aggregate%length%3#0: uint64 = (len "World")
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "World")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let aggregate%as_bytes%12#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%17#0: bytes = (concat aggregate%len_u16%5#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%17#0 tmp%7#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%2#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%3#0
        let encoded_array%5#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%2#0
        let total_length%0#0: uint64 = (len encoded_array%5#0)
        let extract_to_end%0#0: bytes = (substring3 encoded_array%5#0 2u total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 encoded_array%5#0 0u) // on error: invalid array length header
        let tmp%8#0: uint64 = aggregate%array_length%0#0
        let start_of_tail%0#0: uint64 = (* tmp%8#0 2u)
        let total_length%1#0: uint64 = (len extract_to_end%0#0)
        let data%0#0: bytes = (substring3 extract_to_end%0#0 start_of_tail%0#0 total_length%1#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(encoded_array%4#0, data%0#0, tmp%8#0)
        let hello_world_concat#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        let tmp%9#0: bool = (== hello_world#0 hello_world_concat#0)
        (assert tmp%9#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
    block@0: // L70
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%0#0
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = encoded_array%0#0
        let tmp%0#0: bool = (== array_of_array#0 0x0000)
        (assert tmp%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%1#0 0x0a)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%0#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let concat%0#0: bytes = (concat 0x encoded_array%1#0)
        let as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, concat%0#0, 1u)
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = as_Encoded(len+(len+uint8[])[])%0#0
        let tmp%1#0: bool = (== array_of_array#0 0x0001000200010a)
        (assert tmp%1#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%len_u16%2#0 0x10)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let concat%1#0: bytes = (concat 0x encoded_array%2#0)
        let as_Encoded(len+(len+uint8[])[])%1#0: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, concat%1#0, 1u)
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = as_Encoded(len+(len+uint8[])[])%1#0
        let tmp%2#0: bool = (== array_of_array#0 0x00020004000700010a000110)
        (assert tmp%2#0)
        let aggregate%total_length%0#0: uint64 = (len array_of_array#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 array_of_array#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 array_of_array#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%0#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%0#0: Encoded(len+uint8[]) = aggregate%item%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0xff)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%2#0
        let tmp%3#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let concat%2#0: Encoded(len+uint8[]) = (concat array_item%0#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 array_item%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array_of_array#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< 0u aggregate%array_length%1#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array_of_array#0 0u) // on error: invalid array length header
        let aggregate%lt%2#0: bool = (< 0u aggregate%array_length%2#0)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#0, as_Encoded(len+uint8[])%0#0, 0u)
        let updated_array%0#0: Encoded(len+(len+uint8[])[]) = aggregate%updated_array%0#0
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = updated_array%0#0
        let tmp%4#0: bool = (== array_of_array#0 0x00020004000800020aff000110)
        (assert tmp%4#0)
        let aggregate%total_length%2#0: uint64 = (len array_of_array#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 array_of_array#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 array_of_array#0 0u) // on error: invalid array length header
        let aggregate%lt%3#0: bool = (< 0u aggregate%array_length%3#0)
        (assert aggregate%lt%3#0) // index access is out of bounds
        let aggregate%item_offset_offset%2#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%item_length%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0)
        let aggregate%item_length_in_bytes%2#0: uint64 = (* aggregate%item_length%2#0 1u)
        let aggregate%item_head_tail_length%2#0: uint64 = (+ aggregate%item_length_in_bytes%2#0 2u)
        let aggregate%item%2#0: bytes = (extract3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%item_head_tail_length%2#0)
        let aggregate%write_offset%0#0: uint64 = (* 1u 1u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%1#0: bytes = (replace3 aggregate%item%2#0 aggregate%write_offset_with_length_header%0#0 0x00) // on error: index access is out of bounds
        let aggregate%array_length%4#0: uint64 = (extract_uint16 array_of_array#0 0u) // on error: invalid array length header
        let aggregate%lt%4#0: bool = (< 0u aggregate%array_length%4#0)
        (assert aggregate%lt%4#0) // index access is out of bounds
        let aggregate%updated_array%2#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#0, aggregate%updated_array%1#0, 0u)
        let updated_array%1#0: Encoded(len+(len+uint8[])[]) = aggregate%updated_array%2#0
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = updated_array%1#0
        let tmp%5#0: bool = (== array_of_array#0 0x00020004000800020a00000110)
        (assert tmp%5#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
    block@0: // L85
        let aggregate%head%0#0: bytes = (concat 0x 0x0a)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x09)
        let aggregate%as_Encoded(uint8[2])%0#0: Encoded(uint8[2]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x40)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x80)
        let aggregate%as_Encoded(uint8[2])%1#0: Encoded(uint8[2]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%1#0
        let aggregate%head%4#0: bytes = (concat 0x encoded_array%0#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 encoded_array%1#0)
        let aggregate%as_Encoded(uint8[2][2])%0#0: Encoded(uint8[2][2]) = aggregate%head%5#0
        let encoded_array%2#0: Encoded(uint8[2][2]) = aggregate%as_Encoded(uint8[2][2])%0#0
        let array_of_array#0: Encoded(uint8[2][2]) = encoded_array%2#0
        let tmp%0#0: bool = (== array_of_array#0 0x0a094080)
        (assert tmp%0#0)
        let aggregate%head%6#0: bytes = (concat 0x 0xff)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0xfe)
        let aggregate%as_Encoded(uint8[2])%2#0: Encoded(uint8[2]) = aggregate%head%7#0
        let encoded_array%3#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%2#0
        let aggregate%write_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 array_of_array#0 aggregate%write_offset%0#0 encoded_array%3#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(uint8[2][2]) = aggregate%updated_array%0#0
        let array_of_array#0: Encoded(uint8[2][2]) = updated_array%0#0
        let tmp%1#0: bool = (== array_of_array#0 0xfffe4080)
        (assert tmp%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 2u)
        let aggregate%encoded_element%1#0: bytes = (extract3 array_of_array#0 aggregate%bytes_offset%1#0 2u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 0u 1u)
        let aggregate%updated_array%1#0: bytes = (replace3 aggregate%encoded_element%1#0 aggregate%write_offset%1#0 0x01) // on error: index access is out of bounds
        let aggregate%write_offset%2#0: uint64 = (* 1u 2u)
        let aggregate%updated_array%2#0: bytes = (replace3 array_of_array#0 aggregate%write_offset%2#0 aggregate%updated_array%1#0) // on error: index access is out of bounds
        let updated_array%1#0: Encoded(uint8[2][2]) = aggregate%updated_array%2#0
        let array_of_array#0: Encoded(uint8[2][2]) = updated_array%1#0
        let tmp%2#0: bool = (== array_of_array#0 0xfffe0180)
        (assert tmp%2#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
    block@0: // L100
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let aggregate%write_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 dynamic_uint8_array#0 aggregate%write_offset_with_length_header%0#0 0xff) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(len+uint8[]) = aggregate%updated_array%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = updated_array%0#0
        let tmp%0#0: bool = (== dynamic_uint8_array#0 0x0002ff02)
        (assert tmp%0#0)
        let aggregate%head%2#0: bytes = (concat 0x 0x01)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x02)
        let aggregate%as_Encoded(uint8[2])%0#0: Encoded(uint8[2]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%0#0
        let static_uint8_array#0: Encoded(uint8[2]) = encoded_array%1#0
        let aggregate%write_offset%1#0: uint64 = (* 1u 1u)
        let aggregate%updated_array%1#0: bytes = (replace3 static_uint8_array#0 aggregate%write_offset%1#0 0xff) // on error: index access is out of bounds
        let updated_array%1#0: Encoded(uint8[2]) = aggregate%updated_array%1#0
        let static_uint8_array#0: Encoded(uint8[2]) = updated_array%1#0
        let tmp%1#0: bool = (== static_uint8_array#0 0x01ff)
        (assert tmp%1#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%get_bit%0#0: bool = (getbit tmp%3#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%2#0 1u aggregate%get_bit%0#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%1#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%4#0
        let encoded_array%2#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded_array%2#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%get_bit%1#0: bool = (getbit tmp%4#0 0u)
        let aggregate%as_Encoded(bool1)%0#0: Encoded(bool1) = aggregate%get_bit%1#0
        let encoded_value%0#0: Encoded(bool1) = aggregate%as_Encoded(bool1)%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%0#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< 0u aggregate%array_length%1#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%write_offset_with_length_header%1#0: uint64 = (+ 0u 16u)
        let aggregate%updated_target%0#0: Encoded(len+bool1[]) = (setbit dynamic_bool_array#0 aggregate%write_offset_with_length_header%1#0 encoded_value%0#0)
        let updated_array%2#0: Encoded(len+bool1[]) = aggregate%updated_target%0#0
        let dynamic_bool_array#0: Encoded(len+bool1[]) = updated_array%2#0
        let tmp%5#0: bool = (== dynamic_bool_array#0 0x000200)
        (assert tmp%5#0)
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%6#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%4#0: Encoded(bool8) = aggregate%encoded_bool%4#0
        let tmp%7#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#0
        let aggregate%get_bit%3#0: bool = (getbit tmp%7#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit tmp%6#0 1u aggregate%get_bit%3#0)
        let aggregate%head%5#0: bytes = (concat 0x aggregate%set_bit%1#0)
        let aggregate%as_Encoded(bool1[2])%0#0: Encoded(bool1[2]) = aggregate%head%5#0
        let encoded_array%3#0: Encoded(bool1[2]) = aggregate%as_Encoded(bool1[2])%0#0
        let static_bool_array#0: Encoded(bool1[2]) = encoded_array%3#0
        let aggregate%encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%5#0: Encoded(bool8) = aggregate%encoded_bool%5#0
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#0
        let aggregate%get_bit%4#0: bool = (getbit tmp%8#0 0u)
        let aggregate%as_Encoded(bool1)%1#0: Encoded(bool1) = aggregate%get_bit%4#0
        let encoded_value%1#0: Encoded(bool1) = aggregate%as_Encoded(bool1)%1#0
        let aggregate%lt%2#0: bool = (< 1u 2u)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%lt%3#0: bool = (< 1u 2u)
        (assert aggregate%lt%3#0) // index access is out of bounds
        let aggregate%updated_target%1#0: Encoded(bool1[2]) = (setbit static_bool_array#0 1u encoded_value%1#0)
        let updated_array%3#0: Encoded(bool1[2]) = aggregate%updated_target%1#0
        let static_bool_array#0: Encoded(bool1[2]) = updated_array%3#0
        let tmp%9#0: bool = (== static_bool_array#0 0x80)
        (assert tmp%9#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
    block@0: // L116
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%0#0: uint64 = (len "Happy")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Happy")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "Days")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Days")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x32)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 6u aggregate%data_length%0#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 tmp%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%2#0)
        let aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%0#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let tmp%3#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%0#0
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = tmp%3#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%get_bit%0#0: bool = (getbit tmp%4#0 0u)
        let aggregate%as_Encoded(bool1)%0#0: Encoded(bool1) = aggregate%get_bit%0#0
        let encoded_value%0#0: Encoded(bool1) = aggregate%as_Encoded(bool1)%0#0
        let aggregate%updated_data%0#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = (setbit test_struct#0 0u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%updated_data%0#0
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%0#0
        let aggregate%updated_data%1#0: bytes = (replace3 test_struct#0 1u 0x0c)
        let updated_tuple%1#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%updated_data%1#0
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%1#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%5#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%length%2#0: uint64 = (len "Happy")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Happy")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let aggregate%length%3#0: uint64 = (len "Days")
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Days")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%5#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0c)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%6#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 6u aggregate%data_length%2#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%7#0 tmp%6#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%7#0)
        let aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%1#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%concat%3#0
        let tmp%8#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%1#0
        let tmp%9#0: bool = (== test_struct#0 tmp%8#0)
        (assert tmp%9#0)
        let aggregate%length%4#0: uint64 = (len "Hmmmm")
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 "Hmmmm")
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%10#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 test_struct#0 2u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 test_struct#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%2#0: bytes = (concat aggregate%data_up_to_item%0#0 tmp%10#0)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 test_struct#0 4u)
        let aggregate%total_length%0#0: uint64 = (len test_struct#0)
        let aggregate%data_beyond_item%0#0: bytes = (substring3 test_struct#0 aggregate%next_item_offset%0#0 aggregate%total_length%0#0)
        let aggregate%updated_data%3#0: bytes = (concat aggregate%updated_data%2#0 aggregate%data_beyond_item%0#0)
        let aggregate%old_value_length%0#0: uint64 = (- aggregate%next_item_offset%0#0 aggregate%item_offset%0#0)
        let aggregate%new_value_length%0#0: uint64 = (len tmp%10#0)
        let aggregate%tail_offset%0#0: uint64 = (extract_uint16 test_struct#0 4u)
        let aggregate%tail_offset%1#0: uint64 = (+ aggregate%tail_offset%0#0 aggregate%new_value_length%0#0)
        let aggregate%tail_offset%2#0: uint64 = (- aggregate%tail_offset%1#0 aggregate%old_value_length%0#0)
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%tail_offset%2#0)
        let aggregate%tail_offset_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%updated_data%4#0: bytes = (replace3 aggregate%updated_data%3#0 4u aggregate%tail_offset_bytes%0#0)
        let updated_tuple%2#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%updated_data%4#0
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%2#0
        let aggregate%length%5#0: uint64 = (len "Oh well")
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 "Oh well")
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%11#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 test_struct#0 4u)
        let aggregate%data_up_to_item%1#0: bytes = (extract3 test_struct#0 0u aggregate%item_offset%1#0)
        let aggregate%updated_data%5#0: bytes = (concat aggregate%data_up_to_item%1#0 tmp%11#0)
        let updated_tuple%3#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%updated_data%5#0
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%3#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%12#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%length%6#0: uint64 = (len "Hmmmm")
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 "Hmmmm")
        let aggregate%as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = aggregate%encoded_value%6#0
        let tmp%13#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#0
        let aggregate%length%7#0: uint64 = (len "Oh well")
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 "Oh well")
        let aggregate%as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = aggregate%encoded_value%7#0
        let tmp%14#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#0
        let aggregate%head%8#0: bytes = (concat 0x tmp%12#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 0x0c)
        let aggregate%as_bytes%13#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len tmp%13#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 6u aggregate%data_length%4#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%11#0 tmp%13#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 tmp%14#0)
        let aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%2#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%concat%5#0
        let tmp%15#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = aggregate%as_Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))%2#0
        let tmp%16#0: bool = (== test_struct#0 tmp%15#0)
        (assert tmp%16#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
    block@0: // L143
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x32)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%2#0
        let tmp%0#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let concat%0#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%1#0 0x01)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 0x02)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x32)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%5#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%1#0: bool = (== dynamic_uint8_array#0 encoded_array%1#0)
        (assert tmp%1#0)
        let total_length%0#0: uint64 = (len dynamic_uint8_array#0)
        let extract_to_end%0#0: bytes = (substring3 dynamic_uint8_array#0 2u total_length%0#0)
        let concat%1#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%1#0)
        let extract_to_end%1#0: bytes = (substring3 concat%1#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 6u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%6#0: bytes = (concat aggregate%len_u16%2#0 0x01)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x02)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x32)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 0x01)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x02)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 0x32)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%head%11#0
        let encoded_array%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let tmp%2#0: bool = (== dynamic_uint8_array#0 encoded_array%2#0)
        (assert tmp%2#0)
        let aggregate%head%12#0: bytes = (concat 0x 0x04)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 0x5a)
        let aggregate%as_Encoded(uint8[])%1#0: Encoded(uint8[]) = aggregate%head%13#0
        let tmp%3#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%1#0
        let concat%2#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 2u)
        let as_bytes%2#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = replace%2#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%14#0: bytes = (concat aggregate%len_u16%3#0 0x01)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 0x02)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 0x32)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 0x01)
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 0x02)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 0x32)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 0x04)
        let aggregate%head%21#0: bytes = (concat aggregate%head%20#0 0x5a)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%head%21#0
        let encoded_array%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let tmp%4#0: bool = (== dynamic_uint8_array#0 encoded_array%3#0)
        (assert tmp%4#0)
        let (tmp%5#0: bytes, tmp%6#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#0, 1u)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = tmp%6#0
        let popped#0: Encoded(uint8) = tmp%5#0
        let reinterpret_biguint%0#0: biguint = popped#0
        let tmp%7#0: bool = (b== reinterpret_biguint%0#0 0x5a)
        (assert tmp%7#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob 7u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%22#0: bytes = (concat aggregate%len_u16%4#0 0x01)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 0x02)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 0x32)
        let aggregate%head%25#0: bytes = (concat aggregate%head%24#0 0x01)
        let aggregate%head%26#0: bytes = (concat aggregate%head%25#0 0x02)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 0x32)
        let aggregate%head%28#0: bytes = (concat aggregate%head%27#0 0x04)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%head%28#0
        let encoded_array%4#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%4#0
        let tmp%8#0: bool = (== dynamic_uint8_array#0 encoded_array%4#0)
        (assert tmp%8#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
    block@0: // L166
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%get_bit%0#0: bool = (getbit tmp%1#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%0#0 1u aggregate%get_bit%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded_array%0#0
        let tmp%2#0: bool = (== dynamic_bool_array#0 0x000280)
        (assert tmp%2#0)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%head%1#0: bytes = (concat 0x tmp%3#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 tmp%4#0)
        let aggregate%as_Encoded(bool8[])%0#0: Encoded(bool8[]) = aggregate%head%2#0
        let tmp%5#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#0
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, tmp%5#0, 2u, 8u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%6#0: bool = (== dynamic_bool_array#0 0x0004a0)
        (assert tmp%6#0)
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%4#0: Encoded(bool8) = aggregate%encoded_bool%4#0
        let tmp%7#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#0
        let aggregate%encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%5#0: Encoded(bool8) = aggregate%encoded_bool%5#0
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#0
        let aggregate%encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%6#0: Encoded(bool8) = aggregate%encoded_bool%6#0
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%6#0
        let aggregate%encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%7#0: Encoded(bool8) = aggregate%encoded_bool%7#0
        let tmp%10#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%7#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%get_bit%1#0: bool = (getbit tmp%8#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit tmp%7#0 1u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: bool = (getbit tmp%9#0 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit aggregate%set_bit%1#0 2u aggregate%get_bit%2#0)
        let aggregate%get_bit%3#0: bool = (getbit tmp%10#0 0u)
        let aggregate%set_bit%3#0: Encoded(bool8) = (setbit aggregate%set_bit%2#0 3u aggregate%get_bit%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%1#0 aggregate%set_bit%3#0)
        let aggregate%as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%1#0
        let tmp%11#0: bool = (== dynamic_bool_array#0 encoded_array%1#0)
        (assert tmp%11#0)
        let total_length%0#0: uint64 = (len dynamic_bool_array#0)
        let extract_to_end%0#0: bytes = (substring3 dynamic_bool_array#0 2u total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u) // on error: invalid array length header
        let tmp%12#0: uint64 = aggregate%array_length%0#0
        let as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, extract_to_end%0#0, tmp%12#0, 1u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%1#0
        let aggregate%encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%8#0: Encoded(bool8) = aggregate%encoded_bool%8#0
        let tmp%13#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%8#0
        let aggregate%encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%9#0: Encoded(bool8) = aggregate%encoded_bool%9#0
        let tmp%14#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%9#0
        let aggregate%encoded_bool%10#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%10#0: Encoded(bool8) = aggregate%encoded_bool%10#0
        let tmp%15#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%10#0
        let aggregate%encoded_bool%11#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%11#0: Encoded(bool8) = aggregate%encoded_bool%11#0
        let tmp%16#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%11#0
        let aggregate%encoded_bool%12#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%12#0: Encoded(bool8) = aggregate%encoded_bool%12#0
        let tmp%17#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%12#0
        let aggregate%encoded_bool%13#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%13#0: Encoded(bool8) = aggregate%encoded_bool%13#0
        let tmp%18#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%13#0
        let aggregate%encoded_bool%14#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%14#0: Encoded(bool8) = aggregate%encoded_bool%14#0
        let tmp%19#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%14#0
        let aggregate%encoded_bool%15#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%15#0: Encoded(bool8) = aggregate%encoded_bool%15#0
        let tmp%20#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%15#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%get_bit%4#0: bool = (getbit tmp%14#0 0u)
        let aggregate%set_bit%4#0: Encoded(bool8) = (setbit tmp%13#0 1u aggregate%get_bit%4#0)
        let aggregate%get_bit%5#0: bool = (getbit tmp%15#0 0u)
        let aggregate%set_bit%5#0: Encoded(bool8) = (setbit aggregate%set_bit%4#0 2u aggregate%get_bit%5#0)
        let aggregate%get_bit%6#0: bool = (getbit tmp%16#0 0u)
        let aggregate%set_bit%6#0: Encoded(bool8) = (setbit aggregate%set_bit%5#0 3u aggregate%get_bit%6#0)
        let aggregate%get_bit%7#0: bool = (getbit tmp%17#0 0u)
        let aggregate%set_bit%7#0: Encoded(bool8) = (setbit aggregate%set_bit%6#0 4u aggregate%get_bit%7#0)
        let aggregate%get_bit%8#0: bool = (getbit tmp%18#0 0u)
        let aggregate%set_bit%8#0: Encoded(bool8) = (setbit aggregate%set_bit%7#0 5u aggregate%get_bit%8#0)
        let aggregate%get_bit%9#0: bool = (getbit tmp%19#0 0u)
        let aggregate%set_bit%9#0: Encoded(bool8) = (setbit aggregate%set_bit%8#0 6u aggregate%get_bit%9#0)
        let aggregate%get_bit%10#0: bool = (getbit tmp%20#0 0u)
        let aggregate%set_bit%10#0: Encoded(bool8) = (setbit aggregate%set_bit%9#0 7u aggregate%get_bit%10#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%2#0 aggregate%set_bit%10#0)
        let aggregate%as_Encoded(len+bool1[])%2#0: Encoded(len+bool1[]) = aggregate%head%4#0
        let encoded_array%2#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%2#0
        let tmp%21#0: bool = (== dynamic_bool_array#0 encoded_array%2#0)
        (assert tmp%21#0)
        let aggregate%encoded_bool%16#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%16#0: Encoded(bool8) = aggregate%encoded_bool%16#0
        let tmp%22#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%16#0
        let aggregate%head%5#0: bytes = (concat 0x tmp%22#0)
        let aggregate%as_Encoded(bool8[])%1#0: Encoded(bool8[]) = aggregate%head%5#0
        let tmp%23#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%1#0
        let as_Encoded(len+bool1[])%2#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, tmp%23#0, 1u, 8u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%2#0
        let aggregate%encoded_bool%17#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%17#0: Encoded(bool8) = aggregate%encoded_bool%17#0
        let tmp%24#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%17#0
        let aggregate%encoded_bool%18#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%18#0: Encoded(bool8) = aggregate%encoded_bool%18#0
        let tmp%25#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%18#0
        let aggregate%encoded_bool%19#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%19#0: Encoded(bool8) = aggregate%encoded_bool%19#0
        let tmp%26#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%19#0
        let aggregate%encoded_bool%20#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%20#0: Encoded(bool8) = aggregate%encoded_bool%20#0
        let tmp%27#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%20#0
        let aggregate%encoded_bool%21#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%21#0: Encoded(bool8) = aggregate%encoded_bool%21#0
        let tmp%28#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%21#0
        let aggregate%encoded_bool%22#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%22#0: Encoded(bool8) = aggregate%encoded_bool%22#0
        let tmp%29#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%22#0
        let aggregate%encoded_bool%23#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%23#0: Encoded(bool8) = aggregate%encoded_bool%23#0
        let tmp%30#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%23#0
        let aggregate%encoded_bool%24#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%24#0: Encoded(bool8) = aggregate%encoded_bool%24#0
        let tmp%31#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%24#0
        let aggregate%encoded_bool%25#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%25#0: Encoded(bool8) = aggregate%encoded_bool%25#0
        let tmp%32#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%25#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 9u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%get_bit%11#0: bool = (getbit tmp%25#0 0u)
        let aggregate%set_bit%11#0: Encoded(bool8) = (setbit tmp%24#0 1u aggregate%get_bit%11#0)
        let aggregate%get_bit%12#0: bool = (getbit tmp%26#0 0u)
        let aggregate%set_bit%12#0: Encoded(bool8) = (setbit aggregate%set_bit%11#0 2u aggregate%get_bit%12#0)
        let aggregate%get_bit%13#0: bool = (getbit tmp%27#0 0u)
        let aggregate%set_bit%13#0: Encoded(bool8) = (setbit aggregate%set_bit%12#0 3u aggregate%get_bit%13#0)
        let aggregate%get_bit%14#0: bool = (getbit tmp%28#0 0u)
        let aggregate%set_bit%14#0: Encoded(bool8) = (setbit aggregate%set_bit%13#0 4u aggregate%get_bit%14#0)
        let aggregate%get_bit%15#0: bool = (getbit tmp%29#0 0u)
        let aggregate%set_bit%15#0: Encoded(bool8) = (setbit aggregate%set_bit%14#0 5u aggregate%get_bit%15#0)
        let aggregate%get_bit%16#0: bool = (getbit tmp%30#0 0u)
        let aggregate%set_bit%16#0: Encoded(bool8) = (setbit aggregate%set_bit%15#0 6u aggregate%get_bit%16#0)
        let aggregate%get_bit%17#0: bool = (getbit tmp%31#0 0u)
        let aggregate%set_bit%17#0: Encoded(bool8) = (setbit aggregate%set_bit%16#0 7u aggregate%get_bit%17#0)
        let aggregate%head%6#0: bytes = (concat aggregate%len_u16%3#0 aggregate%set_bit%17#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 tmp%32#0)
        let aggregate%as_Encoded(len+bool1[])%3#0: Encoded(len+bool1[]) = aggregate%head%7#0
        let encoded_array%3#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%3#0
        let tmp%33#0: bool = (== dynamic_bool_array#0 encoded_array%3#0)
        (assert tmp%33#0)
        let (tmp%34#0: bool, tmp%35#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
        let aggregate%encoded_bool%26#0: bytes[1] = (setbit 0x00 0u tmp%34#0)
        let tmp%36#0: Encoded(bool8) = aggregate%encoded_bool%26#0
        let dynamic_bool_array#0: Encoded(len+bool1[]) = tmp%35#0
        let aggregate%encoded_bool%27#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%26#0: Encoded(bool8) = aggregate%encoded_bool%27#0
        let tmp%37#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%26#0
        let tmp%38#0: bool = (== tmp%36#0 tmp%37#0)
        (assert tmp%38#0)
        let (tmp%39#0: bool, tmp%40#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
        let aggregate%encoded_bool%28#0: bytes[1] = (setbit 0x00 0u tmp%39#0)
        let tmp%41#0: Encoded(bool8) = aggregate%encoded_bool%28#0
        let dynamic_bool_array#0: Encoded(len+bool1[]) = tmp%40#0
        let aggregate%encoded_bool%29#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%27#0: Encoded(bool8) = aggregate%encoded_bool%29#0
        let tmp%42#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%27#0
        let tmp%43#0: bool = (== tmp%41#0 tmp%42#0)
        (assert tmp%43#0)
        let aggregate%encoded_bool%30#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%28#0: Encoded(bool8) = aggregate%encoded_bool%30#0
        let tmp%44#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%28#0
        let aggregate%encoded_bool%31#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%29#0: Encoded(bool8) = aggregate%encoded_bool%31#0
        let tmp%45#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%29#0
        let aggregate%encoded_bool%32#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%30#0: Encoded(bool8) = aggregate%encoded_bool%32#0
        let tmp%46#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%30#0
        let aggregate%encoded_bool%33#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%31#0: Encoded(bool8) = aggregate%encoded_bool%33#0
        let tmp%47#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%31#0
        let aggregate%encoded_bool%34#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%32#0: Encoded(bool8) = aggregate%encoded_bool%34#0
        let tmp%48#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%32#0
        let aggregate%encoded_bool%35#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%33#0: Encoded(bool8) = aggregate%encoded_bool%35#0
        let tmp%49#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%33#0
        let aggregate%encoded_bool%36#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%34#0: Encoded(bool8) = aggregate%encoded_bool%36#0
        let tmp%50#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%34#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 7u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%get_bit%18#0: bool = (getbit tmp%45#0 0u)
        let aggregate%set_bit%18#0: Encoded(bool8) = (setbit tmp%44#0 1u aggregate%get_bit%18#0)
        let aggregate%get_bit%19#0: bool = (getbit tmp%46#0 0u)
        let aggregate%set_bit%19#0: Encoded(bool8) = (setbit aggregate%set_bit%18#0 2u aggregate%get_bit%19#0)
        let aggregate%get_bit%20#0: bool = (getbit tmp%47#0 0u)
        let aggregate%set_bit%20#0: Encoded(bool8) = (setbit aggregate%set_bit%19#0 3u aggregate%get_bit%20#0)
        let aggregate%get_bit%21#0: bool = (getbit tmp%48#0 0u)
        let aggregate%set_bit%21#0: Encoded(bool8) = (setbit aggregate%set_bit%20#0 4u aggregate%get_bit%21#0)
        let aggregate%get_bit%22#0: bool = (getbit tmp%49#0 0u)
        let aggregate%set_bit%22#0: Encoded(bool8) = (setbit aggregate%set_bit%21#0 5u aggregate%get_bit%22#0)
        let aggregate%get_bit%23#0: bool = (getbit tmp%50#0 0u)
        let aggregate%set_bit%23#0: Encoded(bool8) = (setbit aggregate%set_bit%22#0 6u aggregate%get_bit%23#0)
        let aggregate%head%8#0: bytes = (concat aggregate%len_u16%4#0 aggregate%set_bit%23#0)
        let aggregate%as_Encoded(len+bool1[])%4#0: Encoded(len+bool1[]) = aggregate%head%8#0
        let encoded_array%4#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%4#0
        let tmp%51#0: bool = (== dynamic_bool_array#0 encoded_array%4#0)
        (assert tmp%51#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
    block@0: // L213
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let hello#0: Encoded(len+utf8[]) = tmp%0#0
        let aggregate%length%1#0: uint64 = (len "World")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "World")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let world#0: Encoded(len+utf8[]) = tmp%1#0
        let aggregate%length%2#0: uint64 = (len "Foo")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Foo")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let foo#0: Encoded(len+utf8[]) = tmp%2#0
        let aggregate%length%3#0: uint64 = (len "Bar")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Bar")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let bar#0: Encoded(len+utf8[]) = tmp%3#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 hello#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 world#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = encoded_array%0#0
        let tmp%4#0: bool = (== dynamic_string_array#0 0x00020004000b000548656c6c6f0005576f726c64)
        (assert tmp%4#0)
        let concat%0#0: bytes = (concat 0x foo#0)
        let concat%1#0: bytes = (concat concat%0#0 bar#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, concat%1#0, 2u)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        let tmp%5#0: bool = (== dynamic_string_array#0 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%5#0)
        let total_length%0#0: uint64 = (len dynamic_string_array#0)
        let extract_to_end%0#0: bytes = (substring3 dynamic_string_array#0 2u total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_string_array#0 0u) // on error: invalid array length header
        let tmp%6#0: uint64 = aggregate%array_length%0#0
        let start_of_tail%0#0: uint64 = (* tmp%6#0 2u)
        let total_length%1#0: uint64 = (len extract_to_end%0#0)
        let data%0#0: bytes = (substring3 extract_to_end%0#0 start_of_tail%0#0 total_length%1#0)
        let as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, data%0#0, tmp%6#0)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%1#0
        let aggregate%as_bytes%7#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob 16u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%1#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 16u aggregate%data_length%2#0)
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ aggregate%current_tail_offset%3#0 aggregate%data_length%4#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len bar#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%5#0)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ aggregate%current_tail_offset%5#0 aggregate%data_length%6#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%6#0 aggregate%data_length%7#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%current_tail_offset%7#0)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%offset_as_uint16%8#0)
        let aggregate%data_length%8#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%8#0: uint64 = (+ aggregate%current_tail_offset%7#0 aggregate%data_length%8#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%current_tail_offset%8#0)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%offset_as_uint16%9#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%9#0 hello#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 world#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 foo#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 bar#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%concat%5#0 hello#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 world#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%concat%7#0 foo#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%concat%8#0 bar#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%9#0
        let encoded_array%1#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%1#0
        let tmp%7#0: bool = (== dynamic_string_array#0 encoded_array%1#0)
        (assert tmp%7#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob 16u)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%head%10#0: bytes = (concat aggregate%len_u16%2#0 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%10#0: uint64 = (+ 16u aggregate%data_length%10#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%current_tail_offset%10#0)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%11#0)
        let aggregate%data_length%11#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%11#0: uint64 = (+ aggregate%current_tail_offset%10#0 aggregate%data_length%11#0)
        let aggregate%as_bytes%19#0: bytes[8] = (itob aggregate%current_tail_offset%11#0)
        let aggregate%offset_as_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%offset_as_uint16%12#0)
        let aggregate%data_length%12#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%12#0: uint64 = (+ aggregate%current_tail_offset%11#0 aggregate%data_length%12#0)
        let aggregate%as_bytes%20#0: bytes[8] = (itob aggregate%current_tail_offset%12#0)
        let aggregate%offset_as_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%13#0)
        let aggregate%data_length%13#0: uint64 = (len bar#0)
        let aggregate%current_tail_offset%13#0: uint64 = (+ aggregate%current_tail_offset%12#0 aggregate%data_length%13#0)
        let aggregate%as_bytes%21#0: bytes[8] = (itob aggregate%current_tail_offset%13#0)
        let aggregate%offset_as_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%offset_as_uint16%14#0)
        let aggregate%data_length%14#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%14#0: uint64 = (+ aggregate%current_tail_offset%13#0 aggregate%data_length%14#0)
        let aggregate%as_bytes%22#0: bytes[8] = (itob aggregate%current_tail_offset%14#0)
        let aggregate%offset_as_uint16%15#0: bytes = ((extract 6 2) aggregate%as_bytes%22#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%offset_as_uint16%15#0)
        let aggregate%data_length%15#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%15#0: uint64 = (+ aggregate%current_tail_offset%14#0 aggregate%data_length%15#0)
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%current_tail_offset%15#0)
        let aggregate%offset_as_uint16%16#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%offset_as_uint16%16#0)
        let aggregate%data_length%16#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%16#0: uint64 = (+ aggregate%current_tail_offset%15#0 aggregate%data_length%16#0)
        let aggregate%as_bytes%24#0: bytes[8] = (itob aggregate%current_tail_offset%16#0)
        let aggregate%offset_as_uint16%17#0: bytes = ((extract 6 2) aggregate%as_bytes%24#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%offset_as_uint16%17#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%head%17#0 hello#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%concat%10#0 world#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%concat%11#0 foo#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%concat%12#0 bar#0)
        let aggregate%concat%14#0: bytes = (concat aggregate%concat%13#0 hello#0)
        let aggregate%concat%15#0: bytes = (concat aggregate%concat%14#0 world#0)
        let aggregate%concat%16#0: bytes = (concat aggregate%concat%15#0 foo#0)
        let aggregate%concat%17#0: bytes = (concat aggregate%concat%16#0 bar#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%2#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%17#0
        let encoded_array%2#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%2#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = encoded_array%2#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dynamic_string_array#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< 3u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%array_length%2#0: uint64 = (extract_uint16 dynamic_string_array#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< 3u aggregate%array_length%2#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#0, hello#0, 3u)
        let updated_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%updated_array%0#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = updated_array%0#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 dynamic_string_array#0 0u) // on error: invalid array length header
        let aggregate%lt%2#0: bool = (< 5u aggregate%array_length%3#0)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%array_length%4#0: uint64 = (extract_uint16 dynamic_string_array#0 0u) // on error: invalid array length header
        let aggregate%lt%3#0: bool = (< 5u aggregate%array_length%4#0)
        (assert aggregate%lt%3#0) // index access is out of bounds
        let aggregate%updated_array%1#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#0, hello#0, 5u)
        let updated_array%1#0: Encoded(len+(len+utf8[])[]) = aggregate%updated_array%1#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = updated_array%1#0
        let aggregate%as_bytes%25#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%as_bytes%26#0: bytes[8] = (itob 16u)
        let aggregate%offset_as_uint16%18#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%head%18#0: bytes = (concat aggregate%len_u16%3#0 aggregate%offset_as_uint16%18#0)
        let aggregate%data_length%18#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%18#0: uint64 = (+ 16u aggregate%data_length%18#0)
        let aggregate%as_bytes%27#0: bytes[8] = (itob aggregate%current_tail_offset%18#0)
        let aggregate%offset_as_uint16%19#0: bytes = ((extract 6 2) aggregate%as_bytes%27#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%offset_as_uint16%19#0)
        let aggregate%data_length%19#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%19#0: uint64 = (+ aggregate%current_tail_offset%18#0 aggregate%data_length%19#0)
        let aggregate%as_bytes%28#0: bytes[8] = (itob aggregate%current_tail_offset%19#0)
        let aggregate%offset_as_uint16%20#0: bytes = ((extract 6 2) aggregate%as_bytes%28#0)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 aggregate%offset_as_uint16%20#0)
        let aggregate%data_length%20#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%20#0: uint64 = (+ aggregate%current_tail_offset%19#0 aggregate%data_length%20#0)
        let aggregate%as_bytes%29#0: bytes[8] = (itob aggregate%current_tail_offset%20#0)
        let aggregate%offset_as_uint16%21#0: bytes = ((extract 6 2) aggregate%as_bytes%29#0)
        let aggregate%head%21#0: bytes = (concat aggregate%head%20#0 aggregate%offset_as_uint16%21#0)
        let aggregate%data_length%21#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%21#0: uint64 = (+ aggregate%current_tail_offset%20#0 aggregate%data_length%21#0)
        let aggregate%as_bytes%30#0: bytes[8] = (itob aggregate%current_tail_offset%21#0)
        let aggregate%offset_as_uint16%22#0: bytes = ((extract 6 2) aggregate%as_bytes%30#0)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 aggregate%offset_as_uint16%22#0)
        let aggregate%data_length%22#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%22#0: uint64 = (+ aggregate%current_tail_offset%21#0 aggregate%data_length%22#0)
        let aggregate%as_bytes%31#0: bytes[8] = (itob aggregate%current_tail_offset%22#0)
        let aggregate%offset_as_uint16%23#0: bytes = ((extract 6 2) aggregate%as_bytes%31#0)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 aggregate%offset_as_uint16%23#0)
        let aggregate%data_length%23#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%23#0: uint64 = (+ aggregate%current_tail_offset%22#0 aggregate%data_length%23#0)
        let aggregate%as_bytes%32#0: bytes[8] = (itob aggregate%current_tail_offset%23#0)
        let aggregate%offset_as_uint16%24#0: bytes = ((extract 6 2) aggregate%as_bytes%32#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%offset_as_uint16%24#0)
        let aggregate%data_length%24#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%24#0: uint64 = (+ aggregate%current_tail_offset%23#0 aggregate%data_length%24#0)
        let aggregate%as_bytes%33#0: bytes[8] = (itob aggregate%current_tail_offset%24#0)
        let aggregate%offset_as_uint16%25#0: bytes = ((extract 6 2) aggregate%as_bytes%33#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%24#0 aggregate%offset_as_uint16%25#0)
        let aggregate%concat%18#0: bytes = (concat aggregate%head%25#0 hello#0)
        let aggregate%concat%19#0: bytes = (concat aggregate%concat%18#0 world#0)
        let aggregate%concat%20#0: bytes = (concat aggregate%concat%19#0 foo#0)
        let aggregate%concat%21#0: bytes = (concat aggregate%concat%20#0 hello#0)
        let aggregate%concat%22#0: bytes = (concat aggregate%concat%21#0 hello#0)
        let aggregate%concat%23#0: bytes = (concat aggregate%concat%22#0 hello#0)
        let aggregate%concat%24#0: bytes = (concat aggregate%concat%23#0 foo#0)
        let aggregate%concat%25#0: bytes = (concat aggregate%concat%24#0 bar#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%3#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%25#0
        let encoded_array%3#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%3#0
        let tmp%8#0: bool = (== dynamic_string_array#0 encoded_array%3#0)
        (assert tmp%8#0)
        let (tmp%9#0: bytes, tmp%10#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#0)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = tmp%10#0
        let tmp%11#0: bool = (== tmp%9#0 bar#0)
        (assert tmp%11#0)
        let (tmp%12#0: bytes, tmp%13#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#0)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = tmp%13#0
        let tmp%14#0: bool = (== tmp%12#0 foo#0)
        (assert tmp%14#0)
        let aggregate%as_bytes%34#0: bytes[8] = (itob 6u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%34#0)
        let aggregate%as_bytes%35#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%26#0: bytes = ((extract 6 2) aggregate%as_bytes%35#0)
        let aggregate%head%26#0: bytes = (concat aggregate%len_u16%4#0 aggregate%offset_as_uint16%26#0)
        let aggregate%data_length%26#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%26#0: uint64 = (+ 12u aggregate%data_length%26#0)
        let aggregate%as_bytes%36#0: bytes[8] = (itob aggregate%current_tail_offset%26#0)
        let aggregate%offset_as_uint16%27#0: bytes = ((extract 6 2) aggregate%as_bytes%36#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%offset_as_uint16%27#0)
        let aggregate%data_length%27#0: uint64 = (len world#0)
        let aggregate%current_tail_offset%27#0: uint64 = (+ aggregate%current_tail_offset%26#0 aggregate%data_length%27#0)
        let aggregate%as_bytes%37#0: bytes[8] = (itob aggregate%current_tail_offset%27#0)
        let aggregate%offset_as_uint16%28#0: bytes = ((extract 6 2) aggregate%as_bytes%37#0)
        let aggregate%head%28#0: bytes = (concat aggregate%head%27#0 aggregate%offset_as_uint16%28#0)
        let aggregate%data_length%28#0: uint64 = (len foo#0)
        let aggregate%current_tail_offset%28#0: uint64 = (+ aggregate%current_tail_offset%27#0 aggregate%data_length%28#0)
        let aggregate%as_bytes%38#0: bytes[8] = (itob aggregate%current_tail_offset%28#0)
        let aggregate%offset_as_uint16%29#0: bytes = ((extract 6 2) aggregate%as_bytes%38#0)
        let aggregate%head%29#0: bytes = (concat aggregate%head%28#0 aggregate%offset_as_uint16%29#0)
        let aggregate%data_length%29#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%29#0: uint64 = (+ aggregate%current_tail_offset%28#0 aggregate%data_length%29#0)
        let aggregate%as_bytes%39#0: bytes[8] = (itob aggregate%current_tail_offset%29#0)
        let aggregate%offset_as_uint16%30#0: bytes = ((extract 6 2) aggregate%as_bytes%39#0)
        let aggregate%head%30#0: bytes = (concat aggregate%head%29#0 aggregate%offset_as_uint16%30#0)
        let aggregate%data_length%30#0: uint64 = (len hello#0)
        let aggregate%current_tail_offset%30#0: uint64 = (+ aggregate%current_tail_offset%29#0 aggregate%data_length%30#0)
        let aggregate%as_bytes%40#0: bytes[8] = (itob aggregate%current_tail_offset%30#0)
        let aggregate%offset_as_uint16%31#0: bytes = ((extract 6 2) aggregate%as_bytes%40#0)
        let aggregate%head%31#0: bytes = (concat aggregate%head%30#0 aggregate%offset_as_uint16%31#0)
        let aggregate%concat%26#0: bytes = (concat aggregate%head%31#0 hello#0)
        let aggregate%concat%27#0: bytes = (concat aggregate%concat%26#0 world#0)
        let aggregate%concat%28#0: bytes = (concat aggregate%concat%27#0 foo#0)
        let aggregate%concat%29#0: bytes = (concat aggregate%concat%28#0 hello#0)
        let aggregate%concat%30#0: bytes = (concat aggregate%concat%29#0 hello#0)
        let aggregate%concat%31#0: bytes = (concat aggregate%concat%30#0 hello#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%4#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%31#0
        let encoded_array%4#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%4#0
        let tmp%15#0: bool = (== dynamic_string_array#0 encoded_array%4#0)
        (assert tmp%15#0)
        return 