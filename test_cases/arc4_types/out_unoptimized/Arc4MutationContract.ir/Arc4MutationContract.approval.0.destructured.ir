main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
        test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
    block@0: // L25
        let materialized_values%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = materialized_values%1#0
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let materialized_values%2#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let result#0: bytes = materialized_values%2#0
        let materialized_values%3#0: uint64 = (+ length_minus_1#0 16u)
        let popped_location#0: uint64 = materialized_values%3#0
        let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
        let materialized_values%4#0: bytes = (setbit 0x00 0u tmp%2#0)
        let popped#0: bytes = materialized_values%4#0
        let materialized_values%5#0: bytes = (setbit result#0 popped_location#0 0u)
        let result#0: bytes = materialized_values%5#0
        let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#0: uint64 = (/ tmp%3#0 8u)
        let tmp%5#0: uint64 = (+ 2u tmp%4#0)
        let materialized_values%6#0: bytes = (substring3 result#0 0u tmp%5#0)
        let result#0: bytes = materialized_values%6#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let materialized_values%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = materialized_values%1#0
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let materialized_values%2#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let result#0: bytes = materialized_values%2#0
        let tmp%2#0: uint64 = (len result#0)
        let materialized_values%3#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let item_location#0: uint64 = materialized_values%3#0
        let materialized_values%4#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = materialized_values%4#0
        let materialized_values%5#0: bytes = (substring3 result#0 0u item_location#0)
        let result#0: bytes = materialized_values%5#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let materialized_values%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = materialized_values%1#0
        let materialized_values%2#0: uint64 = (* length_minus_1#0 2u)
        let popped_header_offset#0: uint64 = materialized_values%2#0
        let materialized_values%3#0: bytes = ((extract 2 0) array#0)
        let head_and_tail#0: bytes = materialized_values%3#0
        let materialized_values%4#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let popped_offset#0: uint64 = materialized_values%4#0
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let materialized_values%5#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let popped#0: bytes = materialized_values%5#0
        let tmp%1#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%3#0: bytes = (substring3 head_and_tail#0 tmp%2#0 popped_offset#0)
        let materialized_values%6#0: bytes = (concat tmp%1#0 tmp%3#0)
        let head_and_tail#0: bytes = materialized_values%6#0
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#0, length_minus_1#0, 0u)
        let materialized_values%7#0: bytes = (concat tmp%5#0 tmp%6#0)
        let updated#0: bytes = materialized_values%7#0
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let materialized_values%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = materialized_values%1#0
        let tmp%0#0: bytes = (itob new_array_length#0)
        let materialized_values%2#0: bytes = ((extract 6 0) tmp%0#0)
        let new_array_length_b#0: bytes = materialized_values%2#0
        let materialized_values%3#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = materialized_values%3#0
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let materialized_values%4#0: uint64 = (/ tmp%1#0 8u)
        let current_bytes#0: uint64 = materialized_values%4#0
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let materialized_values%5#0: uint64 = (/ tmp%2#0 8u)
        let required_bytes#0: uint64 = materialized_values%5#0
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let materialized_values%6#0: bytes = (concat result#0 tmp%5#0)
        let result#0: bytes = materialized_values%6#0
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let materialized_values%7#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = materialized_values%7#0
        let materialized_values%8#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = materialized_values%8#0
        goto block@3
    block@3: // while_top_L153
        let tmp%6#0: bool = (< write_offset#0 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let materialized_values%9#0: bytes = (setbit result#0 write_offset#0 tmp%7#0)
        let result#0: bytes = materialized_values%9#0
        let materialized_values%10#0: uint64 = (+ write_offset#0 1u)
        let write_offset#0: uint64 = materialized_values%10#0
        let materialized_values%11#0: uint64 = (+ read_offset#0 read_step#0)
        let read_offset#0: uint64 = materialized_values%11#0
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let materialized_values%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_length#0: uint64 = materialized_values%1#0
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let materialized_values%2#0: uint64 = (+ tmp%0#0 2u)
        let header_end#0: uint64 = materialized_values%2#0
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
        let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
        return tmp%12#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let materialized_values%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = materialized_values%0#0
        let materialized_values%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = materialized_values%1#0
        let tmp%0#0: bytes = ((extract 2 0) array#0)
        let tmp%1#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%0#0, new_item#0, index#0, array_length#0)
        let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
        return tmp%2#0

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let materialized_values%0#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = materialized_values%1#0
        let tmp%2#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let materialized_values%2#0: uint64 = (+ tmp%2#0 2u)
        let old_item_end#0: uint64 = materialized_values%2#0
        let tmp%3#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%5#0)
        let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
        let tmp%8#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%7#0, array_length#0, index#0)
        return tmp%8#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let materialized_values%0#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = materialized_values%0#0
        let tmp%3#0: uint64 = (* length#0 2u)
        let tmp%4#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%4#0
        goto block@1
    block@1: // for_header_L331
        let continue_looping%0#0: bool = (< head_offset#0 tmp%3#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%5#0: bytes = (itob tail_offset#0)
        let materialized_values%1#0: bytes = ((extract 6 2) tmp%5#0)
        let tail_offset_bytes#0: bytes = materialized_values%1#0
        let materialized_values%2#0: bytes = (replace3 array_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let array_head_and_tail#0: bytes = materialized_values%2#0
        let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#0 tail_offset#0)
        let tmp%7#0: uint64 = (+ tmp%6#0 2u)
        let materialized_values%3#0: uint64 = (+ tail_offset#0 tmp%7#0)
        let tail_offset#0: uint64 = materialized_values%3#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#0

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
    block@0: // L58
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%2#0: bytes = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded(len+uint8[]) = (concat encoded%2#0 0x)
        let uint8_array#0: Encoded(len+uint8[]) = encoded%3#0
        let encoded%4#0: Encoded((uint8)) = (concat 0x 0x03)
        let encoded%5#0: Encoded((uint8,uint8)) = (concat encoded%4#0 0x04)
        let encoded%6#0: Encoded(uint8[]) = (concat encoded%5#0 0x)
        let concat%0#0: Encoded(len+uint8[]) = (concat uint8_array#0 encoded%6#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let array_concat_tuple#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let encoded%7#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%8#0: Encoded((uint8,uint8)) = (concat encoded%7#0 0x02)
        let encoded%9#0: Encoded((uint8,uint8,uint8)) = (concat encoded%8#0 0x03)
        let encoded%10#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%9#0 0x04)
        let as_bytes%2#0: bytes[8] = (itob 4u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%11#0: bytes = (concat len_u16%1#0 encoded%10#0)
        let encoded%12#0: Encoded(len+uint8[]) = (concat encoded%11#0 0x)
        let tmp%0#0: bool = (== array_concat_tuple#0 encoded%12#0)
        (assert tmp%0#0)
        let encoded%13#0: Encoded((uint8)) = (concat 0x 0x05)
        let encoded%14#0: Encoded(uint8[]) = (concat encoded%13#0 0x)
        let concat%1#0: Encoded(len+uint8[]) = (concat array_concat_tuple#0 encoded%14#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%1#0)
        let div_floor%1#0: uint64 = (/ len%1#0 1u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let array_concat_tuple#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let encoded%15#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%16#0: Encoded((uint8,uint8)) = (concat encoded%15#0 0x02)
        let encoded%17#0: Encoded((uint8,uint8,uint8)) = (concat encoded%16#0 0x03)
        let encoded%18#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%17#0 0x04)
        let encoded%19#0: Encoded((uint8,uint8,uint8,uint8,uint8)) = (concat encoded%18#0 0x05)
        let as_bytes%4#0: bytes[8] = (itob 5u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%20#0: bytes = (concat len_u16%2#0 encoded%19#0)
        let encoded%21#0: Encoded(len+uint8[]) = (concat encoded%20#0 0x)
        let tmp%1#0: bool = (== array_concat_tuple#0 encoded%21#0)
        (assert tmp%1#0)
        let length%0#0: uint64 = (len 0x48656c6c6f)
        let as_bytes%5#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x48656c6c6f)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x576f726c64)
        let as_bytes%6#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x576f726c64)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%7#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%22#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%23#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%22#0 offset_as_uint16%1#0)
        let as_bytes%9#0: bytes[8] = (itob 2u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded%24#0: bytes = (concat len_u16%3#0 encoded%23#0)
        let encoded%25#0: Encoded(len+len+utf8[][]) = (concat encoded%24#0 tail%1#0)
        let hello_world#0: Encoded(len+len+utf8[][]) = encoded%25#0
        let length%2#0: uint64 = (len 0x48656c6c6f)
        let as_bytes%10#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x48656c6c6f)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let tail%2#0: bytes = (concat 0x as_Encoded(len+utf8[])%2#0)
        let as_bytes%11#0: bytes[8] = (itob 2u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%26#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%2#0)
        let as_bytes%12#0: bytes[8] = (itob 1u)
        let len_u16%4#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%27#0: bytes = (concat len_u16%4#0 encoded%26#0)
        let encoded%28#0: Encoded(len+len+utf8[][]) = (concat encoded%27#0 tail%2#0)
        let length%3#0: uint64 = (len 0x576f726c64)
        let as_bytes%13#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x576f726c64)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tail%3#0: bytes = (concat 0x as_Encoded(len+utf8[])%3#0)
        let as_bytes%14#0: bytes[8] = (itob 2u)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded%29#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%3#0)
        let as_bytes%15#0: bytes[8] = (itob 1u)
        let len_u16%5#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded%30#0: bytes = (concat len_u16%5#0 encoded%29#0)
        let encoded%31#0: Encoded(len+len+utf8[][]) = (concat encoded%30#0 tail%3#0)
        let extract_to_end%2#0: bytes = ((extract 2 0) encoded%31#0)
        let array%array_length%0#1: uint64 = (extract_uint16 encoded%31#0 0u)
        let tmp%2#0: uint64 = array%array_length%0#1
        let start_of_tail%0#0: uint64 = (* tmp%2#0 2u)
        let total_length%0#0: uint64 = (len extract_to_end%2#0)
        let data%0#0: bytes = (substring3 extract_to_end%2#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+len+utf8[][])%0#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(encoded%28#0, data%0#0, tmp%2#0)
        let hello_world_concat#0: Encoded(len+len+utf8[][]) = as_Encoded(len+len+utf8[][])%0#0
        let tmp%3#0: bool = (== hello_world#0 hello_world_concat#0)
        (assert tmp%3#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
    block@0: // L70
        let as_bytes%0#0: bytes[8] = (itob 0u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%0#0: bytes = (concat len_u16%0#0 0x)
        let encoded%1#0: Encoded(len+len+uint8[][]) = (concat encoded%0#0 0x)
        let array_of_array#0: Encoded(len+len+uint8[][]) = encoded%1#0
        let tmp%0#0: bool = (== array_of_array#0 0x0000)
        (assert tmp%0#0)
        let encoded%2#0: Encoded((uint8)) = (concat 0x 0x0a)
        let as_bytes%1#0: bytes[8] = (itob 1u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%3#0: bytes = (concat len_u16%1#0 encoded%2#0)
        let encoded%4#0: Encoded(len+uint8[]) = (concat encoded%3#0 0x)
        let tail%0#0: bytes = (concat 0x encoded%4#0)
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%5#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%0#0)
        let encoded%6#0: Encoded(len+uint8[][]) = (concat encoded%5#0 tail%0#0)
        let start_of_tail%0#0: uint64 = (* 1u 2u)
        let total_length%0#0: uint64 = (len encoded%6#0)
        let data%0#0: bytes = (substring3 encoded%6#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+len+uint8[][])%0#0: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, data%0#0, 1u)
        let array_of_array#0: Encoded(len+len+uint8[][]) = as_Encoded(len+len+uint8[][])%0#0
        let tmp%1#0: bool = (== array_of_array#0 0x0001000200010a)
        (assert tmp%1#0)
        let encoded%7#0: Encoded((uint8)) = (concat 0x 0x10)
        let as_bytes%3#0: bytes[8] = (itob 1u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%8#0: bytes = (concat len_u16%2#0 encoded%7#0)
        let encoded%9#0: Encoded(len+uint8[]) = (concat encoded%8#0 0x)
        let tail%1#0: bytes = (concat 0x encoded%9#0)
        let as_bytes%4#0: bytes[8] = (itob 2u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%10#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%1#0)
        let encoded%11#0: Encoded(len+uint8[][]) = (concat encoded%10#0 tail%1#0)
        let start_of_tail%1#0: uint64 = (* 1u 2u)
        let total_length%1#0: uint64 = (len encoded%11#0)
        let data%1#0: bytes = (substring3 encoded%11#0 start_of_tail%1#0 total_length%1#0)
        let as_Encoded(len+len+uint8[][])%1#0: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, data%1#0, 1u)
        let array_of_array#0: Encoded(len+len+uint8[][]) = as_Encoded(len+len+uint8[][])%1#0
        let tmp%2#0: bool = (== array_of_array#0 0x00020004000700010a000110)
        (assert tmp%2#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) array_of_array#0)
        let array%array_length%0#1: uint64 = (extract_uint16 array_of_array#0 0u)
        let array_length%0#0: uint64 = array%array_length%0#1
        let lt%0#0: bool = (< 0u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 1u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
        let encoded%12#0: Encoded((uint8)) = (concat 0x 0xff)
        let encoded%13#0: Encoded(uint8[]) = (concat encoded%12#0 0x)
        let concat%0#0: bytes = (concat item%0#0 encoded%13#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%5#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%5#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let array%array_length%1#1: uint64 = (extract_uint16 array_of_array#0 0u)
        let array_length%1#0: uint64 = array%array_length%1#1
        let lt%1#0: bool = (< 0u array_length%1#0)
        (assert lt%1#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#0, as_Encoded(len+uint8[])%0#0, 0u)
        let array_of_array#0: Encoded(len+len+uint8[][]) = updated_array%0#0
        let tmp%3#0: bool = (== array_of_array#0 0x00020004000800020aff000110)
        (assert tmp%3#0)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) array_of_array#0)
        let array%array_length%2#1: uint64 = (extract_uint16 array_of_array#0 0u)
        let array_length%2#0: uint64 = array%array_length%2#1
        let lt%2#0: bool = (< 0u array_length%2#0)
        (assert lt%2#0) // index access is out of bounds
        let item_offset_offset%1#0: uint64 = (* 0u 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset%1#0)
        let item_length_in_bytes%1#0: uint64 = (* item_length%1#0 1u)
        let item_head_tail_length%1#0: uint64 = (+ item_length_in_bytes%1#0 2u)
        let item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 item_head_tail_length%1#0)
        let write_offset%0#0: uint64 = (* 1u 1u)
        let write_offset_with_length_header%0#0: uint64 = (+ write_offset%0#0 2u)
        let updated_array%1#0: bytes = (replace3 item%1#0 write_offset_with_length_header%0#0 0x00)
        let array%array_length%3#1: uint64 = (extract_uint16 array_of_array#0 0u)
        let array_length%3#0: uint64 = array%array_length%3#1
        let lt%3#0: bool = (< 0u array_length%3#0)
        (assert lt%3#0) // index access is out of bounds
        let updated_array%2#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#0, updated_array%1#0, 0u)
        let array_of_array#0: Encoded(len+len+uint8[][]) = updated_array%2#0
        let tmp%4#0: bool = (== array_of_array#0 0x00020004000800020a00000110)
        (assert tmp%4#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
    block@0: // L85
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x0a)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x09)
        let encoded%2#0: Encoded(uint8[2]) = (concat encoded%1#0 0x)
        let encoded%3#0: Encoded((uint8)) = (concat 0x 0x40)
        let encoded%4#0: Encoded((uint8,uint8)) = (concat encoded%3#0 0x80)
        let encoded%5#0: Encoded(uint8[2]) = (concat encoded%4#0 0x)
        let encoded%6#0: Encoded((uint8[2])) = (concat 0x encoded%2#0)
        let encoded%7#0: Encoded((uint8[2],uint8[2])) = (concat encoded%6#0 encoded%5#0)
        let encoded%8#0: Encoded(uint8[2][2]) = (concat encoded%7#0 0x)
        let array_of_array#0: Encoded(uint8[2][2]) = encoded%8#0
        let tmp%0#0: bool = (== array_of_array#0 0x0a094080)
        (assert tmp%0#0)
        let encoded%9#0: Encoded((uint8)) = (concat 0x 0xff)
        let encoded%10#0: Encoded((uint8,uint8)) = (concat encoded%9#0 0xfe)
        let encoded%11#0: Encoded(uint8[2]) = (concat encoded%10#0 0x)
        let write_offset%0#0: uint64 = (* 0u 2u)
        let updated_array%0#0: bytes = (replace3 array_of_array#0 write_offset%0#0 encoded%11#0)
        let array_of_array#0: Encoded(uint8[2][2]) = updated_array%0#0
        let tmp%1#0: bool = (== array_of_array#0 0xfffe4080)
        (assert tmp%1#0)
        let bytes_offset%0#0: uint64 = (* 1u 2u)
        let encoded_element%0#0: bytes = (extract3 array_of_array#0 bytes_offset%0#0 2u) // on error: index access is out of bounds
        let write_offset%1#0: uint64 = (* 0u 1u)
        let updated_array%1#0: bytes = (replace3 encoded_element%0#0 write_offset%1#0 0x01)
        let write_offset%2#0: uint64 = (* 1u 2u)
        let updated_array%2#0: bytes = (replace3 array_of_array#0 write_offset%2#0 updated_array%1#0)
        let array_of_array#0: Encoded(uint8[2][2]) = updated_array%2#0
        let tmp%2#0: bool = (== array_of_array#0 0xfffe0180)
        (assert tmp%2#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
    block@0: // L100
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%2#0: bytes = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded(len+uint8[]) = (concat encoded%2#0 0x)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded%3#0
        let write_offset%0#0: uint64 = (* 0u 1u)
        let write_offset_with_length_header%0#0: uint64 = (+ write_offset%0#0 2u)
        let updated_array%0#0: bytes = (replace3 dynamic_uint8_array#0 write_offset_with_length_header%0#0 0xff)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = updated_array%0#0
        let tmp%0#0: bool = (== dynamic_uint8_array#0 0x0002ff02)
        (assert tmp%0#0)
        let encoded%4#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%5#0: Encoded((uint8,uint8)) = (concat encoded%4#0 0x02)
        let encoded%6#0: Encoded(uint8[2]) = (concat encoded%5#0 0x)
        let static_uint8_array#0: Encoded(uint8[2]) = encoded%6#0
        let write_offset%1#0: uint64 = (* 1u 1u)
        let updated_array%1#0: bytes = (replace3 static_uint8_array#0 write_offset%1#0 0xff)
        let static_uint8_array#0: Encoded(uint8[2]) = updated_array%1#0
        let tmp%1#0: bool = (== static_uint8_array#0 0x01ff)
        (assert tmp%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let encoded%7#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%0#0)
        let get_bit%0#0: uint64 = (getbit as_Encoded(bool8)%1#0 0u)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded%7#0 1u get_bit%0#0)
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%8#0: bytes = (concat len_u16%1#0 set_bit%0#0)
        let encoded%9#0: Encoded(len+bool1[]) = (concat encoded%8#0 0x)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded%9#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let array%array_length%0#1: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
        let array_length%0#0: uint64 = array%array_length%0#1
        let lt%0#0: bool = (< 0u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let write_offset_with_length_header%1#0: uint64 = (+ 0u 16u)
        let is_true%0#0: uint64 = (getbit as_Encoded(bool8)%2#0 0u)
        let updated_target%0#0: Encoded(len+bool1[]) = (setbit dynamic_bool_array#0 write_offset_with_length_header%1#0 is_true%0#0)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = updated_target%0#0
        let tmp%2#0: bool = (== dynamic_bool_array#0 0x000200)
        (assert tmp%2#0)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%4#0: Encoded(bool8) = encoded_bool%4#0
        let encoded%10#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%3#0)
        let get_bit%1#0: uint64 = (getbit as_Encoded(bool8)%4#0 0u)
        let set_bit%1#0: Encoded((bool1)) = (setbit encoded%10#0 1u get_bit%1#0)
        let encoded%11#0: Encoded(bool1[2]) = (concat set_bit%1#0 0x)
        let static_bool_array#0: Encoded(bool1[2]) = encoded%11#0
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%5#0: Encoded(bool8) = encoded_bool%5#0
        let lt%1#0: bool = (< 1u 2u)
        (assert lt%1#0) // index access is out of bounds
        let is_true%1#0: uint64 = (getbit as_Encoded(bool8)%5#0 0u)
        let updated_target%1#0: Encoded(bool1[2]) = (setbit static_bool_array#0 1u is_true%1#0)
        let static_bool_array#0: Encoded(bool1[2]) = updated_target%1#0
        let tmp%3#0: bool = (== static_bool_array#0 0x80)
        (assert tmp%3#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
    block@0: // L116
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let length%0#0: uint64 = (len 0x4861707079)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x4861707079)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x44617973)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x44617973)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let encoded%0#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%0#0)
        let encoded%1#0: Encoded((bool1,uint8)) = (concat encoded%0#0 0x32)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 6u data_length%0#0)
        let as_bytes%2#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%2#0: Encoded((bool1,uint8,len+utf8[])) = (concat encoded%1#0 offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%3#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%2#0 offset_as_uint16%1#0)
        let encoded%4#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%3#0 tail%1#0)
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = encoded%4#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let is_true%0#0: uint64 = (getbit as_Encoded(bool8)%1#0 0u)
        let updated_data%0#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (setbit test_struct#0 0u is_true%0#0)
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = updated_data%0#0
        let updated_data%1#0: bytes = (replace3 test_struct#0 1u 0x0c)
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = updated_data%1#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let length%2#0: uint64 = (len 0x4861707079)
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x4861707079)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let length%3#0: uint64 = (len 0x44617973)
        let as_bytes%5#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x44617973)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let encoded%5#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%2#0)
        let encoded%6#0: Encoded((bool1,uint8)) = (concat encoded%5#0 0x0c)
        let tail%2#0: bytes = (concat 0x as_Encoded(len+utf8[])%2#0)
        let data_length%2#0: uint64 = (len as_Encoded(len+utf8[])%2#0)
        let current_tail_offset%2#0: uint64 = (+ 6u data_length%2#0)
        let as_bytes%6#0: bytes[8] = (itob 6u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%7#0: Encoded((bool1,uint8,len+utf8[])) = (concat encoded%6#0 offset_as_uint16%2#0)
        let tail%3#0: bytes = (concat tail%2#0 as_Encoded(len+utf8[])%3#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%8#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%7#0 offset_as_uint16%3#0)
        let encoded%9#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%8#0 tail%3#0)
        let tmp%0#0: bool = (== test_struct#0 encoded%9#0)
        (assert tmp%0#0)
        let length%4#0: uint64 = (len 0x486d6d6d6d)
        let as_bytes%8#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x486d6d6d6d)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%4#0
        let item_offset%0#0: uint64 = (extract_uint16 test_struct#0 2u)
        let data_up_to_item%0#0: bytes = (extract3 test_struct#0 0u item_offset%0#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 test_struct#0 4u)
        let total_data_length%0#0: uint64 = (len test_struct#0)
        let data_beyond_item%0#0: bytes = (substring3 test_struct#0 next_item_offset%0#0 total_data_length%0#0)
        let updated_data%2#0: bytes = (concat data_up_to_item%0#0 as_Encoded(len+utf8[])%4#0)
        let updated_data%3#0: bytes = (concat updated_data%2#0 data_beyond_item%0#0)
        let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
        let new_value_length%0#0: uint64 = (len as_Encoded(len+utf8[])%4#0)
        let tail_offset%0#0: uint64 = (extract_uint16 updated_data%3#0 4u)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
        let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
        let as_bytes%9#0: bytes[8] = (itob tail_offset%2#0)
        let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%9#0)
        let updated_data%4#0: bytes = (replace3 updated_data%3#0 4u tail_offset_bytes%0#0)
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = updated_data%4#0
        let length%5#0: uint64 = (len 0x4f682077656c6c)
        let as_bytes%10#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x4f682077656c6c)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = encoded_value%5#0
        let item_offset%1#0: uint64 = (extract_uint16 test_struct#0 4u)
        let data_up_to_item%1#0: bytes = (extract3 test_struct#0 0u item_offset%1#0)
        let updated_data%5#0: bytes = (concat data_up_to_item%1#0 as_Encoded(len+utf8[])%5#0)
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = updated_data%5#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let length%6#0: uint64 = (len 0x486d6d6d6d)
        let as_bytes%11#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x486d6d6d6d)
        let as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = encoded_value%6#0
        let length%7#0: uint64 = (len 0x4f682077656c6c)
        let as_bytes%12#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x4f682077656c6c)
        let as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = encoded_value%7#0
        let encoded%10#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%3#0)
        let encoded%11#0: Encoded((bool1,uint8)) = (concat encoded%10#0 0x0c)
        let tail%4#0: bytes = (concat 0x as_Encoded(len+utf8[])%6#0)
        let data_length%4#0: uint64 = (len as_Encoded(len+utf8[])%6#0)
        let current_tail_offset%4#0: uint64 = (+ 6u data_length%4#0)
        let as_bytes%13#0: bytes[8] = (itob 6u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%12#0: Encoded((bool1,uint8,len+utf8[])) = (concat encoded%11#0 offset_as_uint16%4#0)
        let tail%5#0: bytes = (concat tail%4#0 as_Encoded(len+utf8[])%7#0)
        let as_bytes%14#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded%13#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%12#0 offset_as_uint16%5#0)
        let encoded%14#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%13#0 tail%5#0)
        let tmp%1#0: bool = (== test_struct#0 encoded%14#0)
        (assert tmp%1#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
    block@0: // L143
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%2#0: bytes = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded(len+uint8[]) = (concat encoded%2#0 0x)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded%3#0
        let encoded%4#0: Encoded((uint8)) = (concat 0x 0x32)
        let encoded%5#0: Encoded(uint8[]) = (concat encoded%4#0 0x)
        let concat%0#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 encoded%5#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let encoded%6#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%7#0: Encoded((uint8,uint8)) = (concat encoded%6#0 0x02)
        let encoded%8#0: Encoded((uint8,uint8,uint8)) = (concat encoded%7#0 0x32)
        let as_bytes%2#0: bytes[8] = (itob 3u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%9#0: bytes = (concat len_u16%1#0 encoded%8#0)
        let encoded%10#0: Encoded(len+uint8[]) = (concat encoded%9#0 0x)
        let tmp%0#0: bool = (== dynamic_uint8_array#0 encoded%10#0)
        (assert tmp%0#0)
        let extract_to_end%1#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
        let concat%1#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 extract_to_end%1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 1u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let encoded%11#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%12#0: Encoded((uint8,uint8)) = (concat encoded%11#0 0x02)
        let encoded%13#0: Encoded((uint8,uint8,uint8)) = (concat encoded%12#0 0x32)
        let encoded%14#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%13#0 0x01)
        let encoded%15#0: Encoded((uint8,uint8,uint8,uint8,uint8)) = (concat encoded%14#0 0x02)
        let encoded%16#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%15#0 0x32)
        let as_bytes%4#0: bytes[8] = (itob 6u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%17#0: bytes = (concat len_u16%2#0 encoded%16#0)
        let encoded%18#0: Encoded(len+uint8[]) = (concat encoded%17#0 0x)
        let tmp%1#0: bool = (== dynamic_uint8_array#0 encoded%18#0)
        (assert tmp%1#0)
        let encoded%19#0: Encoded((uint8)) = (concat 0x 0x04)
        let encoded%20#0: Encoded((uint8,uint8)) = (concat encoded%19#0 0x5a)
        let encoded%21#0: Encoded(uint8[]) = (concat encoded%20#0 0x)
        let concat%2#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 encoded%21#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%2#0)
        let len%2#0: uint64 = (len extract_to_end%3#0)
        let div_floor%2#0: uint64 = (/ len%2#0 1u)
        let as_bytes%5#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = replace%2#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let encoded%22#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%23#0: Encoded((uint8,uint8)) = (concat encoded%22#0 0x02)
        let encoded%24#0: Encoded((uint8,uint8,uint8)) = (concat encoded%23#0 0x32)
        let encoded%25#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%24#0 0x01)
        let encoded%26#0: Encoded((uint8,uint8,uint8,uint8,uint8)) = (concat encoded%25#0 0x02)
        let encoded%27#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%26#0 0x32)
        let encoded%28#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%27#0 0x04)
        let encoded%29#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%28#0 0x5a)
        let as_bytes%6#0: bytes[8] = (itob 8u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%30#0: bytes = (concat len_u16%3#0 encoded%29#0)
        let encoded%31#0: Encoded(len+uint8[]) = (concat encoded%30#0 0x)
        let tmp%2#0: bool = (== dynamic_uint8_array#0 encoded%31#0)
        (assert tmp%2#0)
        let (tmp%3#0: bytes, tmp%4#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#0, 1u)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = tmp%4#0
        let popped#0: Encoded(uint8) = tmp%3#0
        let reinterpret_biguint%0#0: biguint = popped#0
        let tmp%5#0: bool = (b== reinterpret_biguint%0#0 0x5a)
        (assert tmp%5#0)
        let encoded%32#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%33#0: Encoded((uint8,uint8)) = (concat encoded%32#0 0x02)
        let encoded%34#0: Encoded((uint8,uint8,uint8)) = (concat encoded%33#0 0x32)
        let encoded%35#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%34#0 0x01)
        let encoded%36#0: Encoded((uint8,uint8,uint8,uint8,uint8)) = (concat encoded%35#0 0x02)
        let encoded%37#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%36#0 0x32)
        let encoded%38#0: Encoded((uint8,uint8,uint8,uint8,uint8,uint8,uint8)) = (concat encoded%37#0 0x04)
        let as_bytes%7#0: bytes[8] = (itob 7u)
        let len_u16%4#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%39#0: bytes = (concat len_u16%4#0 encoded%38#0)
        let encoded%40#0: Encoded(len+uint8[]) = (concat encoded%39#0 0x)
        let tmp%6#0: bool = (== dynamic_uint8_array#0 encoded%40#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
    block@0: // L166
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let encoded%0#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%0#0)
        let get_bit%0#0: uint64 = (getbit as_Encoded(bool8)%1#0 0u)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded%0#0 1u get_bit%0#0)
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%1#0: bytes = (concat len_u16%0#0 set_bit%0#0)
        let encoded%2#0: Encoded(len+bool1[]) = (concat encoded%1#0 0x)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded%2#0
        let tmp%0#0: bool = (== dynamic_bool_array#0 0x000280)
        (assert tmp%0#0)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded%3#0: Encoded((bool8)) = (concat 0x as_Encoded(bool8)%2#0)
        let encoded%4#0: Encoded((bool8,bool8)) = (concat encoded%3#0 as_Encoded(bool8)%3#0)
        let encoded%5#0: Encoded(bool8[]) = (concat encoded%4#0 0x)
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, encoded%5#0, 2u, 8u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%1#0: bool = (== dynamic_bool_array#0 0x0004a0)
        (assert tmp%1#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%4#0: Encoded(bool8) = encoded_bool%4#0
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%5#0: Encoded(bool8) = encoded_bool%5#0
        let encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%6#0: Encoded(bool8) = encoded_bool%6#0
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%7#0: Encoded(bool8) = encoded_bool%7#0
        let encoded%6#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%4#0)
        let get_bit%1#0: uint64 = (getbit as_Encoded(bool8)%5#0 0u)
        let set_bit%1#0: Encoded((bool1)) = (setbit encoded%6#0 1u get_bit%1#0)
        let get_bit%2#0: uint64 = (getbit as_Encoded(bool8)%6#0 0u)
        let set_bit%2#0: Encoded((bool1)) = (setbit set_bit%1#0 2u get_bit%2#0)
        let get_bit%3#0: uint64 = (getbit as_Encoded(bool8)%7#0 0u)
        let set_bit%3#0: Encoded((bool1)) = (setbit set_bit%2#0 3u get_bit%3#0)
        let as_bytes%1#0: bytes[8] = (itob 4u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%7#0: bytes = (concat len_u16%1#0 set_bit%3#0)
        let encoded%8#0: Encoded(len+bool1[]) = (concat encoded%7#0 0x)
        let tmp%2#0: bool = (== dynamic_bool_array#0 encoded%8#0)
        (assert tmp%2#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_bool_array#0)
        let array%array_length%0#1: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
        let tmp%3#0: uint64 = array%array_length%0#1
        let as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, extract_to_end%0#0, tmp%3#0, 1u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%1#0
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%8#0: Encoded(bool8) = encoded_bool%8#0
        let encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%9#0: Encoded(bool8) = encoded_bool%9#0
        let encoded_bool%10#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%10#0: Encoded(bool8) = encoded_bool%10#0
        let encoded_bool%11#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%11#0: Encoded(bool8) = encoded_bool%11#0
        let encoded_bool%12#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%12#0: Encoded(bool8) = encoded_bool%12#0
        let encoded_bool%13#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%13#0: Encoded(bool8) = encoded_bool%13#0
        let encoded_bool%14#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%14#0: Encoded(bool8) = encoded_bool%14#0
        let encoded_bool%15#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%15#0: Encoded(bool8) = encoded_bool%15#0
        let encoded%9#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%8#0)
        let get_bit%4#0: uint64 = (getbit as_Encoded(bool8)%9#0 0u)
        let set_bit%4#0: Encoded((bool1)) = (setbit encoded%9#0 1u get_bit%4#0)
        let get_bit%5#0: uint64 = (getbit as_Encoded(bool8)%10#0 0u)
        let set_bit%5#0: Encoded((bool1)) = (setbit set_bit%4#0 2u get_bit%5#0)
        let get_bit%6#0: uint64 = (getbit as_Encoded(bool8)%11#0 0u)
        let set_bit%6#0: Encoded((bool1)) = (setbit set_bit%5#0 3u get_bit%6#0)
        let get_bit%7#0: uint64 = (getbit as_Encoded(bool8)%12#0 0u)
        let set_bit%7#0: Encoded((bool1)) = (setbit set_bit%6#0 4u get_bit%7#0)
        let get_bit%8#0: uint64 = (getbit as_Encoded(bool8)%13#0 0u)
        let set_bit%8#0: Encoded((bool1)) = (setbit set_bit%7#0 5u get_bit%8#0)
        let get_bit%9#0: uint64 = (getbit as_Encoded(bool8)%14#0 0u)
        let set_bit%9#0: Encoded((bool1)) = (setbit set_bit%8#0 6u get_bit%9#0)
        let get_bit%10#0: uint64 = (getbit as_Encoded(bool8)%15#0 0u)
        let set_bit%10#0: Encoded((bool1)) = (setbit set_bit%9#0 7u get_bit%10#0)
        let as_bytes%2#0: bytes[8] = (itob 8u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%10#0: bytes = (concat len_u16%2#0 set_bit%10#0)
        let encoded%11#0: Encoded(len+bool1[]) = (concat encoded%10#0 0x)
        let tmp%4#0: bool = (== dynamic_bool_array#0 encoded%11#0)
        (assert tmp%4#0)
        let encoded_bool%16#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%16#0: Encoded(bool8) = encoded_bool%16#0
        let encoded%12#0: Encoded((bool8)) = (concat 0x as_Encoded(bool8)%16#0)
        let encoded%13#0: Encoded(bool8[]) = (concat encoded%12#0 0x)
        let as_Encoded(len+bool1[])%2#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, encoded%13#0, 1u, 8u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%2#0
        let encoded_bool%17#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%17#0: Encoded(bool8) = encoded_bool%17#0
        let encoded_bool%18#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%18#0: Encoded(bool8) = encoded_bool%18#0
        let encoded_bool%19#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%19#0: Encoded(bool8) = encoded_bool%19#0
        let encoded_bool%20#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%20#0: Encoded(bool8) = encoded_bool%20#0
        let encoded_bool%21#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%21#0: Encoded(bool8) = encoded_bool%21#0
        let encoded_bool%22#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%22#0: Encoded(bool8) = encoded_bool%22#0
        let encoded_bool%23#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%23#0: Encoded(bool8) = encoded_bool%23#0
        let encoded_bool%24#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%24#0: Encoded(bool8) = encoded_bool%24#0
        let encoded_bool%25#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%25#0: Encoded(bool8) = encoded_bool%25#0
        let encoded%14#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%17#0)
        let get_bit%11#0: uint64 = (getbit as_Encoded(bool8)%18#0 0u)
        let set_bit%11#0: Encoded((bool1)) = (setbit encoded%14#0 1u get_bit%11#0)
        let get_bit%12#0: uint64 = (getbit as_Encoded(bool8)%19#0 0u)
        let set_bit%12#0: Encoded((bool1)) = (setbit set_bit%11#0 2u get_bit%12#0)
        let get_bit%13#0: uint64 = (getbit as_Encoded(bool8)%20#0 0u)
        let set_bit%13#0: Encoded((bool1)) = (setbit set_bit%12#0 3u get_bit%13#0)
        let get_bit%14#0: uint64 = (getbit as_Encoded(bool8)%21#0 0u)
        let set_bit%14#0: Encoded((bool1)) = (setbit set_bit%13#0 4u get_bit%14#0)
        let get_bit%15#0: uint64 = (getbit as_Encoded(bool8)%22#0 0u)
        let set_bit%15#0: Encoded((bool1)) = (setbit set_bit%14#0 5u get_bit%15#0)
        let get_bit%16#0: uint64 = (getbit as_Encoded(bool8)%23#0 0u)
        let set_bit%16#0: Encoded((bool1)) = (setbit set_bit%15#0 6u get_bit%16#0)
        let get_bit%17#0: uint64 = (getbit as_Encoded(bool8)%24#0 0u)
        let set_bit%17#0: Encoded((bool1)) = (setbit set_bit%16#0 7u get_bit%17#0)
        let get_bit%18#0: uint64 = (getbit as_Encoded(bool8)%25#0 0u)
        let set_bit%18#0: bytes = (setbit 0x00 0u get_bit%18#0)
        let encoded%15#0: Encoded((bool1,bool1)) = (concat set_bit%17#0 set_bit%18#0)
        let as_bytes%3#0: bytes[8] = (itob 9u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%16#0: bytes = (concat len_u16%3#0 encoded%15#0)
        let encoded%17#0: Encoded(len+bool1[]) = (concat encoded%16#0 0x)
        let tmp%5#0: bool = (== dynamic_bool_array#0 encoded%17#0)
        (assert tmp%5#0)
        let (tmp%6#0: bytes, tmp%7#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = tmp%7#0
        let encoded_bool%26#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%26#0: Encoded(bool8) = encoded_bool%26#0
        let tmp%8#0: bool = (== tmp%6#0 as_Encoded(bool8)%26#0)
        (assert tmp%8#0)
        let (tmp%9#0: bytes, tmp%10#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = tmp%10#0
        let encoded_bool%27#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%27#0: Encoded(bool8) = encoded_bool%27#0
        let tmp%11#0: bool = (== tmp%9#0 as_Encoded(bool8)%27#0)
        (assert tmp%11#0)
        let encoded_bool%28#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%28#0: Encoded(bool8) = encoded_bool%28#0
        let encoded_bool%29#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%29#0: Encoded(bool8) = encoded_bool%29#0
        let encoded_bool%30#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%30#0: Encoded(bool8) = encoded_bool%30#0
        let encoded_bool%31#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%31#0: Encoded(bool8) = encoded_bool%31#0
        let encoded_bool%32#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%32#0: Encoded(bool8) = encoded_bool%32#0
        let encoded_bool%33#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%33#0: Encoded(bool8) = encoded_bool%33#0
        let encoded_bool%34#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%34#0: Encoded(bool8) = encoded_bool%34#0
        let encoded%18#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%28#0)
        let get_bit%19#0: uint64 = (getbit as_Encoded(bool8)%29#0 0u)
        let set_bit%19#0: Encoded((bool1)) = (setbit encoded%18#0 1u get_bit%19#0)
        let get_bit%20#0: uint64 = (getbit as_Encoded(bool8)%30#0 0u)
        let set_bit%20#0: Encoded((bool1)) = (setbit set_bit%19#0 2u get_bit%20#0)
        let get_bit%21#0: uint64 = (getbit as_Encoded(bool8)%31#0 0u)
        let set_bit%21#0: Encoded((bool1)) = (setbit set_bit%20#0 3u get_bit%21#0)
        let get_bit%22#0: uint64 = (getbit as_Encoded(bool8)%32#0 0u)
        let set_bit%22#0: Encoded((bool1)) = (setbit set_bit%21#0 4u get_bit%22#0)
        let get_bit%23#0: uint64 = (getbit as_Encoded(bool8)%33#0 0u)
        let set_bit%23#0: Encoded((bool1)) = (setbit set_bit%22#0 5u get_bit%23#0)
        let get_bit%24#0: uint64 = (getbit as_Encoded(bool8)%34#0 0u)
        let set_bit%24#0: Encoded((bool1)) = (setbit set_bit%23#0 6u get_bit%24#0)
        let as_bytes%4#0: bytes[8] = (itob 7u)
        let len_u16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%19#0: bytes = (concat len_u16%4#0 set_bit%24#0)
        let encoded%20#0: Encoded(len+bool1[]) = (concat encoded%19#0 0x)
        let tmp%12#0: bool = (== dynamic_bool_array#0 encoded%20#0)
        (assert tmp%12#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
    block@0: // L213
        let length%0#0: uint64 = (len 0x48656c6c6f)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x48656c6c6f)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let hello#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let length%1#0: uint64 = (len 0x576f726c64)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x576f726c64)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let world#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%1#0
        let length%2#0: uint64 = (len 0x466f6f)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x466f6f)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let foo#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let length%3#0: uint64 = (len 0x426172)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x426172)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let bar#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%3#0
        let tail%0#0: bytes = (concat 0x hello#0)
        let data_length%0#0: uint64 = (len hello#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%0#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 world#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%1#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%0#0 offset_as_uint16%1#0)
        let as_bytes%6#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%2#0: bytes = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded(len+len+utf8[][]) = (concat encoded%2#0 tail%1#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = encoded%3#0
        let tmp%0#0: bool = (== dynamic_string_array#0 0x00020004000b000548656c6c6f0005576f726c64)
        (assert tmp%0#0)
        let tail%2#0: bytes = (concat 0x foo#0)
        let data_length%2#0: uint64 = (len foo#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%4#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%2#0)
        let tail%3#0: bytes = (concat tail%2#0 bar#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%5#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%4#0 offset_as_uint16%3#0)
        let encoded%6#0: Encoded(len+utf8[][]) = (concat encoded%5#0 tail%3#0)
        let start_of_tail%0#0: uint64 = (* 2u 2u)
        let total_length%0#0: uint64 = (len encoded%6#0)
        let data%0#0: bytes = (substring3 encoded%6#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+len+utf8[][])%0#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, data%0#0, 2u)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = as_Encoded(len+len+utf8[][])%0#0
        let tmp%1#0: bool = (== dynamic_string_array#0 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%1#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_string_array#0)
        let array%array_length%0#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let tmp%2#0: uint64 = array%array_length%0#1
        let start_of_tail%1#0: uint64 = (* tmp%2#0 2u)
        let total_length%1#0: uint64 = (len extract_to_end%0#0)
        let data%1#0: bytes = (substring3 extract_to_end%0#0 start_of_tail%1#0 total_length%1#0)
        let as_Encoded(len+len+utf8[][])%1#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, data%1#0, tmp%2#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = as_Encoded(len+len+utf8[][])%1#0
        let tail%4#0: bytes = (concat 0x hello#0)
        let data_length%4#0: uint64 = (len hello#0)
        let current_tail_offset%4#0: uint64 = (+ 16u data_length%4#0)
        let as_bytes%9#0: bytes[8] = (itob 16u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded%7#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%4#0)
        let tail%5#0: bytes = (concat tail%4#0 world#0)
        let data_length%5#0: uint64 = (len world#0)
        let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%5#0)
        let as_bytes%10#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded%8#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%7#0 offset_as_uint16%5#0)
        let tail%6#0: bytes = (concat tail%5#0 foo#0)
        let data_length%6#0: uint64 = (len foo#0)
        let current_tail_offset%6#0: uint64 = (+ current_tail_offset%5#0 data_length%6#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%9#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%8#0 offset_as_uint16%6#0)
        let tail%7#0: bytes = (concat tail%6#0 bar#0)
        let data_length%7#0: uint64 = (len bar#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%7#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%10#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%9#0 offset_as_uint16%7#0)
        let tail%8#0: bytes = (concat tail%7#0 hello#0)
        let data_length%8#0: uint64 = (len hello#0)
        let current_tail_offset%8#0: uint64 = (+ current_tail_offset%7#0 data_length%8#0)
        let as_bytes%13#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%11#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%10#0 offset_as_uint16%8#0)
        let tail%9#0: bytes = (concat tail%8#0 world#0)
        let data_length%9#0: uint64 = (len world#0)
        let current_tail_offset%9#0: uint64 = (+ current_tail_offset%8#0 data_length%9#0)
        let as_bytes%14#0: bytes[8] = (itob current_tail_offset%8#0)
        let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded%12#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%11#0 offset_as_uint16%9#0)
        let tail%10#0: bytes = (concat tail%9#0 foo#0)
        let data_length%10#0: uint64 = (len foo#0)
        let current_tail_offset%10#0: uint64 = (+ current_tail_offset%9#0 data_length%10#0)
        let as_bytes%15#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded%13#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%12#0 offset_as_uint16%10#0)
        let tail%11#0: bytes = (concat tail%10#0 bar#0)
        let as_bytes%16#0: bytes[8] = (itob current_tail_offset%10#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%16#0)
        let encoded%14#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%13#0 offset_as_uint16%11#0)
        let as_bytes%17#0: bytes[8] = (itob 8u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded%15#0: bytes = (concat len_u16%1#0 encoded%14#0)
        let encoded%16#0: Encoded(len+len+utf8[][]) = (concat encoded%15#0 tail%11#0)
        let tmp%3#0: bool = (== dynamic_string_array#0 encoded%16#0)
        (assert tmp%3#0)
        let tail%12#0: bytes = (concat 0x hello#0)
        let data_length%12#0: uint64 = (len hello#0)
        let current_tail_offset%12#0: uint64 = (+ 16u data_length%12#0)
        let as_bytes%18#0: bytes[8] = (itob 16u)
        let offset_as_uint16%12#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded%17#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%12#0)
        let tail%13#0: bytes = (concat tail%12#0 world#0)
        let data_length%13#0: uint64 = (len world#0)
        let current_tail_offset%13#0: uint64 = (+ current_tail_offset%12#0 data_length%13#0)
        let as_bytes%19#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%19#0)
        let encoded%18#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%17#0 offset_as_uint16%13#0)
        let tail%14#0: bytes = (concat tail%13#0 foo#0)
        let data_length%14#0: uint64 = (len foo#0)
        let current_tail_offset%14#0: uint64 = (+ current_tail_offset%13#0 data_length%14#0)
        let as_bytes%20#0: bytes[8] = (itob current_tail_offset%13#0)
        let offset_as_uint16%14#0: bytes = ((extract 6 2) as_bytes%20#0)
        let encoded%19#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%18#0 offset_as_uint16%14#0)
        let tail%15#0: bytes = (concat tail%14#0 bar#0)
        let data_length%15#0: uint64 = (len bar#0)
        let current_tail_offset%15#0: uint64 = (+ current_tail_offset%14#0 data_length%15#0)
        let as_bytes%21#0: bytes[8] = (itob current_tail_offset%14#0)
        let offset_as_uint16%15#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded%20#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%19#0 offset_as_uint16%15#0)
        let tail%16#0: bytes = (concat tail%15#0 hello#0)
        let data_length%16#0: uint64 = (len hello#0)
        let current_tail_offset%16#0: uint64 = (+ current_tail_offset%15#0 data_length%16#0)
        let as_bytes%22#0: bytes[8] = (itob current_tail_offset%15#0)
        let offset_as_uint16%16#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded%21#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%20#0 offset_as_uint16%16#0)
        let tail%17#0: bytes = (concat tail%16#0 world#0)
        let data_length%17#0: uint64 = (len world#0)
        let current_tail_offset%17#0: uint64 = (+ current_tail_offset%16#0 data_length%17#0)
        let as_bytes%23#0: bytes[8] = (itob current_tail_offset%16#0)
        let offset_as_uint16%17#0: bytes = ((extract 6 2) as_bytes%23#0)
        let encoded%22#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%21#0 offset_as_uint16%17#0)
        let tail%18#0: bytes = (concat tail%17#0 foo#0)
        let data_length%18#0: uint64 = (len foo#0)
        let current_tail_offset%18#0: uint64 = (+ current_tail_offset%17#0 data_length%18#0)
        let as_bytes%24#0: bytes[8] = (itob current_tail_offset%17#0)
        let offset_as_uint16%18#0: bytes = ((extract 6 2) as_bytes%24#0)
        let encoded%23#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%22#0 offset_as_uint16%18#0)
        let tail%19#0: bytes = (concat tail%18#0 bar#0)
        let as_bytes%25#0: bytes[8] = (itob current_tail_offset%18#0)
        let offset_as_uint16%19#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded%24#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%23#0 offset_as_uint16%19#0)
        let as_bytes%26#0: bytes[8] = (itob 8u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%26#0)
        let encoded%25#0: bytes = (concat len_u16%2#0 encoded%24#0)
        let encoded%26#0: Encoded(len+len+utf8[][]) = (concat encoded%25#0 tail%19#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = encoded%26#0
        let array%array_length%1#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let array_length%0#0: uint64 = array%array_length%1#1
        let lt%0#0: bool = (< 3u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#0, hello#0, 3u)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = updated_array%0#0
        let array%array_length%2#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let array_length%1#0: uint64 = array%array_length%2#1
        let lt%1#0: bool = (< 5u array_length%1#0)
        (assert lt%1#0) // index access is out of bounds
        let updated_array%1#0: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#0, hello#0, 5u)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = updated_array%1#0
        let tail%20#0: bytes = (concat 0x hello#0)
        let data_length%20#0: uint64 = (len hello#0)
        let current_tail_offset%20#0: uint64 = (+ 16u data_length%20#0)
        let as_bytes%27#0: bytes[8] = (itob 16u)
        let offset_as_uint16%20#0: bytes = ((extract 6 2) as_bytes%27#0)
        let encoded%27#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%20#0)
        let tail%21#0: bytes = (concat tail%20#0 world#0)
        let data_length%21#0: uint64 = (len world#0)
        let current_tail_offset%21#0: uint64 = (+ current_tail_offset%20#0 data_length%21#0)
        let as_bytes%28#0: bytes[8] = (itob current_tail_offset%20#0)
        let offset_as_uint16%21#0: bytes = ((extract 6 2) as_bytes%28#0)
        let encoded%28#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%27#0 offset_as_uint16%21#0)
        let tail%22#0: bytes = (concat tail%21#0 foo#0)
        let data_length%22#0: uint64 = (len foo#0)
        let current_tail_offset%22#0: uint64 = (+ current_tail_offset%21#0 data_length%22#0)
        let as_bytes%29#0: bytes[8] = (itob current_tail_offset%21#0)
        let offset_as_uint16%22#0: bytes = ((extract 6 2) as_bytes%29#0)
        let encoded%29#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%28#0 offset_as_uint16%22#0)
        let tail%23#0: bytes = (concat tail%22#0 hello#0)
        let data_length%23#0: uint64 = (len hello#0)
        let current_tail_offset%23#0: uint64 = (+ current_tail_offset%22#0 data_length%23#0)
        let as_bytes%30#0: bytes[8] = (itob current_tail_offset%22#0)
        let offset_as_uint16%23#0: bytes = ((extract 6 2) as_bytes%30#0)
        let encoded%30#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%29#0 offset_as_uint16%23#0)
        let tail%24#0: bytes = (concat tail%23#0 hello#0)
        let data_length%24#0: uint64 = (len hello#0)
        let current_tail_offset%24#0: uint64 = (+ current_tail_offset%23#0 data_length%24#0)
        let as_bytes%31#0: bytes[8] = (itob current_tail_offset%23#0)
        let offset_as_uint16%24#0: bytes = ((extract 6 2) as_bytes%31#0)
        let encoded%31#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%30#0 offset_as_uint16%24#0)
        let tail%25#0: bytes = (concat tail%24#0 hello#0)
        let data_length%25#0: uint64 = (len hello#0)
        let current_tail_offset%25#0: uint64 = (+ current_tail_offset%24#0 data_length%25#0)
        let as_bytes%32#0: bytes[8] = (itob current_tail_offset%24#0)
        let offset_as_uint16%25#0: bytes = ((extract 6 2) as_bytes%32#0)
        let encoded%32#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%31#0 offset_as_uint16%25#0)
        let tail%26#0: bytes = (concat tail%25#0 foo#0)
        let data_length%26#0: uint64 = (len foo#0)
        let current_tail_offset%26#0: uint64 = (+ current_tail_offset%25#0 data_length%26#0)
        let as_bytes%33#0: bytes[8] = (itob current_tail_offset%25#0)
        let offset_as_uint16%26#0: bytes = ((extract 6 2) as_bytes%33#0)
        let encoded%33#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%32#0 offset_as_uint16%26#0)
        let tail%27#0: bytes = (concat tail%26#0 bar#0)
        let as_bytes%34#0: bytes[8] = (itob current_tail_offset%26#0)
        let offset_as_uint16%27#0: bytes = ((extract 6 2) as_bytes%34#0)
        let encoded%34#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%33#0 offset_as_uint16%27#0)
        let as_bytes%35#0: bytes[8] = (itob 8u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%35#0)
        let encoded%35#0: bytes = (concat len_u16%3#0 encoded%34#0)
        let encoded%36#0: Encoded(len+len+utf8[][]) = (concat encoded%35#0 tail%27#0)
        let tmp%4#0: bool = (== dynamic_string_array#0 encoded%36#0)
        (assert tmp%4#0)
        let (tmp%5#0: bytes, tmp%6#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = tmp%6#0
        let tmp%7#0: bool = (== tmp%5#0 bar#0)
        (assert tmp%7#0)
        let (tmp%8#0: bytes, tmp%9#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = tmp%9#0
        let tmp%10#0: bool = (== tmp%8#0 foo#0)
        (assert tmp%10#0)
        let tail%28#0: bytes = (concat 0x hello#0)
        let data_length%28#0: uint64 = (len hello#0)
        let current_tail_offset%28#0: uint64 = (+ 12u data_length%28#0)
        let as_bytes%36#0: bytes[8] = (itob 12u)
        let offset_as_uint16%28#0: bytes = ((extract 6 2) as_bytes%36#0)
        let encoded%37#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%28#0)
        let tail%29#0: bytes = (concat tail%28#0 world#0)
        let data_length%29#0: uint64 = (len world#0)
        let current_tail_offset%29#0: uint64 = (+ current_tail_offset%28#0 data_length%29#0)
        let as_bytes%37#0: bytes[8] = (itob current_tail_offset%28#0)
        let offset_as_uint16%29#0: bytes = ((extract 6 2) as_bytes%37#0)
        let encoded%38#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%37#0 offset_as_uint16%29#0)
        let tail%30#0: bytes = (concat tail%29#0 foo#0)
        let data_length%30#0: uint64 = (len foo#0)
        let current_tail_offset%30#0: uint64 = (+ current_tail_offset%29#0 data_length%30#0)
        let as_bytes%38#0: bytes[8] = (itob current_tail_offset%29#0)
        let offset_as_uint16%30#0: bytes = ((extract 6 2) as_bytes%38#0)
        let encoded%39#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%38#0 offset_as_uint16%30#0)
        let tail%31#0: bytes = (concat tail%30#0 hello#0)
        let data_length%31#0: uint64 = (len hello#0)
        let current_tail_offset%31#0: uint64 = (+ current_tail_offset%30#0 data_length%31#0)
        let as_bytes%39#0: bytes[8] = (itob current_tail_offset%30#0)
        let offset_as_uint16%31#0: bytes = ((extract 6 2) as_bytes%39#0)
        let encoded%40#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%39#0 offset_as_uint16%31#0)
        let tail%32#0: bytes = (concat tail%31#0 hello#0)
        let data_length%32#0: uint64 = (len hello#0)
        let current_tail_offset%32#0: uint64 = (+ current_tail_offset%31#0 data_length%32#0)
        let as_bytes%40#0: bytes[8] = (itob current_tail_offset%31#0)
        let offset_as_uint16%32#0: bytes = ((extract 6 2) as_bytes%40#0)
        let encoded%41#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%40#0 offset_as_uint16%32#0)
        let tail%33#0: bytes = (concat tail%32#0 hello#0)
        let as_bytes%41#0: bytes[8] = (itob current_tail_offset%32#0)
        let offset_as_uint16%33#0: bytes = ((extract 6 2) as_bytes%41#0)
        let encoded%42#0: Encoded((len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%41#0 offset_as_uint16%33#0)
        let as_bytes%42#0: bytes[8] = (itob 6u)
        let len_u16%4#0: bytes = ((extract 6 2) as_bytes%42#0)
        let encoded%43#0: bytes = (concat len_u16%4#0 encoded%42#0)
        let encoded%44#0: Encoded(len+len+utf8[][]) = (concat encoded%43#0 tail%33#0)
        let tmp%11#0: bool = (== dynamic_string_array#0 encoded%44#0)
        (assert tmp%11#0)
        return 