contract test_cases.arc4_types.bool.Arc4BoolTypeContract:
    program approval:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> bool:
            block@0: // L12
                let tmp%0#0: bytes = (setbit 0x00 0u 1u)
                let tmp%1#0: bytes = (setbit 0x00 0u 0u)
                test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(tmp%0#0, tmp%1#0)
                let tmp%2#0: bytes = (setbit 0x00 0u 1u)
                let tmp%3#0: bytes = (setbit 0x00 0u 1u)
                let tmp%4#0: bytes = (setbit 0x00 0u 1u)
                let tmp%5#0: bytes = (setbit 0x00 0u 1u)
                let tmp%6#0: bytes = (setbit 0x00 0u 1u)
                let tmp%7#0: bytes = (setbit 0x00 0u 1u)
                let tmp%8#0: bytes = (setbit 0x00 0u 1u)
                let tmp%9#0: bytes = (setbit 0x00 0u 1u)
                let tmp%10#0: bytes = (setbit 0x00 0u 1u)
                let tmp%11#0: bytes = (setbit 0x00 0u 1u)
                let tmp%12#0: bytes = (setbit 0x00 0u 1u)
                let tmp%13#0: bytes = (setbit 0x00 0u 1u)
                let array_data%0#1: bytes = (concat 0x tmp%2#0)
                let is_true%0#0: uint64 = (getbit tmp%3#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 1u is_true%0#0)
                let is_true%1#0: uint64 = (getbit tmp%4#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 2u is_true%1#0)
                let is_true%2#0: uint64 = (getbit tmp%5#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 3u is_true%2#0)
                let is_true%3#0: uint64 = (getbit tmp%6#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 4u is_true%3#0)
                let is_true%4#0: uint64 = (getbit tmp%7#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 5u is_true%4#0)
                let is_true%5#0: uint64 = (getbit tmp%8#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 6u is_true%5#0)
                let is_true%6#0: uint64 = (getbit tmp%9#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 7u is_true%6#0)
                let array_data%0#1: bytes = (concat array_data%0#1 tmp%10#0)
                let is_true%7#0: uint64 = (getbit tmp%11#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 9u is_true%7#0)
                let is_true%8#0: uint64 = (getbit tmp%12#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 10u is_true%8#0)
                let is_true%9#0: uint64 = (getbit tmp%13#0 0u)
                let array_data%0#1: bytes = (setbit array_data%0#1 11u is_true%9#0)
                let static_boolean_array#0: bytes = array_data%0#1
                let tmp%14#0: bool = (== static_boolean_array#0 0xfff0)
                (assert tmp%14#0)
                let array_head_and_tail%0#0: bytes = static_boolean_array#0
                let is_true%10#0: uint64 = (getbit array_head_and_tail%0#0 0u)
                let tmp%15#0: bytes = (setbit 0x00 0u is_true%10#0)
                let tmp%16#0: bytes = (setbit 0x00 0u 1u)
                let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
                (assert tmp%17#0) // Single boolean can be unpacked
                let tmp%18#0: uint64 = (- 12u 1u)
                let array_head_and_tail%1#0: bytes = static_boolean_array#0
                let index_is_in_bounds%0#0: bool = (< tmp%18#0 12u)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let is_true%11#0: uint64 = (getbit array_head_and_tail%1#0 tmp%18#0)
                let tmp%19#0: bytes = (setbit 0x00 0u is_true%11#0)
                let tmp%20#0: bytes = (setbit 0x00 0u 1u)
                let tmp%21#0: bool = (== tmp%19#0 tmp%20#0)
                (assert tmp%21#0) // Single boolean can be unpacked
                let tmp%22#0: bytes = (setbit 0x00 0u 1u)
                let tmp%23#0: bytes = (setbit 0x00 0u 0u)
                let tmp%24#0: bytes = (setbit 0x00 0u 1u)
                let array_data%1#1: bytes = (concat 0x0003 tmp%22#0)
                let is_true%12#0: uint64 = (getbit tmp%23#0 0u)
                let array_data%1#1: bytes = (setbit array_data%1#1 17u is_true%12#0)
                let is_true%13#0: uint64 = (getbit tmp%24#0 0u)
                let array_data%1#1: bytes = (setbit array_data%1#1 18u is_true%13#0)
                let dynamic_boolean_array#0: bytes = array_data%1#1
                let tmp%25#0: bool = (== dynamic_boolean_array#0 0x0003a0)
                (assert tmp%25#0)
                return 1u
        
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> void:
            block@0: // L46
                let tmp%0#0: uint64 = (getbit true#0 0u)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (getbit false#0 0u)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (getbit true#0 0u)
                let tmp%4#0: bytes = (setbit 0x00 0u tmp%3#0)
                let tmp%5#0: bool = (== true#0 tmp%4#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (getbit false#0 0u)
                let tmp%7#0: bytes = (setbit 0x00 0u tmp%6#0)
                let tmp%8#0: bool = (== false#0 tmp%7#0)
                (assert tmp%8#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.clear_state_program() -> bool:
            block@0: // L43
                return 1u