main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%2#1: Encoded(bool8) = aggregate%encoded_bool%2#1
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#1
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#1: Encoded(bool8) = aggregate%encoded_bool%3#1
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#1
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%6#0: bool = (== encoded%0#0 encoded%1#0)
        (assert tmp%6#0)
        let aggregate%length%2#1: uint64 = (len 0x2e)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x2e)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let aggregate%length%3#1: uint64 = (len 0x)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let tmp%7#0: bool = (!= encoded%2#0 encoded%3#0)
        (assert tmp%7#0)
        let tmp%8#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%9#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%11#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%12#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (b== 0x00 0b)
        (assert tmp%13#0)
        let tmp%14#0: bool = (b!= 0x01 0b)
        (assert tmp%14#0)
        let tmp%15#0: bool = (b== 0x0000 0b)
        (assert tmp%15#0)
        let tmp%16#0: bool = (b!= 0x0001 0b)
        (assert tmp%16#0)
        let tmp%17#0: bool = (b== 0x00000000 0b)
        (assert tmp%17#0)
        let tmp%18#0: bool = (b!= 0x00000001 0b)
        (assert tmp%18#0)
        let tmp%19#0: bool = (b== 0x0000000000000000 0b)
        (assert tmp%19#0)
        let tmp%20#0: bool = (b!= 0x0000000000000001 0b)
        (assert tmp%20#0)
        let tmp%21#0: bool = (b== 0x00000000000000000000000000000000 0b)
        (assert tmp%21#0)
        let tmp%22#0: bool = (b!= 0x00000000000000000000000000000001 0b)
        (assert tmp%22#0)
        let tmp%23#0: bool = (b== 0x0000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%23#0)
        let tmp%24#0: bool = (b!= 0x0000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%24#0)
        let tmp%25#0: bool = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%25#0)
        let tmp%26#0: bool = (b!= 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%26#0)
        let tmp%27#0: bool = (b== 0x000000 0b)
        (assert tmp%27#0)
        let tmp%28#0: bool = (b!= 0x000001 0b)
        (assert tmp%28#0)
        let tmp%29#0: bool = (b== 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%29#0)
        let tmp%30#0: bool = (b!= 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%30#0)
        let tmp%31#0: bool = (b== 0x000000000000 0b)
        (assert tmp%31#0)
        let tmp%32#0: bool = (b!= 0x0002540be400 0b)
        (assert tmp%32#0)
        let tmp%33#0: bool = (b== 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%33#0)
        let tmp%34#0: bool = (b!= 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100 0b)
        (assert tmp%34#0)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%len_u16%0#1
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let dynamic_arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%as_bytes%5#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%as_Encoded(len+uint64[])%1#1: Encoded(len+uint64[]) = aggregate%len_u16%1#1
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#1
        let tmp%35#0: bool = (== dynamic_arr#0 encoded_array%1#0)
        (assert tmp%35#0)
        let aggregate%head%0#1: bytes = (concat 0x 0x0000000000000000)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%36#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#0: Encoded(len+uint64[]) = (concat dynamic_arr#0 tmp%36#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let dynamic_arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let aggregate%as_bytes%6#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%as_Encoded(len+uint64[])%2#1: Encoded(len+uint64[]) = aggregate%len_u16%2#1
        let encoded_array%2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#1
        let tmp%37#0: bool = (!= dynamic_arr#0 encoded_array%2#0)
        (assert tmp%37#0)
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%4#1: Encoded(bool8) = aggregate%encoded_bool%4#1
        let tmp%38#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#1
        let aggregate%encoded_bool%5#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%5#1: Encoded(bool8) = aggregate%encoded_bool%5#1
        let tmp%39#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#1
        let tmp%40#0: bool = (== tmp%38#0 tmp%39#0)
        (assert tmp%40#0)
        return 1u