main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let tmp%0#0: bool = (== as_Encoded(bool8)%0#0 0x00)
        (assert tmp%0#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let tmp%1#0: bool = (!= as_Encoded(bool8)%1#0 0x00)
        (assert tmp%1#0)
        let length%0#0: uint64 = (len 0x)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let tmp%2#0: bool = (== as_Encoded(len+utf8[])%0#0 0x0000)
        (assert tmp%2#0)
        let length%1#0: uint64 = (len 0x2e)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x2e)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let tmp%3#0: bool = (!= as_Encoded(len+utf8[])%1#0 0x0000)
        (assert tmp%3#0)
        let tmp%4#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%5#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%7#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%8#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = (b== 0x00 0b)
        (assert tmp%9#0)
        let tmp%10#0: bool = (b!= 0x01 0b)
        (assert tmp%10#0)
        let tmp%11#0: bool = (b== 0x0000 0b)
        (assert tmp%11#0)
        let tmp%12#0: bool = (b!= 0x0001 0b)
        (assert tmp%12#0)
        let tmp%13#0: bool = (b== 0x00000000 0b)
        (assert tmp%13#0)
        let tmp%14#0: bool = (b!= 0x00000001 0b)
        (assert tmp%14#0)
        let tmp%15#0: bool = (b== 0x0000000000000000 0b)
        (assert tmp%15#0)
        let tmp%16#0: bool = (b!= 0x0000000000000001 0b)
        (assert tmp%16#0)
        let tmp%17#0: bool = (b== 0x00000000000000000000000000000000 0b)
        (assert tmp%17#0)
        let tmp%18#0: bool = (b!= 0x00000000000000000000000000000001 0b)
        (assert tmp%18#0)
        let tmp%19#0: bool = (b== 0x0000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%19#0)
        let tmp%20#0: bool = (b!= 0x0000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%20#0)
        let tmp%21#0: bool = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%21#0)
        let tmp%22#0: bool = (b!= 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%22#0)
        let tmp%23#0: bool = (b== 0x000000 0b)
        (assert tmp%23#0)
        let tmp%24#0: bool = (b!= 0x000001 0b)
        (assert tmp%24#0)
        let tmp%25#0: bool = (b== 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%25#0)
        let tmp%26#0: bool = (b!= 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 0b)
        (assert tmp%26#0)
        let tmp%27#0: bool = (b== 0x000000000000 0b)
        (assert tmp%27#0)
        let tmp%28#0: bool = (b!= 0x0002540be400 0b)
        (assert tmp%28#0)
        let tmp%29#0: bool = (b== 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
        (assert tmp%29#0)
        let tmp%30#0: bool = (b!= 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100 0b)
        (assert tmp%30#0)
        let as_bytes%2#0: bytes[8] = (itob 0u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%0#0: bytes = (concat len_u16%0#0 0x)
        let encoded%1#0: Encoded(len+uint64[]) = (concat encoded%0#0 0x)
        let dynamic_arr#0: Encoded(len+uint64[]) = encoded%1#0
        let tmp%31#0: bool = (== dynamic_arr#0 0x0000)
        (assert tmp%31#0)
        let encoded%2#0: Encoded((uint64)) = (concat 0x 0x0000000000000000)
        let encoded%3#0: Encoded(uint64[]) = (concat encoded%2#0 0x)
        let concat%0#0: Encoded(len+uint64[]) = (concat dynamic_arr#0 encoded%3#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let dynamic_arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let tmp%32#0: bool = (!= dynamic_arr#0 0x0000)
        (assert tmp%32#0)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let tmp%33#0: bool = (== 0x00 as_Encoded(bool8)%2#0)
        (assert tmp%33#0)
        return 1u