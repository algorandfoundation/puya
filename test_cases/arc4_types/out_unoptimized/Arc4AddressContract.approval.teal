#pragma version 10

test_cases.arc4_types.address.Arc4AddressContract.approval_program:
    // arc4_types/address.py:8
    // address = arc4.Address(Txn.sender)
    txn Sender
    // arc4_types/address.py:9
    // assert address == Txn.sender
    txn Sender
    dig 1
    uncover 1
    ==
    assert
    // arc4_types/address.py:10
    // assert address.length == 32
    int 32
    int 32
    ==
    assert
    // arc4_types/address.py:11
    // assert address.native == Txn.sender
    txn Sender
    ==
    assert
    // arc4_types/address.py:13
    // zero_address = arc4.Address(Global.zero_address.bytes)
    global ZeroAddress
    dup
    len
    int 32
    uncover 1
    ==
    assert // Address length is 32 bytes
    // arc4_types/address.py:14
    // assert zero_address.bytes == Global.zero_address.bytes
    global ZeroAddress
    ==
    assert
    // arc4_types/address.py:16
    // some_address = arc4.Address(SOME_ADDRESS)
    addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // arc4_types/address.py:17
    // assert some_address == SOME_ADDRESS
    addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    ==
    assert
    // arc4_types/address.py:16
    // some_address = arc4.Address(SOME_ADDRESS)
    addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // arc4_types/address.py:19
    // some_address[0] = arc4.Byte(123)
    int 0
    byte 0x7b
    replace3
    // arc4_types/address.py:20
    // assert some_address != SOME_ADDRESS
    addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    !=
    assert
    // arc4_types/address.py:21
    // return True
    int 1
    return
