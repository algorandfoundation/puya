#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.address.Arc4AddressContract.approval_program() -> uint64:
main:
    bytecblock base32(VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJPQ)
    b block@0

block@0:
    // arc4_types/address.py:8
    // address = arc4.Address(Txn.sender)
    txn Sender
    // arc4_types/address.py:9
    // assert address == Txn.sender
    txn Sender
    dig 1
    ==
    assert
    // arc4_types/address.py:10
    // assert address.length == 32
    pushint 32 // 32
    pushint 32 // 32
    ==
    assert
    // arc4_types/address.py:11
    // assert address.native == Txn.sender
    txn Sender
    ==
    assert
    // arc4_types/address.py:13
    // zero_address = arc4.Address(Global.zero_address.bytes)
    global ZeroAddress
    dup
    len
    pushint 32 // 32
    ==
    assert // Address length is 32 bytes
    // arc4_types/address.py:14
    // assert zero_address.bytes == Global.zero_address.bytes
    global ZeroAddress
    ==
    assert
    // arc4_types/address.py:16
    // some_address = arc4.Address(SOME_ADDRESS)
    bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // arc4_types/address.py:17
    // assert some_address == SOME_ADDRESS
    bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    ==
    assert
    // arc4_types/address.py:16
    // some_address = arc4.Address(SOME_ADDRESS)
    bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    bytec_0 // addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
    // arc4_types/address.py:21
    // assert some_address == address_copy
    ==
    assert
    // arc4_types/address.py:22
    // return True
    pushint 1 // 1
    return
