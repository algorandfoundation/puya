#pragma version 10

test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    intcblock 0 8 1 2
    bytecblock 0x00 0x 0x000000083cfbf217 0x000000230384b842
    // arc4_types/structs.py:27
    // coord_1 = Vector(x=Decimal("35.382882839"), y=Decimal("150.382884930"))
    bytec_1 // 0x
    bytec_2 // 0x000000083cfbf217
    concat
    bytec_3 // 0x000000230384b842
    concat
    dup
    // arc4_types/structs.py:28
    // coord_2 = Vector(y=Decimal("150.382884930"), x=Decimal("35.382882839"))
    bytec_1 // 0x
    bytec_2 // 0x000000083cfbf217
    concat
    bytec_3 // 0x000000230384b842
    concat
    // arc4_types/structs.py:29
    // coord_3 = add(coord_1.copy(), coord_2.copy())
    callsub add
    popn 2
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    swap
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    swap

main_for_body@1:
    // arc4_types/structs.py:31
    // log(val.bytes)
    log
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    dup
    switch main_for_header_1@3
    b main_after_for@4

main_for_header_1@3:
    intc_2 // 1
    bury 1
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    dig 1
    b main_for_body@1

main_after_for@4:
    // arc4_types/structs.py:33
    // flags = Flags(a=arc4.Bool(True), b=arc4.Bool(False), c=arc4.Bool(True), d=arc4.Bool(False))
    bytec_0 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    cover 2
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 3
    bytec_1 // 0x
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_3 // 2
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    // arc4_types/structs.py:34
    // check(flags.copy())
    dup
    callsub check
    pop
    // arc4_types/structs.py:35
    // log(flags.bytes)
    dup
    log
    // arc4_types/structs.py:36
    // assert Vector.from_bytes(coord_1.bytes).bytes == coord_1.bytes
    dig 3
    dup
    dig 1
    ==
    assert
    // arc4_types/structs.py:38
    // nested_decode(VectorFlags(coord_1.copy(), flags.copy()))
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    callsub nested_decode
    pop
    // arc4_types/structs.py:40
    // return True
    intc_2 // 1
    return


// test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> bytes, bytes, bytes:
add:
    // arc4_types/structs.py:46-47
    // @subroutine
    // def add(v1: Vector, v2: Vector) -> Vector:
    proto 2 3
    // arc4_types/structs.py:49
    // x=add_decimal(v1.x, v2.x),
    frame_dig -2
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    callsub add_decimal
    // arc4_types/structs.py:50
    // y=add_decimal(v1.y, v2.y),
    frame_dig -2
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    callsub add_decimal
    // arc4_types/structs.py:48-51
    // return Vector(
    //     x=add_decimal(v1.x, v2.x),
    //     y=add_decimal(v1.y, v2.y),
    // )
    bytec_1 // 0x
    uncover 2
    concat
    swap
    concat
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
add_decimal:
    // arc4_types/structs.py:68-69
    // @subroutine
    // def add_decimal(x: Decimal, y: Decimal) -> Decimal:
    proto 2 1
    // arc4_types/structs.py:70
    // return Decimal.from_bytes(op.itob(op.btoi(x.bytes) + op.btoi(y.bytes)))
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    +
    itob
    retsub


// test_cases.arc4_types.structs.check(flags: bytes) -> bytes:
check:
    // arc4_types/structs.py:54-55
    // @subroutine
    // def check(flags: Flags) -> None:
    proto 1 1
    // arc4_types/structs.py:56
    // assert flags.a.native
    frame_dig -1
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert
    // arc4_types/structs.py:57
    // assert not flags.b.native
    frame_dig -1
    intc_2 // 1
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert
    // arc4_types/structs.py:58
    // assert flags.c.native
    frame_dig -1
    intc_3 // 2
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert
    // arc4_types/structs.py:59
    // assert not flags.d.native
    frame_dig -1
    pushint 3 // 3
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert
    frame_dig -1
    retsub


// test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> bytes:
nested_decode:
    // arc4_types/structs.py:62-63
    // @subroutine
    // def nested_decode(vector_flags: VectorFlags) -> None:
    proto 1 1
    // arc4_types/structs.py:64
    // assert vector_flags.vector.x.bytes == op.itob(35382882839)
    frame_dig -1
    intc_0 // 0
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    pushint 35382882839 // 35382882839
    itob
    ==
    assert
    // arc4_types/structs.py:65
    // assert vector_flags.flags.c.native
    frame_dig -1
    pushint 16 // 16
    intc_2 // 1
    extract3 // on error: Index access is out of bounds
    intc_3 // 2
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert
    frame_dig -1
    retsub
