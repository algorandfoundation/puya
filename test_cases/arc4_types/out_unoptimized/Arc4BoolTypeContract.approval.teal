#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> uint64:
main:
    intcblock 0 1 2 3
    bytecblock 0x00 0x
    b main_block@0

main_block@0:
    // arc4_types/bool.py:13
    // self.test_stuff(ARC4Bool(True), ARC4Bool(False))
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    callsub test_stuff
    pop
    // arc4_types/bool.py:15
    // False if Txn.num_app_args else True  # noqa: SIM211
    txn NumAppArgs
    intc_0 // 0
    !=
    intc_1 // 1
    intc_0 // 0
    uncover 2
    select
    // arc4_types/bool.py:14-16
    // assert ARC4Bool(
    //     False if Txn.num_app_args else True  # noqa: SIM211
    // ).native, "conditional expr"
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // conditional expr
    // arc4_types/bool.py:19
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:20
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:21
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 1
    // arc4_types/bool.py:22
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 2
    // arc4_types/bool.py:23
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 3
    // arc4_types/bool.py:24
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 4
    // arc4_types/bool.py:25
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 5
    // arc4_types/bool.py:26
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 6
    // arc4_types/bool.py:27
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 7
    // arc4_types/bool.py:28
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:29
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 1
    // arc4_types/bool.py:30
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 2
    // arc4_types/bool.py:18-31
    // static_boolean_array = StaticArray[ARC4Bool, t.Literal[12]](
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    // )
    uncover 3
    intc_0 // 0
    getbit
    uncover 11
    intc_1 // 1
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    intc_2 // 2
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    intc_3 // 3
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    pushint 4 // 4
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    pushint 5 // 5
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    pushint 6 // 6
    uncover 2
    setbit
    uncover 4
    intc_0 // 0
    getbit
    uncover 1
    pushint 7 // 7
    uncover 2
    setbit
    bytec_1 // 0x
    uncover 1
    concat
    uncover 1
    intc_0 // 0
    getbit
    uncover 4
    intc_1 // 1
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_2 // 2
    uncover 2
    setbit
    uncover 2
    intc_0 // 0
    getbit
    uncover 1
    intc_3 // 3
    uncover 2
    setbit
    concat
    // arc4_types/bool.py:33
    // assert static_boolean_array.bytes == Bytes.from_hex("FFF0")
    dup
    pushbytes 0xfff0
    ==
    assert
    // arc4_types/bool.py:35
    // assert static_boolean_array[0] == ARC4Bool(True), "Single boolean can be unpacked"
    intc_0 // 0
    pushint 12 // 12
    <
    assert // index access is out of bounds
    dup
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:36
    // assert static_boolean_array[-1] == ARC4Bool(True), "Single boolean can be unpacked"
    pushint 12 // 12
    intc_1 // 1
    -
    dup
    pushint 12 // 12
    <
    assert // index access is out of bounds
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:39
    // ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 1
    // arc4_types/bool.py:38-40
    // dynamic_boolean_array = DynamicArray[ARC4Bool](
    //     ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    // )
    intc_3 // 3
    itob
    extract 6 2
    cover 2
    intc_0 // 0
    getbit
    uncover 3
    intc_1 // 1
    uncover 2
    setbit
    uncover 1
    intc_0 // 0
    getbit
    uncover 1
    intc_2 // 2
    uncover 2
    setbit
    concat
    // arc4_types/bool.py:42
    // assert dynamic_boolean_array.bytes == Bytes.from_hex("0003A0")
    pushbytes 0x0003a0
    ==
    assert
    // arc4_types/bool.py:44
    // dynamic_boolean_array = get_arr()
    callsub get_arr
    // arc4_types/bool.py:46
    // (ARC4Bool(True), ARC4Bool(False), ARC4Bool(True), ARC4Bool(False), ARC4Bool(True))
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:45-47
    // dynamic_boolean_array.extend(
    //     (ARC4Bool(True), ARC4Bool(False), ARC4Bool(True), ARC4Bool(False), ARC4Bool(True))
    // )
    bytec_1 // 0x
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 1
    concat
    pushint 5 // 5
    pushint 8 // 8
    callsub dynamic_array_concat_bits
    // arc4_types/bool.py:48
    // assert dynamic_boolean_array.bytes == Bytes.from_hex("0005A8")
    pushbytes 0x0005a8
    ==
    assert
    // arc4_types/bool.py:50
    // assert ARC4Bool(True) == True  # noqa: E712
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_0 // 0
    getbit
    intc_1 // 1
    ==
    assert
    // arc4_types/bool.py:51
    // assert ARC4Bool(False) != True  # noqa: E712
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    intc_0 // 0
    getbit
    intc_1 // 1
    !=
    assert
    // arc4_types/bool.py:52
    // assert False == ARC4Bool(False)  # noqa: E712, SIM300
    bytec_0 // 0x00
    intc_0 // 0
    intc_0 // 0
    setbit
    intc_0 // 0
    getbit
    intc_0 // 0
    ==
    assert
    // arc4_types/bool.py:53
    // assert False != ARC4Bool(True)  # noqa: E712, SIM300
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_0 // 0
    getbit
    intc_0 // 0
    !=
    assert
    // arc4_types/bool.py:55
    // return True
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_1 // ""
    bytec_1 // ""
    bytec_1 // ""
    b dynamic_array_concat_bits_block@0

dynamic_array_concat_bits_block@0:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    uncover 1
    replace2 0
    dup
    cover 3
    cover 3
    uncover 1
    pushint 7 // 7
    +
    pushint 8 // 8
    /
    dup
    cover 3
    uncover 1
    pushint 7 // 7
    +
    pushint 8 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    b dynamic_array_concat_bits_if_body@1

dynamic_array_concat_bits_if_body@1:
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    uncover 1
    concat
    frame_bury 7
    b dynamic_array_concat_bits_after_if_else@2

dynamic_array_concat_bits_after_if_else@2:
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1
    frame_dig 7
    frame_bury 4
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    b dynamic_array_concat_bits_while_body@4

dynamic_array_concat_bits_while_body@4:
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.arc4_types.bool.get_arr() -> bytes:
get_arr:
    b get_arr_block@0

get_arr_block@0:
    // arc4_types/bool.py:74
    // return DynamicArray[ARC4Bool]()
    intc_0 // 0
    itob
    extract 6 2
    retsub


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> uint64:
test_stuff:
    // arc4_types/bool.py:60-61
    // @subroutine
    // def test_stuff(self, true: ARC4Bool, false: ARC4Bool) -> bool:
    proto 2 1
    b test_stuff_block@0

test_stuff_block@0:
    // arc4_types/bool.py:62
    // assert true.native
    frame_dig -2
    intc_0 // 0
    getbit
    assert
    // arc4_types/bool.py:64
    // assert not false.native
    frame_dig -1
    intc_0 // 0
    getbit
    !
    assert
    // arc4_types/bool.py:66
    // assert true == ARC4Bool(true.native)
    frame_dig -2
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -2
    ==
    assert
    // arc4_types/bool.py:67
    // assert false == ARC4Bool(false.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -1
    ==
    assert
    // arc4_types/bool.py:69
    // return true.native
    frame_dig -2
    intc_0 // 0
    getbit
    retsub
