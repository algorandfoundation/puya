#pragma version 10

test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    // arc4_types/bool.py:13
    // self.test_stuff(ARC4Bool(True), ARC4Bool(False))
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    callsub test_stuff
    // arc4_types/bool.py:16
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/bool.py:17
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    // arc4_types/bool.py:18
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/bool.py:19
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 3
    // arc4_types/bool.py:20
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 4
    // arc4_types/bool.py:21
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 5
    // arc4_types/bool.py:22
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 6
    // arc4_types/bool.py:23
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 7
    // arc4_types/bool.py:24
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 8
    // arc4_types/bool.py:25
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 8
    // arc4_types/bool.py:26
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 10
    // arc4_types/bool.py:27
    // ARC4Bool(True),
    byte 0x00
    int 0
    int 1
    setbit
    cover 11
    // arc4_types/bool.py:15-28
    // static_boolean_array = StaticArray[ARC4Bool, t.Literal[12]](
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    // )
    byte 0x
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 1
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 2
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 3
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 4
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 5
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 6
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 7
    uncover 2
    setbit
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 9
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 10
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 11
    uncover 2
    setbit
    // arc4_types/bool.py:30
    // assert static_boolean_array.bytes == Bytes.from_hex("FFF0")
    dup
    byte 0xfff0
    ==
    assert
    // arc4_types/bool.py:32
    // assert static_boolean_array[0] == ARC4Bool(True), "Single boolean can be unpacked"
    dup
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    int 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:33
    // assert static_boolean_array[-1] == ARC4Bool(True), "Single boolean can be unpacked"
    int 12
    int 1
    -
    dup
    int 12
    <
    assert // Index access is out of bounds
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    int 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:36
    // ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    byte 0x00
    int 0
    int 1
    setbit
    byte 0x00
    int 0
    int 0
    setbit
    byte 0x00
    int 0
    int 1
    setbit
    cover 2
    // arc4_types/bool.py:35-37
    // dynamic_boolean_array = DynamicArray[ARC4Bool](
    //     ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    // )
    byte 0x0003
    uncover 2
    concat
    swap
    int 0
    getbit
    swap
    int 17
    uncover 2
    setbit
    swap
    int 0
    getbit
    swap
    int 18
    uncover 2
    setbit
    // arc4_types/bool.py:39
    // assert dynamic_boolean_array.bytes == Bytes.from_hex("0003A0")
    byte 0x0003a0
    ==
    assert
    // arc4_types/bool.py:41
    // return True
    int 1
    return


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> void:
test_stuff:
    // arc4_types/bool.py:46-47
    // @subroutine
    // def test_stuff(self, true: ARC4Bool, false: ARC4Bool) -> None:
    proto 2 0
    // arc4_types/bool.py:48
    // assert true.native
    frame_dig -2
    int 0
    getbit
    assert
    // arc4_types/bool.py:50
    // assert not false.native
    frame_dig -1
    int 0
    getbit
    !
    assert
    // arc4_types/bool.py:52
    // assert true == ARC4Bool(true.native)
    frame_dig -2
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    frame_dig -2
    swap
    ==
    assert
    // arc4_types/bool.py:53
    // assert false == ARC4Bool(false.native)
    frame_dig -1
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    frame_dig -1
    swap
    ==
    assert
    retsub
