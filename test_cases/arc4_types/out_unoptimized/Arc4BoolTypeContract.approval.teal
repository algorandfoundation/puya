#pragma version 10

test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    intcblock 0 1 2 12
    bytecblock 0x00 0x
    // arc4_types/bool.py:13
    // self.test_stuff(ARC4Bool(True), ARC4Bool(False))
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    callsub test_stuff
    pop
    // arc4_types/bool.py:15
    // False if Txn.num_app_args else True  # noqa: SIM211
    txn NumAppArgs
    intc_0 // 0
    !=
    intc_1 // 1
    intc_0 // 0
    uncover 2
    select
    // arc4_types/bool.py:14-16
    // assert ARC4Bool(
    //     False if Txn.num_app_args else True  # noqa: SIM211
    // ).native, "conditional expr"
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // conditional expr
    // arc4_types/bool.py:19
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:20
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    // arc4_types/bool.py:21
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 2
    // arc4_types/bool.py:22
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 3
    // arc4_types/bool.py:23
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 4
    // arc4_types/bool.py:24
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 5
    // arc4_types/bool.py:25
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 6
    // arc4_types/bool.py:26
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 7
    // arc4_types/bool.py:27
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 8
    // arc4_types/bool.py:28
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 8
    // arc4_types/bool.py:29
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 10
    // arc4_types/bool.py:30
    // ARC4Bool(True),
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 11
    // arc4_types/bool.py:18-31
    // static_boolean_array = StaticArray[ARC4Bool, t.Literal[12]](
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    //     ARC4Bool(True),
    // )
    bytec_1 // 0x
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_1 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 2
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 4 // 4
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 5 // 5
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 6 // 6
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 7 // 7
    uncover 2
    setbit
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    pushint 9 // 9
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 10 // 10
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 11 // 11
    uncover 2
    setbit
    bytec_1 // 0x
    swap
    concat
    // arc4_types/bool.py:33
    // assert static_boolean_array.bytes == Bytes.from_hex("FFF0")
    dup
    pushbytes 0xfff0
    ==
    assert
    // arc4_types/bool.py:35
    // assert static_boolean_array[0] == ARC4Bool(True), "Single boolean can be unpacked"
    dup
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:36
    // assert static_boolean_array[-1] == ARC4Bool(True), "Single boolean can be unpacked"
    intc_3 // 12
    intc_1 // 1
    -
    dup
    intc_3 // 12
    <
    assert // Index access is out of bounds
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    ==
    assert // Single boolean can be unpacked
    // arc4_types/bool.py:39
    // ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    cover 2
    // arc4_types/bool.py:38-40
    // dynamic_boolean_array = DynamicArray[ARC4Bool](
    //     ARC4Bool(True), ARC4Bool(False), ARC4Bool(True)
    // )
    bytec_1 // 0x
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_1 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 2
    uncover 2
    setbit
    pushbytes 0x0003
    swap
    concat
    // arc4_types/bool.py:42
    // assert dynamic_boolean_array.bytes == Bytes.from_hex("0003A0")
    pushbytes 0x0003a0
    ==
    assert
    // arc4_types/bool.py:44
    // assert ARC4Bool(True) == True  # noqa: E712
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_0 // 0
    getbit
    intc_1 // 1
    ==
    assert
    // arc4_types/bool.py:45
    // assert ARC4Bool(False) != True  # noqa: E712
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    intc_0 // 0
    getbit
    intc_1 // 1
    !=
    assert
    // arc4_types/bool.py:46
    // assert False == ARC4Bool(False)  # noqa: E712, SIM300
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    intc_0 // 0
    getbit
    intc_0 // 0
    ==
    assert
    // arc4_types/bool.py:47
    // assert False != ARC4Bool(True)  # noqa: E712, SIM300
    bytec_0 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_0 // 0
    getbit
    intc_0 // 0
    !=
    assert
    // arc4_types/bool.py:49
    // return True
    intc_1 // 1
    return


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> uint64:
test_stuff:
    // arc4_types/bool.py:54-55
    // @subroutine
    // def test_stuff(self, true: ARC4Bool, false: ARC4Bool) -> bool:
    proto 2 1
    // arc4_types/bool.py:56
    // assert true.native
    frame_dig -2
    intc_0 // 0
    getbit
    assert
    // arc4_types/bool.py:58
    // assert not false.native
    frame_dig -1
    intc_0 // 0
    getbit
    !
    assert
    // arc4_types/bool.py:60
    // assert true == ARC4Bool(true.native)
    frame_dig -2
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -2
    ==
    assert
    // arc4_types/bool.py:61
    // assert false == ARC4Bool(false.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -1
    ==
    assert
    // arc4_types/bool.py:63
    // return true.native
    frame_dig -2
    intc_0 // 0
    getbit
    retsub
