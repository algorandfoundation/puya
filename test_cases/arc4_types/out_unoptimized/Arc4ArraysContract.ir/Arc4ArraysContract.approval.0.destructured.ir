main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%2#0: bytes = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded(len+uint8[]) = (concat encoded%2#0 0x)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded%3#0
        let total#0: uint64 = 0u
        let array%array_length%0#1: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let length%0#0: uint64 = array%array_length%0#1
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L27
        let continue_looping%0#0: bool = (< item_index_internal%0#0 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let array_trimmed%0#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#0 1u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 1u) // on error: index access is out of bounds
        let uint8_item#0: Encoded(uint8) = encoded_element%0#0
        let tmp%0#0: uint64 = (btoi uint8_item#0)
        let tmp%1#0: uint64 = (+ total#0 tmp%0#0)
        let total#0: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L27
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%2#0: bool = (== total#0 3u)
        (assert tmp%2#0) // Total should be sum of dynamic_uint8_array items
        let encoded%4#0: Encoded((uint16)) = (concat 0x 0x0001)
        let as_bytes%1#0: bytes[8] = (itob 1u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%5#0: bytes = (concat len_u16%1#0 encoded%4#0)
        let encoded%6#0: Encoded(len+uint16[]) = (concat encoded%5#0 0x)
        let aliased_dynamic#0: Encoded(len+uint16[]) = encoded%6#0
        let array%array_length%1#1: uint64 = (extract_uint16 aliased_dynamic#0 0u)
        let length%1#0: uint64 = array%array_length%1#1
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L32
        let continue_looping%1#0: bool = (< item_index_internal%1#0 length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let array_trimmed%1#0: bytes = ((extract 2 0) aliased_dynamic#0)
        let bytes_offset%1#0: uint64 = (* item_index_internal%1#0 2u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%1#0 bytes_offset%1#0 2u) // on error: index access is out of bounds
        let uint16_item#0: Encoded(uint16) = encoded_element%1#0
        let tmp%3#0: uint64 = (btoi uint16_item#0)
        let tmp%4#0: uint64 = (+ total#0 tmp%3#0)
        let total#0: uint64 = tmp%4#0
        goto block@7
    block@7: // for_footer_L32
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%5#0: bool = (== total#0 4u)
        (assert tmp%5#0) // Total should now include sum of aliased_dynamic items
        let length%2#0: uint64 = (len 0x48656c6c6f)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x48656c6c6f)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%3#0: uint64 = (len 0x576f726c64)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x576f726c64)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%7#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%8#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%7#0 offset_as_uint16%1#0)
        let as_bytes%6#0: bytes[8] = (itob 2u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%9#0: bytes = (concat len_u16%2#0 encoded%8#0)
        let encoded%10#0: Encoded(len+len+utf8[][]) = (concat encoded%9#0 tail%1#0)
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = encoded%10#0
        let array%array_length%2#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let length%4#0: uint64 = array%array_length%2#1
        let tmp%6#0: bool = (== length%4#0 2u)
        (assert tmp%6#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) dynamic_string_array#0)
        let array%array_length%3#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let length%5#0: uint64 = array%array_length%3#1
        let lt%0#0: bool = (< 0u length%5#0)
        (assert lt%0#0) // index access is out of bounds
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 1u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
        let length%6#0: uint64 = (len 0x48656c6c6f)
        let as_bytes%7#0: bytes[8] = (itob length%6#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x48656c6c6f)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let tmp%7#0: bool = (== item%0#0 as_Encoded(len+utf8[])%2#0)
        (assert tmp%7#0)
        let result#0: string = ""
        let array%array_length%4#1: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let length%7#0: uint64 = array%array_length%4#1
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L39
        let continue_looping%2#0: bool = (< item_index_internal%2#0 length%7#0)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let array_head_and_tail%1#0: bytes = ((extract 2 0) dynamic_string_array#0)
        let item_offset_offset%1#0: uint64 = (* item_index_internal%2#0 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset%1#0)
        let item_length_in_bytes%1#0: uint64 = (* item_length%1#0 1u)
        let item_head_tail_length%1#0: uint64 = (+ item_length_in_bytes%1#0 2u)
        let item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 item_head_tail_length%1#0)
        let string_item#0: Encoded(len+utf8[]) = item%1#0
        let index#0: uint64 = item_index_internal%2#0
        let tmp%8#0: bool = (== index#0 0u)
        goto tmp%8#0 ? block@11 : block@12
    block@11: // if_body_L41
        let tmp%9#0: bytes = ((extract 2 0) string_item#0)
        let result#0: string = tmp%9#0
        goto block@13
    block@12: // else_body_L43
        let tmp%10#0: bytes = ((extract 2 0) string_item#0)
        let tmp%11#0: bytes = (concat " " tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#0: string = tmp%12#0
        goto block@13
    block@13: // after_if_else_L40
        goto block@14
    block@14: // for_footer_L39
        let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
        goto block@9
    block@15: // after_for_L39
        let tmp%13#0: bool = (== result#0 "Hello World")
        (assert tmp%13#0)
        let encoded%11#0: Encoded((uint32)) = (concat 0x 0x00000001)
        let encoded%12#0: Encoded((uint32,uint32)) = (concat encoded%11#0 0x0000000a)
        let encoded%13#0: Encoded((uint32,uint32,uint32)) = (concat encoded%12#0 0x000000ff)
        let encoded%14#0: Encoded((uint32,uint32,uint32,uint32)) = (concat encoded%13#0 0x00000080)
        let encoded%15#0: Encoded(uint32[4]) = (concat encoded%14#0 0x)
        let static_uint32_array#0: Encoded(uint32[4]) = encoded%15#0
        let item_index_internal%3#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L49
        let continue_looping%3#0: bool = (< item_index_internal%3#0 4u)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let bytes_offset%2#0: uint64 = (* item_index_internal%3#0 4u)
        let encoded_element%2#0: bytes = (extract3 static_uint32_array#0 bytes_offset%2#0 4u) // on error: index access is out of bounds
        let uint32_item#0: Encoded(uint32) = encoded_element%2#0
        let tmp%14#0: uint64 = (btoi uint32_item#0)
        let tmp%15#0: uint64 = (+ total#0 tmp%14#0)
        let total#0: uint64 = tmp%15#0
        goto block@18
    block@18: // for_footer_L49
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%16#0: bool = (== total#0 398u)
        (assert tmp%16#0)
        let encoded%16#0: Encoded((uint8)) = (concat 0x 0x65)
        let encoded%17#0: Encoded(uint8[1]) = (concat encoded%16#0 0x)
        let aliased_static#0: Encoded(uint8[1]) = encoded%17#0
        let bytes_offset%3#0: uint64 = (* 0u 1u)
        let encoded_element%3#0: bytes = (extract3 aliased_static#0 bytes_offset%3#0 1u) // on error: index access is out of bounds
        let tmp%17#0: uint64 = (btoi encoded_element%3#0)
        let bytes_offset%4#0: uint64 = (* 0u 1u)
        let encoded_element%4#0: bytes = (extract3 aliased_static#0 bytes_offset%4#0 1u) // on error: index access is out of bounds
        let tmp%18#0: uint64 = (btoi encoded_element%4#0)
        let tmp%19#0: uint64 = (+ tmp%17#0 tmp%18#0)
        let tmp%20#0: bool = (== tmp%19#0 202u)
        (assert tmp%20#0)
        let length%9#0: uint64 = (len 0x50696e67)
        let as_bytes%8#0: bytes[8] = (itob length%9#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x50696e67)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let length%10#0: uint64 = (len 0x506f6e67)
        let as_bytes%9#0: bytes[8] = (itob length%10#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x506f6e67)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%4#0
        let tail%2#0: bytes = (concat 0x as_Encoded(len+utf8[])%3#0)
        let data_length%2#0: uint64 = (len as_Encoded(len+utf8[])%3#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%10#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded%18#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%2#0)
        let tail%3#0: bytes = (concat tail%2#0 as_Encoded(len+utf8[])%4#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%19#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%18#0 offset_as_uint16%3#0)
        let encoded%20#0: Encoded(len+utf8[][2]) = (concat encoded%19#0 tail%3#0)
        let static_string_array#0: Encoded(len+utf8[][2]) = encoded%20#0
        let result#0: string = ""
        let item_index_internal%4#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L63
        let continue_looping%4#0: bool = (< item_index_internal%4#0 2u)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let item_offset_offset%2#0: uint64 = (* item_index_internal%4#0 2u)
        let item_offset%2#0: uint64 = (extract_uint16 static_string_array#0 item_offset_offset%2#0)
        let item_length%2#0: uint64 = (extract_uint16 static_string_array#0 item_offset%2#0)
        let item_length_in_bytes%2#0: uint64 = (* item_length%2#0 1u)
        let item_head_tail_length%2#0: uint64 = (+ item_length_in_bytes%2#0 2u)
        let item%2#0: bytes = (extract3 static_string_array#0 item_offset%2#0 item_head_tail_length%2#0)
        let string_item#0: Encoded(len+utf8[]) = item%2#0
        let index#0: uint64 = item_index_internal%4#0
        let tmp%21#0: bool = (== index#0 0u)
        goto tmp%21#0 ? block@22 : block@23
    block@22: // if_body_L65
        let tmp%22#0: bytes = ((extract 2 0) string_item#0)
        let result#0: string = tmp%22#0
        goto block@24
    block@23: // else_body_L67
        let tmp%23#0: bytes = ((extract 2 0) string_item#0)
        let tmp%24#0: bytes = (concat " " tmp%23#0)
        let tmp%25#0: bytes = (concat result#0 tmp%24#0)
        let result#0: string = tmp%25#0
        goto block@24
    block@24: // after_if_else_L64
        goto block@25
    block@25: // for_footer_L63
        let item_index_internal%4#0: uint64 = (+ item_index_internal%4#0 1u)
        goto block@20
    block@26: // after_for_L63
        let tmp%26#0: bool = (== result#0 "Ping Pong")
        (assert tmp%26#0)
        test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(0x54657374696e6720313233)
        return 1u

subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> Encoded(uint8[32]):
    block@0: // L75
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (sha3_256 commitment_args_concat#0)
        return reinterpret_Encoded(uint8[32])%0#0