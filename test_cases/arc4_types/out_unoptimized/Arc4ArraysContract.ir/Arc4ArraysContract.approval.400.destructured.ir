main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L27
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let aggregate%total_length%0#0: uint64 = (len dynamic_uint8_array#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 dynamic_uint8_array#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#0
        let uint8_item#0: Encoded(uint8) = array_item%0#0
        let tmp%0#0: uint64 = (btoi uint8_item#0)
        let tmp%1#0: uint64 = (+ total#0 tmp%0#0)
        let total#0: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L27
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%2#0: bool = (== total#0 3u)
        (assert tmp%2#0) // Total should be sum of dynamic_uint8_array items
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%1#0 0x0001)
        let aggregate%as_Encoded(len+uint16[])%0#0: Encoded(len+uint16[]) = aggregate%head%2#0
        let encoded_array%1#0: Encoded(len+uint16[]) = aggregate%as_Encoded(len+uint16[])%0#0
        let aliased_dynamic#0: Encoded(len+uint16[]) = encoded_array%1#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
        let array_length%1#0: uint64 = aggregate%array_length%1#0
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L32
        let continue_looping%1#0: bool = (< item_index_internal%1#0 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let aggregate%total_length%1#0: uint64 = (len aliased_dynamic#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 aliased_dynamic#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%1#0 2u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 2u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint16) = aggregate%encoded_element%1#0
        let uint16_item#0: Encoded(uint16) = array_item%1#0
        let tmp%3#0: uint64 = (btoi uint16_item#0)
        let tmp%4#0: uint64 = (+ total#0 tmp%3#0)
        let total#0: uint64 = tmp%4#0
        goto block@7
    block@7: // for_footer_L32
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%5#0: bool = (== total#0 4u)
        (assert tmp%5#0) // Total should now include sum of aliased_dynamic items
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "World")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "World")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%2#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%6#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 tmp%6#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%7#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let encoded_array%2#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = encoded_array%2#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let tmp%8#0: uint64 = aggregate%array_length%2#0
        let tmp%9#0: bool = (== tmp%8#0 2u)
        (assert tmp%9#0)
        let aggregate%total_length%2#0: uint64 = (len dynamic_string_array#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 dynamic_string_array#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%3#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%2#0: Encoded(len+utf8[]) = aggregate%item%0#0
        let aggregate%length%2#0: uint64 = (len "Hello")
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%10#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let tmp%11#0: bool = (== array_item%2#0 tmp%10#0)
        (assert tmp%11#0)
        let result#0: string = ""
        let aggregate%array_length%4#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let array_length%2#0: uint64 = aggregate%array_length%4#0
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L39
        let continue_looping%2#0: bool = (< item_index_internal%2#0 array_length%2#0)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let aggregate%total_length%3#0: uint64 = (len dynamic_string_array#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 dynamic_string_array#0 2u aggregate%total_length%3#0)
        let aggregate%item_offset_offset%1#0: uint64 = (* item_index_internal%2#0 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%item_length%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0)
        let aggregate%item_length_in_bytes%1#0: uint64 = (* aggregate%item_length%1#0 1u)
        let aggregate%item_head_tail_length%1#0: uint64 = (+ aggregate%item_length_in_bytes%1#0 2u)
        let aggregate%item%1#0: bytes = (extract3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%item_head_tail_length%1#0)
        let array_item%3#0: Encoded(len+utf8[]) = aggregate%item%1#0
        let string_item#0: Encoded(len+utf8[]) = array_item%3#0
        let index#0: uint64 = item_index_internal%2#0
        let tmp%12#0: bool = (== index#0 0u)
        goto tmp%12#0 ? block@11 : block@12
    block@11: // if_body_L41
        let tmp%13#0: string = ((extract 2 0) string_item#0)
        let result#0: string = tmp%13#0
        goto block@13
    block@12: // else_body_L43
        let tmp%14#0: string = ((extract 2 0) string_item#0)
        let tmp%15#0: bytes = (concat " " tmp%14#0)
        let tmp%16#0: bytes = (concat result#0 tmp%15#0)
        let result#0: string = tmp%16#0
        goto block@13
    block@13: // after_if_else_L40
        goto block@14
    block@14: // for_footer_L39
        let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
        goto block@9
    block@15: // after_for_L39
        let tmp%17#0: bool = (== result#0 "Hello World")
        (assert tmp%17#0)
        let aggregate%head%5#0: bytes = (concat 0x 0x00000001)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x0000000a)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x000000ff)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x00000080)
        let aggregate%as_Encoded(uint32[4])%0#0: Encoded(uint32[4]) = aggregate%head%8#0
        let encoded_array%3#0: Encoded(uint32[4]) = aggregate%as_Encoded(uint32[4])%0#0
        let static_uint32_array#0: Encoded(uint32[4]) = encoded_array%3#0
        let item_index_internal%3#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L49
        let continue_looping%3#0: bool = (< item_index_internal%3#0 4u)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let aggregate%bytes_offset%2#0: uint64 = (* item_index_internal%3#0 4u)
        let aggregate%encoded_element%2#0: bytes = (extract3 static_uint32_array#0 aggregate%bytes_offset%2#0 4u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint32) = aggregate%encoded_element%2#0
        let uint32_item#0: Encoded(uint32) = array_item%4#0
        let tmp%18#0: uint64 = (btoi uint32_item#0)
        let tmp%19#0: uint64 = (+ total#0 tmp%18#0)
        let total#0: uint64 = tmp%19#0
        goto block@18
    block@18: // for_footer_L49
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%20#0: bool = (== total#0 398u)
        (assert tmp%20#0)
        let aggregate%head%9#0: bytes = (concat 0x 0x65)
        let aggregate%as_Encoded(uint8[1])%0#0: Encoded(uint8[1]) = aggregate%head%9#0
        let encoded_array%4#0: Encoded(uint8[1]) = aggregate%as_Encoded(uint8[1])%0#0
        let aliased_static#0: Encoded(uint8[1]) = encoded_array%4#0
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aliased_static#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint8) = aggregate%encoded_element%3#0
        let tmp%21#0: uint64 = (btoi array_item%5#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aliased_static#0 aggregate%bytes_offset%4#0 1u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8) = aggregate%encoded_element%4#0
        let tmp%22#0: uint64 = (btoi array_item%6#0)
        let tmp%23#0: uint64 = (+ tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== tmp%23#0 202u)
        (assert tmp%24#0)
        let aggregate%length%3#0: uint64 = (len "Ping")
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Ping")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%25#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let aggregate%length%4#0: uint64 = (len "Pong")
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 "Pong")
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%26#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        let aggregate%as_bytes%10#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%10#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%25#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%11#0 tmp%25#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%26#0)
        let aggregate%as_Encoded((len+utf8[])[2])%0#0: Encoded((len+utf8[])[2]) = aggregate%concat%3#0
        let encoded_array%5#0: Encoded((len+utf8[])[2]) = aggregate%as_Encoded((len+utf8[])[2])%0#0
        let static_string_array#0: Encoded((len+utf8[])[2]) = encoded_array%5#0
        let result#0: string = ""
        let item_index_internal%4#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L63
        let continue_looping%4#0: bool = (< item_index_internal%4#0 2u)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let aggregate%item_offset_offset%2#0: uint64 = (* item_index_internal%4#0 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset_offset%2#0)
        let aggregate%item_length%2#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset%2#0)
        let aggregate%item_length_in_bytes%2#0: uint64 = (* aggregate%item_length%2#0 1u)
        let aggregate%item_head_tail_length%2#0: uint64 = (+ aggregate%item_length_in_bytes%2#0 2u)
        let aggregate%item%2#0: bytes = (extract3 static_string_array#0 aggregate%item_offset%2#0 aggregate%item_head_tail_length%2#0)
        let array_item%7#0: Encoded(len+utf8[]) = aggregate%item%2#0
        let string_item#0: Encoded(len+utf8[]) = array_item%7#0
        let index#0: uint64 = item_index_internal%4#0
        let tmp%27#0: bool = (== index#0 0u)
        goto tmp%27#0 ? block@22 : block@23
    block@22: // if_body_L65
        let tmp%28#0: string = ((extract 2 0) string_item#0)
        let result#0: string = tmp%28#0
        goto block@24
    block@23: // else_body_L67
        let tmp%29#0: string = ((extract 2 0) string_item#0)
        let tmp%30#0: bytes = (concat " " tmp%29#0)
        let tmp%31#0: bytes = (concat result#0 tmp%30#0)
        let result#0: string = tmp%31#0
        goto block@24
    block@24: // after_if_else_L64
        goto block@25
    block@25: // for_footer_L63
        let item_index_internal%4#0: uint64 = (+ item_index_internal%4#0 1u)
        goto block@20
    block@26: // after_for_L63
        let tmp%32#0: bool = (== result#0 "Ping Pong")
        (assert tmp%32#0)
        let aggregate%length%5#0: uint64 = (len "Ping")
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 "Ping")
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%33#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let aggregate%lt%1#0: bool = (< 1u 2u)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%lt%2#0: bool = (< 1u 2u)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(static_string_array#0, tmp%33#0, 1u, 2u)
        let updated_array%0#0: Encoded((len+utf8[])[2]) = aggregate%updated_array%0#0
        let static_string_array#0: Encoded((len+utf8[])[2]) = updated_array%0#0
        let result#0: string = ""
        let item_index_internal%5#0: uint64 = 0u
        goto block@27
    block@27: // for_header_L73
        let continue_looping%5#0: bool = (< item_index_internal%5#0 2u)
        goto continue_looping%5#0 ? block@28 : block@30
    block@28: // for_body_L74
        let aggregate%item_offset_offset%4#0: uint64 = (* item_index_internal%5#0 2u)
        let aggregate%item_offset%4#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset_offset%4#0)
        let aggregate%item_length%4#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset%4#0)
        let aggregate%item_length_in_bytes%4#0: uint64 = (* aggregate%item_length%4#0 1u)
        let aggregate%item_head_tail_length%4#0: uint64 = (+ aggregate%item_length_in_bytes%4#0 2u)
        let aggregate%item%4#0: bytes = (extract3 static_string_array#0 aggregate%item_offset%4#0 aggregate%item_head_tail_length%4#0)
        let array_item%8#0: Encoded(len+utf8[]) = aggregate%item%4#0
        let string_item#0: Encoded(len+utf8[]) = array_item%8#0
        let tmp%34#0: string = ((extract 2 0) string_item#0)
        let tmp%35#0: bytes = (concat tmp%34#0 " ")
        let tmp%36#0: bytes = (concat result#0 tmp%35#0)
        let result#0: string = tmp%36#0
        goto block@29
    block@29: // for_footer_L73
        let item_index_internal%5#0: uint64 = (+ item_index_internal%5#0 1u)
        goto block@27
    block@30: // after_for_L73
        let tmp%37#0: bool = (== result#0 "Ping Ping ")
        (assert tmp%37#0)
        test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(0x54657374696e6720313233)
        return 1u

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        let value_internal%0#0: uint64 = head_offset#0
        goto block@1
    block@1: // for_header_L342
        let continue_looping%0#0: bool = (< value_internal%0#0 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let head_offset#0: uint64 = value_internal%0#0
        let tmp%6#0: bytes = (itob tail_offset#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let array_head_and_tail#0: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#0 tail_offset#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#0 tmp%10#0)
        let tail_offset#0: uint64 = tmp%11#0
        goto block@3
    block@3: // for_footer_L342
        let value_internal%0#0: uint64 = (+ value_internal%0#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#0

subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> Encoded(uint8[32]):
    block@0: // L81
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (sha3_256 commitment_args_concat#0)
        return reinterpret_Encoded(uint8[32])%0#0