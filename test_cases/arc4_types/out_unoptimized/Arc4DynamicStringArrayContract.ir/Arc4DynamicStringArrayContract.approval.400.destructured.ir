main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L4
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@10
    block@5: // call_NoOp_L4
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "xyz()string[]" => block@6, method "xyz_raw()string[]" => block@7, * => block@8}
    block@6: // xyz_route_L5
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]()
        goto block@9
    block@7: // xyz_raw_route_L13
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]()
        goto block@9
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@13
    block@10: // create_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@11}
    block@11: // switch_case_default_L4
        goto block@12
    block@12: // switch_case_next_L4
        goto block@13
    block@13: // after_if_else_L4
        goto block@14
    block@14: // switch_case_next_L4
        goto block@15
    block@15: // switch_case_next_L4
        goto block@20
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@17, * => block@18}
    block@17: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create_L1
        exit 1u
    block@18: // switch_case_default_L4
        goto block@19
    block@19: // switch_case_next_L4
        goto block@20
    block@20: // after_if_else_L4
        exit 0u
    block@21: // after_inlined_test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]() -> void:
    block@0: // L5
        let tmp%0#0: Encoded(len+(len+utf8[])[]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]() -> void:
    block@0: // L13
        let tmp%0#0: Encoded(len+(len+utf8[])[]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz() -> Encoded(len+(len+utf8[])[]):
    block@0: // L5
        let aggregate%length%0#0: uint64 = (len "X")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "X")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "Y")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Y")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%length%2#0: uint64 = (len "Z")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Z")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 6u aggregate%data_length%0#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%1#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 tmp%2#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%2#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        return encoded_array%0#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw() -> Encoded(len+(len+utf8[])[]):
    block@0: // L13
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x58)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%len_u16%1#0 0x59)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%2#0 0x5a)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%head%2#0
        let encoded_array%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%3#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 6u aggregate%data_length%0#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len encoded_array%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%5#0 encoded_array%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 encoded_array%1#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 encoded_array%2#0)
        let aggregate%as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = aggregate%concat%2#0
        let encoded_array%3#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%0#0
        let raw#0: Encoded(len+(len+uint8[])[]) = encoded_array%3#0
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = raw#0
        return reinterpret_Encoded(len+(len+utf8[])[])%0#0