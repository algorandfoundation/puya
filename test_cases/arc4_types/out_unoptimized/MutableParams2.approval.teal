#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3
    bytecblock 0x01 0x04 0x 0x00
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // arc4_types/mutable_params2.py:4
    // class MutableParams2(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6
    b main_abi_routing@2

main_abi_routing@2:
    // arc4_types/mutable_params2.py:4
    // class MutableParams2(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x6ac4a557 // method "test_array_rebinding()void"
    uncover 1
    match main_test_array_rebinding_route@3
    b main_switch_case_default@4

main_switch_case_default@4:
    b main_switch_case_next@5

main_switch_case_next@5:
    b main_after_if_else@10

main_after_if_else@10:
    // arc4_types/mutable_params2.py:4
    // class MutableParams2(arc4.ARC4Contract):
    err

main_test_array_rebinding_route@3:
    // arc4_types/mutable_params2.py:5
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_array_rebinding
    b main_switch_case_next@5

main_bare_routing@6:
    // arc4_types/mutable_params2.py:4
    // class MutableParams2(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algopy_default_create@7
    b main_switch_case_default@8

main_switch_case_default@8:
    b main_switch_case_next@9

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    b main_block@12

main_block@12:
    b main_after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create@13

main_after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create@13:
    intc_1 // 1
    return


// test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]() -> void:
test_array_rebinding:
    b test_array_rebinding_block@0

test_array_rebinding_block@0:
    // arc4_types/mutable_params2.py:5
    // @arc4.abimethod()
    callsub test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding
    intc_1 // 1
    return


// test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding() -> void:
test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding:
    b test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding_block@0

test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding_block@0:
    // arc4_types/mutable_params2.py:7
    // a = arc4.DynamicBytes(0)
    intc_1 // 1
    itob
    extract 6 2
    bytec_3 // 0x00
    concat
    // arc4_types/mutable_params2.py:8
    // self.maybe_modify_array(a, assign_local=True)
    intc_1 // 1
    callsub maybe_modify_array
    // arc4_types/mutable_params2.py:9
    // assert a == arc4.DynamicBytes(0, 1)
    pushint 2 // 2
    itob
    extract 6 2
    bytec_3 // 0x00
    concat
    bytec_0 // 0x01
    concat
    ==
    assert
    // arc4_types/mutable_params2.py:11
    // a = arc4.DynamicBytes(1)
    intc_1 // 1
    itob
    extract 6 2
    bytec_0 // 0x01
    concat
    // arc4_types/mutable_params2.py:12
    // self.maybe_modify_array(a, assign_local=False)
    intc_0 // 0
    callsub maybe_modify_array
    // arc4_types/mutable_params2.py:13
    // assert a == arc4.DynamicBytes(1, 42, 4)
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x01
    concat
    pushbytes 0x2a
    concat
    bytec_1 // 0x04
    concat
    ==
    assert
    retsub


// test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: bytes, assign_local: uint64) -> bytes:
maybe_modify_array:
    // arc4_types/mutable_params2.py:15-16
    // @subroutine
    // def maybe_modify_array(self, a: arc4.DynamicBytes, *, assign_local: bool) -> None:  # v0
    proto 2 1
    b maybe_modify_array_block@0

maybe_modify_array_block@0:
    intc_1 // 1
    frame_dig -2
    // arc4_types/mutable_params2.py:17
    // if assign_local:
    frame_dig -1
    bz maybe_modify_array_else_body@10
    b maybe_modify_array_if_body@1

maybe_modify_array_if_body@1:
    // arc4_types/mutable_params2.py:18
    // a.append(arc4.Byte(1))  # v1: modify out
    bytec_2 // 0x
    bytec_0 // 0x01
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    intc_1 // 1
    bz maybe_modify_array_after_if_else@3
    b maybe_modify_array_if_body@2

maybe_modify_array_if_body@2:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@3

maybe_modify_array_after_if_else@3:
    // arc4_types/mutable_params2.py:19
    // a = arc4.DynamicBytes(1, 2, 3)  # v2: BOUNDARY
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x01
    concat
    pushbytes 0x02
    concat
    pushbytes 0x03
    concat
    frame_bury -2
    intc_0 // 0
    bz maybe_modify_array_after_if_else@5
    b maybe_modify_array_if_body@4

maybe_modify_array_if_body@4:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@5

maybe_modify_array_after_if_else@5:
    // arc4_types/mutable_params2.py:20
    // a.append(arc4.Byte(4))  # v3: local only
    bytec_2 // 0x
    bytec_1 // 0x04
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    intc_0 // 0
    bz maybe_modify_array_after_if_else@7
    b maybe_modify_array_if_body@6

maybe_modify_array_if_body@6:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@7

maybe_modify_array_after_if_else@7:
    // arc4_types/mutable_params2.py:21
    // a = arc4.DynamicBytes(1, 2, 4)  # v4: local only
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x01
    concat
    pushbytes 0x02
    concat
    bytec_1 // 0x04
    concat
    intc_0 // 0
    frame_bury 0
    frame_bury -2
    intc_0 // 0
    bz maybe_modify_array_after_if_else@9
    b maybe_modify_array_if_body@8

maybe_modify_array_if_body@8:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@9

maybe_modify_array_after_if_else@9:
    b maybe_modify_array_after_if_else@13

maybe_modify_array_after_if_else@13:
    // arc4_types/mutable_params2.py:25
    // a.append(arc4.Byte(4))  # v6: modify out IF not b ELSE local only
    bytec_2 // 0x
    bytec_1 // 0x04
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    frame_dig 0
    bz maybe_modify_array_after_if_else@15
    b maybe_modify_array_if_body@14

maybe_modify_array_if_body@14:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@15

maybe_modify_array_after_if_else@15:
    frame_dig 1
    frame_bury 0
    retsub

maybe_modify_array_else_body@10:
    // arc4_types/mutable_params2.py:23
    // a.append(arc4.Byte(42))  # v5: modify out
    bytec_2 // 0x
    pushbytes 0x2a
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    intc_1 // 1
    bz maybe_modify_array_after_if_else@12
    b maybe_modify_array_if_body@11

maybe_modify_array_if_body@11:
    frame_dig -2
    frame_bury 1
    b maybe_modify_array_after_if_else@12

maybe_modify_array_after_if_else@12:
    b maybe_modify_array_after_if_else@13
