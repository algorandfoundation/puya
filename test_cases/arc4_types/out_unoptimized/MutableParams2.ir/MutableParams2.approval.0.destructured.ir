main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array_rebinding()void" => block@3, * => block@4}
    block@3: // test_array_rebinding_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding()
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0
        goto block@11
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@10
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create_L1
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0
        goto block@11
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@10
    block@10: // after_if_else_L4
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding() -> void:
    block@0: // L5
        let result%0#0: bytes = (concat 0x 0x00)
        let array_data%0#0: bytes = (concat 0x0001 result%0#0)
        let a#0: bytes = array_data%0#0
        let maybe_modify_array%0#0: bytes = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 1u)
        let a#0: bytes = maybe_modify_array%0#0
        let result%1#0: bytes = (concat 0x 0x00)
        let result%2#0: bytes = (concat result%1#0 0x01)
        let array_data%1#0: bytes = (concat 0x0002 result%2#0)
        let tmp%0#0: bool = (== a#0 array_data%1#0)
        (assert tmp%0#0)
        let result%3#0: bytes = (concat 0x 0x01)
        let array_data%2#0: bytes = (concat 0x0001 result%3#0)
        let a#0: bytes = array_data%2#0
        let maybe_modify_array%1#0: bytes = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 0u)
        let a#0: bytes = maybe_modify_array%1#0
        let result%4#0: bytes = (concat 0x 0x01)
        let result%5#0: bytes = (concat result%4#0 0x2a)
        let result%6#0: bytes = (concat result%5#0 0x04)
        let array_data%3#0: bytes = (concat 0x0003 result%6#0)
        let tmp%1#0: bool = (== a#0 array_data%3#0)
        (assert tmp%1#0)
        return 

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: bytes, assign_local: bool) -> bytes:
    block@0: // L15
        let a%is_original#0: bool = 1u
        let a%out#0: bytes = a#0
        goto assign_local#0 ? block@1 : block@10
    block@1: // if_body_L18
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) a#0)
        let encoded%0#0: bytes[1][] = (concat 0x 0x01)
        let data%0#0: bytes[1][] = (concat 0x encoded%0#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let a#0: bytes = concat_result%0#0
        goto 1u ? block@2 : block@3
    block@2: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@3
    block@3: // after_if_else_L1
        let result%0#0: bytes = (concat 0x 0x01)
        let result%1#0: bytes = (concat result%0#0 0x02)
        let result%2#0: bytes = (concat result%1#0 0x03)
        let array_data%0#0: bytes = (concat 0x0003 result%2#0)
        let a#0: bytes = array_data%0#0
        goto 0u ? block@4 : block@5
    block@4: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@5
    block@5: // after_if_else_L1
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) a#0)
        let encoded%1#0: bytes[1][] = (concat 0x 0x04)
        let data%1#0: bytes[1][] = (concat 0x encoded%1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 data%1#0)
        let len_%1#0: uint64 = (len concatenated%1#0)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let a#0: bytes = concat_result%1#0
        goto 0u ? block@6 : block@7
    block@6: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@7
    block@7: // after_if_else_L1
        let result%3#0: bytes = (concat 0x 0x01)
        let result%4#0: bytes = (concat result%3#0 0x02)
        let result%5#0: bytes = (concat result%4#0 0x04)
        let array_data%1#0: bytes = (concat 0x0003 result%5#0)
        let a%is_original#0: bool = 0u
        let a#0: bytes = array_data%1#0
        goto 0u ? block@8 : block@9
    block@8: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@9
    block@9: // after_if_else_L1
        goto block@13
    block@10: // else_body_L23
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) a#0)
        let encoded%2#0: bytes[1][] = (concat 0x 0x2a)
        let data%2#0: bytes[1][] = (concat 0x encoded%2#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 data%2#0)
        let len_%2#0: uint64 = (len concatenated%2#0)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let a#0: bytes = concat_result%2#0
        goto 1u ? block@11 : block@12
    block@11: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@12
    block@12: // after_if_else_L1
        goto block@13
    block@13: // after_if_else_L17
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) a#0)
        let encoded%3#0: bytes[1][] = (concat 0x 0x04)
        let data%3#0: bytes[1][] = (concat 0x encoded%3#0)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%3#0 data%3#0)
        let len_%3#0: uint64 = (len concatenated%3#0)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let a#0: bytes = concat_result%3#0
        goto a%is_original#0 ? block@14 : block@15
    block@14: // if_body_L1
        let a%out#0: bytes = a#0
        goto block@15
    block@15: // after_if_else_L1
        return a%out#0