main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@6, 2u => block@9, 3u => block@10, 4u => block@11, 5u => block@12, 6u => block@13, 7u => block@14, 8u => block@15, 9u => block@16, 10u => block@17, 11u => block@18, * => block@19}
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_array_rebinding()void" => block@3, * => block@4}
    block@3: // test_array_rebinding_route_L5
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]()
        goto block@5
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // __algopy_default_create_L1
        goto block@21
    block@21: // L1
        goto block@22
    block@22: // after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create_L1
        exit 1u
    block@8: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@9: // switch_case_2_L4
        goto block@19
    block@10: // switch_case_3_L4
        goto block@19
    block@11: // switch_case_4_L4
        goto block@19
    block@12: // switch_case_5_L4
        goto block@19
    block@13: // switch_case_6_L4
        goto block@19
    block@14: // switch_case_7_L4
        goto block@19
    block@15: // switch_case_8_L4
        goto block@19
    block@16: // switch_case_9_L4
        goto block@19
    block@17: // switch_case_10_L4
        goto block@19
    block@18: // switch_case_11_L4
        goto block@19
    block@19: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@20: // after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]() -> void:
    block@0: // L5
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding()
        exit 1u

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding() -> void:
    block@0: // L5
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x00)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let a#0: Encoded(len+uint8[]) = encoded_array%0#0
        let maybe_modify_array%0#0: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 1u)
        let a#0: Encoded(len+uint8[]) = maybe_modify_array%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%len_u16%1#0 0x00)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x01)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%2#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%0#0: bool = (== a#0 encoded_array%1#0)
        (assert tmp%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%2#0 0x01)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%head%3#0
        let encoded_array%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let a#0: Encoded(len+uint8[]) = encoded_array%2#0
        let maybe_modify_array%1#0: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 0u)
        let a#0: Encoded(len+uint8[]) = maybe_modify_array%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%3#0 0x01)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x2a)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x04)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%head%6#0
        let encoded_array%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let tmp%1#0: bool = (== a#0 encoded_array%3#0)
        (assert tmp%1#0)
        return 

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: Encoded(len+uint8[]), assign_local: bool) -> Encoded(len+uint8[]):
    block@0: // L15
        let a%is_original#0: bool = 1u
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto assign_local#0 ? block@1 : block@10
    block@1: // if_body_L18
        let aggregate%head%0#0: bytes = (concat 0x 0x01)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let concat%0#0: Encoded(len+uint8[]) = (concat a#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 a#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let a#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        goto 1u ? block@2 : block@3
    block@2: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@3
    block@3: // after_if_else_L1
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x02)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x03)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let a#0: Encoded(len+uint8[]) = encoded_array%0#0
        goto 0u ? block@4 : block@5
    block@4: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@5
    block@5: // after_if_else_L1
        let aggregate%head%4#0: bytes = (concat 0x 0x04)
        let aggregate%as_Encoded(uint8[])%1#0: Encoded(uint8[]) = aggregate%head%4#0
        let tmp%1#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%1#0
        let concat%1#0: Encoded(len+uint8[]) = (concat a#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 a#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let a#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        goto 0u ? block@6 : block@7
    block@6: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@7
    block@7: // after_if_else_L1
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%len_u16%1#0 0x01)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x02)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x04)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%7#0
        let encoded_array%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let a%is_original#0: bool = 0u
        let a#0: Encoded(len+uint8[]) = encoded_array%1#0
        goto 0u ? block@8 : block@9
    block@8: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@9
    block@9: // after_if_else_L1
        goto block@13
    block@10: // else_body_L23
        let aggregate%head%8#0: bytes = (concat 0x 0x2a)
        let aggregate%as_Encoded(uint8[])%2#0: Encoded(uint8[]) = aggregate%head%8#0
        let tmp%2#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%2#0
        let concat%2#0: Encoded(len+uint8[]) = (concat a#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 a#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = replace%2#0
        let a#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        goto 1u ? block@11 : block@12
    block@11: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@12
    block@12: // after_if_else_L1
        goto block@13
    block@13: // after_if_else_L17
        let aggregate%head%9#0: bytes = (concat 0x 0x04)
        let aggregate%as_Encoded(uint8[])%3#0: Encoded(uint8[]) = aggregate%head%9#0
        let tmp%3#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%3#0
        let concat%3#0: Encoded(len+uint8[]) = (concat a#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 a#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = (replace3 concat%3#0 0u as_u16_bytes%3#0)
        let as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = replace%3#0
        let a#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%3#0
        goto a%is_original#0 ? block@14 : block@15
    block@14: // if_body_L1
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto block@15
    block@15: // after_if_else_L1
        return a%out#0