contract test_cases.arc4_types.array.Arc4ArraysContract:
    program approval:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> bool:
            block@0: // L24
                let array_data%0#1: bytes = (concat 0x0002 0x01)
                let array_data%0#1: bytes = (concat array_data%0#1 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#1
                let total#0: uint64 = 0u
                let array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
                let array_value%0#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L27
                let item_index%0#0: uint64 = (* item_index_internal%0#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%0#0 item_index%0#0 1u)
                let tmp%0#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%0#0)
                goto block@3
            block@3: // for_footer_L27
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L27
                let tmp%1#0: bool = (== total#0 3u)
                (assert tmp%1#0) // Total should be sum of dynamic_uint8_array items
                let array_data%1#1: bytes = (concat 0x0001 0x0001)
                let aliased_dynamic#0: bytes = array_data%1#1
                let array_length%1#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
                let array_value%1#0: bytes = ((extract 2 0) aliased_dynamic#0)
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L32
                let continue_looping%1#0: bool = (< item_index_internal%1#0 array_length%1#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L32
                let item_index%1#0: uint64 = (* item_index_internal%1#0 2u)
                let uint16_item#0: bytes = (extract3 array_value%1#0 item_index%1#0 2u)
                let tmp%2#0: uint64 = (btoi uint16_item#0)
                let total#0: uint64 = (+ total#0 tmp%2#0)
                goto block@7
            block@7: // for_footer_L32
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@5
            block@8: // after_for_L32
                let tmp%3#0: bool = (== total#0 4u)
                (assert tmp%3#0) // Total should now include sum of aliased_dynamic items
                let length%0#0: uint64 = (len "Hello")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%4#0: bytes = (concat value_as_uint16%0#0 "Hello")
                let length%1#0: uint64 = (len "World")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%5#0: bytes = (concat value_as_uint16%1#0 "World")
                let value_as_bytes%2#0: bytes = (itob 4u)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let array_data%2#1: bytes = (concat 0x0002 value_as_uint16%2#0)
                let element_length%0#0: uint64 = (len tmp%4#0)
                let next_offset%0#1: uint64 = (+ 4u element_length%0#0)
                let value_as_bytes%3#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let array_data%2#1: bytes = (concat array_data%2#1 value_as_uint16%3#0)
                let array_data%2#1: bytes = (concat array_data%2#1 tmp%4#0)
                let array_data%2#1: bytes = (concat array_data%2#1 tmp%5#0)
                let dynamic_string_array#0: bytes = array_data%2#1
                let tmp%6#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let tmp%7#0: bool = (== tmp%6#0 2u)
                (assert tmp%7#0)
                let array_length%2#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let index_is_in_bounds%0#0: bool = (< 0u array_length%2#0)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let array_data_sans_header%0#0: bytes = ((extract 2 0) dynamic_string_array#0)
                let item_index_index%0#0: uint64 = (* 0u 2u)
                let item_index%2#0: uint64 = (extract_uint16 array_data_sans_header%0#0 item_index_index%0#0)
                let item_length%0#0: uint64 = (extract_uint16 array_data_sans_header%0#0 item_index%2#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%8#0: bytes = (extract3 array_data_sans_header%0#0 item_index%2#0 item_length_plus_2%0#0)
                let length%2#0: uint64 = (len "Hello")
                let value_as_bytes%4#0: bytes = (itob length%2#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%9#0: bytes = (concat value_as_uint16%4#0 "Hello")
                let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
                (assert tmp%10#0)
                let result#0: bytes = ""
                let array_length%3#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let array_value%2#0: bytes = ((extract 2 0) dynamic_string_array#0)
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L39
                let continue_looping%2#0: bool = (< item_index_internal%2#0 array_length%3#0)
                goto continue_looping%2#0 ? block@10 : block@15
            block@10: // for_body_L39
                let item_index_index%1#0: uint64 = (* item_index_internal%2#0 2u)
                let item_index%3#0: uint64 = (extract_uint16 array_value%2#0 item_index_index%1#0)
                let item_length%1#0: uint64 = (extract_uint16 array_value%2#0 item_index%3#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let string_item#0: bytes = (extract3 array_value%2#0 item_index%3#0 item_length_plus_2%1#0)
                let index#0: uint64 = item_index_internal%2#0
                let tmp%11#0: bool = (== index#0 0u)
                goto tmp%11#0 ? block@11 : block@12
            block@11: // if_body_L40
                let result#0: bytes = ((extract 2 0) string_item#0)
                goto block@13
            block@12: // else_body_L40
                let tmp%12#0: bytes = ((extract 2 0) string_item#0)
                let tmp%13#0: bytes = (concat " " tmp%12#0)
                let result#0: bytes = (concat result#0 tmp%13#0)
                goto block@13
            block@13: // after_if_else_L40
                goto block@14
            block@14: // for_footer_L39
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                goto block@9
            block@15: // after_for_L39
                let tmp%14#0: bool = (== result#0 "Hello World")
                (assert tmp%14#0)
                let array_data%3#1: bytes = (concat 0x 0x00000001)
                let array_data%3#1: bytes = (concat array_data%3#1 0x0000000a)
                let array_data%3#1: bytes = (concat array_data%3#1 0x000000ff)
                let array_data%3#1: bytes = (concat array_data%3#1 0x00000080)
                let static_uint32_array#0: bytes = array_data%3#1
                let item_index_internal%3#0: uint64 = 0u
                goto block@16
            block@16: // for_header_L49
                let continue_looping%3#0: bool = (< item_index_internal%3#0 4u)
                goto continue_looping%3#0 ? block@17 : block@19
            block@17: // for_body_L49
                let item_index%4#0: uint64 = (* item_index_internal%3#0 4u)
                let uint32_item#0: bytes = (extract3 static_uint32_array#0 item_index%4#0 4u)
                let tmp%15#0: uint64 = (btoi uint32_item#0)
                let total#0: uint64 = (+ total#0 tmp%15#0)
                goto block@18
            block@18: // for_footer_L49
                let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
                goto block@16
            block@19: // after_for_L49
                let tmp%16#0: bool = (== total#0 398u)
                (assert tmp%16#0)
                let array_data%4#1: bytes = (concat 0x 0x65)
                let aliased_static#0: bytes = array_data%4#1
                let item_index%5#0: uint64 = (* 0u 1u)
                let tmp%17#0: bytes = (extract3 aliased_static#0 item_index%5#0 1u)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let index_is_in_bounds%1#0: bool = (< 0u 1u)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let item_index%6#0: uint64 = (* 0u 1u)
                let tmp%19#0: bytes = (extract3 aliased_static#0 item_index%6#0 1u)
                let tmp%20#0: uint64 = (btoi tmp%19#0)
                let tmp%21#0: uint64 = (+ tmp%18#0 tmp%20#0)
                let tmp%22#0: bool = (== tmp%21#0 202u)
                (assert tmp%22#0)
                let length%3#0: uint64 = (len "Ping")
                let value_as_bytes%5#0: bytes = (itob length%3#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let tmp%23#0: bytes = (concat value_as_uint16%5#0 "Ping")
                let length%4#0: uint64 = (len "Pong")
                let value_as_bytes%6#0: bytes = (itob length%4#0)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let tmp%24#0: bytes = (concat value_as_uint16%6#0 "Pong")
                let value_as_bytes%7#0: bytes = (itob 4u)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let array_data%5#1: bytes = (concat 0x value_as_uint16%7#0)
                let element_length%2#0: uint64 = (len tmp%23#0)
                let next_offset%1#1: uint64 = (+ 4u element_length%2#0)
                let value_as_bytes%8#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let array_data%5#1: bytes = (concat array_data%5#1 value_as_uint16%8#0)
                let array_data%5#1: bytes = (concat array_data%5#1 tmp%23#0)
                let array_data%5#1: bytes = (concat array_data%5#1 tmp%24#0)
                let static_string_array#0: bytes = array_data%5#1
                let result#0: bytes = ""
                let item_index_internal%4#0: uint64 = 0u
                goto block@20
            block@20: // for_header_L63
                let continue_looping%4#0: bool = (< item_index_internal%4#0 2u)
                goto continue_looping%4#0 ? block@21 : block@26
            block@21: // for_body_L63
                let item_index_index%2#0: uint64 = (* item_index_internal%4#0 2u)
                let item_index%7#0: uint64 = (extract_uint16 static_string_array#0 item_index_index%2#0)
                let item_length%2#0: uint64 = (extract_uint16 static_string_array#0 item_index%7#0)
                let item_length_plus_2%2#0: uint64 = (+ item_length%2#0 2u)
                let string_item#0: bytes = (extract3 static_string_array#0 item_index%7#0 item_length_plus_2%2#0)
                let index#0: uint64 = item_index_internal%4#0
                let tmp%25#0: bool = (== index#0 0u)
                goto tmp%25#0 ? block@22 : block@23
            block@22: // if_body_L64
                let result#0: bytes = ((extract 2 0) string_item#0)
                goto block@24
            block@23: // else_body_L64
                let tmp%26#0: bytes = ((extract 2 0) string_item#0)
                let tmp%27#0: bytes = (concat " " tmp%26#0)
                let result#0: bytes = (concat result#0 tmp%27#0)
                goto block@24
            block@24: // after_if_else_L64
                goto block@25
            block@25: // for_footer_L63
                let item_index_internal%4#0: uint64 = (+ item_index_internal%4#0 1u)
                goto block@20
            block@26: // after_for_L63
                let tmp%28#0: bool = (== result#0 "Ping Pong")
                (assert tmp%28#0)
                test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array("Testing 123")
                return 1u
        
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
            block@0: // L75
                let tmp%0#0: bytes = (sha3_256 commitment_args_concat#0)
                return tmp%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.clear_state_program() -> bool:
            block@0: // L79
                return 1u