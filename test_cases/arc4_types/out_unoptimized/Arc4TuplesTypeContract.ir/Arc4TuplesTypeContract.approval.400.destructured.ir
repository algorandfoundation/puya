main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%head%0#0: bytes = (concat 0x 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 7u aggregate%data_length%0#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 0xff)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%1#0)
        let aggregate%as_Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)%0#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = aggregate%concat%1#0
        let tmp%2#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = aggregate%as_Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)%0#0
        let my_tuple#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = tmp%2#0
        let tmp%3#0: bool = (== my_tuple#0 0x01020007000eff000568656c6c6f0005776f726c64)
        (assert tmp%3#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%5#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%6#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%7#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%4#0: Encoded(bool8) = aggregate%encoded_bool%4#0
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#0
        let aggregate%encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%5#0: Encoded(bool8) = aggregate%encoded_bool%5#0
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#0
        let aggregate%encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%6#0: Encoded(bool8) = aggregate%encoded_bool%6#0
        let tmp%10#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%6#0
        let aggregate%encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%7#0: Encoded(bool8) = aggregate%encoded_bool%7#0
        let tmp%11#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%7#0
        let aggregate%encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%8#0: Encoded(bool8) = aggregate%encoded_bool%8#0
        let tmp%12#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%8#0
        let aggregate%head%5#0: bytes = (concat 0x 0x04)
        let aggregate%get_bit%0#0: bool = (getbit tmp%5#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%4#0 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: bool = (getbit tmp%6#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit aggregate%set_bit%0#0 2u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: bool = (getbit tmp%7#0 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit aggregate%set_bit%1#0 3u aggregate%get_bit%2#0)
        let aggregate%get_bit%3#0: bool = (getbit tmp%8#0 0u)
        let aggregate%set_bit%3#0: Encoded(bool8) = (setbit aggregate%set_bit%2#0 4u aggregate%get_bit%3#0)
        let aggregate%get_bit%4#0: bool = (getbit tmp%9#0 0u)
        let aggregate%set_bit%4#0: Encoded(bool8) = (setbit aggregate%set_bit%3#0 5u aggregate%get_bit%4#0)
        let aggregate%get_bit%5#0: bool = (getbit tmp%10#0 0u)
        let aggregate%set_bit%5#0: Encoded(bool8) = (setbit aggregate%set_bit%4#0 6u aggregate%get_bit%5#0)
        let aggregate%get_bit%6#0: bool = (getbit tmp%11#0 0u)
        let aggregate%set_bit%6#0: Encoded(bool8) = (setbit aggregate%set_bit%5#0 7u aggregate%get_bit%6#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%set_bit%6#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 tmp%12#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x10)
        let aggregate%as_Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)%0#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%head%8#0
        let tmp%13#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%as_Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)%0#0
        let boolean_packing#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = tmp%13#0
        let tmp%14#0: bool = (== boolean_packing#0 0x04bd8010)
        (assert tmp%14#0)
        let aggregate%extract%0#0: bytes = (extract3 boolean_packing#0 0u 1u)
        let aggregate%get_bit%7#0: bool = (getbit boolean_packing#0 8u)
        let aggregate%encoded_bool%9#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%7#0)
        let aggregate%get_bit%8#0: bool = (getbit boolean_packing#0 9u)
        let aggregate%encoded_bool%10#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%8#0)
        let aggregate%get_bit%9#0: bool = (getbit boolean_packing#0 10u)
        let aggregate%encoded_bool%11#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%9#0)
        let aggregate%get_bit%10#0: bool = (getbit boolean_packing#0 11u)
        let aggregate%encoded_bool%12#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%10#0)
        let aggregate%get_bit%11#0: bool = (getbit boolean_packing#0 12u)
        let aggregate%encoded_bool%13#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%11#0)
        let aggregate%get_bit%12#0: bool = (getbit boolean_packing#0 13u)
        let aggregate%encoded_bool%14#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%12#0)
        let aggregate%get_bit%13#0: bool = (getbit boolean_packing#0 14u)
        let aggregate%encoded_bool%15#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%13#0)
        let aggregate%get_bit%14#0: bool = (getbit boolean_packing#0 15u)
        let aggregate%encoded_bool%16#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%14#0)
        let aggregate%get_bit%15#0: bool = (getbit boolean_packing#0 16u)
        let aggregate%encoded_bool%17#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%15#0)
        let aggregate%extract%1#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let tmp%15#0: Encoded(uint8) = aggregate%extract%0#0
        let tmp%16#0: Encoded(bool8) = aggregate%encoded_bool%9#0
        let tmp%17#0: Encoded(bool8) = aggregate%encoded_bool%10#0
        let tmp%18#0: Encoded(bool8) = aggregate%encoded_bool%11#0
        let tmp%19#0: Encoded(bool8) = aggregate%encoded_bool%12#0
        let tmp%20#0: Encoded(bool8) = aggregate%encoded_bool%13#0
        let tmp%21#0: Encoded(bool8) = aggregate%encoded_bool%14#0
        let tmp%22#0: Encoded(bool8) = aggregate%encoded_bool%15#0
        let tmp%23#0: Encoded(bool8) = aggregate%encoded_bool%16#0
        let tmp%24#0: Encoded(bool8) = aggregate%encoded_bool%17#0
        let tmp%25#0: Encoded(uint8) = aggregate%extract%1#0
        let a#0: Encoded(uint8) = tmp%15#0
        let b#0: Encoded(bool8) = tmp%16#0
        let c#0: Encoded(bool8) = tmp%17#0
        let d#0: Encoded(bool8) = tmp%18#0
        let e#0: Encoded(bool8) = tmp%19#0
        let f#0: Encoded(bool8) = tmp%20#0
        let g#0: Encoded(bool8) = tmp%21#0
        let h#0: Encoded(bool8) = tmp%22#0
        let i#0: Encoded(bool8) = tmp%23#0
        let j#0: Encoded(bool8) = tmp%24#0
        let k#0: Encoded(uint8) = tmp%25#0
        let aggregate%extract%2#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let tuple_item%0#0: Encoded(uint8) = aggregate%extract%2#0
        let reinterpret_biguint%0#0: biguint = tuple_item%0#0
        let reinterpret_biguint%1#0: biguint = k#0
        let tmp%26#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%26#0)
        let tmp%27#0: uint64 = (btoi a#0)
        let tmp%28#0: bool = (== tmp%27#0 4u)
        (assert tmp%28#0) // a is 4
        let aggregate%encoded_bool%18#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%9#0: Encoded(bool8) = aggregate%encoded_bool%18#0
        let tmp%29#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%9#0
        let tmp%30#0: bool = (!= b#0 tmp%29#0)
        goto tmp%30#0 ? block@1 : block@8
    block@1: // and_contd_L39
        let aggregate%encoded_bool%19#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%10#0: Encoded(bool8) = aggregate%encoded_bool%19#0
        let tmp%31#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%10#0
        let tmp%32#0: bool = (!= d#0 tmp%31#0)
        goto tmp%32#0 ? block@2 : block@8
    block@2: // and_contd_L39
        let aggregate%encoded_bool%20#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%11#0: Encoded(bool8) = aggregate%encoded_bool%20#0
        let tmp%33#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%11#0
        let tmp%34#0: bool = (!= e#0 tmp%33#0)
        goto tmp%34#0 ? block@3 : block@8
    block@3: // and_contd_L39
        let aggregate%encoded_bool%21#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%12#0: Encoded(bool8) = aggregate%encoded_bool%21#0
        let tmp%35#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%12#0
        let tmp%36#0: bool = (!= f#0 tmp%35#0)
        goto tmp%36#0 ? block@4 : block@8
    block@4: // and_contd_L39
        let aggregate%encoded_bool%22#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%13#0: Encoded(bool8) = aggregate%encoded_bool%22#0
        let tmp%37#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%13#0
        let tmp%38#0: bool = (!= g#0 tmp%37#0)
        goto tmp%38#0 ? block@5 : block@8
    block@5: // and_contd_L39
        let aggregate%encoded_bool%23#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%14#0: Encoded(bool8) = aggregate%encoded_bool%23#0
        let tmp%39#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%14#0
        let tmp%40#0: bool = (!= i#0 tmp%39#0)
        goto tmp%40#0 ? block@6 : block@8
    block@6: // and_contd_L39
        let aggregate%encoded_bool%24#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%15#0: Encoded(bool8) = aggregate%encoded_bool%24#0
        let tmp%41#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%15#0
        let tmp%42#0: bool = (!= j#0 tmp%41#0)
        goto tmp%42#0 ? block@7 : block@8
    block@7: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L39
        let and_result%0#0: bool = 0u
        goto block@9
    block@9: // bool_merge_L39
        (assert and_result%0#0) // b,d,e,f,g,i,j are true
        let aggregate%encoded_bool%25#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%16#0: Encoded(bool8) = aggregate%encoded_bool%25#0
        let tmp%43#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%16#0
        let tmp%44#0: bool = (!= c#0 tmp%43#0)
        goto tmp%44#0 ? block@11 : block@10
    block@10: // or_contd_L40
        let aggregate%encoded_bool%26#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%17#0: Encoded(bool8) = aggregate%encoded_bool%26#0
        let tmp%45#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%17#0
        let tmp%46#0: bool = (!= h#0 tmp%45#0)
        goto tmp%46#0 ? block@11 : block@12
    block@11: // bool_true_L40
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L40
        let or_result%0#0: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let tmp%47#0: bool = (! or_result%0#0)
        (assert tmp%47#0) // c and h are false
        let tmp%48#0: uint64 = (btoi k#0)
        let tmp%49#0: bool = (== tmp%48#0 16u)
        (assert tmp%49#0) // k is 16
        let aggregate%extract%3#0: bytes = (extract3 boolean_packing#0 0u 1u)
        let aggregate%get_bit%16#0: bool = (getbit boolean_packing#0 8u)
        let aggregate%encoded_bool%27#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%16#0)
        let aggregate%get_bit%17#0: bool = (getbit boolean_packing#0 9u)
        let aggregate%encoded_bool%28#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%17#0)
        let aggregate%get_bit%18#0: bool = (getbit boolean_packing#0 10u)
        let aggregate%encoded_bool%29#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%18#0)
        let aggregate%get_bit%19#0: bool = (getbit boolean_packing#0 11u)
        let aggregate%encoded_bool%30#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%19#0)
        let aggregate%get_bit%20#0: bool = (getbit boolean_packing#0 12u)
        let aggregate%encoded_bool%31#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%20#0)
        let aggregate%get_bit%21#0: bool = (getbit boolean_packing#0 13u)
        let aggregate%encoded_bool%32#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%21#0)
        let aggregate%get_bit%22#0: bool = (getbit boolean_packing#0 14u)
        let aggregate%encoded_bool%33#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%22#0)
        let aggregate%get_bit%23#0: bool = (getbit boolean_packing#0 15u)
        let aggregate%encoded_bool%34#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%23#0)
        let aggregate%get_bit%24#0: bool = (getbit boolean_packing#0 16u)
        let aggregate%encoded_bool%35#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%24#0)
        let aggregate%extract%4#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let tmp%50#0: Encoded(uint8) = aggregate%extract%3#0
        let tmp%51#0: Encoded(bool8) = aggregate%encoded_bool%27#0
        let tmp%52#0: Encoded(bool8) = aggregate%encoded_bool%28#0
        let tmp%53#0: Encoded(bool8) = aggregate%encoded_bool%29#0
        let tmp%54#0: Encoded(bool8) = aggregate%encoded_bool%30#0
        let tmp%55#0: Encoded(bool8) = aggregate%encoded_bool%31#0
        let tmp%56#0: Encoded(bool8) = aggregate%encoded_bool%32#0
        let tmp%57#0: Encoded(bool8) = aggregate%encoded_bool%33#0
        let tmp%58#0: Encoded(bool8) = aggregate%encoded_bool%34#0
        let tmp%59#0: Encoded(bool8) = aggregate%encoded_bool%35#0
        let tmp%60#0: Encoded(uint8) = aggregate%extract%4#0
        let aggregate%head%9#0: bytes = (concat 0x tmp%50#0)
        let aggregate%get_bit%25#0: bool = (getbit tmp%52#0 0u)
        let aggregate%set_bit%7#0: Encoded(bool8) = (setbit tmp%51#0 1u aggregate%get_bit%25#0)
        let aggregate%get_bit%26#0: bool = (getbit tmp%53#0 0u)
        let aggregate%set_bit%8#0: Encoded(bool8) = (setbit aggregate%set_bit%7#0 2u aggregate%get_bit%26#0)
        let aggregate%get_bit%27#0: bool = (getbit tmp%54#0 0u)
        let aggregate%set_bit%9#0: Encoded(bool8) = (setbit aggregate%set_bit%8#0 3u aggregate%get_bit%27#0)
        let aggregate%get_bit%28#0: bool = (getbit tmp%55#0 0u)
        let aggregate%set_bit%10#0: Encoded(bool8) = (setbit aggregate%set_bit%9#0 4u aggregate%get_bit%28#0)
        let aggregate%get_bit%29#0: bool = (getbit tmp%56#0 0u)
        let aggregate%set_bit%11#0: Encoded(bool8) = (setbit aggregate%set_bit%10#0 5u aggregate%get_bit%29#0)
        let aggregate%get_bit%30#0: bool = (getbit tmp%57#0 0u)
        let aggregate%set_bit%12#0: Encoded(bool8) = (setbit aggregate%set_bit%11#0 6u aggregate%get_bit%30#0)
        let aggregate%get_bit%31#0: bool = (getbit tmp%58#0 0u)
        let aggregate%set_bit%13#0: Encoded(bool8) = (setbit aggregate%set_bit%12#0 7u aggregate%get_bit%31#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%set_bit%13#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 tmp%59#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 tmp%60#0)
        let aggregate%as_Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)%1#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%head%12#0
        let tmp%61#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%as_Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)%1#0
        let tmp%62#0: bool = (== boolean_packing#0 tmp%61#0)
        (assert tmp%62#0)
        let (tmp%63#0: uint64, tmp%64#0: Encoded(len+utf8[])) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
        let total#0: uint64 = tmp%63#0
        let concat#0: Encoded(len+utf8[]) = tmp%64#0
        let tmp%65#0: string = ((extract 2 0) concat#0)
        let tmp%66#0: bool = (== tmp%65#0 "hello world")
        (assert tmp%66#0)
        let tmp%67#0: bool = (== total#0 258u)
        (assert tmp%67#0)
        test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy()
        return 1u

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)) -> <uint64, Encoded(len+utf8[])>:
    block@0: // L56
        let aggregate%extract%0#0: bytes = (extract3 test_tuple#0 0u 1u)
        let aggregate%extract%1#0: bytes = (extract3 test_tuple#0 1u 1u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let aggregate%substring3%0#0: bytes = (substring3 test_tuple#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let aggregate%len%0#0: uint64 = (len test_tuple#0)
        let aggregate%substring3%1#0: bytes = (substring3 test_tuple#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%extract%2#0: bytes = (extract3 test_tuple#0 6u 1u)
        let tmp%0#0: Encoded(uint8) = aggregate%extract%0#0
        let tmp%1#0: Encoded(uint8) = aggregate%extract%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let tmp%4#0: Encoded(uint8) = aggregate%extract%2#0
        let a#0: Encoded(uint8) = tmp%0#0
        let b#0: Encoded(uint8) = tmp%1#0
        let c#0: Encoded(len+utf8[]) = tmp%2#0
        let d#0: Encoded(len+utf8[]) = tmp%3#0
        let e#0: Encoded(uint8) = tmp%4#0
        let aggregate%extract%3#0: bytes = (extract3 test_tuple#0 0u 1u)
        let tuple_item%0#0: Encoded(uint8) = aggregate%extract%3#0
        let reinterpret_biguint%0#0: biguint = tuple_item%0#0
        let reinterpret_biguint%1#0: biguint = a#0
        let tmp%5#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%5#0)
        let aggregate%extract%4#0: bytes = (extract3 test_tuple#0 6u 1u)
        let tuple_item%1#0: Encoded(uint8) = aggregate%extract%4#0
        let reinterpret_biguint%2#0: biguint = tuple_item%1#0
        let reinterpret_biguint%3#0: biguint = e#0
        let tmp%6#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%6#0)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let aggregate%len%1#0: uint64 = (len test_tuple#0)
        let aggregate%substring3%2#0: bytes = (substring3 test_tuple#0 aggregate%extract_uint16%3#0 aggregate%len%1#0)
        let tuple_item%2#0: Encoded(len+utf8[]) = aggregate%substring3%2#0
        let tmp%7#0: bool = (== tuple_item%2#0 d#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = (btoi a#0)
        let tmp%9#0: uint64 = (btoi b#0)
        let tmp%10#0: uint64 = (+ tmp%8#0 tmp%9#0)
        let tmp%11#0: uint64 = (btoi e#0)
        let tmp%12#0: uint64 = (+ tmp%10#0 tmp%11#0)
        let total#0: uint64 = tmp%12#0
        let tmp%13#0: string = ((extract 2 0) c#0)
        let tmp%14#0: bytes = (concat tmp%13#0 " ")
        let tmp%15#0: string = ((extract 2 0) d#0)
        let tmp%16#0: bytes = (concat tmp%14#0 tmp%15#0)
        let text#0: string = tmp%16#0
        let aggregate%length%0#0: uint64 = (len text#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 text#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%17#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        return total#0 tmp%17#0

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
    block@0: // L69
        let aggregate%length%0#0: uint64 = (len 0x)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%head%0#0: bytes = (concat 0x 0x00)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%as_Encoded(uint8,(len+uint8[]))%0#0: Encoded(uint8,(len+uint8[])) = aggregate%concat%0#0
        let tmp%1#0: Encoded(uint8,(len+uint8[])) = aggregate%as_Encoded(uint8,(len+uint8[]))%0#0
        let tup#0: Encoded(uint8,(len+uint8[])) = tmp%1#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%0#0: uint64 = (len tup#0)
        let aggregate%substring3%0#0: bytes = (substring3 tup#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x00)
        let aggregate%as_Encoded(uint8[])%0#0: Encoded(uint8[]) = aggregate%head%2#0
        let tmp%2#0: Encoded(uint8[]) = aggregate%as_Encoded(uint8[])%0#0
        let concat%0#0: Encoded(len+uint8[]) = (concat tuple_item%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 tup#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%0#0: bytes = (concat aggregate%data_up_to_item%0#0 as_Encoded(len+uint8[])%0#0)
        let updated_tuple%0#0: Encoded(uint8,(len+uint8[])) = aggregate%updated_data%0#0
        let tup#0: Encoded(uint8,(len+uint8[])) = updated_tuple%0#0
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%2#0: uint64 = (len tup#0)
        let aggregate%substring3%2#0: bytes = (substring3 tup#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%2#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%0#0 0x00)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%3#0: bool = (== tuple_item%1#0 encoded_array%0#0)
        (assert tmp%3#0)
        let tup2#0: Encoded(uint8,(len+uint8[])) = tup#0
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%3#0: uint64 = (len tup#0)
        let aggregate%substring3%3#0: bytes = (substring3 tup#0 aggregate%extract_uint16%3#0 aggregate%len%3#0)
        let aggregate%write_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%substring3%3#0 aggregate%write_offset_with_length_header%0#0 0x01) // on error: index access is out of bounds
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%data_up_to_item%1#0: bytes = (extract3 tup#0 0u aggregate%item_offset%1#0)
        let aggregate%updated_data%1#0: bytes = (concat aggregate%data_up_to_item%1#0 aggregate%updated_array%0#0)
        let updated_tuple%1#0: Encoded(uint8,(len+uint8[])) = aggregate%updated_data%1#0
        let tup#0: Encoded(uint8,(len+uint8[])) = updated_tuple%1#0
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%4#0: uint64 = (len tup#0)
        let aggregate%substring3%4#0: bytes = (substring3 tup#0 aggregate%extract_uint16%4#0 aggregate%len%4#0)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%4#0
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 tup2#0 1u)
        let aggregate%len%5#0: uint64 = (len tup2#0)
        let aggregate%substring3%5#0: bytes = (substring3 tup2#0 aggregate%extract_uint16%5#0 aggregate%len%5#0)
        let tuple_item%3#0: Encoded(len+uint8[]) = aggregate%substring3%5#0
        let tmp%4#0: bool = (!= tuple_item%2#0 tuple_item%3#0)
        (assert tmp%4#0)
        return 