{
  "version": 3,
  "sources": [
    "../numeric.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHkC;AAAoB;AAAvC;AAAP;AAC0B;AAAuD;AAA1E;AAAP;AACO;AAAU;AAAV;AAAP;AACO;AAAgB;AAAhB;AAAP;AACO;AAAa;AAAb;AAAP;AAEO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x0000000000000000 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x 0x00"
    },
    "80": {
      "op": "b block@0"
    },
    "83": {
      "block": "block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "84": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000",
        "0x"
      ]
    },
    "85": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "assert",
      "stack_out": []
    },
    "87": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "88": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x"
      ]
    },
    "89": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "90": {
      "op": "assert",
      "stack_out": []
    },
    "91": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "92": {
      "op": "bytec_3 // 0x00",
      "stack_out": [
        "0x00",
        "0x00"
      ]
    },
    "93": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "assert",
      "stack_out": []
    },
    "95": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "96": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "0x0000000000000000",
        "0x0000000000000000"
      ]
    },
    "97": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "98": {
      "op": "assert",
      "stack_out": []
    },
    "99": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "100": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "101": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "102": {
      "op": "assert",
      "stack_out": []
    },
    "103": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    }
  }
}