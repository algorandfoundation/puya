main test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    block@0: // L30
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 255u)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint8%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 7u 1u)
        let aggregate%as_Encoded(uint8)%0#0: Encoded(uint8) = aggregate%uint8%0#0
        let tmp%0#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#0
        let int8_encoded#0: Encoded(uint8) = tmp%0#0
        let tmp%1#0: uint64 = (btoi int8_encoded#0)
        let int8_decoded#0: uint64 = tmp%1#0
        let tmp%2#0: bool = (== 255u int8_decoded#0)
        (assert tmp%2#0)
        let length%0#0: uint64 = (len 0x7fffffffffffffff00)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (substring3 0x7fffffffffffffff00 0u bounded_index%0#0)
        let tmp%3#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%4#0: bool = (== tmp%3#0 127u)
        (assert tmp%4#0)
        let length%1#0: uint64 = (len 0x7fffffffffffffff00)
        let is_out_of_bounds%1#0: bool = (>= 3u length%1#0)
        let bounded_index%1#0: uint64 = (select 3u length%1#0 is_out_of_bounds%1#0)
        let reinterpret_Encoded(uint24)%0#0: Encoded(uint24) = (substring3 0x7fffffffffffffff00 0u bounded_index%1#0)
        let tmp%5#0: uint64 = (btoi reinterpret_Encoded(uint24)%0#0)
        let tmp%6#0: bool = (== tmp%5#0 8388607u)
        (assert tmp%6#0)
        let length%2#0: uint64 = (len 0x7fffffffffffffff00)
        let is_out_of_bounds%2#0: bool = (>= 2u length%2#0)
        let bounded_index%2#0: uint64 = (select 2u length%2#0 is_out_of_bounds%2#0)
        let reinterpret_Encoded(uint16)%0#0: Encoded(uint16) = (substring3 0x7fffffffffffffff00 0u bounded_index%2#0)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint16)%0#0)
        let tmp%8#0: bool = (== tmp%7#0 32767u)
        (assert tmp%8#0)
        let length%3#0: uint64 = (len 0x7fffffffffffffff00)
        let is_out_of_bounds%3#0: bool = (>= 4u length%3#0)
        let bounded_index%3#0: uint64 = (select 4u length%3#0 is_out_of_bounds%3#0)
        let reinterpret_Encoded(uint32)%0#0: Encoded(uint32) = (substring3 0x7fffffffffffffff00 0u bounded_index%3#0)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint32)%0#0)
        let tmp%10#0: bool = (== tmp%9#0 2147483647u)
        (assert tmp%10#0)
        let length%4#0: uint64 = (len 0x7fffffffffffffff00)
        let is_out_of_bounds%4#0: bool = (>= 8u length%4#0)
        let bounded_index%4#0: uint64 = (select 8u length%4#0 is_out_of_bounds%4#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (substring3 0x7fffffffffffffff00 0u bounded_index%4#0)
        let tmp%11#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%12#0: bool = (== tmp%11#0 9223372036854775807u)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%14#0)
        let reinterpret_biguint%0#0: biguint = select%0#0
        let tmp%15#0: bool = (b== reinterpret_biguint%0#0 0x02)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        let select%1#0: Encoded(uint512) = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%17#0)
        let reinterpret_biguint%2#0: biguint = select%1#0
        let tmp%18#0: bool = (b== reinterpret_biguint%2#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%19#0)
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| aggregate%val_as_bytes%1#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let reinterpret_biguint%4#0: biguint = aggregate%as_Encoded(uint512)%0#0
        let tmp%20#0: bool = (b== reinterpret_biguint%4#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        (assert tmp%20#0)
        let tmp%21#0: bytes = (itob 1456853943940u)
        let tmp%22#0: bool = (== 0x0000015333430684 tmp%21#0)
        (assert tmp%22#0)
        let tmp%23#0: bytes = (itob 1450000000000u)
        let tmp%24#0: bool = (== 0x000001519abc2400 tmp%23#0)
        (assert tmp%24#0)
        let tmp%25#0: uint64 = (len 0x000009184e72a000)
        let tmp%26#0: bool = (== tmp%25#0 8u)
        (assert tmp%26#0)
        let tmp%27#0: bytes = (itob 10000000000000u)
        let tmp%28#0: bool = (== 0x000009184e72a000 tmp%27#0)
        (assert tmp%28#0)
        let tmp%29#0: bytes = (itob 10000000000u)
        let tmp%30#0: bool = (== 0x00000002540be400 tmp%29#0)
        (assert tmp%30#0)
        let tmp%31#0: bytes = (itob 0u)
        let tmp%32#0: bool = (== 0x0000000000000000 tmp%31#0)
        (assert tmp%32#0)
        let tmp%33#0: bytes = (itob 100u)
        let tmp%34#0: bool = (== 0x0000000000000064 tmp%33#0)
        (assert tmp%34#0)
        let tmp%35#0: bytes = (itob 10u)
        let tmp%36#0: bool = (== 0x000000000000000a tmp%35#0)
        (assert tmp%36#0)
        let tmp%37#0: bytes = (itob 1u)
        let tmp%38#0: bool = (== 0x0000000000000001 tmp%37#0)
        (assert tmp%38#0)
        let tmp%39#0: bytes = (itob 18446744073709551615u)
        let tmp%40#0: bool = (== 0xffffffffffffffff tmp%39#0)
        (assert tmp%40#0)
        let tmp%41#0: bool = (b== 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
        (assert tmp%41#0)
        let tmp%42#0: uint64 = (txn NumAppArgs)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        let select%2#0: Encoded(uint64) = (select 0x0000000000000000 0xffffffffffffffff tmp%43#0)
        let tmp%44#0: bool = (== select%2#0 0x0000000000000000)
        (assert tmp%44#0)
        let tmp%45#0: biguint = (b+ 1b 1b)
        let aggregate%value_len%0#0: uint64 = (len tmp%45#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 16u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 16u)
        let aggregate%arc4_encoded%1#0: bytes[16] = (b| tmp%45#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint128)%0#0: Encoded(uint128) = aggregate%arc4_encoded%1#0
        let tmp%46#0: Encoded(uint128) = aggregate%as_Encoded(uint128)%0#0
        let arc4_biguint_dynamic#0: Encoded(uint128) = tmp%46#0
        let tmp%48#0: bool = (b== 1b 0x00000000000000000000000000000001)
        (assert tmp%48#0)
        let tmp%49#0: uint64 = (len arc4_biguint_dynamic#0)
        let tmp%50#0: bool = (== tmp%49#0 16u)
        (assert tmp%50#0)
        let tmp%51#0: uint64 = (len 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        let tmp%52#0: bool = (== tmp%51#0 64u)
        (assert tmp%52#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob ClearState)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let tmp%53#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%53#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%54#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tup#0: Encoded(uint64) = tmp%54#0
        let aggregate%extract%0#0: bytes = (extract3 tup#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let tmp%55#0: uint64 = (btoi tuple_item%0#0)
        let tmp%56#0: bool = (== tmp%55#0 ClearState)
        (assert tmp%56#0)
        let tmp%58#0: bool = (b== 0x00000001 1b)
        (assert tmp%58#0)
        return 1u