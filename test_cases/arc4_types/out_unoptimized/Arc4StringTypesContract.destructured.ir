contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> bool:
            block@0: // L7
                let length%0#0: uint64 = (len 0x48656c6c6f20576f726c6421)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x48656c6c6f20576f726c6421)
                let some_bytes_as_string#0: bytes = encoded_value%0#0
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%0#0: bool = (!= some_bytes_as_string#0 0x48656c6c6f20576f726c6421)
                (assert tmp%0#0) // Original bytes should not match encoded bytes
                let length%1#0: uint64 = (len some_bytes_as_string#0)
                let is_out_of_bounds%0#0: bool = (>= 2u length%1#0)
                let bounded_index%0#0: uint64 = (select 2u length%1#0 is_out_of_bounds%0#0)
                let tmp%1#0: bytes = (substring3 some_bytes_as_string#0 bounded_index%0#0 length%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x48656c6c6f20576f726c6421)
                (assert tmp%2#0) // Original bytes should match encoded if we strip the length header
                let tmp%3#0: bool = (== some_bytes_as_bytes_again#0 0x48656c6c6f20576f726c6421)
                (assert tmp%3#0)
                let length%2#0: uint64 = (len "Hello")
                let as_bytes%1#0: bytes = (itob length%2#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "Hello")
                let hello#0: bytes = encoded_value%1#0
                let length%3#0: uint64 = (len " ")
                let as_bytes%2#0: bytes = (itob length%3#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 " ")
                let space#0: bytes = encoded_value%2#0
                let length%4#0: uint64 = (len "World!")
                let as_bytes%3#0: bytes = (itob length%4#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "World!")
                let world#0: bytes = encoded_value%3#0
                let length%5#0: uint64 = (len "Hello World!")
                let as_bytes%4#0: bytes = (itob length%5#0)
                let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%4#0: bytes = (concat length_uint16%4#0 "Hello World!")
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) hello#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) space#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%5#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%5#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
                let expr_value_trimmed%3#0: bytes = ((extract 2 0) world#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%2#0 expr_value_trimmed%3#0)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let as_bytes%6#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%6#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let tmp%4#0: bool = (== encoded_value%4#0 concat_result%1#0)
                (assert tmp%4#0)
                let length%6#0: uint64 = (len "hi")
                let as_bytes%7#0: bytes = (itob length%6#0)
                let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%7#0)
                let encoded_value%5#0: bytes = (concat length_uint16%5#0 "hi")
                let thing#0: bytes = encoded_value%5#0
                let expr_value_trimmed%4#0: bytes = ((extract 2 0) thing#0)
                let expr_value_trimmed%5#0: bytes = ((extract 2 0) thing#0)
                let concatenated%2#0: bytes = (concat expr_value_trimmed%4#0 expr_value_trimmed%5#0)
                let len_%2#0: uint64 = (len concatenated%2#0)
                let as_bytes%8#0: bytes = (itob len_%2#0)
                let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%8#0)
                let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
                let thing#0: bytes = concat_result%2#0
                let length%7#0: uint64 = (len "hihi")
                let as_bytes%9#0: bytes = (itob length%7#0)
                let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%9#0)
                let encoded_value%6#0: bytes = (concat length_uint16%6#0 "hihi")
                let tmp%5#0: bool = (== thing#0 encoded_value%6#0)
                (assert tmp%5#0)
                let length%8#0: uint64 = (len "a")
                let as_bytes%10#0: bytes = (itob length%8#0)
                let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%10#0)
                let encoded_value%7#0: bytes = (concat length_uint16%7#0 "a")
                let expr_value_trimmed%6#0: bytes = ((extract 2 0) encoded_value%7#0)
                let length%9#0: uint64 = (len "b")
                let as_bytes%11#0: bytes = (itob length%9#0)
                let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%11#0)
                let encoded_value%8#0: bytes = (concat length_uint16%8#0 "b")
                let expr_value_trimmed%7#0: bytes = ((extract 2 0) encoded_value%8#0)
                let concatenated%3#0: bytes = (concat expr_value_trimmed%6#0 expr_value_trimmed%7#0)
                let len_%3#0: uint64 = (len concatenated%3#0)
                let as_bytes%12#0: bytes = (itob len_%3#0)
                let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%12#0)
                let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
                let expr_value_trimmed%8#0: bytes = ((extract 2 0) concat_result%3#0)
                let length%10#0: uint64 = (len "cd")
                let as_bytes%13#0: bytes = (itob length%10#0)
                let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%13#0)
                let encoded_value%9#0: bytes = (concat length_uint16%9#0 "cd")
                let expr_value_trimmed%9#0: bytes = ((extract 2 0) encoded_value%9#0)
                let concatenated%4#0: bytes = (concat expr_value_trimmed%8#0 expr_value_trimmed%9#0)
                let len_%4#0: uint64 = (len concatenated%4#0)
                let as_bytes%14#0: bytes = (itob len_%4#0)
                let len_16_bit%4#0: bytes = ((extract 6 2) as_bytes%14#0)
                let concat_result%4#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
                let value#0: bytes = concat_result%4#0
                let expr_value_trimmed%10#0: bytes = ((extract 2 0) value#0)
                let length%11#0: uint64 = (len "e")
                let as_bytes%15#0: bytes = (itob length%11#0)
                let length_uint16%10#0: bytes = ((extract 6 2) as_bytes%15#0)
                let encoded_value%10#0: bytes = (concat length_uint16%10#0 "e")
                let expr_value_trimmed%11#0: bytes = ((extract 2 0) encoded_value%10#0)
                let concatenated%5#0: bytes = (concat expr_value_trimmed%10#0 expr_value_trimmed%11#0)
                let len_%5#0: uint64 = (len concatenated%5#0)
                let as_bytes%16#0: bytes = (itob len_%5#0)
                let len_16_bit%5#0: bytes = ((extract 6 2) as_bytes%16#0)
                let concat_result%5#0: bytes = (concat len_16_bit%5#0 concatenated%5#0)
                let value#0: bytes = concat_result%5#0
                let expr_value_trimmed%12#0: bytes = ((extract 2 0) value#0)
                let length%12#0: uint64 = (len "f")
                let as_bytes%17#0: bytes = (itob length%12#0)
                let length_uint16%11#0: bytes = ((extract 6 2) as_bytes%17#0)
                let encoded_value%11#0: bytes = (concat length_uint16%11#0 "f")
                let expr_value_trimmed%13#0: bytes = ((extract 2 0) encoded_value%11#0)
                let concatenated%6#0: bytes = (concat expr_value_trimmed%12#0 expr_value_trimmed%13#0)
                let len_%6#0: uint64 = (len concatenated%6#0)
                let as_bytes%18#0: bytes = (itob len_%6#0)
                let len_16_bit%6#0: bytes = ((extract 6 2) as_bytes%18#0)
                let concat_result%6#0: bytes = (concat len_16_bit%6#0 concatenated%6#0)
                let value#0: bytes = concat_result%6#0
                let expr_value_trimmed%14#0: bytes = ((extract 2 0) value#0)
                let length%13#0: uint64 = (len "g")
                let as_bytes%19#0: bytes = (itob length%13#0)
                let length_uint16%12#0: bytes = ((extract 6 2) as_bytes%19#0)
                let encoded_value%12#0: bytes = (concat length_uint16%12#0 "g")
                let expr_value_trimmed%15#0: bytes = ((extract 2 0) encoded_value%12#0)
                let concatenated%7#0: bytes = (concat expr_value_trimmed%14#0 expr_value_trimmed%15#0)
                let len_%7#0: uint64 = (len concatenated%7#0)
                let as_bytes%20#0: bytes = (itob len_%7#0)
                let len_16_bit%7#0: bytes = ((extract 6 2) as_bytes%20#0)
                let concat_result%7#0: bytes = (concat len_16_bit%7#0 concatenated%7#0)
                let value#0: bytes = concat_result%7#0
                let length%14#0: uint64 = (len "abcdefg")
                let as_bytes%21#0: bytes = (itob length%14#0)
                let length_uint16%13#0: bytes = ((extract 6 2) as_bytes%21#0)
                let encoded_value%13#0: bytes = (concat length_uint16%13#0 "abcdefg")
                let tmp%6#0: bool = (== encoded_value%13#0 value#0)
                (assert tmp%6#0)
                let length%15#0: uint64 = (len "")
                let as_bytes%22#0: bytes = (itob length%15#0)
                let length_uint16%14#0: bytes = ((extract 6 2) as_bytes%22#0)
                let encoded_value%14#0: bytes = (concat length_uint16%14#0 "")
                let tmp%7#0: bytes = ((extract 2 0) encoded_value%14#0)
                let tmp%8#0: bool = (== tmp%7#0 "")
                (assert tmp%8#0)
                let length%16#0: uint64 = (len "hello")
                let as_bytes%23#0: bytes = (itob length%16#0)
                let length_uint16%15#0: bytes = ((extract 6 2) as_bytes%23#0)
                let encoded_value%15#0: bytes = (concat length_uint16%15#0 "hello")
                let tmp%9#0: bytes = ((extract 2 0) encoded_value%15#0)
                let tmp%10#0: bool = (== tmp%9#0 "hello")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = (txn NumAppArgs)
                let tmp%12#0: bool = (!= tmp%11#0 0u)
                goto tmp%12#0 ? block@1 : block@2
            block@1: // ternary_true_L41
                let length%17#0: uint64 = (len "aye")
                let as_bytes%24#0: bytes = (itob length%17#0)
                let length_uint16%16#0: bytes = ((extract 6 2) as_bytes%24#0)
                let encoded_value%16#0: bytes = (concat length_uint16%16#0 "aye")
                let ternary_result%0#0: bytes = encoded_value%16#0
                goto block@3
            block@2: // ternary_false_L41
                let length%18#0: uint64 = (len "bee")
                let as_bytes%25#0: bytes = (itob length%18#0)
                let length_uint16%17#0: bytes = ((extract 6 2) as_bytes%25#0)
                let encoded_value%17#0: bytes = (concat length_uint16%17#0 "bee")
                let ternary_result%0#0: bytes = encoded_value%17#0
                goto block@3
            block@3: // ternary_merge_L41
                let length%19#0: uint64 = (len "bee")
                let as_bytes%26#0: bytes = (itob length%19#0)
                let length_uint16%18#0: bytes = ((extract 6 2) as_bytes%26#0)
                let encoded_value%18#0: bytes = (concat length_uint16%18#0 "bee")
                let tmp%13#0: bool = (== ternary_result%0#0 encoded_value%18#0)
                (assert tmp%13#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> bool:
            block@0: // L44
                return 1u