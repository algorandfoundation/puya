contract test_cases.arc4_types.reference_types.Arc4RefTypesContract:
    program approval:
        subroutine test_cases.arc4_types.reference_types.Arc4RefTypesContract.approval_program() -> uint64:
            block@0: // L5
                let sender_address#0: bytes = (txn Sender)
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: uint64 = (== sender_address#0 tmp%0#0)
                (assert tmp%1#0)
                let awst_tmp%2#0: bytes = (txn Sender)
                let tmp%3#0: uint64 = (len awst_tmp%2#0)
                let tmp%4#0: uint64 = (== 32u tmp%3#0)
                let value%5#0: bytes = awst_tmp%2#0
                let check%6#0: uint64 = tmp%4#0
                (assert check%6#0) // Address length is 32 bytes
                let checked_address#0: bytes = value%5#0
                let unchecked_address#0: bytes = (txn Sender)
                let tmp%7#0: uint64 = (== sender_address#0 checked_address#0)
                goto tmp%7#0 ? block@1 : block@3
            block@1: // and_contd_L16
                let tmp%8#0: uint64 = (== checked_address#0 unchecked_address#0)
                goto tmp%8#0 ? block@2 : block@3
            block@2: // bool_true_L16
                let and_result%9#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L16
                let and_result%9#0: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L16
                (assert and_result%9#0)
                let tmp%10#0: bytes = (global ZeroAddress)
                let tmp%11#0: uint64 = (== tmp%10#0 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
                (assert tmp%11#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.reference_types.Arc4RefTypesContract.clear_state_program() -> uint64:
            block@0: // L21
                return 1u