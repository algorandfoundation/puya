contract test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program() -> bool:
            block@0: // L10
                let total#0: uint64 = 0u
                let array_data%0#1: bytes = (concat 0x0003 0x02)
                let array_data%0#1: bytes = (concat array_data%0#1 0x03)
                let array_data%0#1: bytes = (concat array_data%0#1 0x01)
                let dynamic_bytes#0: bytes = array_data%0#1
                let tmp%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
                let tmp%1#0: bool = (== tmp%0#0 0x020301)
                (assert tmp%1#0)
                let tmp%2#0: bool = (== dynamic_bytes#0 0x0003020301)
                (assert tmp%2#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_bytes#0 0u)
                let array_value%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L16
                let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L16
                let item_index%0#0: uint64 = (* item_index_internal%0#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%0#0 item_index%0#0 1u)
                let tmp%3#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%3#0)
                goto block@3
            block@3: // for_footer_L16
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L16
                let tmp%4#0: bool = (== total#0 6u)
                (assert tmp%4#0) // Total should be of dynamic_bytes items
                let tmp%5#0: bytes = ((extract 2 0) 0x00020304)
                let tmp%6#0: bool = (== tmp%5#0 0x0304)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== 0x00020304 0x00020304)
                (assert tmp%7#0)
                let array_length%1#0: uint64 = (extract_uint16 0x00020304 0u)
                let array_value%1#0: bytes = ((extract 2 0) 0x00020304)
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L25
                let continue_looping%1#0: bool = (< item_index_internal%1#0 array_length%1#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L25
                let item_index%1#0: uint64 = (* item_index_internal%1#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%1#0 item_index%1#0 1u)
                let tmp%8#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%8#0)
                goto block@7
            block@7: // for_footer_L25
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@5
            block@8: // after_for_L25
                let tmp%9#0: bytes = ((extract 2 0) 0x00020304)
                let length%0#0: uint64 = (len tmp%9#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let dynamic_bytes3#0: bytes = (concat value_as_uint16%0#0 tmp%9#0)
                let tmp%10#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let tmp%11#0: bool = (== tmp%10#0 0x0304)
                (assert tmp%11#0)
                let tmp%12#0: bool = (== dynamic_bytes3#0 0x00020304)
                (assert tmp%12#0)
                let array_length%2#0: uint64 = (extract_uint16 dynamic_bytes3#0 0u)
                let array_value%2#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L32
                let continue_looping%2#0: bool = (< item_index_internal%2#0 array_length%2#0)
                goto continue_looping%2#0 ? block@10 : block@12
            block@10: // for_body_L32
                let item_index%2#0: uint64 = (* item_index_internal%2#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%2#0 item_index%2#0 1u)
                let tmp%13#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%13#0)
                goto block@11
            block@11: // for_footer_L32
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                goto block@9
            block@12: // after_for_L32
                let tmp%14#0: bool = (== total#0 20u)
                (assert tmp%14#0) // Total should now include sum of dynamic_bytes3 items
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) 0x0003616263)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let dynamic_bytes3#0: bytes = concat_result%0#0
                let tmp%15#0: bool = (== dynamic_bytes3#0 0x00050304616263)
                (assert tmp%15#0)
                let tmp%16#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let tmp%17#0: bool = (== tmp%16#0 0x0304616263)
                (assert tmp%17#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.clear_state_program() -> bool:
            block@0: // L43
                return 1u