contract test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program() -> uint64:
            block@0: // L10
                let total#0: uint64 = 0u
                let array_data%0#0: bytes = 0x0002
                let array_data%0#0: bytes = (concat array_data%0#0 0x02)
                let array_data%0#0: bytes = (concat array_data%0#0 0x03)
                let dynamic_bytes#0: bytes = array_data%0#0
                let tmp%1#0: bytes = ((extract 2 0) dynamic_bytes#0)
                let tmp%2#0: uint64 = (== tmp%1#0 "\x02\x03")
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (== dynamic_bytes#0 "\x00\x02\x02\x03")
                (assert tmp%3#0)
                let array_length%4#0: uint64 = (extract_uint16 dynamic_bytes#0 0u)
                let array_value%5#0: bytes = ((extract 2 0) dynamic_bytes#0)
                let item_index_internal%6#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L16
                let continue_looping%8#0: uint64 = (< item_index_internal%6#0 array_length%4#0)
                goto continue_looping%8#0 ? block@2 : block@4
            block@2: // for_body_L16
                let item_index%9#0: uint64 = (* item_index_internal%6#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%5#0 item_index%9#0 1u)
                let tmp%10#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%10#0)
                goto block@3
            block@3: // for_footer_L16
                let item_index_internal%6#0: uint64 = (+ item_index_internal%6#0 1u)
                goto block@1
            block@4: // after_for_L16
                let tmp%11#0: uint64 = (== total#0 5u)
                (assert tmp%11#0) // Total should be of dynamic_bytes items
                let dynamic_bytes2#0: bytes = "\x00\x02\x03\x04"
                let tmp%12#0: bytes = ((extract 2 0) dynamic_bytes2#0)
                let tmp%13#0: uint64 = (== tmp%12#0 "\x03\x04")
                (assert tmp%13#0)
                let tmp%14#0: uint64 = (== dynamic_bytes2#0 "\x00\x02\x03\x04")
                (assert tmp%14#0)
                let array_length%15#0: uint64 = (extract_uint16 dynamic_bytes2#0 0u)
                let array_value%16#0: bytes = ((extract 2 0) dynamic_bytes2#0)
                let item_index_internal%17#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L25
                let continue_looping%19#0: uint64 = (< item_index_internal%17#0 array_length%15#0)
                goto continue_looping%19#0 ? block@6 : block@8
            block@6: // for_body_L25
                let item_index%20#0: uint64 = (* item_index_internal%17#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%16#0 item_index%20#0 1u)
                let tmp%21#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%21#0)
                goto block@7
            block@7: // for_footer_L25
                let item_index_internal%17#0: uint64 = (+ item_index_internal%17#0 1u)
                goto block@5
            block@8: // after_for_L25
                let tmp%22#0: bytes = ((extract 2 0) dynamic_bytes2#0)
                let length%23#0: uint64 = (len tmp%22#0)
                let value_as_bytes%24#0: bytes = (itob length%23#0)
                let value_as_uint16%25#0: bytes = ((extract 6 2) value_as_bytes%24#0)
                let dynamic_bytes3#0: bytes = (concat value_as_uint16%25#0 tmp%22#0)
                let tmp%26#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let tmp%27#0: uint64 = (== tmp%26#0 "\x03\x04")
                (assert tmp%27#0)
                let tmp%28#0: uint64 = (== dynamic_bytes3#0 "\x00\x02\x03\x04")
                (assert tmp%28#0)
                let array_length%29#0: uint64 = (extract_uint16 dynamic_bytes2#0 0u)
                let array_value%30#0: bytes = ((extract 2 0) dynamic_bytes2#0)
                let item_index_internal%31#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L32
                let continue_looping%33#0: uint64 = (< item_index_internal%31#0 array_length%29#0)
                goto continue_looping%33#0 ? block@10 : block@12
            block@10: // for_body_L32
                let item_index%34#0: uint64 = (* item_index_internal%31#0 1u)
                let uint8_item#0: bytes = (extract3 array_value%30#0 item_index%34#0 1u)
                let tmp%35#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%35#0)
                goto block@11
            block@11: // for_footer_L32
                let item_index_internal%31#0: uint64 = (+ item_index_internal%31#0 1u)
                goto block@9
            block@12: // after_for_L32
                let tmp%36#0: uint64 = (== total#0 19u)
                (assert tmp%36#0) // Total should now include sum of dynamic_bytes3 items
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.clear_state_program() -> uint64:
            block@0: // L38
                return 1u