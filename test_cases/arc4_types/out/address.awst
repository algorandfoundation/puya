SOME_ADDRESS = 'VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA'

contract Arc4AddressContract
{
  approval_program(): bool
  {
    address: arc4.static_array<arc4.uint8, 32> = reinterpret_cast<arc4.static_array<arc4.uint8, 32>>(txn<Sender>())
    assert(address == reinterpret_cast<arc4.static_array<arc4.uint8, 32>>(txn<Sender>()))
    assert(32u == 32u)
    assert(reinterpret_cast<account>(address) == txn<Sender>())
    zero_address: arc4.static_array<arc4.uint8, 32> = checked_maybe((reinterpret_cast<arc4.static_array<arc4.uint8, 32>>(SINGLE_EVAL(id=0, source=reinterpret_cast<bytes>(global<ZeroAddress>()))), 32u == len(SINGLE_EVAL(id=0))))
    assert(reinterpret_cast<bytes>(zero_address) == reinterpret_cast<bytes>(global<ZeroAddress>()))
    some_address: arc4.static_array<arc4.uint8, 32> = Address("VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA")
    assert(some_address == Address("VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA"))
    some_address[0u]: arc4.uint8 = 123arc4u8
    assert(some_address != Address("VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA"))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}