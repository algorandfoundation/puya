contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> bool:
            block@0: // L27
                let int8_encoded#0: bytes = 0xff
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%0#0: bool = (== 255u int8_decoded#0)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = 9u
                let tmp%2#0: uint64 = 9u
                let tmp%3#0: bool = (< 1u tmp%2#0)
                let tmp%4#0: uint64 = (select tmp%1#0 1u tmp%3#0)
                let tmp%5#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%4#0)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: bool = (== tmp%6#0 127u)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = 9u
                let tmp%9#0: uint64 = 9u
                let tmp%10#0: bool = (< 3u tmp%9#0)
                let tmp%11#0: uint64 = (select tmp%8#0 3u tmp%10#0)
                let tmp%12#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%11#0)
                let tmp%13#0: uint64 = (btoi tmp%12#0)
                let tmp%14#0: bool = (== tmp%13#0 8388607u)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = 9u
                let tmp%16#0: uint64 = 9u
                let tmp%17#0: bool = (< 2u tmp%16#0)
                let tmp%18#0: uint64 = (select tmp%15#0 2u tmp%17#0)
                let tmp%19#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%18#0)
                let tmp%20#0: uint64 = (btoi tmp%19#0)
                let tmp%21#0: bool = (== tmp%20#0 32767u)
                (assert tmp%21#0)
                let tmp%22#0: uint64 = 9u
                let tmp%23#0: uint64 = 9u
                let tmp%24#0: bool = (< 4u tmp%23#0)
                let tmp%25#0: uint64 = (select tmp%22#0 4u tmp%24#0)
                let tmp%26#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%25#0)
                let tmp%27#0: uint64 = (btoi tmp%26#0)
                let tmp%28#0: bool = (== tmp%27#0 2147483647u)
                (assert tmp%28#0)
                let tmp%29#0: uint64 = 9u
                let tmp%30#0: uint64 = 9u
                let tmp%31#0: bool = (< 8u tmp%30#0)
                let tmp%32#0: uint64 = (select tmp%29#0 8u tmp%31#0)
                let tmp%33#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%32#0)
                let tmp%34#0: uint64 = (btoi tmp%33#0)
                let tmp%35#0: bool = (== tmp%34#0 9223372036854775807u)
                (assert tmp%35#0)
                let tmp%37#0: bool = 1u
                (assert tmp%37#0)
                let tmp%39#0: bool = 1u
                (assert tmp%39#0)
                let tmp%40#0: uint64 = 8u
                let tmp%41#0: bool = (== tmp%40#0 8u)
                (assert tmp%41#0)
                let tmp%43#0: bool = 1u
                (assert tmp%43#0)
                let tmp%45#0: bool = 1u
                (assert tmp%45#0)
                let tmp%47#0: bool = 1u
                (assert tmp%47#0)
                let tmp%49#0: bool = 1u
                (assert tmp%49#0)
                let tmp%51#0: bool = 1u
                (assert tmp%51#0)
                let tmp%53#0: bool = 1u
                (assert tmp%53#0)
                let tmp%55#0: bool = 1u
                (assert tmp%55#0)
                let tmp%56#0: bool = 1u
                (assert tmp%56#0)
                let tmp%57#0: bytes = 2b
                let len_%0#0: uint64 = (len tmp%57#0)
                let no_overflow%0#0: bool = (<= len_%0#0 16u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| tmp%57#0 b_zeros%0#0)
                let tmp%58#0: bool = 1u
                (assert tmp%58#0)
                let tmp%59#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%60#0: bool = (== tmp%59#0 16u)
                (assert tmp%60#0)
                let tmp%61#0: uint64 = 64u
                let tmp%62#0: bool = (== tmp%61#0 64u)
                (assert tmp%62#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> bool:
            block@0: // L100
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%4#0: bool = 1u
                (assert tmp%4#0)
                return 1u