contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
            block@0: // L25
                let int8_encoded#0: bytes = 0xff
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%1#0: uint64 = (== 255u int8_decoded#0)
                (assert tmp%1#0)
                let tmp%3#0: uint64 = 9u
                let tmp%4#0: uint64 = 9u
                let tmp%5#0: uint64 = (< 1u tmp%4#0)
                let tmp%6#0: uint64 = (select tmp%3#0 1u tmp%5#0)
                let tmp%7#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%6#0)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: uint64 = (== tmp%8#0 127u)
                (assert tmp%9#0)
                let tmp%11#0: uint64 = 9u
                let tmp%12#0: uint64 = 9u
                let tmp%13#0: uint64 = (< 3u tmp%12#0)
                let tmp%14#0: uint64 = (select tmp%11#0 3u tmp%13#0)
                let tmp%15#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%14#0)
                let tmp%16#0: uint64 = (btoi tmp%15#0)
                let tmp%17#0: uint64 = (== tmp%16#0 8388607u)
                (assert tmp%17#0)
                let tmp%19#0: uint64 = 9u
                let tmp%20#0: uint64 = 9u
                let tmp%21#0: uint64 = (< 2u tmp%20#0)
                let tmp%22#0: uint64 = (select tmp%19#0 2u tmp%21#0)
                let tmp%23#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%22#0)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = (== tmp%24#0 32767u)
                (assert tmp%25#0)
                let tmp%27#0: uint64 = 9u
                let tmp%28#0: uint64 = 9u
                let tmp%29#0: uint64 = (< 4u tmp%28#0)
                let tmp%30#0: uint64 = (select tmp%27#0 4u tmp%29#0)
                let tmp%31#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%30#0)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = (== tmp%32#0 2147483647u)
                (assert tmp%33#0)
                let tmp%35#0: uint64 = 9u
                let tmp%36#0: uint64 = 9u
                let tmp%37#0: uint64 = (< 8u tmp%36#0)
                let tmp%38#0: uint64 = (select tmp%35#0 8u tmp%37#0)
                let tmp%39#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%38#0)
                let tmp%40#0: uint64 = (btoi tmp%39#0)
                let tmp%41#0: uint64 = (== tmp%40#0 9223372036854775807u)
                (assert tmp%41#0)
                let tmp%42#0: uint64 = 8u
                let tmp%43#0: uint64 = (== tmp%42#0 8u)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = 1456853943940u
                let tmp%45#0: uint64 = (== tmp%44#0 1456853943940u)
                (assert tmp%45#0)
                let tmp%46#0: uint64 = 8u
                let tmp%47#0: uint64 = (== tmp%46#0 8u)
                (assert tmp%47#0)
                let tmp%48#0: uint64 = 1450000000000u
                let tmp%49#0: uint64 = (== tmp%48#0 1450000000000u)
                (assert tmp%49#0)
                let tmp%50#0: uint64 = 64u
                let tmp%51#0: uint64 = (== tmp%50#0 64u)
                (assert tmp%51#0)
                let len_%52#0: uint64 = 64u
                let no_overflow%53#0: uint64 = (<= len_%52#0 64u)
                (assert no_overflow%53#0) // overflow
                let tmp%55#0: bytes = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                let tmp%56#0: uint64 = (b== 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff tmp%55#0)
                (assert tmp%56#0)
                let len_%57#0: uint64 = 64u
                let no_overflow%58#0: uint64 = (<= len_%57#0 64u)
                (assert no_overflow%58#0) // overflow
                let really_big_decimal#0: bytes = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                let tmp%60#0: bytes = 2b
                let len_%61#0: uint64 = (len tmp%60#0)
                let no_overflow%62#0: uint64 = (<= len_%61#0 16u)
                (assert no_overflow%62#0) // overflow
                let b_zeros%63#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| tmp%60#0 b_zeros%63#0)
                let tmp%64#0: uint64 = 1u
                (assert tmp%64#0)
                let tmp%65#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%66#0: uint64 = (== tmp%65#0 16u)
                (assert tmp%66#0)
                let tmp%67#0: uint64 = (len really_big_decimal#0)
                let tmp%68#0: uint64 = (== tmp%67#0 64u)
                (assert tmp%68#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> uint64:
            block@0: // L74
                return 1u