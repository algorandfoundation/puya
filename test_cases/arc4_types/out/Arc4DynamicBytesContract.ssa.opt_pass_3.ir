contract test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program() -> bool:
            block@0: // L10
                let total#0: uint64 = 0u
                let result%2#0: bytes = 0x020301
                let dynamic_bytes#0: bytes = (concat 0x0003 result%2#0)
                let tmp%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
                let tmp%1#0: bool = (== tmp%0#0 "\x02\x03\x01")
                (assert tmp%1#0)
                let tmp%2#0: bool = (== dynamic_bytes#0 "\x00\x03\x02\x03\x01")
                (assert tmp%2#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_bytes#0 0u)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L16
                let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
                let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L16
                let uint8_item#0: bytes = (extract3 tmp%0#0 item_index_internal%0#1 1u) // on error: Index access is out of bounds
                let tmp%3#0: uint64 = (btoi uint8_item#0)
                let total#2: uint64 = (+ total#1 tmp%3#0)
                let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
                goto block@1
            block@4: // after_for_L16
                let tmp%4#0: bool = (== total#1 6u)
                (assert tmp%4#0) // Total should be of dynamic_bytes items
                let dynamic_bytes2#0: bytes = 0x00020304
                let tmp%5#0: bytes = ((extract 2 0) dynamic_bytes2#0)
                let tmp%6#0: bool = (== tmp%5#0 "\x03\x04")
                (assert tmp%6#0)
                let tmp%7#0: bool = (== dynamic_bytes2#0 "\x00\x02\x03\x04")
                (assert tmp%7#0)
                let array_length%1#0: uint64 = (extract_uint16 dynamic_bytes2#0 0u)
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L25
                let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
                let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
                let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L25
                let uint8_item#1: bytes = (extract3 tmp%5#0 item_index_internal%1#1 1u) // on error: Index access is out of bounds
                let tmp%8#0: uint64 = (btoi uint8_item#1)
                let total#4: uint64 = (+ total#3 tmp%8#0)
                let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
                goto block@5
            block@8: // after_for_L25
                let length%1#0: uint64 = (len tmp%5#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let dynamic_bytes3#0: bytes = (concat value_as_uint16%1#0 tmp%5#0)
                let tmp%10#0: bytes = ((extract 2 0) dynamic_bytes3#0)
                let tmp%11#0: bool = (== tmp%10#0 "\x03\x04")
                (assert tmp%11#0)
                let tmp%12#0: bool = (== dynamic_bytes3#0 "\x00\x02\x03\x04")
                (assert tmp%12#0)
                let array_length%2#0: uint64 = (extract_uint16 dynamic_bytes3#0 0u)
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L32
                let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@10)
                let total#5: uint64 = φ(total#3 <- block@8, total#6 <- block@10)
                let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%2#0)
                goto continue_looping%2#0 ? block@10 : block@12
            block@10: // for_body_L32
                let uint8_item#2: bytes = (extract3 tmp%10#0 item_index_internal%2#1 1u) // on error: Index access is out of bounds
                let tmp%13#0: uint64 = (btoi uint8_item#2)
                let total#6: uint64 = (+ total#5 tmp%13#0)
                let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
                goto block@9
            block@12: // after_for_L32
                let tmp%14#0: bool = (== total#5 20u)
                (assert tmp%14#0) // Total should now include sum of dynamic_bytes3 items
                let tmp%15#0: bytes = 0x0003616263
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) tmp%15#0)
                let concatenated%0#0: bytes = (concat tmp%10#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%3#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%3#0)
                let dynamic_bytes3#2: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let tmp%16#0: bool = (== dynamic_bytes3#2 "\x00\x05\x03\x04abc")
                (assert tmp%16#0)
                let tmp%17#0: bytes = ((extract 2 0) dynamic_bytes3#2)
                let tmp%18#0: bool = (== tmp%17#0 "\x03\x04abc")
                (assert tmp%18#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.clear_state_program() -> bool:
            block@0: // L43
                return 1u