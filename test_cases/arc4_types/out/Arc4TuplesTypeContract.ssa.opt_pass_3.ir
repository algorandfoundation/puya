contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let encoded_value%0#0: bytes = 0x000568656c6c6f
                let encoded_value%1#0: bytes = 0x0005776f726c64
                let encoded_tuple_buffer%3#0: bytes = 0x01020007
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ 7u data_length%0#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0xff)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
                let my_tuple#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
                let tmp%0#0: bool = (== my_tuple#0 0x01020007000eff000568656c6c6f0005776f726c64)
                (assert tmp%0#0)
                let encoded_tuple_buffer%11#0: bytes = 0x0480
                let encoded_tuple_buffer%12#0: bytes = (setbit encoded_tuple_buffer%11#0 10u 1u)
                let encoded_tuple_buffer%13#0: bytes = (setbit encoded_tuple_buffer%12#0 11u 1u)
                let encoded_tuple_buffer%14#0: bytes = (setbit encoded_tuple_buffer%13#0 12u 1u)
                let encoded_tuple_buffer%15#0: bytes = (setbit encoded_tuple_buffer%14#0 13u 1u)
                let encoded_tuple_buffer%16#0: bytes = (setbit encoded_tuple_buffer%15#0 14u 0u)
                let encoded_tuple_buffer%17#0: bytes = (setbit encoded_tuple_buffer%16#0 15u 1u)
                let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 0x80)
                let boolean_packing#0: bytes = (concat encoded_tuple_buffer%18#0 0x10)
                let tmp%1#0: bool = (== boolean_packing#0 0x04bd8010)
                (assert tmp%1#0)
                let a#0: bytes = ((extract 0 1) boolean_packing#0) // on error: Index access is out of bounds
                let is_true%7#0: uint64 = (getbit boolean_packing#0 8u)
                let b#0: bytes = (setbit 0x00 0u is_true%7#0)
                let is_true%8#0: uint64 = (getbit boolean_packing#0 9u)
                let c#0: bytes = (setbit 0x00 0u is_true%8#0)
                let is_true%9#0: uint64 = (getbit boolean_packing#0 10u)
                let d#0: bytes = (setbit 0x00 0u is_true%9#0)
                let is_true%10#0: uint64 = (getbit boolean_packing#0 11u)
                let e#0: bytes = (setbit 0x00 0u is_true%10#0)
                let is_true%11#0: uint64 = (getbit boolean_packing#0 12u)
                let f#0: bytes = (setbit 0x00 0u is_true%11#0)
                let is_true%12#0: uint64 = (getbit boolean_packing#0 13u)
                let g#0: bytes = (setbit 0x00 0u is_true%12#0)
                let is_true%13#0: uint64 = (getbit boolean_packing#0 14u)
                let h#0: bytes = (setbit 0x00 0u is_true%13#0)
                let is_true%14#0: uint64 = (getbit boolean_packing#0 15u)
                let i#0: bytes = (setbit 0x00 0u is_true%14#0)
                let is_true%15#0: uint64 = (getbit boolean_packing#0 16u)
                let j#0: bytes = (setbit 0x00 0u is_true%15#0)
                let k#0: bytes = ((extract 3 1) boolean_packing#0) // on error: Index access is out of bounds
                let tmp%3#0: uint64 = (btoi a#0)
                let tmp%4#0: bool = (== tmp%3#0 4u)
                (assert tmp%4#0) // a is 4
                let tmp%5#0: bool = (!= b#0 0x00)
                goto tmp%5#0 ? block@1 : block@8
            block@1: // and_contd_L39
                let tmp%6#0: bool = (!= d#0 0x00)
                goto tmp%6#0 ? block@2 : block@8
            block@2: // and_contd_L39
                let tmp%7#0: bool = (!= e#0 0x00)
                goto tmp%7#0 ? block@3 : block@8
            block@3: // and_contd_L39
                let tmp%8#0: bool = (!= f#0 0x00)
                goto tmp%8#0 ? block@4 : block@8
            block@4: // and_contd_L39
                let tmp%9#0: bool = (!= g#0 0x00)
                goto tmp%9#0 ? block@5 : block@8
            block@5: // and_contd_L39
                let tmp%10#0: bool = (!= i#0 0x00)
                goto tmp%10#0 ? block@6 : block@8
            block@6: // and_contd_L39
                let tmp%11#0: bool = (!= j#0 0x00)
                goto tmp%11#0 ? block@7 : block@8
            block@7: // bool_true_L39
                let and_result%0#0: bool = 1u
                goto block@9
            block@8: // bool_false_L39
                let and_result%0#1: bool = 0u
                goto block@9
            block@9: // bool_merge_L39
                let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
                (assert and_result%0#2) // b,d,e,f,g,i,j are true
                let tmp%12#0: bool = (!= c#0 0x00)
                goto tmp%12#0 ? block@11 : block@10
            block@10: // or_contd_L40
                let tmp%13#0: bool = (!= h#0 0x00)
                goto tmp%13#0 ? block@11 : block@12
            block@11: // bool_true_L40
                let or_result%0#0: bool = 1u
                goto block@13
            block@12: // bool_false_L40
                let or_result%0#1: bool = 0u
                goto block@13
            block@13: // bool_merge_L40
                let or_result%0#2: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
                let tmp%14#0: bool = (! or_result%0#2)
                (assert tmp%14#0) // c and h are false
                let tmp%15#0: uint64 = (btoi k#0)
                let tmp%16#0: bool = (== tmp%15#0 16u)
                (assert tmp%16#0) // k is 16
                let encoded_tuple_buffer%22#0: bytes = (concat a#0 b#0)
                let is_true%25#0: uint64 = (getbit c#0 0u)
                let encoded_tuple_buffer%23#0: bytes = (setbit encoded_tuple_buffer%22#0 9u is_true%25#0)
                let is_true%26#0: uint64 = (getbit d#0 0u)
                let encoded_tuple_buffer%24#0: bytes = (setbit encoded_tuple_buffer%23#0 10u is_true%26#0)
                let is_true%27#0: uint64 = (getbit e#0 0u)
                let encoded_tuple_buffer%25#0: bytes = (setbit encoded_tuple_buffer%24#0 11u is_true%27#0)
                let is_true%28#0: uint64 = (getbit f#0 0u)
                let encoded_tuple_buffer%26#0: bytes = (setbit encoded_tuple_buffer%25#0 12u is_true%28#0)
                let is_true%29#0: uint64 = (getbit g#0 0u)
                let encoded_tuple_buffer%27#0: bytes = (setbit encoded_tuple_buffer%26#0 13u is_true%29#0)
                let is_true%30#0: uint64 = (getbit h#0 0u)
                let encoded_tuple_buffer%28#0: bytes = (setbit encoded_tuple_buffer%27#0 14u is_true%30#0)
                let is_true%31#0: uint64 = (getbit i#0 0u)
                let encoded_tuple_buffer%29#0: bytes = (setbit encoded_tuple_buffer%28#0 15u is_true%31#0)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 j#0)
                let encoded_tuple_buffer%31#0: bytes = (concat encoded_tuple_buffer%30#0 k#0)
                let tmp%17#0: bool = (== boolean_packing#0 encoded_tuple_buffer%31#0)
                (assert tmp%17#0)
                let (total#0: uint64, concat#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
                let tmp%18#0: bytes = ((extract 2 0) concat#0)
                let tmp%19#0: bool = (== tmp%18#0 "hello world")
                (assert tmp%19#0)
                let tmp%20#0: bool = (== total#0 258u)
                (assert tmp%20#0)
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L54
                let a#0: bytes = ((extract 0 1) test_tuple#0) // on error: Index access is out of bounds
                let b#0: bytes = ((extract 1 1) test_tuple#0) // on error: Index access is out of bounds
                let item_start_offset%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let c#0: bytes = (substring3 test_tuple#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len test_tuple#0)
                let d#0: bytes = (substring3 test_tuple#0 item_end_offset%0#0 item_end_offset%1#0)
                let e#0: bytes = ((extract 6 1) test_tuple#0) // on error: Index access is out of bounds
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 text#0)
                return total#0 encoded_value%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u