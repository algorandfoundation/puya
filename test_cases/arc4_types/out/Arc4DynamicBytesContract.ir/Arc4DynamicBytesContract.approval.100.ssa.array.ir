main test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program:
    block@0: // L10
        let total#0: uint64 = 0u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%head%0#1: bytes = (concat aggregate%len_u16%0#1 0x02)
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 0x03)
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 0x01)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%head%2#1
        let dynamic_bytes#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let tmp%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
        let tmp%1#0: bool = (== tmp%0#0 0x020301)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== dynamic_bytes#0 0x0003020301)
        (assert tmp%2#0)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_bytes#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L16
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L17
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) dynamic_bytes#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 1u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#1
        let uint8_item#0: Encoded(uint8) = array_item%0#0
        let tmp%3#0: uint64 = (btoi uint8_item#0)
        let total#2: uint64 = (+ total#1 tmp%3#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L16
        let tmp%5#0: bool = (== total#1 6u)
        (assert tmp%5#0) // Total should be of dynamic_bytes items
        let aggregate%length%0#1: uint64 = (len 0x0304)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x0304)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let dynamic_bytes2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#1
        let tmp%9#0: bool = (== dynamic_bytes2#0 0x00020304)
        (assert tmp%9#0)
        let array_length%1#0: uint64 = (extract_uint16 dynamic_bytes2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L25
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L26
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) dynamic_bytes2#0)
        let aggregate%bytes_offset%1#1: uint64 = (* item_index_internal%1#1 1u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#1
        let uint8_item#1: Encoded(uint8) = array_item%1#0
        let tmp%10#0: uint64 = (btoi uint8_item#1)
        let total#4: uint64 = (+ total#3 tmp%10#0)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L25
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L32
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@10)
        let total#5: uint64 = φ(total#3 <- block@8, total#6 <- block@10)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%1#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L33
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) dynamic_bytes2#0)
        let aggregate%bytes_offset%2#1: uint64 = (* item_index_internal%2#1 1u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 1u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8) = aggregate%encoded_element%2#1
        let uint8_item#2: Encoded(uint8) = array_item%2#0
        let tmp%17#0: uint64 = (btoi uint8_item#2)
        let total#6: uint64 = (+ total#5 tmp%17#0)
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@9
    block@12: // after_for_L32
        let tmp%19#0: bool = (== total#5 20u)
        (assert tmp%19#0) // Total should now include sum of dynamic_bytes3 items
        let aggregate%length%1#1: uint64 = (len 0x616263)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x616263)
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%20#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#1
        let extract_to_end%0#0: bytes = ((extract 2 0) tmp%20#0)
        let concat%0#0: Encoded(len+uint8[]) = (concat dynamic_bytes2#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let dynamic_bytes3#2: Encoded(len+uint8[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%21#0: bool = (== dynamic_bytes3#2 0x00050304616263)
        (assert tmp%21#0)
        let tmp%22#0: bytes = ((extract 2 0) dynamic_bytes3#2)
        let tmp%23#0: bool = (== tmp%22#0 0x0304616263)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let select%0#0: Encoded(uint8) = (select 0x03 0x02 tmp%24#0)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%head%3#1: bytes = (concat aggregate%len_u16%1#1 select%0#0)
        let aggregate%head%4#1: bytes = (concat aggregate%head%3#1 0x03)
        let aggregate%head%5#1: bytes = (concat aggregate%head%4#1 0x01)
        let aggregate%as_Encoded(len+uint8[])%3#1: Encoded(len+uint8[]) = aggregate%head%5#1
        let dynamic_bytes#1: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#1
        let tmp%26#0: bytes = ((extract 2 0) dynamic_bytes#1)
        let tmp%27#0: bool = (== tmp%26#0 0x030301)
        (assert tmp%27#0)
        let tmp%28#0: uint64 = (txn NumAppArgs)
        goto tmp%28#0 ? block@13 : block@14
    block@13: // ternary_true_L44
        let aggregate%length%2#1: uint64 = (len 0x32)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x32)
        let aggregate%as_Encoded(len+uint8[])%4#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let ternary_result%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%4#1
        goto block@15
    block@14: // ternary_false_L44
        let aggregate%length%3#1: uint64 = (len 0x33)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x33)
        let aggregate%as_Encoded(len+uint8[])%5#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let ternary_result%0#1: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%5#1
        goto block@15
    block@15: // ternary_merge_L44
        let dynamic_bytes#2: Encoded(len+uint8[]) = φ(ternary_result%0#0 <- block@13, ternary_result%0#1 <- block@14)
        let tmp%30#0: bytes = ((extract 2 0) dynamic_bytes#2)
        let tmp%31#0: bool = (== tmp%30#0 0x33)
        (assert tmp%31#0)
        return 1u