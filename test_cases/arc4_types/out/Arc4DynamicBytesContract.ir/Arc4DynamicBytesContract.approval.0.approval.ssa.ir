main test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program:
    block@0: // L10
        let total#0: uint64 = 0u
        let result%0#0: bytes = (concat 0x 0x02)
        let result%1#0: bytes = (concat result%0#0 0x03)
        let result%2#0: bytes = (concat result%1#0 0x01)
        let array_data%0#0: bytes = (concat 0x0003 result%2#0)
        let dynamic_bytes#0: bytes = array_data%0#0
        let tmp%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
        let tmp%1#0: bool = (== tmp%0#0 0x020301)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== dynamic_bytes#0 0x0003020301)
        (assert tmp%2#0)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_bytes#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L16
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L17
        let array_head_and_tail%0#0: bytes = ((extract 2 0) dynamic_bytes#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 1u)
        let uint8_item#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 1u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi uint8_item#0)
        let total#2: uint64 = (+ total#1 tmp%3#0)
        goto block@3
    block@3: // for_footer_L16
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L16
        let tmp%4#0: bool = (== total#1 6u)
        (assert tmp%4#0) // Total should be of dynamic_bytes items
        let length%0#0: uint64 = (len 0x0304)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x0304)
        let dynamic_bytes2#0: bytes = encoded_value%0#0
        let tmp%5#0: bytes = ((extract 2 0) dynamic_bytes2#0)
        let tmp%6#0: bool = (== tmp%5#0 0x0304)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== dynamic_bytes2#0 0x00020304)
        (assert tmp%7#0)
        let array_length%1#0: uint64 = (extract_uint16 dynamic_bytes2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%1#0
        goto block@5
    block@5: // for_header_L25
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L26
        let array_head_and_tail%1#0: bytes = ((extract 2 0) dynamic_bytes2#0)
        let item_offset%1#0: uint64 = (* item_index_internal%1#1 1u)
        let uint8_item#1: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 1u) // on error: Index access is out of bounds
        let tmp%8#0: uint64 = (btoi uint8_item#1)
        let total#4: uint64 = (+ total#3 tmp%8#0)
        goto block@7
    block@7: // for_footer_L25
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L25
        let to_encode%0#0: bytes = ((extract 2 0) dynamic_bytes2#0)
        let length%1#0: uint64 = (len to_encode%0#0)
        let as_bytes%1#0: bytes = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%0#0)
        let dynamic_bytes3#0: bytes = encoded_value%1#0
        let tmp%9#0: bytes = ((extract 2 0) dynamic_bytes3#0)
        let tmp%10#0: bool = (== tmp%9#0 0x0304)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== dynamic_bytes3#0 0x00020304)
        (assert tmp%11#0)
        let array_length%2#0: uint64 = (extract_uint16 dynamic_bytes3#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        let reverse_index_internal%2#0: uint64 = array_length%2#0
        goto block@9
    block@9: // for_header_L32
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@11)
        let total#5: uint64 = φ(total#3 <- block@8, total#6 <- block@11)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%2#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L33
        let array_head_and_tail%2#0: bytes = ((extract 2 0) dynamic_bytes3#0)
        let item_offset%2#0: uint64 = (* item_index_internal%2#1 1u)
        let uint8_item#2: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 1u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi uint8_item#2)
        let total#6: uint64 = (+ total#5 tmp%12#0)
        goto block@11
    block@11: // for_footer_L32
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@9
    block@12: // after_for_L32
        let tmp%13#0: bool = (== total#5 20u)
        (assert tmp%13#0) // Total should now include sum of dynamic_bytes3 items
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) dynamic_bytes3#0)
        let length%2#0: uint64 = (len 0x616263)
        let as_bytes%2#0: bytes = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x616263)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) encoded_value%2#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%3#0: bytes = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let dynamic_bytes3#2: bytes = concat_result%0#0
        let tmp%14#0: bool = (== dynamic_bytes3#2 0x00050304616263)
        (assert tmp%14#0)
        let tmp%15#0: bytes = ((extract 2 0) dynamic_bytes3#2)
        let tmp%16#0: bool = (== tmp%15#0 0x0304616263)
        (assert tmp%16#0)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        let tmp%19#0: bytes = (select 0x03 0x02 tmp%18#0)
        let result%3#0: bytes = (concat 0x tmp%19#0)
        let result%4#0: bytes = (concat result%3#0 0x03)
        let result%5#0: bytes = (concat result%4#0 0x01)
        let array_data%1#0: bytes = (concat 0x0003 result%5#0)
        let dynamic_bytes#1: bytes = array_data%1#0
        let tmp%20#0: bytes = ((extract 2 0) dynamic_bytes#1)
        let tmp%21#0: bool = (== tmp%20#0 0x030301)
        (assert tmp%21#0)
        let tmp%22#0: uint64 = (txn NumAppArgs)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        goto tmp%23#0 ? block@13 : block@14
    block@13: // ternary_true_L44
        let length%3#0: uint64 = (len 0x32)
        let as_bytes%4#0: bytes = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x32)
        let ternary_result%0#0: bytes = encoded_value%3#0
        goto block@15
    block@14: // ternary_false_L44
        let length%4#0: uint64 = (len 0x33)
        let as_bytes%5#0: bytes = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x33)
        let ternary_result%0#1: bytes = encoded_value%4#0
        goto block@15
    block@15: // ternary_merge_L44
        let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@13, ternary_result%0#1 <- block@14)
        let dynamic_bytes#2: bytes = ternary_result%0#2
        let tmp%24#0: bytes = ((extract 2 0) dynamic_bytes#2)
        let tmp%25#0: bool = (== tmp%24#0 0x33)
        (assert tmp%25#0)
        return 1u