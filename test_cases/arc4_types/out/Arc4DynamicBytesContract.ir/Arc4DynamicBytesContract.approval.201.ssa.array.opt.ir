main test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program:
    block@0: // L10
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L16
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L17
        let tmp%3#0: uint64 = (getbyte 0x020301 item_index_internal%0#1)
        let total#2: uint64 = (+ total#1 tmp%3#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L16
        let tmp%5#0: bool = (== total#1 6u)
        (assert tmp%5#0) // Total should be of dynamic_bytes items
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L25
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 2u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L26
        let tmp%10#0: uint64 = (getbyte 0x0304 item_index_internal%1#1)
        let total#4: uint64 = (+ total#3 tmp%10#0)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L25
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L32
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@10)
        let total#5: uint64 = φ(total#3 <- block@8, total#6 <- block@10)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 2u)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L33
        let tmp%17#0: uint64 = (getbyte 0x0304 item_index_internal%2#1)
        let total#6: uint64 = (+ total#5 tmp%17#0)
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@9
    block@12: // after_for_L32
        let tmp%19#0: bool = (== total#5 20u)
        (assert tmp%19#0) // Total should now include sum of dynamic_bytes3 items
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let select%0#0: Encoded(uint8) = (select 0x03 0x02 tmp%24#0)
        let aggregate%encoded%4#1: bytes = (concat 0x0003 select%0#0)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 0x03)
        let dynamic_bytes#1: Encoded(len+uint8[]) = (concat aggregate%encoded%5#1 0x01)
        let tmp%26#0: bytes = ((extract 2 0) dynamic_bytes#1)
        let tmp%27#0: bool = (== tmp%26#0 0x030301)
        (assert tmp%27#0)
        let tmp%28#0: uint64 = (txn NumAppArgs)
        goto tmp%28#0 ? block@13 : block@14
    block@13: // ternary_true_L44
        let aggregate%encoded_value%2#1: bytes = 0x000132
        goto block@15
    block@14: // ternary_false_L44
        let aggregate%encoded_value%3#1: bytes = 0x000133
        goto block@15
    block@15: // ternary_merge_L44
        let dynamic_bytes#2: Encoded(len+uint8[]) = φ(aggregate%encoded_value%2#1 <- block@13, aggregate%encoded_value%3#1 <- block@14)
        let tmp%30#0: bytes = ((extract 2 0) dynamic_bytes#2)
        let tmp%31#0: bool = (== tmp%30#0 0x33)
        (assert tmp%31#0)
        return 1u