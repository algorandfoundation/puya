HELLO_WORLD = b'Hello World!'

contract Arc4StringTypesContract
{
  approval_program(): bool
  {
    some_bytes_as_string: algopy.arc4.String = arc4_encode(reinterpret_cast<algopy.String>(hex<"48656C6C6F20576F726C6421">), algopy.arc4.String)
    some_bytes_as_bytes_again: algopy.Bytes = reinterpret_cast<algopy.Bytes>(arc4_decode(some_bytes_as_string, algopy.String))
    assert(reinterpret_cast<algopy.Bytes>(some_bytes_as_string) != 'Hello World!', comment="Original bytes should not match encoded bytes")
    assert(reinterpret_cast<algopy.Bytes>(some_bytes_as_string)[2:] == 'Hello World!', comment="Original bytes should match encoded if we strip the length header")
    assert(some_bytes_as_bytes_again == 'Hello World!')
    hello: algopy.arc4.String = arc4_encode('Hello', algopy.arc4.String)
    space: algopy.arc4.String = arc4_encode(' ', algopy.arc4.String)
    world: algopy.arc4.String = arc4_encode('World!', algopy.arc4.String)
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode('Hello World!', algopy.arc4.String)) == reinterpret_cast<algopy.Bytes>(hello + space + world))
    thing: algopy.arc4.String = arc4_encode('hi', algopy.arc4.String)
    thing.extend(thing)
    assert(reinterpret_cast<algopy.Bytes>(thing) == reinterpret_cast<algopy.Bytes>(arc4_encode('hihi', algopy.arc4.String)))
    value: algopy.arc4.String = arc4_encode('a', algopy.arc4.String) + arc4_encode('b', algopy.arc4.String) + arc4_encode('cd', algopy.arc4.String)
    value.extend(arc4_encode('e', algopy.arc4.String))
    value.extend(arc4_encode('f', algopy.arc4.String))
    value.extend(arc4_encode('g', algopy.arc4.String))
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode('abcdefg', algopy.arc4.String)) == reinterpret_cast<algopy.Bytes>(value))
    assert(arc4_decode(arc4_encode('', algopy.arc4.String), algopy.String) == '')
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}