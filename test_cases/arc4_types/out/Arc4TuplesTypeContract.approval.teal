#pragma version 10

test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    // arc4_types/tuples.py:15
    // my_tuple = Tuple((UInt8(1), UInt8(2), String("hello"), String("world"), UInt8(255)))
    byte 0x01020007000eff000568656c6c6f0005776f726c64
    // arc4_types/tuples.py:45
    // total, concat = self.test_stuff(my_tuple)
    callsub test_stuff
    // arc4_types/tuples.py:46
    // assert concat.native == "hello world"
    extract 2 0
    byte "hello world"
    ==
    assert
    // arc4_types/tuples.py:47
    // assert total == 258
    int 258
    ==
    assert
    // arc4_types/tuples.py:49
    // return True
    int 1
    return


// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> uint64, bytes:
test_stuff:
    // arc4_types/tuples.py:54-55
    // @subroutine
    // def test_stuff(self, test_tuple: TestTuple) -> tuple[UInt64, String]:
    proto 1 2
    // arc4_types/tuples.py:56
    // a, b, c, d, e = test_tuple.native
    frame_dig -1
    extract 0 1 // on error: Index access is out of bounds
    frame_dig -1
    extract 1 1 // on error: Index access is out of bounds
    swap
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    uncover 2
    dig 2
    substring3
    cover 3
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    cover 2
    frame_dig -1
    extract 6 1 // on error: Index access is out of bounds
    // arc4_types/tuples.py:62
    // total = a.native + b.native + e.native
    swap
    btoi
    uncover 2
    btoi
    +
    swap
    btoi
    +
    swap
    // arc4_types/tuples.py:63
    // text = c.native + " " + d.native
    uncover 2
    extract 2 0
    byte " "
    concat
    swap
    extract 2 0
    concat
    // arc4_types/tuples.py:65
    // return total, String(text)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
