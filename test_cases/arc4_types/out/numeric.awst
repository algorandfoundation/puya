sixty_four_byte_num = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095

contract Arc4NumericTypesContract
{
  approval_program(): bool
  {
    uint8: puyapy.UInt64 = 255u
    int8_encoded: puyapy.arc4.UInt8 = arc4_encode(uint8, puyapy.arc4.UInt8)
    int8_decoded: puyapy.UInt64 = arc4_decode(int8_encoded, puyapy.UInt64)
    assert(uint8 == int8_decoded)
    test_bytes: puyapy.Bytes = hex<"7FFFFFFFFFFFFFFF00">
    assert(arc4_decode(reinterpret_cast<puyapy.arc4.UInt8>(SINGLE_EVAL(id=0, source=test_bytes)[:select(len(SINGLE_EVAL(id=0, source=test_bytes)), 1u, 1u < len(SINGLE_EVAL(id=0, source=test_bytes)))]), puyapy.UInt64) == 127u)
    assert(arc4_decode(reinterpret_cast<puyapy.arc4.UIntN[typing.Literal[24]]>(SINGLE_EVAL(id=1, source=test_bytes)[:select(len(SINGLE_EVAL(id=1, source=test_bytes)), 3u, 3u < len(SINGLE_EVAL(id=1, source=test_bytes)))]), puyapy.UInt64) == 8388607u)
    assert(arc4_decode(reinterpret_cast<puyapy.arc4.UInt16>(SINGLE_EVAL(id=2, source=test_bytes)[:select(len(SINGLE_EVAL(id=2, source=test_bytes)), 2u, 2u < len(SINGLE_EVAL(id=2, source=test_bytes)))]), puyapy.UInt64) == 32767u)
    assert(arc4_decode(reinterpret_cast<puyapy.arc4.UInt32>(SINGLE_EVAL(id=3, source=test_bytes)[:select(len(SINGLE_EVAL(id=3, source=test_bytes)), 4u, 4u < len(SINGLE_EVAL(id=3, source=test_bytes)))]), puyapy.UInt64) == 2147483647u)
    assert(arc4_decode(reinterpret_cast<puyapy.arc4.UInt64>(SINGLE_EVAL(id=4, source=test_bytes)[:select(len(SINGLE_EVAL(id=4, source=test_bytes)), 8u, 8u < len(SINGLE_EVAL(id=4, source=test_bytes)))]), puyapy.UInt64) == 9223372036854775807u)
    decimals: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 145.6853943940arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(decimals) == itob(1456853943940u))
    decimals_from_truncated_str: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 145.0000000000arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(decimals_from_truncated_str) == itob(1450000000000u))
    thousand: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1000.0000000000arc4u64x10
    assert(len(reinterpret_cast<puyapy.Bytes>(thousand)) == 8u)
    assert(reinterpret_cast<puyapy.Bytes>(thousand) == itob(10000000000000u))
    one_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1.0000000000arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(one_decimal) == itob(10000000000u))
    zero_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 0E-10arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(zero_decimal) == itob(0u))
    small_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1.00E-8arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(small_decimal) == itob(100u))
    smaller_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1.0E-9arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(smaller_decimal) == itob(10u))
    smallest_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1E-10arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(smallest_decimal) == itob(1u))
    sixty_four_decimal: puyapy.arc4.UFixedNxM[typing.Literal[64], typing.Literal[10]] = 1844674407.3709551615arc4u64x10
    assert(reinterpret_cast<puyapy.Bytes>(sixty_four_decimal) == itob(18446744073709551615u))
    really_big_int: puyapy.arc4.UInt512 = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095arc4n512
    assert(reinterpret_cast<puyapy.BigUInt>(really_big_int) == reinterpret_cast<puyapy.BigUInt>(reinterpret_cast<puyapy.arc4.UInt512>(reinterpret_cast<puyapy.Bytes>(really_big_int))))
    really_big_decimal: puyapy.arc4.BigUFixedNxM[typing.Literal[512], typing.Literal[2]] = reinterpret_cast<puyapy.arc4.BigUFixedNxM[typing.Literal[512], typing.Literal[2]]>(reinterpret_cast<puyapy.Bytes>(13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095n))
    biguint: puyapy.BigUInt = 1n
    arc4_biguint_const: puyapy.arc4.UInt128 = 1arc4n128
    arc4_biguint_dynamic: puyapy.arc4.UInt128 = arc4_encode(biguint b+ 1n, puyapy.arc4.UInt128)
    assert(biguint == arc4_decode(arc4_biguint_const, puyapy.BigUInt))
    assert(len(reinterpret_cast<puyapy.Bytes>(arc4_biguint_dynamic)) == 16u)
    assert(len(reinterpret_cast<puyapy.Bytes>(really_big_decimal)) == 64u)
    return true
  }
  
  clear_state_program(): bool
  {
    assert(reinterpret_cast<puyapy.BigUInt>(reinterpret_cast<puyapy.Bytes>(0E-10arc4u64x10)) == 0n)
    assert(reinterpret_cast<puyapy.BigUInt>(reinterpret_cast<puyapy.Bytes>(0.00000arc4n512x5)) == 0n)
    assert(reinterpret_cast<puyapy.BigUInt>(0arc4u8) == reinterpret_cast<puyapy.BigUInt>(0arc4u8))
    assert(reinterpret_cast<puyapy.BigUInt>(0arc4u64) == reinterpret_cast<puyapy.BigUInt>(0arc4u64))
    assert(reinterpret_cast<puyapy.BigUInt>(0arc4n512) == reinterpret_cast<puyapy.BigUInt>(0arc4n512))
    return true
  }
}