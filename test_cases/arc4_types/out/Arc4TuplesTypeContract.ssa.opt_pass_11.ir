contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let boolean_packing#0: bytes = 0x04bd8010
                let tmp%12#0: bool = (== boolean_packing#0 0x04bd8010)
                (assert tmp%12#0)
                let a#0: bytes = ((extract 0 1) boolean_packing#0)
                let is_true%7#0: uint64 = (getbit boolean_packing#0 8u)
                let b#0: bytes = (setbit 0x00 0u is_true%7#0)
                let is_true%8#0: uint64 = (getbit boolean_packing#0 9u)
                let c#0: bytes = (setbit 0x00 0u is_true%8#0)
                let is_true%9#0: uint64 = (getbit boolean_packing#0 10u)
                let d#0: bytes = (setbit 0x00 0u is_true%9#0)
                let is_true%10#0: uint64 = (getbit boolean_packing#0 11u)
                let e#0: bytes = (setbit 0x00 0u is_true%10#0)
                let is_true%11#0: uint64 = (getbit boolean_packing#0 12u)
                let f#0: bytes = (setbit 0x00 0u is_true%11#0)
                let is_true%12#0: uint64 = (getbit boolean_packing#0 13u)
                let g#0: bytes = (setbit 0x00 0u is_true%12#0)
                let is_true%13#0: uint64 = (getbit boolean_packing#0 14u)
                let h#0: bytes = (setbit 0x00 0u is_true%13#0)
                let is_true%14#0: uint64 = (getbit boolean_packing#0 15u)
                let i#0: bytes = (setbit 0x00 0u is_true%14#0)
                let is_true%15#0: uint64 = (getbit boolean_packing#0 16u)
                let j#0: bytes = (setbit 0x00 0u is_true%15#0)
                let k#0: bytes = ((extract 3 1) boolean_packing#0)
                let tmp%14#0: uint64 = (btoi a#0)
                let tmp%15#0: bool = (== tmp%14#0 4u)
                (assert tmp%15#0) // a is 4
                let tmp%16#0: bool = (== b#0 0x00)
                goto tmp%16#0 ? block@1 : block@2
            block@1: // ternary_true_L39
                goto block@18
            block@2: // ternary_false_L39
                let tmp%17#0: bool = (== d#0 0x00)
                goto tmp%17#0 ? block@3 : block@4
            block@3: // ternary_true_L39
                goto block@17
            block@4: // ternary_false_L39
                let tmp%18#0: bool = (== e#0 0x00)
                goto tmp%18#0 ? block@5 : block@6
            block@5: // ternary_true_L39
                goto block@16
            block@6: // ternary_false_L39
                let tmp%19#0: bool = (== f#0 0x00)
                goto tmp%19#0 ? block@7 : block@8
            block@7: // ternary_true_L39
                goto block@15
            block@8: // ternary_false_L39
                let tmp%20#0: bool = (== g#0 0x00)
                goto tmp%20#0 ? block@9 : block@10
            block@9: // ternary_true_L39
                goto block@14
            block@10: // ternary_false_L39
                let tmp%21#0: bool = (== i#0 0x00)
                goto tmp%21#0 ? block@11 : block@12
            block@11: // ternary_true_L39
                goto block@13
            block@12: // ternary_false_L39
                goto block@13
            block@13: // ternary_merge_L39
                let ternary_result%5#2: bytes = φ(i#0 <- block@11, j#0 <- block@12)
                goto block@14
            block@14: // ternary_merge_L39
                let ternary_result%4#2: bytes = φ(g#0 <- block@9, ternary_result%5#2 <- block@13)
                goto block@15
            block@15: // ternary_merge_L39
                let ternary_result%3#2: bytes = φ(f#0 <- block@7, ternary_result%4#2 <- block@14)
                goto block@16
            block@16: // ternary_merge_L39
                let ternary_result%2#2: bytes = φ(e#0 <- block@5, ternary_result%3#2 <- block@15)
                goto block@17
            block@17: // ternary_merge_L39
                let ternary_result%1#2: bytes = φ(d#0 <- block@3, ternary_result%2#2 <- block@16)
                goto block@18
            block@18: // ternary_merge_L39
                let ternary_result%0#2: bytes = φ(b#0 <- block@1, ternary_result%1#2 <- block@17)
                let tmp%22#0: bool = (!= ternary_result%0#2 0x00)
                (assert tmp%22#0) // b,d,e,f,g,i,j are true
                let tmp%23#0: bool = (!= c#0 0x00)
                goto tmp%23#0 ? block@19 : block@20
            block@19: // ternary_true_L40
                goto block@21
            block@20: // ternary_false_L40
                goto block@21
            block@21: // ternary_merge_L40
                let ternary_result%6#2: bytes = φ(c#0 <- block@19, h#0 <- block@20)
                let tmp%24#0: bool = (== ternary_result%6#2 0x00)
                (assert tmp%24#0) // c and h are false
                let tmp%25#0: uint64 = (btoi k#0)
                let tmp%26#0: bool = (== tmp%25#0 16u)
                (assert tmp%26#0) // k is 16
                let encoded_tuple_buffer%2#2: bytes = (concat a#0 b#0)
                let is_true%25#0: uint64 = (getbit c#0 0u)
                let encoded_tuple_buffer%2#3: bytes = (setbit encoded_tuple_buffer%2#2 9u is_true%25#0)
                let is_true%26#0: uint64 = (getbit d#0 0u)
                let encoded_tuple_buffer%2#4: bytes = (setbit encoded_tuple_buffer%2#3 10u is_true%26#0)
                let is_true%27#0: uint64 = (getbit e#0 0u)
                let encoded_tuple_buffer%2#5: bytes = (setbit encoded_tuple_buffer%2#4 11u is_true%27#0)
                let is_true%28#0: uint64 = (getbit f#0 0u)
                let encoded_tuple_buffer%2#6: bytes = (setbit encoded_tuple_buffer%2#5 12u is_true%28#0)
                let is_true%29#0: uint64 = (getbit g#0 0u)
                let encoded_tuple_buffer%2#7: bytes = (setbit encoded_tuple_buffer%2#6 13u is_true%29#0)
                let is_true%30#0: uint64 = (getbit h#0 0u)
                let encoded_tuple_buffer%2#8: bytes = (setbit encoded_tuple_buffer%2#7 14u is_true%30#0)
                let is_true%31#0: uint64 = (getbit i#0 0u)
                let encoded_tuple_buffer%2#9: bytes = (setbit encoded_tuple_buffer%2#8 15u is_true%31#0)
                let encoded_tuple_buffer%2#10: bytes = (concat encoded_tuple_buffer%2#9 j#0)
                let encoded_tuple_buffer%2#11: bytes = (concat encoded_tuple_buffer%2#10 k#0)
                let tmp%27#0: bool = (== boolean_packing#0 encoded_tuple_buffer%2#11)
                (assert tmp%27#0)
                let (total#0: uint64, concat#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(0x01020007000eff000568656c6c6f0005776f726c64)
                let tmp%28#0: bytes = ((extract 2 0) concat#0)
                let tmp%29#0: bool = (== tmp%28#0 "hello world")
                (assert tmp%29#0)
                let tmp%30#0: bool = (== total#0 258u)
                (assert tmp%30#0)
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L54
                let a#0: bytes = ((extract 0 1) test_tuple#0)
                let b#0: bytes = ((extract 1 1) test_tuple#0)
                let item_index%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_length%0#0: uint64 = (extract_uint16 test_tuple#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let c#0: bytes = (extract3 test_tuple#0 item_index%0#0 item_length_plus_2%0#0)
                let item_index%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_length%1#0: uint64 = (extract_uint16 test_tuple#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let d#0: bytes = (extract3 test_tuple#0 item_index%1#0 item_length_plus_2%1#0)
                let e#0: bytes = ((extract 6 1) test_tuple#0)
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%11#0: bytes = (concat value_as_uint16%0#0 text#0)
                return total#0 tmp%11#0
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u