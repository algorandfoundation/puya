main test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    block@0: // L30
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 255u)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let aggregate%uint8%0#1: bytes = (extract3 aggregate%val_as_bytes%0#1 7u 1u)
        let aggregate%as_Encoded(uint8)%0#1: Encoded(uint8) = aggregate%uint8%0#1
        let int8_encoded#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#1
        let int8_decoded#0: uint64 = (btoi int8_encoded#0)
        let tmp%2#0: bool = (== 255u int8_decoded#0)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (btoi 0x7f)
        let tmp%4#0: bool = (== tmp%3#0 127u)
        (assert tmp%4#0)
        let tmp%5#0: uint64 = (btoi 0x7fffff)
        let tmp%6#0: bool = (== tmp%5#0 8388607u)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (btoi 0x7fff)
        let tmp%8#0: bool = (== tmp%7#0 32767u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (btoi 0x7fffffff)
        let tmp%10#0: bool = (== tmp%9#0 2147483647u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (btoi 0x7fffffffffffffff)
        let tmp%12#0: bool = (== tmp%11#0 9223372036854775807u)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%13#0)
        let tmp%15#0: bool = (b== select%0#0 0x02)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let select%1#0: Encoded(uint512) = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%16#0)
        let tmp%18#0: bool = (b== select%1#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%19#0)
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| aggregate%val_as_bytes%1#1 aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let reinterpret_biguint%4#0: biguint = aggregate%as_Encoded(uint512)%0#1
        let tmp%20#0: bool = (b== reinterpret_biguint%4#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        (assert tmp%20#0)
        let tmp%42#0: uint64 = (txn NumAppArgs)
        let select%2#0: Encoded(uint64) = (select 0x0000000000000000 0xffffffffffffffff tmp%42#0)
        let tmp%44#0: bool = (== select%2#0 0x0000000000000000)
        (assert tmp%44#0)
        let aggregate%value_len%0#1: uint64 = (len 2b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 16u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 16u)
        let aggregate%arc4_encoded%1#1: bytes[16] = (b| 2b aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint128)%0#1: Encoded(uint128) = aggregate%arc4_encoded%1#1
        let arc4_biguint_dynamic#0: Encoded(uint128) = aggregate%as_Encoded(uint128)%0#1
        let tmp%47#0: biguint = 0x00000000000000000000000000000001
        let tmp%48#0: bool = (b== 1b tmp%47#0)
        (assert tmp%48#0)
        let tmp%49#0: uint64 = (len arc4_biguint_dynamic#0)
        let tmp%50#0: bool = (== tmp%49#0 16u)
        (assert tmp%50#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob ClearState)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let tmp%53#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x tmp%53#0)
        let aggregate%encoded%1#1: Encoded(uint64) = (concat aggregate%encoded%0#1 0x)
        let tup#0: Encoded(uint64) = aggregate%encoded%1#1
        let aggregate%extract%0#1: bytes = (extract3 tup#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let tmp%55#0: uint64 = (btoi tuple_item%0#0)
        let tmp%56#0: bool = (== tmp%55#0 ClearState)
        (assert tmp%56#0)
        let tmp%57#0: biguint = 0x00000001
        let tmp%58#0: bool = (b== tmp%57#0 1b)
        (assert tmp%58#0)
        return 1u