main test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    block@0: // L30
        let uint8#0: uint64 = 255u
        let val_as_bytes%0#0: bytes[8] = (itob uint8#0)
        let bitlen%0#0: uint64 = (bitlen val_as_bytes%0#0)
        let no_overflow%0#0: bool = (<= bitlen%0#0 8u)
        (assert no_overflow%0#0) // overflow
        let uint8%0#0: bytes = (extract3 val_as_bytes%0#0 7u 1u)
        let int8_encoded#0: bytes[1] = uint8%0#0
        let int8_decoded#0: uint64 = (btoi int8_encoded#0)
        let tmp%0#0: bool = (== uint8#0 int8_decoded#0)
        (assert tmp%0#0)
        let test_bytes#0: bytes = 0x7fffffffffffffff00
        let length%0#0: uint64 = (len test_bytes#0)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let reinterpret_bytes[1]%0#0: bytes[1] = (substring3 test_bytes#0 0u bounded_index%0#0)
        let tmp%1#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%2#0: bool = (== tmp%1#0 127u)
        (assert tmp%2#0)
        let length%1#0: uint64 = (len test_bytes#0)
        let is_out_of_bounds%1#0: bool = (>= 3u length%1#0)
        let bounded_index%1#0: uint64 = (select 3u length%1#0 is_out_of_bounds%1#0)
        let reinterpret_bytes[3]%0#0: bytes[3] = (substring3 test_bytes#0 0u bounded_index%1#0)
        let tmp%3#0: uint64 = (btoi reinterpret_bytes[3]%0#0)
        let tmp%4#0: bool = (== tmp%3#0 8388607u)
        (assert tmp%4#0)
        let length%2#0: uint64 = (len test_bytes#0)
        let is_out_of_bounds%2#0: bool = (>= 2u length%2#0)
        let bounded_index%2#0: uint64 = (select 2u length%2#0 is_out_of_bounds%2#0)
        let reinterpret_bytes[2]%0#0: bytes[2] = (substring3 test_bytes#0 0u bounded_index%2#0)
        let tmp%5#0: uint64 = (btoi reinterpret_bytes[2]%0#0)
        let tmp%6#0: bool = (== tmp%5#0 32767u)
        (assert tmp%6#0)
        let length%3#0: uint64 = (len test_bytes#0)
        let is_out_of_bounds%3#0: bool = (>= 4u length%3#0)
        let bounded_index%3#0: uint64 = (select 4u length%3#0 is_out_of_bounds%3#0)
        let reinterpret_bytes[4]%0#0: bytes[4] = (substring3 test_bytes#0 0u bounded_index%3#0)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[4]%0#0)
        let tmp%8#0: bool = (== tmp%7#0 2147483647u)
        (assert tmp%8#0)
        let length%4#0: uint64 = (len test_bytes#0)
        let is_out_of_bounds%4#0: bool = (>= 8u length%4#0)
        let bounded_index%4#0: uint64 = (select 8u length%4#0 is_out_of_bounds%4#0)
        let reinterpret_bytes[8]%0#0: bytes[8] = (substring3 test_bytes#0 0u bounded_index%4#0)
        let tmp%9#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%10#0: bool = (== tmp%9#0 9223372036854775807u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        let select%0#0: bytes[1] = (select 0x02 0x01 tmp%12#0)
        let reinterpret_biguint%0#0: biguint = select%0#0
        let reinterpret_biguint%1#0: biguint = 0x02
        let tmp%13#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        let select%1#0: bytes[64] = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%15#0)
        let reinterpret_biguint%2#0: biguint = select%1#0
        let reinterpret_biguint%3#0: biguint = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
        let tmp%16#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%16#0)
        let decimals#0: bytes[8] = 0x0000015333430684
        let tmp%17#0: bytes = (itob 1456853943940u)
        let tmp%18#0: bool = (== decimals#0 tmp%17#0)
        (assert tmp%18#0)
        let decimals_from_truncated_str#0: bytes[8] = 0x000001519abc2400
        let tmp%19#0: bytes = (itob 1450000000000u)
        let tmp%20#0: bool = (== decimals_from_truncated_str#0 tmp%19#0)
        (assert tmp%20#0)
        let thousand#0: bytes[8] = 0x000009184e72a000
        let tmp%21#0: uint64 = (len thousand#0)
        let tmp%22#0: bool = (== tmp%21#0 8u)
        (assert tmp%22#0)
        let tmp%23#0: bytes = (itob 10000000000000u)
        let tmp%24#0: bool = (== thousand#0 tmp%23#0)
        (assert tmp%24#0)
        let one_decimal#0: bytes[8] = 0x00000002540be400
        let tmp%25#0: bytes = (itob 10000000000u)
        let tmp%26#0: bool = (== one_decimal#0 tmp%25#0)
        (assert tmp%26#0)
        let zero_decimal#0: bytes[8] = 0x0000000000000000
        let tmp%27#0: bytes = (itob 0u)
        let tmp%28#0: bool = (== zero_decimal#0 tmp%27#0)
        (assert tmp%28#0)
        let small_decimal#0: bytes[8] = 0x0000000000000064
        let tmp%29#0: bytes = (itob 100u)
        let tmp%30#0: bool = (== small_decimal#0 tmp%29#0)
        (assert tmp%30#0)
        let smaller_decimal#0: bytes[8] = 0x000000000000000a
        let tmp%31#0: bytes = (itob 10u)
        let tmp%32#0: bool = (== smaller_decimal#0 tmp%31#0)
        (assert tmp%32#0)
        let smallest_decimal#0: bytes[8] = 0x0000000000000001
        let tmp%33#0: bytes = (itob 1u)
        let tmp%34#0: bool = (== smallest_decimal#0 tmp%33#0)
        (assert tmp%34#0)
        let sixty_four_decimal#0: bytes[8] = 0xffffffffffffffff
        let tmp%35#0: bytes = (itob 18446744073709551615u)
        let tmp%36#0: bool = (== sixty_four_decimal#0 tmp%35#0)
        (assert tmp%36#0)
        let really_big_int#0: bytes[64] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        let reinterpret_biguint%4#0: biguint = really_big_int#0
        let reinterpret_biguint%5#0: biguint = really_big_int#0
        let tmp%37#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%37#0)
        let reinterpret_bytes[64]%0#0: bytes[64] = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b
        let really_big_decimal#0: bytes[64] = reinterpret_bytes[64]%0#0
        let tmp%38#0: uint64 = (txn NumAppArgs)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        let select%2#0: bytes[8] = (select 0x0000000000000000 0xffffffffffffffff tmp%39#0)
        let tmp%40#0: bool = (== select%2#0 0x0000000000000000)
        (assert tmp%40#0)
        let biguint#0: biguint = 1b
        let arc4_biguint_const#0: bytes[16] = 0x00000000000000000000000000000001
        let to_encode%0#0: biguint = (b+ biguint#0 1b)
        let value_len%0#0: uint64 = (len to_encode%0#0)
        let len_ok%0#0: bool = (<= value_len%0#0 16u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 16u)
        let arc4_encoded%0#0: bytes[16] = (b| to_encode%0#0 bzero%0#0)
        let arc4_biguint_dynamic#0: bytes[16] = arc4_encoded%0#0
        let tmp%41#0: bool = (b== biguint#0 arc4_biguint_const#0)
        (assert tmp%41#0)
        let tmp%42#0: uint64 = (len arc4_biguint_dynamic#0)
        let tmp%43#0: bool = (== tmp%42#0 16u)
        (assert tmp%43#0)
        let tmp%44#0: uint64 = (len really_big_decimal#0)
        let tmp%45#0: bool = (== tmp%44#0 64u)
        (assert tmp%45#0)
        let val_as_bytes%1#0: bytes[8] = (itob ClearState)
        let current_tail_offset%0#0: uint64 = 8u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%1#0)
        let tup#0: bytes[8] = encoded_tuple_buffer%1#0
        let tmp%46#0: bytes = (extract3 tup#0 0u 8u) // on error: Index access is out of bounds
        let tmp%47#0: uint64 = (btoi tmp%46#0)
        let tmp%48#0: bool = (== tmp%47#0 ClearState)
        (assert tmp%48#0)
        let tmp%49#0: bool = (b== 0x00000001 1b)
        (assert tmp%49#0)
        return 1u