main test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    block@0: // L30
        let val_as_bytes%0#0: bytes[8] = (itob 255u)
        let bitlen%0#0: uint64 = 8u
        let no_overflow%0#0: bool = 1u
        let int8_encoded#0: bytes[1] = 0xff
        let int8_decoded#0: uint64 = 255u
        let tmp%0#0: bool = 1u
        let length%0#0: uint64 = 9u
        let is_out_of_bounds%0#0: bool = 0u
        let bounded_index%0#0: uint64 = 1u
        let reinterpret_bytes[1]%0#0: bytes[1] = 0x7f
        let tmp%1#0: uint64 = 127u
        let tmp%2#0: bool = 1u
        let length%1#0: uint64 = 9u
        let is_out_of_bounds%1#0: bool = 0u
        let bounded_index%1#0: uint64 = 3u
        let reinterpret_bytes[3]%0#0: bytes[3] = 0x7fffff
        let tmp%3#0: uint64 = 8388607u
        let tmp%4#0: bool = 1u
        let length%2#0: uint64 = 9u
        let is_out_of_bounds%2#0: bool = 0u
        let bounded_index%2#0: uint64 = 2u
        let reinterpret_bytes[2]%0#0: bytes[2] = 0x7fff
        let tmp%5#0: uint64 = 32767u
        let tmp%6#0: bool = 1u
        let length%3#0: uint64 = 9u
        let is_out_of_bounds%3#0: bool = 0u
        let bounded_index%3#0: uint64 = 4u
        let reinterpret_bytes[4]%0#0: bytes[4] = 0x7fffffff
        let tmp%7#0: uint64 = 2147483647u
        let tmp%8#0: bool = 1u
        let length%4#0: uint64 = 9u
        let is_out_of_bounds%4#0: bool = 0u
        let bounded_index%4#0: uint64 = 8u
        let reinterpret_bytes[8]%0#0: bytes[8] = 0x7fffffffffffffff
        let tmp%9#0: uint64 = 9223372036854775807u
        let tmp%10#0: bool = 1u
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        let select%0#0: bytes[1] = (select 0x02 0x01 tmp%11#0)
        let tmp%13#0: bool = (b== select%0#0 0x02)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        let select%1#0: bytes[64] = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%14#0)
        let tmp%16#0: bool = (b== select%1#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        (assert tmp%16#0)
        let tmp%17#0: bytes = (itob 1456853943940u)
        let tmp%18#0: bool = 1u
        let tmp%19#0: bytes = (itob 1450000000000u)
        let tmp%20#0: bool = 1u
        let tmp%21#0: uint64 = 8u
        let tmp%22#0: bool = 1u
        let tmp%23#0: bytes = (itob 10000000000000u)
        let tmp%24#0: bool = 1u
        let tmp%25#0: bytes = (itob 10000000000u)
        let tmp%26#0: bool = 1u
        let tmp%27#0: bytes = (itob 0u)
        let tmp%28#0: bool = 1u
        let tmp%29#0: bytes = (itob 100u)
        let tmp%30#0: bool = 1u
        let tmp%31#0: bytes = (itob 10u)
        let tmp%32#0: bool = 1u
        let tmp%33#0: bytes = (itob 1u)
        let tmp%34#0: bool = 1u
        let tmp%35#0: bytes = (itob 18446744073709551615u)
        let tmp%36#0: bool = 1u
        let tmp%37#0: bool = 1u
        let tmp%38#0: uint64 = (txn NumAppArgs)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        let select%2#0: bytes[8] = (select 0x0000000000000000 0xffffffffffffffff tmp%38#0)
        let tmp%40#0: bool = (== select%2#0 0x0000000000000000)
        (assert tmp%40#0)
        let to_encode%0#0: biguint = 2b
        let len_%0#0: uint64 = 1u
        let no_overflow%1#0: bool = 1u
        let b_zeros%0#0: bytes = (bzero 16u)
        let arc4_biguint_dynamic#0: bytes[16] = 0x00000000000000000000000000000002
        let tmp%41#0: bool = 1u
        let tmp%42#0: uint64 = 16u
        let tmp%43#0: bool = 1u
        let tmp%44#0: uint64 = 64u
        let tmp%45#0: bool = 1u
        let val_as_bytes%1#0: bytes[8] = (itob ClearState)
        let tup#0: bytes[8] = val_as_bytes%1#0
        let tmp%46#0: bytes = 0x0000000000000003
        let tmp%47#0: uint64 = 3u
        let tmp%48#0: bool = 1u
        let tmp%49#0: bool = 1u
        return 1u