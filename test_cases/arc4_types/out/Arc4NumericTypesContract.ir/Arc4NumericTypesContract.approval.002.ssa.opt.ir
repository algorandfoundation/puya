main test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    block@0: // L30
        let int8_encoded#0: Encoded(uint8) = bytes_encode<uint8>(255u)
        let int8_decoded#0: uint64 = decode_bytes<uint64>(int8_encoded#0)
        let tmp%2#0: bool = (== 255u int8_decoded#0)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = decode_bytes<uint64>(0x7f)
        let tmp%4#0: bool = (== tmp%3#0 127u)
        (assert tmp%4#0)
        let tmp%5#0: uint64 = decode_bytes<uint64>(0x7fffff)
        let tmp%6#0: bool = (== tmp%5#0 8388607u)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = decode_bytes<uint64>(0x7fff)
        let tmp%8#0: bool = (== tmp%7#0 32767u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = decode_bytes<uint64>(0x7fffffff)
        let tmp%10#0: bool = (== tmp%9#0 2147483647u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = decode_bytes<uint64>(0x7fffffffffffffff)
        let tmp%12#0: bool = (== tmp%11#0 9223372036854775807u)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%13#0)
        let tmp%15#0: bool = (b== select%0#0 0x02)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (txn NumAppArgs)
        let select%1#0: Encoded(uint512) = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%16#0)
        let tmp%18#0: bool = (b== select%1#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let reinterpret_biguint%4#0: biguint = bytes_encode<uint512>(tmp%19#0)
        let tmp%20#0: bool = (b== reinterpret_biguint%4#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        (assert tmp%20#0)
        let tmp%42#0: uint64 = (txn NumAppArgs)
        let select%2#0: Encoded(uint64) = (select 0x0000000000000000 0xffffffffffffffff tmp%42#0)
        let tmp%44#0: bool = (== select%2#0 0x0000000000000000)
        (assert tmp%44#0)
        let arc4_biguint_dynamic#0: Encoded(uint512) = bytes_encode<uint512>(2b)
        let tmp%47#0: biguint = decode_bytes<biguint>(0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
        let tmp%48#0: bool = (b== 1b tmp%47#0)
        (assert tmp%48#0)
        let tmp%49#0: uint64 = decode_bytes<uint64>(0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
        let tmp%50#0: biguint = (itob tmp%49#0)
        let tmp%51#0: bool = (b== 1b tmp%50#0)
        (assert tmp%51#0)
        let tmp%52#0: uint64 = (len arc4_biguint_dynamic#0)
        let tmp%53#0: bool = (== tmp%52#0 64u)
        (assert tmp%53#0)
        let tmp%56#0: Encoded(uint64) = bytes_encode<uint64>(ClearState)
        let tup#0: Encoded(uint64) = bytes_encode<(uint64)>(tmp%56#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(tup#0, 0)
        let tmp%58#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%59#0: bool = (== tmp%58#0 ClearState)
        (assert tmp%59#0)
        let tmp%60#0: biguint = decode_bytes<biguint>(0x00000001)
        let tmp%61#0: bool = (b== tmp%60#0 1b)
        (assert tmp%61#0)
        let tmp%63#0: bool = (== int8_decoded#0 255u)
        (assert tmp%63#0)
        let tmp%64#0: biguint = decode_bytes<biguint>(int8_encoded#0)
        let tmp%65#0: bool = (b== tmp%64#0 255b)
        (assert tmp%65#0)
        let tmp%66#0: biguint = decode_bytes<biguint>(0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff)
        let tmp%67#0: bool = (b== tmp%66#0 18446744073709551615b)
        (assert tmp%67#0)
        return 1u