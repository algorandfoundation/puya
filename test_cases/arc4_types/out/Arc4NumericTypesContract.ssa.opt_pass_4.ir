contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> bool:
            block@0: // L30
                let tmp%1#0: bytes = 0x7f
                let tmp%2#0: uint64 = (btoi tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 127u)
                (assert tmp%3#0)
                let tmp%4#0: bytes = 0x7fffff
                let tmp%5#0: uint64 = (btoi tmp%4#0)
                let tmp%6#0: bool = (== tmp%5#0 8388607u)
                (assert tmp%6#0)
                let tmp%7#0: bytes = 0x7fff
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bool = (== tmp%8#0 32767u)
                (assert tmp%9#0)
                let tmp%10#0: bytes = 0x7fffffff
                let tmp%11#0: uint64 = (btoi tmp%10#0)
                let tmp%12#0: bool = (== tmp%11#0 2147483647u)
                (assert tmp%12#0)
                let tmp%13#0: bytes = 0x7fffffffffffffff
                let tmp%14#0: uint64 = (btoi tmp%13#0)
                let tmp%15#0: bool = (== tmp%14#0 9223372036854775807u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (txn NumAppArgs)
                let reinterpret_biguint%0#0: biguint = (select 0x02 0x01 tmp%16#0)
                let tmp%18#0: bool = (b== reinterpret_biguint%0#0 0x02)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (txn NumAppArgs)
                let reinterpret_biguint%2#0: biguint = (select 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 tmp%19#0)
                let tmp%21#0: bool = (b== reinterpret_biguint%2#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%21#0)
                let tmp%43#0: uint64 = (txn NumAppArgs)
                let tmp%45#0: bytes = (select 0x0000000000000000 0xffffffffffffffff tmp%43#0)
                let tmp%46#0: bool = (== tmp%45#0 0x0000000000000000)
                (assert tmp%46#0)
                let tmp%49#0: bool = 1u
                (assert tmp%49#0)
                let tmp%54#0: bool = 1u
                (assert tmp%54#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> bool:
            block@0: // L113
                return 1u