contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> bool:
            block@0: // L7
                let len_16_bit%7#0: bytes = 0x0007
                let value#3: bytes = (concat len_16_bit%7#0 0x61626364656667)
                let tmp%6#0: bool = (== 0x000761626364656667 value#3)
                (assert tmp%6#0)
                let tmp%11#0: uint64 = (txn NumAppArgs)
                goto tmp%11#0 ? block@1 : block@2
            block@1: // ternary_true_L41
                let ternary_result%0#0: bytes = 0x0003617965
                goto block@3
            block@2: // ternary_false_L41
                let ternary_result%0#1: bytes = 0x0003626565
                goto block@3
            block@3: // ternary_merge_L41
                let ternary_result%0#2: bytes = Ï†(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                let tmp%13#0: bool = (== ternary_result%0#2 0x0003626565)
                (assert tmp%13#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> bool:
            block@0: // L44
                return 1u