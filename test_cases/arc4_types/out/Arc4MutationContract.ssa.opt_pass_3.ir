contract test_cases.arc4_types.mutation.Arc4MutationContract:
    program approval:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.approval_program() -> bool:
            block@0: // L34
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
                test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
                return 1u
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
            block@0: // L143
                let expr_value_trimmed%0#0: bytes = 0x0102
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0x32)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let dynamic_uint8_array#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let array_data%1#3: bytes = 0x0003010232
                let tmp%0#0: bool = (== dynamic_uint8_array#1 array_data%1#3)
                (assert tmp%0#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) dynamic_uint8_array#1)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 expr_value_trimmed%1#0)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let dynamic_uint8_array#2: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let array_data%2#3: bytes = 0x0006010232
                let array_data%2#4: bytes = (concat array_data%2#3 0x01)
                let array_data%2#5: bytes = (concat array_data%2#4 0x02)
                let array_data%2#6: bytes = (concat array_data%2#5 0x32)
                let tmp%1#0: bool = (== dynamic_uint8_array#2 array_data%2#6)
                (assert tmp%1#0)
                let expr_value_trimmed%3#0: bytes = ((extract 2 0) dynamic_uint8_array#2)
                let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 0x045a)
                let len_%2#0: uint64 = (len concatenated%2#0)
                let len_bytes%2#0: bytes = (itob len_%2#0)
                let len_16_bit%2#0: bytes = ((extract 6 0) len_bytes%2#0)
                let dynamic_uint8_array#3: bytes = (concat len_16_bit%2#0 concatenated%2#0)
                let array_data%3#3: bytes = 0x0008010232
                let array_data%3#4: bytes = (concat array_data%3#3 0x01)
                let array_data%3#5: bytes = (concat array_data%3#4 0x02)
                let array_data%3#6: bytes = (concat array_data%3#5 0x32)
                let array_data%3#7: bytes = (concat array_data%3#6 0x04)
                let array_data%3#8: bytes = (concat array_data%3#7 0x5a)
                let tmp%2#0: bool = (== dynamic_uint8_array#3 array_data%3#8)
                (assert tmp%2#0)
                let (popped#0: bytes, dynamic_uint8_array#4: bytes) = algopy_lib_arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#3, 1u)
                let tmp%3#0: bool = (b== popped#0 0x5a)
                (assert tmp%3#0)
                let array_data%4#3: bytes = 0x0007010232
                let array_data%4#4: bytes = (concat array_data%4#3 0x01)
                let array_data%4#5: bytes = (concat array_data%4#4 0x02)
                let array_data%4#6: bytes = (concat array_data%4#5 0x32)
                let array_data%4#7: bytes = (concat array_data%4#6 0x04)
                let tmp%4#0: bool = (== dynamic_uint8_array#4 array_data%4#7)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
            block@0: // L166
                let dynamic_bool_array#0: bytes = 0x000280
                let tmp%2#0: bool = (== dynamic_bool_array#0 0x000280)
                (assert tmp%2#0)
                let dynamic_bool_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, 0x8000, 2u, 0u)
                let tmp%5#0: bool = (== dynamic_bool_array#1 0x0004a0)
                (assert tmp%5#0)
                let array_data%1#2: bytes = 0x000480
                let array_data%1#3: bytes = (setbit array_data%1#2 18u 1u)
                let array_data%1#4: bytes = (setbit array_data%1#3 19u 0u)
                let tmp%10#0: bool = (== dynamic_bool_array#1 array_data%1#4)
                (assert tmp%10#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
                let data%1#0: bytes = ((extract 2 0) dynamic_bool_array#1)
                let dynamic_bool_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#1, data%1#0, array_length%0#0, 1u)
                let array_data%2#2: bytes = 0x000880
                let array_data%2#3: bytes = (setbit array_data%2#2 18u 1u)
                let array_data%2#4: bytes = (setbit array_data%2#3 19u 0u)
                let array_data%2#5: bytes = (setbit array_data%2#4 20u 1u)
                let array_data%2#6: bytes = (setbit array_data%2#5 21u 0u)
                let array_data%2#7: bytes = (setbit array_data%2#6 22u 1u)
                let array_data%2#8: bytes = (setbit array_data%2#7 23u 0u)
                let tmp%19#0: bool = (== dynamic_bool_array#2 array_data%2#8)
                (assert tmp%19#0)
                let dynamic_bool_array#3: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#2, 0x80, 1u, 0u)
                let array_data%3#2: bytes = 0x000980
                let array_data%3#3: bytes = (setbit array_data%3#2 18u 1u)
                let array_data%3#4: bytes = (setbit array_data%3#3 19u 0u)
                let array_data%3#5: bytes = (setbit array_data%3#4 20u 1u)
                let array_data%3#6: bytes = (setbit array_data%3#5 21u 0u)
                let array_data%3#7: bytes = (setbit array_data%3#6 22u 1u)
                let array_data%3#8: bytes = (setbit array_data%3#7 23u 0u)
                let array_data%3#9: bytes = (concat array_data%3#8 0x80)
                let tmp%30#0: bool = (== dynamic_bool_array#3 array_data%3#9)
                (assert tmp%30#0)
                let (popped%0#1: bytes, dynamic_bool_array#4: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
                let tmp%32#0: bool = (== popped%0#1 0x80)
                (assert tmp%32#0)
                let (popped%1#1: bytes, dynamic_bool_array#5: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
                let tmp%34#0: bool = (== popped%1#1 0x00)
                (assert tmp%34#0)
                let array_data%4#2: bytes = 0x000780
                let array_data%4#3: bytes = (setbit array_data%4#2 18u 1u)
                let array_data%4#4: bytes = (setbit array_data%4#3 19u 0u)
                let array_data%4#5: bytes = (setbit array_data%4#4 20u 1u)
                let array_data%4#6: bytes = (setbit array_data%4#5 21u 0u)
                let array_data%4#7: bytes = (setbit array_data%4#6 22u 1u)
                let tmp%42#0: bool = (== dynamic_bool_array#5 array_data%4#7)
                (assert tmp%42#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
            block@0: // L213
                let hello#0: bytes = 0x000548656c6c6f
                let world#0: bytes = 0x0005576f726c64
                let foo#0: bytes = 0x0003466f6f
                let bar#0: bytes = 0x0003426172
                let element_length%0#0: uint64 = (len hello#0)
                let next_offset%0#1: uint64 = (+ 4u element_length%0#0)
                let value_as_bytes%5#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let array_data%0#2: bytes = (concat 0x00020004 value_as_uint16%5#0)
                let element_length%1#0: uint64 = (len world#0)
                let array_data%0#3: bytes = (concat array_data%0#2 hello#0)
                let dynamic_string_array#0: bytes = (concat array_data%0#3 world#0)
                let tmp%0#0: bool = (== dynamic_string_array#0 "\x00\x02\x00\x04\x00\x0b\x00\x05Hello\x00\x05World")
                (assert tmp%0#0)
                let data%0#2: bytes = (concat foo#0 bar#0)
                let dynamic_string_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#0, data%0#2, 2u)
                let tmp%1#0: bool = (== dynamic_string_array#1 "\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar")
                (assert tmp%1#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_string_array#1 0u)
                let start_of_data%0#0: uint64 = (* array_length%0#0 2u)
                let start_of_data%0#1: uint64 = (+ start_of_data%0#0 2u)
                let total_length%0#0: uint64 = (len dynamic_string_array#1)
                let data%1#0: bytes = (substring3 dynamic_string_array#1 start_of_data%0#1 total_length%0#0)
                let dynamic_string_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#1, data%1#0, array_length%0#0)
                let next_offset%1#1: uint64 = (+ 16u element_length%0#0)
                let value_as_bytes%7#0: bytes = (itob next_offset%1#1)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let array_data%1#2: bytes = (concat 0x00080010 value_as_uint16%7#0)
                let next_offset%1#2: uint64 = (+ next_offset%1#1 element_length%1#0)
                let value_as_bytes%8#0: bytes = (itob next_offset%1#2)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let array_data%1#3: bytes = (concat array_data%1#2 value_as_uint16%8#0)
                let element_length%4#0: uint64 = (len foo#0)
                let next_offset%1#3: uint64 = (+ next_offset%1#2 element_length%4#0)
                let value_as_bytes%9#0: bytes = (itob next_offset%1#3)
                let value_as_uint16%9#0: bytes = ((extract 6 2) value_as_bytes%9#0)
                let array_data%1#4: bytes = (concat array_data%1#3 value_as_uint16%9#0)
                let element_length%5#0: uint64 = (len bar#0)
                let next_offset%1#4: uint64 = (+ next_offset%1#3 element_length%5#0)
                let value_as_bytes%10#0: bytes = (itob next_offset%1#4)
                let value_as_uint16%10#0: bytes = ((extract 6 2) value_as_bytes%10#0)
                let array_data%1#5: bytes = (concat array_data%1#4 value_as_uint16%10#0)
                let next_offset%1#5: uint64 = (+ next_offset%1#4 element_length%0#0)
                let value_as_bytes%11#0: bytes = (itob next_offset%1#5)
                let value_as_uint16%11#0: bytes = ((extract 6 2) value_as_bytes%11#0)
                let array_data%1#6: bytes = (concat array_data%1#5 value_as_uint16%11#0)
                let next_offset%1#6: uint64 = (+ next_offset%1#5 element_length%1#0)
                let value_as_bytes%12#0: bytes = (itob next_offset%1#6)
                let value_as_uint16%12#0: bytes = ((extract 6 2) value_as_bytes%12#0)
                let array_data%1#7: bytes = (concat array_data%1#6 value_as_uint16%12#0)
                let next_offset%1#7: uint64 = (+ next_offset%1#6 element_length%4#0)
                let value_as_bytes%13#0: bytes = (itob next_offset%1#7)
                let value_as_uint16%13#0: bytes = ((extract 6 2) value_as_bytes%13#0)
                let array_data%1#8: bytes = (concat array_data%1#7 value_as_uint16%13#0)
                let array_data%1#9: bytes = (concat array_data%1#8 hello#0)
                let array_data%1#10: bytes = (concat array_data%1#9 world#0)
                let array_data%1#11: bytes = (concat array_data%1#10 foo#0)
                let array_data%1#12: bytes = (concat array_data%1#11 bar#0)
                let array_data%1#13: bytes = (concat array_data%1#12 hello#0)
                let array_data%1#14: bytes = (concat array_data%1#13 world#0)
                let array_data%1#15: bytes = (concat array_data%1#14 foo#0)
                let dynamic_string_array#3: bytes = (concat array_data%1#15 bar#0)
                let tmp%2#0: bool = (== dynamic_string_array#2 dynamic_string_array#3)
                (assert tmp%2#0)
                let dynamic_string_array#4: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#3, hello#0, 3u)
                let dynamic_string_array#5: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#4, hello#0, 5u)
                let next_offset%3#4: uint64 = (+ next_offset%1#3 element_length%0#0)
                let value_as_bytes%26#0: bytes = (itob next_offset%3#4)
                let value_as_uint16%26#0: bytes = ((extract 6 2) value_as_bytes%26#0)
                let array_data%3#5: bytes = (concat array_data%1#4 value_as_uint16%26#0)
                let next_offset%3#5: uint64 = (+ next_offset%3#4 element_length%0#0)
                let value_as_bytes%27#0: bytes = (itob next_offset%3#5)
                let value_as_uint16%27#0: bytes = ((extract 6 2) value_as_bytes%27#0)
                let array_data%3#6: bytes = (concat array_data%3#5 value_as_uint16%27#0)
                let next_offset%3#6: uint64 = (+ next_offset%3#5 element_length%0#0)
                let value_as_bytes%28#0: bytes = (itob next_offset%3#6)
                let value_as_uint16%28#0: bytes = ((extract 6 2) value_as_bytes%28#0)
                let array_data%3#7: bytes = (concat array_data%3#6 value_as_uint16%28#0)
                let next_offset%3#7: uint64 = (+ next_offset%3#6 element_length%4#0)
                let value_as_bytes%29#0: bytes = (itob next_offset%3#7)
                let value_as_uint16%29#0: bytes = ((extract 6 2) value_as_bytes%29#0)
                let array_data%3#8: bytes = (concat array_data%3#7 value_as_uint16%29#0)
                let array_data%3#9: bytes = (concat array_data%3#8 hello#0)
                let array_data%3#10: bytes = (concat array_data%3#9 world#0)
                let array_data%3#11: bytes = (concat array_data%3#10 foo#0)
                let array_data%3#12: bytes = (concat array_data%3#11 hello#0)
                let array_data%3#13: bytes = (concat array_data%3#12 hello#0)
                let array_data%3#14: bytes = (concat array_data%3#13 hello#0)
                let array_data%3#15: bytes = (concat array_data%3#14 foo#0)
                let array_data%3#16: bytes = (concat array_data%3#15 bar#0)
                let tmp%3#0: bool = (== dynamic_string_array#5 array_data%3#16)
                (assert tmp%3#0)
                let (popped%0#1: bytes, dynamic_string_array#6: bytes) = algopy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#5)
                let tmp%4#0: bool = (== popped%0#1 bar#0)
                (assert tmp%4#0)
                let (popped%1#1: bytes, dynamic_string_array#7: bytes) = algopy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#6)
                let tmp%5#0: bool = (== popped%1#1 foo#0)
                (assert tmp%5#0)
                let next_offset%4#1: uint64 = (+ 12u element_length%0#0)
                let value_as_bytes%31#0: bytes = (itob next_offset%4#1)
                let value_as_uint16%31#0: bytes = ((extract 6 2) value_as_bytes%31#0)
                let array_data%4#2: bytes = (concat 0x0006000c value_as_uint16%31#0)
                let next_offset%4#2: uint64 = (+ next_offset%4#1 element_length%1#0)
                let value_as_bytes%32#0: bytes = (itob next_offset%4#2)
                let value_as_uint16%32#0: bytes = ((extract 6 2) value_as_bytes%32#0)
                let array_data%4#3: bytes = (concat array_data%4#2 value_as_uint16%32#0)
                let next_offset%4#3: uint64 = (+ next_offset%4#2 element_length%4#0)
                let value_as_bytes%33#0: bytes = (itob next_offset%4#3)
                let value_as_uint16%33#0: bytes = ((extract 6 2) value_as_bytes%33#0)
                let array_data%4#4: bytes = (concat array_data%4#3 value_as_uint16%33#0)
                let next_offset%4#4: uint64 = (+ next_offset%4#3 element_length%0#0)
                let value_as_bytes%34#0: bytes = (itob next_offset%4#4)
                let value_as_uint16%34#0: bytes = ((extract 6 2) value_as_bytes%34#0)
                let array_data%4#5: bytes = (concat array_data%4#4 value_as_uint16%34#0)
                let next_offset%4#5: uint64 = (+ next_offset%4#4 element_length%0#0)
                let value_as_bytes%35#0: bytes = (itob next_offset%4#5)
                let value_as_uint16%35#0: bytes = ((extract 6 2) value_as_bytes%35#0)
                let array_data%4#6: bytes = (concat array_data%4#5 value_as_uint16%35#0)
                let array_data%4#7: bytes = (concat array_data%4#6 hello#0)
                let array_data%4#8: bytes = (concat array_data%4#7 world#0)
                let array_data%4#9: bytes = (concat array_data%4#8 foo#0)
                let array_data%4#10: bytes = (concat array_data%4#9 hello#0)
                let array_data%4#11: bytes = (concat array_data%4#10 hello#0)
                let array_data%4#12: bytes = (concat array_data%4#11 hello#0)
                let tmp%6#0: bool = (== dynamic_string_array#7 array_data%4#12)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
            block@0: // L70
                let array_of_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(0x0000, 0x00010a, 1u)
                let tmp%1#0: bool = (== array_of_array#1 0x0001000200010a)
                (assert tmp%1#0)
                let array_of_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(array_of_array#1, 0x000110, 1u)
                let tmp%2#0: bool = (== array_of_array#2 0x00020004000700010a000110)
                (assert tmp%2#0)
                let array_length%0#0: uint64 = (extract_uint16 array_of_array#2 0u)
                (assert array_length%0#0) // Index access is out of bounds
                let array_data_sans_header%0#0: bytes = ((extract 2 0) array_of_array#2)
                let item_index%0#0: uint64 = (extract_uint16 array_data_sans_header%0#0 0u)
                let item_length%0#0: uint64 = (extract_uint16 array_data_sans_header%0#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%3#0: bytes = (extract3 array_data_sans_header%0#0 item_index%0#0 item_length_plus_2%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%3#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0xff)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%2#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let array_of_array#3: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#2, concat_result%2#0, 0u)
                let tmp%4#0: bool = (== array_of_array#3 0x00020004000800020aff000110)
                (assert tmp%4#0)
                let array_length%1#0: uint64 = (extract_uint16 array_of_array#3 0u)
                (assert array_length%1#0) // Index access is out of bounds
                let array_data_sans_header%1#0: bytes = ((extract 2 0) array_of_array#3)
                let item_index%1#0: uint64 = (extract_uint16 array_data_sans_header%1#0 0u)
                let item_length%1#0: uint64 = (extract_uint16 array_data_sans_header%1#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let tmp%5#0: bytes = (extract3 array_data_sans_header%1#0 item_index%1#0 item_length_plus_2%1#0)
                let array_length%2#0: uint64 = (extract_uint16 tmp%5#0 0u)
                let index_is_in_bounds%2#0: bool = (< 1u array_length%2#0)
                (assert index_is_in_bounds%2#0) // Index access is out of bounds
                let updated_target%0#0: bytes = ((replace2 3) tmp%5#0 0x00)
                let array_of_array#4: bytes = algopy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#3, updated_target%0#0, 0u)
                let tmp%6#0: bool = (== array_of_array#4 0x00020004000800020a00000110)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
            block@0: // L85
                let array_of_array#0: bytes = 0x0a094080
                let tmp%0#0: bool = (== array_of_array#0 0x0a094080)
                (assert tmp%0#0)
                let array_of_array#1: bytes = ((replace2 0) array_of_array#0 0xfffe)
                let tmp%1#0: bool = (== array_of_array#1 0xfffe4080)
                (assert tmp%1#0)
                let tmp%2#0: bytes = ((extract 2 2) array_of_array#1)
                let updated_target%1#0: bytes = ((replace2 0) tmp%2#0 0x01)
                let array_of_array#2: bytes = ((replace2 2) array_of_array#1 updated_target%1#0)
                let tmp%3#0: bool = (== array_of_array#2 0xfffe0180)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
            block@0: // L100
                let array_length%0#0: uint64 = 2u
                (assert array_length%0#0) // Index access is out of bounds
                let dynamic_uint8_array#1: bytes = ((replace2 2) 0x00020102 0xff)
                let tmp%0#0: bool = (== dynamic_uint8_array#1 0x0002ff02)
                (assert tmp%0#0)
                let static_uint8_array#1: bytes = ((replace2 1) 0x0102 0xff)
                let tmp%1#0: bool = (== static_uint8_array#1 0x01ff)
                (assert tmp%1#0)
                let dynamic_bool_array#0: bytes = 0x000280
                let array_length%1#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
                (assert array_length%1#0) // Index access is out of bounds
                let dynamic_bool_array#1: bytes = (setbit dynamic_bool_array#0 16u 0u)
                let tmp%4#0: bool = (== dynamic_bool_array#1 0x000200)
                (assert tmp%4#0)
                let static_bool_array#0: bytes = 0xc0
                let static_bool_array#1: bytes = (setbit static_bool_array#0 1u 0u)
                let tmp%7#0: bool = (== static_bool_array#1 0x80)
                (assert tmp%7#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
            block@0: // L116
                let tmp%1#0: bytes = 0x00054861707079
                let tmp%2#0: bytes = 0x000444617973
                let encoded_tuple_buffer%0#3: bytes = 0x80320006
                let data_length%0#0: uint64 = (len tmp%1#0)
                let current_tail_offset%0#1: uint64 = (+ 6u data_length%0#0)
                let value_as_bytes%3#0: bytes = (itob current_tail_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let encoded_tuple_buffer%0#4: bytes = (concat encoded_tuple_buffer%0#3 value_as_uint16%3#0)
                let encoded_tuple_buffer%0#5: bytes = (concat encoded_tuple_buffer%0#4 tmp%1#0)
                let test_struct#0: bytes = (concat encoded_tuple_buffer%0#5 tmp%2#0)
                let test_struct#1: bytes = (setbit test_struct#0 0u 0u)
                let test_struct#2: bytes = ((replace2 1) test_struct#1 0x0c)
                let tmp%4#0: bytes = 0x00054861707079
                let tmp%5#0: bytes = 0x000444617973
                let encoded_tuple_buffer%1#3: bytes = 0x000c0006
                let data_length%2#0: uint64 = (len tmp%4#0)
                let current_tail_offset%1#1: uint64 = (+ 6u data_length%2#0)
                let value_as_bytes%7#0: bytes = (itob current_tail_offset%1#1)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let encoded_tuple_buffer%1#4: bytes = (concat encoded_tuple_buffer%1#3 value_as_uint16%7#0)
                let encoded_tuple_buffer%1#5: bytes = (concat encoded_tuple_buffer%1#4 tmp%4#0)
                let encoded_tuple_buffer%1#6: bytes = (concat encoded_tuple_buffer%1#5 tmp%5#0)
                let tmp%6#0: bool = (== test_struct#2 encoded_tuple_buffer%1#6)
                (assert tmp%6#0)
                let assigned_value%2#0: bytes = 0x0005486d6d6d6d
                let item_offset%0#0: uint64 = (extract_uint16 test_struct#2 2u)
                let data_up_to_item%0#0: bytes = (extract3 test_struct#2 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 test_struct#2 4u)
                let total_data_length%0#0: uint64 = (len test_struct#2)
                let data_beyond_item%0#0: bytes = (substring3 test_struct#2 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%2#0: bytes = (concat data_up_to_item%0#0 assigned_value%2#0)
                let updated_data%2#1: bytes = (concat updated_data%2#0 data_beyond_item%0#0)
                let new_value_length%0#0: uint64 = (len assigned_value%2#0)
                let tail_cursor%0#0: uint64 = (+ item_offset%0#0 new_value_length%0#0)
                let updated_header_bytes%0#0: bytes = (itob tail_cursor%0#0)
                let updated_header_bytes%0#1: bytes = ((substring 6 8) updated_header_bytes%0#0)
                let test_struct#3: bytes = ((replace2 4) updated_data%2#1 updated_header_bytes%0#1)
                let assigned_value%3#0: bytes = 0x00074f682077656c6c
                let item_offset%1#0: uint64 = (extract_uint16 test_struct#3 4u)
                let data_up_to_item%1#0: bytes = (extract3 test_struct#3 0u item_offset%1#0)
                let test_struct#4: bytes = (concat data_up_to_item%1#0 assigned_value%3#0)
                let tmp%8#0: bytes = 0x0005486d6d6d6d
                let tmp%9#0: bytes = 0x00074f682077656c6c
                let encoded_tuple_buffer%2#3: bytes = 0x000c0006
                let data_length%4#0: uint64 = (len tmp%8#0)
                let current_tail_offset%2#1: uint64 = (+ 6u data_length%4#0)
                let value_as_bytes%13#0: bytes = (itob current_tail_offset%2#1)
                let value_as_uint16%13#0: bytes = ((extract 6 2) value_as_bytes%13#0)
                let encoded_tuple_buffer%2#4: bytes = (concat encoded_tuple_buffer%2#3 value_as_uint16%13#0)
                let encoded_tuple_buffer%2#5: bytes = (concat encoded_tuple_buffer%2#4 tmp%8#0)
                let encoded_tuple_buffer%2#6: bytes = (concat encoded_tuple_buffer%2#5 tmp%9#0)
                let tmp%10#0: bool = (== test_struct#4 encoded_tuple_buffer%2#6)
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
            block@0: // L58
                let expr_value_trimmed%0#0: bytes = 0x0102
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0x0304)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let array_concat_tuple#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let array_data%1#3: bytes = 0x0004010203
                let array_data%1#4: bytes = (concat array_data%1#3 0x04)
                let tmp%0#0: bool = (== array_concat_tuple#0 array_data%1#4)
                (assert tmp%0#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) array_concat_tuple#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 0x05)
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let array_concat_tuple#1: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let array_data%2#3: bytes = 0x0005010203
                let array_data%2#4: bytes = (concat array_data%2#3 0x04)
                let array_data%2#5: bytes = (concat array_data%2#4 0x05)
                let tmp%1#0: bool = (== array_concat_tuple#1 array_data%2#5)
                (assert tmp%1#0)
                let tmp%2#0: bytes = 0x000548656c6c6f
                let tmp%3#0: bytes = 0x0005576f726c64
                let element_length%0#0: uint64 = (len tmp%2#0)
                let next_offset%0#1: uint64 = (+ 4u element_length%0#0)
                let value_as_bytes%3#0: bytes = (itob next_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let array_data%3#2: bytes = (concat 0x00020004 value_as_uint16%3#0)
                let array_data%3#3: bytes = (concat array_data%3#2 tmp%2#0)
                let hello_world#0: bytes = (concat array_data%3#3 tmp%3#0)
                let tmp%4#0: bytes = 0x0005576f726c64
                let array_data%4#2: bytes = (concat 0x00010002 tmp%4#0)
                let array_length%0#0: uint64 = (extract_uint16 array_data%4#2 0u)
                let start_of_data%0#0: uint64 = (* array_length%0#0 2u)
                let start_of_data%0#1: uint64 = (+ start_of_data%0#0 2u)
                let total_length%0#0: uint64 = (len array_data%4#2)
                let data%2#0: bytes = (substring3 array_data%4#2 start_of_data%0#1 total_length%0#0)
                let tmp%5#0: bytes = 0x000548656c6c6f
                let array_data%5#2: bytes = (concat 0x00010002 tmp%5#0)
                let hello_world_concat#0: bytes = algopy_lib_arc4.dynamic_array_concat_variable_size(array_data%5#2, data%2#0, array_length%0#0)
                let tmp%6#0: bool = (== hello_world#0 hello_world_concat#0)
                (assert tmp%6#0)
                return 
        
        subroutine algopy_lib_arc4.dynamic_array_pop_bit(source: bytes) -> <bytes, bytes>:
            block@0: // L20
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let popped_location#0: uint64 = (+ length_minus_1#0 16u)
                let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
                let popped#0: bytes = (setbit "\x00" 0u tmp%2#0)
                let result#1: bytes = (setbit result#0 popped_location#0 0u)
                let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
                let tmp%4#0: uint64 = (/ tmp%3#0 8u)
                let tmp%5#0: uint64 = (+ 2u tmp%4#0)
                let result#2: bytes = (substring3 result#1 0u tmp%5#0)
                return popped#0 result#2
        
        subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size(source: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
            block@0: // L39
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let tmp%2#0: uint64 = (len result#0)
                let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
                let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
                let result#1: bytes = (substring3 result#0 0u item_location#0)
                return popped#0 result#1
        
        subroutine algopy_lib_arc4.dynamic_array_pop_variable_size(source: bytes) -> <bytes, bytes>:
            block@0: // L57
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
                let data_sans_header#0: bytes = ((extract 2 0) source#0)
                let popped_header#0: uint64 = (extract_uint16 data_sans_header#0 popped_header_offset#0)
                let tmp%0#0: uint64 = (len data_sans_header#0)
                let popped#0: bytes = (substring3 data_sans_header#0 popped_header#0 tmp%0#0)
                let tmp%1#0: bytes = (substring3 data_sans_header#0 0u popped_header_offset#0)
                let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
                let tmp%3#0: bytes = (substring3 data_sans_header#0 tmp%2#0 popped_header#0)
                let data_sans_header#1: bytes = (concat tmp%1#0 tmp%3#0)
                let tmp%4#0: bytes = (itob length_minus_1#0)
                let tmp%5#0: bytes = ((extract 6 0) tmp%4#0)
                let tmp%6#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(data_sans_header#1, length_minus_1#0, 0u)
                let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
                return popped#0 updated#0
        
        subroutine algopy_lib_arc4.dynamic_array_concat_bits(source: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: bool) -> bytes:
            block@0: // L84
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_array_length#0)
                let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 new_array_length_b#0)
                let tmp%1#0: uint64 = (+ array_length#0 7u)
                let current_bytes#0: uint64 = (/ tmp%1#0 8u)
                let tmp%2#0: uint64 = (+ new_array_length#0 7u)
                let required_bytes#0: uint64 = (/ tmp%2#0 8u)
                let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
                goto tmp%3#0 ? block@1 : block@2
            block@1: // if_body_L106
                let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let result#1: bytes = (concat result#0 tmp%5#0)
                goto block@2
            block@2: // after_if_else_L106
                let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1)
                let write_offset#0: uint64 = (+ array_length#0 16u)
                goto is_packed#0 ? block@3 : block@4
            block@3: // ternary_true_L110
                let ternary_result%0#0: uint64 = 1u
                goto block@5
            block@4: // ternary_false_L110
                let ternary_result%0#1: uint64 = 8u
                goto block@5
            block@5: // ternary_merge_L110
                let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4)
                (assert ternary_result%0#2) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@6
            block@6: // for_header_L110
                let i#0: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@7)
                let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@7)
                let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@7)
                let continue_looping%0#0: bool = (< i#0 new_items_count#0)
                goto continue_looping%0#0 ? block@7 : block@10
            block@7: // for_body_L110
                let tmp%6#0: uint64 = (getbit new_items_bytes#0 i#0)
                let result#3: bytes = (setbit result#4 write_offset#3 tmp%6#0)
                let write_offset#2: uint64 = (+ write_offset#3 1u)
                let range_item%0#3: uint64 = (+ i#0 ternary_result%0#2)
                goto block@6
            block@10: // after_for_L110
                return result#4
        
        subroutine algopy_lib_arc4.dynamic_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L117
                let size_b#0: bytes = ((substring 0 2) source#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) source#0)
                let tmp%1#0: bytes = algopy_lib_arc4.static_array_replace_variable_size(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine algopy_lib_arc4.static_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L139
                let tmp%0#0: bool = (< index#0 array_length#0)
                (assert tmp%0#0) // Index out of bounds
                let tmp%1#0: uint64 = (* index#0 2u)
                let offset_for_index#0: uint64 = (extract_uint16 source#0 tmp%1#0)
                let old_item_length#0: uint64 = (extract_uint16 source#0 offset_for_index#0)
                let tmp%2#0: uint64 = (+ offset_for_index#0 old_item_length#0)
                let old_item_end#0: uint64 = (+ tmp%2#0 2u)
                let tmp%3#0: bytes = (substring3 source#0 0u offset_for_index#0)
                let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
                let tmp%5#0: uint64 = (len source#0)
                let tmp%6#0: bytes = (substring3 source#0 old_item_end#0 tmp%5#0)
                let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
                let tmp%8#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(tmp%7#0, array_length#0, index#0)
                return tmp%8#0
        
        subroutine algopy_lib_arc4.dynamic_array_concat_variable_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L166
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: uint64 = (* array_length#0 2u)
                let header_end#0: uint64 = (+ tmp%0#0 2u)
                let tmp%1#0: bytes = (itob new_length#0)
                let tmp%2#0: bytes = ((extract 6 0) tmp%1#0)
                let tmp%3#0: bytes = (substring3 source#0 2u header_end#0)
                let tmp%4#0: uint64 = (* new_items_count#0 2u)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                let tmp%7#0: uint64 = (len source#0)
                let tmp%8#0: bytes = (substring3 source#0 header_end#0 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
                let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
                let tmp%11#0: bytes = algopy_lib_arc4.recalculate_array_offsets_static(tmp%10#0, new_length#0, 0u)
                let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
                return tmp%12#0
        
        subroutine algopy_lib_arc4.recalculate_array_offsets_static(array_data: bytes, length: uint64, start_at_index: uint64) -> bytes:
            block@0: // L195
                let header_cursor#0: uint64 = (* start_at_index#0 2u)
                goto start_at_index#0 ? block@2 : block@1
            block@1: // if_body_L210
                let tail_cursor#0: uint64 = (* length#0 2u)
                goto block@3
            block@2: // else_body_L210
                let tail_cursor#1: uint64 = (extract_uint16 array_data#0 header_cursor#0)
                goto block@3
            block@3: // after_if_else_L210
                let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2)
                goto block@4
            block@4: // for_header_L215
                let _i#0: uint64 = φ(start_at_index#0 <- block@3, range_item%0#3 <- block@5)
                let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@5)
                let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@5)
                let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@5)
                let continue_looping%0#0: bool = (< _i#0 length#0)
                goto continue_looping%0#0 ? block@5 : block@8
            block@5: // for_body_L215
                let tmp%1#0: bytes = (itob tail_cursor#4)
                let tail_cursor_bytes#0: bytes = ((extract 6 0) tmp%1#0)
                let array_data#2: bytes = (replace3 array_data#3 header_cursor#3 tail_cursor_bytes#0)
                let tmp%2#0: uint64 = (extract_uint16 array_data#2 tail_cursor#4)
                let tmp%3#0: uint64 = (+ tmp%2#0 2u)
                let tail_cursor#3: uint64 = (+ tail_cursor#4 tmp%3#0)
                let header_cursor#2: uint64 = (+ header_cursor#3 2u)
                let range_item%0#3: uint64 = (+ _i#0 1u)
                goto block@4
            block@8: // after_for_L215
                return array_data#3
    
    program clear-state:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.clear_state_program() -> bool:
            block@0: // L45
                return 1u