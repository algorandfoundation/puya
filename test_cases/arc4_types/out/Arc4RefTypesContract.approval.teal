#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.reference_types.Arc4RefTypesContract.approval_program() -> uint64:
main:
    // arc4_types/reference_types.py:6-8
    // # When creating an address from an account no need to check the length as we assume the
    // # Account is valid
    // sender_address = arc4.Address(op.Txn.sender)
    txn Sender
    // arc4_types/reference_types.py:9
    // assert sender_address == op.Txn.sender
    dupn 2
    ==
    assert
    // arc4_types/reference_types.py:10-12
    // # When creating an address from bytes, we check the length is 32 as we don't know the
    // # source of the bytes
    // checked_address = arc4.Address(op.Txn.sender.bytes)
    txn Sender
    dup
    cover 2
    // arc4_types/reference_types.py:13-15
    // # When using from_bytes, no validation is performed as per all implementations of
    // # from_bytes
    // unchecked_address = arc4.Address.from_bytes(op.Txn.sender.bytes)
    txn Sender
    cover 2
    // arc4_types/reference_types.py:16
    // assert sender_address == checked_address and checked_address == unchecked_address
    ==
    bz main_bool_false@3
    dup2
    ==
    bz main_bool_false@3
    pushint 1 // 1

main_bool_merge@4:
    // arc4_types/reference_types.py:16
    // assert sender_address == checked_address and checked_address == unchecked_address
    assert
    // arc4_types/reference_types.py:19
    // return True
    pushint 1 // 1
    return

main_bool_false@3:
    pushint 0 // 0
    b main_bool_merge@4
