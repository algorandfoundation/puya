contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let encoded_tuple_buffer%27#0: bytes = 0x04bc
                let encoded_tuple_buffer%28#0: bytes = (setbit encoded_tuple_buffer%27#0 14u 0u)
                let encoded_tuple_buffer%29#0: bytes = (setbit encoded_tuple_buffer%28#0 15u 1u)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 0x80)
                let encoded_tuple_buffer%31#0: bytes = (concat encoded_tuple_buffer%30#0 0x10)
                let tmp%17#0: bool = (== 0x04bd8010 encoded_tuple_buffer%31#0)
                (assert tmp%17#0)
                let (total#0: uint64, concat#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(0x01020007000eff000568656c6c6f0005776f726c64)
                let tmp%18#0: bytes = ((extract 2 0) concat#0)
                let tmp%19#0: bool = (== tmp%18#0 "hello world")
                (assert tmp%19#0)
                let tmp%20#0: bool = (== total#0 258u)
                (assert tmp%20#0)
                test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy()
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L56
                let a#0: bytes = ((extract 0 1) test_tuple#0) // on error: Index access is out of bounds
                let b#0: bytes = ((extract 1 1) test_tuple#0) // on error: Index access is out of bounds
                let item_start_offset%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let c#0: bytes = (substring3 test_tuple#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len test_tuple#0)
                let d#0: bytes = (substring3 test_tuple#0 item_end_offset%0#0 item_end_offset%1#0)
                let e#0: bytes = ((extract 6 1) test_tuple#0) // on error: Index access is out of bounds
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 text#0)
                return total#0 encoded_value%0#0
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
            block@0: // L69
                let updated_target%0#0: bytes = ((replace2 2) 0x000100 0x01)
                let tup#2: bytes = (concat 0x000003 updated_target%0#0)
                let item_start_offset%3#0: uint64 = (extract_uint16 tup#2 1u)
                let item_end_offset%3#0: uint64 = (len tup#2)
                let tmp%4#0: bytes = (substring3 tup#2 item_start_offset%3#0 item_end_offset%3#0)
                let tmp%6#0: bool = (!= tmp%4#0 0x000100)
                (assert tmp%6#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L53
                return 1u