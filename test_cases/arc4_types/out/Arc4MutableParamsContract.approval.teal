#pragma version 10

test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    // arc4_types/mutable_params.py:29
    // self.mutating_copies()
    callsub mutating_copies
    // arc4_types/mutable_params.py:31
    // return True
    int 1
    return


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
mutating_copies:
    // arc4_types/mutable_params.py:33-34
    // @subroutine
    // def mutating_copies(self) -> None:
    proto 0 0
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304
    // arc4_types/mutable_params.py:46
    // my_array[2] = UInt8(5)
    byte 0x05
    replace2 2
    // arc4_types/mutable_params.py:49
    // assert my_array[2] == UInt8(5), "my_array should be mutated"
    dup
    extract 2 1 // on error: Index access is out of bounds
    byte 0x05
    b==
    assert // my_array should be mutated
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x80320006000d00054861707079000444617973
    // arc4_types/mutable_params.py:51-52
    // # Pass to subroutine without a copy
    // t, f = self.other_routine(my_array, my_struct)
    callsub other_routine
    cover 3
    cover 2
    swap
    // arc4_types/mutable_params.py:53
    // assert t
    assert
    // arc4_types/mutable_params.py:54
    // assert not f
    !
    assert
    // arc4_types/mutable_params.py:56
    // assert my_array[1] == UInt8(5), "my_array has been mutated by the subroutine"
    dup
    extract 1 1 // on error: Index access is out of bounds
    byte 0x05
    b==
    assert // my_array has been mutated by the subroutine
    // arc4_types/mutable_params.py:58
    // assert my_struct.s_val_1 == String(
    dig 1
    int 2
    extract_uint16
    swap
    dig 2
    int 4
    extract_uint16
    uncover 3
    uncover 3
    uncover 2
    substring3
    // arc4_types/mutable_params.py:58-60
    // assert my_struct.s_val_1 == String(
    //     "AARRGH!"
    // ), "my_struct has been mutated by the subroutine"
    byte 0x000741415252474821
    ==
    assert // my_struct has been mutated by the subroutine
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x80320006000d00054861707079000444617973
    // arc4_types/mutable_params.py:62-63
    // # Pass to subroutine with copy
    // self.other_routine(my_array_copy.copy(), my_struct_copy.copy())
    callsub other_routine
    popn 4
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304
    // arc4_types/mutable_params.py:75
    // my_array_copy_2 = self.other_routine_2(my_array_copy_2)
    callsub other_routine_2
    pop
    // arc4_types/mutable_params.py:77
    // assert my_array_copy_2[0] == UInt8(1), "my_array_copy_2 should have original value"
    dup
    extract 0 1 // on error: Index access is out of bounds
    byte 0x01
    b==
    assert // my_array_copy_2 should have original value
    // arc4_types/mutable_params.py:79
    // self.other_routine_2(my_array_copy_2)
    callsub other_routine_2
    bury 1
    // arc4_types/mutable_params.py:80
    // assert my_array_copy_2[0] == UInt8(10), "my_array_copy_2 should have mutated value"
    dup
    extract 0 1 // on error: Index access is out of bounds
    byte 0x0a
    b==
    assert // my_array_copy_2 should have mutated value
    // arc4_types/mutable_params.py:82-83
    // # tuples of mutable types only work with a .copy()
    // self.other_routine_3((my_array.copy(), my_array_copy_2.copy(), my_array_copy_2.copy()))
    dup2
    uncover 2
    callsub other_routine_3
    popn 3
    // arc4_types/mutable_params.py:87
    // self.other_routine_2(nested.test_array.copy())
    extract 0 4 // on error: Index access is out of bounds
    callsub other_routine_2
    popn 2
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> uint64, uint64, bytes, bytes:
other_routine:
    // arc4_types/mutable_params.py:89-90
    // @subroutine
    // def other_routine(self, array: TestArray, struct: TestStruct) -> tuple[bool, bool]:
    proto 2 4
    // arc4_types/mutable_params.py:91
    // array[1] = UInt8(5)
    frame_dig -2
    byte 0x05
    replace2 1
    frame_bury -2
    // arc4_types/mutable_params.py:92
    // struct.s_val_1 = String("AARRGH!")
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    int 0
    dig 2
    extract3
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    dig 2
    uncover 2
    substring3
    uncover 2
    byte 0x000741415252474821
    concat
    swap
    concat
    swap
    uncover 2
    -
    swap
    dup
    int 4
    extract_uint16
    int 9
    +
    uncover 2
    -
    itob
    extract 6 2
    replace2 4
    frame_bury -1
    // arc4_types/mutable_params.py:93
    // return True, False
    int 1
    int 0
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> bytes, bytes:
other_routine_2:
    // arc4_types/mutable_params.py:95-96
    // @subroutine
    // def other_routine_2(self, array: TestArray) -> TestArray:
    proto 1 2
    // arc4_types/mutable_params.py:98
    // array[0] = UInt8(10)
    frame_dig -1
    byte 0x0a
    replace2 0
    // arc4_types/mutable_params.py:99
    // return copy
    frame_dig -1
    swap
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_3(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes) -> bytes, bytes, bytes:
other_routine_3:
    // arc4_types/mutable_params.py:101-102
    // @subroutine
    // def other_routine_3(self, arrays: tuple[TestArray, TestArray, TestArray]) -> None:
    proto 3 3
    byte ""
    int 0

other_routine_3_for_body@1:
    dup
    int 1
    +
    frame_bury 0
    // arc4_types/mutable_params.py:103-104
    // # this modifies the local copy
    // for array in arrays:
    switch other_routine_3_for_header_1@3 other_routine_3_for_header_2@4
    b other_routine_3_after_for@5

other_routine_3_for_header_1@3:
    frame_dig 0
    b other_routine_3_for_body@1

other_routine_3_for_header_2@4:
    frame_dig 0
    b other_routine_3_for_body@1

other_routine_3_after_for@5:
    // arc4_types/mutable_params.py:107
    // arrays[0][0] = UInt8(99)
    frame_dig -3
    byte 0x63
    replace2 0
    frame_bury -3
    // arc4_types/mutable_params.py:108
    // arrays[1][0] = UInt8(99)
    frame_dig -2
    byte 0x63
    replace2 0
    frame_bury -2
    // arc4_types/mutable_params.py:109
    // arrays[2][0] = UInt8(99)
    frame_dig -1
    byte 0x63
    replace2 0
    frame_bury -1
    frame_dig -3
    frame_dig -2
    frame_dig -1
    uncover 3
    retsub
