contract test_cases.arc4_types.array.Arc4ArraysContract:
    program approval:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> bool:
            block@0: // L24
                let total#0: uint64 = 0u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let continue_looping%0#0: bool = (< item_index_internal%0#0 2u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L27
                let uint8_item#0: bytes = (extract3 0x0102 item_index_internal%0#0 1u)
                let tmp%0#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%0#0)
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L27
                let tmp%1#0: bool = (== total#0 3u)
                (assert tmp%1#0) // Total should be sum of dynamic_uint8_array items
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L32
                let continue_looping%1#0: bool = (< item_index_internal%1#0 1u)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L32
                let item_index%1#0: uint64 = (* item_index_internal%1#0 2u)
                let uint16_item#0: bytes = (extract3 0x0001 item_index%1#0 2u)
                let tmp%2#0: uint64 = (btoi uint16_item#0)
                let total#0: uint64 = (+ total#0 tmp%2#0)
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@5
            block@8: // after_for_L32
                let tmp%3#0: bool = (== total#0 4u)
                (assert tmp%3#0) // Total should now include sum of aliased_dynamic items
                let result#0: bytes = ""
                let item_index_internal%2#0: uint64 = 0u
                let index#0: uint64 = item_index_internal%2#0
                goto block@9
            block@9: // for_header_L39
                let continue_looping%2#0: bool = (< index#0 2u)
                goto continue_looping%2#0 ? block@10 : block@15
            block@10: // for_body_L39
                let item_index_index%1#0: uint64 = (* index#0 2u)
                let item_index%3#0: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 item_index_index%1#0)
                let item_length%1#0: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 item_index%3#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let string_item#0: bytes = (extract3 0x0004000b000548656c6c6f0005576f726c64 item_index%3#0 item_length_plus_2%1#0)
                goto index#0 ? block@12 : block@11
            block@11: // if_body_L40
                let result#0: bytes = ((extract 2 0) string_item#0)
                goto block@13
            block@12: // else_body_L40
                let tmp%12#0: bytes = ((extract 2 0) string_item#0)
                let tmp%13#0: bytes = (concat " " tmp%12#0)
                let result#0: bytes = (concat result#0 tmp%13#0)
                goto block@13
            block@13: // after_if_else_L40
                let item_index_internal%2#0: uint64 = (+ index#0 1u)
                let index#0: uint64 = item_index_internal%2#0
                goto block@9
            block@15: // after_for_L39
                let tmp%14#0: bool = (== result#0 "Hello World")
                (assert tmp%14#0)
                let item_index_internal%3#0: uint64 = 0u
                goto block@16
            block@16: // for_header_L49
                let continue_looping%3#0: bool = (< item_index_internal%3#0 4u)
                goto continue_looping%3#0 ? block@17 : block@19
            block@17: // for_body_L49
                let item_index%4#0: uint64 = (* item_index_internal%3#0 4u)
                let uint32_item#0: bytes = (extract3 0x000000010000000a000000ff00000080 item_index%4#0 4u)
                let tmp%15#0: uint64 = (btoi uint32_item#0)
                let total#0: uint64 = (+ total#0 tmp%15#0)
                let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
                goto block@16
            block@19: // after_for_L49
                let tmp%16#0: bool = (== total#0 398u)
                (assert tmp%16#0)
                let result#0: bytes = ""
                let item_index_internal%4#0: uint64 = 0u
                let index#0: uint64 = item_index_internal%4#0
                goto block@20
            block@20: // for_header_L63
                let continue_looping%4#0: bool = (< index#0 2u)
                goto continue_looping%4#0 ? block@21 : block@26
            block@21: // for_body_L63
                let item_index_index%2#0: uint64 = (* index#0 2u)
                let item_index%7#0: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 item_index_index%2#0)
                let item_length%2#0: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 item_index%7#0)
                let item_length_plus_2%2#0: uint64 = (+ item_length%2#0 2u)
                let string_item#0: bytes = (extract3 0x0004000a000450696e670004506f6e67 item_index%7#0 item_length_plus_2%2#0)
                goto index#0 ? block@23 : block@22
            block@22: // if_body_L64
                let result#0: bytes = ((extract 2 0) string_item#0)
                goto block@24
            block@23: // else_body_L64
                let tmp%26#0: bytes = ((extract 2 0) string_item#0)
                let tmp%27#0: bytes = (concat " " tmp%26#0)
                let result#0: bytes = (concat result#0 tmp%27#0)
                goto block@24
            block@24: // after_if_else_L64
                let item_index_internal%4#0: uint64 = (+ index#0 1u)
                let index#0: uint64 = item_index_internal%4#0
                goto block@20
            block@26: // after_for_L63
                let tmp%28#0: bool = (== result#0 "Ping Pong")
                (assert tmp%28#0)
                test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(0x54657374696e6720313233)
                return 1u
        
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
            block@0: // L75
                let tmp%0#0: bytes = (sha3_256 commitment_args_concat#0)
                return tmp%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.clear_state_program() -> bool:
            block@0: // L79
                return 1u