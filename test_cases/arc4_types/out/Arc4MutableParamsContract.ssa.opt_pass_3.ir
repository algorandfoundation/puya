contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> bool:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let result%2#0: bytes = 0x010203
                let my_array#0: bytes = (concat result%2#0 0x04)
                let encoded_tuple_buffer%3#0: bytes = 0x80320006
                let offset_as_uint16%1#0: bytes = 0x000d
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 "\x00\x05Happy")
                let my_struct#0: bytes = (concat encoded_tuple_buffer%5#0 "\x00\x04Days")
                let my_array#1: bytes = ((replace2 2) my_array#0 0x05)
                let reinterpret_biguint%0#0: biguint = ((extract 2 1) my_array#0) // on error: Index access is out of bounds
                let tmp%0#0: bool = (b== reinterpret_biguint%0#0 0x03)
                (assert tmp%0#0) // my_array_copy should be unchanged
                let reinterpret_biguint%2#0: biguint = ((extract 2 1) my_array#1) // on error: Index access is out of bounds
                let tmp%1#0: bool = (b== reinterpret_biguint%2#0 0x05)
                (assert tmp%1#0) // my_array should be mutated
                let (t#0: bool, f#0: bool, my_array#2: bytes, my_struct#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
                (assert t#0)
                let tmp%2#0: bool = (! f#0)
                (assert tmp%2#0)
                let reinterpret_biguint%4#0: biguint = ((extract 1 1) my_array#2) // on error: Index access is out of bounds
                let tmp%3#0: bool = (b== reinterpret_biguint%4#0 0x05)
                (assert tmp%3#0) // my_array has been mutated by the subroutine
                let item_start_offset%0#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 my_struct#1 4u)
                let tmp%4#0: bytes = (substring3 my_struct#1 item_start_offset%0#0 item_end_offset%0#0)
                let tmp%5#0: bool = (== tmp%4#0 "\x00\x07AARRGH!")
                (assert tmp%5#0) // my_struct has been mutated by the subroutine
                let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: bytes, other_routine%7#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#0, my_struct#0)
                let reinterpret_biguint%6#0: biguint = ((extract 1 1) my_array#0) // on error: Index access is out of bounds
                let tmp%6#0: bool = (b== reinterpret_biguint%6#0 0x02)
                (assert tmp%6#0) // my_array_copy should not be mutated by the subroutine
                let item_start_offset%1#0: uint64 = (extract_uint16 my_struct#0 2u)
                let item_end_offset%1#0: uint64 = (extract_uint16 my_struct#0 4u)
                let tmp%7#0: bytes = (substring3 my_struct#0 item_start_offset%1#0 item_end_offset%1#0)
                let tmp%8#0: bool = (== tmp%7#0 "\x00\x05Happy")
                (assert tmp%8#0) // my_struct_copy should not be mutated by the subroutine
                let (my_array_copy_2#2: bytes, my_array_copy_2#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array#0)
                let reinterpret_biguint%8#0: biguint = ((extract 0 1) my_array_copy_2#2) // on error: Index access is out of bounds
                let tmp%9#0: bool = (b== reinterpret_biguint%8#0 0x01)
                (assert tmp%9#0) // my_array_copy_2 should have original value
                let (other_routine_2%2#0: bytes, my_array_copy_2#3: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let reinterpret_biguint%10#0: biguint = ((extract 0 1) my_array_copy_2#3) // on error: Index access is out of bounds
                let tmp%10#0: bool = (b== reinterpret_biguint%10#0 0x0a)
                (assert tmp%10#0) // my_array_copy_2 should have mutated value
                let (other_routine_3%0#0: bytes, other_routine_3%1#0: bytes, other_routine_3%2#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_3(my_array#2, my_array_copy_2#3, my_array_copy_2#3)
                let tmp%11#0: bytes = ((extract 0 4) my_array#2) // on error: Index access is out of bounds
                let (other_routine_2%4#0: bytes, other_routine_2%5#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tmp%11#0)
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <bool, bool, bytes, bytes>:
            block@0: // L89
                let array#1: bytes = ((replace2 1) array#0 0x05)
                let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%0#0: uint64 = (len struct#0)
                let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 "\x00\x07AARRGH!")
                let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 4u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 9u)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%0#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let struct#1: bytes = ((replace2 4) updated_data%1#0 tail_offset_bytes%0#0)
                return 1u 0u array#1 struct#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L95
                let array#1: bytes = ((replace2 0) array#0 0x0a)
                return array#0 array#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_3(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes) -> <bytes, bytes, bytes>:
            block@0: // L101
                let loop_counter%0#0: uint64 = 0u
                goto block@1
            block@1: // for_body_L105
                let loop_counter%0#1: uint64 = Ï†(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4)
                goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5
            block@3: // for_header_1_L104
                let loop_counter%0#2: uint64 = 1u
                goto block@1
            block@4: // for_header_2_L104
                let loop_counter%0#3: uint64 = 2u
                goto block@1
            block@5: // after_for_L104
                let arrays.0#2: bytes = ((replace2 0) arrays.0#0 0x63)
                let arrays.1#2: bytes = ((replace2 0) arrays.1#0 0x63)
                let arrays.2#2: bytes = ((replace2 0) arrays.2#0 0x63)
                return arrays.0#2 arrays.1#2 arrays.2#2
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> bool:
            block@0: // L111
                return 1u