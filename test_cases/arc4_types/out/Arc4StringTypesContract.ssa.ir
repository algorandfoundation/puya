contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L7
                let length%0#0: uint64 = (len 0x48656c6c6f20576f726c6421)
                let value_as_bytes%1#0: bytes = (itob length%0#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let some_bytes_as_string#0: bytes = (concat value_as_uint16%2#0 0x48656c6c6f20576f726c6421)
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%3#0: uint64 = (!= some_bytes_as_string#0 "Hello World!")
                (assert tmp%3#0) // Original bytes should not match encoded bytes
                let awst_tmp%4#0: bytes = some_bytes_as_string#0
                let tmp%5#0: uint64 = (len awst_tmp%4#0)
                let tmp%6#0: uint64 = (len awst_tmp%4#0)
                let tmp%7#0: uint64 = (< 2u tmp%6#0)
                let tmp%8#0: uint64 = (select tmp%5#0 2u tmp%7#0)
                let base_length%9#0: uint64 = (len awst_tmp%4#0)
                let tmp%10#0: bytes = (substring3 awst_tmp%4#0 tmp%8#0 base_length%9#0)
                let tmp%11#0: uint64 = (== tmp%10#0 "Hello World!")
                (assert tmp%11#0) // Original bytes should match encoded if we strip the length header
                let tmp%12#0: uint64 = (== some_bytes_as_bytes_again#0 "Hello World!")
                (assert tmp%12#0)
                let hello#0: bytes = "\x00\x05Hello"
                let space#0: bytes = "\x00\x01 "
                let world#0: bytes = "\x00\x06World!"
                let expr_value_trimmed%13#0: bytes = ((extract 2 0) hello#0)
                let expr_value_trimmed%14#0: bytes = ((extract 2 0) space#0)
                let concatenated%15#0: bytes = (concat expr_value_trimmed%13#0 expr_value_trimmed%14#0)
                let len_%16#0: uint64 = (len concatenated%15#0)
                let len_bytes%17#0: bytes = (itob len_%16#0)
                let len_16_bit%18#0: bytes = ((extract 6 0) len_bytes%17#0)
                let concat_result%19#0: bytes = (concat len_16_bit%18#0 concatenated%15#0)
                let expr_value_trimmed%20#0: bytes = ((extract 2 0) concat_result%19#0)
                let expr_value_trimmed%21#0: bytes = ((extract 2 0) world#0)
                let concatenated%22#0: bytes = (concat expr_value_trimmed%20#0 expr_value_trimmed%21#0)
                let len_%23#0: uint64 = (len concatenated%22#0)
                let len_bytes%24#0: bytes = (itob len_%23#0)
                let len_16_bit%25#0: bytes = ((extract 6 0) len_bytes%24#0)
                let concat_result%26#0: bytes = (concat len_16_bit%25#0 concatenated%22#0)
                let tmp%27#0: uint64 = (== "\x00\x0cHello World!" concat_result%26#0)
                (assert tmp%27#0)
                let thing#0: bytes = "\x00\x02hi"
                let expr_value_trimmed%28#0: bytes = ((extract 2 0) thing#0)
                let expr_value_trimmed%29#0: bytes = ((extract 2 0) thing#0)
                let concatenated%30#0: bytes = (concat expr_value_trimmed%28#0 expr_value_trimmed%29#0)
                let len_%31#0: uint64 = (len concatenated%30#0)
                let len_bytes%32#0: bytes = (itob len_%31#0)
                let len_16_bit%33#0: bytes = ((extract 6 0) len_bytes%32#0)
                let concat_result%34#0: bytes = (concat len_16_bit%33#0 concatenated%30#0)
                let thing#1: bytes = concat_result%34#0
                let tmp%35#0: uint64 = (== thing#1 "\x00\x04hihi")
                (assert tmp%35#0)
                let expr_value_trimmed%36#0: bytes = ((extract 2 0) "\x00\x01a")
                let expr_value_trimmed%37#0: bytes = ((extract 2 0) "\x00\x01b")
                let concatenated%38#0: bytes = (concat expr_value_trimmed%36#0 expr_value_trimmed%37#0)
                let len_%39#0: uint64 = (len concatenated%38#0)
                let len_bytes%40#0: bytes = (itob len_%39#0)
                let len_16_bit%41#0: bytes = ((extract 6 0) len_bytes%40#0)
                let concat_result%42#0: bytes = (concat len_16_bit%41#0 concatenated%38#0)
                let expr_value_trimmed%43#0: bytes = ((extract 2 0) concat_result%42#0)
                let expr_value_trimmed%44#0: bytes = ((extract 2 0) "\x00\x02cd")
                let concatenated%45#0: bytes = (concat expr_value_trimmed%43#0 expr_value_trimmed%44#0)
                let len_%46#0: uint64 = (len concatenated%45#0)
                let len_bytes%47#0: bytes = (itob len_%46#0)
                let len_16_bit%48#0: bytes = ((extract 6 0) len_bytes%47#0)
                let concat_result%49#0: bytes = (concat len_16_bit%48#0 concatenated%45#0)
                let value#0: bytes = concat_result%49#0
                let expr_value_trimmed%50#0: bytes = ((extract 2 0) value#0)
                let expr_value_trimmed%51#0: bytes = ((extract 2 0) "\x00\x01e")
                let concatenated%52#0: bytes = (concat expr_value_trimmed%50#0 expr_value_trimmed%51#0)
                let len_%53#0: uint64 = (len concatenated%52#0)
                let len_bytes%54#0: bytes = (itob len_%53#0)
                let len_16_bit%55#0: bytes = ((extract 6 0) len_bytes%54#0)
                let concat_result%56#0: bytes = (concat len_16_bit%55#0 concatenated%52#0)
                let value#1: bytes = concat_result%56#0
                let expr_value_trimmed%57#0: bytes = ((extract 2 0) value#1)
                let expr_value_trimmed%58#0: bytes = ((extract 2 0) "\x00\x01f")
                let concatenated%59#0: bytes = (concat expr_value_trimmed%57#0 expr_value_trimmed%58#0)
                let len_%60#0: uint64 = (len concatenated%59#0)
                let len_bytes%61#0: bytes = (itob len_%60#0)
                let len_16_bit%62#0: bytes = ((extract 6 0) len_bytes%61#0)
                let concat_result%63#0: bytes = (concat len_16_bit%62#0 concatenated%59#0)
                let value#2: bytes = concat_result%63#0
                let expr_value_trimmed%64#0: bytes = ((extract 2 0) value#2)
                let expr_value_trimmed%65#0: bytes = ((extract 2 0) "\x00\x01g")
                let concatenated%66#0: bytes = (concat expr_value_trimmed%64#0 expr_value_trimmed%65#0)
                let len_%67#0: uint64 = (len concatenated%66#0)
                let len_bytes%68#0: bytes = (itob len_%67#0)
                let len_16_bit%69#0: bytes = ((extract 6 0) len_bytes%68#0)
                let concat_result%70#0: bytes = (concat len_16_bit%69#0 concatenated%66#0)
                let value#3: bytes = concat_result%70#0
                let tmp%71#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%71#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L39
                return 1u