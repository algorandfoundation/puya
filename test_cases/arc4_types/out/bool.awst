contract Arc4BoolTypeContract
{
  approval_program(): bool
  {
    this::test_stuff(arc4_encode(true, algopy.arc4.Bool), arc4_encode(false, algopy.arc4.Bool))
    static_boolean_array: algopy.arc4.StaticArray[algopy.arc4.Bool, typing.Literal[12]] = arc4_array_encode([arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool)], algopy.arc4.StaticArray[algopy.arc4.Bool, typing.Literal[12]])
    assert(reinterpret_cast<algopy.Bytes>(static_boolean_array) == hex<"FFF0">)
    assert(reinterpret_cast<algopy.Bytes>(static_boolean_array[0u]) == reinterpret_cast<algopy.Bytes>(arc4_encode(true, algopy.arc4.Bool)), comment="Single boolean can be unpacked")
    assert(reinterpret_cast<algopy.Bytes>(static_boolean_array[12u - 1u]) == reinterpret_cast<algopy.Bytes>(arc4_encode(true, algopy.arc4.Bool)), comment="Single boolean can be unpacked")
    dynamic_boolean_array: algopy.arc4.DynamicArray[algopy.arc4.Bool] = arc4_array_encode([arc4_encode(true, algopy.arc4.Bool), arc4_encode(false, algopy.arc4.Bool), arc4_encode(true, algopy.arc4.Bool)], algopy.arc4.DynamicArray[algopy.arc4.Bool])
    assert(reinterpret_cast<algopy.Bytes>(dynamic_boolean_array) == hex<"0003A0">)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_stuff(true: algopy.arc4.Bool, false: algopy.arc4.Bool): None
  {
    assert(arc4_decode(true, bool))
    assert(!(arc4_decode(false, bool)))
    assert(reinterpret_cast<algopy.Bytes>(true) == reinterpret_cast<algopy.Bytes>(arc4_encode(arc4_decode(true, bool), algopy.arc4.Bool)))
    assert(reinterpret_cast<algopy.Bytes>(false) == reinterpret_cast<algopy.Bytes>(arc4_encode(arc4_decode(false, bool), algopy.arc4.Bool)))
  }
}