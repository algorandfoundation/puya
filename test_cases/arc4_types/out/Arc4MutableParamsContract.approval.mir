// Op                                                                                          Stack (out)
// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> uint64:
main_block@0:
    // arc4_types/mutable_params.py:29
    // self.mutating_copies()
    callsub mutating_copies
    // arc4_types/mutable_params.py:31
    // return True
    int 1                                                                                      1
    return


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
mutating_copies:
    // arc4_types/mutable_params.py:33-34
    // @subroutine
    // def mutating_copies(self) -> None:
    proto 0 0

mutating_copies_block@0:
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304                                                                            0x01020304
    // arc4_types/mutable_params.py:46
    // my_array[2] = UInt8(5)
    byte 0x05                                                                                  0x01020304,0x05
    replace2 2                                                                                 my_array#1
    // arc4_types/mutable_params.py:49
    // assert my_array[2] == UInt8(5), "my_array should be mutated"
    l-load-copy my_array#1 0                                                                   my_array#1,my_array#1 (copy)
    extract 2 1 // on error: Index access is out of bounds                                     my_array#1,reinterpret_biguint%2#0
    byte 0x05                                                                                  my_array#1,reinterpret_biguint%2#0,0x05
    b==                                                                                        my_array#1,tmp%1#0
    assert // my_array should be mutated                                                       my_array#1
    // arc4_types/mutable_params.py:52
    // t, f = self.other_routine(my_array, my_struct)
    l-load my_array#1 0                                                                        my_array#1
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x80320006000d00054861707079000444617973                                              my_array#1,0x80320006000d00054861707079000444617973
    // arc4_types/mutable_params.py:52
    // t, f = self.other_routine(my_array, my_struct)
    callsub other_routine                                                                      t#0,f#0,my_array#1,my_struct#1
    // arc4_types/mutable_params.py:53
    // assert t
    l-load t#0 3                                                                               f#0,my_array#1,my_struct#1,t#0
    assert                                                                                     f#0,my_array#1,my_struct#1
    // arc4_types/mutable_params.py:54
    // assert not f
    l-load f#0 2                                                                               my_array#1,my_struct#1,f#0
    !                                                                                          my_array#1,my_struct#1,tmp%2#0
    assert                                                                                     my_array#1,my_struct#1
    // arc4_types/mutable_params.py:56
    // assert my_array[1] == UInt8(5), "my_array has been mutated by the subroutine"
    l-load-copy my_array#1 1                                                                   my_array#1,my_struct#1,my_array#1 (copy)
    extract 1 1 // on error: Index access is out of bounds                                     my_array#1,my_struct#1,reinterpret_biguint%4#0
    byte 0x05                                                                                  my_array#1,my_struct#1,reinterpret_biguint%4#0,0x05
    b==                                                                                        my_array#1,my_struct#1,tmp%3#0
    assert // my_array has been mutated by the subroutine                                      my_array#1,my_struct#1
    // arc4_types/mutable_params.py:58
    // assert my_struct.s_val_1 == String(
    l-load-copy my_struct#1 0                                                                  my_array#1,my_struct#1,my_struct#1 (copy)
    int 2                                                                                      my_array#1,my_struct#1,my_struct#1 (copy),2
    extract_uint16                                                                             my_array#1,my_struct#1,item_start_offset%0#0
    l-load-copy my_struct#1 1                                                                  my_array#1,my_struct#1,item_start_offset%0#0,my_struct#1 (copy)
    int 4                                                                                      my_array#1,my_struct#1,item_start_offset%0#0,my_struct#1 (copy),4
    extract_uint16                                                                             my_array#1,my_struct#1,item_start_offset%0#0,item_end_offset%0#0
    l-load my_struct#1 2                                                                       my_array#1,item_start_offset%0#0,item_end_offset%0#0,my_struct#1
    l-load item_start_offset%0#0 2                                                             my_array#1,item_end_offset%0#0,my_struct#1,item_start_offset%0#0
    l-load item_end_offset%0#0 2                                                               my_array#1,my_struct#1,item_start_offset%0#0,item_end_offset%0#0
    substring3                                                                                 my_array#1,tmp%4#0
    // arc4_types/mutable_params.py:58-60
    // assert my_struct.s_val_1 == String(
    //     "AARRGH!"
    // ), "my_struct has been mutated by the subroutine"
    byte 0x000741415252474821                                                                  my_array#1,tmp%4#0,0x000741415252474821
    ==                                                                                         my_array#1,tmp%5#0
    assert // my_struct has been mutated by the subroutine                                     my_array#1
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304                                                                            my_array#1,0x01020304
    // arc4_types/mutable_params.py:36-41
    // my_struct = TestStruct(
    //     b_val=Bool(True),
    //     u_val=UInt8(50),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    byte 0x80320006000d00054861707079000444617973                                              my_array#1,0x01020304,0x80320006000d00054861707079000444617973
    // arc4_types/mutable_params.py:63
    // self.other_routine(my_array_copy.copy(), my_struct_copy.copy())
    callsub other_routine                                                                      my_array#1,other_routine%4#0,other_routine%5#0,other_routine%6#0,other_routine%7#0
    pop 1                                                                                      my_array#1,other_routine%4#0,other_routine%5#0,other_routine%6#0
    pop 1                                                                                      my_array#1,other_routine%4#0,other_routine%5#0
    pop 1                                                                                      my_array#1,other_routine%4#0
    pop 1                                                                                      my_array#1
    // arc4_types/mutable_params.py:35
    // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
    byte 0x01020304                                                                            my_array#1,0x01020304
    // arc4_types/mutable_params.py:75
    // my_array_copy_2 = self.other_routine_2(my_array_copy_2)
    callsub other_routine_2                                                                    my_array#1,my_array_copy_2#2,my_array_copy_2#1
    pop 1                                                                                      my_array#1,my_array_copy_2#2
    l-store my_array_copy_2#2 0                                                                my_array#1,my_array_copy_2#2
    // arc4_types/mutable_params.py:77
    // assert my_array_copy_2[0] == UInt8(1), "my_array_copy_2 should have original value"
    l-load-copy my_array_copy_2#2 0                                                            my_array#1,my_array_copy_2#2,my_array_copy_2#2 (copy)
    extract 0 1 // on error: Index access is out of bounds                                     my_array#1,my_array_copy_2#2,reinterpret_biguint%8#0
    byte 0x01                                                                                  my_array#1,my_array_copy_2#2,reinterpret_biguint%8#0,0x01
    b==                                                                                        my_array#1,my_array_copy_2#2,tmp%9#0
    assert // my_array_copy_2 should have original value                                       my_array#1,my_array_copy_2#2
    // arc4_types/mutable_params.py:79
    // self.other_routine_2(my_array_copy_2)
    l-load my_array_copy_2#2 0                                                                 my_array#1,my_array_copy_2#2
    callsub other_routine_2                                                                    my_array#1,other_routine_2%2#0,my_array_copy_2#2
    l-store my_array_copy_2#2 1                                                                my_array#1,my_array_copy_2#2,other_routine_2%2#0
    pop 1                                                                                      my_array#1,my_array_copy_2#2
    // arc4_types/mutable_params.py:80
    // assert my_array_copy_2[0] == UInt8(10), "my_array_copy_2 should have mutated value"
    l-load-copy my_array_copy_2#2 0                                                            my_array#1,my_array_copy_2#2,my_array_copy_2#2 (copy)
    extract 0 1 // on error: Index access is out of bounds                                     my_array#1,my_array_copy_2#2,reinterpret_biguint%10#0
    byte 0x0a                                                                                  my_array#1,my_array_copy_2#2,reinterpret_biguint%10#0,0x0a
    b==                                                                                        my_array#1,my_array_copy_2#2,tmp%10#0
    assert // my_array_copy_2 should have mutated value                                        my_array#1,my_array_copy_2#2
    // arc4_types/mutable_params.py:83
    // self.other_routine_3((my_array.copy(), my_array_copy_2.copy(), my_array_copy_2.copy()))
    l-load-copy my_array#1 1                                                                   my_array#1,my_array_copy_2#2,my_array#1 (copy)
    l-load-copy my_array_copy_2#2 1                                                            my_array#1,my_array_copy_2#2,my_array#1 (copy),my_array_copy_2#2 (copy)
    l-load my_array_copy_2#2 2                                                                 my_array#1,my_array#1 (copy),my_array_copy_2#2 (copy),my_array_copy_2#2
    callsub other_routine_3                                                                    my_array#1,other_routine_3%0#0,other_routine_3%1#0,other_routine_3%2#0
    pop 1                                                                                      my_array#1,other_routine_3%0#0,other_routine_3%1#0
    pop 1                                                                                      my_array#1,other_routine_3%0#0
    pop 1                                                                                      my_array#1
    // arc4_types/mutable_params.py:87
    // self.other_routine_2(nested.test_array.copy())
    l-load my_array#1 0                                                                        my_array#1
    extract 0 4 // on error: Index access is out of bounds                                     tmp%11#0
    callsub other_routine_2                                                                    other_routine_2%4#0,other_routine_2%5#0
    pop 1                                                                                      other_routine_2%4#0
    pop 1
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> uint64, uint64, bytes, bytes:
other_routine:                                                                                 (𝕡) array#0,struct#0 |
    // arc4_types/mutable_params.py:89-90
    // @subroutine
    // def other_routine(self, array: TestArray, struct: TestStruct) -> tuple[bool, bool]:
    proto 2 4                                                                                  (𝕡) array#0,struct#0 |

other_routine_block@0:                                                                         (𝕡) array#0,struct#0 |
    // arc4_types/mutable_params.py:91
    // array[1] = UInt8(5)
    p-load array#0                                                                             (𝕡) array#0,struct#0 | array#0 (copy)
    byte 0x05                                                                                  (𝕡) array#0,struct#0 | array#0 (copy),0x05
    replace2 1                                                                                 (𝕡) array#0,struct#0 | array#0
    p-store array#0                                                                            (𝕡) array#0,struct#0 |
    // arc4_types/mutable_params.py:92
    // struct.s_val_1 = String("AARRGH!")
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | struct#0 (copy)
    int 2                                                                                      (𝕡) array#0,struct#0 | struct#0 (copy),2
    extract_uint16                                                                             (𝕡) array#0,struct#0 | item_offset%0#0
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | item_offset%0#0,struct#0 (copy)
    int 0                                                                                      (𝕡) array#0,struct#0 | item_offset%0#0,struct#0 (copy),0
    l-load-copy item_offset%0#0 2                                                              (𝕡) array#0,struct#0 | item_offset%0#0,struct#0 (copy),0,item_offset%0#0 (copy)
    extract3                                                                                   (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,struct#0 (copy)
    int 4                                                                                      (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,struct#0 (copy),4
    extract_uint16                                                                             (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,struct#0 (copy)
    len                                                                                        (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,total_data_length%0#0
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,total_data_length%0#0,struct#0 (copy)
    l-load-copy next_item_offset%0#0 2                                                         (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,total_data_length%0#0,struct#0 (copy),next_item_offset%0#0 (copy)
    l-load total_data_length%0#0 2                                                             (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,struct#0 (copy),next_item_offset%0#0 (copy),total_data_length%0#0
    substring3                                                                                 (𝕡) array#0,struct#0 | item_offset%0#0,data_up_to_item%0#0,next_item_offset%0#0,data_beyond_item%0#0
    l-load data_up_to_item%0#0 2                                                               (𝕡) array#0,struct#0 | item_offset%0#0,next_item_offset%0#0,data_beyond_item%0#0,data_up_to_item%0#0
    byte 0x000741415252474821                                                                  (𝕡) array#0,struct#0 | item_offset%0#0,next_item_offset%0#0,data_beyond_item%0#0,data_up_to_item%0#0,0x000741415252474821
    concat                                                                                     (𝕡) array#0,struct#0 | item_offset%0#0,next_item_offset%0#0,data_beyond_item%0#0,updated_data%0#0
    l-load data_beyond_item%0#0 1                                                              (𝕡) array#0,struct#0 | item_offset%0#0,next_item_offset%0#0,updated_data%0#0,data_beyond_item%0#0
    concat                                                                                     (𝕡) array#0,struct#0 | item_offset%0#0,next_item_offset%0#0,updated_data%1#0
    l-load next_item_offset%0#0 1                                                              (𝕡) array#0,struct#0 | item_offset%0#0,updated_data%1#0,next_item_offset%0#0
    l-load item_offset%0#0 2                                                                   (𝕡) array#0,struct#0 | updated_data%1#0,next_item_offset%0#0,item_offset%0#0
    -                                                                                          (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0
    l-load-copy updated_data%1#0 1                                                             (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0,updated_data%1#0 (copy)
    int 4                                                                                      (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0,updated_data%1#0 (copy),4
    extract_uint16                                                                             (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0,tail_offset%0#0
    int 9                                                                                      (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0,tail_offset%0#0,9
    +                                                                                          (𝕡) array#0,struct#0 | updated_data%1#0,item_length%0#0,tail_offset%1#0
    l-load item_length%0#0 1                                                                   (𝕡) array#0,struct#0 | updated_data%1#0,tail_offset%1#0,item_length%0#0
    -                                                                                          (𝕡) array#0,struct#0 | updated_data%1#0,tail_offset%2#0
    itob                                                                                       (𝕡) array#0,struct#0 | updated_data%1#0,as_bytes%0#0
    extract 6 2                                                                                (𝕡) array#0,struct#0 | updated_data%1#0,tail_offset_bytes%0#0
    l-load updated_data%1#0 1                                                                  (𝕡) array#0,struct#0 | tail_offset_bytes%0#0,updated_data%1#0
    l-load tail_offset_bytes%0#0 1                                                             (𝕡) array#0,struct#0 | updated_data%1#0,tail_offset_bytes%0#0
    replace2 4                                                                                 (𝕡) array#0,struct#0 | struct#0
    p-store struct#0                                                                           (𝕡) array#0,struct#0 |
    // arc4_types/mutable_params.py:93
    // return True, False
    int 1                                                                                      (𝕡) array#0,struct#0 | 1
    int 0                                                                                      (𝕡) array#0,struct#0 | 1,0
    p-load array#0                                                                             (𝕡) array#0,struct#0 | 1,0,array#0 (copy)
    p-load struct#0                                                                            (𝕡) array#0,struct#0 | 1,0,array#0 (copy),struct#0 (copy)
    retsub                                                                                     1,0,array#0 (copy),struct#0 (copy)


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> bytes, bytes:
other_routine_2:                                                                               (𝕡) array#0 |
    // arc4_types/mutable_params.py:95-96
    // @subroutine
    // def other_routine_2(self, array: TestArray) -> TestArray:
    proto 1 2                                                                                  (𝕡) array#0 |

other_routine_2_block@0:                                                                       (𝕡) array#0 |
    // arc4_types/mutable_params.py:98
    // array[0] = UInt8(10)
    p-load array#0                                                                             (𝕡) array#0 | array#0 (copy)
    byte 0x0a                                                                                  (𝕡) array#0 | array#0 (copy),0x0a
    replace2 0                                                                                 (𝕡) array#0 | array#1
    // arc4_types/mutable_params.py:99
    // return copy
    p-load array#0                                                                             (𝕡) array#0 | array#1,array#0 (copy)
    l-load array#1 1                                                                           (𝕡) array#0 | array#0 (copy),array#1
    retsub                                                                                     array#0 (copy),array#1


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_3(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes) -> bytes, bytes, bytes:
other_routine_3:                                                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    // arc4_types/mutable_params.py:101-102
    // @subroutine
    // def other_routine_3(self, arrays: tuple[TestArray, TestArray, TestArray]) -> None:
    proto 3 3                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |

other_routine_3_block@0:                                                                       (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    int 0                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |
    // Implicit fall through to other_routine_3_for_body@1                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |

other_routine_3_for_body@1:                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |
    // arc4_types/mutable_params.py:104
    // for array in arrays:
    x-load loop_counter%0#0                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | loop_counter%0#0
    switch other_routine_3_for_header_1@3 other_routine_3_for_header_2@4                       (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    b other_routine_3_after_for@5                                                              (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |

other_routine_3_for_header_1@3:                                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    int 1                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |
    b other_routine_3_for_body@1                                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |

other_routine_3_for_header_2@4:                                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    int 2                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |
    b other_routine_3_for_body@1                                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | (𝕏) loop_counter%0#0 |

other_routine_3_after_for@5:                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    // arc4_types/mutable_params.py:107
    // arrays[0][0] = UInt8(99)
    p-load arrays.0#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0 (copy)
    byte 0x63                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0 (copy),0x63
    replace2 0                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0
    p-store arrays.0#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    // arc4_types/mutable_params.py:108
    // arrays[1][0] = UInt8(99)
    p-load arrays.1#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.1#0 (copy)
    byte 0x63                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.1#0 (copy),0x63
    replace2 0                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.1#0
    p-store arrays.1#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    // arc4_types/mutable_params.py:109
    // arrays[2][0] = UInt8(99)
    p-load arrays.2#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.2#0 (copy)
    byte 0x63                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.2#0 (copy),0x63
    replace2 0                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.2#0
    p-store arrays.2#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 |
    p-load arrays.0#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0 (copy)
    p-load arrays.1#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0 (copy),arrays.1#0 (copy)
    p-load arrays.2#0                                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0 | arrays.0#0 (copy),arrays.1#0 (copy),arrays.2#0 (copy)
    retsub                                                                                     arrays.0#0 (copy),arrays.1#0 (copy),arrays.2#0 (copy)


