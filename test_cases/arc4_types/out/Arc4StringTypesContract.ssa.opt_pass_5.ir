contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L8
                let tmp%7#0: uint64 = 1u
                let tmp%8#0: uint64 = (select 14u 2u tmp%7#0)
                let tmp%10#0: bytes = (substring3 0x000c48656c6c6f20576f726c6421 tmp%8#0 14u)
                let tmp%11#0: uint64 = (== "Hello World!" tmp%10#0)
                (assert tmp%11#0) // Original bytes should match encoded if we strip the length header
                let tmp%12#0: uint64 = 1u
                (assert tmp%12#0)
                let concat_result%19#0: bytes = 0x000648656c6c6f20
                let expr_value_trimmed%20#0: bytes = ((extract 2 0) concat_result%19#0)
                let concatenated%22#0: bytes = (concat expr_value_trimmed%20#0 "World!")
                let len_%23#0: uint64 = (len concatenated%22#0)
                let len_bytes%24#0: bytes = (itob len_%23#0)
                let len_16_bit%25#0: bytes = ((extract 6 0) len_bytes%24#0)
                let concat_result%26#0: bytes = (concat len_16_bit%25#0 concatenated%22#0)
                let tmp%27#0: uint64 = (== "\x00\x0cHello World!" concat_result%26#0)
                (assert tmp%27#0)
                let thing#1: bytes = 0x000468696869
                let tmp%35#0: uint64 = (== thing#1 "\x00\x04hihi")
                (assert tmp%35#0)
                let concat_result%42#0: bytes = 0x00026162
                let expr_value_trimmed%43#0: bytes = ((extract 2 0) concat_result%42#0)
                let concatenated%45#0: bytes = (concat expr_value_trimmed%43#0 "c")
                let len_%46#0: uint64 = (len concatenated%45#0)
                let len_bytes%47#0: bytes = (itob len_%46#0)
                let len_16_bit%48#0: bytes = ((extract 6 0) len_bytes%47#0)
                let concat_result%49#0: bytes = (concat len_16_bit%48#0 concatenated%45#0)
                let expr_value_trimmed%50#0: bytes = ((extract 2 0) concat_result%49#0)
                let concatenated%52#0: bytes = (concat expr_value_trimmed%50#0 "d")
                let len_%53#0: uint64 = (len concatenated%52#0)
                let len_bytes%54#0: bytes = (itob len_%53#0)
                let len_16_bit%55#0: bytes = ((extract 6 0) len_bytes%54#0)
                let value#0: bytes = (concat len_16_bit%55#0 concatenated%52#0)
                let expr_value_trimmed%57#0: bytes = ((extract 2 0) value#0)
                let concatenated%59#0: bytes = (concat expr_value_trimmed%57#0 "e")
                let len_%60#0: uint64 = (len concatenated%59#0)
                let len_bytes%61#0: bytes = (itob len_%60#0)
                let len_16_bit%62#0: bytes = ((extract 6 0) len_bytes%61#0)
                let value#1: bytes = (concat len_16_bit%62#0 concatenated%59#0)
                let expr_value_trimmed%64#0: bytes = ((extract 2 0) value#1)
                let concatenated%66#0: bytes = (concat expr_value_trimmed%64#0 "f")
                let len_%67#0: uint64 = (len concatenated%66#0)
                let len_bytes%68#0: bytes = (itob len_%67#0)
                let len_16_bit%69#0: bytes = ((extract 6 0) len_bytes%68#0)
                let value#2: bytes = (concat len_16_bit%69#0 concatenated%66#0)
                let expr_value_trimmed%71#0: bytes = ((extract 2 0) value#2)
                let concatenated%73#0: bytes = (concat expr_value_trimmed%71#0 "g")
                let len_%74#0: uint64 = (len concatenated%73#0)
                let len_bytes%75#0: bytes = (itob len_%74#0)
                let len_16_bit%76#0: bytes = ((extract 6 0) len_bytes%75#0)
                let value#3: bytes = (concat len_16_bit%76#0 concatenated%73#0)
                let tmp%78#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%78#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L42
                return 1u