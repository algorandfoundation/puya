contract test_cases.arc4_types.bool.Arc4BoolTypeContract:
    program approval:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> bool:
            block@0: // L12
                test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(0x80, 0x00)
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: bool = (select 1u 0u tmp%0#0)
                let encoded_bool%2#0: bytes = (setbit 0x00 0u tmp%2#0)
                let tmp%3#0: bool = (getbit encoded_bool%2#0 0u)
                (assert tmp%3#0) // conditional expr
                let array_head_and_tail%9#0: bytes = 0xffc0
                let array_head_and_tail%10#0: bytes = (setbit array_head_and_tail%9#0 10u 1u)
                let static_boolean_array#0: bytes = (setbit array_head_and_tail%10#0 11u 1u)
                let tmp%4#0: bool = (== static_boolean_array#0 0xfff0)
                (assert tmp%4#0)
                let is_true%10#0: uint64 = (getbit static_boolean_array#0 0u)
                let encoded_bool%15#0: bytes = (setbit 0x00 0u is_true%10#0)
                let tmp%5#0: bool = (== encoded_bool%15#0 0x80)
                (assert tmp%5#0) // Single boolean can be unpacked
                let is_true%11#0: uint64 = (getbit static_boolean_array#0 11u)
                let encoded_bool%17#0: bytes = (setbit 0x00 0u is_true%11#0)
                let tmp%7#0: bool = (== encoded_bool%17#0 0x80)
                (assert tmp%7#0) // Single boolean can be unpacked
                return 1u
        
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> bool:
            block@0: // L54
                let tmp%0#0: bool = (getbit true#0 0u)
                (assert tmp%0#0)
                let tmp%1#0: bool = (getbit false#0 0u)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u tmp%0#0)
                let tmp%4#0: bool = (== true#0 encoded_bool%0#0)
                (assert tmp%4#0)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u tmp%1#0)
                let tmp%6#0: bool = (== false#0 encoded_bool%1#0)
                (assert tmp%6#0)
                return tmp%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u