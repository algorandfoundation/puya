main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = 0x00020102.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L27
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let tmp%0#0: uint64 = (getbyte 0x0102 item_index_internal%0#1)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%1#0: bool = (== total#1 3u)
        (assert tmp%1#0) // Total should be sum of dynamic_uint8_array items
        let array_length%1#0: uint64 = 0x00010001.length
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L32
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let item_offset%1#0: uint64 = (* item_index_internal%1#1 2u)
        let tmp%2#0: uint64 = (extract_uint16 0x0001 item_offset%1#0)
        let total#4: uint64 = (+ total#3 tmp%2#0)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%3#0: bool = (== total#3 4u)
        (assert tmp%3#0) // Total should now include sum of aliased_dynamic items
        let tmp%4#0: uint64 = 0x00020004000b000548656c6c6f0005576f726c64.length
        let tmp%5#0: bool = (== tmp%4#0 2u)
        (assert tmp%5#0)
        let array_length%2#0: uint64 = 0x00020004000b000548656c6c6f0005576f726c64.length
        (assert array_length%2#0) // index access is out of bounds
        let result#0: string = ""
        let array_length%3#0: uint64 = 0x00020004000b000548656c6c6f0005576f726c64.length
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L39
        let index#0: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@13)
        let result#2: string = φ(result#0 <- block@8, result#4 <- block@13)
        let continue_looping%2#0: bool = (< index#0 array_length%3#0)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let item_offset_offset%1#0: uint64 = (* index#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 item_offset_offset%1#0)
        let item_length%1#0: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 item_offset%3#0)
        let item_head_tail_length%1#0: uint64 = (+ item_length%1#0 2u)
        let string_item#0: Encoded(len+utf8[]) = (extract3 0x0004000b000548656c6c6f0005576f726c64 item_offset%3#0 item_head_tail_length%1#0)
        goto index#0 ? block@12 : block@11
    block@11: // if_body_L41
        let result#1: string = ((extract 2 0) string_item#0)
        goto block@13
    block@12: // else_body_L43
        let tmp%8#0: bytes = ((extract 2 0) string_item#0)
        let tmp%9#0: bytes = (concat " " tmp%8#0)
        let result#3: string = (concat result#2 tmp%9#0)
        goto block@13
    block@13: // after_if_else_L40
        let result#4: string = φ(result#1 <- block@11, result#3 <- block@12)
        let item_index_internal%2#2: uint64 = (+ index#0 1u)
        goto block@9
    block@15: // after_for_L39
        let tmp%10#0: bool = (== result#2 "Hello World")
        (assert tmp%10#0)
        let array_length%4#0: uint64 = 0x000000010000000a000000ff00000080.length
        let item_index_internal%3#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L49
        let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@15, item_index_internal%3#2 <- block@17)
        let total#5: uint64 = φ(total#3 <- block@15, total#6 <- block@17)
        let continue_looping%3#0: bool = (< item_index_internal%3#1 array_length%4#0)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let item_offset%4#0: uint64 = (* item_index_internal%3#1 4u)
        let tmp%11#0: uint64 = (extract_uint32 0x000000010000000a000000ff00000080 item_offset%4#0)
        let total#6: uint64 = (+ total#5 tmp%11#0)
        let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%12#0: bool = (== total#5 398u)
        (assert tmp%12#0)
        let result#5: string = ""
        let array_length%5#0: uint64 = 0x0004000a000450696e670004506f6e67.length
        let item_index_internal%4#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L63
        let index#2: uint64 = φ(item_index_internal%4#0 <- block@19, item_index_internal%4#2 <- block@24)
        let result#7: string = φ(result#5 <- block@19, result#9 <- block@24)
        let continue_looping%4#0: bool = (< index#2 array_length%5#0)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let item_offset_offset%2#0: uint64 = (* index#2 2u)
        let item_offset%5#0: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 item_offset_offset%2#0)
        let item_length%2#0: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 item_offset%5#0)
        let item_head_tail_length%2#0: uint64 = (+ item_length%2#0 2u)
        let string_item#1: Encoded(len+utf8[]) = (extract3 0x0004000a000450696e670004506f6e67 item_offset%5#0 item_head_tail_length%2#0)
        goto index#2 ? block@23 : block@22
    block@22: // if_body_L65
        let result#6: string = ((extract 2 0) string_item#1)
        goto block@24
    block@23: // else_body_L67
        let tmp%18#0: bytes = ((extract 2 0) string_item#1)
        let tmp%19#0: bytes = (concat " " tmp%18#0)
        let result#8: string = (concat result#7 tmp%19#0)
        goto block@24
    block@24: // after_if_else_L64
        let result#9: string = φ(result#6 <- block@22, result#8 <- block@23)
        let item_index_internal%4#2: uint64 = (+ index#2 1u)
        goto block@20
    block@26: // after_for_L63
        let tmp%20#0: bool = (== result#7 "Ping Pong")
        (assert tmp%20#0)
        return 1u