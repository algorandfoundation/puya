main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L27
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let array_item%0#0: Encoded(uint8) = extract_value(dynamic_uint8_array#0, item_index_internal%0#1)
        let values%0#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%0#0)
        let uint8_item#0: Encoded(uint8) = values%0#0
        let tmp%0#0: uint64 = decode_bytes<uint64>(uint8_item#0)
        let tmp%1#0: uint64 = (+ total#1 tmp%0#0)
        let total#2: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L27
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%2#0: bool = (== total#1 3u)
        (assert tmp%2#0) // Total should be sum of dynamic_uint8_array items
        let encoded_array%1#0: Encoded(len+uint16[]) = bytes_encode<(len+uint16[])>(0x0001)
        let aliased_dynamic#0: Encoded(len+uint16[]) = encoded_array%1#0
        let array_length%1#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%1#0
        goto block@5
    block@5: // for_header_L32
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let array_item%1#0: Encoded(uint16) = extract_value(aliased_dynamic#0, item_index_internal%1#1)
        let values%1#0: Encoded(uint16) = decode_bytes<Encoded(uint16)>(array_item%1#0)
        let uint16_item#0: Encoded(uint16) = values%1#0
        let tmp%3#0: uint64 = decode_bytes<uint64>(uint16_item#0)
        let tmp%4#0: uint64 = (+ total#3 tmp%3#0)
        let total#4: uint64 = tmp%4#0
        goto block@7
    block@7: // for_footer_L32
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%5#0: bool = (== total#3 4u)
        (assert tmp%5#0) // Total should now include sum of aliased_dynamic items
        let encoded%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x48656c6c6f)
        let encoded%1#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x576f726c64)
        let encoded_array%2#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(encoded%0#0, encoded%1#0)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = encoded_array%2#0
        let array_length%2#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let tmp%6#0: bool = (== array_length%2#0 2u)
        (assert tmp%6#0)
        let array_item%2#0: Encoded(len+utf8[]) = extract_value(dynamic_string_array#0, 0u)
        let values%2#0: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(array_item%2#0)
        let encoded%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x48656c6c6f)
        let tmp%7#0: bool = (== values%2#0 encoded%2#0)
        (assert tmp%7#0)
        let result#0: string = ""
        let array_length%3#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        let reverse_index_internal%2#0: uint64 = array_length%3#0
        goto block@9
    block@9: // for_header_L39
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@14)
        let result#2: string = φ(result#0 <- block@8, result#4 <- block@14)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%3#0)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let array_item%3#0: Encoded(len+utf8[]) = extract_value(dynamic_string_array#0, item_index_internal%2#1)
        let values%3#0: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(array_item%3#0)
        let string_item#0: Encoded(len+utf8[]) = values%3#0
        let index#0: uint64 = item_index_internal%2#1
        let tmp%8#0: bool = (== index#0 0u)
        goto tmp%8#0 ? block@11 : block@12
    block@11: // if_body_L41
        let tmp%9#0: string = decode_bytes<string>(string_item#0)
        let result#1: string = tmp%9#0
        goto block@13
    block@12: // else_body_L43
        let tmp%10#0: string = decode_bytes<string>(string_item#0)
        let tmp%11#0: bytes = (concat " " tmp%10#0)
        let tmp%12#0: bytes = (concat result#2 tmp%11#0)
        let result#3: string = tmp%12#0
        goto block@13
    block@13: // after_if_else_L40
        let result#4: string = φ(result#1 <- block@11, result#3 <- block@12)
        goto block@14
    block@14: // for_footer_L39
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@9
    block@15: // after_for_L39
        let tmp%13#0: bool = (== result#2 "Hello World")
        (assert tmp%13#0)
        let encoded_array%3#0: Encoded(uint32[4]) = bytes_encode<uint32[4]>(0x00000001, 0x0000000a, 0x000000ff, 0x00000080)
        let static_uint32_array#0: Encoded(uint32[4]) = encoded_array%3#0
        let item_index_internal%3#0: uint64 = 0u
        let reverse_index_internal%3#0: uint64 = 4u
        goto block@16
    block@16: // for_header_L49
        let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@15, item_index_internal%3#2 <- block@18)
        let total#5: uint64 = φ(total#3 <- block@15, total#6 <- block@18)
        let continue_looping%3#0: bool = (< item_index_internal%3#1 4u)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let array_item%4#0: Encoded(uint32) = extract_value(static_uint32_array#0, item_index_internal%3#1)
        let values%4#0: Encoded(uint32) = decode_bytes<Encoded(uint32)>(array_item%4#0)
        let uint32_item#0: Encoded(uint32) = values%4#0
        let tmp%14#0: uint64 = decode_bytes<uint64>(uint32_item#0)
        let tmp%15#0: uint64 = (+ total#5 tmp%14#0)
        let total#6: uint64 = tmp%15#0
        goto block@18
    block@18: // for_footer_L49
        let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%16#0: bool = (== total#5 398u)
        (assert tmp%16#0)
        let encoded_array%4#0: Encoded(uint8[1]) = bytes_encode<uint8[1]>(0x65)
        let aliased_static#0: Encoded(uint8[1]) = encoded_array%4#0
        let index#1: uint64 = 0u
        let array_item%5#0: Encoded(uint8) = extract_value(aliased_static#0, 0u)
        let values%5#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%5#0)
        let tmp%17#0: uint64 = decode_bytes<uint64>(values%5#0)
        let array_item%6#0: Encoded(uint8) = extract_value(aliased_static#0, index#1)
        let values%6#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%6#0)
        let tmp%18#0: uint64 = decode_bytes<uint64>(values%6#0)
        let tmp%19#0: uint64 = (+ tmp%17#0 tmp%18#0)
        let tmp%20#0: bool = (== tmp%19#0 202u)
        (assert tmp%20#0)
        let encoded%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x50696e67)
        let encoded%4#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x506f6e67)
        let encoded_array%5#0: Encoded((len+utf8[])[2]) = bytes_encode<(len+utf8[])[2]>(encoded%3#0, encoded%4#0)
        let static_string_array#0: Encoded((len+utf8[])[2]) = encoded_array%5#0
        let result#5: string = ""
        let item_index_internal%4#0: uint64 = 0u
        let reverse_index_internal%4#0: uint64 = 2u
        goto block@20
    block@20: // for_header_L63
        let item_index_internal%4#1: uint64 = φ(item_index_internal%4#0 <- block@19, item_index_internal%4#2 <- block@25)
        let result#7: string = φ(result#5 <- block@19, result#9 <- block@25)
        let continue_looping%4#0: bool = (< item_index_internal%4#1 2u)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let array_item%7#0: Encoded(len+utf8[]) = extract_value(static_string_array#0, item_index_internal%4#1)
        let values%7#0: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(array_item%7#0)
        let string_item#1: Encoded(len+utf8[]) = values%7#0
        let index#2: uint64 = item_index_internal%4#1
        let tmp%21#0: bool = (== index#2 0u)
        goto tmp%21#0 ? block@22 : block@23
    block@22: // if_body_L65
        let tmp%22#0: string = decode_bytes<string>(string_item#1)
        let result#6: string = tmp%22#0
        goto block@24
    block@23: // else_body_L67
        let tmp%23#0: string = decode_bytes<string>(string_item#1)
        let tmp%24#0: bytes = (concat " " tmp%23#0)
        let tmp%25#0: bytes = (concat result#7 tmp%24#0)
        let result#8: string = tmp%25#0
        goto block@24
    block@24: // after_if_else_L64
        let result#9: string = φ(result#6 <- block@22, result#8 <- block@23)
        goto block@25
    block@25: // for_footer_L63
        let item_index_internal%4#2: uint64 = (+ item_index_internal%4#1 1u)
        goto block@20
    block@26: // after_for_L63
        let tmp%26#0: bool = (== result#7 "Ping Pong")
        (assert tmp%26#0)
        let encoded%5#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x50696e67)
        let encoded_value%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(encoded%5#0)
        let updated_array%0#0: Encoded((len+utf8[])[2]) = replace_value(static_string_array#0, 1u, encoded_value%0#0)
        let static_string_array#3: Encoded((len+utf8[])[2]) = updated_array%0#0
        let result#10: string = ""
        let item_index_internal%5#0: uint64 = 0u
        let reverse_index_internal%5#0: uint64 = 2u
        goto block@27
    block@27: // for_header_L73
        let item_index_internal%5#1: uint64 = φ(item_index_internal%5#0 <- block@26, item_index_internal%5#2 <- block@29)
        let result#11: string = φ(result#10 <- block@26, result#12 <- block@29)
        let continue_looping%5#0: bool = (< item_index_internal%5#1 2u)
        goto continue_looping%5#0 ? block@28 : block@30
    block@28: // for_body_L74
        let array_item%8#0: Encoded(len+utf8[]) = extract_value(static_string_array#3, item_index_internal%5#1)
        let values%8#0: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(array_item%8#0)
        let string_item#2: Encoded(len+utf8[]) = values%8#0
        let tmp%27#0: string = decode_bytes<string>(string_item#2)
        let tmp%28#0: bytes = (concat tmp%27#0 " ")
        let tmp%29#0: bytes = (concat result#11 tmp%28#0)
        let result#12: string = tmp%29#0
        goto block@29
    block@29: // for_footer_L73
        let item_index_internal%5#2: uint64 = (+ item_index_internal%5#1 1u)
        goto block@27
    block@30: // after_for_L73
        let tmp%30#0: bool = (== result#11 "Ping Ping ")
        (assert tmp%30#0)
        test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(0x54657374696e6720313233)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> Encoded(uint8[32]):
    block@0: // L81
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (sha3_256 commitment_args_concat#0)
        return reinterpret_Encoded(uint8[32])%0#0