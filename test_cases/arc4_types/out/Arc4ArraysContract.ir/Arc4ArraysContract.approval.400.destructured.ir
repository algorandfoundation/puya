main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L27
        let continue_looping%0#0: bool = (< item_index_internal%0#0 2u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let tmp%0#0: uint64 = (getbyte 0x0102 item_index_internal%0#0)
        let total#0: uint64 = (+ total#0 tmp%0#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%2#0: bool = (== total#0 3u)
        (assert tmp%2#0) // Total should be sum of dynamic_uint8_array items
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L32
        let continue_looping%1#0: bool = (< item_index_internal%1#0 1u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let aggregate%bytes_offset%1#1: uint64 = (* item_index_internal%1#0 2u)
        let tmp%3#0: uint64 = (extract_uint16 0x0001 aggregate%bytes_offset%1#1)
        let total#0: uint64 = (+ total#0 tmp%3#0)
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%5#0: bool = (== total#0 4u)
        (assert tmp%5#0) // Total should now include sum of aliased_dynamic items
        let result#0: string = ""
        let item_index_internal%2#0: uint64 = 0u
        let index#0: uint64 = item_index_internal%2#0
        goto block@9
    block@9: // for_header_L39
        let continue_looping%2#0: bool = (< index#0 2u)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let aggregate%item_offset_offset%1#1: uint64 = (* index#0 2u)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 aggregate%item_offset_offset%1#1)
        let aggregate%item_length%1#1: uint64 = (extract_uint16 0x0004000b000548656c6c6f0005576f726c64 aggregate%item_offset%1#1)
        let aggregate%item_head_tail_length%1#1: uint64 = (+ aggregate%item_length%1#1 2u)
        let string_item#0: Encoded(len+utf8[]) = (extract3 0x0004000b000548656c6c6f0005576f726c64 aggregate%item_offset%1#1 aggregate%item_head_tail_length%1#1)
        goto index#0 ? block@12 : block@11
    block@11: // if_body_L41
        let result#0: string = ((extract 2 0) string_item#0)
        goto block@13
    block@12: // else_body_L43
        let tmp%13#0: string = ((extract 2 0) string_item#0)
        let tmp%14#0: bytes = (concat " " tmp%13#0)
        let result#0: string = (concat result#0 tmp%14#0)
        goto block@13
    block@13: // after_if_else_L40
        let item_index_internal%2#0: uint64 = (+ index#0 1u)
        let index#0: uint64 = item_index_internal%2#0
        goto block@9
    block@15: // after_for_L39
        let tmp%16#0: bool = (== result#0 "Hello World")
        (assert tmp%16#0)
        let item_index_internal%3#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L49
        let continue_looping%3#0: bool = (< item_index_internal%3#0 4u)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let aggregate%bytes_offset%2#1: uint64 = (* item_index_internal%3#0 4u)
        let tmp%17#0: uint64 = (extract_uint32 0x000000010000000a000000ff00000080 aggregate%bytes_offset%2#1)
        let total#0: uint64 = (+ total#0 tmp%17#0)
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%19#0: bool = (== total#0 398u)
        (assert tmp%19#0)
        let result#0: string = ""
        let item_index_internal%4#0: uint64 = 0u
        let index#0: uint64 = item_index_internal%4#0
        goto block@20
    block@20: // for_header_L63
        let continue_looping%4#0: bool = (< index#0 2u)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let aggregate%item_offset_offset%2#1: uint64 = (* index#0 2u)
        let aggregate%item_offset%2#1: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 aggregate%item_offset_offset%2#1)
        let aggregate%item_length%2#1: uint64 = (extract_uint16 0x0004000a000450696e670004506f6e67 aggregate%item_offset%2#1)
        let aggregate%item_head_tail_length%2#1: uint64 = (+ aggregate%item_length%2#1 2u)
        let string_item#0: Encoded(len+utf8[]) = (extract3 0x0004000a000450696e670004506f6e67 aggregate%item_offset%2#1 aggregate%item_head_tail_length%2#1)
        goto index#0 ? block@23 : block@22
    block@22: // if_body_L65
        let result#0: string = ((extract 2 0) string_item#0)
        goto block@24
    block@23: // else_body_L67
        let tmp%28#0: string = ((extract 2 0) string_item#0)
        let tmp%29#0: bytes = (concat " " tmp%28#0)
        let result#0: string = (concat result#0 tmp%29#0)
        goto block@24
    block@24: // after_if_else_L64
        let item_index_internal%4#0: uint64 = (+ index#0 1u)
        let index#0: uint64 = item_index_internal%4#0
        goto block@20
    block@26: // after_for_L63
        let tmp%31#0: bool = (== result#0 "Ping Pong")
        (assert tmp%31#0)
        let head_offset#0: uint64 = 2u
        let array_head_and_tail#1: bytes = 0x0004000a000450696e67000450696e67
        let tail_offset#0: uint64 = 10u
        goto block@32
    block@32: // for_header_L331
        let continue_looping%0#0: bool = (< head_offset#0 4u)
        goto continue_looping%0#0 ? block@33 : block@34
    block@33: // for_body_L332
        let tmp%6#2: bytes = (itob tail_offset#0)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#2)
        let array_head_and_tail#1: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#1 tail_offset#0)
        let tmp%10#2: uint64 = (+ tmp%9#1 2u)
        let tail_offset#0: uint64 = (+ tail_offset#0 tmp%10#2)
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@32
    block@34: // after_for_L331
        let result#0: string = ""
        let item_index_internal%5#0: uint64 = 0u
        goto block@27
    block@27: // for_header_L73
        let continue_looping%5#0: bool = (< item_index_internal%5#0 2u)
        goto continue_looping%5#0 ? block@28 : block@30
    block@28: // for_body_L74
        let aggregate%item_offset_offset%4#1: uint64 = (* item_index_internal%5#0 2u)
        let aggregate%item_offset%4#1: uint64 = (extract_uint16 array_head_and_tail#1 aggregate%item_offset_offset%4#1)
        let aggregate%item_length%4#1: uint64 = (extract_uint16 array_head_and_tail#1 aggregate%item_offset%4#1)
        let aggregate%item_head_tail_length%4#1: uint64 = (+ aggregate%item_length%4#1 2u)
        let string_item#0: Encoded(len+utf8[]) = (extract3 array_head_and_tail#1 aggregate%item_offset%4#1 aggregate%item_head_tail_length%4#1)
        let tmp%33#0: string = ((extract 2 0) string_item#0)
        let tmp%34#0: bytes = (concat tmp%33#0 " ")
        let result#0: string = (concat result#0 tmp%34#0)
        let item_index_internal%5#0: uint64 = (+ item_index_internal%5#0 1u)
        goto block@27
    block@30: // after_for_L73
        let tmp%36#0: bool = (== result#0 "Ping Ping ")
        (assert tmp%36#0)
        return 1u