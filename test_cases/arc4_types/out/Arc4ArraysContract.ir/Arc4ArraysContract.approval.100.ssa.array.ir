main test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    block@0: // L24
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x01)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x02)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%head%1#0
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L27
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L28
        let aggregate%total_length%0#0: uint64 = (len dynamic_uint8_array#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 dynamic_uint8_array#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let uint8_item#0: Encoded(uint8) = aggregate%encoded_element%0#0
        let tmp%0#0: uint64 = (btoi uint8_item#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L27
        let tmp%2#0: bool = (== total#1 3u)
        (assert tmp%2#0) // Total should be sum of dynamic_uint8_array items
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%1#0 0x0001)
        let aggregate%as_Encoded(len+uint16[])%0#0: Encoded(len+uint16[]) = aggregate%head%2#0
        let aliased_dynamic#0: Encoded(len+uint16[]) = aggregate%as_Encoded(len+uint16[])%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
        let array_length%1#0: uint64 = aggregate%array_length%1#0
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L32
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L33
        let aggregate%total_length%1#0: uint64 = (len aliased_dynamic#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 aliased_dynamic#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%1#1 2u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 2u) // on error: index access is out of bounds
        let uint16_item#0: Encoded(uint16) = aggregate%encoded_element%1#0
        let tmp%3#0: uint64 = (btoi uint16_item#0)
        let total#4: uint64 = (+ total#3 tmp%3#0)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L32
        let tmp%5#0: bool = (== total#3 4u)
        (assert tmp%5#0) // Total should now include sum of aliased_dynamic items
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "World")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "World")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%2#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%6#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%7#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 tmp%6#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%7#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let tmp%8#0: uint64 = aggregate%array_length%2#0
        let tmp%9#0: bool = (== tmp%8#0 2u)
        (assert tmp%9#0)
        let aggregate%total_length%2#0: uint64 = (len dynamic_string_array#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 dynamic_string_array#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%3#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%2#0: Encoded(len+utf8[]) = aggregate%item%0#0
        let tmp%11#0: bool = (== array_item%2#0 tmp%6#0)
        (assert tmp%11#0)
        let result#0: string = ""
        let aggregate%array_length%4#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
        let array_length%2#0: uint64 = aggregate%array_length%4#0
        let item_index_internal%2#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L39
        let index#0: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@13)
        let result#2: string = φ(result#0 <- block@8, result#4 <- block@13)
        let continue_looping%2#0: bool = (< index#0 array_length%2#0)
        goto continue_looping%2#0 ? block@10 : block@15
    block@10: // for_body_L40
        let aggregate%total_length%3#0: uint64 = (len dynamic_string_array#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 dynamic_string_array#0 2u aggregate%total_length%3#0)
        let aggregate%item_offset_offset%1#0: uint64 = (* index#0 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%item_length%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0)
        let aggregate%item_length_in_bytes%1#0: uint64 = (* aggregate%item_length%1#0 1u)
        let aggregate%item_head_tail_length%1#0: uint64 = (+ aggregate%item_length_in_bytes%1#0 2u)
        let aggregate%item%1#0: bytes = (extract3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%item_head_tail_length%1#0)
        let string_item#0: Encoded(len+utf8[]) = aggregate%item%1#0
        goto index#0 ? block@12 : block@11
    block@11: // if_body_L41
        let result#1: string = ((extract 2 0) string_item#0)
        goto block@13
    block@12: // else_body_L43
        let tmp%14#0: string = ((extract 2 0) string_item#0)
        let tmp%15#0: bytes = (concat " " tmp%14#0)
        let result#3: string = (concat result#2 tmp%15#0)
        goto block@13
    block@13: // after_if_else_L40
        let result#4: string = φ(result#1 <- block@11, result#3 <- block@12)
        let item_index_internal%2#2: uint64 = (+ index#0 1u)
        goto block@9
    block@15: // after_for_L39
        let tmp%17#0: bool = (== result#2 "Hello World")
        (assert tmp%17#0)
        let aggregate%head%5#0: bytes = (concat 0x 0x00000001)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x0000000a)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x000000ff)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x00000080)
        let aggregate%as_Encoded(uint32[4])%0#0: Encoded(uint32[4]) = aggregate%head%8#0
        let static_uint32_array#0: Encoded(uint32[4]) = aggregate%as_Encoded(uint32[4])%0#0
        let array_length%3#0: uint64 = 4u
        let item_index_internal%3#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L49
        let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@15, item_index_internal%3#2 <- block@17)
        let total#5: uint64 = φ(total#3 <- block@15, total#6 <- block@17)
        let continue_looping%3#0: bool = (< item_index_internal%3#1 array_length%3#0)
        goto continue_looping%3#0 ? block@17 : block@19
    block@17: // for_body_L50
        let aggregate%bytes_offset%2#0: uint64 = (* item_index_internal%3#1 4u)
        let aggregate%encoded_element%2#0: bytes = (extract3 static_uint32_array#0 aggregate%bytes_offset%2#0 4u) // on error: index access is out of bounds
        let uint32_item#0: Encoded(uint32) = aggregate%encoded_element%2#0
        let tmp%18#0: uint64 = (btoi uint32_item#0)
        let total#6: uint64 = (+ total#5 tmp%18#0)
        let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
        goto block@16
    block@19: // after_for_L49
        let tmp%20#0: bool = (== total#5 398u)
        (assert tmp%20#0)
        let aggregate%head%9#0: bytes = (concat 0x 0x65)
        let aggregate%as_Encoded(uint8[1])%0#0: Encoded(uint8[1]) = aggregate%head%9#0
        let aliased_static#0: Encoded(uint8[1]) = aggregate%as_Encoded(uint8[1])%0#0
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aliased_static#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint8) = aggregate%encoded_element%3#0
        let tmp%21#0: uint64 = (btoi array_item%5#0)
        let tmp%23#0: uint64 = (+ tmp%21#0 tmp%21#0)
        let tmp%24#0: bool = (== tmp%23#0 202u)
        (assert tmp%24#0)
        let aggregate%length%2#0: uint64 = (len "Ping")
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Ping")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%25#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let aggregate%length%3#0: uint64 = (len "Pong")
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Pong")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%26#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%10#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%25#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%26#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%11#0 tmp%25#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%26#0)
        let aggregate%as_Encoded((len+utf8[])[2])%0#0: Encoded((len+utf8[])[2]) = aggregate%concat%3#0
        let static_string_array#0: Encoded((len+utf8[])[2]) = aggregate%as_Encoded((len+utf8[])[2])%0#0
        let result#5: string = ""
        let array_length%4#0: uint64 = 2u
        let item_index_internal%4#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L63
        let index#2: uint64 = φ(item_index_internal%4#0 <- block@19, item_index_internal%4#2 <- block@24)
        let result#7: string = φ(result#5 <- block@19, result#9 <- block@24)
        let continue_looping%4#0: bool = (< index#2 array_length%4#0)
        goto continue_looping%4#0 ? block@21 : block@26
    block@21: // for_body_L64
        let aggregate%item_offset_offset%2#0: uint64 = (* index#2 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset_offset%2#0)
        let aggregate%item_length%2#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset%2#0)
        let aggregate%item_length_in_bytes%2#0: uint64 = (* aggregate%item_length%2#0 1u)
        let aggregate%item_head_tail_length%2#0: uint64 = (+ aggregate%item_length_in_bytes%2#0 2u)
        let aggregate%item%2#0: bytes = (extract3 static_string_array#0 aggregate%item_offset%2#0 aggregate%item_head_tail_length%2#0)
        let string_item#1: Encoded(len+utf8[]) = aggregate%item%2#0
        goto index#2 ? block@23 : block@22
    block@22: // if_body_L65
        let result#6: string = ((extract 2 0) string_item#1)
        goto block@24
    block@23: // else_body_L67
        let tmp%29#0: string = ((extract 2 0) string_item#1)
        let tmp%30#0: bytes = (concat " " tmp%29#0)
        let result#8: string = (concat result#7 tmp%30#0)
        goto block@24
    block@24: // after_if_else_L64
        let result#9: string = φ(result#6 <- block@22, result#8 <- block@23)
        let item_index_internal%4#2: uint64 = (+ index#2 1u)
        goto block@20
    block@26: // after_for_L63
        let tmp%32#0: bool = (== result#7 "Ping Pong")
        (assert tmp%32#0)
        let aggregate%lt%1#0: bool = (< 1u 2u)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%item_offset_offset%3#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset_offset%3#0)
        let aggregate%item_length%3#0: uint64 = (extract_uint16 static_string_array#0 aggregate%item_offset%3#0)
        let aggregate%item_length_in_bytes%3#0: uint64 = (* aggregate%item_length%3#0 1u)
        let aggregate%item_head_tail_length%3#0: uint64 = (+ aggregate%item_length_in_bytes%3#0 2u)
        let aggregate%item%3#0: bytes = (extract3 static_string_array#0 aggregate%item_offset%3#0 aggregate%item_head_tail_length%3#0)
        let aggregate%lt%2#0: bool = (< 1u 2u)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(static_string_array#0, tmp%25#0, 1u, 2u)
        let static_string_array#3: Encoded((len+utf8[])[2]) = aggregate%updated_array%0#0
        let result#10: string = ""
        let array_length%5#0: uint64 = 2u
        let item_index_internal%5#0: uint64 = 0u
        goto block@27
    block@27: // for_header_L73
        let item_index_internal%5#1: uint64 = φ(item_index_internal%5#0 <- block@26, item_index_internal%5#2 <- block@28)
        let result#11: string = φ(result#10 <- block@26, result#12 <- block@28)
        let continue_looping%5#0: bool = (< item_index_internal%5#1 array_length%5#0)
        goto continue_looping%5#0 ? block@28 : block@30
    block@28: // for_body_L74
        let aggregate%item_offset_offset%4#0: uint64 = (* item_index_internal%5#1 2u)
        let aggregate%item_offset%4#0: uint64 = (extract_uint16 static_string_array#3 aggregate%item_offset_offset%4#0)
        let aggregate%item_length%4#0: uint64 = (extract_uint16 static_string_array#3 aggregate%item_offset%4#0)
        let aggregate%item_length_in_bytes%4#0: uint64 = (* aggregate%item_length%4#0 1u)
        let aggregate%item_head_tail_length%4#0: uint64 = (+ aggregate%item_length_in_bytes%4#0 2u)
        let aggregate%item%4#0: bytes = (extract3 static_string_array#3 aggregate%item_offset%4#0 aggregate%item_head_tail_length%4#0)
        let string_item#2: Encoded(len+utf8[]) = aggregate%item%4#0
        let tmp%34#0: string = ((extract 2 0) string_item#2)
        let tmp%35#0: bytes = (concat tmp%34#0 " ")
        let result#12: string = (concat result#11 tmp%35#0)
        let item_index_internal%5#2: uint64 = (+ item_index_internal%5#1 1u)
        goto block@27
    block@30: // after_for_L73
        let tmp%37#0: bool = (== result#11 "Ping Ping ")
        (assert tmp%37#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L224
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L335
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L334
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L247
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L276
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L259
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L276
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L285
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L335
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L334
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L313
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L334
        return array_head_and_tail#1