#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0xea71ee7d 0xe31958f9 0xc7ed8497 // method "test_uint8()void", method "test_uint16()void", method "test_uint32()void"
    txna ApplicationArgs 0
    match main_test_uint8_route@3 main_test_uint16_route@4 main_test_uint32_route@5

main_after_if_else@12:
    err

main_test_uint32_route@5:
    // arc4_types/uint_overflow.py:15
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_uint32
    intc_0 // 1
    return

main_test_uint16_route@4:
    // arc4_types/uint_overflow.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_uint16
    intc_0 // 1
    return

main_test_uint8_route@3:
    // arc4_types/uint_overflow.py:5
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_uint8
    intc_0 // 1
    return

main_bare_routing@8:
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8() -> void:
test_uint8:
    // arc4_types/uint_overflow.py:7
    // too_big = arc4.UInt8(Txn.num_app_args + 2**8)  # should fail here with overflow
    txn NumAppArgs
    pushint 256 // 256
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    // arc4_types/uint_overflow.py:8
    // assert too_big.bytes != b"\x01", "this should not happen"
    pushbytes 0x01
    !=
    assert // this should not happen
    retsub


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16() -> void:
test_uint16:
    // arc4_types/uint_overflow.py:12
    // too_big = arc4.UInt16(Txn.num_app_args + 2**16)  # should fail here with overflow
    txn NumAppArgs
    pushint 65536 // 65536
    +
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // arc4_types/uint_overflow.py:13
    // assert too_big.bytes != b"\x00\x01", "this should not happen"
    pushbytes 0x0001
    !=
    assert // this should not happen
    retsub


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32() -> void:
test_uint32:
    // arc4_types/uint_overflow.py:17
    // too_big = arc4.UInt32(Txn.num_app_args + 2**32)  # should fail here with overflow
    txn NumAppArgs
    pushint 4294967296 // 4294967296
    +
    itob
    dup
    bitlen
    pushint 32 // 32
    <=
    assert // overflow
    extract 4 4
    // arc4_types/uint_overflow.py:18
    // assert too_big.bytes != b"\x00\x00\x00\x01", "this should not happen"
    pushbytes 0x00000001
    !=
    assert // this should not happen
    retsub
