#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    pushint 1 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // arc4_types/uint_overflow.py:4
    // class UIntOverflow(arc4.ARC4Contract):
    pushbytess 0xea71ee7d 0xe31958f9 0xc7ed8497 // method "test_uint8()void", method "test_uint16()void", method "test_uint32()void"
    txna ApplicationArgs 0
    match test_uint8 test_uint16 test_uint32
    err // this contract does not implement the given ABI method for call NoOp


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]() -> void:
test_uint8:
    // arc4_types/uint_overflow.py:7
    // too_big = arc4.UInt8(Txn.num_app_args + 2**8)  # should fail here with overflow
    txn NumAppArgs
    pushint 256 // 256
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    // arc4_types/uint_overflow.py:8
    // assert too_big.bytes != b"\x01", "this should not happen"
    pushbytes 0x01
    !=
    // arc4_types/uint_overflow.py:5
    // @arc4.abimethod()
    return // on error: this should not happen


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]() -> void:
test_uint16:
    // arc4_types/uint_overflow.py:12
    // too_big = arc4.UInt16(Txn.num_app_args + 2**16)  # should fail here with overflow
    txn NumAppArgs
    pushint 65536 // 65536
    +
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // arc4_types/uint_overflow.py:13
    // assert too_big.bytes != b"\x00\x01", "this should not happen"
    pushbytes 0x0001
    !=
    // arc4_types/uint_overflow.py:10
    // @arc4.abimethod()
    return // on error: this should not happen


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]() -> void:
test_uint32:
    // arc4_types/uint_overflow.py:17
    // too_big = arc4.UInt32(Txn.num_app_args + 2**32)  # should fail here with overflow
    txn NumAppArgs
    pushint 4294967296 // 4294967296
    +
    itob
    dup
    bitlen
    pushint 32 // 32
    <=
    assert // overflow
    extract 4 4
    // arc4_types/uint_overflow.py:18
    // assert too_big.bytes != b"\x00\x00\x00\x01", "this should not happen"
    pushbytes 0x00000001
    !=
    // arc4_types/uint_overflow.py:15
    // @arc4.abimethod()
    return // on error: this should not happen
