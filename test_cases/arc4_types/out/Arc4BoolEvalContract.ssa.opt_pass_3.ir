contract test_cases.arc4_types.bool_eval.Arc4BoolEvalContract:
    program approval:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program() -> bool:
            block@0: // L8
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let encoded_value%1#0: bytes = 0x00012e
                let tmp%3#0: bool = (!= encoded_value%1#0 0x0000)
                (assert tmp%3#0)
                let tmp%7#0: bytes = (txn Sender)
                let tmp%8#0: bytes = (global ZeroAddress)
                let tmp%9#0: bool = (!= tmp%7#0 tmp%8#0)
                (assert tmp%9#0)
                let concatenated%0#0: bytes = 0x0000000000000000
                let byte_len%0#0: uint64 = (len concatenated%0#0)
                let len_%0#0: uint64 = (/ byte_len%0#0 8u)
                let as_bytes%2#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let dynamic_arr#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let tmp%33#0: bool = (!= dynamic_arr#1 0x0000)
                (assert tmp%33#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.clear_state_program() -> bool:
            block@0: // L60
                return 1u