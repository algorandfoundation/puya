main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        let aggregate%head%0#1: bytes = 0x01
        let aggregate%head%1#1: bytes = 0x0102
        let aggregate%head%2#1: bytes = 0x010203
        let my_array#0: Encoded(uint8[4]) = 0x01020304
        let aggregate%encoded_bool%0#1: bytes[1] = 0x80
        let aggregate%length%0#1: uint64 = 5u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 5u)
        let aggregate%length_uint16%0#1: bytes = 0x0005
        let aggregate%encoded_value%0#1: bytes = 0x00054861707079
        let aggregate%length%1#1: uint64 = 4u
        let aggregate%as_bytes%1#1: bytes[8] = (itob 4u)
        let aggregate%length_uint16%1#1: bytes = 0x0004
        let aggregate%encoded_value%1#1: bytes = 0x000444617973
        let aggregate%head%4#1: bytes = 0x80
        let aggregate%head%5#1: bytes = 0x8032
        let aggregate%as_bytes%2#1: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#1: bytes = 0x0006
        let aggregate%head%6#1: bytes = 0x80320006
        let aggregate%data_length%0#1: uint64 = 7u
        let aggregate%current_tail_offset%0#1: uint64 = 13u
        let aggregate%as_bytes%3#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%1#1: bytes = 0x000d
        let aggregate%head%7#1: bytes = 0x80320006000d
        let aggregate%concat%0#1: bytes = 0x80320006000d00054861707079
        let my_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x80320006000d00054861707079000444617973
        let aggregate%write_offset%0#1: uint64 = 2u
        let my_array#1: Encoded(uint8[4]) = 0x01020504
        let aggregate%bytes_offset%1#1: uint64 = 2u
        let aggregate%encoded_element%1#1: bytes = 0x03
        let tmp%4#0: bool = 1u
        let aggregate%bytes_offset%2#1: uint64 = 2u
        let aggregate%encoded_element%2#1: bytes = 0x05
        let tmp%5#0: bool = 1u
        let (t#0: bool, f#0: bool, my_array#2: Encoded(uint8[4]), my_struct#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020504, 0x80320006000d00054861707079000444617973)
        (assert t#0)
        let tmp%6#0: bool = (! f#0)
        (assert tmp%6#0)
        let aggregate%bytes_offset%3#1: uint64 = 1u
        let aggregate%encoded_element%3#1: bytes = ((extract 1 1) my_array#2) // on error: index access is out of bounds
        let tmp%7#0: bool = (b== aggregate%encoded_element%3#1 0x05)
        (assert tmp%7#0) // my_array has been mutated by the subroutine
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 my_struct#1 2u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 my_struct#1 4u)
        let aggregate%substring3%0#1: bytes = (substring3 my_struct#1 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%length%2#1: uint64 = 7u
        let aggregate%as_bytes%4#1: bytes[8] = (itob 7u)
        let aggregate%length_uint16%2#1: bytes = 0x0007
        let aggregate%encoded_value%2#1: bytes = 0x000741415252474821
        let tmp%9#0: bool = (== aggregate%substring3%0#1 0x000741415252474821)
        (assert tmp%9#0) // my_struct has been mutated by the subroutine
        let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: Encoded(uint8[4]), other_routine%7#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020304, 0x80320006000d00054861707079000444617973)
        let aggregate%bytes_offset%4#1: uint64 = 1u
        let aggregate%encoded_element%4#1: bytes = 0x02
        let tmp%10#0: bool = 1u
        let aggregate%extract_uint16%2#1: uint64 = 6u
        let aggregate%extract_uint16%3#1: uint64 = 13u
        let aggregate%substring3%1#1: bytes = 0x00054861707079
        let tmp%12#0: bool = 1u
        let (my_array_copy_2#2: Encoded(uint8[4]), my_array_copy_2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(0x01020304)
        let aggregate%bytes_offset%5#1: uint64 = 0u
        let aggregate%encoded_element%5#1: bytes = ((extract 0 1) my_array_copy_2#2) // on error: index access is out of bounds
        let tmp%13#0: bool = (b== aggregate%encoded_element%5#1 0x01)
        (assert tmp%13#0) // my_array_copy_2 should have original value
        let (other_routine_2%2#0: Encoded(uint8[4]), my_array_copy_2#3: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
        let aggregate%bytes_offset%6#1: uint64 = 0u
        let aggregate%encoded_element%6#1: bytes = ((extract 0 1) my_array_copy_2#3) // on error: index access is out of bounds
        let tmp%14#0: bool = (b== aggregate%encoded_element%6#1 0x0a)
        (assert tmp%14#0) // my_array_copy_2 should have mutated value
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 0u, 1u)
        let (my_array#3: Encoded(uint8[4]), my_array_copy_2#4: Encoded(uint8[4]), my_array_copy_3#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 100u, 1u)
        let aggregate%bytes_offset%7#1: uint64 = 0u
        let aggregate%encoded_element%7#1: bytes = ((extract 0 1) my_array#3) // on error: index access is out of bounds
        let tmp%20#0: bool = (b== aggregate%encoded_element%7#1 0x64)
        (assert tmp%20#0)
        let aggregate%bytes_offset%8#1: uint64 = 0u
        let aggregate%encoded_element%8#1: bytes = ((extract 0 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%21#0: bool = (b== aggregate%encoded_element%8#1 0x65)
        (assert tmp%21#0)
        let aggregate%bytes_offset%9#1: uint64 = 0u
        let aggregate%encoded_element%9#1: bytes = ((extract 0 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%22#0: bool = (b== aggregate%encoded_element%9#1 0x66)
        (assert tmp%22#0)
        let aggregate%bytes_offset%10#1: uint64 = 1u
        let aggregate%encoded_element%10#1: bytes = ((extract 1 1) my_array#3) // on error: index access is out of bounds
        let tmp%23#0: bool = (b== aggregate%encoded_element%10#1 0x67)
        (assert tmp%23#0)
        let aggregate%bytes_offset%11#1: uint64 = 1u
        let aggregate%encoded_element%11#1: bytes = ((extract 1 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%24#0: bool = (b== aggregate%encoded_element%11#1 0x68)
        (assert tmp%24#0)
        let aggregate%bytes_offset%12#1: uint64 = 1u
        let aggregate%encoded_element%12#1: bytes = ((extract 1 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%25#0: bool = (b== aggregate%encoded_element%12#1 0x69)
        (assert tmp%25#0)
        let (my_array#4: Encoded(uint8[4]), my_array_copy_2#5: Encoded(uint8[4]), my_array_copy_3#2: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
        let aggregate%bytes_offset%13#1: uint64 = 0u
        let aggregate%encoded_element%13#1: bytes = ((extract 0 1) my_array#4) // on error: index access is out of bounds
        let tmp%26#0: bool = (b== aggregate%encoded_element%13#1 0xc8)
        (assert tmp%26#0)
        let aggregate%bytes_offset%14#1: uint64 = 0u
        let aggregate%encoded_element%14#1: bytes = ((extract 0 1) my_array_copy_2#5) // on error: index access is out of bounds
        let tmp%27#0: bool = (b== aggregate%encoded_element%14#1 0xc9)
        (assert tmp%27#0)
        let aggregate%bytes_offset%15#1: uint64 = 0u
        let aggregate%encoded_element%15#1: bytes = ((extract 0 1) my_array_copy_3#2) // on error: index access is out of bounds
        let tmp%28#0: bool = (b== aggregate%encoded_element%15#1 0xca)
        (assert tmp%28#0)
        let aggregate%bytes_offset%16#1: uint64 = 1u
        let aggregate%encoded_element%16#1: bytes = ((extract 1 1) my_array#4) // on error: index access is out of bounds
        let tmp%29#0: bool = (b== aggregate%encoded_element%16#1 0xce)
        (assert tmp%29#0)
        let aggregate%bytes_offset%17#1: uint64 = 1u
        let aggregate%encoded_element%17#1: bytes = ((extract 1 1) my_array_copy_2#5) // on error: index access is out of bounds
        let tmp%30#0: bool = (b== aggregate%encoded_element%17#1 0xcf)
        (assert tmp%30#0)
        let aggregate%bytes_offset%18#1: uint64 = 1u
        let aggregate%encoded_element%18#1: bytes = ((extract 1 1) my_array_copy_3#2) // on error: index access is out of bounds
        let tmp%31#0: bool = (b== aggregate%encoded_element%18#1 0xd0)
        (assert tmp%31#0)
        let (foo.0#1: Encoded(uint8[4]), foo.1#1: Encoded(uint8[4]), foo.2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#4, my_array#4, my_array#4, 222u, 0u)
        let aggregate%bytes_offset%19#1: uint64 = 1u
        let aggregate%encoded_element%19#1: bytes = ((extract 1 1) foo.0#1) // on error: index access is out of bounds
        let tmp%32#0: bool = (b== aggregate%encoded_element%19#1 0xe4)
        (assert tmp%32#0)
        let aggregate%bytes_offset%20#1: uint64 = 1u
        let aggregate%encoded_element%20#1: bytes = ((extract 1 1) foo.1#1) // on error: index access is out of bounds
        let tmp%33#0: bool = (b== aggregate%encoded_element%20#1 0xe5)
        (assert tmp%33#0)
        let aggregate%bytes_offset%21#1: uint64 = 1u
        let aggregate%encoded_element%21#1: bytes = ((extract 1 1) foo.2#1) // on error: index access is out of bounds
        let tmp%34#0: bool = (b== aggregate%encoded_element%21#1 0xe6)
        (assert tmp%34#0)
        let nested#0: Encoded(uint8[4]) = my_array#4
        let aggregate%extract%0#1: bytes = ((extract 0 4) my_array#4)
        let (other_routine_2%4#0: Encoded(uint8[4]), other_routine_2%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(aggregate%extract%0#1)
        return 1u

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: Encoded(uint8[4]), struct: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) -> <bool, bool, Encoded(uint8[4]), Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))>:
    block@0: // L124
        let aggregate%write_offset%0#1: uint64 = 1u
        let array#1: Encoded(uint8[4]) = ((replace2 1) array#0 0x05)
        let aggregate%length%0#1: uint64 = 7u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 7u)
        let aggregate%length_uint16%0#1: bytes = 0x0007
        let aggregate%encoded_value%0#1: bytes = 0x000741415252474821
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 struct#0 2u)
        let aggregate%data_up_to_item%0#1: bytes = (extract3 struct#0 0u aggregate%item_offset%0#1)
        let aggregate%updated_data%0#1: bytes = (concat aggregate%data_up_to_item%0#1 0x000741415252474821)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 struct#0 4u)
        let aggregate%total_length%0#1: uint64 = (len struct#0)
        let aggregate%data%0#1: bytes = (substring3 struct#0 aggregate%next_item_offset%0#1 aggregate%total_length%0#1)
        let aggregate%updated_data%1#1: bytes = (concat aggregate%updated_data%0#1 aggregate%data%0#1)
        let aggregate%old_value_length%0#1: uint64 = (- aggregate%next_item_offset%0#1 aggregate%item_offset%0#1)
        let aggregate%new_value_length%0#1: uint64 = 9u
        let aggregate%tail_offset%1#1: uint64 = (+ aggregate%next_item_offset%0#1 9u)
        let aggregate%tail_offset%2#1: uint64 = (- aggregate%tail_offset%1#1 aggregate%old_value_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%tail_offset%2#1)
        let aggregate%tail_offset_bytes%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let struct#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = ((replace2 4) aggregate%updated_data%1#1 aggregate%tail_offset_bytes%0#1)
        return 1u 0u array#1 struct#2

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: Encoded(uint8[4])) -> <Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L130
        let aggregate%write_offset%0#1: uint64 = 0u
        let array#1: Encoded(uint8[4]) = ((replace2 0) array#0 0x0a)
        return array#0 array#1

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L136
        let arrays.0%is_original#0: bool = 1u
        let arrays.1%is_original#0: bool = 1u
        let arrays.2%is_original#0: bool = 1u
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob start#0)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let aggregate%uint8%0#1: bytes = ((extract 7 1) aggregate%val_as_bytes%0#1)
        let aggregate%write_offset%0#1: uint64 = 0u
        let arrays.0#1: Encoded(uint8[4]) = ((replace2 0) arrays.0#0 aggregate%uint8%0#1)
        let tmp%1#0: uint64 = (+ start#0 1u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%1#1: uint64 = (bitlen aggregate%val_as_bytes%1#1)
        let aggregate%no_overflow%1#1: bool = (<= aggregate%bitlen%1#1 8u)
        (assert aggregate%no_overflow%1#1) // overflow
        let aggregate%uint8%1#1: bytes = ((extract 7 1) aggregate%val_as_bytes%1#1)
        let aggregate%write_offset%1#1: uint64 = 0u
        let arrays.1#2: Encoded(uint8[4]) = ((replace2 0) arrays.1#0 aggregate%uint8%1#1)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#0)
        let aggregate%bitlen%2#1: uint64 = (bitlen aggregate%val_as_bytes%2#1)
        let aggregate%no_overflow%2#1: bool = (<= aggregate%bitlen%2#1 8u)
        (assert aggregate%no_overflow%2#1) // overflow
        let aggregate%uint8%2#1: bytes = ((extract 7 1) aggregate%val_as_bytes%2#1)
        let aggregate%write_offset%2#1: uint64 = 0u
        let arrays.2#3: Encoded(uint8[4]) = ((replace2 0) arrays.2#0 aggregate%uint8%2#1)
        let aggregate%bytes_offset%3#1: uint64 = 0u
        let aggregate%encoded_element%3#1: bytes = ((extract 0 1) arrays.0#1) // on error: index access is out of bounds
        let tmp%6#0: bool = (b== aggregate%encoded_element%3#1 aggregate%val_as_bytes%0#1)
        (assert tmp%6#0)
        let aggregate%bytes_offset%4#1: uint64 = 0u
        let aggregate%encoded_element%4#1: bytes = ((extract 0 1) arrays.1#2) // on error: index access is out of bounds
        let tmp%9#0: bool = (b== aggregate%encoded_element%4#1 aggregate%val_as_bytes%1#1)
        (assert tmp%9#0)
        let aggregate%bytes_offset%5#1: uint64 = 0u
        let aggregate%encoded_element%5#1: bytes = ((extract 0 1) arrays.2#3) // on error: index access is out of bounds
        let tmp%12#0: bool = (b== aggregate%encoded_element%5#1 aggregate%val_as_bytes%2#1)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (+ start#0 3u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%13#0)
        let aggregate%bitlen%3#1: uint64 = (bitlen aggregate%val_as_bytes%3#1)
        let aggregate%no_overflow%3#1: bool = (<= aggregate%bitlen%3#1 8u)
        (assert aggregate%no_overflow%3#1) // overflow
        let aggregate%uint8%3#1: bytes = ((extract 7 1) aggregate%val_as_bytes%3#1)
        let aggregate%write_offset%3#1: uint64 = 1u
        let arrays.0#5: Encoded(uint8[4]) = ((replace2 1) arrays.0#1 aggregate%uint8%3#1)
        let tmp%15#0: uint64 = (+ start#0 4u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%15#0)
        let aggregate%bitlen%4#1: uint64 = (bitlen aggregate%val_as_bytes%4#1)
        let aggregate%no_overflow%4#1: bool = (<= aggregate%bitlen%4#1 8u)
        (assert aggregate%no_overflow%4#1) // overflow
        let aggregate%uint8%4#1: bytes = ((extract 7 1) aggregate%val_as_bytes%4#1)
        let aggregate%write_offset%4#1: uint64 = 1u
        let arrays.1#6: Encoded(uint8[4]) = ((replace2 1) arrays.1#2 aggregate%uint8%4#1)
        let tmp%17#0: uint64 = (+ start#0 5u)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%17#0)
        let aggregate%bitlen%5#1: uint64 = (bitlen aggregate%val_as_bytes%5#1)
        let aggregate%no_overflow%5#1: bool = (<= aggregate%bitlen%5#1 8u)
        (assert aggregate%no_overflow%5#1) // overflow
        let aggregate%uint8%5#1: bytes = ((extract 7 1) aggregate%val_as_bytes%5#1)
        let aggregate%write_offset%5#1: uint64 = 1u
        let arrays.2#7: Encoded(uint8[4]) = ((replace2 1) arrays.2#3 aggregate%uint8%5#1)
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L154
        let arrays.0%is_original#4: bool = 0u
        let arrays.1%is_original#5: bool = 0u
        let arrays.2%is_original#6: bool = 0u
        goto block@20
    block@20: // after_if_else_L153
        let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@0, arrays.0%is_original#4 <- block@13)
        let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@0, arrays.1%is_original#5 <- block@13)
        let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@0, arrays.2%is_original#6 <- block@13)
        let tmp%19#0: uint64 = (+ start#0 6u)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%19#0)
        let aggregate%bitlen%6#1: uint64 = (bitlen aggregate%val_as_bytes%6#1)
        let aggregate%no_overflow%6#1: bool = (<= aggregate%bitlen%6#1 8u)
        (assert aggregate%no_overflow%6#1) // overflow
        let aggregate%uint8%6#1: bytes = ((extract 7 1) aggregate%val_as_bytes%6#1)
        let aggregate%write_offset%6#1: uint64 = 1u
        let arrays.0#14: Encoded(uint8[4]) = ((replace2 1) arrays.0#5 aggregate%uint8%6#1)
        goto arrays.0%is_original#5 ? block@21 : block@22
    block@21: // if_body_L1
        goto block@22
    block@22: // after_if_else_L1
        let arrays.0%out#7: Encoded(uint8[4]) = φ(arrays.0#5 <- block@20, arrays.0#14 <- block@21)
        let tmp%21#0: uint64 = (+ start#0 7u)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%21#0)
        let aggregate%bitlen%7#1: uint64 = (bitlen aggregate%val_as_bytes%7#1)
        let aggregate%no_overflow%7#1: bool = (<= aggregate%bitlen%7#1 8u)
        (assert aggregate%no_overflow%7#1) // overflow
        let aggregate%uint8%7#1: bytes = ((extract 7 1) aggregate%val_as_bytes%7#1)
        let aggregate%write_offset%7#1: uint64 = 1u
        let arrays.1#15: Encoded(uint8[4]) = ((replace2 1) arrays.1#6 aggregate%uint8%7#1)
        goto arrays.1%is_original#8 ? block@23 : block@24
    block@23: // if_body_L1
        goto block@24
    block@24: // after_if_else_L1
        let arrays.1%out#6: Encoded(uint8[4]) = φ(arrays.1#6 <- block@22, arrays.1#15 <- block@23)
        let tmp%23#0: uint64 = (+ start#0 8u)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%23#0)
        let aggregate%bitlen%8#1: uint64 = (bitlen aggregate%val_as_bytes%8#1)
        let aggregate%no_overflow%8#1: bool = (<= aggregate%bitlen%8#1 8u)
        (assert aggregate%no_overflow%8#1) // overflow
        let aggregate%uint8%8#1: bytes = ((extract 7 1) aggregate%val_as_bytes%8#1)
        let aggregate%write_offset%8#1: uint64 = 1u
        let arrays.2#16: Encoded(uint8[4]) = ((replace2 1) arrays.2#7 aggregate%uint8%8#1)
        goto arrays.2%is_original#11 ? block@25 : block@26
    block@25: // if_body_L1
        goto block@26
    block@26: // after_if_else_L1
        let arrays.2%out#5: Encoded(uint8[4]) = φ(arrays.2#7 <- block@24, arrays.2#16 <- block@25)
        let aggregate%bytes_offset%12#1: uint64 = 1u
        let aggregate%encoded_element%12#1: bytes = ((extract 1 1) arrays.0#14) // on error: index access is out of bounds
        let tmp%27#0: bool = (b== aggregate%encoded_element%12#1 aggregate%val_as_bytes%6#1)
        (assert tmp%27#0)
        let aggregate%bytes_offset%13#1: uint64 = 1u
        let aggregate%encoded_element%13#1: bytes = ((extract 1 1) arrays.1#15) // on error: index access is out of bounds
        let tmp%30#0: bool = (b== aggregate%encoded_element%13#1 aggregate%val_as_bytes%7#1)
        (assert tmp%30#0)
        let aggregate%bytes_offset%14#1: uint64 = 1u
        let aggregate%encoded_element%14#1: bytes = ((extract 1 1) arrays.2#16) // on error: index access is out of bounds
        let tmp%33#0: bool = (b== aggregate%encoded_element%14#1 aggregate%val_as_bytes%8#1)
        (assert tmp%33#0)
        return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5