main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(0x01050504, 0x0a020304, 0x01020304, 0u, 1u)
        let (my_array#3: Encoded(uint8[4]), my_array_copy_2#4: Encoded(uint8[4]), my_array_copy_3#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(0x01050504, 0x0a020304, 0x01020304, 100u, 1u)
        let aggregate%encoded_element%9#1: bytes = ((extract 0 1) my_array#3) // on error: index access is out of bounds
        let tmp%16#0: bool = (b== aggregate%encoded_element%9#1 0x64)
        (assert tmp%16#0)
        let aggregate%encoded_element%10#1: bytes = ((extract 0 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%17#0: bool = (b== aggregate%encoded_element%10#1 0x65)
        (assert tmp%17#0)
        let aggregate%encoded_element%11#1: bytes = ((extract 0 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%18#0: bool = (b== aggregate%encoded_element%11#1 0x66)
        (assert tmp%18#0)
        let aggregate%encoded_element%12#1: bytes = ((extract 1 1) my_array#3) // on error: index access is out of bounds
        let tmp%19#0: bool = (b== aggregate%encoded_element%12#1 0x67)
        (assert tmp%19#0)
        let aggregate%encoded_element%13#1: bytes = ((extract 1 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%20#0: bool = (b== aggregate%encoded_element%13#1 0x68)
        (assert tmp%20#0)
        let aggregate%encoded_element%14#1: bytes = ((extract 1 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%21#0: bool = (b== aggregate%encoded_element%14#1 0x69)
        (assert tmp%21#0)
        let (my_array#3: Encoded(uint8[4]), my_array_copy_2#4: Encoded(uint8[4]), my_array_copy_3#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
        let aggregate%encoded_element%15#1: bytes = ((extract 0 1) my_array#3) // on error: index access is out of bounds
        let tmp%22#0: bool = (b== aggregate%encoded_element%15#1 0xc8)
        (assert tmp%22#0)
        let aggregate%encoded_element%16#1: bytes = ((extract 0 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%23#0: bool = (b== aggregate%encoded_element%16#1 0xc9)
        (assert tmp%23#0)
        let aggregate%encoded_element%17#1: bytes = ((extract 0 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%24#0: bool = (b== aggregate%encoded_element%17#1 0xca)
        (assert tmp%24#0)
        let aggregate%encoded_element%18#1: bytes = ((extract 1 1) my_array#3) // on error: index access is out of bounds
        let tmp%25#0: bool = (b== aggregate%encoded_element%18#1 0xce)
        (assert tmp%25#0)
        let aggregate%encoded_element%19#1: bytes = ((extract 1 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%26#0: bool = (b== aggregate%encoded_element%19#1 0xcf)
        (assert tmp%26#0)
        let aggregate%encoded_element%20#1: bytes = ((extract 1 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%27#0: bool = (b== aggregate%encoded_element%20#1 0xd0)
        (assert tmp%27#0)
        let (foo.0#1: Encoded(uint8[4]), foo.1#1: Encoded(uint8[4]), foo.2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array#3, my_array#3, 222u, 0u)
        let aggregate%encoded_element%21#1: bytes = ((extract 1 1) foo.0#1) // on error: index access is out of bounds
        let tmp%28#0: bool = (b== aggregate%encoded_element%21#1 0xe4)
        (assert tmp%28#0)
        let aggregate%encoded_element%22#1: bytes = ((extract 1 1) foo.1#1) // on error: index access is out of bounds
        let tmp%29#0: bool = (b== aggregate%encoded_element%22#1 0xe5)
        (assert tmp%29#0)
        let aggregate%encoded_element%23#1: bytes = ((extract 1 1) foo.2#1) // on error: index access is out of bounds
        let tmp%30#0: bool = (b== aggregate%encoded_element%23#1 0xe6)
        (assert tmp%30#0)
        return 1u

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L136
        let arrays.0%is_original#0: bool = 1u
        let arrays.1%is_original#0: bool = 1u
        let arrays.2%is_original#0: bool = 1u
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob start#0)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let aggregate%uint8%0#1: bytes = ((extract 7 1) aggregate%val_as_bytes%0#1)
        let arrays.0#0: Encoded(uint8[4]) = ((replace2 0) arrays.0#0 aggregate%uint8%0#1)
        let tmp%1#0: uint64 = (+ start#0 1u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%1#1: uint64 = (bitlen aggregate%val_as_bytes%1#1)
        let aggregate%no_overflow%1#1: bool = (<= aggregate%bitlen%1#1 8u)
        (assert aggregate%no_overflow%1#1) // overflow
        let aggregate%uint8%1#1: bytes = ((extract 7 1) aggregate%val_as_bytes%1#1)
        let arrays.1#0: Encoded(uint8[4]) = ((replace2 0) arrays.1#0 aggregate%uint8%1#1)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#0)
        let aggregate%bitlen%2#1: uint64 = (bitlen aggregate%val_as_bytes%2#1)
        let aggregate%no_overflow%2#1: bool = (<= aggregate%bitlen%2#1 8u)
        (assert aggregate%no_overflow%2#1) // overflow
        let aggregate%uint8%2#1: bytes = ((extract 7 1) aggregate%val_as_bytes%2#1)
        let arrays.2#0: Encoded(uint8[4]) = ((replace2 0) arrays.2#0 aggregate%uint8%2#1)
        let aggregate%encoded_element%3#1: bytes = ((extract 0 1) arrays.0#0) // on error: index access is out of bounds
        let tmp%6#0: bool = (b== aggregate%encoded_element%3#1 aggregate%val_as_bytes%0#1)
        (assert tmp%6#0)
        let aggregate%encoded_element%4#1: bytes = ((extract 0 1) arrays.1#0) // on error: index access is out of bounds
        let tmp%9#0: bool = (b== aggregate%encoded_element%4#1 aggregate%val_as_bytes%1#1)
        (assert tmp%9#0)
        let aggregate%encoded_element%5#1: bytes = ((extract 0 1) arrays.2#0) // on error: index access is out of bounds
        let tmp%12#0: bool = (b== aggregate%encoded_element%5#1 aggregate%val_as_bytes%2#1)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (+ start#0 3u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%13#0)
        let aggregate%bitlen%3#1: uint64 = (bitlen aggregate%val_as_bytes%3#1)
        let aggregate%no_overflow%3#1: bool = (<= aggregate%bitlen%3#1 8u)
        (assert aggregate%no_overflow%3#1) // overflow
        let aggregate%uint8%3#1: bytes = ((extract 7 1) aggregate%val_as_bytes%3#1)
        let arrays.0#0: Encoded(uint8[4]) = ((replace2 1) arrays.0#0 aggregate%uint8%3#1)
        let tmp%15#0: uint64 = (+ start#0 4u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%15#0)
        let aggregate%bitlen%4#1: uint64 = (bitlen aggregate%val_as_bytes%4#1)
        let aggregate%no_overflow%4#1: bool = (<= aggregate%bitlen%4#1 8u)
        (assert aggregate%no_overflow%4#1) // overflow
        let aggregate%uint8%4#1: bytes = ((extract 7 1) aggregate%val_as_bytes%4#1)
        let arrays.1#0: Encoded(uint8[4]) = ((replace2 1) arrays.1#0 aggregate%uint8%4#1)
        let tmp%17#0: uint64 = (+ start#0 5u)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%17#0)
        let aggregate%bitlen%5#1: uint64 = (bitlen aggregate%val_as_bytes%5#1)
        let aggregate%no_overflow%5#1: bool = (<= aggregate%bitlen%5#1 8u)
        (assert aggregate%no_overflow%5#1) // overflow
        let aggregate%uint8%5#1: bytes = ((extract 7 1) aggregate%val_as_bytes%5#1)
        let arrays.2#0: Encoded(uint8[4]) = ((replace2 1) arrays.2#0 aggregate%uint8%5#1)
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L154
        let arrays.0%is_original#0: bool = 0u
        let arrays.1%is_original#0: bool = 0u
        let arrays.2%is_original#0: bool = 0u
        goto block@20
    block@20: // after_if_else_L153
        let tmp%19#0: uint64 = (+ start#0 6u)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%19#0)
        let aggregate%bitlen%6#1: uint64 = (bitlen aggregate%val_as_bytes%6#1)
        let aggregate%no_overflow%6#1: bool = (<= aggregate%bitlen%6#1 8u)
        (assert aggregate%no_overflow%6#1) // overflow
        let aggregate%uint8%6#1: bytes = ((extract 7 1) aggregate%val_as_bytes%6#1)
        let arrays.0#14: Encoded(uint8[4]) = ((replace2 1) arrays.0#0 aggregate%uint8%6#1)
        let arrays.0%out#7: Encoded(uint8[4]) = arrays.0#0
        goto arrays.0%is_original#0 ? block@21 : block@22
    block@21: // if_body_L1
        let arrays.0%out#7: Encoded(uint8[4]) = arrays.0#14
        goto block@22
    block@22: // after_if_else_L1
        let tmp%21#0: uint64 = (+ start#0 7u)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%21#0)
        let aggregate%bitlen%7#1: uint64 = (bitlen aggregate%val_as_bytes%7#1)
        let aggregate%no_overflow%7#1: bool = (<= aggregate%bitlen%7#1 8u)
        (assert aggregate%no_overflow%7#1) // overflow
        let aggregate%uint8%7#1: bytes = ((extract 7 1) aggregate%val_as_bytes%7#1)
        let arrays.1#15: Encoded(uint8[4]) = ((replace2 1) arrays.1#0 aggregate%uint8%7#1)
        let arrays.1%out#6: Encoded(uint8[4]) = arrays.1#0
        goto arrays.1%is_original#0 ? block@23 : block@24
    block@23: // if_body_L1
        let arrays.1%out#6: Encoded(uint8[4]) = arrays.1#15
        goto block@24
    block@24: // after_if_else_L1
        let tmp%23#0: uint64 = (+ start#0 8u)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%23#0)
        let aggregate%bitlen%8#1: uint64 = (bitlen aggregate%val_as_bytes%8#1)
        let aggregate%no_overflow%8#1: bool = (<= aggregate%bitlen%8#1 8u)
        (assert aggregate%no_overflow%8#1) // overflow
        let aggregate%uint8%8#1: bytes = ((extract 7 1) aggregate%val_as_bytes%8#1)
        let arrays.2#16: Encoded(uint8[4]) = ((replace2 1) arrays.2#0 aggregate%uint8%8#1)
        let arrays.2%out#5: Encoded(uint8[4]) = arrays.2#0
        goto arrays.2%is_original#0 ? block@25 : block@26
    block@25: // if_body_L1
        let arrays.2%out#5: Encoded(uint8[4]) = arrays.2#16
        goto block@26
    block@26: // after_if_else_L1
        let aggregate%encoded_element%12#1: bytes = ((extract 1 1) arrays.0#14) // on error: index access is out of bounds
        let tmp%27#0: bool = (b== aggregate%encoded_element%12#1 aggregate%val_as_bytes%6#1)
        (assert tmp%27#0)
        let aggregate%encoded_element%13#1: bytes = ((extract 1 1) arrays.1#15) // on error: index access is out of bounds
        let tmp%30#0: bool = (b== aggregate%encoded_element%13#1 aggregate%val_as_bytes%7#1)
        (assert tmp%30#0)
        let aggregate%encoded_element%14#1: bytes = ((extract 1 1) arrays.2#16) // on error: index access is out of bounds
        let tmp%33#0: bool = (b== aggregate%encoded_element%14#1 aggregate%val_as_bytes%8#1)
        (assert tmp%33#0)
        return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5