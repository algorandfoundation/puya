main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        let my_array#0: Encoded(uint8[4]) = bytes_encode<uint8[4]>(0x01, 0x02, 0x03, 0x04)
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%1#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Happy")
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Days")
        let my_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = bytes_encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%0#0, 0x32, tmp%1#0, tmp%2#0)
        let my_array#1: Encoded(uint8[4]) = replace_value(my_array#0, 2u, 0x05)
        let array_item%0#0: Encoded(uint8) = extract_value(my_array#0, 2u)
        let tmp%4#0: bool = (b== array_item%0#0 0x03)
        (assert tmp%4#0) // my_array_copy should be unchanged
        let array_item%1#0: Encoded(uint8) = extract_value(my_array#1, 2u)
        let tmp%5#0: bool = (b== array_item%1#0 0x05)
        (assert tmp%5#0) // my_array should be mutated
        let (t#0: bool, f#0: bool, my_array#2: Encoded(uint8[4]), my_struct#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
        (assert t#0)
        let tmp%6#0: bool = (! f#0)
        (assert tmp%6#0)
        let array_item%2#0: Encoded(uint8) = extract_value(my_array#2, 1u)
        let tmp%7#0: bool = (b== array_item%2#0 0x05)
        (assert tmp%7#0) // my_array has been mutated by the subroutine
        let tuple_item%0#0: Encoded(len+utf8[]) = extract_value(my_struct#1, 2)
        let tmp%8#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("AARRGH!")
        let tmp%9#0: bool = (== tuple_item%0#0 tmp%8#0)
        (assert tmp%9#0) // my_struct has been mutated by the subroutine
        let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: Encoded(uint8[4]), other_routine%7#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#0, my_struct#0)
        let array_item%3#0: Encoded(uint8) = extract_value(my_array#0, 1u)
        let tmp%10#0: bool = (b== array_item%3#0 0x02)
        (assert tmp%10#0) // my_array_copy should not be mutated by the subroutine
        let tuple_item%1#0: Encoded(len+utf8[]) = extract_value(my_struct#0, 2)
        let tmp%12#0: bool = (== tuple_item%1#0 tmp%1#0)
        (assert tmp%12#0) // my_struct_copy should not be mutated by the subroutine
        let (my_array_copy_2#2: Encoded(uint8[4]), my_array_copy_2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array#0)
        let array_item%4#0: Encoded(uint8) = extract_value(my_array_copy_2#2, 0u)
        let tmp%13#0: bool = (b== array_item%4#0 0x01)
        (assert tmp%13#0) // my_array_copy_2 should have original value
        let (other_routine_2%2#0: Encoded(uint8[4]), my_array_copy_2#3: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
        let array_item%5#0: Encoded(uint8) = extract_value(my_array_copy_2#3, 0u)
        let tmp%14#0: bool = (b== array_item%5#0 0x0a)
        (assert tmp%14#0) // my_array_copy_2 should have mutated value
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, my_array#0, 0u, 1u)
        let tmp%15#0: bool = 1u
        let tmp%16#0: bool = 1u
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        let tmp%19#0: bool = 1u
        let (my_array#3: Encoded(uint8[4]), my_array_copy_2#4: Encoded(uint8[4]), my_array_copy_3#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, my_array#0, 100u, 1u)
        let array_item%6#0: Encoded(uint8) = extract_value(my_array#3, 0u)
        let tmp%20#0: bool = (b== array_item%6#0 0x64)
        (assert tmp%20#0)
        let array_item%7#0: Encoded(uint8) = extract_value(my_array_copy_2#4, 0u)
        let tmp%21#0: bool = (b== array_item%7#0 0x65)
        (assert tmp%21#0)
        let array_item%8#0: Encoded(uint8) = extract_value(my_array_copy_3#1, 0u)
        let tmp%22#0: bool = (b== array_item%8#0 0x66)
        (assert tmp%22#0)
        let array_item%9#0: Encoded(uint8) = extract_value(my_array#3, 1u)
        let tmp%23#0: bool = (b== array_item%9#0 0x67)
        (assert tmp%23#0)
        let array_item%10#0: Encoded(uint8) = extract_value(my_array_copy_2#4, 1u)
        let tmp%24#0: bool = (b== array_item%10#0 0x68)
        (assert tmp%24#0)
        let array_item%11#0: Encoded(uint8) = extract_value(my_array_copy_3#1, 1u)
        let tmp%25#0: bool = (b== array_item%11#0 0x69)
        (assert tmp%25#0)
        let (my_array#4: Encoded(uint8[4]), my_array_copy_2#5: Encoded(uint8[4]), my_array_copy_3#2: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
        let array_item%12#0: Encoded(uint8) = extract_value(my_array#4, 0u)
        let tmp%26#0: bool = (b== array_item%12#0 0xc8)
        (assert tmp%26#0)
        let array_item%13#0: Encoded(uint8) = extract_value(my_array_copy_2#5, 0u)
        let tmp%27#0: bool = (b== array_item%13#0 0xc9)
        (assert tmp%27#0)
        let array_item%14#0: Encoded(uint8) = extract_value(my_array_copy_3#2, 0u)
        let tmp%28#0: bool = (b== array_item%14#0 0xca)
        (assert tmp%28#0)
        let array_item%15#0: Encoded(uint8) = extract_value(my_array#4, 1u)
        let tmp%29#0: bool = (b== array_item%15#0 0xce)
        (assert tmp%29#0)
        let array_item%16#0: Encoded(uint8) = extract_value(my_array_copy_2#5, 1u)
        let tmp%30#0: bool = (b== array_item%16#0 0xcf)
        (assert tmp%30#0)
        let array_item%17#0: Encoded(uint8) = extract_value(my_array_copy_3#2, 1u)
        let tmp%31#0: bool = (b== array_item%17#0 0xd0)
        (assert tmp%31#0)
        let (foo.0#1: Encoded(uint8[4]), foo.1#1: Encoded(uint8[4]), foo.2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#4, my_array#4, my_array#4, 222u, 0u)
        let array_item%18#0: Encoded(uint8) = extract_value(foo.0#1, 1u)
        let tmp%32#0: bool = (b== array_item%18#0 0xe4)
        (assert tmp%32#0)
        let array_item%19#0: Encoded(uint8) = extract_value(foo.1#1, 1u)
        let tmp%33#0: bool = (b== array_item%19#0 0xe5)
        (assert tmp%33#0)
        let array_item%20#0: Encoded(uint8) = extract_value(foo.2#1, 1u)
        let tmp%34#0: bool = (b== array_item%20#0 0xe6)
        (assert tmp%34#0)
        let nested#0: Encoded(uint8[4]) = bytes_encode<(uint8[4])>(my_array#4)
        let tuple_item%2#0: Encoded(uint8[4]) = extract_value(nested#0, 0)
        let (other_routine_2%4#0: Encoded(uint8[4]), other_routine_2%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tuple_item%2#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L224
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L247
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L276
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L259
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L276
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L285
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L335
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L334
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L313
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L334
        return array_head_and_tail#1

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: Encoded(uint8[4]), struct: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))) -> <bool, bool, Encoded(uint8[4]), Encoded(bool1,uint8,(len+utf8[]),(len+utf8[]))>:
    block@0: // L124
        let array#1: Encoded(uint8[4]) = replace_value(array#0, 1u, 0x05)
        let tmp%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("AARRGH!")
        let struct#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = replace_value(struct#0, 2, tmp%0#0)
        return 1u 0u array#1 struct#2

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: Encoded(uint8[4])) -> <Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L130
        let array#1: Encoded(uint8[4]) = replace_value(array#0, 0u, 0x0a)
        return array#0 array#1

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L136
        let arrays.0%is_original#0: bool = 1u
        let arrays.1%is_original#0: bool = 1u
        let arrays.2%is_original#0: bool = 1u
        let tmp%0#0: Encoded(uint8) = bytes_encode<uint8>(start#0)
        let arrays.0#1: Encoded(uint8[4]) = replace_value(arrays.0#0, 0u, tmp%0#0)
        let tmp%1#0: uint64 = (+ start#0 1u)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(tmp%1#0)
        let arrays.1#2: Encoded(uint8[4]) = replace_value(arrays.1#0, 0u, tmp%2#0)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let tmp%4#0: Encoded(uint8) = bytes_encode<uint8>(tmp%3#0)
        let arrays.2#3: Encoded(uint8[4]) = replace_value(arrays.2#0, 0u, tmp%4#0)
        let array_item%0#0: Encoded(uint8) = extract_value(arrays.0#1, 0u)
        let tmp%5#0: biguint = (itob start#0)
        let tmp%6#0: bool = (b== array_item%0#0 tmp%5#0)
        (assert tmp%6#0)
        let array_item%1#0: Encoded(uint8) = extract_value(arrays.1#2, 0u)
        let tmp%8#0: biguint = (itob tmp%1#0)
        let tmp%9#0: bool = (b== array_item%1#0 tmp%8#0)
        (assert tmp%9#0)
        let array_item%2#0: Encoded(uint8) = extract_value(arrays.2#3, 0u)
        let tmp%11#0: biguint = (itob tmp%3#0)
        let tmp%12#0: bool = (b== array_item%2#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (+ start#0 3u)
        let tmp%14#0: Encoded(uint8) = bytes_encode<uint8>(tmp%13#0)
        let arrays.0#5: Encoded(uint8[4]) = replace_value(arrays.0#1, 1u, tmp%14#0)
        let tmp%15#0: uint64 = (+ start#0 4u)
        let tmp%16#0: Encoded(uint8) = bytes_encode<uint8>(tmp%15#0)
        let arrays.1#6: Encoded(uint8[4]) = replace_value(arrays.1#2, 1u, tmp%16#0)
        let tmp%17#0: uint64 = (+ start#0 5u)
        let tmp%18#0: Encoded(uint8) = bytes_encode<uint8>(tmp%17#0)
        let arrays.2#7: Encoded(uint8[4]) = replace_value(arrays.2#3, 1u, tmp%18#0)
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L154
        let arrays.0%is_original#4: bool = 0u
        let arrays.1%is_original#5: bool = 0u
        let arrays.2%is_original#6: bool = 0u
        goto block@19
    block@19: // after_if_else_L1
        goto block@20
    block@20: // after_if_else_L153
        let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@0, arrays.0%is_original#4 <- block@19)
        let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@0, arrays.1%is_original#5 <- block@19)
        let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@0, arrays.2%is_original#6 <- block@19)
        let tmp%19#0: uint64 = (+ start#0 6u)
        let tmp%20#0: Encoded(uint8) = bytes_encode<uint8>(tmp%19#0)
        let arrays.0#14: Encoded(uint8[4]) = replace_value(arrays.0#5, 1u, tmp%20#0)
        goto arrays.0%is_original#5 ? block@21 : block@22
    block@21: // if_body_L1
        goto block@22
    block@22: // after_if_else_L1
        let arrays.0%out#7: Encoded(uint8[4]) = φ(arrays.0#5 <- block@20, arrays.0#14 <- block@21)
        let tmp%21#0: uint64 = (+ start#0 7u)
        let tmp%22#0: Encoded(uint8) = bytes_encode<uint8>(tmp%21#0)
        let arrays.1#15: Encoded(uint8[4]) = replace_value(arrays.1#6, 1u, tmp%22#0)
        goto arrays.1%is_original#8 ? block@23 : block@24
    block@23: // if_body_L1
        goto block@24
    block@24: // after_if_else_L1
        let arrays.1%out#6: Encoded(uint8[4]) = φ(arrays.1#6 <- block@22, arrays.1#15 <- block@23)
        let tmp%23#0: uint64 = (+ start#0 8u)
        let tmp%24#0: Encoded(uint8) = bytes_encode<uint8>(tmp%23#0)
        let arrays.2#16: Encoded(uint8[4]) = replace_value(arrays.2#7, 1u, tmp%24#0)
        goto arrays.2%is_original#11 ? block@25 : block@26
    block@25: // if_body_L1
        goto block@26
    block@26: // after_if_else_L1
        let arrays.2%out#5: Encoded(uint8[4]) = φ(arrays.2#7 <- block@24, arrays.2#16 <- block@25)
        let array_item%3#0: Encoded(uint8) = extract_value(arrays.0#14, 1u)
        let tmp%26#0: biguint = (itob tmp%19#0)
        let tmp%27#0: bool = (b== array_item%3#0 tmp%26#0)
        (assert tmp%27#0)
        let array_item%4#0: Encoded(uint8) = extract_value(arrays.1#15, 1u)
        let tmp%29#0: biguint = (itob tmp%21#0)
        let tmp%30#0: bool = (b== array_item%4#0 tmp%29#0)
        (assert tmp%30#0)
        let array_item%5#0: Encoded(uint8) = extract_value(arrays.2#16, 1u)
        let tmp%32#0: biguint = (itob tmp%23#0)
        let tmp%33#0: bool = (b== array_item%5#0 tmp%32#0)
        (assert tmp%33#0)
        return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5