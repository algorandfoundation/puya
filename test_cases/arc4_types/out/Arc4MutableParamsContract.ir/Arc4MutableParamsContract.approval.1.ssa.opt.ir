main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        let result%0#0: bytes = 0x01
        let result%1#0: bytes = 0x0102
        let result%2#0: bytes = 0x010203
        let result%3#0: bytes = 0x01020304
        let my_array#0: Encoded(uint8[4]) = 0x01020304
        let encoded_bool%0#0: bytes[1] = 0x80
        let encoded%0#0: Encoded((bool1)) = 0x80
        let encoded%1#0: Encoded((bool1,uint8)) = 0x8032
        let tail%0#0: bytes = 0x00054861707079
        let data_length%0#0: uint64 = 7u
        let current_tail_offset%0#0: uint64 = 13u
        let as_bytes%0#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = 0x0006
        let encoded%2#0: Encoded((bool1,uint8,len+utf8[])) = 0x80320006
        let tail%1#0: bytes = 0x00054861707079000444617973
        let data_length%1#0: uint64 = 6u
        let as_bytes%1#0: bytes[8] = (itob 13u)
        let offset_as_uint16%1#0: bytes = 0x000d
        let encoded%3#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x80320006000d
        let my_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x80320006000d00054861707079000444617973
        let array_length%0#0: uint64 = 0x01020304.length
        let index_is_in_bounds%0#0: bool = (< 2u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let my_array#1: Encoded(uint8[4]) = 0x01020504
        let bytes_offset%0#0: uint64 = 2u
        let encoded_element%0#0: bytes = 0x03
        let tmp%0#0: bool = 1u
        let bytes_offset%1#0: uint64 = 2u
        let encoded_element%1#0: bytes = 0x05
        let tmp%1#0: bool = 1u
        let (t#0: bool, f#0: bool, my_array#2: Encoded(uint8[4]), my_struct#1: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020504, 0x80320006000d00054861707079000444617973)
        (assert t#0)
        let tmp%2#0: bool = (! f#0)
        (assert tmp%2#0)
        let bytes_offset%2#0: uint64 = 1u
        let encoded_element%2#0: bytes = ((extract 1 1) my_array#2) // on error: index access is out of bounds
        let tmp%3#0: bool = (b== encoded_element%2#0 0x05)
        (assert tmp%3#0) // my_array has been mutated by the subroutine
        let item_start_offset%0#0: uint64 = (extract_uint16 my_struct#1 2u)
        let item_end_offset%0#0: uint64 = (extract_uint16 my_struct#1 4u)
        let tmp%4#0: bytes = (substring3 my_struct#1 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x000741415252474821)
        (assert tmp%5#0) // my_struct has been mutated by the subroutine
        let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: Encoded(uint8[4]), other_routine%7#0: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020304, 0x80320006000d00054861707079000444617973)
        let bytes_offset%3#0: uint64 = 1u
        let encoded_element%3#0: bytes = 0x02
        let tmp%6#0: bool = 1u
        let item_start_offset%1#0: uint64 = 6u
        let item_end_offset%1#0: uint64 = 13u
        let tmp%7#0: bytes = 0x00054861707079
        let tmp%8#0: bool = 1u
        let (my_array_copy_2#2: Encoded(uint8[4]), my_array_copy_2#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(0x01020304)
        let bytes_offset%4#0: uint64 = 0u
        let encoded_element%4#0: bytes = ((extract 0 1) my_array_copy_2#2) // on error: index access is out of bounds
        let tmp%9#0: bool = (b== encoded_element%4#0 0x01)
        (assert tmp%9#0) // my_array_copy_2 should have original value
        let (other_routine_2%2#0: Encoded(uint8[4]), my_array_copy_2#3: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
        let bytes_offset%5#0: uint64 = 0u
        let encoded_element%5#0: bytes = ((extract 0 1) my_array_copy_2#3) // on error: index access is out of bounds
        let tmp%10#0: bool = (b== encoded_element%5#0 0x0a)
        (assert tmp%10#0) // my_array_copy_2 should have mutated value
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 0u, 1u)
        let tmp%11#0: bool = 1u
        let tmp%12#0: bool = 1u
        let tmp%13#0: bool = 1u
        let tmp%14#0: bool = 1u
        let tmp%15#0: bool = 1u
        let (my_array#3: Encoded(uint8[4]), my_array_copy_2#4: Encoded(uint8[4]), my_array_copy_3#1: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 100u, 1u)
        let bytes_offset%6#0: uint64 = 0u
        let encoded_element%6#0: bytes = ((extract 0 1) my_array#3) // on error: index access is out of bounds
        let tmp%16#0: bool = (b== encoded_element%6#0 0x64)
        (assert tmp%16#0)
        let bytes_offset%7#0: uint64 = 0u
        let encoded_element%7#0: bytes = ((extract 0 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%17#0: bool = (b== encoded_element%7#0 0x65)
        (assert tmp%17#0)
        let bytes_offset%8#0: uint64 = 0u
        let encoded_element%8#0: bytes = ((extract 0 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%18#0: bool = (b== encoded_element%8#0 0x66)
        (assert tmp%18#0)
        let bytes_offset%9#0: uint64 = 1u
        let encoded_element%9#0: bytes = ((extract 1 1) my_array#3) // on error: index access is out of bounds
        let tmp%19#0: bool = (b== encoded_element%9#0 0x67)
        (assert tmp%19#0)
        let bytes_offset%10#0: uint64 = 1u
        let encoded_element%10#0: bytes = ((extract 1 1) my_array_copy_2#4) // on error: index access is out of bounds
        let tmp%20#0: bool = (b== encoded_element%10#0 0x68)
        (assert tmp%20#0)
        let bytes_offset%11#0: uint64 = 1u
        let encoded_element%11#0: bytes = ((extract 1 1) my_array_copy_3#1) // on error: index access is out of bounds
        let tmp%21#0: bool = (b== encoded_element%11#0 0x69)
        (assert tmp%21#0)
        let (my_array#4: Encoded(uint8[4]), my_array_copy_2#5: Encoded(uint8[4]), my_array_copy_3#2: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
        let bytes_offset%12#0: uint64 = 0u
        let encoded_element%12#0: bytes = ((extract 0 1) my_array#4) // on error: index access is out of bounds
        let tmp%22#0: bool = (b== encoded_element%12#0 0xc8)
        (assert tmp%22#0)
        let bytes_offset%13#0: uint64 = 0u
        let encoded_element%13#0: bytes = ((extract 0 1) my_array_copy_2#5) // on error: index access is out of bounds
        let tmp%23#0: bool = (b== encoded_element%13#0 0xc9)
        (assert tmp%23#0)
        let bytes_offset%14#0: uint64 = 0u
        let encoded_element%14#0: bytes = ((extract 0 1) my_array_copy_3#2) // on error: index access is out of bounds
        let tmp%24#0: bool = (b== encoded_element%14#0 0xca)
        (assert tmp%24#0)
        let bytes_offset%15#0: uint64 = 1u
        let encoded_element%15#0: bytes = ((extract 1 1) my_array#4) // on error: index access is out of bounds
        let tmp%25#0: bool = (b== encoded_element%15#0 0xce)
        (assert tmp%25#0)
        let bytes_offset%16#0: uint64 = 1u
        let encoded_element%16#0: bytes = ((extract 1 1) my_array_copy_2#5) // on error: index access is out of bounds
        let tmp%26#0: bool = (b== encoded_element%16#0 0xcf)
        (assert tmp%26#0)
        let bytes_offset%17#0: uint64 = 1u
        let encoded_element%17#0: bytes = ((extract 1 1) my_array_copy_3#2) // on error: index access is out of bounds
        let tmp%27#0: bool = (b== encoded_element%17#0 0xd0)
        (assert tmp%27#0)
        let encoded%5#0: Encoded((uint8[4])) = my_array#4
        let nested#0: Encoded((uint8[4])) = my_array#4
        let tmp%28#0: bytes = ((extract 0 4) my_array#4) // on error: Index access is out of bounds
        let (other_routine_2%4#0: Encoded(uint8[4]), other_routine_2%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tmp%28#0)
        return 1u

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: Encoded(uint8[4]), struct: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) -> <bool, bool, Encoded(uint8[4]), Encoded((bool1,uint8,len+utf8[],len+utf8[]))>:
    block@0: // L118
        let array_length%0#0: uint64 = array#0.length
        let index_is_in_bounds%0#0: bool = (< 1u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let array#1: Encoded(uint8[4]) = ((replace2 1) array#0 0x05)
        let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
        let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
        let total_data_length%0#0: uint64 = (len struct#0)
        let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 0x000741415252474821)
        let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
        let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
        let new_value_length%0#0: uint64 = 9u
        let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 4u)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 9u)
        let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob tail_offset%2#0)
        let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let struct#2: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = ((replace2 4) updated_data%1#0 tail_offset_bytes%0#0)
        return 1u 0u array#1 struct#2

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: Encoded(uint8[4])) -> <Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L124
        let array_length%0#0: uint64 = array#0.length
        let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
        (assert array_length%0#0) // Index access is out of bounds
        let array#1: Encoded(uint8[4]) = ((replace2 0) array#0 0x0a)
        return array#0 array#1

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L130
        let arrays.0%is_original#0: bool = 1u
        let arrays.1%is_original#0: bool = 1u
        let arrays.2%is_original#0: bool = 1u
        let val_as_bytes%0#0: bytes[8] = (itob start#0)
        let bitlen%0#0: uint64 = (bitlen val_as_bytes%0#0)
        let no_overflow%0#0: bool = (<= bitlen%0#0 8u)
        (assert no_overflow%0#0) // overflow
        let uint8%0#0: bytes = ((extract 7 1) val_as_bytes%0#0)
        let array_length%0#0: uint64 = arrays.0#0.length
        let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
        (assert array_length%0#0) // Index access is out of bounds
        let arrays.0#1: Encoded(uint8[4]) = ((replace2 0) arrays.0#0 uint8%0#0)
        let to_encode%0#0: uint64 = (+ start#0 1u)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%0#0)
        let bitlen%1#0: uint64 = (bitlen val_as_bytes%1#0)
        let no_overflow%1#0: bool = (<= bitlen%1#0 8u)
        (assert no_overflow%1#0) // overflow
        let uint8%1#0: bytes = ((extract 7 1) val_as_bytes%1#0)
        let array_length%2#0: uint64 = arrays.1#0.length
        let index_is_in_bounds%1#0: bool = (< 0u array_length%2#0)
        (assert array_length%2#0) // Index access is out of bounds
        let arrays.1#2: Encoded(uint8[4]) = ((replace2 0) arrays.1#0 uint8%1#0)
        let to_encode%1#0: uint64 = (+ start#0 2u)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%1#0)
        let bitlen%2#0: uint64 = (bitlen val_as_bytes%2#0)
        let no_overflow%2#0: bool = (<= bitlen%2#0 8u)
        (assert no_overflow%2#0) // overflow
        let uint8%2#0: bytes = ((extract 7 1) val_as_bytes%2#0)
        let array_length%4#0: uint64 = arrays.2#0.length
        let index_is_in_bounds%2#0: bool = (< 0u array_length%4#0)
        (assert array_length%4#0) // Index access is out of bounds
        let arrays.2#3: Encoded(uint8[4]) = ((replace2 0) arrays.2#0 uint8%2#0)
        let bytes_offset%0#0: uint64 = 0u
        let encoded_element%0#0: bytes = ((extract 0 1) arrays.0#1) // on error: index access is out of bounds
        let tmp%1#0: bool = (b== encoded_element%0#0 val_as_bytes%0#0)
        (assert tmp%1#0)
        let bytes_offset%1#0: uint64 = 0u
        let encoded_element%1#0: bytes = ((extract 0 1) arrays.1#2) // on error: index access is out of bounds
        let tmp%4#0: bool = (b== encoded_element%1#0 val_as_bytes%1#0)
        (assert tmp%4#0)
        let bytes_offset%2#0: uint64 = 0u
        let encoded_element%2#0: bytes = ((extract 0 1) arrays.2#3) // on error: index access is out of bounds
        let tmp%7#0: bool = (b== encoded_element%2#0 val_as_bytes%2#0)
        (assert tmp%7#0)
        let to_encode%2#0: uint64 = (+ start#0 3u)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%2#0)
        let bitlen%3#0: uint64 = (bitlen val_as_bytes%3#0)
        let no_overflow%3#0: bool = (<= bitlen%3#0 8u)
        (assert no_overflow%3#0) // overflow
        let uint8%3#0: bytes = ((extract 7 1) val_as_bytes%3#0)
        let array_length%6#0: uint64 = arrays.0#1.length
        let index_is_in_bounds%3#0: bool = (< 1u array_length%6#0)
        (assert index_is_in_bounds%3#0) // Index access is out of bounds
        let arrays.0#5: Encoded(uint8[4]) = ((replace2 1) arrays.0#1 uint8%3#0)
        let to_encode%3#0: uint64 = (+ start#0 4u)
        let val_as_bytes%4#0: bytes[8] = (itob to_encode%3#0)
        let bitlen%4#0: uint64 = (bitlen val_as_bytes%4#0)
        let no_overflow%4#0: bool = (<= bitlen%4#0 8u)
        (assert no_overflow%4#0) // overflow
        let uint8%4#0: bytes = ((extract 7 1) val_as_bytes%4#0)
        let array_length%8#0: uint64 = arrays.1#2.length
        let index_is_in_bounds%4#0: bool = (< 1u array_length%8#0)
        (assert index_is_in_bounds%4#0) // Index access is out of bounds
        let arrays.1#6: Encoded(uint8[4]) = ((replace2 1) arrays.1#2 uint8%4#0)
        let to_encode%4#0: uint64 = (+ start#0 5u)
        let val_as_bytes%5#0: bytes[8] = (itob to_encode%4#0)
        let bitlen%5#0: uint64 = (bitlen val_as_bytes%5#0)
        let no_overflow%5#0: bool = (<= bitlen%5#0 8u)
        (assert no_overflow%5#0) // overflow
        let uint8%5#0: bytes = ((extract 7 1) val_as_bytes%5#0)
        let array_length%10#0: uint64 = arrays.2#3.length
        let index_is_in_bounds%5#0: bool = (< 1u array_length%10#0)
        (assert index_is_in_bounds%5#0) // Index access is out of bounds
        let arrays.2#7: Encoded(uint8[4]) = ((replace2 1) arrays.2#3 uint8%5#0)
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L148
        let arrays.0%is_original#4: bool = 0u
        let arrays.1%is_original#5: bool = 0u
        let arrays.2%is_original#6: bool = 0u
        goto block@19
    block@19: // after_if_else_L1
        goto block@20
    block@20: // after_if_else_L147
        let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@0, arrays.0%is_original#4 <- block@19)
        let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@0, arrays.1%is_original#5 <- block@19)
        let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@0, arrays.2%is_original#6 <- block@19)
        let to_encode%5#0: uint64 = (+ start#0 6u)
        let val_as_bytes%6#0: bytes[8] = (itob to_encode%5#0)
        let bitlen%6#0: uint64 = (bitlen val_as_bytes%6#0)
        let no_overflow%6#0: bool = (<= bitlen%6#0 8u)
        (assert no_overflow%6#0) // overflow
        let uint8%6#0: bytes = ((extract 7 1) val_as_bytes%6#0)
        let array_length%12#0: uint64 = arrays.0#5.length
        let index_is_in_bounds%6#0: bool = (< 1u array_length%12#0)
        (assert index_is_in_bounds%6#0) // Index access is out of bounds
        let arrays.0#14: Encoded(uint8[4]) = ((replace2 1) arrays.0#5 uint8%6#0)
        goto arrays.0%is_original#5 ? block@21 : block@22
    block@21: // if_body_L1
        goto block@22
    block@22: // after_if_else_L1
        let arrays.0%out#7: Encoded(uint8[4]) = φ(arrays.0#5 <- block@20, arrays.0#14 <- block@21)
        let to_encode%6#0: uint64 = (+ start#0 7u)
        let val_as_bytes%7#0: bytes[8] = (itob to_encode%6#0)
        let bitlen%7#0: uint64 = (bitlen val_as_bytes%7#0)
        let no_overflow%7#0: bool = (<= bitlen%7#0 8u)
        (assert no_overflow%7#0) // overflow
        let uint8%7#0: bytes = ((extract 7 1) val_as_bytes%7#0)
        let array_length%14#0: uint64 = arrays.1#6.length
        let index_is_in_bounds%7#0: bool = (< 1u array_length%14#0)
        (assert index_is_in_bounds%7#0) // Index access is out of bounds
        let arrays.1#15: Encoded(uint8[4]) = ((replace2 1) arrays.1#6 uint8%7#0)
        goto arrays.1%is_original#8 ? block@23 : block@24
    block@23: // if_body_L1
        goto block@24
    block@24: // after_if_else_L1
        let arrays.1%out#6: Encoded(uint8[4]) = φ(arrays.1#6 <- block@22, arrays.1#15 <- block@23)
        let to_encode%7#0: uint64 = (+ start#0 8u)
        let val_as_bytes%8#0: bytes[8] = (itob to_encode%7#0)
        let bitlen%8#0: uint64 = (bitlen val_as_bytes%8#0)
        let no_overflow%8#0: bool = (<= bitlen%8#0 8u)
        (assert no_overflow%8#0) // overflow
        let uint8%8#0: bytes = ((extract 7 1) val_as_bytes%8#0)
        let array_length%16#0: uint64 = arrays.2#7.length
        let index_is_in_bounds%8#0: bool = (< 1u array_length%16#0)
        (assert index_is_in_bounds%8#0) // Index access is out of bounds
        let arrays.2#16: Encoded(uint8[4]) = ((replace2 1) arrays.2#7 uint8%8#0)
        goto arrays.2%is_original#11 ? block@25 : block@26
    block@25: // if_body_L1
        goto block@26
    block@26: // after_if_else_L1
        let arrays.2%out#5: Encoded(uint8[4]) = φ(arrays.2#7 <- block@24, arrays.2#16 <- block@25)
        let bytes_offset%3#0: uint64 = 1u
        let encoded_element%3#0: bytes = ((extract 1 1) arrays.0#14) // on error: index access is out of bounds
        let tmp%10#0: bool = (b== encoded_element%3#0 val_as_bytes%6#0)
        (assert tmp%10#0)
        let bytes_offset%4#0: uint64 = 1u
        let encoded_element%4#0: bytes = ((extract 1 1) arrays.1#15) // on error: index access is out of bounds
        let tmp%13#0: bool = (b== encoded_element%4#0 val_as_bytes%7#0)
        (assert tmp%13#0)
        let bytes_offset%5#0: uint64 = 1u
        let encoded_element%5#0: bytes = ((extract 1 1) arrays.2#16) // on error: index access is out of bounds
        let tmp%16#0: bool = (b== encoded_element%5#0 val_as_bytes%8#0)
        (assert tmp%16#0)
        return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5