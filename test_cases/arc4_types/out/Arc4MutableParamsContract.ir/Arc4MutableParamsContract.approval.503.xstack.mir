// Op                                                                                          Stack (out)
// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> uint64:
subroutine main:
    block@0:
        // arc4_types/mutable_params.py:46
        // my_array[2] = UInt8(5)
        byte 0x01020504                                                                        0x01020504
        // arc4_types/mutable_params.py:36-41
        // my_struct = TestStruct(
        //     b_val=Bool(True),
        //     u_val=UInt8(50),
        //     s_val_1=String("Happy"),
        //     s_val_2=String("Days"),
        // )
        byte 0x80320006000d00054861707079000444617973                                          0x01020504,0x80320006000d00054861707079000444617973
        // arc4_types/mutable_params.py:52
        // t, f = self.other_routine(my_array, my_struct)
        callsub other_routine                                                                  t#0,f#0,my_array#2,my_struct#1
        // arc4_types/mutable_params.py:53
        // assert t
        l-load t#0 3                                                                           f#0,my_array#2,my_struct#1,t#0
        assert                                                                                 f#0,my_array#2,my_struct#1
        // arc4_types/mutable_params.py:54
        // assert not f
        l-load f#0 2                                                                           my_array#2,my_struct#1,f#0
        !                                                                                      my_array#2,my_struct#1,tmp%6#0
        assert                                                                                 my_array#2,my_struct#1
        // arc4_types/mutable_params.py:56
        // assert my_array[1] == UInt8(5), "my_array has been mutated by the subroutine"
        l-load-copy my_array#2 1                                                               my_array#2,my_struct#1,my_array#2 (copy)
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_struct#1,aggregate%encoded_element%3#0
        byte 0x05                                                                              my_array#2,my_struct#1,aggregate%encoded_element%3#0,0x05
        b==                                                                                    my_array#2,my_struct#1,tmp%7#0
        assert // my_array has been mutated by the subroutine                                  my_array#2,my_struct#1
        // arc4_types/mutable_params.py:58
        // assert my_struct.s_val_1 == String(
        l-load-copy my_struct#1 0                                                              my_array#2,my_struct#1,my_struct#1 (copy)
        int 2                                                                                  my_array#2,my_struct#1,my_struct#1 (copy),2
        extract_uint16                                                                         my_array#2,my_struct#1,aggregate%extract_uint16%0#0
        l-load-copy my_struct#1 1                                                              my_array#2,my_struct#1,aggregate%extract_uint16%0#0,my_struct#1 (copy)
        int 4                                                                                  my_array#2,my_struct#1,aggregate%extract_uint16%0#0,my_struct#1 (copy),4
        extract_uint16                                                                         my_array#2,my_struct#1,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0
        l-load my_struct#1 2                                                                   my_array#2,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0,my_struct#1
        l-load aggregate%extract_uint16%0#0 2                                                  my_array#2,aggregate%extract_uint16%1#0,my_struct#1,aggregate%extract_uint16%0#0
        l-load aggregate%extract_uint16%1#0 2                                                  my_array#2,my_struct#1,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0
        substring3                                                                             my_array#2,aggregate%substring3%0#0
        // arc4_types/mutable_params.py:58-60
        // assert my_struct.s_val_1 == String(
        //     "AARRGH!"
        // ), "my_struct has been mutated by the subroutine"
        byte 0x000741415252474821                                                              my_array#2,aggregate%substring3%0#0,0x000741415252474821
        ==                                                                                     my_array#2,tmp%9#0
        assert // my_struct has been mutated by the subroutine                                 my_array#2
        // arc4_types/mutable_params.py:35
        // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
        byte 0x01020304                                                                        my_array#2,0x01020304
        // arc4_types/mutable_params.py:36-41
        // my_struct = TestStruct(
        //     b_val=Bool(True),
        //     u_val=UInt8(50),
        //     s_val_1=String("Happy"),
        //     s_val_2=String("Days"),
        // )
        byte 0x80320006000d00054861707079000444617973                                          my_array#2,0x01020304,0x80320006000d00054861707079000444617973
        // arc4_types/mutable_params.py:63
        // self.other_routine(my_array_copy.copy(), my_struct_copy.copy())
        callsub other_routine                                                                  my_array#2,other_routine%4#0,other_routine%5#0,other_routine%6#0,other_routine%7#0
        pop 1                                                                                  my_array#2,other_routine%4#0,other_routine%5#0,other_routine%6#0
        pop 1                                                                                  my_array#2,other_routine%4#0,other_routine%5#0
        pop 1                                                                                  my_array#2,other_routine%4#0
        pop 1                                                                                  my_array#2
        // arc4_types/mutable_params.py:85-89
        // self.mutate_tuple_items_and_reassign(
        //     (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy()),
        //     start=UInt64(0),
        //     reassign=True,
        // )
        l-load-copy my_array#2 0                                                               my_array#2,my_array#2 (copy)
        // arc4_types/mutable_params.py:133
        // array[0] = UInt8(10)
        byte 0x0a020304                                                                        my_array#2,my_array#2 (copy),0x0a020304
        // arc4_types/mutable_params.py:35
        // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
        byte 0x01020304                                                                        my_array#2,my_array#2 (copy),0x0a020304,0x01020304
        // arc4_types/mutable_params.py:87
        // start=UInt64(0),
        int 0                                                                                  my_array#2,my_array#2 (copy),0x0a020304,0x01020304,0
        // arc4_types/mutable_params.py:88
        // reassign=True,
        int 1                                                                                  my_array#2,my_array#2 (copy),0x0a020304,0x01020304,0,1
        // arc4_types/mutable_params.py:85-89
        // self.mutate_tuple_items_and_reassign(
        //     (my_array.copy(), my_array_copy_2.copy(), my_array_copy_3.copy()),
        //     start=UInt64(0),
        //     reassign=True,
        // )
        callsub mutate_tuple_items_and_reassign                                                my_array#2,mutate_tuple_items_and_reassign%0#0,mutate_tuple_items_and_reassign%1#0,mutate_tuple_items_and_reassign%2#0
        pop 1                                                                                  my_array#2,mutate_tuple_items_and_reassign%0#0,mutate_tuple_items_and_reassign%1#0
        pop 1                                                                                  my_array#2,mutate_tuple_items_and_reassign%0#0
        pop 1                                                                                  my_array#2
        // arc4_types/mutable_params.py:92-94
        // self.mutate_tuple_items_and_reassign(
        //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
        // )
        l-load my_array#2 0                                                                    my_array#2
        // arc4_types/mutable_params.py:133
        // array[0] = UInt8(10)
        byte 0x0a020304                                                                        my_array#2,0x0a020304
        // arc4_types/mutable_params.py:35
        // my_array = StaticArray(UInt8(1), UInt8(2), UInt8(3), UInt8(4))
        byte 0x01020304                                                                        my_array#2,0x0a020304,0x01020304
        // arc4_types/mutable_params.py:93
        // (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
        int 100                                                                                my_array#2,0x0a020304,0x01020304,100
        int 1                                                                                  my_array#2,0x0a020304,0x01020304,100,1
        // arc4_types/mutable_params.py:92-94
        // self.mutate_tuple_items_and_reassign(
        //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(100), reassign=True
        // )
        callsub mutate_tuple_items_and_reassign                                                my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:96
        // assert my_array[0] == 100
        l-load-copy my_array#2 2                                                               my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array#2 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%7#0
        byte 0x64                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%7#0,0x64
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%20#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:97
        // assert my_array_copy_2[0] == 101
        l-load-copy my_array_copy_2#4 1                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_2#4 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%8#0
        byte 0x65                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%8#0,0x65
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%21#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:98
        // assert my_array_copy_3[0] == 102
        l-load-copy my_array_copy_3#1 0                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_3#1 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%9#0
        byte 0x66                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%9#0,0x66
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%22#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:99
        // assert my_array[1] == 103
        l-load-copy my_array#2 2                                                               my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array#2 (copy)
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%10#0
        byte 0x67                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%10#0,0x67
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%23#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:100
        // assert my_array_copy_2[1] == 104
        l-load-copy my_array_copy_2#4 1                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_2#4 (copy)
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%11#0
        byte 0x68                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%11#0,0x68
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%24#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:101
        // assert my_array_copy_3[1] == 105
        l-load-copy my_array_copy_3#1 0                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_3#1 (copy)
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%12#0
        byte 0x69                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%12#0,0x69
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%25#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:103-105
        // self.mutate_tuple_items_and_reassign(
        //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
        // )
        l-load my_array#2 2                                                                    my_array_copy_2#4,my_array_copy_3#1,my_array#2
        l-load my_array_copy_2#4 2                                                             my_array_copy_3#1,my_array#2,my_array_copy_2#4
        l-load my_array_copy_3#1 2                                                             my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:104
        // (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
        int 200                                                                                my_array#2,my_array_copy_2#4,my_array_copy_3#1,200
        int 0                                                                                  my_array#2,my_array_copy_2#4,my_array_copy_3#1,200,0
        // arc4_types/mutable_params.py:103-105
        // self.mutate_tuple_items_and_reassign(
        //     (my_array, my_array_copy_2, my_array_copy_3), start=UInt64(200), reassign=False
        // )
        callsub mutate_tuple_items_and_reassign                                                my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:107
        // assert my_array[0] == 200
        l-load-copy my_array#2 2                                                               my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array#2 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%13#0
        byte 0xc8                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%13#0,0xc8
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%26#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:108
        // assert my_array_copy_2[0] == 201
        l-load-copy my_array_copy_2#4 1                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_2#4 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%14#0
        byte 0xc9                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%14#0,0xc9
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%27#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:109
        // assert my_array_copy_3[0] == 202
        l-load-copy my_array_copy_3#1 0                                                        my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array_copy_3#1 (copy)
        extract 0 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%15#0
        byte 0xca                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%15#0,0xca
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%28#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:110
        // assert my_array[1] == 206
        l-load-copy my_array#2 2                                                               my_array#2,my_array_copy_2#4,my_array_copy_3#1,my_array#2 (copy)
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%16#0
        byte 0xce                                                                              my_array#2,my_array_copy_2#4,my_array_copy_3#1,aggregate%encoded_element%16#0,0xce
        b==                                                                                    my_array#2,my_array_copy_2#4,my_array_copy_3#1,tmp%29#0
        assert                                                                                 my_array#2,my_array_copy_2#4,my_array_copy_3#1
        // arc4_types/mutable_params.py:111
        // assert my_array_copy_2[1] == 207
        l-load my_array_copy_2#4 1                                                             my_array#2,my_array_copy_3#1,my_array_copy_2#4
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,my_array_copy_3#1,aggregate%encoded_element%17#0
        byte 0xcf                                                                              my_array#2,my_array_copy_3#1,aggregate%encoded_element%17#0,0xcf
        b==                                                                                    my_array#2,my_array_copy_3#1,tmp%30#0
        assert                                                                                 my_array#2,my_array_copy_3#1
        // arc4_types/mutable_params.py:112
        // assert my_array_copy_3[1] == 208
        l-load my_array_copy_3#1 0                                                             my_array#2,my_array_copy_3#1
        extract 1 1 // on error: index access is out of bounds                                 my_array#2,aggregate%encoded_element%18#0
        byte 0xd0                                                                              my_array#2,aggregate%encoded_element%18#0,0xd0
        b==                                                                                    my_array#2,tmp%31#0
        assert                                                                                 my_array#2
        // arc4_types/mutable_params.py:115
        // self.mutate_tuple_items_and_reassign(foo, start=UInt64(222), reassign=False)
        l-load-copy my_array#2 0                                                               my_array#2,my_array#2 (copy)
        l-load-copy my_array#2 1                                                               my_array#2,my_array#2 (copy),my_array#2 (copy)
        l-load my_array#2 2                                                                    my_array#2 (copy),my_array#2 (copy),my_array#2
        int 222                                                                                my_array#2 (copy),my_array#2 (copy),my_array#2,222
        int 0                                                                                  my_array#2 (copy),my_array#2 (copy),my_array#2,222,0
        callsub mutate_tuple_items_and_reassign                                                foo.0#1,foo.1#1,foo.2#1
        // arc4_types/mutable_params.py:116
        // assert foo[0][1] == (306 - 78)
        l-load foo.0#1 2                                                                       foo.1#1,foo.2#1,foo.0#1
        extract 1 1 // on error: index access is out of bounds                                 foo.1#1,foo.2#1,aggregate%encoded_element%19#0
        byte 0xe4                                                                              foo.1#1,foo.2#1,aggregate%encoded_element%19#0,0xe4
        b==                                                                                    foo.1#1,foo.2#1,tmp%32#0
        assert                                                                                 foo.1#1,foo.2#1
        // arc4_types/mutable_params.py:117
        // assert foo[1][1] == (307 - 78)
        l-load foo.1#1 1                                                                       foo.2#1,foo.1#1
        extract 1 1 // on error: index access is out of bounds                                 foo.2#1,aggregate%encoded_element%20#0
        byte 0xe5                                                                              foo.2#1,aggregate%encoded_element%20#0,0xe5
        b==                                                                                    foo.2#1,tmp%33#0
        assert                                                                                 foo.2#1
        // arc4_types/mutable_params.py:118
        // assert foo[2][1] == (308 - 78)
        l-load foo.2#1 0                                                                       foo.2#1
        extract 1 1 // on error: index access is out of bounds                                 aggregate%encoded_element%21#0
        byte 0xe6                                                                              aggregate%encoded_element%21#0,0xe6
        b==                                                                                    tmp%34#0
        assert
        // arc4_types/mutable_params.py:31
        // return True
        int 1                                                                                  1
        return


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> uint64, uint64, bytes, bytes:
subroutine other_routine:
    other_routine_block@0:                                                                     (𝕡) array#0,struct#0 |
        // arc4_types/mutable_params.py:126
        // array[1] = UInt8(5)
        p-load array#0                                                                         (𝕡) array#0,struct#0 | array#0 (copy)
        byte 0x05                                                                              (𝕡) array#0,struct#0 | array#0 (copy),0x05
        replace2 1 // on error: index access is out of bounds                                  (𝕡) array#0,struct#0 | array#0
        p-store array#0                                                                        (𝕡) array#0,struct#0 |
        // arc4_types/mutable_params.py:127
        // struct.s_val_1 = String("AARRGH!")
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | struct#0 (copy)
        int 2                                                                                  (𝕡) array#0,struct#0 | struct#0 (copy),2
        extract_uint16                                                                         (𝕡) array#0,struct#0 | aggregate%item_offset%0#0
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,struct#0 (copy)
        int 0                                                                                  (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,struct#0 (copy),0
        l-load-copy aggregate%item_offset%0#0 2                                                (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,struct#0 (copy),0,aggregate%item_offset%0#0 (copy)
        extract3                                                                               (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%data_up_to_item%0#0
        byte 0x000741415252474821                                                              (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%data_up_to_item%0#0,0x000741415252474821
        concat                                                                                 (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,struct#0 (copy)
        int 4                                                                                  (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,struct#0 (copy),4
        extract_uint16                                                                         (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,struct#0 (copy)
        len                                                                                    (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,aggregate%total_length%0#0
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,aggregate%total_length%0#0,struct#0 (copy)
        l-load-copy aggregate%next_item_offset%0#0 2                                           (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,aggregate%total_length%0#0,struct#0 (copy),aggregate%next_item_offset%0#0 (copy)
        l-load aggregate%total_length%0#0 2                                                    (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,struct#0 (copy),aggregate%next_item_offset%0#0 (copy),aggregate%total_length%0#0
        substring3                                                                             (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%updated_data%0#0,aggregate%next_item_offset%0#0,aggregate%data_beyond_item%0#0
        l-load aggregate%updated_data%0#0 2                                                    (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%next_item_offset%0#0,aggregate%data_beyond_item%0#0,aggregate%updated_data%0#0
        l-load aggregate%data_beyond_item%0#0 1                                                (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%next_item_offset%0#0,aggregate%updated_data%0#0,aggregate%data_beyond_item%0#0
        concat                                                                                 (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%next_item_offset%0#0,aggregate%updated_data%1#0
        l-load-copy aggregate%next_item_offset%0#0 1                                           (𝕡) array#0,struct#0 | aggregate%item_offset%0#0,aggregate%next_item_offset%0#0,aggregate%updated_data%1#0,aggregate%next_item_offset%0#0 (copy)
        l-load aggregate%item_offset%0#0 3                                                     (𝕡) array#0,struct#0 | aggregate%next_item_offset%0#0,aggregate%updated_data%1#0,aggregate%next_item_offset%0#0 (copy),aggregate%item_offset%0#0
        -                                                                                      (𝕡) array#0,struct#0 | aggregate%next_item_offset%0#0,aggregate%updated_data%1#0,aggregate%old_value_length%0#0
        l-load aggregate%next_item_offset%0#0 2                                                (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%old_value_length%0#0,aggregate%next_item_offset%0#0
        int 9                                                                                  (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%old_value_length%0#0,aggregate%next_item_offset%0#0,9
        +                                                                                      (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%old_value_length%0#0,aggregate%tail_offset%1#0
        l-load aggregate%old_value_length%0#0 1                                                (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%tail_offset%1#0,aggregate%old_value_length%0#0
        -                                                                                      (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%tail_offset%2#0
        itob                                                                                   (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%as_bytes%1#0
        extract 6 2                                                                            (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%tail_offset_bytes%0#0
        l-load aggregate%updated_data%1#0 1                                                    (𝕡) array#0,struct#0 | aggregate%tail_offset_bytes%0#0,aggregate%updated_data%1#0
        l-load aggregate%tail_offset_bytes%0#0 1                                               (𝕡) array#0,struct#0 | aggregate%updated_data%1#0,aggregate%tail_offset_bytes%0#0
        replace2 4                                                                             (𝕡) array#0,struct#0 | struct#0
        p-store struct#0                                                                       (𝕡) array#0,struct#0 |
        // arc4_types/mutable_params.py:128
        // return True, False
        int 1                                                                                  (𝕡) array#0,struct#0 | 1
        int 0                                                                                  (𝕡) array#0,struct#0 | 1,0
        p-load array#0                                                                         (𝕡) array#0,struct#0 | 1,0,array#0 (copy)
        p-load struct#0                                                                        (𝕡) array#0,struct#0 | 1,0,array#0 (copy),struct#0 (copy)
        retsub                                                                                 1,0,array#0 (copy),struct#0 (copy)


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes, start: uint64, reassign: uint64) -> bytes, bytes, bytes:
subroutine mutate_tuple_items_and_reassign:
    mutate_tuple_items_and_reassign_block@0:                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 1                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 1
        v-store arrays.0%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 1                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 1
        v-store arrays.1%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 1                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 1
        v-store arrays.2%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:140
        // arrays[0][0] = UInt8(start)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0
        l-load-copy aggregate%val_as_bytes%0#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%0#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%bitlen%0#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%bitlen%0#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%no_overflow%0#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0
        l-load-copy aggregate%val_as_bytes%0#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%0#0 (copy)
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%uint8%0#0
        p-load arrays.0#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%uint8%0#0,arrays.0#0 (copy)
        l-load aggregate%uint8%0#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,arrays.0#0 (copy),aggregate%uint8%0#0
        replace2 0 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,arrays.0#0
        p-store arrays.0#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0
        // arc4_types/mutable_params.py:141
        // arrays[1][0] = UInt8(start + 1)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,start#0 (copy)
        int 1                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,start#0 (copy),1
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,tmp%1#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load-copy aggregate%val_as_bytes%1#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%1#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%bitlen%1#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%bitlen%1#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%no_overflow%1#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load-copy aggregate%val_as_bytes%1#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%1#0 (copy)
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%uint8%1#0
        p-load arrays.1#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%uint8%1#0,arrays.1#0 (copy)
        l-load aggregate%uint8%1#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,arrays.1#0 (copy),aggregate%uint8%1#0
        replace2 0 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,arrays.1#0
        p-store arrays.1#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        // arc4_types/mutable_params.py:142
        // arrays[2][0] = UInt8(start + 2)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,start#0 (copy)
        int 2                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,start#0 (copy),2
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,tmp%3#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        l-load-copy aggregate%val_as_bytes%2#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%2#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%bitlen%2#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%bitlen%2#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%no_overflow%2#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        l-load-copy aggregate%val_as_bytes%2#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%2#0 (copy)
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%uint8%2#0
        p-load arrays.2#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%uint8%2#0,arrays.2#0 (copy)
        l-load aggregate%uint8%2#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,arrays.2#0 (copy),aggregate%uint8%2#0
        replace2 0 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,arrays.2#0
        p-store arrays.2#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        // arc4_types/mutable_params.py:144
        // assert arrays[0][0] == start
        p-load arrays.0#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,arrays.0#0 (copy)
        extract 0 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%encoded_element%3#0
        l-load aggregate%val_as_bytes%0#0 3                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%encoded_element%3#0,aggregate%val_as_bytes%0#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,tmp%6#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        // arc4_types/mutable_params.py:145
        // assert arrays[1][0] == start + 1
        p-load arrays.1#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,arrays.1#0 (copy)
        extract 0 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0,aggregate%encoded_element%4#0
        l-load aggregate%val_as_bytes%1#0 2                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%2#0,aggregate%encoded_element%4#0,aggregate%val_as_bytes%1#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%2#0,tmp%9#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%2#0
        // arc4_types/mutable_params.py:146
        // assert arrays[2][0] == start + 2
        p-load arrays.2#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%2#0,arrays.2#0 (copy)
        extract 0 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%2#0,aggregate%encoded_element%5#0
        l-load aggregate%val_as_bytes%2#0 1                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%5#0,aggregate%val_as_bytes%2#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%12#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:148
        // arrays[0][1] = UInt8(start + 3)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 3                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),3
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%13#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0
        l-load-copy aggregate%val_as_bytes%3#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0,aggregate%val_as_bytes%3#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0,aggregate%bitlen%3#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0,aggregate%bitlen%3#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0,aggregate%no_overflow%3#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0
        l-load aggregate%val_as_bytes%3#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%3#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%3#0
        p-load arrays.0#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%3#0,arrays.0#0 (copy)
        l-load aggregate%uint8%3#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#0 (copy),aggregate%uint8%3#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#0
        p-store arrays.0#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:149
        // arrays[1][1] = UInt8(start + 4)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 4                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),4
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%15#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0
        l-load-copy aggregate%val_as_bytes%4#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%4#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0,aggregate%bitlen%4#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0,aggregate%bitlen%4#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0,aggregate%no_overflow%4#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0
        l-load aggregate%val_as_bytes%4#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%4#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%4#0
        p-load arrays.1#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%4#0,arrays.1#0 (copy)
        l-load aggregate%uint8%4#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#0 (copy),aggregate%uint8%4#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#0
        p-store arrays.1#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:150
        // arrays[2][1] = UInt8(start + 5)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 5                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),5
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%17#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0
        l-load-copy aggregate%val_as_bytes%5#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0,aggregate%val_as_bytes%5#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0,aggregate%bitlen%5#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0,aggregate%bitlen%5#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0,aggregate%no_overflow%5#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0
        l-load aggregate%val_as_bytes%5#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%5#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%5#0
        p-load arrays.2#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%5#0,arrays.2#0 (copy)
        l-load aggregate%uint8%5#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#0 (copy),aggregate%uint8%5#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#0
        p-store arrays.2#0                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:153
        // if reassign:
        p-load reassign#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | reassign#0 (copy)
        bz mutate_tuple_items_and_reassign_after_if_else@20 ; b mutate_tuple_items_and_reassign_if_body@13 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 

    mutate_tuple_items_and_reassign_if_body@13:                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 0                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 0
        v-store arrays.0%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 0                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 0
        v-store arrays.1%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        int 0                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 0
        v-store arrays.2%is_original#0                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        b mutate_tuple_items_and_reassign_after_if_else@20                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |

    mutate_tuple_items_and_reassign_after_if_else@20:                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:156
        // arrays[0][1] = UInt8(start + 6)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 6                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),6
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%19#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0
        l-store-copy aggregate%val_as_bytes%6#0 0                                              (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0,aggregate%val_as_bytes%6#0 (copy)
        v-store aggregate%val_as_bytes%6#0                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0
        l-load-copy aggregate%val_as_bytes%6#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0,aggregate%val_as_bytes%6#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0,aggregate%bitlen%6#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0,aggregate%bitlen%6#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0,aggregate%no_overflow%6#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0
        l-load aggregate%val_as_bytes%6#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%6#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%6#0
        p-load arrays.0#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%6#0,arrays.0#0 (copy)
        l-load aggregate%uint8%6#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#0 (copy),aggregate%uint8%6#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#14
        v-store arrays.0#14                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        p-load arrays.0#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#0 (copy)
        v-store arrays.0%out#7                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.0%is_original#0                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0%is_original#0
        bz mutate_tuple_items_and_reassign_after_if_else@22 ; b mutate_tuple_items_and_reassign_if_body@21 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 

    mutate_tuple_items_and_reassign_if_body@21:                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.0#14                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#14
        v-store arrays.0%out#7                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        b mutate_tuple_items_and_reassign_after_if_else@22                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |

    mutate_tuple_items_and_reassign_after_if_else@22:                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:157
        // arrays[1][1] = UInt8(start + 7)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 7                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),7
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%21#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0
        l-store-copy aggregate%val_as_bytes%7#0 0                                              (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0,aggregate%val_as_bytes%7#0 (copy)
        v-store aggregate%val_as_bytes%7#0                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0
        l-load-copy aggregate%val_as_bytes%7#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0,aggregate%val_as_bytes%7#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0,aggregate%bitlen%7#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0,aggregate%bitlen%7#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0,aggregate%no_overflow%7#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0
        l-load aggregate%val_as_bytes%7#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%7#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%7#0
        p-load arrays.1#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%7#0,arrays.1#0 (copy)
        l-load aggregate%uint8%7#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#0 (copy),aggregate%uint8%7#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#15
        v-store arrays.1#15                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        p-load arrays.1#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#0 (copy)
        v-store arrays.1%out#6                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.1%is_original#0                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1%is_original#0
        bz mutate_tuple_items_and_reassign_after_if_else@24 ; b mutate_tuple_items_and_reassign_if_body@23 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 

    mutate_tuple_items_and_reassign_if_body@23:                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.1#15                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#15
        v-store arrays.1%out#6                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        b mutate_tuple_items_and_reassign_after_if_else@24                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |

    mutate_tuple_items_and_reassign_after_if_else@24:                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:158
        // arrays[2][1] = UInt8(start + 8)
        p-load start#0                                                                         (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy)
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | start#0 (copy),8
        +                                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%23#0
        itob                                                                                   (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0
        l-store-copy aggregate%val_as_bytes%8#0 0                                              (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0,aggregate%val_as_bytes%8#0 (copy)
        v-store aggregate%val_as_bytes%8#0                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0
        l-load-copy aggregate%val_as_bytes%8#0 0                                               (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0,aggregate%val_as_bytes%8#0 (copy)
        bitlen                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0,aggregate%bitlen%8#0
        int 8                                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0,aggregate%bitlen%8#0,8
        <=                                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0,aggregate%no_overflow%8#0
        assert // overflow                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0
        l-load aggregate%val_as_bytes%8#0 0                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%val_as_bytes%8#0
        extract 7 1                                                                            (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%8#0
        p-load arrays.2#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%uint8%8#0,arrays.2#0 (copy)
        l-load aggregate%uint8%8#0 1                                                           (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#0 (copy),aggregate%uint8%8#0
        replace2 1 // on error: index access is out of bounds                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#16
        v-store arrays.2#16                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        p-load arrays.2#0                                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#0 (copy)
        v-store arrays.2%out#5                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.2%is_original#0                                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2%is_original#0
        bz mutate_tuple_items_and_reassign_after_if_else@26 ; b mutate_tuple_items_and_reassign_if_body@25 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | 

    mutate_tuple_items_and_reassign_if_body@25:                                                (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.2#16                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#16
        v-store arrays.2%out#5                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        b mutate_tuple_items_and_reassign_after_if_else@26                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |

    mutate_tuple_items_and_reassign_after_if_else@26:                                          (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:160
        // assert arrays[0][1] == start + 6
        v-load arrays.0#14                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0#14
        extract 1 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%12#0
        v-load aggregate%val_as_bytes%6#0                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%12#0,aggregate%val_as_bytes%6#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%27#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:161
        // assert arrays[1][1] == start + 7
        v-load arrays.1#15                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.1#15
        extract 1 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%13#0
        v-load aggregate%val_as_bytes%7#0                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%13#0,aggregate%val_as_bytes%7#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%30#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        // arc4_types/mutable_params.py:162
        // assert arrays[2][1] == start + 8
        v-load arrays.2#16                                                                     (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.2#16
        extract 1 1 // on error: index access is out of bounds                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%14#0
        v-load aggregate%val_as_bytes%8#0                                                      (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | aggregate%encoded_element%14#0,aggregate%val_as_bytes%8#0
        b==                                                                                    (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | tmp%33#0
        assert                                                                                 (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 |
        v-load arrays.0%out#7                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0%out#7
        v-load arrays.1%out#6                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0%out#7,arrays.1%out#6
        v-load arrays.2%out#5                                                                  (𝕡) arrays.0#0,arrays.1#0,arrays.2#0,start#0,reassign#0 | arrays.0%out#7,arrays.1%out#6,arrays.2%out#5
        retsub                                                                                 arrays.0%out#7,arrays.1%out#6,arrays.2%out#5


