main test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    block@0: // L28
        test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
        return 1u

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
    block@0: // L33
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let encoded%2#0: Encoded((uint8,uint8,uint8)) = (concat encoded%1#0 0x03)
        let encoded%3#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%2#0 0x04)
        let encoded%4#0: Encoded(uint8[4]) = (concat encoded%3#0 0x)
        let my_array#0: Encoded(uint8[4]) = encoded%4#0
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let length%0#0: uint64 = (len 0x4861707079)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x4861707079)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x44617973)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x44617973)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let encoded%5#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%0#0)
        let encoded%6#0: Encoded((bool1,uint8)) = (concat encoded%5#0 0x32)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 6u data_length%0#0)
        let as_bytes%2#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%7#0: Encoded((bool1,uint8,len+utf8[])) = (concat encoded%6#0 offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let data_length%1#0: uint64 = (len as_Encoded(len+utf8[])%1#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%8#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%7#0 offset_as_uint16%1#0)
        let encoded%9#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = (concat encoded%8#0 tail%1#0)
        let my_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = encoded%9#0
        let copy%0#0: Encoded(uint8[4]) = my_array#0
        let my_array_copy#0: Encoded(uint8[4]) = copy%0#0
        let copy%1#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = my_struct#0
        let my_struct_copy#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = copy%1#0
        let write_offset%0#0: uint64 = (* 2u 1u)
        let updated_array%0#0: bytes = (replace3 my_array#0 write_offset%0#0 0x05)
        let my_array#1: Encoded(uint8[4]) = updated_array%0#0
        let bytes_offset%0#0: uint64 = (* 2u 1u)
        let encoded_element%0#0: bytes = (extract3 my_array_copy#0 bytes_offset%0#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%0#0: biguint = encoded_element%0#0
        let reinterpret_biguint%1#0: biguint = 0x03
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0) // my_array_copy should be unchanged
        let bytes_offset%1#0: uint64 = (* 2u 1u)
        let encoded_element%1#0: bytes = (extract3 my_array#1 bytes_offset%1#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%2#0: biguint = encoded_element%1#0
        let reinterpret_biguint%3#0: biguint = 0x05
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0) // my_array should be mutated
        let (other_routine%0#0: bool, other_routine%1#0: bool, other_routine%2#0: Encoded(uint8[4]), other_routine%3#0: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
        let my_struct#1: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = other_routine%3#0
        let my_array#2: Encoded(uint8[4]) = other_routine%2#0
        let t#0: bool = other_routine%0#0
        let f#0: bool = other_routine%1#0
        (assert t#0)
        let tmp%2#0: bool = (! f#0)
        (assert tmp%2#0)
        let bytes_offset%2#0: uint64 = (* 1u 1u)
        let encoded_element%2#0: bytes = (extract3 my_array#2 bytes_offset%2#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%4#0: biguint = encoded_element%2#0
        let reinterpret_biguint%5#0: biguint = 0x05
        let tmp%3#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%3#0) // my_array has been mutated by the subroutine
        let extract_uint16%0#0: uint64 = (extract_uint16 my_struct#1 2u)
        let extract_uint16%1#0: uint64 = (extract_uint16 my_struct#1 4u)
        let substring3%0#0: bytes = (substring3 my_struct#1 extract_uint16%0#0 extract_uint16%1#0)
        let length%2#0: uint64 = (len 0x41415252474821)
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x41415252474821)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let tmp%4#0: bool = (== substring3%0#0 as_Encoded(len+utf8[])%2#0)
        (assert tmp%4#0) // my_struct has been mutated by the subroutine
        let copy%2#0: Encoded(uint8[4]) = my_array_copy#0
        let copy%3#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = my_struct_copy#0
        let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: Encoded(uint8[4]), other_routine%7#0: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(copy%2#0, copy%3#0)
        let copy%3#1: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = other_routine%7#0
        let copy%2#1: Encoded(uint8[4]) = other_routine%6#0
        let bytes_offset%3#0: uint64 = (* 1u 1u)
        let encoded_element%3#0: bytes = (extract3 my_array_copy#0 bytes_offset%3#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%6#0: biguint = encoded_element%3#0
        let reinterpret_biguint%7#0: biguint = 0x02
        let tmp%5#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        (assert tmp%5#0) // my_array_copy should not be mutated by the subroutine
        let extract_uint16%2#0: uint64 = (extract_uint16 my_struct_copy#0 2u)
        let extract_uint16%3#0: uint64 = (extract_uint16 my_struct_copy#0 4u)
        let substring3%1#0: bytes = (substring3 my_struct_copy#0 extract_uint16%2#0 extract_uint16%3#0)
        let length%3#0: uint64 = (len 0x4861707079)
        let as_bytes%5#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x4861707079)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tmp%6#0: bool = (== substring3%1#0 as_Encoded(len+utf8[])%3#0)
        (assert tmp%6#0) // my_struct_copy should not be mutated by the subroutine
        let copy%4#0: Encoded(uint8[4]) = my_array_copy#0
        let my_array_copy_2#0: Encoded(uint8[4]) = copy%4#0
        let (other_routine_2%0#0: Encoded(uint8[4]), other_routine_2%1#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
        let my_array_copy_2#1: Encoded(uint8[4]) = other_routine_2%1#0
        let my_array_copy_2#2: Encoded(uint8[4]) = (other_routine_2%0#0)
        let bytes_offset%4#0: uint64 = (* 0u 1u)
        let encoded_element%4#0: bytes = (extract3 my_array_copy_2#2 bytes_offset%4#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%8#0: biguint = encoded_element%4#0
        let reinterpret_biguint%9#0: biguint = 0x01
        let tmp%7#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
        (assert tmp%7#0) // my_array_copy_2 should have original value
        let (other_routine_2%2#0: Encoded(uint8[4]), other_routine_2%3#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
        let my_array_copy_2#3: Encoded(uint8[4]) = other_routine_2%3#0
        let bytes_offset%5#0: uint64 = (* 0u 1u)
        let encoded_element%5#0: bytes = (extract3 my_array_copy_2#3 bytes_offset%5#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%10#0: biguint = encoded_element%5#0
        let reinterpret_biguint%11#0: biguint = 0x0a
        let tmp%8#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
        (assert tmp%8#0) // my_array_copy_2 should have mutated value
        let copy%5#0: Encoded(uint8[4]) = my_array_copy#0
        let my_array_copy_3#0: Encoded(uint8[4]) = copy%5#0
        let copy%6#0: Encoded(uint8[4]) = my_array#2
        let copy%7#0: Encoded(uint8[4]) = my_array_copy_2#3
        let copy%8#0: Encoded(uint8[4]) = my_array_copy_3#0
        let (originals.0#0: Encoded(uint8[4]), originals.1#0: Encoded(uint8[4]), originals.2#0: Encoded(uint8[4])) = (copy%6#0, copy%7#0, copy%8#0)
        let copy%9#0: Encoded(uint8[4]) = my_array#2
        let copy%10#0: Encoded(uint8[4]) = my_array_copy_2#3
        let copy%11#0: Encoded(uint8[4]) = my_array_copy_3#0
        let (mutate_tuple_items_and_reassign%0#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%1#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%2#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(copy%9#0, copy%10#0, copy%11#0, 0u, 1u)
        let copy%11#1: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%2#0
        let copy%10#1: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%1#0
        let copy%9#1: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%0#0
        let tmp%9#0: bool = (== originals.0#0 my_array#2)
        let tmp%10#0: bool = (== originals.1#0 my_array_copy_2#3)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        let tmp%12#0: bool = (== originals.2#0 my_array_copy_3#0)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let (mutate_tuple_items_and_reassign%3#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%4#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, my_array_copy_3#0, 100u, 1u)
        let my_array_copy_3#1: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%5#0
        let my_array_copy_2#4: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%4#0
        let my_array#3: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%3#0
        let bytes_offset%6#0: uint64 = (* 0u 1u)
        let encoded_element%6#0: bytes = (extract3 my_array#3 bytes_offset%6#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%12#0: biguint = encoded_element%6#0
        let reinterpret_biguint%13#0: biguint = 0x64
        let tmp%14#0: bool = (b== reinterpret_biguint%12#0 reinterpret_biguint%13#0)
        (assert tmp%14#0)
        let bytes_offset%7#0: uint64 = (* 0u 1u)
        let encoded_element%7#0: bytes = (extract3 my_array_copy_2#4 bytes_offset%7#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%14#0: biguint = encoded_element%7#0
        let reinterpret_biguint%15#0: biguint = 0x65
        let tmp%15#0: bool = (b== reinterpret_biguint%14#0 reinterpret_biguint%15#0)
        (assert tmp%15#0)
        let bytes_offset%8#0: uint64 = (* 0u 1u)
        let encoded_element%8#0: bytes = (extract3 my_array_copy_3#1 bytes_offset%8#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%16#0: biguint = encoded_element%8#0
        let reinterpret_biguint%17#0: biguint = 0x66
        let tmp%16#0: bool = (b== reinterpret_biguint%16#0 reinterpret_biguint%17#0)
        (assert tmp%16#0)
        let bytes_offset%9#0: uint64 = (* 1u 1u)
        let encoded_element%9#0: bytes = (extract3 my_array#3 bytes_offset%9#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%18#0: biguint = encoded_element%9#0
        let reinterpret_biguint%19#0: biguint = 0x67
        let tmp%17#0: bool = (b== reinterpret_biguint%18#0 reinterpret_biguint%19#0)
        (assert tmp%17#0)
        let bytes_offset%10#0: uint64 = (* 1u 1u)
        let encoded_element%10#0: bytes = (extract3 my_array_copy_2#4 bytes_offset%10#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%20#0: biguint = encoded_element%10#0
        let reinterpret_biguint%21#0: biguint = 0x68
        let tmp%18#0: bool = (b== reinterpret_biguint%20#0 reinterpret_biguint%21#0)
        (assert tmp%18#0)
        let bytes_offset%11#0: uint64 = (* 1u 1u)
        let encoded_element%11#0: bytes = (extract3 my_array_copy_3#1 bytes_offset%11#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%22#0: biguint = encoded_element%11#0
        let reinterpret_biguint%23#0: biguint = 0x69
        let tmp%19#0: bool = (b== reinterpret_biguint%22#0 reinterpret_biguint%23#0)
        (assert tmp%19#0)
        let (mutate_tuple_items_and_reassign%6#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%7#0: Encoded(uint8[4]), mutate_tuple_items_and_reassign%8#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
        let my_array_copy_3#2: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%8#0
        let my_array_copy_2#5: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%7#0
        let my_array#4: Encoded(uint8[4]) = mutate_tuple_items_and_reassign%6#0
        let bytes_offset%12#0: uint64 = (* 0u 1u)
        let encoded_element%12#0: bytes = (extract3 my_array#4 bytes_offset%12#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%24#0: biguint = encoded_element%12#0
        let reinterpret_biguint%25#0: biguint = 0xc8
        let tmp%20#0: bool = (b== reinterpret_biguint%24#0 reinterpret_biguint%25#0)
        (assert tmp%20#0)
        let bytes_offset%13#0: uint64 = (* 0u 1u)
        let encoded_element%13#0: bytes = (extract3 my_array_copy_2#5 bytes_offset%13#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%26#0: biguint = encoded_element%13#0
        let reinterpret_biguint%27#0: biguint = 0xc9
        let tmp%21#0: bool = (b== reinterpret_biguint%26#0 reinterpret_biguint%27#0)
        (assert tmp%21#0)
        let bytes_offset%14#0: uint64 = (* 0u 1u)
        let encoded_element%14#0: bytes = (extract3 my_array_copy_3#2 bytes_offset%14#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%28#0: biguint = encoded_element%14#0
        let reinterpret_biguint%29#0: biguint = 0xca
        let tmp%22#0: bool = (b== reinterpret_biguint%28#0 reinterpret_biguint%29#0)
        (assert tmp%22#0)
        let bytes_offset%15#0: uint64 = (* 1u 1u)
        let encoded_element%15#0: bytes = (extract3 my_array#4 bytes_offset%15#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%30#0: biguint = encoded_element%15#0
        let reinterpret_biguint%31#0: biguint = 0xce
        let tmp%23#0: bool = (b== reinterpret_biguint%30#0 reinterpret_biguint%31#0)
        (assert tmp%23#0)
        let bytes_offset%16#0: uint64 = (* 1u 1u)
        let encoded_element%16#0: bytes = (extract3 my_array_copy_2#5 bytes_offset%16#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%32#0: biguint = encoded_element%16#0
        let reinterpret_biguint%33#0: biguint = 0xcf
        let tmp%24#0: bool = (b== reinterpret_biguint%32#0 reinterpret_biguint%33#0)
        (assert tmp%24#0)
        let bytes_offset%17#0: uint64 = (* 1u 1u)
        let encoded_element%17#0: bytes = (extract3 my_array_copy_3#2 bytes_offset%17#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%34#0: biguint = encoded_element%17#0
        let reinterpret_biguint%35#0: biguint = 0xd0
        let tmp%25#0: bool = (b== reinterpret_biguint%34#0 reinterpret_biguint%35#0)
        (assert tmp%25#0)
        let copy%12#0: Encoded(uint8[4]) = my_array#4
        let encoded%10#0: Encoded((uint8[4])) = (concat 0x copy%12#0)
        let encoded%11#0: Encoded((uint8[4])) = (concat encoded%10#0 0x)
        let nested#0: Encoded((uint8[4])) = encoded%11#0
        let extract%0#0: bytes = (extract3 nested#0 0u 4u)
        let copy%13#0: bytes = extract%0#0
        let (other_routine_2%4#0: Encoded(uint8[4]), other_routine_2%5#0: Encoded(uint8[4])) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(copy%13#0)
        let copy%13#1: bytes = other_routine_2%5#0
        return 

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: Encoded(uint8[4]), struct: Encoded((bool1,uint8,len+utf8[],len+utf8[]))) -> <bool, bool, Encoded(uint8[4]), Encoded((bool1,uint8,len+utf8[],len+utf8[]))>:
    block@0: // L118
        let array%is_original#0: bool = 1u
        let array%out#0: Encoded(uint8[4]) = array#0
        let struct%is_original#0: bool = 1u
        let struct%out#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = struct#0
        let write_offset%0#0: uint64 = (* 1u 1u)
        let updated_array%0#0: bytes = (replace3 array#0 write_offset%0#0 0x05)
        let array#1: Encoded(uint8[4]) = updated_array%0#0
        goto array%is_original#0 ? block@1 : block@2
    block@1: // if_body_L1
        let array%out#1: Encoded(uint8[4]) = array#1
        goto block@2
    block@2: // after_if_else_L1
        let length%0#0: uint64 = (len 0x41415252474821)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x41415252474821)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
        let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
        let total_data_length%0#0: uint64 = (len struct#0)
        let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 as_Encoded(len+utf8[])%0#0)
        let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
        let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
        let new_value_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 4u)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
        let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob tail_offset%2#0)
        let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let updated_data%2#0: bytes = (replace3 updated_data%1#0 4u tail_offset_bytes%0#0)
        let struct#2: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = updated_data%2#0
        goto struct%is_original#0 ? block@3 : block@4
    block@3: // if_body_L1
        let struct%out#1: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = struct#2
        goto block@4
    block@4: // after_if_else_L1
        return 1u 0u array#1 struct#2

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: Encoded(uint8[4])) -> <Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L124
        let array%is_original#0: bool = 1u
        let array%out#0: Encoded(uint8[4]) = array#0
        let copy%0#0: Encoded(uint8[4]) = array#0
        let copy#0: Encoded(uint8[4]) = copy%0#0
        let write_offset%0#0: uint64 = (* 0u 1u)
        let updated_array%0#0: bytes = (replace3 array#0 write_offset%0#0 0x0a)
        let array#1: Encoded(uint8[4]) = updated_array%0#0
        goto array%is_original#0 ? block@1 : block@2
    block@1: // if_body_L1
        let array%out#1: Encoded(uint8[4]) = array#1
        goto block@2
    block@2: // after_if_else_L1
        return copy#0 array#1

subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: Encoded(uint8[4]), arrays.1: Encoded(uint8[4]), arrays.2: Encoded(uint8[4]), start: uint64, reassign: bool) -> <Encoded(uint8[4]), Encoded(uint8[4]), Encoded(uint8[4])>:
    block@0: // L130
        let arrays.0%is_original#0: bool = 1u
        let arrays.0%out#0: Encoded(uint8[4]) = arrays.0#0
        let arrays.1%is_original#0: bool = 1u
        let arrays.1%out#0: Encoded(uint8[4]) = arrays.1#0
        let arrays.2%is_original#0: bool = 1u
        let arrays.2%out#0: Encoded(uint8[4]) = arrays.2#0
        let val_as_bytes%0#0: bytes[8] = (itob start#0)
        let bitlen%0#0: uint64 = (bitlen val_as_bytes%0#0)
        let no_overflow%0#0: bool = (<= bitlen%0#0 8u)
        (assert no_overflow%0#0) // overflow
        let uint8%0#0: bytes = (extract3 val_as_bytes%0#0 7u 1u)
        let as_Encoded(uint8)%0#0: Encoded(uint8) = uint8%0#0
        let write_offset%0#0: uint64 = (* 0u 1u)
        let updated_array%0#0: bytes = (replace3 arrays.0#0 write_offset%0#0 as_Encoded(uint8)%0#0)
        let arrays.0#1: Encoded(uint8[4]) = updated_array%0#0
        goto arrays.0%is_original#0 ? block@1 : block@2
    block@1: // if_body_L1
        let arrays.0%out#1: Encoded(uint8[4]) = arrays.0#1
        goto block@2
    block@2: // after_if_else_L1
        let arrays.0%out#14: Encoded(uint8[4]) = φ(arrays.0%out#0 <- block@0, arrays.0%out#1 <- block@1)
        let tmp%0#0: uint64 = (+ start#0 1u)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%0#0)
        let bitlen%1#0: uint64 = (bitlen val_as_bytes%1#0)
        let no_overflow%1#0: bool = (<= bitlen%1#0 8u)
        (assert no_overflow%1#0) // overflow
        let uint8%1#0: bytes = (extract3 val_as_bytes%1#0 7u 1u)
        let as_Encoded(uint8)%1#0: Encoded(uint8) = uint8%1#0
        let write_offset%1#0: uint64 = (* 0u 1u)
        let updated_array%1#0: bytes = (replace3 arrays.1#0 write_offset%1#0 as_Encoded(uint8)%1#0)
        let arrays.1#2: Encoded(uint8[4]) = updated_array%1#0
        goto arrays.1%is_original#0 ? block@3 : block@4
    block@3: // if_body_L1
        let arrays.1%out#1: Encoded(uint8[4]) = arrays.1#2
        goto block@4
    block@4: // after_if_else_L1
        let arrays.1%out#13: Encoded(uint8[4]) = φ(arrays.1%out#0 <- block@2, arrays.1%out#1 <- block@3)
        let tmp%1#0: uint64 = (+ start#0 2u)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        let bitlen%2#0: uint64 = (bitlen val_as_bytes%2#0)
        let no_overflow%2#0: bool = (<= bitlen%2#0 8u)
        (assert no_overflow%2#0) // overflow
        let uint8%2#0: bytes = (extract3 val_as_bytes%2#0 7u 1u)
        let as_Encoded(uint8)%2#0: Encoded(uint8) = uint8%2#0
        let write_offset%2#0: uint64 = (* 0u 1u)
        let updated_array%2#0: bytes = (replace3 arrays.2#0 write_offset%2#0 as_Encoded(uint8)%2#0)
        let arrays.2#3: Encoded(uint8[4]) = updated_array%2#0
        goto arrays.2%is_original#0 ? block@5 : block@6
    block@5: // if_body_L1
        let arrays.2%out#1: Encoded(uint8[4]) = arrays.2#3
        goto block@6
    block@6: // after_if_else_L1
        let arrays.2%out#12: Encoded(uint8[4]) = φ(arrays.2%out#0 <- block@4, arrays.2%out#1 <- block@5)
        let bytes_offset%0#0: uint64 = (* 0u 1u)
        let encoded_element%0#0: bytes = (extract3 arrays.0#1 bytes_offset%0#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%0#0: biguint = encoded_element%0#0
        let tmp%2#0: biguint = (itob start#0)
        let tmp%3#0: bool = (b== reinterpret_biguint%0#0 tmp%2#0)
        (assert tmp%3#0)
        let bytes_offset%1#0: uint64 = (* 0u 1u)
        let encoded_element%1#0: bytes = (extract3 arrays.1#2 bytes_offset%1#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%1#0: biguint = encoded_element%1#0
        let tmp%4#0: uint64 = (+ start#0 1u)
        let tmp%5#0: biguint = (itob tmp%4#0)
        let tmp%6#0: bool = (b== reinterpret_biguint%1#0 tmp%5#0)
        (assert tmp%6#0)
        let bytes_offset%2#0: uint64 = (* 0u 1u)
        let encoded_element%2#0: bytes = (extract3 arrays.2#3 bytes_offset%2#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%2#0: biguint = encoded_element%2#0
        let tmp%7#0: uint64 = (+ start#0 2u)
        let tmp%8#0: biguint = (itob tmp%7#0)
        let tmp%9#0: bool = (b== reinterpret_biguint%2#0 tmp%8#0)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (+ start#0 3u)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%10#0)
        let bitlen%3#0: uint64 = (bitlen val_as_bytes%3#0)
        let no_overflow%3#0: bool = (<= bitlen%3#0 8u)
        (assert no_overflow%3#0) // overflow
        let uint8%3#0: bytes = (extract3 val_as_bytes%3#0 7u 1u)
        let as_Encoded(uint8)%3#0: Encoded(uint8) = uint8%3#0
        let write_offset%3#0: uint64 = (* 1u 1u)
        let updated_array%3#0: bytes = (replace3 arrays.0#1 write_offset%3#0 as_Encoded(uint8)%3#0)
        let arrays.0#5: Encoded(uint8[4]) = updated_array%3#0
        goto arrays.0%is_original#0 ? block@7 : block@8
    block@7: // if_body_L1
        let arrays.0%out#2: Encoded(uint8[4]) = arrays.0#5
        goto block@8
    block@8: // after_if_else_L1
        let arrays.0%out#11: Encoded(uint8[4]) = φ(arrays.0%out#14 <- block@6, arrays.0%out#2 <- block@7)
        let tmp%11#0: uint64 = (+ start#0 4u)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%11#0)
        let bitlen%4#0: uint64 = (bitlen val_as_bytes%4#0)
        let no_overflow%4#0: bool = (<= bitlen%4#0 8u)
        (assert no_overflow%4#0) // overflow
        let uint8%4#0: bytes = (extract3 val_as_bytes%4#0 7u 1u)
        let as_Encoded(uint8)%4#0: Encoded(uint8) = uint8%4#0
        let write_offset%4#0: uint64 = (* 1u 1u)
        let updated_array%4#0: bytes = (replace3 arrays.1#2 write_offset%4#0 as_Encoded(uint8)%4#0)
        let arrays.1#6: Encoded(uint8[4]) = updated_array%4#0
        goto arrays.1%is_original#0 ? block@9 : block@10
    block@9: // if_body_L1
        let arrays.1%out#2: Encoded(uint8[4]) = arrays.1#6
        goto block@10
    block@10: // after_if_else_L1
        let arrays.1%out#10: Encoded(uint8[4]) = φ(arrays.1%out#13 <- block@8, arrays.1%out#2 <- block@9)
        let tmp%12#0: uint64 = (+ start#0 5u)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%12#0)
        let bitlen%5#0: uint64 = (bitlen val_as_bytes%5#0)
        let no_overflow%5#0: bool = (<= bitlen%5#0 8u)
        (assert no_overflow%5#0) // overflow
        let uint8%5#0: bytes = (extract3 val_as_bytes%5#0 7u 1u)
        let as_Encoded(uint8)%5#0: Encoded(uint8) = uint8%5#0
        let write_offset%5#0: uint64 = (* 1u 1u)
        let updated_array%5#0: bytes = (replace3 arrays.2#3 write_offset%5#0 as_Encoded(uint8)%5#0)
        let arrays.2#7: Encoded(uint8[4]) = updated_array%5#0
        goto arrays.2%is_original#0 ? block@11 : block@12
    block@11: // if_body_L1
        let arrays.2%out#2: Encoded(uint8[4]) = arrays.2#7
        goto block@12
    block@12: // after_if_else_L1
        let arrays.2%out#9: Encoded(uint8[4]) = φ(arrays.2%out#12 <- block@10, arrays.2%out#2 <- block@11)
        goto reassign#0 ? block@13 : block@20
    block@13: // if_body_L148
        let copy%0#0: Encoded(uint8[4]) = arrays.0#5
        let copy%1#0: Encoded(uint8[4]) = arrays.1#6
        let copy%2#0: Encoded(uint8[4]) = arrays.2#7
        let arrays.0%is_original#4: bool = 0u
        let arrays.1%is_original#5: bool = 0u
        let arrays.2%is_original#6: bool = 0u
        let (arrays.0#9: Encoded(uint8[4]), arrays.1#9: Encoded(uint8[4]), arrays.2#9: Encoded(uint8[4])) = (copy%0#0, copy%1#0, copy%2#0)
        goto arrays.0%is_original#4 ? block@14 : block@15
    block@14: // if_body_L1
        let arrays.0%out#3: Encoded(uint8[4]) = arrays.0#9
        goto block@15
    block@15: // after_if_else_L1
        let arrays.0%out#17: Encoded(uint8[4]) = φ(arrays.0%out#11 <- block@13, arrays.0%out#3 <- block@14)
        goto arrays.1%is_original#5 ? block@16 : block@17
    block@16: // if_body_L1
        let arrays.1%out#3: Encoded(uint8[4]) = arrays.1#9
        goto block@17
    block@17: // after_if_else_L1
        let arrays.1%out#16: Encoded(uint8[4]) = φ(arrays.1%out#10 <- block@15, arrays.1%out#3 <- block@16)
        goto arrays.2%is_original#6 ? block@18 : block@19
    block@18: // if_body_L1
        let arrays.2%out#3: Encoded(uint8[4]) = arrays.2#9
        goto block@19
    block@19: // after_if_else_L1
        let arrays.2%out#15: Encoded(uint8[4]) = φ(arrays.2%out#9 <- block@17, arrays.2%out#3 <- block@18)
        goto block@20
    block@20: // after_if_else_L147
        let arrays.0#10: Encoded(uint8[4]) = φ(arrays.0#5 <- block@12, arrays.0#9 <- block@19)
        let arrays.1#11: Encoded(uint8[4]) = φ(arrays.1#6 <- block@12, arrays.1#9 <- block@19)
        let arrays.2#12: Encoded(uint8[4]) = φ(arrays.2#7 <- block@12, arrays.2#9 <- block@19)
        let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@12, arrays.0%is_original#4 <- block@19)
        let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@12, arrays.1%is_original#5 <- block@19)
        let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@12, arrays.2%is_original#6 <- block@19)
        let arrays.0%out#8: Encoded(uint8[4]) = φ(arrays.0%out#11 <- block@12, arrays.0%out#17 <- block@19)
        let arrays.1%out#8: Encoded(uint8[4]) = φ(arrays.1%out#10 <- block@12, arrays.1%out#16 <- block@19)
        let arrays.2%out#8: Encoded(uint8[4]) = φ(arrays.2%out#9 <- block@12, arrays.2%out#15 <- block@19)
        let tmp%13#0: uint64 = (+ start#0 6u)
        let val_as_bytes%6#0: bytes[8] = (itob tmp%13#0)
        let bitlen%6#0: uint64 = (bitlen val_as_bytes%6#0)
        let no_overflow%6#0: bool = (<= bitlen%6#0 8u)
        (assert no_overflow%6#0) // overflow
        let uint8%6#0: bytes = (extract3 val_as_bytes%6#0 7u 1u)
        let as_Encoded(uint8)%6#0: Encoded(uint8) = uint8%6#0
        let write_offset%6#0: uint64 = (* 1u 1u)
        let updated_array%6#0: bytes = (replace3 arrays.0#10 write_offset%6#0 as_Encoded(uint8)%6#0)
        let arrays.0#14: Encoded(uint8[4]) = updated_array%6#0
        goto arrays.0%is_original#5 ? block@21 : block@22
    block@21: // if_body_L1
        let arrays.0%out#4: Encoded(uint8[4]) = arrays.0#14
        goto block@22
    block@22: // after_if_else_L1
        let arrays.0%out#7: Encoded(uint8[4]) = φ(arrays.0%out#8 <- block@20, arrays.0%out#4 <- block@21)
        let tmp%14#0: uint64 = (+ start#0 7u)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%14#0)
        let bitlen%7#0: uint64 = (bitlen val_as_bytes%7#0)
        let no_overflow%7#0: bool = (<= bitlen%7#0 8u)
        (assert no_overflow%7#0) // overflow
        let uint8%7#0: bytes = (extract3 val_as_bytes%7#0 7u 1u)
        let as_Encoded(uint8)%7#0: Encoded(uint8) = uint8%7#0
        let write_offset%7#0: uint64 = (* 1u 1u)
        let updated_array%7#0: bytes = (replace3 arrays.1#11 write_offset%7#0 as_Encoded(uint8)%7#0)
        let arrays.1#15: Encoded(uint8[4]) = updated_array%7#0
        goto arrays.1%is_original#8 ? block@23 : block@24
    block@23: // if_body_L1
        let arrays.1%out#4: Encoded(uint8[4]) = arrays.1#15
        goto block@24
    block@24: // after_if_else_L1
        let arrays.1%out#6: Encoded(uint8[4]) = φ(arrays.1%out#8 <- block@22, arrays.1%out#4 <- block@23)
        let tmp%15#0: uint64 = (+ start#0 8u)
        let val_as_bytes%8#0: bytes[8] = (itob tmp%15#0)
        let bitlen%8#0: uint64 = (bitlen val_as_bytes%8#0)
        let no_overflow%8#0: bool = (<= bitlen%8#0 8u)
        (assert no_overflow%8#0) // overflow
        let uint8%8#0: bytes = (extract3 val_as_bytes%8#0 7u 1u)
        let as_Encoded(uint8)%8#0: Encoded(uint8) = uint8%8#0
        let write_offset%8#0: uint64 = (* 1u 1u)
        let updated_array%8#0: bytes = (replace3 arrays.2#12 write_offset%8#0 as_Encoded(uint8)%8#0)
        let arrays.2#16: Encoded(uint8[4]) = updated_array%8#0
        goto arrays.2%is_original#11 ? block@25 : block@26
    block@25: // if_body_L1
        let arrays.2%out#4: Encoded(uint8[4]) = arrays.2#16
        goto block@26
    block@26: // after_if_else_L1
        let arrays.2%out#5: Encoded(uint8[4]) = φ(arrays.2%out#8 <- block@24, arrays.2%out#4 <- block@25)
        let bytes_offset%3#0: uint64 = (* 1u 1u)
        let encoded_element%3#0: bytes = (extract3 arrays.0#14 bytes_offset%3#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%3#0: biguint = encoded_element%3#0
        let tmp%16#0: uint64 = (+ start#0 6u)
        let tmp%17#0: biguint = (itob tmp%16#0)
        let tmp%18#0: bool = (b== reinterpret_biguint%3#0 tmp%17#0)
        (assert tmp%18#0)
        let bytes_offset%4#0: uint64 = (* 1u 1u)
        let encoded_element%4#0: bytes = (extract3 arrays.1#15 bytes_offset%4#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%4#0: biguint = encoded_element%4#0
        let tmp%19#0: uint64 = (+ start#0 7u)
        let tmp%20#0: biguint = (itob tmp%19#0)
        let tmp%21#0: bool = (b== reinterpret_biguint%4#0 tmp%20#0)
        (assert tmp%21#0)
        let bytes_offset%5#0: uint64 = (* 1u 1u)
        let encoded_element%5#0: bytes = (extract3 arrays.2#16 bytes_offset%5#0 1u) // on error: index access is out of bounds
        let reinterpret_biguint%5#0: biguint = encoded_element%5#0
        let tmp%22#0: uint64 = (+ start#0 8u)
        let tmp%23#0: biguint = (itob tmp%22#0)
        let tmp%24#0: bool = (b== reinterpret_biguint%5#0 tmp%23#0)
        (assert tmp%24#0)
        return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5