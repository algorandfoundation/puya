contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> bool:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let my_struct#0: bytes = 0x80320006000d00054861707079000444617973
                let my_array#1: bytes = ((replace2 2) 0x01020304 0x05)
                let reinterpret_biguint%2#0: biguint = ((extract 2 1) my_array#1) // on error: Index access is out of bounds
                let tmp%1#0: bool = (b== reinterpret_biguint%2#0 0x05)
                (assert tmp%1#0) // my_array should be mutated
                let (t#0: bool, f#0: bool, my_array#2: bytes, my_struct#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
                (assert t#0)
                let tmp%2#0: bool = (! f#0)
                (assert tmp%2#0)
                let reinterpret_biguint%4#0: biguint = ((extract 1 1) my_array#2) // on error: Index access is out of bounds
                let tmp%3#0: bool = (b== reinterpret_biguint%4#0 0x05)
                (assert tmp%3#0) // my_array has been mutated by the subroutine
                let item_start_offset%0#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 my_struct#1 4u)
                let tmp%4#0: bytes = (substring3 my_struct#1 item_start_offset%0#0 item_end_offset%0#0)
                let tmp%5#0: bool = (== tmp%4#0 0x000741415252474821)
                (assert tmp%5#0) // my_struct has been mutated by the subroutine
                let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: bytes, other_routine%7#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020304, my_struct#0)
                let item_start_offset%1#0: uint64 = (extract_uint16 my_struct#0 2u)
                let item_end_offset%1#0: uint64 = (extract_uint16 my_struct#0 4u)
                let tmp%7#0: bytes = (substring3 my_struct#0 item_start_offset%1#0 item_end_offset%1#0)
                let tmp%8#0: bool = (== tmp%7#0 0x00054861707079)
                (assert tmp%8#0) // my_struct_copy should not be mutated by the subroutine
                let (my_array_copy_2#2: bytes, my_array_copy_2#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(0x01020304)
                let reinterpret_biguint%8#0: biguint = ((extract 0 1) my_array_copy_2#2) // on error: Index access is out of bounds
                let tmp%9#0: bool = (b== reinterpret_biguint%8#0 0x01)
                (assert tmp%9#0) // my_array_copy_2 should have original value
                let (other_routine_2%2#0: bytes, my_array_copy_2#3: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let reinterpret_biguint%10#0: biguint = ((extract 0 1) my_array_copy_2#3) // on error: Index access is out of bounds
                let tmp%10#0: bool = (b== reinterpret_biguint%10#0 0x0a)
                (assert tmp%10#0) // my_array_copy_2 should have mutated value
                let (mutate_tuple_items_and_reassign%0#0: bytes, mutate_tuple_items_and_reassign%1#0: bytes, mutate_tuple_items_and_reassign%2#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 0u, 1u)
                let (my_array#3: bytes, my_array_copy_2#4: bytes, my_array_copy_3#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, 0x01020304, 100u, 1u)
                let reinterpret_biguint%12#0: biguint = ((extract 0 1) my_array#3) // on error: Index access is out of bounds
                let tmp%16#0: bool = (b== reinterpret_biguint%12#0 0x64)
                (assert tmp%16#0)
                let reinterpret_biguint%14#0: biguint = ((extract 0 1) my_array_copy_2#4) // on error: Index access is out of bounds
                let tmp%17#0: bool = (b== reinterpret_biguint%14#0 0x65)
                (assert tmp%17#0)
                let reinterpret_biguint%16#0: biguint = ((extract 0 1) my_array_copy_3#1) // on error: Index access is out of bounds
                let tmp%18#0: bool = (b== reinterpret_biguint%16#0 0x66)
                (assert tmp%18#0)
                let reinterpret_biguint%18#0: biguint = ((extract 1 1) my_array#3) // on error: Index access is out of bounds
                let tmp%19#0: bool = (b== reinterpret_biguint%18#0 0x67)
                (assert tmp%19#0)
                let reinterpret_biguint%20#0: biguint = ((extract 1 1) my_array_copy_2#4) // on error: Index access is out of bounds
                let tmp%20#0: bool = (b== reinterpret_biguint%20#0 0x68)
                (assert tmp%20#0)
                let reinterpret_biguint%22#0: biguint = ((extract 1 1) my_array_copy_3#1) // on error: Index access is out of bounds
                let tmp%21#0: bool = (b== reinterpret_biguint%22#0 0x69)
                (assert tmp%21#0)
                let (my_array#4: bytes, my_array_copy_2#5: bytes, my_array_copy_3#2: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
                let reinterpret_biguint%24#0: biguint = ((extract 0 1) my_array#4) // on error: Index access is out of bounds
                let tmp%22#0: bool = (b== reinterpret_biguint%24#0 0xc8)
                (assert tmp%22#0)
                let reinterpret_biguint%26#0: biguint = ((extract 0 1) my_array_copy_2#5) // on error: Index access is out of bounds
                let tmp%23#0: bool = (b== reinterpret_biguint%26#0 0xc9)
                (assert tmp%23#0)
                let reinterpret_biguint%28#0: biguint = ((extract 0 1) my_array_copy_3#2) // on error: Index access is out of bounds
                let tmp%24#0: bool = (b== reinterpret_biguint%28#0 0xca)
                (assert tmp%24#0)
                let reinterpret_biguint%30#0: biguint = ((extract 1 1) my_array#4) // on error: Index access is out of bounds
                let tmp%25#0: bool = (b== reinterpret_biguint%30#0 0xce)
                (assert tmp%25#0)
                let reinterpret_biguint%32#0: biguint = ((extract 1 1) my_array_copy_2#5) // on error: Index access is out of bounds
                let tmp%26#0: bool = (b== reinterpret_biguint%32#0 0xcf)
                (assert tmp%26#0)
                let reinterpret_biguint%34#0: biguint = ((extract 1 1) my_array_copy_3#2) // on error: Index access is out of bounds
                let tmp%27#0: bool = (b== reinterpret_biguint%34#0 0xd0)
                (assert tmp%27#0)
                let tmp%28#0: bytes = ((extract 0 4) my_array#4) // on error: Index access is out of bounds
                let (other_routine_2%4#0: bytes, other_routine_2%5#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tmp%28#0)
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <bool, bool, bytes, bytes>:
            block@0: // L118
                let array#1: bytes = ((replace2 1) array#0 0x05)
                let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%0#0: uint64 = (len struct#0)
                let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 0x000741415252474821)
                let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 4u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 9u)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%1#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let struct#2: bytes = ((replace2 4) updated_data%1#0 tail_offset_bytes%0#0)
                return 1u 0u array#1 struct#2
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L124
                let array#1: bytes = ((replace2 0) array#0 0x0a)
                return array#0 array#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes, start: uint64, reassign: bool) -> <bytes, bytes, bytes>:
            block@0: // L130
                let arrays.0%is_original#0: bool = 1u
                let arrays.1%is_original#0: bool = 1u
                let arrays.2%is_original#0: bool = 1u
                let val_as_bytes%0#0: bytes = (itob start#0)
                let assigned_value%0#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let arrays.0#1: bytes = ((replace2 0) arrays.0#0 assigned_value%0#0)
                let to_encode%0#0: uint64 = (+ start#0 1u)
                let val_as_bytes%1#0: bytes = (itob to_encode%0#0)
                let assigned_value%1#0: bytes = ((extract 7 1) val_as_bytes%1#0)
                let arrays.1#2: bytes = ((replace2 0) arrays.1#0 assigned_value%1#0)
                let to_encode%1#0: uint64 = (+ start#0 2u)
                let val_as_bytes%2#0: bytes = (itob to_encode%1#0)
                let assigned_value%2#0: bytes = ((extract 7 1) val_as_bytes%2#0)
                let arrays.2#3: bytes = ((replace2 0) arrays.2#0 assigned_value%2#0)
                let reinterpret_biguint%0#0: biguint = ((extract 0 1) arrays.0#1) // on error: Index access is out of bounds
                let tmp%1#0: bool = (b== reinterpret_biguint%0#0 val_as_bytes%0#0)
                (assert tmp%1#0)
                let reinterpret_biguint%1#0: biguint = ((extract 0 1) arrays.1#2) // on error: Index access is out of bounds
                let tmp%4#0: bool = (b== reinterpret_biguint%1#0 val_as_bytes%1#0)
                (assert tmp%4#0)
                let reinterpret_biguint%2#0: biguint = ((extract 0 1) arrays.2#3) // on error: Index access is out of bounds
                let tmp%7#0: bool = (b== reinterpret_biguint%2#0 val_as_bytes%2#0)
                (assert tmp%7#0)
                let to_encode%2#0: uint64 = (+ start#0 3u)
                let val_as_bytes%3#0: bytes = (itob to_encode%2#0)
                let assigned_value%3#0: bytes = ((extract 7 1) val_as_bytes%3#0)
                let arrays.0#5: bytes = ((replace2 1) arrays.0#1 assigned_value%3#0)
                let to_encode%3#0: uint64 = (+ start#0 4u)
                let val_as_bytes%4#0: bytes = (itob to_encode%3#0)
                let assigned_value%4#0: bytes = ((extract 7 1) val_as_bytes%4#0)
                let arrays.1#6: bytes = ((replace2 1) arrays.1#2 assigned_value%4#0)
                let to_encode%4#0: uint64 = (+ start#0 5u)
                let val_as_bytes%5#0: bytes = (itob to_encode%4#0)
                let assigned_value%5#0: bytes = ((extract 7 1) val_as_bytes%5#0)
                let arrays.2#7: bytes = ((replace2 1) arrays.2#3 assigned_value%5#0)
                goto reassign#0 ? block@13 : block@20
            block@13: // if_body_L148
                let arrays.0%is_original#4: bool = 0u
                let arrays.1%is_original#5: bool = 0u
                let arrays.2%is_original#6: bool = 0u
                goto block@20
            block@20: // after_if_else_L147
                let arrays.0#10: bytes = φ(arrays.0#5 <- block@0, arrays.0#5 <- block@13)
                let arrays.1#11: bytes = φ(arrays.1#6 <- block@0, arrays.1#6 <- block@13)
                let arrays.2#12: bytes = φ(arrays.2#7 <- block@0, arrays.2#7 <- block@13)
                let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@0, arrays.0%is_original#4 <- block@13)
                let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@0, arrays.1%is_original#5 <- block@13)
                let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@0, arrays.2%is_original#6 <- block@13)
                let to_encode%5#0: uint64 = (+ start#0 6u)
                let val_as_bytes%6#0: bytes = (itob to_encode%5#0)
                let assigned_value%6#0: bytes = ((extract 7 1) val_as_bytes%6#0)
                let arrays.0#14: bytes = ((replace2 1) arrays.0#10 assigned_value%6#0)
                goto arrays.0%is_original#5 ? block@21 : block@22
            block@21: // if_body_L1
                goto block@22
            block@22: // after_if_else_L1
                let arrays.0%out#7: bytes = φ(arrays.0#5 <- block@20, arrays.0#14 <- block@21)
                let to_encode%6#0: uint64 = (+ start#0 7u)
                let val_as_bytes%7#0: bytes = (itob to_encode%6#0)
                let assigned_value%7#0: bytes = ((extract 7 1) val_as_bytes%7#0)
                let arrays.1#15: bytes = ((replace2 1) arrays.1#11 assigned_value%7#0)
                goto arrays.1%is_original#8 ? block@23 : block@24
            block@23: // if_body_L1
                goto block@24
            block@24: // after_if_else_L1
                let arrays.1%out#6: bytes = φ(arrays.1#6 <- block@22, arrays.1#15 <- block@23)
                let to_encode%7#0: uint64 = (+ start#0 8u)
                let val_as_bytes%8#0: bytes = (itob to_encode%7#0)
                let assigned_value%8#0: bytes = ((extract 7 1) val_as_bytes%8#0)
                let arrays.2#16: bytes = ((replace2 1) arrays.2#12 assigned_value%8#0)
                goto arrays.2%is_original#11 ? block@25 : block@26
            block@25: // if_body_L1
                goto block@26
            block@26: // after_if_else_L1
                let arrays.2%out#5: bytes = φ(arrays.2#7 <- block@24, arrays.2#16 <- block@25)
                let reinterpret_biguint%3#0: biguint = ((extract 1 1) arrays.0#14) // on error: Index access is out of bounds
                let tmp%10#0: bool = (b== reinterpret_biguint%3#0 val_as_bytes%6#0)
                (assert tmp%10#0)
                let reinterpret_biguint%4#0: biguint = ((extract 1 1) arrays.1#15) // on error: Index access is out of bounds
                let tmp%13#0: bool = (b== reinterpret_biguint%4#0 val_as_bytes%7#0)
                (assert tmp%13#0)
                let reinterpret_biguint%5#0: biguint = ((extract 1 1) arrays.2#16) // on error: Index access is out of bounds
                let tmp%16#0: bool = (b== reinterpret_biguint%5#0 val_as_bytes%8#0)
                (assert tmp%16#0)
                return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> bool:
            block@0: // L158
                return 1u