struct MyStruct {
  x: arc4.uint512
}

contract Arc4BoolEvalContract
{
  approval_program(): bool
  {
    assert(arc4_encode(false, arc4.bool) == reinterpret_cast<arc4.bool>(hex<"00">))
    assert(arc4_encode(true, arc4.bool) != reinterpret_cast<arc4.bool>(hex<"00">))
    assert(arc4_encode('', arc4.string) == reinterpret_cast<arc4.string>(hex<"0000">))
    assert(arc4_encode('.', arc4.string) != reinterpret_cast<arc4.string>(hex<"0000">))
    assert(global<ZeroAddress>() == global<ZeroAddress>())
    assert(reinterpret_cast<arc4.address>(txn<Sender>()) != global<ZeroAddress>())
    assert(0arc4u8 == reinterpret_cast<arc4.uint8>(hex<"00">))
    assert(1arc4u8 != reinterpret_cast<arc4.uint8>(hex<"00">))
    assert(0arc4u16 == reinterpret_cast<arc4.uint16>(hex<"0000">))
    assert(1arc4u16 != reinterpret_cast<arc4.uint16>(hex<"0000">))
    assert(0arc4u32 == reinterpret_cast<arc4.uint32>(hex<"00000000">))
    assert(1arc4u32 != reinterpret_cast<arc4.uint32>(hex<"00000000">))
    assert(0arc4u64 == reinterpret_cast<arc4.uint64>(hex<"0000000000000000">))
    assert(1arc4u64 != reinterpret_cast<arc4.uint64>(hex<"0000000000000000">))
    assert(0arc4n128 == reinterpret_cast<arc4.uint128>(hex<"00000000000000000000000000000000">))
    assert(1arc4n128 != reinterpret_cast<arc4.uint128>(hex<"00000000000000000000000000000000">))
    assert(0arc4n256 == reinterpret_cast<arc4.uint256>(hex<"0000000000000000000000000000000000000000000000000000000000000000">))
    assert(1arc4n256 != reinterpret_cast<arc4.uint256>(hex<"0000000000000000000000000000000000000000000000000000000000000000">))
    assert(0arc4n512 == reinterpret_cast<arc4.uint512>(hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(1arc4n512 != reinterpret_cast<arc4.uint512>(hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(0arc4u24 == reinterpret_cast<arc4.uint24>(hex<"000000">))
    assert(1arc4u24 != reinterpret_cast<arc4.uint24>(hex<"000000">))
    assert(0arc4n504 == reinterpret_cast<arc4.uint504>(hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(1arc4n504 != reinterpret_cast<arc4.uint504>(hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(0E-10arc4u48x10 == reinterpret_cast<arc4.ufixed48x10>(hex<"000000000000">))
    assert(1.0000000000arc4u48x10 != reinterpret_cast<arc4.ufixed48x10>(hex<"000000000000">))
    assert(0E-10arc4n496x10 == reinterpret_cast<arc4.ufixed496x10>(hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(0.0100000000arc4n496x10 != reinterpret_cast<arc4.ufixed496x10>(hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">))
    assert(true)
    assert(true)
    assert(true)
    assert(true)
    dynamic_arr: arc4.dynamic_array<arc4.uint64> = new arc4.dynamic_array<arc4.uint64>()
    assert(dynamic_arr == reinterpret_cast<arc4.dynamic_array<arc4.uint64>>(hex<"0000">))
    dynamic_arr.extend((0arc4u64))
    assert(dynamic_arr != reinterpret_cast<arc4.dynamic_array<arc4.uint64>>(hex<"0000">))
    assert(true)
    assert(true)
    assert(arc4_encode(false, arc4.bool) == arc4_encode(false, arc4.bool))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}