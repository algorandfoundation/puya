struct MyStruct {
  x: algopy.arc4.UInt512
}

contract Arc4BoolEvalContract
{
  approval_program(): bool
  {
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode(false, algopy.arc4.Bool)) == hex<"00">)
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode(true, algopy.arc4.Bool)) != hex<"00">)
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode('', algopy.arc4.String)) == hex<"0000">)
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode('.', algopy.arc4.String)) != hex<"0000">)
    assert(reinterpret_cast<algopy.Bytes>(global<ZeroAddress>()) == global<ZeroAddress>())
    assert(reinterpret_cast<algopy.Bytes>(reinterpret_cast<algopy.arc4.Address>(reinterpret_cast<algopy.Bytes>(txn<Sender>()))) != global<ZeroAddress>())
    assert(reinterpret_cast<algopy.Bytes>(0arc4u8) == hex<"00">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4u8) != hex<"00">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4u16) == hex<"0000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4u16) != hex<"0000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4u32) == hex<"00000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4u32) != hex<"00000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4u64) == hex<"0000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4u64) != hex<"0000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4n128) == hex<"00000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4n128) != hex<"00000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4n256) == hex<"0000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4n256) != hex<"0000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4n512) == hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4n512) != hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4u24) == hex<"000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4u24) != hex<"000000">)
    assert(reinterpret_cast<algopy.Bytes>(0arc4n504) == hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1arc4n504) != hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0E-10arc4u48x10) == hex<"000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(1.0000000000arc4u48x10) != hex<"000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0E-10arc4n496x10) == hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<algopy.Bytes>(0.0100000000arc4n496x10) != hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(true)
    assert(true)
    assert(true)
    assert(true)
    dynamic_arr: algopy.arc4.DynamicArray[algopy.arc4.UInt64] = new algopy.arc4.DynamicArray[algopy.arc4.UInt64]()
    assert(reinterpret_cast<algopy.Bytes>(dynamic_arr) == hex<"0000">)
    dynamic_arr.extend((0arc4u64))
    assert(reinterpret_cast<algopy.Bytes>(dynamic_arr) != hex<"0000">)
    assert(true)
    assert(true)
    assert(reinterpret_cast<algopy.Bytes>(arc4_encode(false, algopy.arc4.Bool)) == reinterpret_cast<algopy.Bytes>(arc4_encode(false, algopy.arc4.Bool)))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}