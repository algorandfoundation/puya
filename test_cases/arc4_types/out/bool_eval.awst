struct MyStruct {
  x: arc4.uint512
}

contract Arc4BoolEvalContract
{
  approval_program(): bool
  {
    assert(reinterpret_cast<bytes>(arc4_encode(false, arc4.bool)) == hex<"00">)
    assert(reinterpret_cast<bytes>(arc4_encode(true, arc4.bool)) != hex<"00">)
    assert(reinterpret_cast<bytes>(arc4_encode('', arc4.string)) == hex<"0000">)
    assert(reinterpret_cast<bytes>(arc4_encode('.', arc4.string)) != hex<"0000">)
    assert(reinterpret_cast<bytes>(global<ZeroAddress>()) == global<ZeroAddress>())
    assert(reinterpret_cast<bytes>(reinterpret_cast<arc4.address>(reinterpret_cast<bytes>(txn<Sender>()))) != global<ZeroAddress>())
    assert(reinterpret_cast<bytes>(0arc4u8) == hex<"00">)
    assert(reinterpret_cast<bytes>(1arc4u8) != hex<"00">)
    assert(reinterpret_cast<bytes>(0arc4u16) == hex<"0000">)
    assert(reinterpret_cast<bytes>(1arc4u16) != hex<"0000">)
    assert(reinterpret_cast<bytes>(0arc4u32) == hex<"00000000">)
    assert(reinterpret_cast<bytes>(1arc4u32) != hex<"00000000">)
    assert(reinterpret_cast<bytes>(0arc4u64) == hex<"0000000000000000">)
    assert(reinterpret_cast<bytes>(1arc4u64) != hex<"0000000000000000">)
    assert(reinterpret_cast<bytes>(0arc4n128) == hex<"00000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(1arc4n128) != hex<"00000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(0arc4n256) == hex<"0000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(1arc4n256) != hex<"0000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(0arc4n512) == hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(1arc4n512) != hex<"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(0arc4u24) == hex<"000000">)
    assert(reinterpret_cast<bytes>(1arc4u24) != hex<"000000">)
    assert(reinterpret_cast<bytes>(0arc4n504) == hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(1arc4n504) != hex<"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(0E-10arc4u48x10) == hex<"000000000000">)
    assert(reinterpret_cast<bytes>(1.0000000000arc4u48x10) != hex<"000000000000">)
    assert(reinterpret_cast<bytes>(0E-10arc4n496x10) == hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(reinterpret_cast<bytes>(0.0100000000arc4n496x10) != hex<"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">)
    assert(true)
    assert(true)
    assert(true)
    assert(true)
    dynamic_arr: arc4.dynamic_array<arc4.uint64> = new arc4.dynamic_array<arc4.uint64>()
    assert(reinterpret_cast<bytes>(dynamic_arr) == hex<"0000">)
    dynamic_arr.extend((0arc4u64))
    assert(reinterpret_cast<bytes>(dynamic_arr) != hex<"0000">)
    assert(true)
    assert(true)
    assert(reinterpret_cast<bytes>(arc4_encode(false, arc4.bool)) == reinterpret_cast<bytes>(arc4_encode(false, arc4.bool)))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}