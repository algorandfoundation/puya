contract Arc4ArraysContract
{
  approval_program(): bool
  {
    dynamic_uint8_array: puyapy.arc4.DynamicArray[puyapy.arc4.UInt8] = arc4_array_encode([1arc4u8, 2arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UInt8])
    total: puyapy.UInt64 = 0u
    for uint8_item in dynamic_uint8_array {
      total += arc4_decode(uint8_item, puyapy.UInt64)
    }
    assert(total == 3u, comment="Total should be sum of dynamic_uint8_array items")
    aliased_dynamic: puyapy.arc4.DynamicArray[puyapy.arc4.UInt16] = arc4_array_encode([1arc4u16], puyapy.arc4.DynamicArray[puyapy.arc4.UInt16])
    for uint16_item in aliased_dynamic {
      total += arc4_decode(uint16_item, puyapy.UInt64)
    }
    assert(total == 4u, comment="Total should now include sum of aliased_dynamic items")
    dynamic_string_array: puyapy.arc4.DynamicArray[puyapy.arc4.String] = arc4_array_encode([arc4_encode('Hello', puyapy.arc4.String), arc4_encode('World', puyapy.arc4.String)], puyapy.arc4.DynamicArray[puyapy.arc4.String])
    assert(extract_uint16(dynamic_string_array, 0u) == 2u)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array[0u]) == reinterpret_cast<puyapy.Bytes>(arc4_encode('Hello', puyapy.arc4.String)))
    result: puyapy.Bytes = ''
    for (index, string_item) in enumerate(dynamic_string_array) {
      if (index == 0u) {
        result: puyapy.Bytes = arc4_decode(string_item, puyapy.Bytes)
      } else {
        result += ' ' + arc4_decode(string_item, puyapy.Bytes)
      }
    }
    assert(result == 'Hello World')
    static_uint32_array: puyapy.arc4.StaticArray[puyapy.arc4.UInt32, typing.Literal[4]] = arc4_array_encode([1arc4u32, 10arc4u32, 255arc4u32, 128arc4u32], puyapy.arc4.StaticArray[puyapy.arc4.UInt32, typing.Literal[4]])
    for uint32_item in static_uint32_array {
      total += arc4_decode(uint32_item, puyapy.UInt64)
    }
    assert(total == 398u)
    aliased_static: puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[1]] = arc4_array_encode([101arc4u8], puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[1]])
    index: puyapy.UInt64 = 0u
    assert(arc4_decode(aliased_static[0u], puyapy.UInt64) + arc4_decode(aliased_static[index], puyapy.UInt64) == 202u)
    static_string_array: puyapy.arc4.StaticArray[puyapy.arc4.String, typing.Literal[2]] = arc4_array_encode([arc4_encode('Ping', puyapy.arc4.String), arc4_encode('Pong', puyapy.arc4.String)], puyapy.arc4.StaticArray[puyapy.arc4.String, typing.Literal[2]])
    result: puyapy.Bytes = ''
    for (index, string_item) in enumerate(static_string_array) {
      if (index == 0u) {
        result: puyapy.Bytes = arc4_decode(string_item, puyapy.Bytes)
      } else {
        result += ' ' + arc4_decode(string_item, puyapy.Bytes)
      }
    }
    assert(result == 'Ping Pong')
    this::hash_as_array('Testing 123')
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine hash_as_array(commitment_args_concat: puyapy.Bytes): puyapy.arc4.StaticArray[puyapy.arc4.Byte, typing.Literal[32]]
  {
    return reinterpret_cast<puyapy.arc4.StaticArray[puyapy.arc4.Byte, typing.Literal[32]]>(sha3_256(commitment_args_concat))
  }
}