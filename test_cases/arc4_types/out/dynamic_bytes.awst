contract Arc4DynamicBytesContract
{
  approval_program(): bool
  {
    total: uint64 = 0u
    dynamic_bytes: arc4.dynamic_array<arc4.uint8> = new arc4.dynamic_array<arc4.uint8>(2arc4u8, 3arc4u8, 1arc4u8)
    assert(arc4_decode(dynamic_bytes, bytes) == hex<"020301">)
    assert(reinterpret_cast<bytes>(dynamic_bytes) == hex<"0003020301">)
    for uint8_item in dynamic_bytes {
      total += arc4_decode(uint8_item, uint64)
    }
    assert(total == 6u, comment="Total should be of dynamic_bytes items")
    dynamic_bytes2: arc4.dynamic_array<arc4.uint8> = arc4_encode(hex<"0304">, arc4.dynamic_array<arc4.uint8>)
    assert(arc4_decode(dynamic_bytes2, bytes) == hex<"0304">)
    assert(reinterpret_cast<bytes>(dynamic_bytes2) == hex<"00020304">)
    for uint8_item in dynamic_bytes2 {
      total += arc4_decode(uint8_item, uint64)
    }
    dynamic_bytes3: arc4.dynamic_array<arc4.uint8> = arc4_encode(arc4_decode(dynamic_bytes2, bytes), arc4.dynamic_array<arc4.uint8>)
    assert(arc4_decode(dynamic_bytes3, bytes) == hex<"0304">)
    assert(reinterpret_cast<bytes>(dynamic_bytes3) == hex<"00020304">)
    for uint8_item in dynamic_bytes3 {
      total += arc4_decode(uint8_item, uint64)
    }
    assert(total == 20u, comment="Total should now include sum of dynamic_bytes3 items")
    dynamic_bytes3.extend(arc4_encode(hex<"616263">, arc4.dynamic_array<arc4.uint8>))
    assert(reinterpret_cast<bytes>(dynamic_bytes3) == hex<"00050304616263">)
    assert(arc4_decode(dynamic_bytes3, bytes) == hex<"0304616263">)
    dynamic_bytes: arc4.dynamic_array<arc4.uint8> = new arc4.dynamic_array<arc4.uint8>((txn<NumAppArgs>() != 0u) ? (2arc4u8) : (3arc4u8), 3arc4u8, 1arc4u8)
    assert(arc4_decode(dynamic_bytes, bytes) == hex<"030301">)
    dynamic_bytes: arc4.dynamic_array<arc4.uint8> = (txn<NumAppArgs>() != 0u) ? (arc4_encode(hex<"32">, arc4.dynamic_array<arc4.uint8>)) : (arc4_encode(hex<"33">, arc4.dynamic_array<arc4.uint8>))
    assert(arc4_decode(dynamic_bytes, bytes) == hex<"33">)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}