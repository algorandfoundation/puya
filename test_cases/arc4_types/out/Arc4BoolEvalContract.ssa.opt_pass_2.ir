contract test_cases.arc4_types.bool_eval.Arc4BoolEvalContract:
    program approval:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program() -> uint64:
            block@0: // L12
                let tmp%1#0: uint64 = 1u
                (assert tmp%1#0)
                let tmp%3#0: uint64 = 1u
                (assert tmp%3#0)
                let tmp%6#0: bytes = (global ZeroAddress)
                let tmp%7#0: bytes = (global ZeroAddress)
                let tmp%8#0: uint64 = (== tmp%6#0 tmp%7#0)
                (assert tmp%8#0)
                let tmp%9#0: bytes = (txn Sender)
                let tmp%10#0: bytes = (global ZeroAddress)
                let tmp%11#0: uint64 = (!= tmp%9#0 tmp%10#0)
                (assert tmp%11#0)
                let concatenated%37#0: bytes = 0x0000000000000000
                let byte_len%38#0: uint64 = (len concatenated%37#0)
                let len_%39#0: uint64 = (/ byte_len%38#0 8u)
                let len_bytes%40#0: bytes = (itob len_%39#0)
                let len_16_bit%41#0: bytes = ((extract 6 0) len_bytes%40#0)
                let dynamic_arr#1: bytes = (concat len_16_bit%41#0 concatenated%37#0)
                let tmp%43#0: uint64 = (!= dynamic_arr#1 0x0000)
                (assert tmp%43#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.clear_state_program() -> uint64:
            block@0: // L72
                return 1u