contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let b#0: bytes = 0x80
                let d#0: bytes = 0x80
                let e#0: bytes = 0x80
                let f#0: bytes = 0x80
                let g#0: bytes = 0x80
                let tmp%4#0: bool = 1u
                (assert tmp%4#0) // a is 4
                let tmp%5#0: bool = 0u
                goto tmp%5#0 ? block@1 : block@2
            block@1: // ternary_true_L39
                goto block@15
            block@2: // ternary_false_L39
                let tmp%6#0: bool = 0u
                goto tmp%6#0 ? block@3 : block@4
            block@3: // ternary_true_L39
                goto block@14
            block@4: // ternary_false_L39
                let tmp%7#0: bool = 0u
                goto tmp%7#0 ? block@5 : block@6
            block@5: // ternary_true_L39
                goto block@13
            block@6: // ternary_false_L39
                let tmp%8#0: bool = 0u
                goto tmp%8#0 ? block@7 : block@8
            block@7: // ternary_true_L39
                goto block@12
            block@8: // ternary_false_L39
                let tmp%9#0: bool = 0u
                goto tmp%9#0 ? block@9 : block@10
            block@9: // ternary_true_L39
                goto block@11
            block@10: // ternary_false_L39
                let ternary_result%4#1: bytes = 0x80
                goto block@11
            block@11: // ternary_merge_L39
                let ternary_result%4#2: bytes = φ(g#0 <- block@9, ternary_result%4#1 <- block@10)
                goto block@12
            block@12: // ternary_merge_L39
                let ternary_result%3#2: bytes = φ(f#0 <- block@7, ternary_result%4#2 <- block@11)
                goto block@13
            block@13: // ternary_merge_L39
                let ternary_result%2#2: bytes = φ(e#0 <- block@5, ternary_result%3#2 <- block@12)
                goto block@14
            block@14: // ternary_merge_L39
                let ternary_result%1#2: bytes = φ(d#0 <- block@3, ternary_result%2#2 <- block@13)
                goto block@15
            block@15: // ternary_merge_L39
                let ternary_result%0#2: bytes = φ(b#0 <- block@1, ternary_result%1#2 <- block@14)
                let tmp%11#0: bool = (!= ternary_result%0#2 0x00)
                (assert tmp%11#0) // b,d,e,f,g,i,j are true
                let tmp%13#0: bytes = 0x00
                let tmp%14#0: bool = (== tmp%13#0 0x00)
                (assert tmp%14#0) // c and h are false
                let tmp%16#0: bool = 1u
                (assert tmp%16#0) // k is 16
                let encoded_tuple_buffer%22#0: bytes = 0x0480
                let is_true%25#0: uint64 = 0u
                let encoded_tuple_buffer%23#0: bytes = (setbit encoded_tuple_buffer%22#0 9u is_true%25#0)
                let is_true%26#0: uint64 = 1u
                let encoded_tuple_buffer%24#0: bytes = (setbit encoded_tuple_buffer%23#0 10u is_true%26#0)
                let is_true%27#0: uint64 = 1u
                let encoded_tuple_buffer%25#0: bytes = (setbit encoded_tuple_buffer%24#0 11u is_true%27#0)
                let is_true%28#0: uint64 = 1u
                let encoded_tuple_buffer%26#0: bytes = (setbit encoded_tuple_buffer%25#0 12u is_true%28#0)
                let is_true%29#0: uint64 = 1u
                let encoded_tuple_buffer%27#0: bytes = (setbit encoded_tuple_buffer%26#0 13u is_true%29#0)
                let is_true%30#0: uint64 = 0u
                let encoded_tuple_buffer%28#0: bytes = (setbit encoded_tuple_buffer%27#0 14u is_true%30#0)
                let is_true%31#0: uint64 = 1u
                let encoded_tuple_buffer%29#0: bytes = (setbit encoded_tuple_buffer%28#0 15u is_true%31#0)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 0x80)
                let encoded_tuple_buffer%31#0: bytes = (concat encoded_tuple_buffer%30#0 0x10)
                let tmp%17#0: bool = (== 0x04bd8010 encoded_tuple_buffer%31#0)
                (assert tmp%17#0)
                let (total#0: uint64, concat#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(0x01020007000eff000568656c6c6f0005776f726c64)
                let tmp%18#0: bytes = ((extract 2 0) concat#0)
                let tmp%19#0: bool = (== tmp%18#0 "hello world")
                (assert tmp%19#0)
                let tmp%20#0: bool = (== total#0 258u)
                (assert tmp%20#0)
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L54
                let a#0: bytes = ((extract 0 1) test_tuple#0) // on error: Index access is out of bounds
                let b#0: bytes = ((extract 1 1) test_tuple#0) // on error: Index access is out of bounds
                let item_start_offset%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let c#0: bytes = (substring3 test_tuple#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len test_tuple#0)
                let d#0: bytes = (substring3 test_tuple#0 item_end_offset%0#0 item_end_offset%1#0)
                let e#0: bytes = ((extract 6 1) test_tuple#0) // on error: Index access is out of bounds
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 text#0)
                return total#0 encoded_value%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u