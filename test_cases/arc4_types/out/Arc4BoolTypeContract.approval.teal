#pragma version 10

test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    intcblock 0
    bytecblock 0x00
    // arc4_types/bool.py:13
    // self.test_stuff(ARC4Bool(True), ARC4Bool(False))
    pushbytes 0x80
    bytec_0 // 0x00
    callsub test_stuff
    pop
    // arc4_types/bool.py:15
    // False if Txn.num_app_args else True  # noqa: SIM211
    txn NumAppArgs
    !
    // arc4_types/bool.py:14-16
    // assert ARC4Bool(
    //     False if Txn.num_app_args else True  # noqa: SIM211
    // ).native, "conditional expr"
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // conditional expr
    // arc4_types/bool.py:49
    // return True
    pushint 1 // 1
    return


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> uint64:
test_stuff:
    // arc4_types/bool.py:54-55
    // @subroutine
    // def test_stuff(self, true: ARC4Bool, false: ARC4Bool) -> bool:
    proto 2 1
    // arc4_types/bool.py:56
    // assert true.native
    frame_dig -2
    intc_0 // 0
    getbit
    dup
    assert
    // arc4_types/bool.py:58
    // assert not false.native
    frame_dig -1
    intc_0 // 0
    getbit
    dup
    !
    assert
    // arc4_types/bool.py:60
    // assert true == ARC4Bool(true.native)
    bytec_0 // 0x00
    intc_0 // 0
    dig 3
    setbit
    frame_dig -2
    ==
    assert
    // arc4_types/bool.py:61
    // assert false == ARC4Bool(false.native)
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -1
    ==
    assert
    // arc4_types/bool.py:63
    // return true.native
    retsub
