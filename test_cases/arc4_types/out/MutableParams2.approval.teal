#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    // arc4_types/mutable_params2.py:4
    // class MutableParams2(arc4.ARC4Contract):
    txn NumAppArgs
    bz __algopy_default_create@6
    pushbytes 0x6ac4a557 // method "test_array_rebinding()void"
    txna ApplicationArgs 0
    match test_array_rebinding_route@3
    err

test_array_rebinding_route@3:
    // arc4_types/mutable_params2.py:5
    // @arc4.abimethod()
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test_array_rebinding

__algopy_default_create@6:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]() -> void:
test_array_rebinding:
    // arc4_types/mutable_params2.py:7
    // a = arc4.DynamicBytes(0)
    pushbytes 0x000100
    // arc4_types/mutable_params2.py:8
    // self.maybe_modify_array(a, assign_local=True)
    intc_1 // 1
    callsub maybe_modify_array
    // arc4_types/mutable_params2.py:9
    // assert a == arc4.DynamicBytes(0, 1)
    pushbytes 0x00020001
    ==
    assert
    // arc4_types/mutable_params2.py:11
    // a = arc4.DynamicBytes(1)
    pushbytes 0x000101
    // arc4_types/mutable_params2.py:12
    // self.maybe_modify_array(a, assign_local=False)
    intc_0 // 0
    callsub maybe_modify_array
    // arc4_types/mutable_params2.py:13
    // assert a == arc4.DynamicBytes(1, 42, 4)
    pushbytes 0x0003012a04
    ==
    // arc4_types/mutable_params2.py:5
    // @arc4.abimethod()
    return


// test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: bytes, assign_local: uint64) -> bytes:
maybe_modify_array:
    // arc4_types/mutable_params2.py:15-16
    // @subroutine
    // def maybe_modify_array(self, a: arc4.DynamicBytes, *, assign_local: bool) -> None:  # v0
    proto 2 1
    intc_0 // 0
    intc_1 // 1
    // arc4_types/mutable_params2.py:17
    // if assign_local:
    frame_dig -1
    bz maybe_modify_array_else_body@10
    // arc4_types/mutable_params2.py:18
    // a.append(arc4.Byte(1))  # v1: modify out
    frame_dig -2
    pushbytes 0x01
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    frame_bury -2
    // arc4_types/mutable_params2.py:21
    // a = arc4.DynamicBytes(1, 2, 4)  # v4: local only
    pushbytes 0x0003010204
    intc_0 // 0
    frame_bury 1
    frame_dig -2
    frame_bury 0
    frame_bury -2

maybe_modify_array_after_if_else@13:
    // arc4_types/mutable_params2.py:25
    // a.append(arc4.Byte(4))  # v6: modify out IF not b ELSE local only
    frame_dig -2
    pushbytes 0x04
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    frame_bury -2
    frame_dig 1
    bz maybe_modify_array_after_if_else@15
    frame_dig -2
    frame_bury 0

maybe_modify_array_after_if_else@15:
    retsub

maybe_modify_array_else_body@10:
    // arc4_types/mutable_params2.py:23
    // a.append(arc4.Byte(42))  # v5: modify out
    frame_dig -2
    pushbytes 0x2a
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    dupn 2
    frame_bury -2
    frame_bury 0
    frame_bury -2
    b maybe_modify_array_after_if_else@13
