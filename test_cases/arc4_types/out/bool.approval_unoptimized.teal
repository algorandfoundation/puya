#pragma version 8

// test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> uint64:
main_block@0:
        byte 0x00
        int 0
        int 1
        setbit
        byte 0x00
        int 0
        int 0
        setbit
        callsub test_stuff
        byte 0x00
        int 0
        int 1
        setbit
        byte 0x00
        int 0
        int 1
        setbit
        byte 0x00
        int 0
        int 1
        setbit
        cover 2
        byte 0x00
        int 0
        int 1
        setbit
        cover 3
        byte 0x00
        int 0
        int 1
        setbit
        cover 4
        byte 0x00
        int 0
        int 1
        setbit
        cover 5
        byte 0x00
        int 0
        int 1
        setbit
        cover 6
        byte 0x00
        int 0
        int 1
        setbit
        cover 7
        byte 0x00
        int 0
        int 1
        setbit
        cover 8
        byte 0x00
        int 0
        int 1
        setbit
        cover 8
        byte 0x00
        int 0
        int 1
        setbit
        cover 10
        byte 0x00
        int 0
        int 1
        setbit
        cover 11
        byte 0x
        uncover 2
        concat
        swap
        int 0
        getbit
        swap
        int 1
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 2
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 3
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 4
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 5
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 6
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 7
        uncover 2
        setbit
        uncover 2
        concat
        swap
        int 0
        getbit
        swap
        int 9
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 10
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 11
        uncover 2
        setbit
        dup
        byte 0xfff0
        ==
        assert
        int 0
        int 1
        *
        dig 1
        swap
        getbit
        byte 0x00
        int 0
        uncover 2
        setbit
        byte 0x00
        int 0
        int 1
        setbit
        ==
        assert // Single boolean can be unpacked
        int 12
        int 1
        -
        int 12
        dig 1
        >
        assert // Index access is out of bounds
        int 1
        *
        getbit
        byte 0x00
        int 0
        uncover 2
        setbit
        byte 0x00
        int 0
        int 1
        setbit
        ==
        assert // Single boolean can be unpacked
        byte 0x00
        int 0
        int 1
        setbit
        byte 0x00
        int 0
        int 0
        setbit
        byte 0x00
        int 0
        int 1
        setbit
        cover 2
        byte 0x0003
        uncover 2
        concat
        swap
        int 0
        getbit
        swap
        int 17
        uncover 2
        setbit
        swap
        int 0
        getbit
        swap
        int 18
        uncover 2
        setbit
        byte 0x0003a0
        ==
        assert
        int 1
        return


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true#0: bytes, false#0: bytes) -> void:
test_stuff:
        proto 2 0

test_stuff_block@0:
        frame_dig -2
        int 0
        getbit
        assert
        frame_dig -1
        int 0
        getbit
        !
        assert
        frame_dig -2
        int 0
        getbit
        byte 0x00
        int 0
        uncover 2
        setbit
        frame_dig -2
        ==
        assert
        frame_dig -1
        int 0
        getbit
        byte 0x00
        int 0
        uncover 2
        setbit
        frame_dig -1
        ==
        assert
        retsub

