contract test_cases.arc4_types.bool_eval.Arc4BoolEvalContract:
    program approval:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program() -> bool:
            block@0: // L12
                let tmp%0#0: bytes = 0x00
                let tmp%1#0: bool = (== tmp%0#0 0x00)
                (assert tmp%1#0)
                let tmp%2#0: bytes = 0x80
                let tmp%3#0: bool = (!= tmp%2#0 0x00)
                (assert tmp%3#0)
                let length%0#0: uint64 = 0u
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%4#0: bytes = value_as_uint16%0#0
                let tmp%5#0: bool = (== tmp%4#0 0x0000)
                (assert tmp%5#0)
                let length%1#0: uint64 = 1u
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%6#0: bytes = (concat value_as_uint16%1#0 ".")
                let tmp%7#0: bool = (!= tmp%6#0 0x0000)
                (assert tmp%7#0)
                let tmp%10#0: bool = 1u
                (assert tmp%10#0)
                let tmp%11#0: bytes = (txn Sender)
                let tmp%12#0: bytes = (global ZeroAddress)
                let tmp%13#0: bool = (!= tmp%11#0 tmp%12#0)
                (assert tmp%13#0)
                let tmp%14#0: bool = 1u
                (assert tmp%14#0)
                let tmp%15#0: bool = 1u
                (assert tmp%15#0)
                let tmp%16#0: bool = 1u
                (assert tmp%16#0)
                let tmp%17#0: bool = 1u
                (assert tmp%17#0)
                let tmp%18#0: bool = 1u
                (assert tmp%18#0)
                let tmp%19#0: bool = 1u
                (assert tmp%19#0)
                let tmp%20#0: bool = 1u
                (assert tmp%20#0)
                let tmp%21#0: bool = 1u
                (assert tmp%21#0)
                let tmp%22#0: bool = 1u
                (assert tmp%22#0)
                let tmp%23#0: bool = 1u
                (assert tmp%23#0)
                let tmp%24#0: bool = 1u
                (assert tmp%24#0)
                let tmp%25#0: bool = 1u
                (assert tmp%25#0)
                let tmp%26#0: bool = 1u
                (assert tmp%26#0)
                let tmp%27#0: bool = 1u
                (assert tmp%27#0)
                let tmp%28#0: bool = 1u
                (assert tmp%28#0)
                let tmp%29#0: bool = 1u
                (assert tmp%29#0)
                let tmp%30#0: bool = 1u
                (assert tmp%30#0)
                let tmp%31#0: bool = 1u
                (assert tmp%31#0)
                let tmp%32#0: bool = 1u
                (assert tmp%32#0)
                let tmp%33#0: bool = 1u
                (assert tmp%33#0)
                let tmp%34#0: bool = 1u
                (assert tmp%34#0)
                let tmp%35#0: bool = 1u
                (assert tmp%35#0)
                let tmp%36#0: bool = 1u
                (assert tmp%36#0)
                let expr_value_trimmed%0#0: bytes = 0x
                let data%0#1: bytes = 0x0000000000000000
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#1)
                let byte_len%0#0: uint64 = (len concatenated%0#0)
                let len_%0#0: uint64 = (/ byte_len%0#0 8u)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let dynamic_arr#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let tmp%37#0: bool = (!= dynamic_arr#1 0x0000)
                (assert tmp%37#0)
                let tmp%38#0: bytes = 0x00
                let tmp%39#0: bytes = 0x00
                let tmp%40#0: bool = (== tmp%38#0 tmp%39#0)
                (assert tmp%40#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.clear_state_program() -> bool:
            block@0: // L74
                return 1u