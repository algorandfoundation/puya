contract test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.approval_program() -> bool:
            block@0: // L10
                let total#0: uint64 = 0u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L16
                let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L17
                let uint8_item#0: bytes = (extract3 0x020301 item_index_internal%0#0 1u) // on error: Index access is out of bounds
                let tmp%3#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%3#0)
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L16
                let tmp%4#0: bool = (== total#0 6u)
                (assert tmp%4#0) // Total should be of dynamic_bytes items
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L25
                let continue_looping%1#0: bool = (< item_index_internal%1#0 2u)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L26
                let uint8_item#0: bytes = (extract3 0x0304 item_index_internal%1#0 1u) // on error: Index access is out of bounds
                let tmp%8#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%8#0)
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@5
            block@8: // after_for_L25
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L32
                let continue_looping%2#0: bool = (< item_index_internal%2#0 2u)
                goto continue_looping%2#0 ? block@10 : block@12
            block@10: // for_body_L33
                let uint8_item#0: bytes = (extract3 0x0304 item_index_internal%2#0 1u) // on error: Index access is out of bounds
                let tmp%13#0: uint64 = (btoi uint8_item#0)
                let total#0: uint64 = (+ total#0 tmp%13#0)
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                goto block@9
            block@12: // after_for_L32
                let tmp%14#0: bool = (== total#0 20u)
                (assert tmp%14#0) // Total should now include sum of dynamic_bytes3 items
                let reinterpret_bool%0#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%0#0 ? block@13 : block@14
            block@13: // ternary_true_L41
                let ternary_result%0#0: bytes = 0x02
                goto block@15
            block@14: // ternary_false_L41
                let ternary_result%0#0: bytes = 0x03
                goto block@15
            block@15: // ternary_merge_L41
                let result%4#0: bytes = (concat ternary_result%0#0 0x03)
                let result%5#0: bytes = (concat result%4#0 0x01)
                let dynamic_bytes#1: bytes = (concat 0x0003 result%5#0)
                let tmp%18#0: bytes = ((extract 2 0) dynamic_bytes#1)
                let tmp%19#0: bool = (== tmp%18#0 0x030301)
                (assert tmp%19#0)
                let reinterpret_bool%1#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%1#0 ? block@16 : block@17
            block@16: // ternary_true_L44
                let encoded_value%3#0: bytes = 0x000132
                let dynamic_bytes#1: bytes = encoded_value%3#0
                goto block@18
            block@17: // ternary_false_L44
                let encoded_value%4#0: bytes = 0x000133
                let dynamic_bytes#1: bytes = encoded_value%4#0
                goto block@18
            block@18: // ternary_merge_L44
                let tmp%20#0: bytes = ((extract 2 0) dynamic_bytes#1)
                let tmp%21#0: bool = (== tmp%20#0 0x33)
                (assert tmp%21#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.dynamic_bytes.Arc4DynamicBytesContract.clear_state_program() -> bool:
            block@0: // L48
                return 1u