contract test_cases.arc4_types.structs.Arc4StructsTypeContract:
    program approval:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program() -> bool:
            block@0: // L35
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 0x000000083cfbf217)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x000000230384b842)
                let coord_1#0: bytes = encoded_tuple_buffer%2#0
                let current_tail_offset%1#0: uint64 = 16u
                let encoded_tuple_buffer%3#0: bytes = 0x
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0x000000083cfbf217)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0x000000230384b842)
                let coord_2#0: bytes = encoded_tuple_buffer%5#0
                let copy%0#0: bytes = coord_1#0
                let copy%1#0: bytes = coord_2#0
                let (add%0#0: bytes, add%1#0: bytes, add%2#0: bytes) = test_cases.arc4_types.structs.add(copy%0#0, copy%1#0)
                let copy%1#1: bytes = add%2#0
                let copy%0#1: bytes = add%1#0
                let coord_3#0: bytes = (add%0#0)
                let tmp%0#0: bytes = (extract3 coord_3#0 0u 8u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 coord_3#0 8u 8u) // on error: Index access is out of bounds
                let loop_counter%0#0: uint64 = 0u
                let val#0: bytes = tmp%0#0
                goto block@1
            block@1: // for_body_L40
                let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
                let val#1: bytes = φ(val#0 <- block@0, val#2 <- block@3)
                (log val#1)
                goto block@2
            block@2: // for_footer_L39
                goto_nth [block@3][loop_counter%0#1] else goto block@4
            block@3: // for_header_1_L39
                let loop_counter%0#2: uint64 = 1u
                let val#2: bytes = tmp%1#0
                goto block@1
            block@4: // after_for_L39
                let encoded_bool%0#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u 0u)
                let encoded_bool%2#0: bytes = (setbit 0x00 0u 1u)
                let encoded_bool%3#0: bytes = (setbit 0x00 0u 0u)
                let current_tail_offset%2#0: uint64 = 1u
                let encoded_tuple_buffer%6#0: bytes = 0x
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_bool%0#0)
                let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
                let encoded_tuple_buffer%8#0: bytes = (setbit encoded_tuple_buffer%7#0 1u is_true%0#0)
                let is_true%1#0: uint64 = (getbit encoded_bool%2#0 0u)
                let encoded_tuple_buffer%9#0: bytes = (setbit encoded_tuple_buffer%8#0 2u is_true%1#0)
                let is_true%2#0: uint64 = (getbit encoded_bool%3#0 0u)
                let encoded_tuple_buffer%10#0: bytes = (setbit encoded_tuple_buffer%9#0 3u is_true%2#0)
                let flags#0: bytes = encoded_tuple_buffer%10#0
                let copy%2#0: bytes = flags#0
                let check%0#0: bytes = test_cases.arc4_types.structs.check(copy%2#0)
                let copy%2#1: bytes = check%0#0
                (log flags#0)
                let tmp%2#0: bool = (== coord_1#0 coord_1#0)
                (assert tmp%2#0)
                let copy%3#0: bytes = coord_1#0
                let copy%4#0: bytes = flags#0
                let current_tail_offset%3#0: uint64 = 17u
                let encoded_tuple_buffer%11#0: bytes = 0x
                let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 copy%3#0)
                let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 copy%4#0)
                let nested_decode%0#0: bytes = test_cases.arc4_types.structs.nested_decode(encoded_tuple_buffer%13#0)
                let encoded_tuple_buffer%13#1: bytes = nested_decode%0#0
                let length%0#0: uint64 = (len 0x)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
                let current_tail_offset%4#0: uint64 = 2u
                let encoded_tuple_buffer%14#0: bytes = 0x
                let as_bytes%1#0: bytes = (itob current_tail_offset%4#0)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%0#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%0#0)
                let mutable#0: bytes = encoded_tuple_buffer%16#0
                let copy%5#0: bytes = mutable#0
                let copy#0: bytes = copy%5#0
                let item_start_offset%0#0: uint64 = (extract_uint16 copy#0 0u)
                let item_end_offset%0#0: uint64 = (len copy#0)
                let tmp%3#0: bytes = (substring3 copy#0 item_start_offset%0#0 item_end_offset%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%3#0)
                let data%0#0: bytes = (concat 0x 0x2a)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%2#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let assigned_value%0#0: bytes = concat_result%0#0
                let item_offset%0#0: uint64 = (extract_uint16 copy#0 0u)
                let data_up_to_item%0#0: bytes = (extract3 copy#0 0u item_offset%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 assigned_value%0#0)
                let copy#1: bytes = updated_data%0#0
                let tmp%4#0: bool = (!= mutable#0 copy#1)
                (assert tmp%4#0) // expected copy is different
                let current_tail_offset%6#0: uint64 = 16u
                let encoded_tuple_buffer%17#0: bytes = 0x
                let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 0x000000000000000c)
                let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 0x0000000000000022)
                let immutable#0: bytes = encoded_tuple_buffer%19#0
                let no_copy#0: bytes = immutable#0
                let tmp%5#0: bool = (== no_copy#0 immutable#0)
                (assert tmp%5#0)
                return 1u
        
        subroutine test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> <bytes, bytes, bytes>:
            block@0: // L64
                let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
                let tmp%2#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%0#0, tmp%1#0)
                let tmp%3#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
                let tmp%4#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
                let tmp%5#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%3#0, tmp%4#0)
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 tmp%2#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 tmp%5#0)
                return encoded_tuple_buffer%2#0 v1#0 v2#0
        
        subroutine test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
            block@0: // L86
                let tmp%0#0: uint64 = (btoi x#0)
                let tmp%1#0: uint64 = (btoi y#0)
                let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let tmp%3#0: bytes = (itob tmp%2#0)
                return tmp%3#0
        
        subroutine test_cases.arc4_types.structs.check(flags: bytes) -> bytes:
            block@0: // L72
                let is_true%0#0: uint64 = (getbit flags#0 0u)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u is_true%0#0)
                let tmp%0#0: bool = (getbit encoded_bool%0#0 0u)
                (assert tmp%0#0)
                let is_true%1#0: uint64 = (getbit flags#0 1u)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u is_true%1#0)
                let tmp%1#0: bool = (getbit encoded_bool%1#0 0u)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                let is_true%2#0: uint64 = (getbit flags#0 2u)
                let encoded_bool%2#0: bytes = (setbit 0x00 0u is_true%2#0)
                let tmp%3#0: bool = (getbit encoded_bool%2#0 0u)
                (assert tmp%3#0)
                let is_true%3#0: uint64 = (getbit flags#0 3u)
                let encoded_bool%3#0: bytes = (setbit 0x00 0u is_true%3#0)
                let tmp%4#0: bool = (getbit encoded_bool%3#0 0u)
                let tmp%5#0: bool = (! tmp%4#0)
                (assert tmp%5#0)
                return flags#0
        
        subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> bytes:
            block@0: // L80
                let tmp%0#0: bytes = (extract3 vector_flags#0 0u 16u) // on error: Index access is out of bounds
                let tmp%1#0: bytes = (extract3 tmp%0#0 0u 8u) // on error: Index access is out of bounds
                let tmp%2#0: bytes = (itob 35382882839u)
                let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bytes = (extract3 vector_flags#0 16u 1u) // on error: Index access is out of bounds
                let is_true%0#0: uint64 = (getbit tmp%4#0 2u)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u is_true%0#0)
                let tmp%5#0: bool = (getbit encoded_bool%0#0 0u)
                (assert tmp%5#0)
                return vector_flags#0
    
    program clear-state:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.clear_state_program() -> bool:
            block@0: // L60
                return 1u