contract test_cases.arc4_types.structs.Arc4StructsTypeContract:
    program approval:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program() -> uint64:
            block@0: // L26
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%1#0: bytes = 0x
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#0 0x000000083cfbf217)
                let encoded_tuple_buffer%1#2: bytes = (concat encoded_tuple_buffer%1#1 0x000000230384b842)
                let coord_1#0: bytes = encoded_tuple_buffer%1#2
                let current_tail_offset%2#0: uint64 = 16u
                let encoded_tuple_buffer%3#0: bytes = 0x
                let encoded_tuple_buffer%3#1: bytes = (concat encoded_tuple_buffer%3#0 0x000000083cfbf217)
                let encoded_tuple_buffer%3#2: bytes = (concat encoded_tuple_buffer%3#1 0x000000230384b842)
                let coord_2#0: bytes = encoded_tuple_buffer%3#2
                let copy%4#0: bytes = coord_1#0
                let copy%5#0: bytes = coord_2#0
                let (add%6#0: bytes, add%7#0: bytes, add%8#0: bytes) = test_cases.arc4_types.structs.add(copy%4#0, copy%5#0)
                let copy%5#1: bytes = add%8#0
                let copy%4#1: bytes = add%7#0
                let coord_3#0: bytes = (add%6#0)
                let tmp%9#0: bytes = (extract3 coord_3#0 0u 8u)
                let tmp%10#0: bytes = (extract3 coord_3#0 8u 8u)
                goto block@1
            block@1: // for_header_0_L30
                let tuple_index%11#0: uint64 = 0u
                let val#0: bytes = tmp%9#0
                goto block@3
            block@2: // for_header_1_L30
                let val#1: bytes = tmp%10#0
                goto block@3
            block@3: // for_body_L30
                let val#2: bytes = φ(val#0 <- block@1, val#1 <- block@2)
                let tuple_index%11#1: uint64 = φ(tuple_index%11#0 <- block@1, tuple_index%11#3 <- block@2)
                (log val#2)
                goto block@4
            block@4: // for_footer_L30
                let tuple_index%11#3: uint64 = (+ tuple_index%11#1 1u)
                goto_nth [block@2][tuple_index%11#1] else goto block@5
            block@5: // after_for_L30
                let tmp%12#0: any = (setbit 0x00 0u 1u)
                let tmp%13#0: any = (setbit 0x00 0u 0u)
                let tmp%14#0: any = (setbit 0x00 0u 1u)
                let tmp%15#0: any = (setbit 0x00 0u 0u)
                let current_tail_offset%16#0: uint64 = 1u
                let encoded_tuple_buffer%17#0: bytes = 0x
                let encoded_tuple_buffer%17#1: bytes = (concat encoded_tuple_buffer%17#0 tmp%12#0)
                let is_true%18#0: uint64 = (getbit tmp%13#0 0u)
                let encoded_tuple_buffer%17#2: any = (setbit encoded_tuple_buffer%17#1 1u is_true%18#0)
                let is_true%19#0: uint64 = (getbit tmp%14#0 0u)
                let encoded_tuple_buffer%17#3: any = (setbit encoded_tuple_buffer%17#2 2u is_true%19#0)
                let is_true%20#0: uint64 = (getbit tmp%15#0 0u)
                let encoded_tuple_buffer%17#4: any = (setbit encoded_tuple_buffer%17#3 3u is_true%20#0)
                let flags#0: any = encoded_tuple_buffer%17#4
                let copy%21#0: any = flags#0
                let check%22#0: bytes = test_cases.arc4_types.structs.check(copy%21#0)
                let copy%21#1: bytes = check%22#0
                (log flags#0)
                let copy%23#0: bytes = coord_1#0
                let copy%24#0: any = flags#0
                let current_tail_offset%25#0: uint64 = 17u
                let encoded_tuple_buffer%26#0: bytes = 0x
                let encoded_tuple_buffer%26#1: bytes = (concat encoded_tuple_buffer%26#0 copy%23#0)
                let encoded_tuple_buffer%26#2: bytes = (concat encoded_tuple_buffer%26#1 copy%24#0)
                let nested_decode%27#0: bytes = test_cases.arc4_types.structs.nested_decode(encoded_tuple_buffer%26#2)
                let encoded_tuple_buffer%26#3: bytes = nested_decode%27#0
                return 1u
        
        subroutine test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> <bytes, bytes, bytes>:
            block@0: // L45
                let tmp%0#0: bytes = (extract3 v1#0 0u 8u)
                let tmp%1#0: bytes = (extract3 v2#0 0u 8u)
                let tmp%2#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%0#0, tmp%1#0)
                let tmp%3#0: bytes = (extract3 v1#0 8u 8u)
                let tmp%4#0: bytes = (extract3 v2#0 8u 8u)
                let tmp%5#0: bytes = test_cases.arc4_types.structs.add_decimal(tmp%3#0, tmp%4#0)
                let current_tail_offset%6#0: uint64 = 16u
                let encoded_tuple_buffer%7#0: bytes = 0x
                let encoded_tuple_buffer%7#1: bytes = (concat encoded_tuple_buffer%7#0 tmp%2#0)
                let encoded_tuple_buffer%7#2: bytes = (concat encoded_tuple_buffer%7#1 tmp%5#0)
                return encoded_tuple_buffer%7#2 v1#0 v2#0
        
        subroutine test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
            block@0: // L67
                let tmp%0#0: uint64 = (btoi x#0)
                let tmp%1#0: uint64 = (btoi y#0)
                let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
                let tmp%3#0: bytes = (itob tmp%2#0)
                return tmp%3#0
        
        subroutine test_cases.arc4_types.structs.check(flags: bytes) -> bytes:
            block@0: // L53
                let is_true%0#0: uint64 = (getbit flags#0 0u)
                let tmp%1#0: any = (setbit 0x00 0u is_true%0#0)
                let tmp%2#0: uint64 = (getbit tmp%1#0 0u)
                (assert tmp%2#0)
                let is_true%3#0: uint64 = (getbit flags#0 1u)
                let tmp%4#0: any = (setbit 0x00 0u is_true%3#0)
                let tmp%5#0: uint64 = (getbit tmp%4#0 0u)
                let tmp%6#0: uint64 = (! tmp%5#0)
                (assert tmp%6#0)
                let is_true%7#0: uint64 = (getbit flags#0 2u)
                let tmp%8#0: any = (setbit 0x00 0u is_true%7#0)
                let tmp%9#0: uint64 = (getbit tmp%8#0 0u)
                (assert tmp%9#0)
                let is_true%10#0: uint64 = (getbit flags#0 3u)
                let tmp%11#0: any = (setbit 0x00 0u is_true%10#0)
                let tmp%12#0: uint64 = (getbit tmp%11#0 0u)
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0)
                return flags#0
        
        subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> bytes:
            block@0: // L61
                let tmp%0#0: bytes = (extract3 vector_flags#0 0u 16u)
                let tmp%1#0: bytes = (extract3 tmp%0#0 0u 8u)
                let tmp%2#0: bytes = (itob 35382882839u)
                let tmp%3#0: uint64 = (== tmp%1#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bytes = (extract3 vector_flags#0 16u 1u)
                let is_true%5#0: uint64 = (getbit tmp%4#0 2u)
                let tmp%6#0: any = (setbit 0x00 0u is_true%5#0)
                let tmp%7#0: uint64 = (getbit tmp%6#0 0u)
                (assert tmp%7#0)
                return vector_flags#0
    
    program clear-state:
        subroutine test_cases.arc4_types.structs.Arc4StructsTypeContract.clear_state_program() -> uint64:
            block@0: // L41
                return 1u