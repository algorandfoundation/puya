// Op                                                                 Stack (out)
// test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> uint64:
main_block@0:
    // arc4_types/bool.py:13
    // self.test_stuff(ARC4Bool(True), ARC4Bool(False))
    byte 0x80                                                         0x80
    byte 0x00                                                         0x80,0x00
    callsub test_stuff                                                {test_stuff}
    pop 1
    // arc4_types/bool.py:15
    // False if Txn.num_app_args else True  # noqa: SIM211
    txn NumAppArgs                                                    tmp%0#0
    !                                                                 to_encode%0#0
    // arc4_types/bool.py:14-16
    // assert ARC4Bool(
    //     False if Txn.num_app_args else True  # noqa: SIM211
    // ).native, "conditional expr"
    byte 0x00                                                         to_encode%0#0,0x00
    int 0                                                             to_encode%0#0,0x00,0
    l-load to_encode%0#0 2                                            0x00,0,to_encode%0#0
    setbit                                                            encoded_bool%2#0
    int 0                                                             encoded_bool%2#0,0
    getbit                                                            tmp%2#0
    assert // conditional expr
    // arc4_types/bool.py:49
    // return True
    int 1                                                             1
    return


// test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> uint64:
test_stuff:                                                           (洧도) true#0,false#0 |
    // arc4_types/bool.py:54-55
    // @subroutine
    // def test_stuff(self, true: ARC4Bool, false: ARC4Bool) -> bool:
    proto 2 1                                                         (洧도) true#0,false#0 |

test_stuff_block@0:                                                   (洧도) true#0,false#0 |
    // arc4_types/bool.py:56
    // assert true.native
    p-load true#0                                                     (洧도) true#0,false#0 | true#0 (copy)
    int 0                                                             (洧도) true#0,false#0 | true#0 (copy),0
    getbit                                                            (洧도) true#0,false#0 | tmp%0#0
    l-load-copy tmp%0#0 0                                             (洧도) true#0,false#0 | tmp%0#0,tmp%0#0 (copy)
    assert                                                            (洧도) true#0,false#0 | tmp%0#0
    // arc4_types/bool.py:58
    // assert not false.native
    p-load false#0                                                    (洧도) true#0,false#0 | tmp%0#0,false#0 (copy)
    int 0                                                             (洧도) true#0,false#0 | tmp%0#0,false#0 (copy),0
    getbit                                                            (洧도) true#0,false#0 | tmp%0#0,tmp%1#0
    l-load-copy tmp%1#0 0                                             (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,tmp%1#0 (copy)
    !                                                                 (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,tmp%2#0
    assert                                                            (洧도) true#0,false#0 | tmp%0#0,tmp%1#0
    // arc4_types/bool.py:60
    // assert true == ARC4Bool(true.native)
    byte 0x00                                                         (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,0x00
    int 0                                                             (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,0x00,0
    l-load-copy tmp%0#0 3                                             (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,0x00,0,tmp%0#0 (copy)
    setbit                                                            (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,encoded_bool%0#0
    p-load true#0                                                     (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,encoded_bool%0#0,true#0 (copy)
    l-load encoded_bool%0#0 1                                         (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,true#0 (copy),encoded_bool%0#0
    ==                                                                (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,tmp%3#0
    assert                                                            (洧도) true#0,false#0 | tmp%0#0,tmp%1#0
    // arc4_types/bool.py:61
    // assert false == ARC4Bool(false.native)
    byte 0x00                                                         (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,0x00
    int 0                                                             (洧도) true#0,false#0 | tmp%0#0,tmp%1#0,0x00,0
    l-load tmp%1#0 2                                                  (洧도) true#0,false#0 | tmp%0#0,0x00,0,tmp%1#0
    setbit                                                            (洧도) true#0,false#0 | tmp%0#0,encoded_bool%1#0
    p-load false#0                                                    (洧도) true#0,false#0 | tmp%0#0,encoded_bool%1#0,false#0 (copy)
    l-load encoded_bool%1#0 1                                         (洧도) true#0,false#0 | tmp%0#0,false#0 (copy),encoded_bool%1#0
    ==                                                                (洧도) true#0,false#0 | tmp%0#0,tmp%4#0
    assert                                                            (洧도) true#0,false#0 | tmp%0#0
    // arc4_types/bool.py:63
    // return true.native
    l-load tmp%0#0 0                                                  (洧도) true#0,false#0 | tmp%0#0
    retsub                                                            tmp%0#0


