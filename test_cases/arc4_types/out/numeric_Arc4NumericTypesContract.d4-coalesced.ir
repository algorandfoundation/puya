contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
            block@0: // L25
                let val_as_bytes%0#0: bytes = (itob 255u)
                let int8_encoded#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%1#0: uint64 = (== 255u int8_decoded#0)
                (assert tmp%1#0)
                let tmp%6#0: uint64 = (btoi 0x7f)
                let tmp%7#0: uint64 = (== tmp%6#0 127u)
                (assert tmp%7#0)
                let tmp%12#0: uint64 = (btoi 0x7fffff)
                let tmp%13#0: uint64 = (== tmp%12#0 8388607u)
                (assert tmp%13#0)
                let tmp%18#0: uint64 = (btoi 0x7fff)
                let tmp%19#0: uint64 = (== tmp%18#0 32767u)
                (assert tmp%19#0)
                let tmp%24#0: uint64 = (btoi 0x7fffffff)
                let tmp%25#0: uint64 = (== tmp%24#0 2147483647u)
                (assert tmp%25#0)
                let tmp%30#0: uint64 = (btoi 0x7fffffffffffffff)
                let tmp%31#0: uint64 = (== tmp%30#0 9223372036854775807u)
                (assert tmp%31#0)
                let b_zeros%38#0: bytes = (bzero 64u)
                let tmp%39#0: bytes = (b| 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff b_zeros%38#0)
                let tmp%40#0: uint64 = (== 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff tmp%39#0)
                (assert tmp%40#0)
                let len_%41#0: uint64 = (len 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
                let no_overflow%42#0: uint64 = (<= len_%41#0 64u)
                (assert no_overflow%42#0) // overflow
                let really_big_decimal#0: bytes = (b| 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b b_zeros%38#0)
                let len_%45#0: uint64 = (len 2b)
                let no_overflow%46#0: uint64 = (<= len_%45#0 16u)
                (assert no_overflow%46#0) // overflow
                let b_zeros%47#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| 2b b_zeros%47#0)
                let tmp%48#0: uint64 = (b== 1b 0x00000000000000000000000000000001)
                (assert tmp%48#0)
                let tmp%49#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%50#0: uint64 = (== tmp%49#0 16u)
                (assert tmp%50#0)
                let tmp%51#0: uint64 = (len really_big_decimal#0)
                let tmp%52#0: uint64 = (== tmp%51#0 64u)
                (assert tmp%52#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> uint64:
            block@0: // L68
                return 1u