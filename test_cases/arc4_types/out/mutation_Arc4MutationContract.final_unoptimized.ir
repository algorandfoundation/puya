contract test_cases.arc4_types.mutation.Arc4MutationContract:
    program approval:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.approval_program() -> uint64:
            block@0: // L30
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
                test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
                return 1u
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
            block@0: // L159
                let array_data%0#0: bytes = 0x0002
                let array_data%0#0: bytes = (concat array_data%0#0 0x01)
                let array_data%0#0: bytes = (concat array_data%0#0 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#0
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let data%2#0: bytes = 0x
                let data%2#0: bytes = (concat data%2#0 0x32)
                let concatenated%3#0: bytes = (concat expr_value_trimmed%1#0 data%2#0)
                let len_%4#0: uint64 = (len concatenated%3#0)
                let len_bytes%5#0: bytes = (itob len_%4#0)
                let len_16_bit%6#0: bytes = ((extract 6 0) len_bytes%5#0)
                let concat_result%7#0: bytes = (concat len_16_bit%6#0 concatenated%3#0)
                let dynamic_uint8_array#0: bytes = concat_result%7#0
                let array_data%8#0: bytes = 0x0003
                let array_data%8#0: bytes = (concat array_data%8#0 0x01)
                let array_data%8#0: bytes = (concat array_data%8#0 0x02)
                let array_data%8#0: bytes = (concat array_data%8#0 0x32)
                let tmp%9#0: uint64 = (== dynamic_uint8_array#0 array_data%8#0)
                (assert tmp%9#0)
                let expr_value_trimmed%10#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let expr_value_trimmed%11#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let concatenated%12#0: bytes = (concat expr_value_trimmed%10#0 expr_value_trimmed%11#0)
                let len_%13#0: uint64 = (len concatenated%12#0)
                let len_bytes%14#0: bytes = (itob len_%13#0)
                let len_16_bit%15#0: bytes = ((extract 6 0) len_bytes%14#0)
                let concat_result%16#0: bytes = (concat len_16_bit%15#0 concatenated%12#0)
                let dynamic_uint8_array#0: bytes = concat_result%16#0
                let array_data%17#0: bytes = 0x0006
                let array_data%17#0: bytes = (concat array_data%17#0 0x01)
                let array_data%17#0: bytes = (concat array_data%17#0 0x02)
                let array_data%17#0: bytes = (concat array_data%17#0 0x32)
                let array_data%17#0: bytes = (concat array_data%17#0 0x01)
                let array_data%17#0: bytes = (concat array_data%17#0 0x02)
                let array_data%17#0: bytes = (concat array_data%17#0 0x32)
                let tmp%18#0: uint64 = (== dynamic_uint8_array#0 array_data%17#0)
                (assert tmp%18#0)
                let expr_value_trimmed%19#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let data%20#0: bytes = 0x
                let data%20#0: bytes = (concat data%20#0 0x04)
                let data%20#0: bytes = (concat data%20#0 0x5a)
                let concatenated%21#0: bytes = (concat expr_value_trimmed%19#0 data%20#0)
                let len_%22#0: uint64 = (len concatenated%21#0)
                let len_bytes%23#0: bytes = (itob len_%22#0)
                let len_16_bit%24#0: bytes = ((extract 6 0) len_bytes%23#0)
                let concat_result%25#0: bytes = (concat len_16_bit%24#0 concatenated%21#0)
                let dynamic_uint8_array#0: bytes = concat_result%25#0
                let array_data%26#0: bytes = 0x0008
                let array_data%26#0: bytes = (concat array_data%26#0 0x01)
                let array_data%26#0: bytes = (concat array_data%26#0 0x02)
                let array_data%26#0: bytes = (concat array_data%26#0 0x32)
                let array_data%26#0: bytes = (concat array_data%26#0 0x01)
                let array_data%26#0: bytes = (concat array_data%26#0 0x02)
                let array_data%26#0: bytes = (concat array_data%26#0 0x32)
                let array_data%26#0: bytes = (concat array_data%26#0 0x04)
                let array_data%26#0: bytes = (concat array_data%26#0 0x5a)
                let tmp%27#0: uint64 = (== dynamic_uint8_array#0 array_data%26#0)
                (assert tmp%27#0)
                let (popped%28#1: bytes, data%29#1: bytes) = puyapy_lib_arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#0, 1u)
                let dynamic_uint8_array#0: bytes = data%29#1
                let popped#0: bytes = popped%28#1
                let tmp%30#0: uint64 = (== popped#0 0x5a)
                (assert tmp%30#0)
                let array_data%31#0: bytes = 0x0007
                let array_data%31#0: bytes = (concat array_data%31#0 0x01)
                let array_data%31#0: bytes = (concat array_data%31#0 0x02)
                let array_data%31#0: bytes = (concat array_data%31#0 0x32)
                let array_data%31#0: bytes = (concat array_data%31#0 0x01)
                let array_data%31#0: bytes = (concat array_data%31#0 0x02)
                let array_data%31#0: bytes = (concat array_data%31#0 0x32)
                let array_data%31#0: bytes = (concat array_data%31#0 0x04)
                let tmp%32#0: uint64 = (== dynamic_uint8_array#0 array_data%31#0)
                (assert tmp%32#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
            block@0: // L182
                let tmp%0#0: any = (setbit 0x00 0u 1u)
                let tmp%1#0: any = (setbit 0x00 0u 0u)
                let array_data%2#0: bytes = 0x0002
                let array_data%2#0: bytes = (concat array_data%2#0 tmp%0#0)
                let is_true%3#0: uint64 = (getbit tmp%1#0 0u)
                let array_data%2#0: bytes = (setbit array_data%2#0 17u is_true%3#0)
                let dynamic_bool_array#0: any = array_data%2#0
                let tmp%4#0: uint64 = (== dynamic_bool_array#0 0x000280)
                (assert tmp%4#0)
                let tmp%5#0: any = (setbit 0x00 0u 1u)
                let tmp%6#0: any = (setbit 0x00 0u 0u)
                let data%7#0: bytes = 0x
                let data%7#0: bytes = (concat data%7#0 tmp%5#0)
                let data%7#0: bytes = (concat data%7#0 tmp%6#0)
                let concat_result%8#0: bytes = puyapy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%7#0, 2u, 0u)
                let dynamic_bool_array#0: any = concat_result%8#0
                let tmp%9#0: uint64 = (== dynamic_bool_array#0 0x0004a0)
                (assert tmp%9#0)
                let tmp%10#0: any = (setbit 0x00 0u 1u)
                let tmp%11#0: any = (setbit 0x00 0u 0u)
                let tmp%12#0: any = (setbit 0x00 0u 1u)
                let tmp%13#0: any = (setbit 0x00 0u 0u)
                let array_data%14#0: bytes = 0x0004
                let array_data%14#0: bytes = (concat array_data%14#0 tmp%10#0)
                let is_true%15#0: uint64 = (getbit tmp%11#0 0u)
                let array_data%14#0: bytes = (setbit array_data%14#0 17u is_true%15#0)
                let is_true%16#0: uint64 = (getbit tmp%12#0 0u)
                let array_data%14#0: bytes = (setbit array_data%14#0 18u is_true%16#0)
                let is_true%17#0: uint64 = (getbit tmp%13#0 0u)
                let array_data%14#0: bytes = (setbit array_data%14#0 19u is_true%17#0)
                let tmp%18#0: uint64 = (== dynamic_bool_array#0 array_data%14#0)
                (assert tmp%18#0)
                let array_length%19#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
                let data%20#0: bytes = ((extract 2 0) dynamic_bool_array#0)
                let concat_result%21#0: bytes = puyapy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%20#0, array_length%19#0, 1u)
                let dynamic_bool_array#0: any = concat_result%21#0
                let tmp%22#0: any = (setbit 0x00 0u 1u)
                let tmp%23#0: any = (setbit 0x00 0u 0u)
                let tmp%24#0: any = (setbit 0x00 0u 1u)
                let tmp%25#0: any = (setbit 0x00 0u 0u)
                let tmp%26#0: any = (setbit 0x00 0u 1u)
                let tmp%27#0: any = (setbit 0x00 0u 0u)
                let tmp%28#0: any = (setbit 0x00 0u 1u)
                let tmp%29#0: any = (setbit 0x00 0u 0u)
                let array_data%30#0: bytes = 0x0008
                let array_data%30#0: bytes = (concat array_data%30#0 tmp%22#0)
                let is_true%31#0: uint64 = (getbit tmp%23#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 17u is_true%31#0)
                let is_true%32#0: uint64 = (getbit tmp%24#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 18u is_true%32#0)
                let is_true%33#0: uint64 = (getbit tmp%25#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 19u is_true%33#0)
                let is_true%34#0: uint64 = (getbit tmp%26#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 20u is_true%34#0)
                let is_true%35#0: uint64 = (getbit tmp%27#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 21u is_true%35#0)
                let is_true%36#0: uint64 = (getbit tmp%28#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 22u is_true%36#0)
                let is_true%37#0: uint64 = (getbit tmp%29#0 0u)
                let array_data%30#0: bytes = (setbit array_data%30#0 23u is_true%37#0)
                let tmp%38#0: uint64 = (== dynamic_bool_array#0 array_data%30#0)
                (assert tmp%38#0)
                let tmp%39#0: any = (setbit 0x00 0u 1u)
                let data%40#0: bytes = 0x
                let data%40#0: bytes = (concat data%40#0 tmp%39#0)
                let concat_result%41#0: bytes = puyapy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#0, data%40#0, 1u, 0u)
                let dynamic_bool_array#0: any = concat_result%41#0
                let tmp%42#0: any = (setbit 0x00 0u 1u)
                let tmp%43#0: any = (setbit 0x00 0u 0u)
                let tmp%44#0: any = (setbit 0x00 0u 1u)
                let tmp%45#0: any = (setbit 0x00 0u 0u)
                let tmp%46#0: any = (setbit 0x00 0u 1u)
                let tmp%47#0: any = (setbit 0x00 0u 0u)
                let tmp%48#0: any = (setbit 0x00 0u 1u)
                let tmp%49#0: any = (setbit 0x00 0u 0u)
                let tmp%50#0: any = (setbit 0x00 0u 1u)
                let array_data%51#0: bytes = 0x0009
                let array_data%51#0: bytes = (concat array_data%51#0 tmp%42#0)
                let is_true%52#0: uint64 = (getbit tmp%43#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 17u is_true%52#0)
                let is_true%53#0: uint64 = (getbit tmp%44#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 18u is_true%53#0)
                let is_true%54#0: uint64 = (getbit tmp%45#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 19u is_true%54#0)
                let is_true%55#0: uint64 = (getbit tmp%46#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 20u is_true%55#0)
                let is_true%56#0: uint64 = (getbit tmp%47#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 21u is_true%56#0)
                let is_true%57#0: uint64 = (getbit tmp%48#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 22u is_true%57#0)
                let is_true%58#0: uint64 = (getbit tmp%49#0 0u)
                let array_data%51#0: bytes = (setbit array_data%51#0 23u is_true%58#0)
                let array_data%51#0: bytes = (concat array_data%51#0 tmp%50#0)
                let tmp%59#0: uint64 = (== dynamic_bool_array#0 array_data%51#0)
                (assert tmp%59#0)
                let (popped%60#1: bytes, data%61#1: bytes) = puyapy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
                let dynamic_bool_array#0: any = data%61#1
                let tmp%62#0: any = (setbit 0x00 0u 1u)
                let tmp%63#0: uint64 = (== popped%60#1 tmp%62#0)
                (assert tmp%63#0)
                let (popped%64#1: bytes, data%65#1: bytes) = puyapy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#0)
                let dynamic_bool_array#0: any = data%65#1
                let tmp%66#0: any = (setbit 0x00 0u 0u)
                let tmp%67#0: uint64 = (== popped%64#1 tmp%66#0)
                (assert tmp%67#0)
                let tmp%68#0: any = (setbit 0x00 0u 1u)
                let tmp%69#0: any = (setbit 0x00 0u 0u)
                let tmp%70#0: any = (setbit 0x00 0u 1u)
                let tmp%71#0: any = (setbit 0x00 0u 0u)
                let tmp%72#0: any = (setbit 0x00 0u 1u)
                let tmp%73#0: any = (setbit 0x00 0u 0u)
                let tmp%74#0: any = (setbit 0x00 0u 1u)
                let array_data%75#0: bytes = 0x0007
                let array_data%75#0: bytes = (concat array_data%75#0 tmp%68#0)
                let is_true%76#0: uint64 = (getbit tmp%69#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 17u is_true%76#0)
                let is_true%77#0: uint64 = (getbit tmp%70#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 18u is_true%77#0)
                let is_true%78#0: uint64 = (getbit tmp%71#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 19u is_true%78#0)
                let is_true%79#0: uint64 = (getbit tmp%72#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 20u is_true%79#0)
                let is_true%80#0: uint64 = (getbit tmp%73#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 21u is_true%80#0)
                let is_true%81#0: uint64 = (getbit tmp%74#0 0u)
                let array_data%75#0: bytes = (setbit array_data%75#0 22u is_true%81#0)
                let tmp%82#0: uint64 = (== dynamic_bool_array#0 array_data%75#0)
                (assert tmp%82#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
            block@0: // L229
                let hello#0: bytes = "\x00\x05Hello"
                let world#0: bytes = "\x00\x05World"
                let foo#0: bytes = "\x00\x03Foo"
                let bar#0: bytes = "\x00\x03Bar"
                let array_data%0#0: bytes = 0x0002
                let next_offset%1#0: uint64 = 4u
                let value_as_bytes%2#0: bytes = (itob next_offset%1#0)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let array_data%0#0: bytes = (concat array_data%0#0 value_as_uint16%3#0)
                let element_length%4#0: uint64 = (len hello#0)
                let next_offset%1#0: uint64 = (+ next_offset%1#0 element_length%4#0)
                let value_as_bytes%5#0: bytes = (itob next_offset%1#0)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let array_data%0#0: bytes = (concat array_data%0#0 value_as_uint16%6#0)
                let element_length%7#0: uint64 = (len world#0)
                let next_offset%1#0: uint64 = (+ next_offset%1#0 element_length%7#0)
                let array_data%0#0: bytes = (concat array_data%0#0 hello#0)
                let array_data%0#0: bytes = (concat array_data%0#0 world#0)
                let dynamic_string_array#0: bytes = array_data%0#0
                let tmp%8#0: uint64 = (== dynamic_string_array#0 "\x00\x02\x00\x04\x00\x0b\x00\x05Hello\x00\x05World")
                (assert tmp%8#0)
                let data%9#0: bytes = 0x
                let data%9#0: bytes = (concat data%9#0 foo#0)
                let data%9#0: bytes = (concat data%9#0 bar#0)
                let concat_result%10#0: bytes = puyapy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#0, data%9#0, 2u)
                let dynamic_string_array#0: bytes = concat_result%10#0
                let tmp%11#0: uint64 = (== dynamic_string_array#0 "\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar")
                (assert tmp%11#0)
                let array_length%12#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let start_of_data%13#0: uint64 = (* array_length%12#0 2u)
                let start_of_data%13#0: uint64 = (+ start_of_data%13#0 2u)
                let total_length%14#0: uint64 = (len dynamic_string_array#0)
                let data%15#0: bytes = (substring3 dynamic_string_array#0 start_of_data%13#0 total_length%14#0)
                let concat_result%16#0: bytes = puyapy_lib_arc4.dynamic_array_concat_variable_size(dynamic_string_array#0, data%15#0, array_length%12#0)
                let dynamic_string_array#0: bytes = concat_result%16#0
                let array_data%17#0: bytes = 0x0008
                let next_offset%18#0: uint64 = 16u
                let value_as_bytes%19#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%20#0: bytes = ((extract 6 2) value_as_bytes%19#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%20#0)
                let element_length%21#0: uint64 = (len hello#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%21#0)
                let value_as_bytes%22#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%23#0: bytes = ((extract 6 2) value_as_bytes%22#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%23#0)
                let element_length%24#0: uint64 = (len world#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%24#0)
                let value_as_bytes%25#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%26#0: bytes = ((extract 6 2) value_as_bytes%25#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%26#0)
                let element_length%27#0: uint64 = (len foo#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%27#0)
                let value_as_bytes%28#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%29#0: bytes = ((extract 6 2) value_as_bytes%28#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%29#0)
                let element_length%30#0: uint64 = (len bar#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%30#0)
                let value_as_bytes%31#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%32#0: bytes = ((extract 6 2) value_as_bytes%31#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%32#0)
                let element_length%33#0: uint64 = (len hello#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%33#0)
                let value_as_bytes%34#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%35#0: bytes = ((extract 6 2) value_as_bytes%34#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%35#0)
                let element_length%36#0: uint64 = (len world#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%36#0)
                let value_as_bytes%37#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%38#0: bytes = ((extract 6 2) value_as_bytes%37#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%38#0)
                let element_length%39#0: uint64 = (len foo#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%39#0)
                let value_as_bytes%40#0: bytes = (itob next_offset%18#0)
                let value_as_uint16%41#0: bytes = ((extract 6 2) value_as_bytes%40#0)
                let array_data%17#0: bytes = (concat array_data%17#0 value_as_uint16%41#0)
                let element_length%42#0: uint64 = (len bar#0)
                let next_offset%18#0: uint64 = (+ next_offset%18#0 element_length%42#0)
                let array_data%17#0: bytes = (concat array_data%17#0 hello#0)
                let array_data%17#0: bytes = (concat array_data%17#0 world#0)
                let array_data%17#0: bytes = (concat array_data%17#0 foo#0)
                let array_data%17#0: bytes = (concat array_data%17#0 bar#0)
                let array_data%17#0: bytes = (concat array_data%17#0 hello#0)
                let array_data%17#0: bytes = (concat array_data%17#0 world#0)
                let array_data%17#0: bytes = (concat array_data%17#0 foo#0)
                let array_data%17#0: bytes = (concat array_data%17#0 bar#0)
                let tmp%43#0: uint64 = (== dynamic_string_array#0 array_data%17#0)
                (assert tmp%43#0)
                let array_data%44#0: bytes = 0x0008
                let next_offset%45#0: uint64 = 16u
                let value_as_bytes%46#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%47#0: bytes = ((extract 6 2) value_as_bytes%46#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%47#0)
                let element_length%48#0: uint64 = (len hello#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%48#0)
                let value_as_bytes%49#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%50#0: bytes = ((extract 6 2) value_as_bytes%49#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%50#0)
                let element_length%51#0: uint64 = (len world#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%51#0)
                let value_as_bytes%52#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%53#0: bytes = ((extract 6 2) value_as_bytes%52#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%53#0)
                let element_length%54#0: uint64 = (len foo#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%54#0)
                let value_as_bytes%55#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%56#0: bytes = ((extract 6 2) value_as_bytes%55#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%56#0)
                let element_length%57#0: uint64 = (len bar#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%57#0)
                let value_as_bytes%58#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%59#0: bytes = ((extract 6 2) value_as_bytes%58#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%59#0)
                let element_length%60#0: uint64 = (len hello#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%60#0)
                let value_as_bytes%61#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%62#0: bytes = ((extract 6 2) value_as_bytes%61#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%62#0)
                let element_length%63#0: uint64 = (len world#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%63#0)
                let value_as_bytes%64#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%65#0: bytes = ((extract 6 2) value_as_bytes%64#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%65#0)
                let element_length%66#0: uint64 = (len foo#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%66#0)
                let value_as_bytes%67#0: bytes = (itob next_offset%45#0)
                let value_as_uint16%68#0: bytes = ((extract 6 2) value_as_bytes%67#0)
                let array_data%44#0: bytes = (concat array_data%44#0 value_as_uint16%68#0)
                let element_length%69#0: uint64 = (len bar#0)
                let next_offset%45#0: uint64 = (+ next_offset%45#0 element_length%69#0)
                let array_data%44#0: bytes = (concat array_data%44#0 hello#0)
                let array_data%44#0: bytes = (concat array_data%44#0 world#0)
                let array_data%44#0: bytes = (concat array_data%44#0 foo#0)
                let array_data%44#0: bytes = (concat array_data%44#0 bar#0)
                let array_data%44#0: bytes = (concat array_data%44#0 hello#0)
                let array_data%44#0: bytes = (concat array_data%44#0 world#0)
                let array_data%44#0: bytes = (concat array_data%44#0 foo#0)
                let array_data%44#0: bytes = (concat array_data%44#0 bar#0)
                let dynamic_string_array#0: bytes = array_data%44#0
                let assigned_value%70#0: bytes = hello#0
                let updated_value%71#0: bytes = puyapy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#0, assigned_value%70#0, 3u)
                let dynamic_string_array#0: bytes = updated_value%71#0
                let assigned_value%72#0: bytes = hello#0
                let updated_value%73#0: bytes = puyapy_lib_arc4.dynamic_array_replace_variable_size(dynamic_string_array#0, assigned_value%72#0, 5u)
                let dynamic_string_array#0: bytes = updated_value%73#0
                let array_data%74#0: bytes = 0x0008
                let next_offset%75#0: uint64 = 16u
                let value_as_bytes%76#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%77#0: bytes = ((extract 6 2) value_as_bytes%76#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%77#0)
                let element_length%78#0: uint64 = (len hello#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%78#0)
                let value_as_bytes%79#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%80#0: bytes = ((extract 6 2) value_as_bytes%79#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%80#0)
                let element_length%81#0: uint64 = (len world#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%81#0)
                let value_as_bytes%82#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%83#0: bytes = ((extract 6 2) value_as_bytes%82#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%83#0)
                let element_length%84#0: uint64 = (len foo#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%84#0)
                let value_as_bytes%85#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%86#0: bytes = ((extract 6 2) value_as_bytes%85#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%86#0)
                let element_length%87#0: uint64 = (len hello#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%87#0)
                let value_as_bytes%88#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%89#0: bytes = ((extract 6 2) value_as_bytes%88#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%89#0)
                let element_length%90#0: uint64 = (len hello#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%90#0)
                let value_as_bytes%91#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%92#0: bytes = ((extract 6 2) value_as_bytes%91#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%92#0)
                let element_length%93#0: uint64 = (len hello#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%93#0)
                let value_as_bytes%94#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%95#0: bytes = ((extract 6 2) value_as_bytes%94#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%95#0)
                let element_length%96#0: uint64 = (len foo#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%96#0)
                let value_as_bytes%97#0: bytes = (itob next_offset%75#0)
                let value_as_uint16%98#0: bytes = ((extract 6 2) value_as_bytes%97#0)
                let array_data%74#0: bytes = (concat array_data%74#0 value_as_uint16%98#0)
                let element_length%99#0: uint64 = (len bar#0)
                let next_offset%75#0: uint64 = (+ next_offset%75#0 element_length%99#0)
                let array_data%74#0: bytes = (concat array_data%74#0 hello#0)
                let array_data%74#0: bytes = (concat array_data%74#0 world#0)
                let array_data%74#0: bytes = (concat array_data%74#0 foo#0)
                let array_data%74#0: bytes = (concat array_data%74#0 hello#0)
                let array_data%74#0: bytes = (concat array_data%74#0 hello#0)
                let array_data%74#0: bytes = (concat array_data%74#0 hello#0)
                let array_data%74#0: bytes = (concat array_data%74#0 foo#0)
                let array_data%74#0: bytes = (concat array_data%74#0 bar#0)
                let tmp%100#0: uint64 = (== dynamic_string_array#0 array_data%74#0)
                (assert tmp%100#0)
                let (popped%101#1: bytes, data%102#1: bytes) = puyapy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#0)
                let dynamic_string_array#0: bytes = data%102#1
                let tmp%103#0: uint64 = (== popped%101#1 bar#0)
                (assert tmp%103#0)
                let (popped%104#1: bytes, data%105#1: bytes) = puyapy_lib_arc4.dynamic_array_pop_variable_size(dynamic_string_array#0)
                let dynamic_string_array#0: bytes = data%105#1
                let tmp%106#0: uint64 = (== popped%104#1 foo#0)
                (assert tmp%106#0)
                let array_data%107#0: bytes = 0x0006
                let next_offset%108#0: uint64 = 12u
                let value_as_bytes%109#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%110#0: bytes = ((extract 6 2) value_as_bytes%109#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%110#0)
                let element_length%111#0: uint64 = (len hello#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%111#0)
                let value_as_bytes%112#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%113#0: bytes = ((extract 6 2) value_as_bytes%112#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%113#0)
                let element_length%114#0: uint64 = (len world#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%114#0)
                let value_as_bytes%115#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%116#0: bytes = ((extract 6 2) value_as_bytes%115#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%116#0)
                let element_length%117#0: uint64 = (len foo#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%117#0)
                let value_as_bytes%118#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%119#0: bytes = ((extract 6 2) value_as_bytes%118#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%119#0)
                let element_length%120#0: uint64 = (len hello#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%120#0)
                let value_as_bytes%121#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%122#0: bytes = ((extract 6 2) value_as_bytes%121#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%122#0)
                let element_length%123#0: uint64 = (len hello#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%123#0)
                let value_as_bytes%124#0: bytes = (itob next_offset%108#0)
                let value_as_uint16%125#0: bytes = ((extract 6 2) value_as_bytes%124#0)
                let array_data%107#0: bytes = (concat array_data%107#0 value_as_uint16%125#0)
                let element_length%126#0: uint64 = (len hello#0)
                let next_offset%108#0: uint64 = (+ next_offset%108#0 element_length%126#0)
                let array_data%107#0: bytes = (concat array_data%107#0 hello#0)
                let array_data%107#0: bytes = (concat array_data%107#0 world#0)
                let array_data%107#0: bytes = (concat array_data%107#0 foo#0)
                let array_data%107#0: bytes = (concat array_data%107#0 hello#0)
                let array_data%107#0: bytes = (concat array_data%107#0 hello#0)
                let array_data%107#0: bytes = (concat array_data%107#0 hello#0)
                let tmp%127#0: uint64 = (== dynamic_string_array#0 array_data%107#0)
                (assert tmp%127#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
            block@0: // L86
                let array_of_array#0: bytes = 0x0000
                let tmp%0#0: uint64 = (== array_of_array#0 0x0000)
                (assert tmp%0#0)
                let array_data%1#0: bytes = 0x0001
                let array_data%1#0: bytes = (concat array_data%1#0 0x0a)
                let data%2#0: bytes = 0x
                let data%2#0: bytes = (concat data%2#0 array_data%1#0)
                let concat_result%3#0: bytes = puyapy_lib_arc4.dynamic_array_concat_variable_size(array_of_array#0, data%2#0, 1u)
                let array_of_array#0: bytes = concat_result%3#0
                let tmp%4#0: uint64 = (== array_of_array#0 0x0001000200010a)
                (assert tmp%4#0)
                let array_data%5#0: bytes = 0x0001
                let array_data%5#0: bytes = (concat array_data%5#0 0x10)
                let data%6#0: bytes = 0x
                let data%6#0: bytes = (concat data%6#0 array_data%5#0)
                let concat_result%7#0: bytes = puyapy_lib_arc4.dynamic_array_concat_variable_size(array_of_array#0, data%6#0, 1u)
                let array_of_array#0: bytes = concat_result%7#0
                let tmp%8#0: uint64 = (== array_of_array#0 0x00020004000700010a000110)
                (assert tmp%8#0)
                let array_length%9#0: uint64 = (extract_uint16 array_of_array#0 0u)
                let index_is_in_bounds%10#0: uint64 = (< 0u array_length%9#0)
                (assert index_is_in_bounds%10#0) // Index access is out of bounds
                let array_data_sans_header%11#0: bytes = ((extract 2 0) array_of_array#0)
                let item_index_index%12#0: uint64 = (* 0u 2u)
                let item_index%13#0: uint64 = (extract_uint16 array_data_sans_header%11#0 item_index_index%12#0)
                let item_length%14#0: uint64 = (extract_uint16 array_data_sans_header%11#0 item_index%13#0)
                let item_length_plus_2%15#0: uint64 = (+ item_length%14#0 2u)
                let tmp%16#0: bytes = (extract3 array_data_sans_header%11#0 item_index%13#0 item_length_plus_2%15#0)
                let expr_value_trimmed%17#0: bytes = ((extract 2 0) tmp%16#0)
                let data%18#0: bytes = 0x
                let data%18#0: bytes = (concat data%18#0 0xff)
                let concatenated%19#0: bytes = (concat expr_value_trimmed%17#0 data%18#0)
                let len_%20#0: uint64 = (len concatenated%19#0)
                let len_bytes%21#0: bytes = (itob len_%20#0)
                let len_16_bit%22#0: bytes = ((extract 6 0) len_bytes%21#0)
                let concat_result%23#0: bytes = (concat len_16_bit%22#0 concatenated%19#0)
                let assigned_value%24#0: bytes = concat_result%23#0
                let updated_value%25#0: bytes = puyapy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#0, assigned_value%24#0, 0u)
                let array_of_array#0: bytes = updated_value%25#0
                let tmp%26#0: uint64 = (== array_of_array#0 0x00020004000800020aff000110)
                (assert tmp%26#0)
                let array_length%27#0: uint64 = (extract_uint16 array_of_array#0 0u)
                let index_is_in_bounds%28#0: uint64 = (< 0u array_length%27#0)
                (assert index_is_in_bounds%28#0) // Index access is out of bounds
                let array_data_sans_header%29#0: bytes = ((extract 2 0) array_of_array#0)
                let item_index_index%30#0: uint64 = (* 0u 2u)
                let item_index%31#0: uint64 = (extract_uint16 array_data_sans_header%29#0 item_index_index%30#0)
                let item_length%32#0: uint64 = (extract_uint16 array_data_sans_header%29#0 item_index%31#0)
                let item_length_plus_2%33#0: uint64 = (+ item_length%32#0 2u)
                let tmp%34#0: bytes = (extract3 array_data_sans_header%29#0 item_index%31#0 item_length_plus_2%33#0)
                let assigned_value%35#0: bytes = 0x00
                let array_length%36#0: uint64 = (extract_uint16 tmp%34#0 0u)
                let index_is_in_bounds%37#0: uint64 = (< 1u array_length%36#0)
                (assert index_is_in_bounds%37#0) // Index access is out of bounds
                let updated_target%38#0: bytes = (replace3 tmp%34#0 3u assigned_value%35#0)
                let assigned_value%39#0: bytes = updated_target%38#0
                let updated_value%40#0: bytes = puyapy_lib_arc4.dynamic_array_replace_variable_size(array_of_array#0, assigned_value%39#0, 0u)
                let array_of_array#0: bytes = updated_value%40#0
                let tmp%41#0: uint64 = (== array_of_array#0 0x00020004000800020a00000110)
                (assert tmp%41#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
            block@0: // L101
                let array_data%0#0: bytes = 0x
                let array_data%0#0: bytes = (concat array_data%0#0 0x0a)
                let array_data%0#0: bytes = (concat array_data%0#0 0x09)
                let array_data%1#0: bytes = 0x
                let array_data%1#0: bytes = (concat array_data%1#0 0x40)
                let array_data%1#0: bytes = (concat array_data%1#0 0x80)
                let array_data%2#0: bytes = 0x
                let array_data%2#0: bytes = (concat array_data%2#0 array_data%0#0)
                let array_data%2#0: bytes = (concat array_data%2#0 array_data%1#0)
                let array_of_array#0: bytes = array_data%2#0
                let tmp%3#0: uint64 = (== array_of_array#0 0x0a094080)
                (assert tmp%3#0)
                let array_data%4#0: bytes = 0x
                let array_data%4#0: bytes = (concat array_data%4#0 0xff)
                let array_data%4#0: bytes = (concat array_data%4#0 0xfe)
                let assigned_value%5#0: bytes = array_data%4#0
                let updated_target%6#0: bytes = (replace3 array_of_array#0 0u assigned_value%5#0)
                let array_of_array#0: bytes = updated_target%6#0
                let tmp%7#0: uint64 = (== array_of_array#0 0xfffe4080)
                (assert tmp%7#0)
                let item_index%8#0: uint64 = (* 1u 2u)
                let tmp%9#0: bytes = (extract3 array_of_array#0 item_index%8#0 2u)
                let assigned_value%10#0: bytes = 0x01
                let updated_target%11#0: bytes = (replace3 tmp%9#0 0u assigned_value%10#0)
                let assigned_value%12#0: bytes = updated_target%11#0
                let updated_target%13#0: bytes = (replace3 array_of_array#0 2u assigned_value%12#0)
                let array_of_array#0: bytes = updated_target%13#0
                let tmp%14#0: uint64 = (== array_of_array#0 0xfffe0180)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
            block@0: // L116
                let array_data%0#0: bytes = 0x0002
                let array_data%0#0: bytes = (concat array_data%0#0 0x01)
                let array_data%0#0: bytes = (concat array_data%0#0 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#0
                let assigned_value%1#0: bytes = 0xff
                let array_length%2#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
                let index_is_in_bounds%3#0: uint64 = (< 0u array_length%2#0)
                (assert index_is_in_bounds%3#0) // Index access is out of bounds
                let updated_target%4#0: bytes = (replace3 dynamic_uint8_array#0 2u assigned_value%1#0)
                let dynamic_uint8_array#0: bytes = updated_target%4#0
                let tmp%5#0: uint64 = (== dynamic_uint8_array#0 0x0002ff02)
                (assert tmp%5#0)
                let array_data%6#0: bytes = 0x
                let array_data%6#0: bytes = (concat array_data%6#0 0x01)
                let array_data%6#0: bytes = (concat array_data%6#0 0x02)
                let static_uint8_array#0: bytes = array_data%6#0
                let assigned_value%7#0: bytes = 0xff
                let updated_target%8#0: bytes = (replace3 static_uint8_array#0 1u assigned_value%7#0)
                let static_uint8_array#0: bytes = updated_target%8#0
                let tmp%9#0: uint64 = (== static_uint8_array#0 0x01ff)
                (assert tmp%9#0)
                let tmp%10#0: any = (setbit 0x00 0u 1u)
                let tmp%11#0: any = (setbit 0x00 0u 0u)
                let array_data%12#0: bytes = 0x0002
                let array_data%12#0: bytes = (concat array_data%12#0 tmp%10#0)
                let is_true%13#0: uint64 = (getbit tmp%11#0 0u)
                let array_data%12#0: bytes = (setbit array_data%12#0 17u is_true%13#0)
                let dynamic_bool_array#0: any = array_data%12#0
                let assigned_value%14#0: any = (setbit 0x00 0u 0u)
                let array_length%15#0: uint64 = (extract_uint16 dynamic_bool_array#0 0u)
                let index_is_in_bounds%16#0: uint64 = (< 0u array_length%15#0)
                (assert index_is_in_bounds%16#0) // Index access is out of bounds
                let is_true%17#0: uint64 = (getbit assigned_value%14#0 0u)
                let updated_target%18#0: any = (setbit dynamic_bool_array#0 16u is_true%17#0)
                let dynamic_bool_array#0: any = updated_target%18#0
                let tmp%19#0: uint64 = (== dynamic_bool_array#0 0x000200)
                (assert tmp%19#0)
                let tmp%20#0: any = (setbit 0x00 0u 1u)
                let tmp%21#0: any = (setbit 0x00 0u 1u)
                let array_data%22#0: bytes = 0x
                let array_data%22#0: bytes = (concat array_data%22#0 tmp%20#0)
                let is_true%23#0: uint64 = (getbit tmp%21#0 0u)
                let array_data%22#0: bytes = (setbit array_data%22#0 1u is_true%23#0)
                let static_bool_array#0: any = array_data%22#0
                let assigned_value%24#0: any = (setbit 0x00 0u 0u)
                let is_true%25#0: uint64 = (getbit assigned_value%24#0 0u)
                let updated_target%26#0: any = (setbit static_bool_array#0 1u is_true%25#0)
                let static_bool_array#0: any = updated_target%26#0
                let tmp%27#0: uint64 = (== static_bool_array#0 0x80)
                (assert tmp%27#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
            block@0: // L132
                let tmp%0#0: any = (setbit 0x00 0u 1u)
                let current_tail_offset%1#0: uint64 = 6u
                let encoded_tuple_buffer%2#0: bytes = 0x
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 tmp%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 0x32)
                let value_as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 value_as_uint16%4#0)
                let data_length%5#0: uint64 = (len "\x00\x05Happy")
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%1#0 data_length%5#0)
                let value_as_bytes%6#0: bytes = (itob current_tail_offset%1#0)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 value_as_uint16%7#0)
                let data_length%8#0: uint64 = (len "\x00\x04Days")
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%1#0 data_length%8#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 "\x00\x05Happy")
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%2#0 "\x00\x04Days")
                let test_struct#0: bytes = encoded_tuple_buffer%2#0
                let assigned_value%9#0: any = (setbit 0x00 0u 0u)
                let is_true%10#0: uint64 = (getbit assigned_value%9#0 0u)
                let updated_data%11#0: any = (setbit test_struct#0 0u is_true%10#0)
                let test_struct#0: bytes = updated_data%11#0
                let assigned_value%12#0: bytes = 0x0c
                let updated_data%13#0: bytes = ((replace2 1) test_struct#0 assigned_value%12#0)
                let test_struct#0: bytes = updated_data%13#0
                let tmp%14#0: any = (setbit 0x00 0u 0u)
                let current_tail_offset%15#0: uint64 = 6u
                let encoded_tuple_buffer%16#0: bytes = 0x
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 tmp%14#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 0x0c)
                let value_as_bytes%17#0: bytes = (itob current_tail_offset%15#0)
                let value_as_uint16%18#0: bytes = ((extract 6 2) value_as_bytes%17#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 value_as_uint16%18#0)
                let data_length%19#0: uint64 = (len "\x00\x05Happy")
                let current_tail_offset%15#0: uint64 = (+ current_tail_offset%15#0 data_length%19#0)
                let value_as_bytes%20#0: bytes = (itob current_tail_offset%15#0)
                let value_as_uint16%21#0: bytes = ((extract 6 2) value_as_bytes%20#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 value_as_uint16%21#0)
                let data_length%22#0: uint64 = (len "\x00\x04Days")
                let current_tail_offset%15#0: uint64 = (+ current_tail_offset%15#0 data_length%22#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 "\x00\x05Happy")
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%16#0 "\x00\x04Days")
                let tmp%23#0: uint64 = (== test_struct#0 encoded_tuple_buffer%16#0)
                (assert tmp%23#0)
                let assigned_value%24#0: bytes = "\x00\x05Hmmmm"
                let item_offset%25#0: uint64 = (extract_uint16 test_struct#0 2u)
                let data_up_to_item%26#0: bytes = (extract3 test_struct#0 0u item_offset%25#0)
                let next_item_offset%27#0: uint64 = (extract_uint16 test_struct#0 4u)
                let total_data_length%28#0: uint64 = (len test_struct#0)
                let data_beyond_item%29#0: bytes = (substring3 test_struct#0 next_item_offset%27#0 total_data_length%28#0)
                let updated_data%30#0: bytes = (concat data_up_to_item%26#0 assigned_value%24#0)
                let updated_data%30#0: bytes = (concat updated_data%30#0 data_beyond_item%29#0)
                let new_value_length%31#0: uint64 = (len assigned_value%24#0)
                let tail_cursor%32#0: uint64 = (+ item_offset%25#0 new_value_length%31#0)
                let updated_header_bytes%33#0: bytes = (itob tail_cursor%32#0)
                let updated_header_bytes%33#0: bytes = ((substring 6 8) updated_header_bytes%33#0)
                let updated_data%30#0: bytes = ((replace2 4) updated_data%30#0 updated_header_bytes%33#0)
                let test_struct#0: bytes = updated_data%30#0
                let assigned_value%34#0: bytes = "\x00\x07Oh well"
                let item_offset%35#0: uint64 = (extract_uint16 test_struct#0 4u)
                let data_up_to_item%36#0: bytes = (extract3 test_struct#0 0u item_offset%35#0)
                let updated_data%37#0: bytes = (concat data_up_to_item%36#0 assigned_value%34#0)
                let test_struct#0: bytes = updated_data%37#0
                let tmp%38#0: any = (setbit 0x00 0u 0u)
                let current_tail_offset%39#0: uint64 = 6u
                let encoded_tuple_buffer%40#0: bytes = 0x
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 tmp%38#0)
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 0x0c)
                let value_as_bytes%41#0: bytes = (itob current_tail_offset%39#0)
                let value_as_uint16%42#0: bytes = ((extract 6 2) value_as_bytes%41#0)
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 value_as_uint16%42#0)
                let data_length%43#0: uint64 = (len "\x00\x05Hmmmm")
                let current_tail_offset%39#0: uint64 = (+ current_tail_offset%39#0 data_length%43#0)
                let value_as_bytes%44#0: bytes = (itob current_tail_offset%39#0)
                let value_as_uint16%45#0: bytes = ((extract 6 2) value_as_bytes%44#0)
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 value_as_uint16%45#0)
                let data_length%46#0: uint64 = (len "\x00\x07Oh well")
                let current_tail_offset%39#0: uint64 = (+ current_tail_offset%39#0 data_length%46#0)
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 "\x00\x05Hmmmm")
                let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%40#0 "\x00\x07Oh well")
                let tmp%47#0: uint64 = (== test_struct#0 encoded_tuple_buffer%40#0)
                (assert tmp%47#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
            block@0: // L74
                let array_data%0#0: bytes = 0x0002
                let array_data%0#0: bytes = (concat array_data%0#0 0x01)
                let array_data%0#0: bytes = (concat array_data%0#0 0x02)
                let uint8_array#0: bytes = array_data%0#0
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) uint8_array#0)
                let data%2#0: bytes = 0x
                let data%2#0: bytes = (concat data%2#0 0x03)
                let data%2#0: bytes = (concat data%2#0 0x04)
                let concatenated%3#0: bytes = (concat expr_value_trimmed%1#0 data%2#0)
                let len_%4#0: uint64 = (len concatenated%3#0)
                let len_bytes%5#0: bytes = (itob len_%4#0)
                let len_16_bit%6#0: bytes = ((extract 6 0) len_bytes%5#0)
                let concat_result%7#0: bytes = (concat len_16_bit%6#0 concatenated%3#0)
                let array_concat_tuple#0: bytes = concat_result%7#0
                let array_data%8#0: bytes = 0x0004
                let array_data%8#0: bytes = (concat array_data%8#0 0x01)
                let array_data%8#0: bytes = (concat array_data%8#0 0x02)
                let array_data%8#0: bytes = (concat array_data%8#0 0x03)
                let array_data%8#0: bytes = (concat array_data%8#0 0x04)
                let tmp%9#0: uint64 = (== array_concat_tuple#0 array_data%8#0)
                (assert tmp%9#0)
                let expr_value_trimmed%10#0: bytes = ((extract 2 0) array_concat_tuple#0)
                let data%11#0: bytes = 0x
                let data%11#0: bytes = (concat data%11#0 0x05)
                let concatenated%12#0: bytes = (concat expr_value_trimmed%10#0 data%11#0)
                let len_%13#0: uint64 = (len concatenated%12#0)
                let len_bytes%14#0: bytes = (itob len_%13#0)
                let len_16_bit%15#0: bytes = ((extract 6 0) len_bytes%14#0)
                let concat_result%16#0: bytes = (concat len_16_bit%15#0 concatenated%12#0)
                let array_concat_tuple#0: bytes = concat_result%16#0
                let array_data%17#0: bytes = 0x0005
                let array_data%17#0: bytes = (concat array_data%17#0 0x01)
                let array_data%17#0: bytes = (concat array_data%17#0 0x02)
                let array_data%17#0: bytes = (concat array_data%17#0 0x03)
                let array_data%17#0: bytes = (concat array_data%17#0 0x04)
                let array_data%17#0: bytes = (concat array_data%17#0 0x05)
                let tmp%18#0: uint64 = (== array_concat_tuple#0 array_data%17#0)
                (assert tmp%18#0)
                let array_data%19#0: bytes = 0x0002
                let next_offset%20#0: uint64 = 4u
                let value_as_bytes%21#0: bytes = (itob next_offset%20#0)
                let value_as_uint16%22#0: bytes = ((extract 6 2) value_as_bytes%21#0)
                let array_data%19#0: bytes = (concat array_data%19#0 value_as_uint16%22#0)
                let element_length%23#0: uint64 = (len "\x00\x05Hello")
                let next_offset%20#0: uint64 = (+ next_offset%20#0 element_length%23#0)
                let value_as_bytes%24#0: bytes = (itob next_offset%20#0)
                let value_as_uint16%25#0: bytes = ((extract 6 2) value_as_bytes%24#0)
                let array_data%19#0: bytes = (concat array_data%19#0 value_as_uint16%25#0)
                let element_length%26#0: uint64 = (len "\x00\x05World")
                let next_offset%20#0: uint64 = (+ next_offset%20#0 element_length%26#0)
                let array_data%19#0: bytes = (concat array_data%19#0 "\x00\x05Hello")
                let array_data%19#0: bytes = (concat array_data%19#0 "\x00\x05World")
                let hello_world#0: bytes = array_data%19#0
                let array_data%27#0: bytes = 0x0001
                let next_offset%28#0: uint64 = 2u
                let value_as_bytes%29#0: bytes = (itob next_offset%28#0)
                let value_as_uint16%30#0: bytes = ((extract 6 2) value_as_bytes%29#0)
                let array_data%27#0: bytes = (concat array_data%27#0 value_as_uint16%30#0)
                let element_length%31#0: uint64 = (len "\x00\x05World")
                let next_offset%28#0: uint64 = (+ next_offset%28#0 element_length%31#0)
                let array_data%27#0: bytes = (concat array_data%27#0 "\x00\x05World")
                let array_length%32#0: uint64 = (extract_uint16 array_data%27#0 0u)
                let start_of_data%33#0: uint64 = (* array_length%32#0 2u)
                let start_of_data%33#0: uint64 = (+ start_of_data%33#0 2u)
                let total_length%34#0: uint64 = (len array_data%27#0)
                let data%35#0: bytes = (substring3 array_data%27#0 start_of_data%33#0 total_length%34#0)
                let array_data%36#0: bytes = 0x0001
                let next_offset%37#0: uint64 = 2u
                let value_as_bytes%38#0: bytes = (itob next_offset%37#0)
                let value_as_uint16%39#0: bytes = ((extract 6 2) value_as_bytes%38#0)
                let array_data%36#0: bytes = (concat array_data%36#0 value_as_uint16%39#0)
                let element_length%40#0: uint64 = (len "\x00\x05Hello")
                let next_offset%37#0: uint64 = (+ next_offset%37#0 element_length%40#0)
                let array_data%36#0: bytes = (concat array_data%36#0 "\x00\x05Hello")
                let concat_result%41#0: bytes = puyapy_lib_arc4.dynamic_array_concat_variable_size(array_data%36#0, data%35#0, array_length%32#0)
                let hello_world_concat#0: bytes = concat_result%41#0
                let tmp%42#0: uint64 = (== hello_world#0 hello_world_concat#0)
                (assert tmp%42#0)
                return 
        
        subroutine puyapy_lib_arc4.dynamic_array_pop_bit(source: bytes) -> <bytes, bytes>:
            block@0: // L19
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let popped_location#0: uint64 = (+ length_minus_1#0 16u)
                let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
                let popped#0: any = (setbit "\x00" 0u tmp%2#0)
                let result#0: bytes = (setbit result#0 popped_location#0 0u)
                let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
                let tmp%4#0: uint64 = (/ tmp%3#0 8u)
                let tmp%5#0: uint64 = (+ 2u tmp%4#0)
                let result#0: bytes = (substring3 result#0 0u tmp%5#0)
                return popped#0 result#0
        
        subroutine puyapy_lib_arc4.dynamic_array_pop_fixed_size(source: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
            block@0: // L38
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let source#0: bytes = ((replace2 0) source#0 tmp%1#0)
                let tmp%2#0: uint64 = (len source#0)
                let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
                let popped#0: bytes = (extract3 source#0 item_location#0 fixed_byte_size#0)
                let source#0: bytes = (substring3 source#0 0u item_location#0)
                return popped#0 source#0
        
        subroutine puyapy_lib_arc4.dynamic_array_pop_variable_size(source: bytes) -> <bytes, bytes>:
            block@0: // L56
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
                let data_sans_header#0: bytes = ((extract 2 0) source#0)
                let popped_header#0: uint64 = (extract_uint16 data_sans_header#0 popped_header_offset#0)
                let tmp%0#0: uint64 = (len data_sans_header#0)
                let popped#0: bytes = (substring3 data_sans_header#0 popped_header#0 tmp%0#0)
                let tmp%1#0: bytes = (substring3 data_sans_header#0 0u popped_header_offset#0)
                let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
                let tmp%3#0: bytes = (substring3 data_sans_header#0 tmp%2#0 popped_header#0)
                let data_sans_header#0: bytes = (concat tmp%1#0 tmp%3#0)
                let tmp%4#0: bytes = (itob length_minus_1#0)
                let tmp%5#0: bytes = ((extract 6 0) tmp%4#0)
                let tmp%6#0: bytes = puyapy_lib_arc4.recalculate_array_offsets_static(data_sans_header#0, length_minus_1#0, 0u)
                let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
                return popped#0 updated#0
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_bits(source: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: uint64) -> bytes:
            block@0: // L83
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_array_length#0)
                let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) source#0 new_array_length_b#0)
                let tmp%1#0: uint64 = (+ array_length#0 7u)
                let current_bytes#0: uint64 = (/ tmp%1#0 8u)
                let tmp%2#0: uint64 = (+ new_array_length#0 7u)
                let required_bytes#0: uint64 = (/ tmp%2#0 8u)
                let tmp%3#0: uint64 = (< current_bytes#0 required_bytes#0)
                let result#9: bytes = result#0
                goto tmp%3#0 ? block@1 : block@2
            block@1: // if_body_L104
                let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let result#0: bytes = (concat result#0 tmp%5#0)
                let result#9: bytes = result#0
                goto block@2
            block@2: // after_if_else_L104
                let result#0: bytes = result#9
                let write_offset#0: uint64 = (+ array_length#0 16u)
                goto is_packed#0 ? block@3 : block@4
            block@3: // ternary_true_L108
                let ternary_result%6#0: uint64 = 1u
                goto block@5
            block@4: // ternary_false_L108
                let ternary_result%6#0: uint64 = 8u
                goto block@5
            block@5: // ternary_merge_L108
                (assert ternary_result%6#0) // Step cannot be zero
                let range_item%7#0: uint64 = 0u
                goto block@6
            block@6: // for_header_L108
                let continue_looping%8#0: uint64 = (< range_item%7#0 new_items_count#0)
                goto continue_looping%8#0 ? block@7 : block@10
            block@7: // for_body_L108
                let i#0: uint64 = range_item%7#0
                let tmp%9#0: uint64 = (getbit new_items_bytes#0 i#0)
                let result#0: bytes = (setbit result#0 write_offset#0 tmp%9#0)
                let write_offset#0: uint64 = (+ write_offset#0 1u)
                goto block@8
            block@8: // for_footer_L108
                goto block@9
            block@9: // for_increment_L108
                let range_item%7#0: uint64 = (+ range_item%7#0 ternary_result%6#0)
                goto block@6
            block@10: // after_for_L108
                return result#0
        
        subroutine puyapy_lib_arc4.dynamic_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L116
                let size_b#0: bytes = ((substring 0 2) source#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) source#0)
                let tmp%1#0: bytes = puyapy_lib_arc4.static_array_replace_variable_size(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine puyapy_lib_arc4.static_array_replace_variable_size(source: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L138
                let tmp%0#0: uint64 = (< index#0 array_length#0)
                (assert tmp%0#0) // Index out of bounds
                let tmp%1#0: uint64 = (* index#0 2u)
                let offset_for_index#0: uint64 = (extract_uint16 source#0 tmp%1#0)
                let old_item_length#0: uint64 = (extract_uint16 source#0 offset_for_index#0)
                let tmp%2#0: uint64 = (+ offset_for_index#0 old_item_length#0)
                let old_item_end#0: uint64 = (+ tmp%2#0 2u)
                let tmp%3#0: bytes = (substring3 source#0 0u offset_for_index#0)
                let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
                let tmp%5#0: uint64 = (len source#0)
                let tmp%6#0: bytes = (substring3 source#0 old_item_end#0 tmp%5#0)
                let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
                let tmp%8#0: bytes = puyapy_lib_arc4.recalculate_array_offsets_static(tmp%7#0, array_length#0, index#0)
                return tmp%8#0
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_variable_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L165
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: uint64 = (* array_length#0 2u)
                let header_end#0: uint64 = (+ tmp%0#0 2u)
                let tmp%1#0: bytes = (itob new_length#0)
                let tmp%2#0: bytes = ((extract 6 0) tmp%1#0)
                let tmp%3#0: bytes = (substring3 source#0 2u header_end#0)
                let tmp%4#0: uint64 = (* new_items_count#0 2u)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                let tmp%7#0: uint64 = (len source#0)
                let tmp%8#0: bytes = (substring3 source#0 header_end#0 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
                let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
                let tmp%11#0: bytes = puyapy_lib_arc4.recalculate_array_offsets_static(tmp%10#0, new_length#0, 0u)
                let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
                return tmp%12#0
        
        subroutine puyapy_lib_arc4.recalculate_array_offsets_static(array_data: bytes, length: uint64, start_at_index: uint64) -> bytes:
            block@0: // L194
                let header_cursor#0: uint64 = (* start_at_index#0 2u)
                let tmp%0#0: uint64 = (== start_at_index#0 0u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L208
                let tail_cursor#0: uint64 = (* length#0 2u)
                goto block@3
            block@2: // else_body_L208
                let tail_cursor#0: uint64 = (extract_uint16 array_data#0 header_cursor#0)
                goto block@3
            block@3: // after_if_else_L208
                (assert 1u) // Step cannot be zero
                let range_item%1#0: uint64 = start_at_index#0
                goto block@4
            block@4: // for_header_L213
                let continue_looping%2#0: uint64 = (< range_item%1#0 length#0)
                goto continue_looping%2#0 ? block@5 : block@8
            block@5: // for_body_L213
                let _i#0: uint64 = range_item%1#0
                let tmp%3#0: bytes = (itob tail_cursor#0)
                let tail_cursor_bytes#0: bytes = ((extract 6 0) tmp%3#0)
                let array_data#0: bytes = (replace3 array_data#0 header_cursor#0 tail_cursor_bytes#0)
                let tmp%4#0: uint64 = (extract_uint16 array_data#0 tail_cursor#0)
                let tmp%5#0: uint64 = (+ tmp%4#0 2u)
                let tail_cursor#0: uint64 = (+ tail_cursor#0 tmp%5#0)
                let header_cursor#0: uint64 = (+ header_cursor#0 2u)
                goto block@6
            block@6: // for_footer_L213
                goto block@7
            block@7: // for_increment_L213
                let range_item%1#0: uint64 = (+ range_item%1#0 1u)
                goto block@4
            block@8: // after_for_L213
                return array_data#0
    
    program clear-state:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.clear_state_program() -> uint64:
            block@0: // L70
                return 1u