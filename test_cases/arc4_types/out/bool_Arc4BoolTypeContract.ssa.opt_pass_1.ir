contract test_cases.arc4_types.bool.Arc4BoolTypeContract:
    program approval:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> uint64:
            block@0: // L12
                test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(0x80, 0x00)
                let array_data%14#1: bytes = (concat 0x 0x80)
                let is_true%15#0: uint64 = (getbit 0x80 0u)
                let array_data%14#2: any = (setbit array_data%14#1 1u is_true%15#0)
                let is_true%16#0: uint64 = (getbit 0x80 0u)
                let array_data%14#3: any = (setbit array_data%14#2 2u is_true%16#0)
                let is_true%17#0: uint64 = (getbit 0x80 0u)
                let array_data%14#4: any = (setbit array_data%14#3 3u is_true%17#0)
                let is_true%18#0: uint64 = (getbit 0x80 0u)
                let array_data%14#5: any = (setbit array_data%14#4 4u is_true%18#0)
                let is_true%19#0: uint64 = (getbit 0x80 0u)
                let array_data%14#6: any = (setbit array_data%14#5 5u is_true%19#0)
                let is_true%20#0: uint64 = (getbit 0x80 0u)
                let array_data%14#7: any = (setbit array_data%14#6 6u is_true%20#0)
                let is_true%21#0: uint64 = (getbit 0x80 0u)
                let array_data%14#8: any = (setbit array_data%14#7 7u is_true%21#0)
                let array_data%14#9: bytes = (concat array_data%14#8 0x80)
                let is_true%22#0: uint64 = (getbit 0x80 0u)
                let array_data%14#10: any = (setbit array_data%14#9 9u is_true%22#0)
                let is_true%23#0: uint64 = (getbit 0x80 0u)
                let array_data%14#11: any = (setbit array_data%14#10 10u is_true%23#0)
                let is_true%24#0: uint64 = (getbit 0x80 0u)
                let static_boolean_array#0: any = (setbit array_data%14#11 11u is_true%24#0)
                let tmp%25#0: uint64 = (== static_boolean_array#0 0xfff0)
                (assert tmp%25#0)
                let is_true%27#0: uint64 = (getbit static_boolean_array#0 0u)
                let tmp%28#0: any = (setbit 0x00 0u is_true%27#0)
                let tmp%30#0: uint64 = (== tmp%28#0 0x80)
                (assert tmp%30#0) // Single boolean can be unpacked
                let index_is_in_bounds%33#0: uint64 = (< 11u 12u)
                (assert index_is_in_bounds%33#0) // Index access is out of bounds
                let is_true%35#0: uint64 = (getbit static_boolean_array#0 11u)
                let tmp%36#0: any = (setbit 0x00 0u is_true%35#0)
                let tmp%38#0: uint64 = (== tmp%36#0 0x80)
                (assert tmp%38#0) // Single boolean can be unpacked
                let array_data%42#1: bytes = (concat 0x0003 0x80)
                let is_true%43#0: uint64 = (getbit 0x00 0u)
                let array_data%42#2: any = (setbit array_data%42#1 17u is_true%43#0)
                let is_true%44#0: uint64 = (getbit 0x80 0u)
                let dynamic_boolean_array#0: any = (setbit array_data%42#2 18u is_true%44#0)
                let tmp%45#0: uint64 = (== dynamic_boolean_array#0 0x0003a0)
                (assert tmp%45#0)
                return 1u
        
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> void:
            block@0: // L47
                let tmp%0#0: uint64 = (getbit true#0 0u)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (getbit false#0 0u)
                let tmp%2#0: uint64 = (! tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (getbit true#0 0u)
                let tmp%4#0: any = (setbit 0x00 0u tmp%3#0)
                let tmp%5#0: uint64 = (== true#0 tmp%4#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (getbit false#0 0u)
                let tmp%7#0: any = (setbit 0x00 0u tmp%6#0)
                let tmp%8#0: uint64 = (== false#0 tmp%7#0)
                (assert tmp%8#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.clear_state_program() -> uint64:
            block@0: // L43
                return 1u