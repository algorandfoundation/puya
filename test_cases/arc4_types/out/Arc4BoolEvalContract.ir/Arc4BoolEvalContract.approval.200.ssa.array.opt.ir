main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let aggregate%encoded_bool%0#1: bytes[1] = 0x00
        let aggregate%encoded_bool%1#1: bytes[1] = 0x80
        let tmp%5#0: bool = 1u
        let aggregate%length%0#1: uint64 = 0u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%length_uint16%0#1: bytes = 0x0000
        let aggregate%encoded_value%0#1: bytes = 0x0000
        let aggregate%length%1#1: uint64 = 1u
        let aggregate%as_bytes%1#1: bytes[8] = (itob 1u)
        let aggregate%length_uint16%1#1: bytes = 0x0001
        let aggregate%encoded_value%1#1: bytes = 0x00012e
        let tmp%7#0: bool = 1u
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%11#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%12#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%11#0)
        (assert tmp%12#0)
        let aggregate%len_u16%0#1: bytes = 0x0000
        let aggregate%encoded%0#1: bytes = 0x0000
        let dynamic_arr#0: Encoded(len+uint64[]) = 0x0000
        let aggregate%encoded%2#1: Encoded(uint64) = 0x0000000000000000
        let aggregate%encoded%3#1: Encoded(uint64[]) = 0x0000000000000000
        let concat%0#0: Encoded(len+uint64[]) = 0x00000000000000000000
        let extract_uint16%0#0: uint64 = 0u
        let add%0#0: uint64 = 1u
        let as_u16_bytes%0#0: bytes = 0x0001
        let dynamic_arr#1: Encoded(len+uint64[]) = 0x00010000000000000000
        let tmp%37#0: bool = 1u
        return 1u