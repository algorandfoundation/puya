main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%2#0: bool = 1u
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%0#0)
        (assert tmp%5#0)
        let tmp%6#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%8#0: bool = 1u
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(".")
        let tmp%11#0: bool = (!= tmp%9#0 tmp%6#0)
        (assert tmp%11#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%15#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%16#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%15#0)
        (assert tmp%16#0)
        let dynamic_arr#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%39#0: bool = 1u
        let tmp%40#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000000)
        let dynamic_arr#1: Encoded(len+uint64[]) = array_concat(dynamic_arr#0, tmp%40#0, 1u)
        let tmp%42#0: bool = (!= dynamic_arr#1 dynamic_arr#0)
        (assert tmp%42#0)
        return 1u