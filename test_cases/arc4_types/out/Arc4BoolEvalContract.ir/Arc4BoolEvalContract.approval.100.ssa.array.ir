main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let tmp%5#0: bool = (!= tmp%3#0 tmp%0#0)
        (assert tmp%5#0)
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x2e)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x2e)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%7#0: bool = (!= encoded%2#0 encoded%0#0)
        (assert tmp%7#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%11#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%12#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%11#0)
        (assert tmp%12#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+uint64[]) = (concat aggregate%encoded%0#1 0x)
        let dynamic_arr#0: Encoded(len+uint64[]) = aggregate%encoded%1#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%encoded%3#1: Encoded(uint64[]) = (concat aggregate%encoded%2#1 0x)
        let tmp%36#0: Encoded(uint64[]) = aggregate%encoded%3#1
        let concat%0#0: Encoded(len+uint64[]) = (concat dynamic_arr#0 tmp%36#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let dynamic_arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%37#0: bool = (!= dynamic_arr#1 dynamic_arr#0)
        (assert tmp%37#0)
        return 1u