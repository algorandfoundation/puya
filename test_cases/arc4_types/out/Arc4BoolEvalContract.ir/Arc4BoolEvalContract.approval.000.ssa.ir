main test_cases.arc4_types.bool_eval.Arc4BoolEvalContract.approval_program:
    block@0: // L8
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%7#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(".")
        let tmp%10#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%11#0: bool = (!= tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%13#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%15#0: Encoded(uint8[32]) = (global ZeroAddress)
        let tmp%16#0: bool = (!= reinterpret_Encoded(uint8[32])%0#0 tmp%15#0)
        (assert tmp%16#0)
        let reinterpret_biguint%0#0: biguint = 0x00
        let tmp%17#0: bool = (b== reinterpret_biguint%0#0 0b)
        (assert tmp%17#0)
        let reinterpret_biguint%1#0: biguint = 0x01
        let tmp%18#0: bool = (b!= reinterpret_biguint%1#0 0b)
        (assert tmp%18#0)
        let reinterpret_biguint%2#0: biguint = 0x0000
        let tmp%19#0: bool = (b== reinterpret_biguint%2#0 0b)
        (assert tmp%19#0)
        let reinterpret_biguint%3#0: biguint = 0x0001
        let tmp%20#0: bool = (b!= reinterpret_biguint%3#0 0b)
        (assert tmp%20#0)
        let reinterpret_biguint%4#0: biguint = 0x00000000
        let tmp%21#0: bool = (b== reinterpret_biguint%4#0 0b)
        (assert tmp%21#0)
        let reinterpret_biguint%5#0: biguint = 0x00000001
        let tmp%22#0: bool = (b!= reinterpret_biguint%5#0 0b)
        (assert tmp%22#0)
        let reinterpret_biguint%6#0: biguint = 0x0000000000000000
        let tmp%23#0: bool = (b== reinterpret_biguint%6#0 0b)
        (assert tmp%23#0)
        let reinterpret_biguint%7#0: biguint = 0x0000000000000001
        let tmp%24#0: bool = (b!= reinterpret_biguint%7#0 0b)
        (assert tmp%24#0)
        let reinterpret_biguint%8#0: biguint = 0x00000000000000000000000000000000
        let tmp%25#0: bool = (b== reinterpret_biguint%8#0 0b)
        (assert tmp%25#0)
        let reinterpret_biguint%9#0: biguint = 0x00000000000000000000000000000001
        let tmp%26#0: bool = (b!= reinterpret_biguint%9#0 0b)
        (assert tmp%26#0)
        let reinterpret_biguint%10#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000000
        let tmp%27#0: bool = (b== reinterpret_biguint%10#0 0b)
        (assert tmp%27#0)
        let reinterpret_biguint%11#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%28#0: bool = (b!= reinterpret_biguint%11#0 0b)
        (assert tmp%28#0)
        let reinterpret_biguint%12#0: biguint = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        let tmp%29#0: bool = (b== reinterpret_biguint%12#0 0b)
        (assert tmp%29#0)
        let reinterpret_biguint%13#0: biguint = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        let tmp%30#0: bool = (b!= reinterpret_biguint%13#0 0b)
        (assert tmp%30#0)
        let reinterpret_biguint%14#0: biguint = 0x000000
        let tmp%31#0: bool = (b== reinterpret_biguint%14#0 0b)
        (assert tmp%31#0)
        let reinterpret_biguint%15#0: biguint = 0x000001
        let tmp%32#0: bool = (b!= reinterpret_biguint%15#0 0b)
        (assert tmp%32#0)
        let reinterpret_biguint%16#0: biguint = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        let tmp%33#0: bool = (b== reinterpret_biguint%16#0 0b)
        (assert tmp%33#0)
        let reinterpret_biguint%17#0: biguint = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        let tmp%34#0: bool = (b!= reinterpret_biguint%17#0 0b)
        (assert tmp%34#0)
        let reinterpret_biguint%18#0: biguint = 0x000000000000
        let tmp%35#0: bool = (b== reinterpret_biguint%18#0 0b)
        (assert tmp%35#0)
        let reinterpret_biguint%19#0: biguint = 0x0002540be400
        let tmp%36#0: bool = (b!= reinterpret_biguint%19#0 0b)
        (assert tmp%36#0)
        let reinterpret_biguint%20#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        let tmp%37#0: bool = (b== reinterpret_biguint%20#0 0b)
        (assert tmp%37#0)
        let reinterpret_biguint%21#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100
        let tmp%38#0: bool = (b!= reinterpret_biguint%21#0 0b)
        (assert tmp%38#0)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let dynamic_arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%39#0: bool = (== dynamic_arr#0 encoded_array%1#0)
        (assert tmp%39#0)
        let tmp%40#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000000)
        let concat%0#0: Encoded(len+uint64[]) = (concat dynamic_arr#0 tmp%40#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let dynamic_arr#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let encoded_array%2#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%41#0: bool = (!= dynamic_arr#1 encoded_array%2#0)
        (assert tmp%41#0)
        let tmp%42#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%43#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%44#0: bool = (== tmp%42#0 tmp%43#0)
        (assert tmp%44#0)
        return 1u