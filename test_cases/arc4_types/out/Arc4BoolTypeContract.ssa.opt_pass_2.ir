contract test_cases.arc4_types.bool.Arc4BoolTypeContract:
    program approval:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program() -> uint64:
            block@0: // L12
                test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(0x80, 0x00)
                let is_true%0#0: uint64 = 1u
                let array_data%0#2: any = (setbit 0x80 1u is_true%0#0)
                let is_true%1#0: uint64 = 1u
                let array_data%0#3: any = (setbit array_data%0#2 2u is_true%1#0)
                let is_true%2#0: uint64 = 1u
                let array_data%0#4: any = (setbit array_data%0#3 3u is_true%2#0)
                let is_true%3#0: uint64 = 1u
                let array_data%0#5: any = (setbit array_data%0#4 4u is_true%3#0)
                let is_true%4#0: uint64 = 1u
                let array_data%0#6: any = (setbit array_data%0#5 5u is_true%4#0)
                let is_true%5#0: uint64 = 1u
                let array_data%0#7: any = (setbit array_data%0#6 6u is_true%5#0)
                let is_true%6#0: uint64 = 1u
                let array_data%0#8: any = (setbit array_data%0#7 7u is_true%6#0)
                let array_data%0#9: bytes = (concat array_data%0#8 0x80)
                let is_true%7#0: uint64 = 1u
                let array_data%0#10: any = (setbit array_data%0#9 9u is_true%7#0)
                let is_true%8#0: uint64 = 1u
                let array_data%0#11: any = (setbit array_data%0#10 10u is_true%8#0)
                let is_true%9#0: uint64 = 1u
                let static_boolean_array#0: any = (setbit array_data%0#11 11u is_true%9#0)
                let tmp%14#0: uint64 = (== static_boolean_array#0 0xfff0)
                (assert tmp%14#0)
                let is_true%10#0: uint64 = (getbit static_boolean_array#0 0u)
                let tmp%15#0: any = (setbit 0x00 0u is_true%10#0)
                let tmp%17#0: uint64 = (== tmp%15#0 0x80)
                (assert tmp%17#0) // Single boolean can be unpacked
                let index_is_in_bounds%0#0: uint64 = 1u
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let is_true%11#0: uint64 = (getbit static_boolean_array#0 11u)
                let tmp%19#0: any = (setbit 0x00 0u is_true%11#0)
                let tmp%21#0: uint64 = (== tmp%19#0 0x80)
                (assert tmp%21#0) // Single boolean can be unpacked
                let array_data%1#1: bytes = 0x000380
                let is_true%12#0: uint64 = 0u
                let array_data%1#2: any = (setbit array_data%1#1 17u is_true%12#0)
                let is_true%13#0: uint64 = 1u
                let dynamic_boolean_array#0: any = (setbit array_data%1#2 18u is_true%13#0)
                let tmp%25#0: uint64 = (== dynamic_boolean_array#0 0x0003a0)
                (assert tmp%25#0)
                return 1u
        
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: bytes, false: bytes) -> void:
            block@0: // L46
                let tmp%0#0: uint64 = (getbit true#0 0u)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (getbit false#0 0u)
                let tmp%2#0: uint64 = (! tmp%1#0)
                (assert tmp%2#0)
                let tmp%4#0: any = (setbit 0x00 0u tmp%0#0)
                let tmp%5#0: uint64 = (== true#0 tmp%4#0)
                (assert tmp%5#0)
                let tmp%7#0: any = (setbit 0x00 0u tmp%1#0)
                let tmp%8#0: uint64 = (== false#0 tmp%7#0)
                (assert tmp%8#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.clear_state_program() -> uint64:
            block@0: // L43
                return 1u