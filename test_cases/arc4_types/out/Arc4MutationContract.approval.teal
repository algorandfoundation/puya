#pragma version 10

test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    // arc4_types/mutation.py:35
    // self.dynamic_array_fixed_size()
    callsub dynamic_array_fixed_size
    // arc4_types/mutation.py:36
    // self.dynamic_array_bool()
    callsub dynamic_array_bool
    // arc4_types/mutation.py:37
    // self.dynamic_array_string()
    callsub dynamic_array_string
    // arc4_types/mutation.py:38
    // self.array_of_array_dynamic()
    callsub array_of_array_dynamic
    // arc4_types/mutation.py:39
    // self.array_of_array_static()
    callsub array_of_array_static
    // arc4_types/mutation.py:40
    // self.index_assign()
    callsub index_assign
    // arc4_types/mutation.py:41
    // self.struct_assign()
    callsub struct_assign
    // arc4_types/mutation.py:42
    // self.array_concat()
    callsub array_concat
    // arc4_types/mutation.py:43
    // return True
    int 1
    return


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
dynamic_array_fixed_size:
    // arc4_types/mutation.py:143-144
    // @subroutine
    // def dynamic_array_fixed_size(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:153
    // dynamic_uint8_array.extend((UInt8(4), UInt8(90)))
    byte 0x0008010232010232045a
    // arc4_types/mutation.py:159
    // popped = dynamic_uint8_array.pop()
    int 1
    callsub dynamic_array_pop_fixed_size
    swap
    // arc4_types/mutation.py:160
    // assert popped == UInt8(90)
    byte 0x5a
    b==
    assert
    // arc4_types/mutation.py:162-164
    // assert dynamic_uint8_array == DynamicArray(
    //     UInt8(1), UInt8(2), UInt8(50), UInt8(1), UInt8(2), UInt8(50), UInt8(4)
    // )
    byte 0x000701023201023204
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
dynamic_array_bool:
    // arc4_types/mutation.py:166-167
    // @subroutine
    // def dynamic_array_bool(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:168
    // dynamic_bool_array = DynamicArray[Bool](Bool(True), Bool(False))
    byte 0x000280
    // arc4_types/mutation.py:170
    // dynamic_bool_array.extend((Bool(True), Bool(False)))
    byte 0x8000
    int 2
    int 0
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:171
    // assert dynamic_bool_array.bytes == Bytes.from_hex("0004A0")
    dup
    byte 0x0004a0
    ==
    assert
    // arc4_types/mutation.py:175
    // dynamic_bool_array.extend(dynamic_bool_array)
    dup
    int 0
    extract_uint16
    swap
    dup
    extract 2 0
    uncover 2
    int 1
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:177-186
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    // )
    dup
    byte 0x0008aa
    ==
    assert
    // arc4_types/mutation.py:187
    // dynamic_bool_array.append(Bool(True))
    byte 0x80
    int 1
    int 0
    callsub dynamic_array_concat_bits
    // arc4_types/mutation.py:189-199
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    // )
    dup
    byte 0x0009aa80
    ==
    assert
    // arc4_types/mutation.py:201
    // assert dynamic_bool_array.pop() == Bool(True)
    callsub dynamic_array_pop_bit
    swap
    byte 0x80
    ==
    assert
    // arc4_types/mutation.py:202
    // assert dynamic_bool_array.pop() == Bool(False)
    callsub dynamic_array_pop_bit
    swap
    byte 0x00
    ==
    assert
    // arc4_types/mutation.py:203-211
    // assert dynamic_bool_array == DynamicArray[Bool](
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    //     Bool(False),
    //     Bool(True),
    // )
    byte 0x0007aa
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
dynamic_array_string:
    // arc4_types/mutation.py:213-214
    // @subroutine
    // def dynamic_array_string(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:219
    // dynamic_string_array = DynamicArray(hello, world)
    byte 0x00020004000b000548656c6c6f0005576f726c64
    // arc4_types/mutation.py:223
    // dynamic_string_array.extend((foo, bar))
    byte 0x0003466f6f0003426172
    int 2
    callsub dynamic_array_concat_byte_length_head
    // arc4_types/mutation.py:225-227
    // assert dynamic_string_array.bytes == Bytes(
    //     b"\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar"
    // )
    dup
    byte 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172
    ==
    assert
    // arc4_types/mutation.py:229
    // dynamic_string_array.extend(dynamic_string_array)
    dup
    int 0
    extract_uint16
    swap
    dup
    extract 2 0
    swap
    dig 2
    int 2
    *
    swap
    dig 2
    len
    swap
    cover 3
    substring3
    uncover 2
    callsub dynamic_array_concat_byte_length_head
    // arc4_types/mutation.py:231
    // assert dynamic_string_array == DynamicArray(hello, world, foo, bar, hello, world, foo, bar)
    byte 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
    ==
    assert
    byte 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
    // arc4_types/mutation.py:215
    // hello = String("Hello")
    byte 0x000548656c6c6f
    // arc4_types/mutation.py:233
    // dynamic_string_array[3] = hello
    int 3
    callsub dynamic_array_replace_byte_length_head
    // arc4_types/mutation.py:215
    // hello = String("Hello")
    byte 0x000548656c6c6f
    // arc4_types/mutation.py:234
    // dynamic_string_array[5] = hello
    int 5
    callsub dynamic_array_replace_byte_length_head
    // arc4_types/mutation.py:236-238
    // assert dynamic_string_array == DynamicArray(
    //     hello, world, foo, hello, hello, hello, foo, bar
    // )
    dup
    byte 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
    ==
    assert
    // arc4_types/mutation.py:240
    // assert dynamic_string_array.pop() == bar
    callsub dynamic_array_pop_byte_length_head
    swap
    // arc4_types/mutation.py:218
    // bar = String("Bar")
    byte 0x0003426172
    // arc4_types/mutation.py:240
    // assert dynamic_string_array.pop() == bar
    ==
    assert
    // arc4_types/mutation.py:241
    // assert dynamic_string_array.pop() == foo
    callsub dynamic_array_pop_byte_length_head
    swap
    // arc4_types/mutation.py:217
    // foo = String("Foo")
    byte 0x0003466f6f
    // arc4_types/mutation.py:241
    // assert dynamic_string_array.pop() == foo
    ==
    assert
    // arc4_types/mutation.py:242
    // assert dynamic_string_array == DynamicArray(hello, world, foo, hello, hello, hello)
    byte 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
array_of_array_dynamic:
    // arc4_types/mutation.py:70-71
    // @subroutine
    // def array_of_array_dynamic(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:72
    // array_of_array = DynamicArray[DynamicArray[UInt8]]()
    byte 0x0000
    // arc4_types/mutation.py:74
    // array_of_array.append(DynamicArray[UInt8](UInt8(10)))
    byte 0x00010a
    int 1
    callsub dynamic_array_concat_byte_length_head
    // arc4_types/mutation.py:75
    // assert array_of_array.bytes == Bytes.from_hex("0001000200010A")
    dup
    byte 0x0001000200010a
    ==
    assert
    // arc4_types/mutation.py:76
    // array_of_array.append(DynamicArray[UInt8](UInt8(16)))
    byte 0x000110
    int 1
    callsub dynamic_array_concat_byte_length_head
    // arc4_types/mutation.py:77
    // assert array_of_array.bytes == Bytes.from_hex("00020004000700010A000110")
    dup
    byte 0x00020004000700010a000110
    ==
    assert
    // arc4_types/mutation.py:78
    // array_of_array[0].append(UInt8(255))
    dup
    extract 2 0
    swap
    dup
    int 0
    extract_uint16
    assert // Index access is out of bounds
    dig 1
    int 0
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    int 2
    +
    uncover 3
    cover 2
    extract3
    extract 2 0
    byte 0xff
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    int 0
    callsub dynamic_array_replace_byte_length_head
    // arc4_types/mutation.py:80
    // assert array_of_array.bytes == Bytes.from_hex("00020004000800020AFF000110")
    dup
    byte 0x00020004000800020aff000110
    ==
    assert
    // arc4_types/mutation.py:82
    // array_of_array[0][1] = UInt8(0)
    dup
    extract 2 0
    swap
    dup
    int 0
    extract_uint16
    assert // Index access is out of bounds
    dig 1
    int 0
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    int 2
    +
    uncover 3
    cover 2
    extract3
    dup
    int 0
    extract_uint16
    int 1
    >
    assert // Index access is out of bounds
    byte 0x00
    replace2 3
    int 0
    callsub dynamic_array_replace_byte_length_head
    // arc4_types/mutation.py:83
    // assert array_of_array.bytes == Bytes.from_hex("00020004000800020A00000110")
    byte 0x00020004000800020a00000110
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
array_of_array_static:
    // arc4_types/mutation.py:85-86
    // @subroutine
    // def array_of_array_static(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:87-90
    // array_of_array = StaticArray[StaticArray[UInt8, typing.Literal[2]], typing.Literal[2]](
    //     StaticArray[UInt8, typing.Literal[2]](UInt8(10), UInt8(9)),
    //     StaticArray[UInt8, typing.Literal[2]](UInt8(64), UInt8(128)),
    // )
    byte 0x0a094080
    // arc4_types/mutation.py:94
    // array_of_array[0] = StaticArray[UInt8, typing.Literal[2]](UInt8(255), UInt8(254))
    byte 0xfffe
    replace2 0
    // arc4_types/mutation.py:95
    // assert array_of_array.bytes == Bytes.from_hex("FFFE4080")
    dup
    byte 0xfffe4080
    ==
    assert
    // arc4_types/mutation.py:97
    // array_of_array[1][0] = UInt8(1)
    dup
    extract 2 2 // on error: Index access is out of bounds
    byte 0x01
    replace2 0
    replace2 2
    // arc4_types/mutation.py:98
    // assert array_of_array.bytes == Bytes.from_hex("FFFE0180")
    byte 0xfffe0180
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
index_assign:
    // arc4_types/mutation.py:100-101
    // @subroutine
    // def index_assign(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:102
    // dynamic_uint8_array = DynamicArray[UInt8](UInt8(1), UInt8(2))
    byte 0x00020102
    // arc4_types/mutation.py:103
    // dynamic_uint8_array[0] = UInt8(255)
    byte 0xff
    replace2 2
    // arc4_types/mutation.py:104
    // assert dynamic_uint8_array.bytes == Bytes.from_hex("0002ff02")
    byte 0x0002ff02
    ==
    assert
    // arc4_types/mutation.py:105
    // static_uint8_array = StaticArray(UInt8(1), UInt8(2))
    byte 0x0102
    // arc4_types/mutation.py:106
    // static_uint8_array[1] = UInt8(255)
    byte 0xff
    replace2 1
    // arc4_types/mutation.py:107
    // assert static_uint8_array.bytes == Bytes.from_hex("01ff")
    byte 0x01ff
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
struct_assign:
    // arc4_types/mutation.py:116-117
    // @subroutine
    // def struct_assign(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:125
    // test_struct.b_val = Bool(False)
    byte 0x00320006000d00054861707079000444617973
    // arc4_types/mutation.py:126
    // test_struct.u_val = UInt8(12)
    byte 0x0c
    replace2 1
    // arc4_types/mutation.py:127-132
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Happy"),
    //     s_val_2=String("Days"),
    // )
    dup
    byte 0x000c0006000d00054861707079000444617973
    ==
    assert
    // arc4_types/mutation.py:133
    // test_struct.s_val_1 = String("Hmmmm")
    dup
    int 2
    extract_uint16
    dig 1
    int 0
    dig 2
    extract3
    swap
    dig 2
    int 4
    extract_uint16
    swap
    dig 3
    len
    swap
    uncover 4
    dig 3
    uncover 3
    substring3
    uncover 3
    byte 0x0005486d6d6d6d
    concat
    swap
    concat
    cover 2
    -
    swap
    dup
    int 4
    extract_uint16
    int 7
    +
    uncover 2
    -
    itob
    extract 6 2
    replace2 4
    // arc4_types/mutation.py:134
    // test_struct.s_val_2 = String("Oh well")
    dup
    int 4
    extract_uint16
    int 0
    swap
    extract3
    byte 0x00074f682077656c6c
    concat
    // arc4_types/mutation.py:136-141
    // assert test_struct == TestStruct(
    //     b_val=Bool(False),
    //     u_val=UInt8(12),
    //     s_val_1=String("Hmmmm"),
    //     s_val_2=String("Oh well"),
    // )
    byte 0x000c0006000d0005486d6d6d6d00074f682077656c6c
    ==
    assert
    retsub


// test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
array_concat:
    // arc4_types/mutation.py:58-59
    // @subroutine
    // def array_concat(self) -> None:
    proto 0 0
    // arc4_types/mutation.py:67
    // hello_world_concat = DynamicArray(String("Hello")) + DynamicArray(String("World"))
    byte 0x00010002000548656c6c6f
    byte 0x0005576f726c64
    int 1
    callsub dynamic_array_concat_byte_length_head
    // arc4_types/mutation.py:66
    // hello_world = DynamicArray(String("Hello"), String("World"))
    byte 0x00020004000b000548656c6c6f0005576f726c64
    // arc4_types/mutation.py:68
    // assert hello_world == hello_world_concat
    ==
    assert
    retsub


// algopy_lib_arc4.dynamic_array_pop_bit(array: bytes) -> bytes, bytes:
dynamic_array_pop_bit:
    // <algopy>/algopy_lib_arc4.py:25-26
    proto 1 2
    // <algopy>/algopy_lib_arc4.py:34
    frame_dig -1
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:35
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:36
    dup
    itob
    extract 6 0
    frame_dig -1
    swap
    replace2 0
    // <algopy>/algopy_lib_arc4.py:37
    dig 1
    int 16
    +
    // <algopy>/algopy_lib_arc4.py:38
    dup2
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 3
    // <algopy>/algopy_lib_arc4.py:39
    int 0
    setbit
    // <algopy>/algopy_lib_arc4.py:40
    swap
    int 7
    +
    int 8
    /
    int 2
    +
    int 0
    swap
    substring3
    // <algopy>/algopy_lib_arc4.py:41
    retsub


// algopy_lib_arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    // <algopy>/algopy_lib_arc4.py:44-45
    proto 2 2
    // <algopy>/algopy_lib_arc4.py:53
    frame_dig -2
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:54
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:55
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    // <algopy>/algopy_lib_arc4.py:56
    dup
    len
    frame_dig -1
    -
    // <algopy>/algopy_lib_arc4.py:57
    dup2
    frame_dig -1
    extract3
    cover 2
    // <algopy>/algopy_lib_arc4.py:58
    int 0
    swap
    substring3
    // <algopy>/algopy_lib_arc4.py:59
    retsub


// algopy_lib_arc4.dynamic_array_pop_byte_length_head(array: bytes) -> bytes, bytes:
dynamic_array_pop_byte_length_head:
    // <algopy>/algopy_lib_arc4.py:62-63
    proto 1 2
    // <algopy>/algopy_lib_arc4.py:72
    frame_dig -1
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:73
    int 1
    -
    // <algopy>/algopy_lib_arc4.py:74
    dup
    int 2
    *
    // <algopy>/algopy_lib_arc4.py:75
    frame_dig -1
    extract 2 0
    // <algopy>/algopy_lib_arc4.py:76
    dup
    dig 2
    extract_uint16
    swap
    // <algopy>/algopy_lib_arc4.py:78
    dup
    len
    swap
    dup
    dig 3
    uncover 3
    substring3
    cover 3
    // <algopy>/algopy_lib_arc4.py:79
    dup
    int 0
    dig 4
    substring3
    cover 2
    // <algopy>/algopy_lib_arc4.py:80
    uncover 3
    int 2
    +
    // <algopy>/algopy_lib_arc4.py:79-81
    uncover 2
    substring3
    concat
    // <algopy>/algopy_lib_arc4.py:84
    dig 2
    itob
    // <algopy>/algopy_lib_arc4.py:83-85
    extract 6 2
    // <algopy>/algopy_lib_arc4.py:85-87
    swap
    uncover 3
    // <algopy>/algopy_lib_arc4.py:86
    int 0
    // <algopy>/algopy_lib_arc4.py:85-87
    callsub recalculate_head_for_elements_with_byte_length_head
    // <algopy>/algopy_lib_arc4.py:83-87
    concat
    // <algopy>/algopy_lib_arc4.py:89
    retsub


// algopy_lib_arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: uint64) -> bytes:
dynamic_array_concat_bits:
    // <algopy>/algopy_lib_arc4.py:124-127
    proto 4 1
    byte ""
    dupn 2
    // <algopy>/algopy_lib_arc4.py:140
    frame_dig -4
    int 0
    extract_uint16
    dupn 2
    // <algopy>/algopy_lib_arc4.py:141
    frame_dig -2
    +
    // <algopy>/algopy_lib_arc4.py:142
    dup
    itob
    extract 6 0
    // <algopy>/algopy_lib_arc4.py:143
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    // <algopy>/algopy_lib_arc4.py:144
    int 7
    +
    int 8
    /
    dup
    cover 3
    // <algopy>/algopy_lib_arc4.py:145
    swap
    int 7
    +
    int 8
    /
    dup
    cover 3
    // <algopy>/algopy_lib_arc4.py:146
    <
    bz dynamic_array_concat_bits_after_if_else@2
    // <algopy>/algopy_lib_arc4.py:147
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    // <algopy>/algopy_lib_arc4.py:149
    frame_dig 3
    int 16
    +
    frame_bury 2
    // <algopy>/algopy_lib_arc4.py:150
    frame_dig -1
    bz dynamic_array_concat_bits_ternary_false@4
    int 1
    frame_bury 1
    b dynamic_array_concat_bits_ternary_merge@5

dynamic_array_concat_bits_ternary_false@4:
    // <algopy>/algopy_lib_arc4.py:150
    int 8
    frame_bury 1

dynamic_array_concat_bits_ternary_merge@5:
    // <algopy>/algopy_lib_arc4.py:150
    frame_dig 1
    assert // Step cannot be zero
    int 0
    frame_bury 0

dynamic_array_concat_bits_for_header@6:
    // <algopy>/algopy_lib_arc4.py:150
    frame_dig 0
    frame_dig -2
    <
    bz dynamic_array_concat_bits_after_for@9
    // <algopy>/algopy_lib_arc4.py:151
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    // <algopy>/algopy_lib_arc4.py:152
    int 1
    +
    frame_bury 2
    // <algopy>/algopy_lib_arc4.py:150
    frame_dig 1
    +
    frame_bury 0
    b dynamic_array_concat_bits_for_header@6

dynamic_array_concat_bits_after_for@9:
    // <algopy>/algopy_lib_arc4.py:154
    frame_dig 4
    frame_bury 0
    retsub


// algopy_lib_arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    // <algopy>/algopy_lib_arc4.py:157-160
    proto 3 1
    // <algopy>/algopy_lib_arc4.py:171
    frame_dig -3
    int 0
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:172
    dup
    frame_dig -1
    +
    swap
    // <algopy>/algopy_lib_arc4.py:173
    int 2
    *
    int 2
    +
    swap
    // <algopy>/algopy_lib_arc4.py:176
    dup
    itob
    // <algopy>/algopy_lib_arc4.py:175-177
    extract 6 2
    swap
    // <algopy>/algopy_lib_arc4.py:179
    frame_dig -3
    int 2
    dig 4
    substring3
    // <algopy>/algopy_lib_arc4.py:180
    frame_dig -1
    int 2
    *
    bzero
    // <algopy>/algopy_lib_arc4.py:179-180
    concat
    // <algopy>/algopy_lib_arc4.py:181
    frame_dig -3
    len
    frame_dig -3
    uncover 5
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:179-181
    concat
    // <algopy>/algopy_lib_arc4.py:179-182
    frame_dig -2
    concat
    // <algopy>/algopy_lib_arc4.py:177-186
    swap
    // <algopy>/algopy_lib_arc4.py:185
    int 0
    // <algopy>/algopy_lib_arc4.py:177-186
    callsub recalculate_head_for_elements_with_byte_length_head
    // <algopy>/algopy_lib_arc4.py:175-186
    concat
    retsub


// algopy_lib_arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_byte_length_head:
    // <algopy>/algopy_lib_arc4.py:217-218
    proto 3 1
    // <algopy>/algopy_lib_arc4.py:230
    frame_dig -3
    substring 0 2
    // <algopy>/algopy_lib_arc4.py:231
    dup
    btoi
    // <algopy>/algopy_lib_arc4.py:233
    frame_dig -3
    extract 2 0
    // <algopy>/algopy_lib_arc4.py:232-237
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_byte_length_head
    concat
    retsub


// algopy_lib_arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_byte_length_head:
    // <algopy>/algopy_lib_arc4.py:278-281
    proto 4 1
    // <algopy>/algopy_lib_arc4.py:293
    frame_dig -2
    frame_dig -1
    <
    assert // Index out of bounds
    // <algopy>/algopy_lib_arc4.py:294
    frame_dig -2
    int 2
    *
    frame_dig -4
    swap
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:295
    frame_dig -4
    dig 1
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:296
    dig 1
    +
    int 2
    +
    swap
    // <algopy>/algopy_lib_arc4.py:298
    frame_dig -4
    int 0
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:298-299
    frame_dig -3
    concat
    // <algopy>/algopy_lib_arc4.py:300
    frame_dig -4
    len
    frame_dig -4
    uncover 3
    uncover 2
    substring3
    // <algopy>/algopy_lib_arc4.py:298-300
    concat
    // <algopy>/algopy_lib_arc4.py:297-303
    frame_dig -1
    frame_dig -2
    callsub recalculate_head_for_elements_with_byte_length_head
    retsub


// algopy_lib_arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    // <algopy>/algopy_lib_arc4.py:306-309
    proto 3 1
    // <algopy>/algopy_lib_arc4.py:322
    frame_dig -2
    int 2
    *
    dup
    // <algopy>/algopy_lib_arc4.py:323
    frame_dig -1
    int 2
    *
    frame_dig -3
    dig 1
    extract_uint16
    // <algopy>/algopy_lib_arc4.py:321-325
    uncover 2
    swap
    frame_dig -1
    select
    swap

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    // <algopy>/algopy_lib_arc4.py:327
    frame_dig 2
    frame_dig 0
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4
    // <algopy>/algopy_lib_arc4.py:328
    frame_dig 1
    dup
    itob
    extract 6 2
    // <algopy>/algopy_lib_arc4.py:329
    frame_dig -3
    frame_dig 2
    dup
    cover 4
    uncover 2
    replace3
    dup
    frame_bury -3
    // <algopy>/algopy_lib_arc4.py:330
    dig 1
    extract_uint16
    int 2
    +
    +
    frame_bury 1
    // <algopy>/algopy_lib_arc4.py:327
    int 2
    +
    frame_bury 2
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    // <algopy>/algopy_lib_arc4.py:332
    frame_dig -3
    frame_bury 0
    retsub
