main test_cases.arc4_types.address.Arc4AddressContract.approval_program:
    block@0: // L7
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let address#0: Encoded(uint8[32]) = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txn Sender)
        let tmp%0#0: bool = (== address#0 reinterpret_Encoded(uint8[32])%1#0)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== 32u 32u)
        (assert tmp%1#0)
        let reinterpret_bytes[32]%0#0: bytes[32] = address#0
        let tmp%2#0: bytes[32] = (txn Sender)
        let tmp%3#0: bool = (== reinterpret_bytes[32]%0#0 tmp%2#0)
        (assert tmp%3#0)
        let awst_tmp%0#0: bytes[32] = (global ZeroAddress)
        let reinterpret_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = awst_tmp%0#0
        let tmp%4#0: uint64 = (len awst_tmp%0#0)
        let tmp%5#0: bool = (== 32u tmp%4#0)
        (assert tmp%5#0) // Address length is 32 bytes
        let zero_address#0: Encoded(uint8[32]) = reinterpret_Encoded(uint8[32])%2#0
        let tmp%6#0: bytes[32] = (global ZeroAddress)
        let tmp%7#0: bool = (== zero_address#0 tmp%6#0)
        (assert tmp%7#0)
        let some_address#0: Encoded(uint8[32]) = addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
        let tmp%8#0: bool = (== some_address#0 addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA)
        (assert tmp%8#0)
        let address_copy#0: Encoded(uint8[32]) = some_address#0
        let tmp%9#0: bool = (== some_address#0 address_copy#0)
        (assert tmp%9#0)
        return 1u