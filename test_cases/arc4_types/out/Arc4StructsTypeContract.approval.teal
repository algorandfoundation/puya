#pragma version 10

test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    byte ""
    // arc4_types/structs.py:27
    // coord_1 = Vector(x=Decimal("35.382882839"), y=Decimal("150.382884930"))
    byte 0x000000083cfbf217000000230384b842
    // arc4_types/structs.py:28
    // coord_2 = Vector(x=Decimal("35.382882839"), y=Decimal("150.382884930"))
    byte 0x000000083cfbf217000000230384b842
    // arc4_types/structs.py:29
    // coord_3 = add(coord_1.copy(), coord_2.copy())
    callsub add
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    dup
    extract 0 8
    swap
    extract 8 8
    swap
    int 0
    swap
    b main_for_body@3

main_for_header_1@2:
    dig 2
    bury 1
    dig 1

main_for_body@3:
    // arc4_types/structs.py:31
    // log(val.bytes)
    log
    dupn 2
    int 1
    +
    bury 4
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    bz main_for_header_1@2
    // arc4_types/structs.py:33
    // flags = Flags(a=arc4.Bool(True), b=arc4.Bool(False), c=arc4.Bool(True), d=arc4.Bool(False))
    byte 0xa0
    // arc4_types/structs.py:34
    // check(flags.copy())
    callsub check
    // arc4_types/structs.py:33
    // flags = Flags(a=arc4.Bool(True), b=arc4.Bool(False), c=arc4.Bool(True), d=arc4.Bool(False))
    byte 0xa0
    // arc4_types/structs.py:35
    // log(flags.bytes)
    log
    // arc4_types/structs.py:37
    // nested_decode(VectorFlags(coord_1, flags))
    byte 0x000000083cfbf217000000230384b842a0
    callsub nested_decode
    // arc4_types/structs.py:39
    // return True
    int 1
    return


// test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> bytes:
add:
    // arc4_types/structs.py:45-46
    // @subroutine
    // def add(v1: Vector, v2: Vector) -> Vector:
    proto 2 1
    // arc4_types/structs.py:48
    // x=Decimal.encode(v1.x.decode() + v2.x.decode()),
    frame_dig -2
    extract 0 8
    btoi
    frame_dig -1
    extract 0 8
    btoi
    +
    itob
    // arc4_types/structs.py:49
    // y=Decimal.encode(v1.y.decode() + v2.y.decode()),
    frame_dig -2
    extract 8 8
    btoi
    frame_dig -1
    extract 8 8
    btoi
    +
    itob
    // arc4_types/structs.py:47-50
    // return Vector(
    //     x=Decimal.encode(v1.x.decode() + v2.x.decode()),
    //     y=Decimal.encode(v1.y.decode() + v2.y.decode()),
    // )
    concat
    retsub


// test_cases.arc4_types.structs.check(flags: bytes) -> void:
check:
    // arc4_types/structs.py:53-54
    // @subroutine
    // def check(flags: Flags) -> None:
    proto 1 0
    // arc4_types/structs.py:55
    // assert flags.a.decode()
    frame_dig -1
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    int 0
    getbit
    assert
    // arc4_types/structs.py:56
    // assert not flags.b.decode()
    frame_dig -1
    int 1
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    int 0
    getbit
    !
    assert
    // arc4_types/structs.py:57
    // assert flags.c.decode()
    frame_dig -1
    int 2
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    int 0
    getbit
    assert
    // arc4_types/structs.py:58
    // assert not flags.d.decode()
    frame_dig -1
    int 3
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    int 0
    getbit
    !
    assert
    retsub


// test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> void:
nested_decode:
    // arc4_types/structs.py:61-62
    // @subroutine
    // def nested_decode(vector_flags: VectorFlags) -> None:
    proto 1 0
    // arc4_types/structs.py:63
    // assert vector_flags.vector.x.decode() == 35382882839
    frame_dig -1
    extract 0 16
    extract 0 8
    btoi
    int 35382882839
    ==
    assert
    // arc4_types/structs.py:64
    // assert vector_flags.flags.c.decode()
    frame_dig -1
    extract 16 1
    int 2
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    int 0
    getbit
    assert
    retsub
