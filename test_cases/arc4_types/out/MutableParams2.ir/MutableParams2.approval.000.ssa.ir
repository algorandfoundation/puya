main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array_rebinding()void" => block@2, * => block@3}
    block@2: // test_array_rebinding_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding()
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding() -> void:
    block@0: // L5
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x00)
        let a#0: Encoded(len+uint8[]) = encoded_array%0#0
        let maybe_modify_array%0#0: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 1u)
        let a#1: Encoded(len+uint8[]) = maybe_modify_array%0#0
        let encoded_array%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x00, 0x01)
        let tmp%0#0: bool = (== a#1 encoded_array%1#0)
        (assert tmp%0#0)
        let encoded_array%2#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01)
        let a#2: Encoded(len+uint8[]) = encoded_array%2#0
        let maybe_modify_array%1#0: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#2, 0u)
        let a#3: Encoded(len+uint8[]) = maybe_modify_array%1#0
        let encoded_array%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x2a, 0x04)
        let tmp%1#0: bool = (== a#3 encoded_array%3#0)
        (assert tmp%1#0)
        return 

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: Encoded(len+uint8[]), assign_local: bool) -> Encoded(len+uint8[]):
    block@0: // L15
        let a%is_original#0: bool = 1u
        let a%out#0: Encoded(len+uint8[]) = a#0
        goto assign_local#0 ? block@1 : block@10
    block@1: // if_body_L18
        let tmp%0#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x01)
        let tmp%1#0: Encoded(len+uint8[]) = array_concat(a#0, tmp%0#0, 1u)
        let a#1: Encoded(len+uint8[]) = tmp%1#0
        goto a%is_original#0 ? block@2 : block@3
    block@2: // if_body_L1
        let a%out#1: Encoded(len+uint8[]) = a#1
        goto block@3
    block@3: // after_if_else_L1
        let a%out#12: Encoded(len+uint8[]) = φ(a%out#0 <- block@1, a%out#1 <- block@2)
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x03)
        let a%is_original#1: bool = 0u
        let a#2: Encoded(len+uint8[]) = encoded_array%0#0
        goto a%is_original#1 ? block@4 : block@5
    block@4: // if_body_L1
        let a%out#2: Encoded(len+uint8[]) = a#2
        goto block@5
    block@5: // after_if_else_L1
        let a%out#11: Encoded(len+uint8[]) = φ(a%out#12 <- block@3, a%out#2 <- block@4)
        let tmp%2#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x04)
        let tmp%3#0: Encoded(len+uint8[]) = array_concat(a#2, tmp%2#0, 1u)
        let a#4: Encoded(len+uint8[]) = tmp%3#0
        goto a%is_original#1 ? block@6 : block@7
    block@6: // if_body_L1
        let a%out#3: Encoded(len+uint8[]) = a#4
        goto block@7
    block@7: // after_if_else_L1
        let a%out#10: Encoded(len+uint8[]) = φ(a%out#11 <- block@5, a%out#3 <- block@6)
        let encoded_array%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x04)
        let a%is_original#3: bool = 0u
        let a#5: Encoded(len+uint8[]) = encoded_array%1#0
        goto a%is_original#3 ? block@8 : block@9
    block@8: // if_body_L1
        let a%out#4: Encoded(len+uint8[]) = a#5
        goto block@9
    block@9: // after_if_else_L1
        let a%out#9: Encoded(len+uint8[]) = φ(a%out#10 <- block@7, a%out#4 <- block@8)
        goto block@13
    block@10: // else_body_L23
        let tmp%4#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x2a)
        let tmp%5#0: Encoded(len+uint8[]) = array_concat(a#0, tmp%4#0, 1u)
        let a#6: Encoded(len+uint8[]) = tmp%5#0
        goto a%is_original#0 ? block@11 : block@12
    block@11: // if_body_L1
        let a%out#5: Encoded(len+uint8[]) = a#6
        goto block@12
    block@12: // after_if_else_L1
        let a%out#13: Encoded(len+uint8[]) = φ(a%out#0 <- block@10, a%out#5 <- block@11)
        goto block@13
    block@13: // after_if_else_L17
        let a#7: Encoded(len+uint8[]) = φ(a#5 <- block@9, a#6 <- block@12)
        let a%is_original#4: bool = φ(a%is_original#3 <- block@9, a%is_original#0 <- block@12)
        let a%out#8: Encoded(len+uint8[]) = φ(a%out#9 <- block@9, a%out#13 <- block@12)
        let tmp%6#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x04)
        let tmp%7#0: Encoded(len+uint8[]) = array_concat(a#7, tmp%6#0, 1u)
        let a#10: Encoded(len+uint8[]) = tmp%7#0
        goto a%is_original#4 ? block@14 : block@15
    block@14: // if_body_L1
        let a%out#6: Encoded(len+uint8[]) = a#10
        goto block@15
    block@15: // after_if_else_L1
        let a%out#7: Encoded(len+uint8[]) = φ(a%out#8 <- block@13, a%out#6 <- block@14)
        return a%out#7

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create() -> void:
    block@0: // L1
        return 