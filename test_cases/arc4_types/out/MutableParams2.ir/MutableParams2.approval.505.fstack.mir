// Op                                                                            Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // arc4_types/mutable_params2.py:4
        // class MutableParams2(arc4.ARC4Contract):
        txn NumAppArgs                                                           tmp%0#1
        bz main___algopy_default_create@5 ; b main_abi_routing@2

    main_abi_routing@2:
        // arc4_types/mutable_params2.py:4
        // class MutableParams2(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                   tmp%2#0
        method test_array_rebinding()void                                        tmp%2#0,Method(test_array_rebinding()void)
        l-load tmp%2#0 1                                                         Method(test_array_rebinding()void),tmp%2#0
        match main_test_array_rebinding_route@3 ; b main_switch_case_next@4

    main_test_array_rebinding_route@3:
        // arc4_types/mutable_params2.py:5
        // @arc4.abimethod()
        txn OnCompletion                                                         tmp%3#0
        !                                                                        tmp%4#0
        txn ApplicationID                                                        tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                         tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                         tmp%4#0,tmp%5#0
        &&                                                                       tmp%7#0
        assert // OnCompletion must be NoOp && can only call when not creating
        callsub test_array_rebinding
        b main_switch_case_next@4

    main_switch_case_next@4:
        // arc4_types/mutable_params2.py:4
        // class MutableParams2(arc4.ARC4Contract):
        err

    main___algopy_default_create@5:
        txn OnCompletion                                                         tmp%8#0
        !                                                                        tmp%9#0
        txn ApplicationID                                                        tmp%9#0,tmp%10#0
        !                                                                        tmp%9#0,tmp%11#0
        l-load tmp%9#0 1                                                         tmp%11#0,tmp%9#0
        l-load tmp%11#0 1                                                        tmp%9#0,tmp%11#0
        &&                                                                       tmp%12#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                    1
        return


// test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]() -> void:
subroutine test_array_rebinding:
    test_array_rebinding_block@0:
        // arc4_types/mutable_params2.py:7
        // a = arc4.DynamicBytes(0)
        byte 0x000100                                                            0x000100
        // arc4_types/mutable_params2.py:8
        // self.maybe_modify_array(a, assign_local=True)
        int 1                                                                    0x000100,1
        callsub maybe_modify_array                                               a#1
        // arc4_types/mutable_params2.py:9
        // assert a == arc4.DynamicBytes(0, 1)
        byte 0x00020001                                                          a#1,0x00020001
        ==                                                                       tmp%0#0
        assert
        // arc4_types/mutable_params2.py:11
        // a = arc4.DynamicBytes(1)
        byte 0x000101                                                            0x000101
        // arc4_types/mutable_params2.py:12
        // self.maybe_modify_array(a, assign_local=False)
        int 0                                                                    0x000101,0
        callsub maybe_modify_array                                               a#1
        // arc4_types/mutable_params2.py:13
        // assert a == arc4.DynamicBytes(1, 42, 4)
        byte 0x0003012a04                                                        a#1,0x0003012a04
        ==                                                                       tmp%1#0
        assert
        // arc4_types/mutable_params2.py:5
        // @arc4.abimethod()
        int 1                                                                    1
        return


// test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: bytes, assign_local: uint64) -> bytes:
subroutine maybe_modify_array:
    declare bytes a%out#7
    maybe_modify_array_block@0:                                                  (洧도) a#0,assign_local#0 | (洧뎽) a%out#7 |
        int 1                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7 | 1
        f-store a%is_original#0                                                  (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        // arc4_types/mutable_params2.py:17
        // if assign_local:
        p-load assign_local#0                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | assign_local#0 (copy)
        bz maybe_modify_array_else_body@10 ; b maybe_modify_array_if_body@1      (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |

    maybe_modify_array_if_body@1:                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        // arc4_types/mutable_params2.py:18
        // a.append(arc4.Byte(1))  # v1: modify out
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy)
        byte 0x01                                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy),0x01
        concat // on error: max array length exceeded                            (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,a#0 (copy)
        int 0                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,a#0 (copy),0
        extract_uint16                                                           (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,extract_uint16%0#0
        int 1                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,extract_uint16%0#0,1
        +                                                                        (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,add%0#0
        itob                                                                     (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,as_bytes%0#0
        extract 6 2                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                      (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%0#0,as_u16_bytes%0#0
        replace2 0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0
        p-store a#0                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        // arc4_types/mutable_params2.py:21
        // a = arc4.DynamicBytes(1, 2, 4)  # v4: local only
        byte 0x0003010204                                                        (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5
        int 0                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5,0
        f-store a%is_original#0                                                  (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5,a#0 (copy)
        f-store a%out#7                                                          (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5
        l-load a#5 0                                                             (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#5
        p-store a#0                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        b maybe_modify_array_after_if_else@13                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |

    maybe_modify_array_else_body@10:                                             (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        // arc4_types/mutable_params2.py:23
        // a.append(arc4.Byte(42))  # v5: modify out
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy)
        byte 0x2a                                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy),0x2a
        concat // on error: max array length exceeded                            (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,a#0 (copy)
        int 0                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,a#0 (copy),0
        extract_uint16                                                           (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,extract_uint16%2#0
        int 1                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,extract_uint16%2#0,1
        +                                                                        (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,add%2#0
        itob                                                                     (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,as_bytes%2#0
        extract 6 2                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,as_u16_bytes%2#0
        l-load concat%2#0 1                                                      (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | as_u16_bytes%2#0,concat%2#0
        l-load as_u16_bytes%2#0 1                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%2#0,as_u16_bytes%2#0
        replace2 0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0
        p-store a#0                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy)
        f-store a%out#7                                                          (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        b maybe_modify_array_after_if_else@13                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |

    maybe_modify_array_after_if_else@13:                                         (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        // arc4_types/mutable_params2.py:25
        // a.append(arc4.Byte(4))  # v6: modify out IF not b ELSE local only
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy)
        byte 0x04                                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy),0x04
        concat // on error: max array length exceeded                            (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,a#0 (copy)
        int 0                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,a#0 (copy),0
        extract_uint16                                                           (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,extract_uint16%3#0
        int 1                                                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,extract_uint16%3#0,1
        +                                                                        (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,add%3#0
        itob                                                                     (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,as_bytes%3#0
        extract 6 2                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,as_u16_bytes%3#0
        l-load concat%3#0 1                                                      (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | as_u16_bytes%3#0,concat%3#0
        l-load as_u16_bytes%3#0 1                                                (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | concat%3#0,as_u16_bytes%3#0
        replace2 0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0
        p-store a#0                                                              (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        f-load a%is_original#0                                                   (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a%is_original#0
        bz maybe_modify_array_after_if_else@15 ; b maybe_modify_array_if_body@14 (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |

    maybe_modify_array_if_body@14:                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        p-load a#0                                                               (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a#0 (copy)
        f-store a%out#7                                                          (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        b maybe_modify_array_after_if_else@15                                    (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |

    maybe_modify_array_after_if_else@15:                                         (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 |
        f-load a%out#7                                                           (洧도) a#0,assign_local#0 | (洧뎽) a%out#7,a%is_original#0 | a%out#7
        retsub                                                                   a%out#7


