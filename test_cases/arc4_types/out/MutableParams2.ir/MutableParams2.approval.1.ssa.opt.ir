main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array_rebinding()void" => block@3, * => block@10}
    block@3: // test_array_rebinding_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding()
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create()
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#1 <- block@7, test_cases.arc4_types.mutable_params2.MutableParams2.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding() -> void:
    block@0: // L5
        let result%0#0: bytes = 0x00
        let a#0: Encoded(len+uint8[]) = 0x000100
        let a#1: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(0x000100, 1u)
        let result%1#0: bytes = 0x00
        let result%2#0: bytes = 0x0001
        let array_data%1#0: bytes = 0x00020001
        let tmp%0#0: bool = (== a#1 0x00020001)
        (assert tmp%0#0)
        let result%3#0: bytes = 0x01
        let a#2: Encoded(len+uint8[]) = 0x000101
        let a#3: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(0x000101, 0u)
        let result%4#0: bytes = 0x01
        let result%5#0: bytes = 0x012a
        let result%6#0: bytes = 0x012a04
        let array_data%3#0: bytes = 0x0003012a04
        let tmp%1#0: bool = (== a#3 0x0003012a04)
        (assert tmp%1#0)
        return 

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: Encoded(len+uint8[]), assign_local: bool) -> Encoded(len+uint8[]):
    block@0: // L15
        let a%is_original#0: bool = 1u
        goto assign_local#0 ? block@1 : block@10
    block@1: // if_body_L18
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) a#0)
        let encoded%0#0: Encoded((uint8)) = 0x01
        let encoded%1#0: bytes = 0x01
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0x01)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let a#1: Encoded(len+uint8[]) = (concat len_16_bit%0#0 concatenated%0#0)
        let result%0#0: bytes = 0x01
        let result%1#0: bytes = 0x0102
        let result%2#0: bytes = 0x010203
        let a#2: Encoded(len+uint8[]) = 0x0003010203
        goto block@5
    block@5: // after_if_else_L1
        let expr_value_trimmed%1#0: bytes = 0x010203
        let encoded%2#0: Encoded((uint8)) = 0x04
        let encoded%3#0: bytes = 0x04
        let concatenated%1#0: bytes = 0x01020304
        let len_%1#0: uint64 = 4u
        let as_bytes%1#0: bytes[8] = (itob 4u)
        let len_16_bit%1#0: bytes = 0x0004
        let a#4: Encoded(len+uint8[]) = 0x000401020304
        goto block@7
    block@7: // after_if_else_L1
        let result%3#0: bytes = 0x01
        let result%4#0: bytes = 0x0102
        let result%5#0: bytes = 0x010204
        let a#5: Encoded(len+uint8[]) = 0x0003010204
        let a%is_original#3: bool = 0u
        goto block@9
    block@9: // after_if_else_L1
        goto block@13
    block@10: // else_body_L23
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) a#0)
        let encoded%4#0: Encoded((uint8)) = 0x2a
        let encoded%5#0: bytes = 0x2a
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 0x2a)
        let len_%2#0: uint64 = (len concatenated%2#0)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let a#6: Encoded(len+uint8[]) = (concat len_16_bit%2#0 concatenated%2#0)
        goto block@13
    block@13: // after_if_else_L17
        let a#7: Encoded(len+uint8[]) = φ(a#5 <- block@9, a#6 <- block@10)
        let a%is_original#4: bool = φ(a%is_original#3 <- block@9, a%is_original#0 <- block@10)
        let a%out#8: Encoded(len+uint8[]) = φ(a#1 <- block@9, a#6 <- block@10)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) a#7)
        let encoded%6#0: Encoded((uint8)) = 0x04
        let encoded%7#0: bytes = 0x04
        let concatenated%3#0: bytes = (concat expr_value_trimmed%3#0 0x04)
        let len_%3#0: uint64 = (len concatenated%3#0)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let a#10: Encoded(len+uint8[]) = (concat len_16_bit%3#0 concatenated%3#0)
        goto a%is_original#4 ? block@14 : block@15
    block@14: // if_body_L1
        goto block@15
    block@15: // after_if_else_L1
        let a%out#7: Encoded(len+uint8[]) = φ(a%out#8 <- block@13, a#10 <- block@14)
        return a%out#7

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create() -> void:
    block@0: // L1
        return 