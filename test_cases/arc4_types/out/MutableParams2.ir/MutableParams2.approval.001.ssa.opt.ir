main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array_rebinding()void" => block@3, * => block@4}
    block@3: // test_array_rebinding_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create()
        exit 1u

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.test_array_rebinding[routing]() -> void:
    block@0: // L5
        let a#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x00)
        let a#1: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#0, 1u)
        let encoded_array%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x00, 0x01)
        let tmp%0#0: bool = (== a#1 encoded_array%1#0)
        (assert tmp%0#0)
        let a#2: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01)
        let a#3: Encoded(len+uint8[]) = test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a#2, 0u)
        let encoded_array%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x2a, 0x04)
        let tmp%1#0: bool = (== a#3 encoded_array%3#0)
        (assert tmp%1#0)
        exit 1u

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.maybe_modify_array(a: Encoded(len+uint8[]), assign_local: bool) -> Encoded(len+uint8[]):
    block@0: // L15
        let a%is_original#0: bool = 1u
        goto assign_local#0 ? block@1 : block@10
    block@1: // if_body_L18
        let tmp%0#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x01)
        let concat%0#0: Encoded(len+uint8[]) = (concat a#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 a#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let a#1: Encoded(len+uint8[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let a%out#12: Encoded(len+uint8[]) = a#1
        let a#2: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x03)
        goto block@5
    block@5: // after_if_else_L1
        let a%out#11: Encoded(len+uint8[]) = a%out#12
        let tmp%1#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x04)
        let concat%1#0: Encoded(len+uint8[]) = (concat a#2 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 a#2 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let a#4: Encoded(len+uint8[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        goto block@7
    block@7: // after_if_else_L1
        let a%out#10: Encoded(len+uint8[]) = a%out#11
        let a#5: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x04)
        let a%is_original#3: bool = 0u
        goto block@9
    block@9: // after_if_else_L1
        let a%out#9: Encoded(len+uint8[]) = a%out#10
        goto block@13
    block@10: // else_body_L23
        let tmp%2#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x2a)
        let concat%2#0: Encoded(len+uint8[]) = (concat a#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 a#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let a#6: Encoded(len+uint8[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let a%out#13: Encoded(len+uint8[]) = a#6
        goto block@13
    block@13: // after_if_else_L17
        let a#7: Encoded(len+uint8[]) = φ(a#5 <- block@9, a#6 <- block@10)
        let a%is_original#4: bool = φ(a%is_original#3 <- block@9, a%is_original#0 <- block@10)
        let a%out#8: Encoded(len+uint8[]) = φ(a%out#9 <- block@9, a%out#13 <- block@10)
        let tmp%3#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x04)
        let concat%3#0: Encoded(len+uint8[]) = (concat a#7 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 a#7 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let a#10: Encoded(len+uint8[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        goto a%is_original#4 ? block@14 : block@15
    block@14: // if_body_L1
        goto block@15
    block@15: // after_if_else_L1
        let a%out#7: Encoded(len+uint8[]) = φ(a%out#8 <- block@13, a#10 <- block@14)
        return a%out#7

subroutine test_cases.arc4_types.mutable_params2.MutableParams2.__algopy_default_create() -> void:
    block@0: // L1
        return 