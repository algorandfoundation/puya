main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        let (popped#0: bytes, dynamic_uint8_array#4: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x0008010232010232045a, 1u)
        let tmp%3#0: bool = (b== popped#0 0x5a)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== dynamic_uint8_array#4 0x000701023201023204)
        (assert tmp%4#0)
        let dynamic_bool_array#1: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x000280, 0x8000, 2u, 0u)
        let tmp%1#1: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%1#1)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
        let array_head_and_tail%6#0: bytes = ((extract 2 0) dynamic_bool_array#1)
        let dynamic_bool_array#2: bytes = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, array_head_and_tail%6#0, array_length%0#0, 1u)
        let tmp%3#1: bool = (== dynamic_bool_array#2 0x0008aa)
        (assert tmp%3#1)
        let dynamic_bool_array#3: bytes = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#2, 0x80, 1u, 0u)
        let tmp%4#1: bool = (== dynamic_bool_array#3 0x0009aa80)
        (assert tmp%4#1)
        let (popped%0#1: bytes, dynamic_bool_array#4: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
        let tmp%5#0: bool = (== popped%0#1 0x80)
        (assert tmp%5#0)
        let (popped%1#0: bytes, dynamic_bool_array#5: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
        let tmp%6#0: bool = (== popped%1#0 0x00)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== dynamic_bool_array#5 0x0007aa)
        (assert tmp%7#0)
        let dynamic_string_array#1: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00020004000b000548656c6c6f0005576f726c64, 0x0003466f6f0003426172, 2u)
        let tmp%1#2: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%1#2)
        let array_length%0#1: uint64 = (extract_uint16 dynamic_string_array#1 0u)
        let array_head_and_tail%0#1: bytes = ((extract 2 0) dynamic_string_array#1)
        let start_of_tail%0#0: uint64 = (* array_length%0#1 2u)
        let total_length%0#0: uint64 = (len array_head_and_tail%0#1)
        let data%2#2: bytes = (substring3 array_head_and_tail%0#1 start_of_tail%0#0 total_length%0#0)
        let dynamic_string_array#2: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%2#2, array_length%0#1)
        let tmp%2#2: bool = (== dynamic_string_array#2 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%2#2)
        let dynamic_string_array#4: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172, 0x000548656c6c6f, 3u)
        let dynamic_string_array#5: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#4, 0x000548656c6c6f, 5u)
        let tmp%3#2: bool = (== dynamic_string_array#5 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172)
        (assert tmp%3#2)
        let (popped%0#2: bytes, dynamic_string_array#6: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
        let tmp%4#2: bool = (== popped%0#2 0x0003426172)
        (assert tmp%4#2)
        let (popped%1#1: bytes, dynamic_string_array#7: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
        let tmp%5#1: bool = (== popped%1#1 0x0003466f6f)
        (assert tmp%5#1)
        let tmp%6#1: bool = (== dynamic_string_array#7 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f)
        (assert tmp%6#1)
        let array_of_array#1: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x00010a, 1u)
        let tmp%1#3: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%1#3)
        let array_of_array#2: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, 0x000110, 1u)
        let tmp%2#3: bool = (== array_of_array#2 0x00020004000700010a000110)
        (assert tmp%2#3)
        let array_head_and_tail%0#2: bytes = ((extract 2 0) array_of_array#2)
        let array_length%0#2: uint64 = (extract_uint16 array_of_array#2 0u)
        (assert array_length%0#2) // Index access is out of bounds
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#2 0u)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#2 item_offset%0#0)
        let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
        let tmp%3#3: bytes = (extract3 array_head_and_tail%0#2 item_offset%0#0 item_head_tail_length%0#0)
        let expr_value_trimmed%0#1: bytes = ((extract 2 0) tmp%3#3)
        let concatenated%0#1: bytes = (concat expr_value_trimmed%0#1 0xff)
        let len_%0#1: uint64 = (len concatenated%0#1)
        let as_bytes%0#2: bytes = (itob len_%0#1)
        let len_16_bit%0#1: bytes = ((extract 6 2) as_bytes%0#2)
        let concat_result%2#2: bytes = (concat len_16_bit%0#1 concatenated%0#1)
        let array_of_array#3: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#2, concat_result%2#2, 0u)
        let tmp%4#3: bool = (== array_of_array#3 0x00020004000800020aff000110)
        (assert tmp%4#3)
        let array_head_and_tail%1#1: bytes = ((extract 2 0) array_of_array#3)
        let array_length%1#0: uint64 = (extract_uint16 array_of_array#3 0u)
        (assert array_length%1#0) // Index access is out of bounds
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#1 0u)
        let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%1#1 item_offset%1#0)
        let item_head_tail_length%1#0: uint64 = (+ item_length%1#0 2u)
        let tmp%5#2: bytes = (extract3 array_head_and_tail%1#1 item_offset%1#0 item_head_tail_length%1#0)
        let array_length%2#0: uint64 = (extract_uint16 tmp%5#2 0u)
        let index_is_in_bounds%2#0: bool = (< 1u array_length%2#0)
        (assert index_is_in_bounds%2#0) // Index access is out of bounds
        let updated_target%0#0: bytes = ((replace2 3) tmp%5#2 0x00)
        let array_of_array#4: bytes = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#3, updated_target%0#0, 0u)
        let tmp%6#2: bool = (== array_of_array#4 0x00020004000800020a00000110)
        (assert tmp%6#2)
        let hello_world_concat#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00010002000548656c6c6f, 0x0005576f726c64, 1u)
        let tmp%2#6: bool = (== 0x00020004000b000548656c6c6f0005576f726c64 hello_world_concat#0)
        (assert tmp%2#6)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
        let popped#0: bytes = (setbit 0x00 0u tmp%2#0)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#0: uint64 = (/ tmp%3#0 8u)
        let tmp%5#0: uint64 = (+ 2u tmp%4#0)
        let result#2: bytes = (substring3 result#1 0u tmp%5#0)
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let tmp%1#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%3#0: bytes = (substring3 head_and_tail#0 tmp%2#0 popped_offset#0)
        let head_and_tail#1: bytes = (concat tmp%1#0 tmp%3#0)
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
        let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: bool) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L147
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L146
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let tmp%6#0: uint64 = (select 8u 1u is_packed#0)
        (assert tmp%6#0) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L150
        let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let continue_looping%0#0: bool = (< i#1 new_items_count#0)
        goto continue_looping%0#0 ? block@4 : block@6
    block@4: // for_body_L151
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 i#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let i#2: uint64 = (+ i#1 tmp%6#0)
        goto block@3
    block@6: // after_for_L150
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L157
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
        let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
        return tmp%12#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L217
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%2#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%2#1 2u)
        let tmp%3#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%5#0)
        let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
        let tmp%8#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%7#0, array_length#0, index#0)
        let tmp%2#0: bytes = (concat size_b#0 tmp%8#0)
        return tmp%2#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L306
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L327
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L328
        let tmp%5#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#0: uint64 = (+ tmp%6#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L327
        return array_head_and_tail#1