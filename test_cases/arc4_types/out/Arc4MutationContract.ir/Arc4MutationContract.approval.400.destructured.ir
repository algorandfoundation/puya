main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x000280, 0x8000, 2u, 8u)
        let tmp%6#1: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%6#1)
        let extract_to_end%0#1: bytes = ((extract 2 0) dynamic_bool_array#1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, extract_to_end%0#1, aggregate%array_length%0#0, 1u)
        let tmp%21#0: bool = (== dynamic_bool_array#1 0x0008aa)
        (assert tmp%21#0)
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, 0x80, 1u, 8u)
        let tmp%33#0: bool = (== dynamic_bool_array#1 0x0009aa80)
        (assert tmp%33#0)
        let (tmp%34#0: bool, dynamic_bool_array#1: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#1)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u tmp%34#0)
        let tmp%38#0: bool = (== aggregate%encoded_bool%2#0 0x80)
        (assert tmp%38#0)
        let (tmp%39#0: bool, dynamic_bool_array#1: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#1)
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u tmp%39#0)
        let tmp%43#0: bool = (== aggregate%encoded_bool%3#0 0x00)
        (assert tmp%43#0)
        let tmp%51#0: bool = (== dynamic_bool_array#1 0x0007aa)
        (assert tmp%51#0)
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00020004000b000548656c6c6f0005576f726c64, 0x0003466f6f0003426172, 2u)
        let tmp%5#2: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%5#2)
        let extract_to_end%0#1: bytes = ((extract 2 0) dynamic_string_array#1)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dynamic_string_array#1 0u)
        let start_of_tail%0#0: uint64 = (* aggregate%array_length%1#0 2u)
        let total_length%1#1: uint64 = (len extract_to_end%0#1)
        let data%0#0: bytes = (substring3 extract_to_end%0#1 start_of_tail%0#0 total_length%1#1)
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%0#0, aggregate%array_length%1#0)
        let tmp%7#2: bool = (== dynamic_string_array#1 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%7#2)
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172, 0x000548656c6c6f, 3u)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 dynamic_string_array#1 0u)
        let aggregate%lt%2#0: bool = (< 5u aggregate%array_length%4#0)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#1, 0x000548656c6c6f, 5u)
        let tmp%8#2: bool = (== dynamic_string_array#1 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172)
        (assert tmp%8#2)
        let (tmp%9#1: bytes, dynamic_string_array#1: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#1)
        let tmp%11#1: bool = (== tmp%9#1 0x0003426172)
        (assert tmp%11#1)
        let (tmp%12#1: bytes, dynamic_string_array#1: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#1)
        let tmp%14#1: bool = (== tmp%12#1 0x0003466f6f)
        (assert tmp%14#1)
        let tmp%15#1: bool = (== dynamic_string_array#1 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f)
        (assert tmp%15#1)
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x00010a, 1u)
        let tmp%1#3: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%1#3)
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, 0x000110, 1u)
        let tmp%2#3: bool = (== array_of_array#1 0x00020004000700010a000110)
        (assert tmp%2#3)
        let aggregate%array_head_and_tail%2#0: bytes = ((extract 2 0) array_of_array#1)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 array_of_array#1 0u)
        (assert aggregate%array_length%6#0) // index access is out of bounds
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 0u)
        let aggregate%item_length%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0)
        let aggregate%item_head_tail_length%2#0: uint64 = (+ aggregate%item_length%2#0 2u)
        let aggregate%item%2#0: bytes = (extract3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%item_head_tail_length%2#0)
        let concat%2#1: Encoded(len+uint8[]) = (concat aggregate%item%2#0 0xff) // on error: max array length exceeded
        let extract_uint16%0#1: uint64 = (extract_uint16 aggregate%item%2#0 0u)
        let add%0#1: uint64 = (+ extract_uint16%0#1 1u)
        let as_bytes%0#1: bytes[8] = (itob add%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let replace%0#1: bytes = ((replace2 0) concat%2#1 as_u16_bytes%0#1)
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#1, replace%0#1, 0u)
        let tmp%4#3: bool = (== array_of_array#1 0x00020004000800020aff000110)
        (assert tmp%4#3)
        let aggregate%array_head_and_tail%4#0: bytes = ((extract 2 0) array_of_array#1)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 array_of_array#1 0u)
        (assert aggregate%array_length%9#0) // index access is out of bounds
        let aggregate%item_offset%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#0 0u)
        let aggregate%item_length%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#0 aggregate%item_offset%4#0)
        let aggregate%item_head_tail_length%4#0: uint64 = (+ aggregate%item_length%4#0 2u)
        let aggregate%item%4#0: bytes = (extract3 aggregate%array_head_and_tail%4#0 aggregate%item_offset%4#0 aggregate%item_head_tail_length%4#0)
        let aggregate%updated_array%3#0: bytes = ((replace2 3) aggregate%item%4#0 0x00) // on error: index access is out of bounds
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#1, aggregate%updated_array%3#0, 0u)
        let tmp%5#2: bool = (== array_of_array#1 0x00020004000800020a00000110)
        (assert tmp%5#2)
        let hello_world_concat#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00010002000548656c6c6f, 0x0005576f726c64, 1u)
        let tmp%9#4: bool = (== 0x00020004000b000548656c6c6f0005576f726c64 hello_world_concat#0)
        (assert tmp%9#4)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bool, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let popped#0: bool = (getbit result#0 popped_location#0)
        let result#0: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let result#0: bytes = (substring3 result#0 0u tmp%10#0)
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let tmp%7#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%8#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%9#0: bytes = (substring3 head_and_tail#0 tmp%8#0 popped_offset#0)
        let head_and_tail#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = (itob length_minus_1#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#0, length_minus_1#0, 0u)
        let updated#0: bytes = (concat tmp%12#0 tmp%13#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#0: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: bool = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#0)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#0: bytes = (replace3 array_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#0 tail_offset#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#0: uint64 = (+ tail_offset#0 tmp%10#0)
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#0