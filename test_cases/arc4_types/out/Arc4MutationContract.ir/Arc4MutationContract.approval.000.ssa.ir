main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
        test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
        test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
        test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <uint64, bytes>:
    block@0: // L25
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ length_minus_1#0 16u)
        let popped_location#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (getbit result#0 popped_location#0)
        let popped#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (setbit result#0 popped_location#0 0u)
        let result#1: bytes = tmp%7#0
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let tmp%11#0: bytes = (substring3 result#1 0u tmp%10#0)
        let result#2: bytes = tmp%11#0
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#1: bytes = tmp%8#0
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* length_minus_1#0 2u)
        let popped_header_offset#0: uint64 = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) array#0)
        let head_and_tail#0: bytes = tmp%3#0
        let tmp%4#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let popped_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let tmp%6#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let popped#0: bytes = tmp%6#0
        let tmp%7#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%8#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%9#0: bytes = (substring3 head_and_tail#0 tmp%8#0 popped_offset#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let head_and_tail#1: bytes = tmp%10#0
        let tmp%11#0: bytes = (itob length_minus_1#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let updated#0: bytes = tmp%14#0
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#1: bytes = tmp%12#0
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let tmp%17#0: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let result#3: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#1 1u)
        let write_offset#2: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#1 read_step#0)
        let read_offset#2: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_length#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let header_end#0: uint64 = tmp%3#0
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
    block@0: // L58
        let encoded_array%0#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02)
        let uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let tmp%0#0: Encoded(uint8[]) = encode<uint8[]>(0x03, 0x04)
        let concat%0#0: Encoded(len+uint8[]) = (concat uint8_array#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 uint8_array#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 2u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let array_concat_tuple#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let encoded_array%1#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x03, 0x04)
        let tmp%1#0: bool = (== array_concat_tuple#0 encoded_array%1#0)
        (assert tmp%1#0)
        let tmp%2#0: Encoded(uint8[]) = encode<uint8[]>(0x05)
        let concat%1#0: Encoded(len+uint8[]) = (concat array_concat_tuple#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 array_concat_tuple#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let array_concat_tuple#1: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let encoded_array%2#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x03, 0x04, 0x05)
        let tmp%3#0: bool = (== array_concat_tuple#1 encoded_array%2#0)
        (assert tmp%3#0)
        let encoded%0#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x48656c6c6f)
        let encoded%1#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x576f726c64)
        let encoded_array%3#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(encoded%0#0, encoded%1#0)
        let hello_world#0: Encoded(len+(len+utf8[])[]) = encoded_array%3#0
        let encoded%2#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x48656c6c6f)
        let encoded_array%4#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(encoded%2#0)
        let encoded%3#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x576f726c64)
        let encoded_array%5#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(encoded%3#0)
        let array_length%0#0: uint64 = (extract_uint16 encoded_array%5#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%5#0)
        let start_of_tail%0#0: uint64 = (* array_length%0#0 2u)
        let total_length%0#0: uint64 = (len extract_to_end%0#0)
        let data%0#0: bytes = (substring3 extract_to_end%0#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(encoded_array%4#0, data%0#0, array_length%0#0)
        let hello_world_concat#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        let tmp%4#0: bool = (== hello_world#0 hello_world_concat#0)
        (assert tmp%4#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
    block@0: // L70
        let encoded_array%0#0: Encoded(len+(len+uint8[])[]) = encode<(len+(len+uint8[])[])>()
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = encoded_array%0#0
        let tmp%0#0: bool = (== array_of_array#0 0x0000)
        (assert tmp%0#0)
        let encoded_array%1#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x0a)
        let tmp%1#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(encoded_array%1#0)
        let concat%0#0: bytes = (concat 0x tmp%1#0)
        let as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, concat%0#0, 1u)
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = as_Encoded(len+(len+uint8[])[])%0#0
        let tmp%2#0: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%2#0)
        let encoded_array%2#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x10)
        let tmp%3#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(encoded_array%2#0)
        let concat%1#0: bytes = (concat 0x tmp%3#0)
        let as_Encoded(len+(len+uint8[])[])%1#0: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, concat%1#0, 1u)
        let array_of_array#2: Encoded(len+(len+uint8[])[]) = as_Encoded(len+(len+uint8[])[])%1#0
        let tmp%4#0: bool = (== array_of_array#2 0x00020004000700010a000110)
        (assert tmp%4#0)
        let array_item%0#0: Encoded(len+uint8[]) = agg_read_index(array_of_array#2, 0u)
        let tmp%5#0: Encoded(uint8[]) = encode<uint8[]>(0xff)
        let concat%2#0: Encoded(len+uint8[]) = (concat array_item%0#0 tmp%5#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 array_item%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let updated_array%0#0: Encoded(len+(len+uint8[])[]) = agg_write_index(array_of_array#2, 0u, as_Encoded(len+uint8[])%0#0)
        let array_of_array#3: Encoded(len+(len+uint8[])[]) = updated_array%0#0
        let tmp%6#0: bool = (== array_of_array#3 0x00020004000800020aff000110)
        (assert tmp%6#0)
        let updated_array%1#0: Encoded(len+(len+uint8[])[]) = agg_write_index(array_of_array#3, 0u, 1u, 0x00)
        let array_of_array#4: Encoded(len+(len+uint8[])[]) = updated_array%1#0
        let tmp%7#0: bool = (== array_of_array#4 0x00020004000800020a00000110)
        (assert tmp%7#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
    block@0: // L85
        let encoded_array%0#0: Encoded(uint8[2]) = encode<uint8[2]>(0x0a, 0x09)
        let encoded_array%1#0: Encoded(uint8[2]) = encode<uint8[2]>(0x40, 0x80)
        let encoded_array%2#0: Encoded(uint8[2][2]) = encode<uint8[2][2]>(encoded_array%0#0, encoded_array%1#0)
        let array_of_array#0: Encoded(uint8[2][2]) = encoded_array%2#0
        let tmp%0#0: bool = (== array_of_array#0 0x0a094080)
        (assert tmp%0#0)
        let encoded_array%3#0: Encoded(uint8[2]) = encode<uint8[2]>(0xff, 0xfe)
        let updated_array%0#0: Encoded(uint8[2][2]) = agg_write_index(array_of_array#0, 0u, encoded_array%3#0)
        let array_of_array#1: Encoded(uint8[2][2]) = updated_array%0#0
        let tmp%1#0: bool = (== array_of_array#1 0xfffe4080)
        (assert tmp%1#0)
        let updated_array%1#0: Encoded(uint8[2][2]) = agg_write_index(array_of_array#1, 1u, 0u, 0x01)
        let array_of_array#2: Encoded(uint8[2][2]) = updated_array%1#0
        let tmp%2#0: bool = (== array_of_array#2 0xfffe0180)
        (assert tmp%2#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
    block@0: // L100
        let encoded_array%0#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let updated_array%0#0: Encoded(len+uint8[]) = agg_write_index(dynamic_uint8_array#0, 0u, 0xff)
        let dynamic_uint8_array#1: Encoded(len+uint8[]) = updated_array%0#0
        let tmp%0#0: bool = (== dynamic_uint8_array#1 0x0002ff02)
        (assert tmp%0#0)
        let encoded_array%1#0: Encoded(uint8[2]) = encode<uint8[2]>(0x01, 0x02)
        let static_uint8_array#0: Encoded(uint8[2]) = encoded_array%1#0
        let updated_array%1#0: Encoded(uint8[2]) = agg_write_index(static_uint8_array#0, 1u, 0xff)
        let static_uint8_array#1: Encoded(uint8[2]) = updated_array%1#0
        let tmp%1#0: bool = (== static_uint8_array#1 0x01ff)
        (assert tmp%1#0)
        let tmp%2#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%3#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_array%2#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%2#0, tmp%3#0)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded_array%2#0
        let tmp%4#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_value%0#0: Encoded(bool1) = encode<bool1>(tmp%4#0)
        let updated_array%2#0: Encoded(len+bool1[]) = agg_write_index(dynamic_bool_array#0, 0u, encoded_value%0#0)
        let dynamic_bool_array#1: Encoded(len+bool1[]) = updated_array%2#0
        let tmp%5#0: bool = (== dynamic_bool_array#1 0x000200)
        (assert tmp%5#0)
        let tmp%6#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%7#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_array%3#0: Encoded(bool1[2]) = encode<bool1[2]>(tmp%6#0, tmp%7#0)
        let static_bool_array#0: Encoded(bool1[2]) = encoded_array%3#0
        let tmp%8#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_value%1#0: Encoded(bool1) = encode<bool1>(tmp%8#0)
        let updated_array%3#0: Encoded(bool1[2]) = agg_write_index(static_bool_array#0, 1u, encoded_value%1#0)
        let static_bool_array#1: Encoded(bool1[2]) = updated_array%3#0
        let tmp%9#0: bool = (== static_bool_array#1 0x80)
        (assert tmp%9#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
    block@0: // L116
        let tmp%0#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded%0#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x4861707079)
        let encoded%1#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x44617973)
        let tmp%1#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%0#0, 0x32, encoded%0#0, encoded%1#0)
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = tmp%1#0
        let tmp%2#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_value%0#0: Encoded(bool1) = encode<bool1>(tmp%2#0)
        let updated_tuple%0#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = agg_write_index(test_struct#0, 0, encoded_value%0#0)
        let test_struct#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%0#0
        let updated_tuple%1#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = agg_write_index(test_struct#1, 1, 0x0c)
        let test_struct#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%1#0
        let tmp%3#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded%2#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x4861707079)
        let encoded%3#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x44617973)
        let tmp%4#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%3#0, 0x0c, encoded%2#0, encoded%3#0)
        let tmp%5#0: bool = (== test_struct#2 tmp%4#0)
        (assert tmp%5#0)
        let encoded%4#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x486d6d6d6d)
        let updated_tuple%2#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = agg_write_index(test_struct#2, 2, encoded%4#0)
        let test_struct#3: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%2#0
        let encoded%5#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x4f682077656c6c)
        let updated_tuple%3#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = agg_write_index(test_struct#3, 3, encoded%5#0)
        let test_struct#4: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = updated_tuple%3#0
        let tmp%6#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded%6#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x486d6d6d6d)
        let encoded%7#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x4f682077656c6c)
        let tmp%7#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%6#0, 0x0c, encoded%6#0, encoded%7#0)
        let tmp%8#0: bool = (== test_struct#4 tmp%7#0)
        (assert tmp%8#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
    block@0: // L143
        let encoded_array%0#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02)
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = encoded_array%0#0
        let tmp%0#0: Encoded(uint8[]) = encode<uint8[]>(0x32)
        let concat%0#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let dynamic_uint8_array#1: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let encoded_array%1#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x32)
        let tmp%1#0: bool = (== dynamic_uint8_array#1 encoded_array%1#0)
        (assert tmp%1#0)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_uint8_array#1)
        let concat%1#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%1#0
        let dynamic_uint8_array#2: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let encoded_array%2#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32)
        let tmp%2#0: bool = (== dynamic_uint8_array#2 encoded_array%2#0)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(uint8[]) = encode<uint8[]>(0x04, 0x5a)
        let concat%2#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#2 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 dynamic_uint8_array#2 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 2u)
        let as_bytes%2#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = replace%2#0
        let dynamic_uint8_array#3: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let encoded_array%3#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32, 0x04, 0x5a)
        let tmp%4#0: bool = (== dynamic_uint8_array#3 encoded_array%3#0)
        (assert tmp%4#0)
        let (tmp%5#0: bytes, tmp%6#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#3, 1u)
        let dynamic_uint8_array#4: Encoded(len+uint8[]) = tmp%6#0
        let popped#0: Encoded(uint8) = tmp%5#0
        let reinterpret_biguint%0#0: biguint = popped#0
        let reinterpret_biguint%1#0: biguint = 0x5a
        let tmp%7#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%7#0)
        let encoded_array%4#0: Encoded(len+uint8[]) = encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32, 0x04)
        let tmp%8#0: bool = (== dynamic_uint8_array#4 encoded_array%4#0)
        (assert tmp%8#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
    block@0: // L166
        let tmp%0#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_array%0#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%0#0, tmp%1#0)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = encoded_array%0#0
        let tmp%2#0: bool = (== dynamic_bool_array#0 0x000280)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%4#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%5#0: Encoded(bool8[]) = encode<bool8[]>(tmp%3#0, tmp%4#0)
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, tmp%5#0, 2u, 8u)
        let dynamic_bool_array#1: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%6#0: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%6#0)
        let tmp%7#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%8#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%9#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%10#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_array%1#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0)
        let tmp%11#0: bool = (== dynamic_bool_array#1 encoded_array%1#0)
        (assert tmp%11#0)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_bool_array#1)
        let as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, extract_to_end%0#0, array_length%0#0, 1u)
        let dynamic_bool_array#2: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%1#0
        let tmp%12#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%13#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%14#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%15#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%16#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%17#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%18#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%19#0: Encoded(bool8) = encode<bool8>(0u)
        let encoded_array%2#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0, tmp%16#0, tmp%17#0, tmp%18#0, tmp%19#0)
        let tmp%20#0: bool = (== dynamic_bool_array#2 encoded_array%2#0)
        (assert tmp%20#0)
        let tmp%21#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%22#0: Encoded(bool8[]) = encode<bool8[]>(tmp%21#0)
        let as_Encoded(len+bool1[])%2#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#2, tmp%22#0, 1u, 8u)
        let dynamic_bool_array#3: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%2#0
        let tmp%23#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%24#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%25#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%26#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%27#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%28#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%29#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%30#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%31#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_array%3#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%23#0, tmp%24#0, tmp%25#0, tmp%26#0, tmp%27#0, tmp%28#0, tmp%29#0, tmp%30#0, tmp%31#0)
        let tmp%32#0: bool = (== dynamic_bool_array#3 encoded_array%3#0)
        (assert tmp%32#0)
        let (tmp%33#0: uint64, tmp%34#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
        let tmp%35#0: Encoded(bool8) = decode<Encoded(bool8)>(tmp%33#0)
        let dynamic_bool_array#4: Encoded(len+bool1[]) = tmp%34#0
        let tmp%36#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%37#0: bool = (== tmp%35#0 tmp%36#0)
        (assert tmp%37#0)
        let (tmp%38#0: uint64, tmp%39#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
        let tmp%40#0: Encoded(bool8) = decode<Encoded(bool8)>(tmp%38#0)
        let dynamic_bool_array#5: Encoded(len+bool1[]) = tmp%39#0
        let tmp%41#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%42#0: bool = (== tmp%40#0 tmp%41#0)
        (assert tmp%42#0)
        let tmp%43#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%44#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%45#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%46#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%47#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%48#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%49#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_array%4#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%43#0, tmp%44#0, tmp%45#0, tmp%46#0, tmp%47#0, tmp%48#0, tmp%49#0)
        let tmp%50#0: bool = (== dynamic_bool_array#5 encoded_array%4#0)
        (assert tmp%50#0)
        return 

subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
    block@0: // L213
        let encoded%0#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x48656c6c6f)
        let hello#0: Encoded(len+utf8[]) = encoded%0#0
        let encoded%1#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x576f726c64)
        let world#0: Encoded(len+utf8[]) = encoded%1#0
        let encoded%2#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x466f6f)
        let foo#0: Encoded(len+utf8[]) = encoded%2#0
        let encoded%3#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x426172)
        let bar#0: Encoded(len+utf8[]) = encoded%3#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(hello#0, world#0)
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = encoded_array%0#0
        let tmp%0#0: bool = (== dynamic_string_array#0 0x00020004000b000548656c6c6f0005576f726c64)
        (assert tmp%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(foo#0)
        let concat%0#0: bytes = (concat 0x tmp%1#0)
        let tmp%2#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(bar#0)
        let concat%1#0: bytes = (concat concat%0#0 tmp%2#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, concat%1#0, 2u)
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        let tmp%3#0: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%3#0)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_string_array#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_string_array#1)
        let start_of_tail%0#0: uint64 = (* array_length%0#0 2u)
        let total_length%0#0: uint64 = (len extract_to_end%0#0)
        let data%0#0: bytes = (substring3 extract_to_end%0#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%0#0, array_length%0#0)
        let dynamic_string_array#2: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%1#0
        let encoded_array%1#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, bar#0, hello#0, world#0, foo#0, bar#0)
        let tmp%4#0: bool = (== dynamic_string_array#2 encoded_array%1#0)
        (assert tmp%4#0)
        let encoded_array%2#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, bar#0, hello#0, world#0, foo#0, bar#0)
        let dynamic_string_array#3: Encoded(len+(len+utf8[])[]) = encoded_array%2#0
        let updated_array%0#0: Encoded(len+(len+utf8[])[]) = agg_write_index(dynamic_string_array#3, 3u, hello#0)
        let dynamic_string_array#4: Encoded(len+(len+utf8[])[]) = updated_array%0#0
        let updated_array%1#0: Encoded(len+(len+utf8[])[]) = agg_write_index(dynamic_string_array#4, 5u, hello#0)
        let dynamic_string_array#5: Encoded(len+(len+utf8[])[]) = updated_array%1#0
        let encoded_array%3#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, hello#0, hello#0, hello#0, foo#0, bar#0)
        let tmp%5#0: bool = (== dynamic_string_array#5 encoded_array%3#0)
        (assert tmp%5#0)
        let (tmp%6#0: bytes, tmp%7#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
        let dynamic_string_array#6: Encoded(len+(len+utf8[])[]) = tmp%7#0
        let tmp%8#0: bool = (== tmp%6#0 bar#0)
        (assert tmp%8#0)
        let (tmp%9#0: bytes, tmp%10#0: bytes) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
        let dynamic_string_array#7: Encoded(len+(len+utf8[])[]) = tmp%10#0
        let tmp%11#0: bool = (== tmp%9#0 foo#0)
        (assert tmp%11#0)
        let encoded_array%4#0: Encoded(len+(len+utf8[])[]) = encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, hello#0, hello#0, hello#0)
        let tmp%12#0: bool = (== dynamic_string_array#7 encoded_array%4#0)
        (assert tmp%12#0)
        return 