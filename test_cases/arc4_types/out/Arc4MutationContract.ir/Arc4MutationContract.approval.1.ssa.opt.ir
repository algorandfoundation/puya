main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        let result%0#0: bytes = 0x01
        let result%1#0: bytes = 0x0102
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = 0x00020102
        let expr_value_trimmed%0#0: bytes = 0x0102
        let encoded%0#0: Encoded((uint8)) = 0x32
        let encoded%1#0: bytes = 0x32
        let concatenated%0#0: bytes = 0x010232
        let len_%0#0: uint64 = 3u
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let len_16_bit%0#0: bytes = 0x0003
        let dynamic_uint8_array#1: Encoded(len+uint8[]) = 0x0003010232
        let result%2#0: bytes = 0x01
        let result%3#0: bytes = 0x0102
        let result%4#0: bytes = 0x010232
        let array_data%1#0: bytes = 0x0003010232
        let tmp%0#0: bool = 1u
        let expr_value_trimmed%1#0: bytes = 0x010232
        let expr_value_trimmed%2#0: bytes = 0x010232
        let concatenated%1#0: bytes = 0x010232010232
        let len_%1#0: uint64 = 6u
        let as_bytes%1#0: bytes[8] = (itob 6u)
        let len_16_bit%1#0: bytes = 0x0006
        let dynamic_uint8_array#2: Encoded(len+uint8[]) = 0x0006010232010232
        let result%5#0: bytes = 0x01
        let result%6#0: bytes = 0x0102
        let result%7#0: bytes = 0x010232
        let result%8#0: bytes = 0x01023201
        let result%9#0: bytes = 0x0102320102
        let result%10#0: bytes = 0x010232010232
        let array_data%2#0: bytes = 0x0006010232010232
        let tmp%1#0: bool = 1u
        let expr_value_trimmed%3#0: bytes = 0x010232010232
        let encoded%2#0: Encoded((uint8)) = 0x04
        let encoded%3#0: Encoded((uint8,uint8)) = 0x045a
        let encoded%4#0: bytes = 0x045a
        let concatenated%2#0: bytes = 0x010232010232045a
        let len_%2#0: uint64 = 8u
        let as_bytes%2#0: bytes[8] = (itob 8u)
        let len_16_bit%2#0: bytes = 0x0008
        let dynamic_uint8_array#3: Encoded(len+uint8[]) = 0x0008010232010232045a
        let result%11#0: bytes = 0x01
        let result%12#0: bytes = 0x0102
        let result%13#0: bytes = 0x010232
        let result%14#0: bytes = 0x01023201
        let result%15#0: bytes = 0x0102320102
        let result%16#0: bytes = 0x010232010232
        let result%17#0: bytes = 0x01023201023204
        let result%18#0: bytes = 0x010232010232045a
        let array_data%3#0: bytes = 0x0008010232010232045a
        let tmp%2#0: bool = 1u
        let (popped#0: Encoded(uint8), dynamic_uint8_array#4: Encoded(len+uint8[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x0008010232010232045a, 1u)
        let tmp%3#0: bool = (b== popped#0 0x5a)
        (assert tmp%3#0)
        let result%19#0: bytes = 0x01
        let result%20#0: bytes = 0x0102
        let result%21#0: bytes = 0x010232
        let result%22#0: bytes = 0x01023201
        let result%23#0: bytes = 0x0102320102
        let result%24#0: bytes = 0x010232010232
        let result%25#0: bytes = 0x01023201023204
        let array_data%4#0: bytes = 0x000701023201023204
        let tmp%4#0: bool = (== dynamic_uint8_array#4 0x000701023201023204)
        (assert tmp%4#0)
        let encoded_bool%0#0: bytes[1] = 0x80
        let encoded_bool%1#0: bytes[1] = 0x00
        let array_head_and_tail%0#0: bytes = 0x80
        let is_true%0#0: uint64 = 0u
        let array_head_and_tail%1#0: bytes = 0x80
        let dynamic_bool_array#0: Encoded(len+bool1[]) = 0x000280
        let tmp%0#1: bool = 1u
        let encoded_bool%2#0: bytes[1] = 0x80
        let encoded_bool%3#0: bytes[1] = 0x00
        let data%0#1: bytes = 0x80
        let data%1#0: bytes = 0x8000
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x000280, 0x8000, 2u, 8u)
        let tmp%1#1: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%1#1)
        let encoded_bool%4#0: bytes[1] = 0x80
        let encoded_bool%5#0: bytes[1] = 0x00
        let encoded_bool%6#0: bytes[1] = 0x80
        let encoded_bool%7#0: bytes[1] = 0x00
        let array_head_and_tail%2#0: bytes = 0x80
        let is_true%1#0: uint64 = 0u
        let array_head_and_tail%3#0: bytes = 0x80
        let is_true%2#0: uint64 = 1u
        let array_head_and_tail%4#0: bytes = 0xa0
        let is_true%3#0: uint64 = 0u
        let array_head_and_tail%5#0: bytes = 0xa0
        let array_data%1#1: bytes = 0x0004a0
        let array_length%0#0: uint64 = dynamic_bool_array#1.length
        let array_head_and_tail%6#0: bytes = ((extract 2 0) dynamic_bool_array#1)
        let dynamic_bool_array#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, array_head_and_tail%6#0, array_length%0#0, 1u)
        let encoded_bool%8#0: bytes[1] = 0x80
        let encoded_bool%9#0: bytes[1] = 0x00
        let encoded_bool%10#0: bytes[1] = 0x80
        let encoded_bool%11#0: bytes[1] = 0x00
        let encoded_bool%12#0: bytes[1] = 0x80
        let encoded_bool%13#0: bytes[1] = 0x00
        let encoded_bool%14#0: bytes[1] = 0x80
        let encoded_bool%15#0: bytes[1] = 0x00
        let array_head_and_tail%7#0: bytes = 0x80
        let is_true%4#0: uint64 = 0u
        let array_head_and_tail%8#0: bytes = 0x80
        let is_true%5#0: uint64 = 1u
        let array_head_and_tail%9#0: bytes = 0xa0
        let is_true%6#0: uint64 = 0u
        let array_head_and_tail%10#0: bytes = 0xa0
        let is_true%7#0: uint64 = 1u
        let array_head_and_tail%11#0: bytes = 0xa8
        let is_true%8#0: uint64 = 0u
        let array_head_and_tail%12#0: bytes = 0xa8
        let is_true%9#0: uint64 = 1u
        let array_head_and_tail%13#0: bytes = 0xaa
        let is_true%10#0: uint64 = 0u
        let array_head_and_tail%14#0: bytes = 0xaa
        let array_data%2#1: bytes = 0x0008aa
        let tmp%3#1: bool = (== dynamic_bool_array#2 0x0008aa)
        (assert tmp%3#1)
        let encoded_bool%16#0: bytes[1] = 0x80
        let data%2#0: bytes = 0x80
        let dynamic_bool_array#3: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#2, 0x80, 1u, 8u)
        let encoded_bool%17#0: bytes[1] = 0x80
        let encoded_bool%18#0: bytes[1] = 0x00
        let encoded_bool%19#0: bytes[1] = 0x80
        let encoded_bool%20#0: bytes[1] = 0x00
        let encoded_bool%21#0: bytes[1] = 0x80
        let encoded_bool%22#0: bytes[1] = 0x00
        let encoded_bool%23#0: bytes[1] = 0x80
        let encoded_bool%24#0: bytes[1] = 0x00
        let encoded_bool%25#0: bytes[1] = 0x80
        let array_head_and_tail%15#0: bytes = 0x80
        let is_true%11#0: uint64 = 0u
        let array_head_and_tail%16#0: bytes = 0x80
        let is_true%12#0: uint64 = 1u
        let array_head_and_tail%17#0: bytes = 0xa0
        let is_true%13#0: uint64 = 0u
        let array_head_and_tail%18#0: bytes = 0xa0
        let is_true%14#0: uint64 = 1u
        let array_head_and_tail%19#0: bytes = 0xa8
        let is_true%15#0: uint64 = 0u
        let array_head_and_tail%20#0: bytes = 0xa8
        let is_true%16#0: uint64 = 1u
        let array_head_and_tail%21#0: bytes = 0xaa
        let is_true%17#0: uint64 = 0u
        let array_head_and_tail%22#0: bytes = 0xaa
        let array_head_and_tail%23#0: bytes = 0xaa80
        let array_data%3#1: bytes = 0x0009aa80
        let tmp%4#1: bool = (== dynamic_bool_array#3 0x0009aa80)
        (assert tmp%4#1)
        let (popped%0#1: bytes, dynamic_bool_array#4: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
        let encoded_bool%26#0: bytes[1] = 0x80
        let tmp%5#0: bool = (== popped%0#1 0x80)
        (assert tmp%5#0)
        let (popped%1#0: bytes, dynamic_bool_array#5: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
        let encoded_bool%27#0: bytes[1] = 0x00
        let tmp%6#0: bool = (== popped%1#0 0x00)
        (assert tmp%6#0)
        let encoded_bool%28#0: bytes[1] = 0x80
        let encoded_bool%29#0: bytes[1] = 0x00
        let encoded_bool%30#0: bytes[1] = 0x80
        let encoded_bool%31#0: bytes[1] = 0x00
        let encoded_bool%32#0: bytes[1] = 0x80
        let encoded_bool%33#0: bytes[1] = 0x00
        let encoded_bool%34#0: bytes[1] = 0x80
        let array_head_and_tail%24#0: bytes = 0x80
        let is_true%18#0: uint64 = 0u
        let array_head_and_tail%25#0: bytes = 0x80
        let is_true%19#0: uint64 = 1u
        let array_head_and_tail%26#0: bytes = 0xa0
        let is_true%20#0: uint64 = 0u
        let array_head_and_tail%27#0: bytes = 0xa0
        let is_true%21#0: uint64 = 1u
        let array_head_and_tail%28#0: bytes = 0xa8
        let is_true%22#0: uint64 = 0u
        let array_head_and_tail%29#0: bytes = 0xa8
        let is_true%23#0: uint64 = 1u
        let array_head_and_tail%30#0: bytes = 0xaa
        let array_data%4#1: bytes = 0x0007aa
        let tmp%7#0: bool = (== dynamic_bool_array#5 0x0007aa)
        (assert tmp%7#0)
        let as_bytes%0#1: bytes[8] = (itob 4u)
        let next_item_head%0#0: bytes = 0x0004
        let result%0#1: bytes = 0x0004
        let next_item_len%0#0: uint64 = 7u
        let tail_offset%0#0: uint64 = 11u
        let as_bytes%1#1: bytes[8] = (itob 11u)
        let next_item_head%1#0: bytes = 0x000b
        let result%1#1: bytes = 0x0004000b
        let result%2#1: bytes = 0x0004000b000548656c6c6f
        let result%3#1: bytes = 0x0004000b000548656c6c6f0005576f726c64
        let dynamic_string_array#0: Encoded(len+len+utf8[][]) = 0x00020004000b000548656c6c6f0005576f726c64
        let tmp%0#2: bool = 1u
        let data%0#2: bytes = 0x0003466f6f
        let data%1#1: bytes = 0x0003466f6f0003426172
        let dynamic_string_array#1: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00020004000b000548656c6c6f0005576f726c64, 0x0003466f6f0003426172, 2u)
        let tmp%1#2: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%1#2)
        let array_length%0#1: uint64 = dynamic_string_array#1.length
        let array_head_and_tail%0#1: bytes = ((extract 2 0) dynamic_string_array#1)
        let start_of_tail%0#0: uint64 = (* array_length%0#1 2u)
        let total_length%0#0: uint64 = (len array_head_and_tail%0#1)
        let data%2#1: bytes = (substring3 array_head_and_tail%0#1 start_of_tail%0#0 total_length%0#0)
        let dynamic_string_array#2: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%2#1, array_length%0#1)
        let as_bytes%2#1: bytes[8] = (itob 16u)
        let next_item_head%2#0: bytes = 0x0010
        let result%4#1: bytes = 0x0010
        let next_item_len%2#0: uint64 = 7u
        let tail_offset%2#0: uint64 = 23u
        let as_bytes%3#0: bytes[8] = (itob 23u)
        let next_item_head%3#0: bytes = 0x0017
        let result%5#1: bytes = 0x00100017
        let next_item_len%3#0: uint64 = 7u
        let tail_offset%3#0: uint64 = 30u
        let as_bytes%4#0: bytes[8] = (itob 30u)
        let next_item_head%4#0: bytes = 0x001e
        let result%6#1: bytes = 0x00100017001e
        let next_item_len%4#0: uint64 = 5u
        let tail_offset%4#0: uint64 = 35u
        let as_bytes%5#0: bytes[8] = (itob 35u)
        let next_item_head%5#0: bytes = 0x0023
        let result%7#1: bytes = 0x00100017001e0023
        let next_item_len%5#0: uint64 = 5u
        let tail_offset%5#0: uint64 = 40u
        let as_bytes%6#0: bytes[8] = (itob 40u)
        let next_item_head%6#0: bytes = 0x0028
        let result%8#1: bytes = 0x00100017001e00230028
        let next_item_len%6#0: uint64 = 7u
        let tail_offset%6#0: uint64 = 47u
        let as_bytes%7#0: bytes[8] = (itob 47u)
        let next_item_head%7#0: bytes = 0x002f
        let result%9#1: bytes = 0x00100017001e00230028002f
        let next_item_len%7#0: uint64 = 7u
        let tail_offset%7#0: uint64 = 54u
        let as_bytes%8#0: bytes[8] = (itob 54u)
        let next_item_head%8#0: bytes = 0x0036
        let result%10#1: bytes = 0x00100017001e00230028002f0036
        let next_item_len%8#0: uint64 = 5u
        let tail_offset%8#0: uint64 = 59u
        let as_bytes%9#0: bytes[8] = (itob 59u)
        let next_item_head%9#0: bytes = 0x003b
        let result%11#1: bytes = 0x00100017001e00230028002f0036003b
        let result%12#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f
        let result%13#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c64
        let result%14#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f
        let result%15#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172
        let result%16#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f
        let result%17#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c64
        let result%18#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f
        let result%19#1: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let array_data%1#2: bytes = 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let tmp%2#2: bool = (== dynamic_string_array#2 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%2#2)
        let next_item_head%10#0: bytes = 0x0010
        let result%20#1: bytes = 0x0010
        let next_item_len%10#0: uint64 = 7u
        let tail_offset%10#0: uint64 = 23u
        let next_item_head%11#0: bytes = 0x0017
        let result%21#1: bytes = 0x00100017
        let next_item_len%11#0: uint64 = 7u
        let tail_offset%11#0: uint64 = 30u
        let next_item_head%12#0: bytes = 0x001e
        let result%22#1: bytes = 0x00100017001e
        let next_item_len%12#0: uint64 = 5u
        let tail_offset%12#0: uint64 = 35u
        let next_item_head%13#0: bytes = 0x0023
        let result%23#1: bytes = 0x00100017001e0023
        let next_item_len%13#0: uint64 = 5u
        let tail_offset%13#0: uint64 = 40u
        let next_item_head%14#0: bytes = 0x0028
        let result%24#1: bytes = 0x00100017001e00230028
        let next_item_len%14#0: uint64 = 7u
        let tail_offset%14#0: uint64 = 47u
        let next_item_head%15#0: bytes = 0x002f
        let result%25#1: bytes = 0x00100017001e00230028002f
        let next_item_len%15#0: uint64 = 7u
        let tail_offset%15#0: uint64 = 54u
        let next_item_head%16#0: bytes = 0x0036
        let result%26#0: bytes = 0x00100017001e00230028002f0036
        let next_item_len%16#0: uint64 = 5u
        let tail_offset%16#0: uint64 = 59u
        let next_item_head%17#0: bytes = 0x003b
        let result%27#0: bytes = 0x00100017001e00230028002f0036003b
        let result%28#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f
        let result%29#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c64
        let result%30#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f
        let result%31#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172
        let result%32#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f
        let result%33#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c64
        let result%34#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f
        let result%35#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let dynamic_string_array#3: Encoded(len+len+utf8[][]) = 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let array_length%1#0: uint64 = 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172.length
        let lt%0#0: bool = (< 3u array_length%1#0)
        (assert lt%0#0) // index access is out of bounds
        let dynamic_string_array#4: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172, 0x000548656c6c6f, 3u)
        let array_length%2#0: uint64 = dynamic_string_array#4.length
        let lt%1#0: bool = (< 5u array_length%2#0)
        (assert lt%1#0) // index access is out of bounds
        let dynamic_string_array#5: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#4, 0x000548656c6c6f, 5u)
        let next_item_head%18#0: bytes = 0x0010
        let result%36#0: bytes = 0x0010
        let next_item_len%18#0: uint64 = 7u
        let tail_offset%18#0: uint64 = 23u
        let next_item_head%19#0: bytes = 0x0017
        let result%37#0: bytes = 0x00100017
        let next_item_len%19#0: uint64 = 7u
        let tail_offset%19#0: uint64 = 30u
        let next_item_head%20#0: bytes = 0x001e
        let result%38#0: bytes = 0x00100017001e
        let next_item_len%20#0: uint64 = 5u
        let tail_offset%20#0: uint64 = 35u
        let next_item_head%21#0: bytes = 0x0023
        let result%39#0: bytes = 0x00100017001e0023
        let next_item_len%21#0: uint64 = 7u
        let tail_offset%21#0: uint64 = 42u
        let as_bytes%22#0: bytes[8] = (itob 42u)
        let next_item_head%22#0: bytes = 0x002a
        let result%40#0: bytes = 0x00100017001e0023002a
        let next_item_len%22#0: uint64 = 7u
        let tail_offset%22#0: uint64 = 49u
        let as_bytes%23#0: bytes[8] = (itob 49u)
        let next_item_head%23#0: bytes = 0x0031
        let result%41#0: bytes = 0x00100017001e0023002a0031
        let next_item_len%23#0: uint64 = 7u
        let tail_offset%23#0: uint64 = 56u
        let as_bytes%24#0: bytes[8] = (itob 56u)
        let next_item_head%24#0: bytes = 0x0038
        let result%42#0: bytes = 0x00100017001e0023002a00310038
        let next_item_len%24#0: uint64 = 5u
        let tail_offset%24#0: uint64 = 61u
        let as_bytes%25#0: bytes[8] = (itob 61u)
        let next_item_head%25#0: bytes = 0x003d
        let result%43#0: bytes = 0x00100017001e0023002a00310038003d
        let result%44#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f
        let result%45#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c64
        let result%46#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f
        let result%47#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f
        let result%48#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f
        let result%49#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let result%50#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f
        let result%51#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
        let array_data%3#2: bytes = 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
        let tmp%3#2: bool = (== dynamic_string_array#5 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172)
        (assert tmp%3#2)
        let (popped%0#2: bytes, dynamic_string_array#6: Encoded(len+len+utf8[][])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
        let tmp%4#2: bool = (== popped%0#2 0x0003426172)
        (assert tmp%4#2)
        let (popped%1#1: bytes, dynamic_string_array#7: Encoded(len+len+utf8[][])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
        let tmp%5#1: bool = (== popped%1#1 0x0003466f6f)
        (assert tmp%5#1)
        let as_bytes%26#0: bytes[8] = (itob 12u)
        let next_item_head%26#0: bytes = 0x000c
        let result%52#0: bytes = 0x000c
        let next_item_len%26#0: uint64 = 7u
        let tail_offset%26#0: uint64 = 19u
        let as_bytes%27#0: bytes[8] = (itob 19u)
        let next_item_head%27#0: bytes = 0x0013
        let result%53#0: bytes = 0x000c0013
        let next_item_len%27#0: uint64 = 7u
        let tail_offset%27#0: uint64 = 26u
        let as_bytes%28#0: bytes[8] = (itob 26u)
        let next_item_head%28#0: bytes = 0x001a
        let result%54#0: bytes = 0x000c0013001a
        let next_item_len%28#0: uint64 = 5u
        let tail_offset%28#0: uint64 = 31u
        let as_bytes%29#0: bytes[8] = (itob 31u)
        let next_item_head%29#0: bytes = 0x001f
        let result%55#0: bytes = 0x000c0013001a001f
        let next_item_len%29#0: uint64 = 7u
        let tail_offset%29#0: uint64 = 38u
        let as_bytes%30#0: bytes[8] = (itob 38u)
        let next_item_head%30#0: bytes = 0x0026
        let result%56#0: bytes = 0x000c0013001a001f0026
        let next_item_len%30#0: uint64 = 7u
        let tail_offset%30#0: uint64 = 45u
        let as_bytes%31#0: bytes[8] = (itob 45u)
        let next_item_head%31#0: bytes = 0x002d
        let result%57#0: bytes = 0x000c0013001a001f0026002d
        let result%58#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f
        let result%59#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f0005576f726c64
        let result%60#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f
        let result%61#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f
        let result%62#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f
        let result%63#0: bytes = 0x000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let array_data%4#2: bytes = 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let tmp%6#1: bool = (== dynamic_string_array#7 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f)
        (assert tmp%6#1)
        let array_of_array#0: Encoded(len+len+uint8[][]) = 0x0000
        let tmp%0#3: bool = 1u
        let result%0#2: bytes = 0x0a
        let array_data%1#3: bytes = 0x00010a
        let data%0#3: bytes = 0x00010a
        let array_of_array#1: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x00010a, 1u)
        let tmp%1#3: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%1#3)
        let result%1#2: bytes = 0x10
        let array_data%2#3: bytes = 0x000110
        let data%1#2: bytes = 0x000110
        let array_of_array#2: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, 0x000110, 1u)
        let tmp%2#3: bool = (== array_of_array#2 0x00020004000700010a000110)
        (assert tmp%2#3)
        let array_head_and_tail%0#2: bytes = ((extract 2 0) array_of_array#2)
        let array_length%0#2: uint64 = array_of_array#2.length
        let lt%0#1: bool = (< 0u array_length%0#2)
        (assert array_length%0#2) // index access is out of bounds
        let item_offset_offset%0#0: uint64 = 0u
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#2 0u)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#2 item_offset%0#0)
        let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
        let item%0#0: bytes = (extract3 array_head_and_tail%0#2 item_offset%0#0 item_head_tail_length%0#0)
        let expr_value_trimmed%0#1: bytes = ((extract 2 0) item%0#0)
        let encoded%0#1: Encoded((uint8)) = 0xff
        let encoded%1#1: bytes = 0xff
        let concatenated%0#1: bytes = (concat expr_value_trimmed%0#1 0xff)
        let len_%0#1: uint64 = (len concatenated%0#1)
        let as_bytes%0#2: bytes[8] = (itob len_%0#1)
        let len_16_bit%0#1: bytes = ((extract 6 2) as_bytes%0#2)
        let concat_result%2#2: bytes = (concat len_16_bit%0#1 concatenated%0#1)
        let array_length%1#1: uint64 = array_of_array#2.length
        let lt%1#1: bool = (< 0u array_length%1#1)
        (assert array_length%1#1) // index access is out of bounds
        let array_of_array#3: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#2, concat_result%2#2, 0u)
        let tmp%3#3: bool = (== array_of_array#3 0x00020004000800020aff000110)
        (assert tmp%3#3)
        let array_head_and_tail%1#1: bytes = ((extract 2 0) array_of_array#3)
        let array_length%2#1: uint64 = array_of_array#3.length
        let lt%2#0: bool = (< 0u array_length%2#1)
        (assert array_length%2#1) // index access is out of bounds
        let item_offset_offset%1#0: uint64 = 0u
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#1 0u)
        let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%1#1 item_offset%1#0)
        let item_head_tail_length%1#0: uint64 = (+ item_length%1#0 2u)
        let item%1#0: bytes = (extract3 array_head_and_tail%1#1 item_offset%1#0 item_head_tail_length%1#0)
        let write_offset%0#0: uint64 = 1u
        let write_offset_with_length_header%0#0: uint64 = 3u
        let updated_array%1#1: bytes = ((replace2 3) item%1#0 0x00)
        let array_length%3#0: uint64 = array_of_array#3.length
        let lt%3#0: bool = (< 0u array_length%3#0)
        (assert array_length%3#0) // index access is out of bounds
        let array_of_array#4: Encoded(len+len+uint8[][]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#3, updated_array%1#1, 0u)
        let tmp%4#3: bool = (== array_of_array#4 0x00020004000800020a00000110)
        (assert tmp%4#3)
        let result%0#3: bytes = 0x0a
        let result%1#3: bytes = 0x0a09
        let array_data%0#4: bytes = 0x0a09
        let result%2#2: bytes = 0x40
        let result%3#2: bytes = 0x4080
        let array_data%1#4: bytes = 0x4080
        let result%4#2: bytes = 0x0a09
        let result%5#2: bytes = 0x0a094080
        let array_of_array#5: Encoded(uint8[2][2]) = 0x0a094080
        let tmp%0#4: bool = 1u
        let result%6#2: bytes = 0xff
        let result%7#2: bytes = 0xfffe
        let array_data%3#3: bytes = 0xfffe
        let write_offset%0#1: uint64 = 0u
        let array_of_array#6: Encoded(uint8[2][2]) = 0xfffe4080
        let tmp%1#4: bool = 1u
        let bytes_offset%0#0: uint64 = 2u
        let encoded_element%0#0: bytes = 0x4080
        let write_offset%1#0: uint64 = 0u
        let updated_array%1#2: bytes = 0x0180
        let write_offset%2#0: uint64 = 2u
        let array_of_array#7: Encoded(uint8[2][2]) = 0xfffe0180
        let tmp%2#4: bool = 1u
        let result%0#4: bytes = 0x01
        let result%1#4: bytes = 0x0102
        let dynamic_uint8_array#5: Encoded(len+uint8[]) = 0x00020102
        let write_offset%0#2: uint64 = 0u
        let write_offset_with_length_header%0#1: uint64 = 2u
        let dynamic_uint8_array#6: Encoded(len+uint8[]) = 0x0002ff02
        let tmp%0#5: bool = 1u
        let result%2#3: bytes = 0x01
        let result%3#3: bytes = 0x0102
        let static_uint8_array#0: Encoded(uint8[2]) = 0x0102
        let write_offset%1#1: uint64 = 1u
        let static_uint8_array#1: Encoded(uint8[2]) = 0x01ff
        let tmp%1#5: bool = 1u
        let encoded_bool%0#1: bytes[1] = 0x80
        let encoded_bool%1#1: bytes[1] = 0x00
        let array_head_and_tail%0#3: bytes = 0x80
        let is_true%0#1: uint64 = 0u
        let array_head_and_tail%1#2: bytes = 0x80
        let dynamic_bool_array#6: Encoded(len+bool1[]) = 0x000280
        let encoded_bool%2#1: bytes[1] = 0x00
        let array_length%0#3: uint64 = 0x000280.length
        let lt%0#2: bool = (< 0u array_length%0#3)
        (assert array_length%0#3) // index access is out of bounds
        let write_offset_with_length_header%1#0: uint64 = 16u
        let is_true%1#1: uint64 = 0u
        let dynamic_bool_array#7: Encoded(len+bool1[]) = 0x000200
        let tmp%2#5: bool = 1u
        let encoded_bool%3#1: bytes[1] = 0x80
        let encoded_bool%4#1: bytes[1] = 0x80
        let array_head_and_tail%2#1: bytes = 0x80
        let is_true%2#1: uint64 = 1u
        let array_head_and_tail%3#1: bytes = 0xc0
        let static_bool_array#0: Encoded(bool1[2]) = 0xc0
        let encoded_bool%5#1: bytes[1] = 0x00
        let array_length%1#2: uint64 = 0xc0.length
        let lt%1#2: bool = (< 1u array_length%1#2)
        (assert lt%1#2) // index access is out of bounds
        let is_true%3#1: uint64 = 0u
        let static_bool_array#1: Encoded(bool1[2]) = 0x80
        let tmp%3#4: bool = 1u
        let encoded_bool%0#2: bytes[1] = 0x80
        let encoded%0#2: Encoded((bool1)) = 0x80
        let encoded%1#2: Encoded((bool1,uint8)) = 0x8032
        let tail%0#0: bytes = 0x00054861707079
        let data_length%0#0: uint64 = 7u
        let current_tail_offset%0#0: uint64 = 13u
        let offset_as_uint16%0#0: bytes = 0x0006
        let encoded%2#1: Encoded((bool1,uint8,len+utf8[])) = 0x80320006
        let tail%1#0: bytes = 0x00054861707079000444617973
        let as_bytes%1#2: bytes[8] = (itob 13u)
        let offset_as_uint16%1#0: bytes = 0x000d
        let encoded%3#1: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x80320006000d
        let test_struct#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x80320006000d00054861707079000444617973
        let encoded_bool%1#2: bytes[1] = 0x00
        let is_true%0#2: uint64 = 0u
        let test_struct#1: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x00320006000d00054861707079000444617973
        let test_struct#2: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x000c0006000d00054861707079000444617973
        let encoded_bool%2#2: bytes[1] = 0x00
        let encoded%5#0: Encoded((bool1)) = 0x00
        let encoded%6#0: Encoded((bool1,uint8)) = 0x000c
        let tail%2#0: bytes = 0x00054861707079
        let data_length%2#0: uint64 = 7u
        let current_tail_offset%2#0: uint64 = 13u
        let offset_as_uint16%2#0: bytes = 0x0006
        let encoded%7#0: Encoded((bool1,uint8,len+utf8[])) = 0x000c0006
        let tail%3#0: bytes = 0x00054861707079000444617973
        let offset_as_uint16%3#0: bytes = 0x000d
        let encoded%8#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x000c0006000d
        let encoded%9#0: bytes = 0x000c0006000d00054861707079000444617973
        let tmp%0#6: bool = 1u
        let item_offset%0#1: uint64 = 6u
        let data_up_to_item%0#0: bytes = 0x000c0006000d
        let next_item_offset%0#0: uint64 = 13u
        let total_data_length%0#0: uint64 = 19u
        let data_beyond_item%0#0: bytes = 0x000444617973
        let updated_data%2#0: bytes = 0x000c0006000d0005486d6d6d6d
        let updated_data%3#0: bytes = 0x000c0006000d0005486d6d6d6d000444617973
        let item_length%0#1: uint64 = 7u
        let new_value_length%0#0: uint64 = 7u
        let tail_offset%0#1: uint64 = 13u
        let tail_offset%1#1: uint64 = 20u
        let tail_offset%2#1: uint64 = 13u
        let tail_offset_bytes%0#0: bytes = 0x000d
        let test_struct#3: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x000c0006000d0005486d6d6d6d000444617973
        let item_offset%1#1: uint64 = 13u
        let data_up_to_item%1#0: bytes = 0x000c0006000d0005486d6d6d6d
        let test_struct#4: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x000c0006000d0005486d6d6d6d00074f682077656c6c
        let encoded_bool%3#2: bytes[1] = 0x00
        let encoded%10#0: Encoded((bool1)) = 0x00
        let encoded%11#0: Encoded((bool1,uint8)) = 0x000c
        let tail%4#0: bytes = 0x0005486d6d6d6d
        let data_length%4#0: uint64 = 7u
        let current_tail_offset%4#0: uint64 = 13u
        let offset_as_uint16%4#0: bytes = 0x0006
        let encoded%12#0: Encoded((bool1,uint8,len+utf8[])) = 0x000c0006
        let tail%5#0: bytes = 0x0005486d6d6d6d00074f682077656c6c
        let offset_as_uint16%5#0: bytes = 0x000d
        let encoded%13#0: Encoded((bool1,uint8,len+utf8[],len+utf8[])) = 0x000c0006000d
        let encoded%14#0: bytes = 0x000c0006000d0005486d6d6d6d00074f682077656c6c
        let tmp%1#6: bool = 1u
        let result%0#5: bytes = 0x01
        let result%1#5: bytes = 0x0102
        let uint8_array#0: Encoded(len+uint8[]) = 0x00020102
        let expr_value_trimmed%0#2: bytes = 0x0102
        let encoded%0#3: Encoded((uint8)) = 0x03
        let encoded%1#3: Encoded((uint8,uint8)) = 0x0304
        let encoded%2#2: bytes = 0x0304
        let concatenated%0#2: bytes = 0x01020304
        let len_%0#2: uint64 = 4u
        let len_16_bit%0#2: bytes = 0x0004
        let array_concat_tuple#0: Encoded(len+uint8[]) = 0x000401020304
        let result%2#4: bytes = 0x01
        let result%3#4: bytes = 0x0102
        let result%4#3: bytes = 0x010203
        let result%5#3: bytes = 0x01020304
        let array_data%1#6: bytes = 0x000401020304
        let tmp%0#7: bool = 1u
        let expr_value_trimmed%1#1: bytes = 0x01020304
        let encoded%3#2: Encoded((uint8)) = 0x05
        let encoded%4#2: bytes = 0x05
        let concatenated%1#1: bytes = 0x0102030405
        let len_%1#1: uint64 = 5u
        let as_bytes%1#3: bytes[8] = (itob 5u)
        let len_16_bit%1#1: bytes = 0x0005
        let array_concat_tuple#1: Encoded(len+uint8[]) = 0x00050102030405
        let result%6#3: bytes = 0x01
        let result%7#3: bytes = 0x0102
        let result%8#2: bytes = 0x010203
        let result%9#2: bytes = 0x01020304
        let result%10#2: bytes = 0x0102030405
        let array_data%2#6: bytes = 0x00050102030405
        let tmp%1#7: bool = 1u
        let next_item_head%0#1: bytes = 0x0004
        let result%11#2: bytes = 0x0004
        let next_item_len%0#1: uint64 = 7u
        let tail_offset%0#2: uint64 = 11u
        let next_item_head%1#1: bytes = 0x000b
        let result%12#2: bytes = 0x0004000b
        let result%13#2: bytes = 0x0004000b000548656c6c6f
        let result%14#2: bytes = 0x0004000b000548656c6c6f0005576f726c64
        let hello_world#0: Encoded(len+len+utf8[][]) = 0x00020004000b000548656c6c6f0005576f726c64
        let as_bytes%4#2: bytes[8] = (itob 2u)
        let next_item_head%2#1: bytes = 0x0002
        let result%15#2: bytes = 0x0002
        let result%16#2: bytes = 0x0002000548656c6c6f
        let array_data%4#3: bytes = 0x00010002000548656c6c6f
        let next_item_head%3#1: bytes = 0x0002
        let result%17#2: bytes = 0x0002
        let result%18#2: bytes = 0x00020005576f726c64
        let array_data%5#0: bytes = 0x000100020005576f726c64
        let array_length%0#4: uint64 = 0x000100020005576f726c64.length
        let array_head_and_tail%0#4: bytes = 0x00020005576f726c64
        let start_of_tail%0#1: uint64 = (* array_length%0#4 2u)
        let total_length%0#1: uint64 = 9u
        let data%0#4: bytes = (substring3 0x00020005576f726c64 start_of_tail%0#1 9u)
        let hello_world_concat#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00010002000548656c6c6f, data%0#4, array_length%0#4)
        let tmp%2#6: bool = (== 0x00020004000b000548656c6c6f0005576f726c64 hello_world_concat#0)
        (assert tmp%2#6)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
        let popped#0: bytes = (setbit 0x00 0u tmp%2#0)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#0: uint64 = (/ tmp%3#0 8u)
        let tmp%5#0: uint64 = (+ 2u tmp%4#0)
        let result#2: bytes = (substring3 result#1 0u tmp%5#0)
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let tmp%1#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%3#0: bytes = (substring3 head_and_tail#0 tmp%2#0 popped_offset#0)
        let head_and_tail#1: bytes = (concat tmp%1#0 tmp%3#0)
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
        let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%6#0: bool = (< write_offset#1 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
        let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
        return tmp%12#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%2#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%2#1 2u)
        let tmp%3#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%5#0)
        let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
        let tmp%8#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%7#0, array_length#0, index#0)
        let tmp%2#0: bytes = (concat size_b#0 tmp%8#0)
        return tmp%2#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%5#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#0: uint64 = (+ tmp%6#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1