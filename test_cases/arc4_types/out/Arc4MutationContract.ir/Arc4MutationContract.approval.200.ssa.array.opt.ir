main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        let aggregate%as_bytes%0#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = 0x0002
        let aggregate%encoded%0#1: bytes = 0x000201
        let aggregate%encoded%1#1: bytes = 0x00020102
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = 0x00020102
        let aggregate%encoded%3#1: bytes = 0x32
        let aggregate%encoded%4#1: Encoded(uint8[]) = 0x32
        let concat%0#0: Encoded(len+uint8[]) = 0x0002010232
        let extract_uint16%0#0: uint64 = 2u
        let add%0#0: uint64 = 3u
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let as_u16_bytes%0#0: bytes = 0x0003
        let dynamic_uint8_array#1: Encoded(len+uint8[]) = 0x0003010232
        let aggregate%len_u16%1#1: bytes = 0x0003
        let aggregate%encoded%5#1: bytes = 0x000301
        let aggregate%encoded%6#1: bytes = 0x00030102
        let aggregate%encoded%7#1: bytes = 0x0003010232
        let aggregate%encoded%8#1: Encoded(len+uint8[]) = 0x0003010232
        let tmp%1#0: bool = 1u
        let extract_to_end%0#0: bytes = 0x010232
        let concat%1#0: Encoded(len+uint8[]) = 0x0003010232010232
        let extract_to_end%1#0: bytes = 0x010232010232
        let len%0#0: uint64 = 6u
        let as_bytes%1#0: bytes[8] = (itob 6u)
        let as_u16_bytes%1#0: bytes = 0x0006
        let dynamic_uint8_array#2: Encoded(len+uint8[]) = 0x0006010232010232
        let aggregate%len_u16%2#1: bytes = 0x0006
        let aggregate%encoded%9#1: bytes = 0x000601
        let aggregate%encoded%10#1: bytes = 0x00060102
        let aggregate%encoded%11#1: bytes = 0x0006010232
        let aggregate%encoded%12#1: bytes = 0x000601023201
        let aggregate%encoded%13#1: bytes = 0x00060102320102
        let aggregate%encoded%14#1: bytes = 0x0006010232010232
        let aggregate%encoded%15#1: Encoded(len+uint8[]) = 0x0006010232010232
        let tmp%2#0: bool = 1u
        let aggregate%encoded%16#1: bytes = 0x04
        let aggregate%encoded%17#1: bytes = 0x045a
        let aggregate%encoded%18#1: Encoded(uint8[]) = 0x045a
        let concat%2#0: Encoded(len+uint8[]) = 0x0006010232010232045a
        let extract_uint16%1#0: uint64 = 6u
        let add%1#0: uint64 = 8u
        let as_bytes%2#0: bytes[8] = (itob 8u)
        let as_u16_bytes%2#0: bytes = 0x0008
        let dynamic_uint8_array#3: Encoded(len+uint8[]) = 0x0008010232010232045a
        let aggregate%len_u16%3#1: bytes = 0x0008
        let aggregate%encoded%19#1: bytes = 0x000801
        let aggregate%encoded%20#1: bytes = 0x00080102
        let aggregate%encoded%21#1: bytes = 0x0008010232
        let aggregate%encoded%22#1: bytes = 0x000801023201
        let aggregate%encoded%23#1: bytes = 0x00080102320102
        let aggregate%encoded%24#1: bytes = 0x0008010232010232
        let aggregate%encoded%25#1: bytes = 0x000801023201023204
        let aggregate%encoded%26#1: bytes = 0x0008010232010232045a
        let aggregate%encoded%27#1: Encoded(len+uint8[]) = 0x0008010232010232045a
        let tmp%4#0: bool = 1u
        let array_length#0: uint64 = 8u
        let length_minus_1#0: uint64 = 7u
        let tmp%2#8: bytes = (itob 7u)
        let tmp%3#7: bytes = 0x0007
        let result#0: bytes = 0x0007010232010232045a
        let tmp%5#6: uint64 = 10u
        let item_location#0: uint64 = 9u
        let popped#1: bytes = 0x5a
        let result#1: bytes = 0x000701023201023204
        let tmp%7#0: bool = 1u
        let aggregate%len_u16%4#1: bytes = 0x0007
        let aggregate%encoded%28#1: bytes = 0x000701
        let aggregate%encoded%29#1: bytes = 0x00070102
        let aggregate%encoded%30#1: bytes = 0x0007010232
        let aggregate%encoded%31#1: bytes = 0x000701023201
        let aggregate%encoded%32#1: bytes = 0x00070102320102
        let aggregate%encoded%33#1: bytes = 0x0007010232010232
        let aggregate%encoded%34#1: bytes = 0x000701023201023204
        let aggregate%encoded%35#1: Encoded(len+uint8[]) = 0x000701023201023204
        let tmp%8#0: bool = 1u
        let aggregate%encoded_bool%0#1: bytes[1] = 0x80
        let aggregate%encoded_bool%1#1: bytes[1] = 0x00
        let aggregate%len_u16%5#1: bytes = 0x0002
        let aggregate%encoded%36#1: bytes = 0x000280
        let aggregate%get_bit%0#1: uint64 = 0u
        let aggregate%set_bit%0#1: bytes = 0x000280
        let dynamic_bool_array#0: Encoded(len+bool1[]) = 0x000280
        let tmp%2#1: bool = 1u
        let aggregate%encoded%38#1: bytes = 0x80
        let aggregate%encoded%39#1: bytes = 0x8000
        let aggregate%encoded%40#1: Encoded(bool8[]) = 0x8000
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x000280, 0x8000, 2u, 8u)
        let tmp%6#1: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%6#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 4u)
        let aggregate%len_u16%6#1: bytes = 0x0004
        let aggregate%encoded%41#1: bytes = 0x000480
        let aggregate%get_bit%1#1: uint64 = 0u
        let aggregate%set_bit%1#1: bytes = 0x000480
        let aggregate%get_bit%2#1: uint64 = 1u
        let aggregate%set_bit%2#1: bytes = 0x0004a0
        let aggregate%get_bit%3#1: uint64 = 0u
        let aggregate%set_bit%3#1: bytes = 0x0004a0
        let aggregate%encoded%42#1: Encoded(len+bool1[]) = 0x0004a0
        let array_length%0#1: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
        let extract_to_end%0#1: bytes = ((extract 2 0) dynamic_bool_array#1)
        let dynamic_bool_array#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, extract_to_end%0#1, array_length%0#1, 1u)
        let aggregate%len_u16%7#1: bytes = 0x0008
        let aggregate%encoded%43#1: bytes = 0x000880
        let aggregate%get_bit%4#1: uint64 = 0u
        let aggregate%set_bit%4#1: bytes = 0x000880
        let aggregate%get_bit%5#1: uint64 = 1u
        let aggregate%set_bit%5#1: bytes = 0x0008a0
        let aggregate%get_bit%6#1: uint64 = 0u
        let aggregate%set_bit%6#1: bytes = 0x0008a0
        let aggregate%get_bit%7#1: uint64 = 1u
        let aggregate%set_bit%7#1: bytes = 0x0008a8
        let aggregate%get_bit%8#1: uint64 = 0u
        let aggregate%set_bit%8#1: bytes = 0x0008a8
        let aggregate%get_bit%9#1: uint64 = 1u
        let aggregate%set_bit%9#1: bytes = 0x0008aa
        let aggregate%get_bit%10#1: uint64 = 0u
        let aggregate%set_bit%10#1: bytes = 0x0008aa
        let aggregate%encoded%44#1: Encoded(len+bool1[]) = 0x0008aa
        let tmp%20#0: bool = (== dynamic_bool_array#2 0x0008aa)
        (assert tmp%20#0)
        let aggregate%encoded%45#1: bytes = 0x80
        let aggregate%encoded%46#1: Encoded(bool8[]) = 0x80
        let dynamic_bool_array#3: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#2, 0x80, 1u, 8u)
        let aggregate%as_bytes%8#1: bytes[8] = (itob 9u)
        let aggregate%len_u16%8#1: bytes = 0x0009
        let aggregate%encoded%47#1: bytes = 0x000980
        let aggregate%get_bit%11#1: uint64 = 0u
        let aggregate%set_bit%11#1: bytes = 0x000980
        let aggregate%get_bit%12#1: uint64 = 1u
        let aggregate%set_bit%12#1: bytes = 0x0009a0
        let aggregate%get_bit%13#1: uint64 = 0u
        let aggregate%set_bit%13#1: bytes = 0x0009a0
        let aggregate%get_bit%14#1: uint64 = 1u
        let aggregate%set_bit%14#1: bytes = 0x0009a8
        let aggregate%get_bit%15#1: uint64 = 0u
        let aggregate%set_bit%15#1: bytes = 0x0009a8
        let aggregate%get_bit%16#1: uint64 = 1u
        let aggregate%set_bit%16#1: bytes = 0x0009aa
        let aggregate%get_bit%17#1: uint64 = 0u
        let aggregate%set_bit%17#1: bytes = 0x0009aa
        let aggregate%encoded%48#1: bytes = 0x0009aa80
        let aggregate%encoded%49#1: Encoded(len+bool1[]) = 0x0009aa80
        let tmp%32#0: bool = (== dynamic_bool_array#3 0x0009aa80)
        (assert tmp%32#0)
        let (tmp%33#0: uint64, dynamic_bool_array#4: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u tmp%33#0)
        let tmp%37#0: bool = (== aggregate%encoded_bool%2#1 0x80)
        (assert tmp%37#0)
        let (tmp%38#0: uint64, dynamic_bool_array#5: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u tmp%38#0)
        let tmp%42#0: bool = (== aggregate%encoded_bool%3#1 0x00)
        (assert tmp%42#0)
        let aggregate%len_u16%9#1: bytes = 0x0007
        let aggregate%encoded%50#1: bytes = 0x000780
        let aggregate%get_bit%18#1: uint64 = 0u
        let aggregate%set_bit%18#1: bytes = 0x000780
        let aggregate%get_bit%19#1: uint64 = 1u
        let aggregate%set_bit%19#1: bytes = 0x0007a0
        let aggregate%get_bit%20#1: uint64 = 0u
        let aggregate%set_bit%20#1: bytes = 0x0007a0
        let aggregate%get_bit%21#1: uint64 = 1u
        let aggregate%set_bit%21#1: bytes = 0x0007a8
        let aggregate%get_bit%22#1: uint64 = 0u
        let aggregate%set_bit%22#1: bytes = 0x0007a8
        let aggregate%get_bit%23#1: uint64 = 1u
        let aggregate%set_bit%23#1: bytes = 0x0007aa
        let aggregate%encoded%51#1: Encoded(len+bool1[]) = 0x0007aa
        let tmp%50#0: bool = (== dynamic_bool_array#5 0x0007aa)
        (assert tmp%50#0)
        let aggregate%length%0#1: uint64 = 5u
        let aggregate%as_bytes%10#1: bytes[8] = (itob 5u)
        let aggregate%length_uint16%0#1: bytes = 0x0005
        let hello#0: Encoded(len+utf8[]) = 0x000548656c6c6f
        let aggregate%length%1#1: uint64 = 5u
        let aggregate%length_uint16%1#1: bytes = 0x0005
        let world#0: Encoded(len+utf8[]) = 0x0005576f726c64
        let aggregate%length%2#1: uint64 = 3u
        let aggregate%length_uint16%2#1: bytes = 0x0003
        let foo#0: Encoded(len+utf8[]) = 0x0003466f6f
        let aggregate%length%3#1: uint64 = 3u
        let aggregate%length_uint16%3#1: bytes = 0x0003
        let bar#0: Encoded(len+utf8[]) = 0x0003426172
        let aggregate%len_u16%10#1: bytes = 0x0002
        let aggregate%tail%0#1: bytes = 0x000548656c6c6f
        let aggregate%data_length%0#1: uint64 = 7u
        let aggregate%current_tail_offset%0#1: uint64 = 11u
        let aggregate%offset_as_uint16%0#1: bytes = 0x0004
        let aggregate%encoded%52#1: bytes = 0x00020004
        let aggregate%tail%1#1: bytes = 0x000548656c6c6f0005576f726c64
        let aggregate%as_bytes%16#1: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%1#1: bytes = 0x000b
        let aggregate%encoded%53#1: bytes = 0x00020004000b
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = 0x00020004000b000548656c6c6f0005576f726c64
        let tmp%0#2: bool = 1u
        let concat%1#1: bytes = 0x0003466f6f0003426172
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00020004000b000548656c6c6f0005576f726c64, 0x0003466f6f0003426172, 2u)
        let tmp%3#2: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%3#2)
        let array_length%0#2: uint64 = (extract_uint16 dynamic_string_array#1 0u)
        let extract_to_end%0#2: bytes = ((extract 2 0) dynamic_string_array#1)
        let start_of_tail%0#0: uint64 = (* array_length%0#2 2u)
        let total_length%0#0: uint64 = (len extract_to_end%0#2)
        let data%0#0: bytes = (substring3 extract_to_end%0#2 start_of_tail%0#0 total_length%0#0)
        let dynamic_string_array#2: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%0#0, array_length%0#2)
        let aggregate%len_u16%11#1: bytes = 0x0008
        let aggregate%tail%2#1: bytes = 0x000548656c6c6f
        let aggregate%data_length%2#1: uint64 = 7u
        let aggregate%current_tail_offset%2#1: uint64 = 23u
        let aggregate%as_bytes%18#1: bytes[8] = (itob 16u)
        let aggregate%offset_as_uint16%2#1: bytes = 0x0010
        let aggregate%encoded%55#1: bytes = 0x00080010
        let aggregate%tail%3#1: bytes = 0x000548656c6c6f0005576f726c64
        let aggregate%data_length%3#1: uint64 = 7u
        let aggregate%current_tail_offset%3#1: uint64 = 30u
        let aggregate%as_bytes%19#1: bytes[8] = (itob 23u)
        let aggregate%offset_as_uint16%3#1: bytes = 0x0017
        let aggregate%encoded%56#1: bytes = 0x000800100017
        let aggregate%tail%4#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f
        let aggregate%data_length%4#1: uint64 = 5u
        let aggregate%current_tail_offset%4#1: uint64 = 35u
        let aggregate%as_bytes%20#1: bytes[8] = (itob 30u)
        let aggregate%offset_as_uint16%4#1: bytes = 0x001e
        let aggregate%encoded%57#1: bytes = 0x000800100017001e
        let aggregate%tail%5#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f0003426172
        let aggregate%data_length%5#1: uint64 = 5u
        let aggregate%current_tail_offset%5#1: uint64 = 40u
        let aggregate%as_bytes%21#1: bytes[8] = (itob 35u)
        let aggregate%offset_as_uint16%5#1: bytes = 0x0023
        let aggregate%encoded%58#1: bytes = 0x000800100017001e0023
        let aggregate%tail%6#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f
        let aggregate%data_length%6#1: uint64 = 7u
        let aggregate%current_tail_offset%6#1: uint64 = 47u
        let aggregate%as_bytes%22#1: bytes[8] = (itob 40u)
        let aggregate%offset_as_uint16%6#1: bytes = 0x0028
        let aggregate%encoded%59#1: bytes = 0x000800100017001e00230028
        let aggregate%tail%7#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c64
        let aggregate%data_length%7#1: uint64 = 7u
        let aggregate%current_tail_offset%7#1: uint64 = 54u
        let aggregate%as_bytes%23#1: bytes[8] = (itob 47u)
        let aggregate%offset_as_uint16%7#1: bytes = 0x002f
        let aggregate%encoded%60#1: bytes = 0x000800100017001e00230028002f
        let aggregate%tail%8#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f
        let aggregate%data_length%8#1: uint64 = 5u
        let aggregate%current_tail_offset%8#1: uint64 = 59u
        let aggregate%as_bytes%24#1: bytes[8] = (itob 54u)
        let aggregate%offset_as_uint16%8#1: bytes = 0x0036
        let aggregate%encoded%61#1: bytes = 0x000800100017001e00230028002f0036
        let aggregate%tail%9#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let aggregate%as_bytes%25#1: bytes[8] = (itob 59u)
        let aggregate%offset_as_uint16%9#1: bytes = 0x003b
        let aggregate%encoded%62#1: bytes = 0x000800100017001e00230028002f0036003b
        let dynamic_string_array#3: Encoded(len+(len+utf8[])[]) = 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
        let tmp%4#2: bool = (== dynamic_string_array#2 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%4#2)
        let aggregate%array_length%0#1: uint64 = 8u
        let aggregate%lt%0#1: bool = 1u
        let aggregate%array_length%1#1: uint64 = 8u
        let aggregate%lt%1#1: bool = 1u
        let dynamic_string_array#4: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172, 0x000548656c6c6f, 3u)
        let aggregate%array_length%2#1: uint64 = (extract_uint16 dynamic_string_array#4 0u)
        let aggregate%lt%2#1: bool = (< 5u aggregate%array_length%2#1)
        (assert aggregate%lt%2#1) // index access is out of bounds
        let dynamic_string_array#5: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#4, 0x000548656c6c6f, 5u)
        let aggregate%len_u16%12#1: bytes = 0x0008
        let aggregate%tail%10#1: bytes = 0x000548656c6c6f
        let aggregate%data_length%10#1: uint64 = 7u
        let aggregate%current_tail_offset%10#1: uint64 = 23u
        let aggregate%offset_as_uint16%10#1: bytes = 0x0010
        let aggregate%encoded%64#1: bytes = 0x00080010
        let aggregate%tail%11#1: bytes = 0x000548656c6c6f0005576f726c64
        let aggregate%data_length%11#1: uint64 = 7u
        let aggregate%current_tail_offset%11#1: uint64 = 30u
        let aggregate%offset_as_uint16%11#1: bytes = 0x0017
        let aggregate%encoded%65#1: bytes = 0x000800100017
        let aggregate%tail%12#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f
        let aggregate%data_length%12#1: uint64 = 5u
        let aggregate%current_tail_offset%12#1: uint64 = 35u
        let aggregate%offset_as_uint16%12#1: bytes = 0x001e
        let aggregate%encoded%66#1: bytes = 0x000800100017001e
        let aggregate%tail%13#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f
        let aggregate%data_length%13#1: uint64 = 7u
        let aggregate%current_tail_offset%13#1: uint64 = 42u
        let aggregate%offset_as_uint16%13#1: bytes = 0x0023
        let aggregate%encoded%67#1: bytes = 0x000800100017001e0023
        let aggregate%tail%14#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f
        let aggregate%data_length%14#1: uint64 = 7u
        let aggregate%current_tail_offset%14#1: uint64 = 49u
        let aggregate%as_bytes%31#1: bytes[8] = (itob 42u)
        let aggregate%offset_as_uint16%14#1: bytes = 0x002a
        let aggregate%encoded%68#1: bytes = 0x000800100017001e0023002a
        let aggregate%tail%15#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let aggregate%data_length%15#1: uint64 = 7u
        let aggregate%current_tail_offset%15#1: uint64 = 56u
        let aggregate%as_bytes%32#1: bytes[8] = (itob 49u)
        let aggregate%offset_as_uint16%15#1: bytes = 0x0031
        let aggregate%encoded%69#1: bytes = 0x000800100017001e0023002a0031
        let aggregate%tail%16#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f
        let aggregate%data_length%16#1: uint64 = 5u
        let aggregate%current_tail_offset%16#1: uint64 = 61u
        let aggregate%as_bytes%33#1: bytes[8] = (itob 56u)
        let aggregate%offset_as_uint16%16#1: bytes = 0x0038
        let aggregate%encoded%70#1: bytes = 0x000800100017001e0023002a00310038
        let aggregate%tail%17#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
        let aggregate%as_bytes%34#1: bytes[8] = (itob 61u)
        let aggregate%offset_as_uint16%17#1: bytes = 0x003d
        let aggregate%encoded%71#1: bytes = 0x000800100017001e0023002a00310038003d
        let aggregate%encoded%72#1: Encoded(len+(len+utf8[])[]) = 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
        let tmp%5#2: bool = (== dynamic_string_array#5 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172)
        (assert tmp%5#2)
        let (tmp%6#2: bytes, dynamic_string_array#6: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
        let tmp%8#2: bool = (== tmp%6#2 0x0003426172)
        (assert tmp%8#2)
        let (tmp%9#1: bytes, dynamic_string_array#7: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
        let tmp%11#1: bool = (== tmp%9#1 0x0003466f6f)
        (assert tmp%11#1)
        let aggregate%len_u16%13#1: bytes = 0x0006
        let aggregate%tail%18#1: bytes = 0x000548656c6c6f
        let aggregate%data_length%18#1: uint64 = 7u
        let aggregate%current_tail_offset%18#1: uint64 = 19u
        let aggregate%as_bytes%36#1: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%18#1: bytes = 0x000c
        let aggregate%encoded%73#1: bytes = 0x0006000c
        let aggregate%tail%19#1: bytes = 0x000548656c6c6f0005576f726c64
        let aggregate%data_length%19#1: uint64 = 7u
        let aggregate%current_tail_offset%19#1: uint64 = 26u
        let aggregate%as_bytes%37#1: bytes[8] = (itob 19u)
        let aggregate%offset_as_uint16%19#1: bytes = 0x0013
        let aggregate%encoded%74#1: bytes = 0x0006000c0013
        let aggregate%tail%20#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f
        let aggregate%data_length%20#1: uint64 = 5u
        let aggregate%current_tail_offset%20#1: uint64 = 31u
        let aggregate%as_bytes%38#1: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%20#1: bytes = 0x001a
        let aggregate%encoded%75#1: bytes = 0x0006000c0013001a
        let aggregate%tail%21#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f
        let aggregate%data_length%21#1: uint64 = 7u
        let aggregate%current_tail_offset%21#1: uint64 = 38u
        let aggregate%as_bytes%39#1: bytes[8] = (itob 31u)
        let aggregate%offset_as_uint16%21#1: bytes = 0x001f
        let aggregate%encoded%76#1: bytes = 0x0006000c0013001a001f
        let aggregate%tail%22#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f
        let aggregate%data_length%22#1: uint64 = 7u
        let aggregate%current_tail_offset%22#1: uint64 = 45u
        let aggregate%as_bytes%40#1: bytes[8] = (itob 38u)
        let aggregate%offset_as_uint16%22#1: bytes = 0x0026
        let aggregate%encoded%77#1: bytes = 0x0006000c0013001a001f0026
        let aggregate%tail%23#1: bytes = 0x000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let aggregate%as_bytes%41#1: bytes[8] = (itob 45u)
        let aggregate%offset_as_uint16%23#1: bytes = 0x002d
        let aggregate%encoded%78#1: bytes = 0x0006000c0013001a001f0026002d
        let aggregate%encoded%79#1: Encoded(len+(len+utf8[])[]) = 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
        let tmp%12#1: bool = (== dynamic_string_array#7 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f)
        (assert tmp%12#1)
        let aggregate%as_bytes%42#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%14#1: bytes = 0x0000
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = 0x0000
        let tmp%0#3: bool = 1u
        let aggregate%as_bytes%43#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%15#1: bytes = 0x0001
        let aggregate%encoded%81#1: bytes = 0x00010a
        let aggregate%encoded%82#1: Encoded(len+uint8[]) = 0x00010a
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x00010a, 1u)
        let tmp%2#3: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%2#3)
        let aggregate%len_u16%16#1: bytes = 0x0001
        let aggregate%encoded%83#1: bytes = 0x000110
        let aggregate%encoded%84#1: Encoded(len+uint8[]) = 0x000110
        let array_of_array#2: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, 0x000110, 1u)
        let tmp%4#3: bool = (== array_of_array#2 0x00020004000700010a000110)
        (assert tmp%4#3)
        let aggregate%array_head_and_tail%2#1: bytes = ((extract 2 0) array_of_array#2)
        let aggregate%array_length%4#1: uint64 = (extract_uint16 array_of_array#2 0u)
        let aggregate%lt%4#1: bool = (< 0u aggregate%array_length%4#1)
        (assert aggregate%array_length%4#1) // index access is out of bounds
        let aggregate%item_offset_offset%2#1: uint64 = 0u
        let aggregate%item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 0u)
        let aggregate%item_length%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%item_offset%2#1)
        let aggregate%item_head_tail_length%2#1: uint64 = (+ aggregate%item_length%2#1 2u)
        let aggregate%item%2#1: bytes = (extract3 aggregate%array_head_and_tail%2#1 aggregate%item_offset%2#1 aggregate%item_head_tail_length%2#1)
        let aggregate%encoded%85#1: bytes = 0xff
        let aggregate%encoded%86#1: Encoded(uint8[]) = 0xff
        let concat%2#1: Encoded(len+uint8[]) = (concat aggregate%item%2#1 0xff) // on error: max array length exceeded
        let extract_uint16%0#1: uint64 = (extract_uint16 aggregate%item%2#1 0u)
        let add%0#1: uint64 = (+ extract_uint16%0#1 1u)
        let as_bytes%0#1: bytes[8] = (itob add%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let replace%0#1: bytes = ((replace2 0) concat%2#1 as_u16_bytes%0#1)
        let array_of_array#3: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#2, replace%0#1, 0u)
        let tmp%6#3: bool = (== array_of_array#3 0x00020004000800020aff000110)
        (assert tmp%6#3)
        let aggregate%array_head_and_tail%4#1: bytes = ((extract 2 0) array_of_array#3)
        let aggregate%array_length%7#1: uint64 = (extract_uint16 array_of_array#3 0u)
        let aggregate%lt%7#1: bool = (< 0u aggregate%array_length%7#1)
        (assert aggregate%array_length%7#1) // index access is out of bounds
        let aggregate%item_offset_offset%4#1: uint64 = 0u
        let aggregate%item_offset%4#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#1 0u)
        let aggregate%item_length%4#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#1 aggregate%item_offset%4#1)
        let aggregate%item_head_tail_length%4#1: uint64 = (+ aggregate%item_length%4#1 2u)
        let aggregate%item%4#1: bytes = (extract3 aggregate%array_head_and_tail%4#1 aggregate%item_offset%4#1 aggregate%item_head_tail_length%4#1)
        let aggregate%write_offset%0#1: uint64 = 1u
        let aggregate%write_offset_with_length_header%0#1: uint64 = 3u
        let aggregate%updated_array%3#1: bytes = ((replace2 3) aggregate%item%4#1 0x00)
        let array_of_array#4: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_replace_byte_length_head(array_of_array#3, aggregate%updated_array%3#1, 0u)
        let tmp%7#3: bool = (== array_of_array#4 0x00020004000800020a00000110)
        (assert tmp%7#3)
        let aggregate%encoded%87#1: bytes = 0x0a
        let aggregate%encoded%88#1: bytes = 0x0a09
        let aggregate%encoded%89#1: Encoded(uint8[2]) = 0x0a09
        let aggregate%encoded%90#1: bytes = 0x40
        let aggregate%encoded%91#1: bytes = 0x4080
        let aggregate%encoded%92#1: Encoded(uint8[2]) = 0x4080
        let aggregate%encoded%93#1: bytes = 0x0a09
        let aggregate%encoded%94#1: bytes = 0x0a094080
        let array_of_array#5: Encoded(uint8[2][2]) = 0x0a094080
        let tmp%0#4: bool = 1u
        let aggregate%encoded%96#1: bytes = 0xff
        let aggregate%encoded%97#1: bytes = 0xfffe
        let aggregate%encoded%98#1: Encoded(uint8[2]) = 0xfffe
        let aggregate%write_offset%1#1: uint64 = 0u
        let array_of_array#6: Encoded(uint8[2][2]) = 0xfffe4080
        let tmp%1#4: bool = 1u
        let aggregate%bytes_offset%2#1: uint64 = 2u
        let aggregate%encoded_element%2#1: bytes = 0x4080
        let aggregate%write_offset%2#1: uint64 = 0u
        let aggregate%updated_array%6#1: bytes = 0x0180
        let aggregate%write_offset%3#1: uint64 = 2u
        let array_of_array#7: Encoded(uint8[2][2]) = 0xfffe0180
        let tmp%2#4: bool = 1u
        let aggregate%write_offset%4#1: uint64 = 0u
        let aggregate%write_offset_with_length_header%1#1: uint64 = 2u
        let dynamic_uint8_array#6: Encoded(len+uint8[]) = 0x0002ff02
        let tmp%0#5: bool = 1u
        let aggregate%encoded%99#1: bytes = 0x01
        let aggregate%encoded%100#1: bytes = 0x0102
        let static_uint8_array#0: Encoded(uint8[2]) = 0x0102
        let aggregate%write_offset%5#1: uint64 = 1u
        let static_uint8_array#1: Encoded(uint8[2]) = 0x01ff
        let tmp%1#5: bool = 1u
        let aggregate%get_bit%24#1: uint64 = 0u
        let aggregate%array_length%9#1: uint64 = 2u
        let aggregate%lt%9#1: bool = 1u
        let aggregate%array_length%10#1: uint64 = 2u
        let aggregate%lt%10#1: bool = 1u
        let aggregate%write_offset_with_length_header%2#1: uint64 = 16u
        let dynamic_bool_array#7: Encoded(len+bool1[]) = 0x000200
        let tmp%5#4: bool = 1u
        let aggregate%encoded%102#1: bytes = 0x80
        let aggregate%get_bit%26#1: uint64 = 1u
        let aggregate%set_bit%24#1: bytes = 0xc0
        let static_bool_array#0: Encoded(bool1[2]) = 0xc0
        let aggregate%lt%11#1: bool = 1u
        let aggregate%lt%12#1: bool = 1u
        let static_bool_array#1: Encoded(bool1[2]) = 0x80
        let tmp%9#2: bool = 1u
        let aggregate%length%4#1: uint64 = 5u
        let aggregate%length_uint16%4#1: bytes = 0x0005
        let aggregate%encoded_value%4#1: bytes = 0x00054861707079
        let aggregate%length%5#1: uint64 = 4u
        let aggregate%length_uint16%5#1: bytes = 0x0004
        let aggregate%encoded_value%5#1: bytes = 0x000444617973
        let aggregate%encoded%104#1: bytes = 0x80
        let aggregate%encoded%105#1: bytes = 0x8032
        let aggregate%tail%24#1: bytes = 0x00054861707079
        let aggregate%data_length%24#1: uint64 = 7u
        let aggregate%current_tail_offset%24#1: uint64 = 13u
        let aggregate%offset_as_uint16%24#1: bytes = 0x0006
        let aggregate%encoded%106#1: bytes = 0x80320006
        let aggregate%tail%25#1: bytes = 0x00054861707079000444617973
        let aggregate%as_bytes%48#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%25#1: bytes = 0x000d
        let aggregate%encoded%107#1: bytes = 0x80320006000d
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x80320006000d00054861707079000444617973
        let test_struct#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x00320006000d00054861707079000444617973
        let test_struct#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x000c0006000d00054861707079000444617973
        let aggregate%encoded%109#1: bytes = 0x00
        let aggregate%encoded%110#1: bytes = 0x000c
        let aggregate%tail%26#1: bytes = 0x00054861707079
        let aggregate%data_length%26#1: uint64 = 7u
        let aggregate%current_tail_offset%26#1: uint64 = 13u
        let aggregate%offset_as_uint16%26#1: bytes = 0x0006
        let aggregate%encoded%111#1: bytes = 0x000c0006
        let aggregate%tail%27#1: bytes = 0x00054861707079000444617973
        let aggregate%offset_as_uint16%27#1: bytes = 0x000d
        let aggregate%encoded%112#1: bytes = 0x000c0006000d
        let aggregate%encoded%113#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x000c0006000d00054861707079000444617973
        let tmp%5#5: bool = 1u
        let aggregate%length%6#1: uint64 = 5u
        let aggregate%length_uint16%6#1: bytes = 0x0005
        let aggregate%encoded_value%6#1: bytes = 0x0005486d6d6d6d
        let aggregate%item_offset%5#1: uint64 = 6u
        let aggregate%data_up_to_item%0#1: bytes = 0x000c0006000d
        let aggregate%next_item_offset%0#1: uint64 = 13u
        let aggregate%total_data_length%0#1: uint64 = 19u
        let aggregate%data_beyond_item%0#1: bytes = 0x000444617973
        let aggregate%updated_data%2#1: bytes = 0x000c0006000d0005486d6d6d6d
        let aggregate%updated_data%3#1: bytes = 0x000c0006000d0005486d6d6d6d000444617973
        let aggregate%item_length%5#1: uint64 = 7u
        let aggregate%new_value_length%0#1: uint64 = 7u
        let aggregate%tail_offset%0#1: uint64 = 13u
        let aggregate%tail_offset%1#1: uint64 = 20u
        let aggregate%tail_offset%2#1: uint64 = 13u
        let aggregate%tail_offset_bytes%0#1: bytes = 0x000d
        let test_struct#3: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x000c0006000d0005486d6d6d6d000444617973
        let aggregate%length%7#1: uint64 = 7u
        let aggregate%length_uint16%7#1: bytes = 0x0007
        let aggregate%encoded_value%7#1: bytes = 0x00074f682077656c6c
        let aggregate%item_offset%6#1: uint64 = 13u
        let aggregate%data_up_to_item%1#1: bytes = 0x000c0006000d0005486d6d6d6d
        let test_struct#4: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x000c0006000d0005486d6d6d6d00074f682077656c6c
        let aggregate%encoded%114#1: bytes = 0x00
        let aggregate%encoded%115#1: bytes = 0x000c
        let aggregate%tail%28#1: bytes = 0x0005486d6d6d6d
        let aggregate%data_length%28#1: uint64 = 7u
        let aggregate%current_tail_offset%28#1: uint64 = 13u
        let aggregate%offset_as_uint16%28#1: bytes = 0x0006
        let aggregate%encoded%116#1: bytes = 0x000c0006
        let aggregate%tail%29#1: bytes = 0x0005486d6d6d6d00074f682077656c6c
        let aggregate%offset_as_uint16%29#1: bytes = 0x000d
        let aggregate%encoded%117#1: bytes = 0x000c0006000d
        let aggregate%encoded%118#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = 0x000c0006000d0005486d6d6d6d00074f682077656c6c
        let tmp%8#4: bool = 1u
        let aggregate%encoded%119#1: bytes = 0x03
        let aggregate%encoded%120#1: bytes = 0x0304
        let aggregate%encoded%121#1: Encoded(uint8[]) = 0x0304
        let concat%0#3: Encoded(len+uint8[]) = 0x000201020304
        let add%0#2: uint64 = 4u
        let as_u16_bytes%0#2: bytes = 0x0004
        let array_concat_tuple#0: Encoded(len+uint8[]) = 0x000401020304
        let aggregate%len_u16%17#1: bytes = 0x0004
        let aggregate%encoded%122#1: bytes = 0x000401
        let aggregate%encoded%123#1: bytes = 0x00040102
        let aggregate%encoded%124#1: bytes = 0x0004010203
        let aggregate%encoded%125#1: bytes = 0x000401020304
        let aggregate%encoded%126#1: Encoded(len+uint8[]) = 0x000401020304
        let tmp%1#7: bool = 1u
        let aggregate%encoded%127#1: bytes = 0x05
        let aggregate%encoded%128#1: Encoded(uint8[]) = 0x05
        let concat%1#3: Encoded(len+uint8[]) = 0x00040102030405
        let extract_uint16%1#1: uint64 = 4u
        let add%1#1: uint64 = 5u
        let as_u16_bytes%1#1: bytes = 0x0005
        let array_concat_tuple#1: Encoded(len+uint8[]) = 0x00050102030405
        let aggregate%len_u16%18#1: bytes = 0x0005
        let aggregate%encoded%129#1: bytes = 0x000501
        let aggregate%encoded%130#1: bytes = 0x00050102
        let aggregate%encoded%131#1: bytes = 0x0005010203
        let aggregate%encoded%132#1: bytes = 0x000501020304
        let aggregate%encoded%133#1: bytes = 0x00050102030405
        let aggregate%encoded%134#1: Encoded(len+uint8[]) = 0x00050102030405
        let tmp%3#6: bool = 1u
        let aggregate%len_u16%19#1: bytes = 0x0001
        let aggregate%tail%30#1: bytes = 0x000548656c6c6f
        let aggregate%offset_as_uint16%30#1: bytes = 0x0002
        let aggregate%encoded%135#1: bytes = 0x00010002
        let aggregate%encoded%136#1: Encoded(len+(len+utf8[])[]) = 0x00010002000548656c6c6f
        let aggregate%len_u16%20#1: bytes = 0x0001
        let aggregate%tail%31#1: bytes = 0x0005576f726c64
        let aggregate%offset_as_uint16%31#1: bytes = 0x0002
        let aggregate%encoded%137#1: bytes = 0x00010002
        let aggregate%encoded%138#1: Encoded(len+(len+utf8[])[]) = 0x000100020005576f726c64
        let array_length%0#3: uint64 = 1u
        let extract_to_end%0#3: bytes = 0x00020005576f726c64
        let start_of_tail%0#1: uint64 = 2u
        let total_length%0#1: uint64 = 9u
        let data%0#1: bytes = 0x0005576f726c64
        let hello_world_concat#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x00010002000548656c6c6f, 0x0005576f726c64, 1u)
        let tmp%4#6: bool = (== 0x00020004000b000548656c6c6f0005576f726c64 hello_world_concat#0)
        (assert tmp%4#6)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <uint64, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let popped#0: uint64 = (getbit result#0 popped_location#0)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let result#2: bytes = (substring3 result#1 0u tmp%10#0)
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let tmp%7#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%8#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%9#0: bytes = (substring3 head_and_tail#0 tmp%8#0 popped_offset#0)
        let head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = (itob length_minus_1#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
        let updated#0: bytes = (concat tmp%12#0 tmp%13#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1