main test_cases.arc4_types.mutation.Arc4MutationContract.approval_program:
    block@0: // L34
        let dynamic_uint8_array#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02)
        let tmp%0#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x32)
        let concat%0#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let dynamic_uint8_array#1: Encoded(len+uint8[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let encoded_array%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x32)
        let tmp%1#0: bool = (== dynamic_uint8_array#1 encoded_array%1#0)
        (assert tmp%1#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) dynamic_uint8_array#1)
        let concat%1#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%1#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let dynamic_uint8_array#2: Encoded(len+uint8[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let encoded_array%2#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32)
        let tmp%2#0: bool = (== dynamic_uint8_array#2 encoded_array%2#0)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x04, 0x5a)
        let concat%2#0: Encoded(len+uint8[]) = (concat dynamic_uint8_array#2 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 dynamic_uint8_array#2 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 2u)
        let as_bytes%2#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let dynamic_uint8_array#3: Encoded(len+uint8[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let encoded_array%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32, 0x04, 0x5a)
        let tmp%4#0: bool = (== dynamic_uint8_array#3 encoded_array%3#0)
        (assert tmp%4#0)
        let (tmp%5#0: bytes, dynamic_uint8_array#4: Encoded(len+uint8[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#3, 1u)
        let popped#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(tmp%5#0)
        let tmp%8#0: bool = (b== popped#0 0x5a)
        (assert tmp%8#0)
        let encoded_array%4#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x32, 0x01, 0x02, 0x32, 0x04)
        let tmp%9#0: bool = (== dynamic_uint8_array#4 encoded_array%4#0)
        (assert tmp%9#0)
        let tmp%0#1: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%1#1: Encoded(bool8) = bytes_encode<bool8>(0u)
        let dynamic_bool_array#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#1, tmp%1#1)
        let tmp%2#1: bool = (== dynamic_bool_array#0 0x000280)
        (assert tmp%2#1)
        let tmp%5#1: Encoded(bool8[]) = bytes_encode<bool8[]>(tmp%0#1, tmp%1#1)
        let dynamic_bool_array#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#0, tmp%5#1, 2u, 8u)
        let tmp%6#1: bool = (== dynamic_bool_array#1 0x0004a0)
        (assert tmp%6#1)
        let encoded_array%1#1: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1)
        let tmp%11#0: bool = (== dynamic_bool_array#1 encoded_array%1#1)
        (assert tmp%11#0)
        let extract_to_end%0#1: bytes = ((extract 2 0) dynamic_bool_array#1)
        let tmp%12#0: uint64 = array_len(dynamic_bool_array#1)
        let dynamic_bool_array#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#1, extract_to_end%0#1, tmp%12#0, 1u)
        let encoded_array%2#1: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1)
        let tmp%21#0: bool = (== dynamic_bool_array#2 encoded_array%2#1)
        (assert tmp%21#0)
        let tmp%23#0: Encoded(bool8[]) = bytes_encode<bool8[]>(tmp%0#1)
        let dynamic_bool_array#3: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_bool_array#2, tmp%23#0, 1u, 8u)
        let encoded_array%3#1: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1)
        let tmp%33#0: bool = (== dynamic_bool_array#3 encoded_array%3#1)
        (assert tmp%33#0)
        let (tmp%34#0: uint64, dynamic_bool_array#4: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
        let tmp%36#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tmp%34#0)
        let tmp%38#0: bool = (== tmp%36#0 tmp%0#1)
        (assert tmp%38#0)
        let (tmp%39#0: uint64, dynamic_bool_array#5: Encoded(len+bool1[])) = _puya_lib.arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
        let tmp%41#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tmp%39#0)
        let tmp%43#0: bool = (== tmp%41#0 tmp%1#1)
        (assert tmp%43#0)
        let encoded_array%4#1: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1, tmp%1#1, tmp%0#1)
        let tmp%51#0: bool = (== dynamic_bool_array#5 encoded_array%4#1)
        (assert tmp%51#0)
        let hello#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello")
        let world#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("World")
        let foo#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Foo")
        let bar#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Bar")
        let dynamic_string_array#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(hello#0, world#0)
        let tmp%4#2: bool = (== dynamic_string_array#0 0x00020004000b000548656c6c6f0005576f726c64)
        (assert tmp%4#2)
        let tmp%5#2: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(foo#0)
        let tmp%6#2: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(bar#0)
        let concat%1#1: bytes = (concat tmp%5#2 tmp%6#2)
        let dynamic_string_array#1: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#0, concat%1#1, 2u)
        let tmp%7#2: bool = (== dynamic_string_array#1 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172)
        (assert tmp%7#2)
        let extract_to_end%0#2: bytes = ((extract 2 0) dynamic_string_array#1)
        let tmp%8#2: uint64 = array_len(dynamic_string_array#1)
        let start_of_tail%0#0: uint64 = (* tmp%8#2 2u)
        let total_length%0#0: uint64 = (len extract_to_end%0#2)
        let data%0#0: bytes = (substring3 extract_to_end%0#2 start_of_tail%0#0 total_length%0#0)
        let dynamic_string_array#2: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%0#0, tmp%8#2)
        let dynamic_string_array#3: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, bar#0, hello#0, world#0, foo#0, bar#0)
        let tmp%9#2: bool = (== dynamic_string_array#2 dynamic_string_array#3)
        (assert tmp%9#2)
        let encoded_value%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(hello#0)
        let dynamic_string_array#4: Encoded(len+(len+utf8[])[]) = replace_value(dynamic_string_array#3, 3u, encoded_value%0#0)
        let dynamic_string_array#5: Encoded(len+(len+utf8[])[]) = replace_value(dynamic_string_array#4, 5u, encoded_value%0#0)
        let encoded_array%3#2: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, hello#0, hello#0, hello#0, foo#0, bar#0)
        let tmp%10#1: bool = (== dynamic_string_array#5 encoded_array%3#2)
        (assert tmp%10#1)
        let (tmp%11#1: bytes, dynamic_string_array#6: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
        let tmp%13#1: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(tmp%11#1)
        let tmp%14#1: bool = (== tmp%13#1 bar#0)
        (assert tmp%14#1)
        let (tmp%15#1: bytes, dynamic_string_array#7: Encoded(len+(len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
        let tmp%17#1: Encoded(len+utf8[]) = decode_bytes<Encoded(len+utf8[])>(tmp%15#1)
        let tmp%18#1: bool = (== tmp%17#1 foo#0)
        (assert tmp%18#1)
        let encoded_array%4#2: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(hello#0, world#0, foo#0, hello#0, hello#0, hello#0)
        let tmp%19#1: bool = (== dynamic_string_array#7 encoded_array%4#2)
        (assert tmp%19#1)
        let array_of_array#0: Encoded(len+(len+uint8[])[]) = bytes_encode<(len+(len+uint8[])[])>()
        let tmp%0#3: bool = (== array_of_array#0 0x0000)
        (assert tmp%0#3)
        let encoded_array%1#3: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x0a)
        let tmp%1#3: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(encoded_array%1#3)
        let array_of_array#1: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#0, tmp%1#3, 1u)
        let tmp%2#3: bool = (== array_of_array#1 0x0001000200010a)
        (assert tmp%2#3)
        let encoded_array%2#3: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x10)
        let tmp%3#3: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(encoded_array%2#3)
        let array_of_array#2: Encoded(len+(len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_of_array#1, tmp%3#3, 1u)
        let tmp%4#3: bool = (== array_of_array#2 0x00020004000700010a000110)
        (assert tmp%4#3)
        let array_item%0#0: Encoded(len+uint8[]) = extract_value(array_of_array#2, 0u)
        let values%0#0: Encoded(len+uint8[]) = decode_bytes<Encoded(len+uint8[])>(array_item%0#0)
        let tmp%5#3: Encoded(uint8[]) = bytes_encode<uint8[]>(0xff)
        let concat%2#1: Encoded(len+uint8[]) = (concat values%0#0 tmp%5#3) // on error: max array length exceeded
        let extract_uint16%0#1: uint64 = (extract_uint16 values%0#0 0u)
        let add%0#1: uint64 = (+ extract_uint16%0#1 1u)
        let as_bytes%0#1: bytes[8] = (itob add%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let replace%0#1: bytes = ((replace2 0) concat%2#1 as_u16_bytes%0#1)
        let encoded_value%0#1: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(replace%0#1)
        let array_of_array#3: Encoded(len+(len+uint8[])[]) = replace_value(array_of_array#2, 0u, encoded_value%0#1)
        let tmp%6#3: bool = (== array_of_array#3 0x00020004000800020aff000110)
        (assert tmp%6#3)
        let encoded_value%1#1: Encoded(uint8) = bytes_encode<uint8>(0x00)
        let array_of_array#4: Encoded(len+(len+uint8[])[]) = replace_value(array_of_array#3, 0u, 1u, encoded_value%1#1)
        let tmp%7#3: bool = (== array_of_array#4 0x00020004000800020a00000110)
        (assert tmp%7#3)
        let encoded_array%0#4: Encoded(uint8[2]) = bytes_encode<uint8[2]>(0x0a, 0x09)
        let encoded_array%1#4: Encoded(uint8[2]) = bytes_encode<uint8[2]>(0x40, 0x80)
        let array_of_array#5: Encoded(uint8[2][2]) = bytes_encode<uint8[2][2]>(encoded_array%0#4, encoded_array%1#4)
        let tmp%0#4: bool = (== array_of_array#5 0x0a094080)
        (assert tmp%0#4)
        let encoded_array%3#3: Encoded(uint8[2]) = bytes_encode<uint8[2]>(0xff, 0xfe)
        let encoded_value%0#2: Encoded(uint8[2]) = bytes_encode<uint8[2]>(encoded_array%3#3)
        let array_of_array#6: Encoded(uint8[2][2]) = replace_value(array_of_array#5, 0u, encoded_value%0#2)
        let tmp%1#4: bool = (== array_of_array#6 0xfffe4080)
        (assert tmp%1#4)
        let encoded_value%1#2: Encoded(uint8) = bytes_encode<uint8>(0x01)
        let array_of_array#7: Encoded(uint8[2][2]) = replace_value(array_of_array#6, 1u, 0u, encoded_value%1#2)
        let tmp%2#4: bool = (== array_of_array#7 0xfffe0180)
        (assert tmp%2#4)
        let encoded_value%0#3: Encoded(uint8) = bytes_encode<uint8>(0xff)
        let dynamic_uint8_array#6: Encoded(len+uint8[]) = replace_value(dynamic_uint8_array#0, 0u, encoded_value%0#3)
        let tmp%0#5: bool = (== dynamic_uint8_array#6 0x0002ff02)
        (assert tmp%0#5)
        let static_uint8_array#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(0x01, 0x02)
        let static_uint8_array#1: Encoded(uint8[2]) = replace_value(static_uint8_array#0, 1u, encoded_value%0#3)
        let tmp%1#5: bool = (== static_uint8_array#1 0x01ff)
        (assert tmp%1#5)
        let encoded_value%2#0: Encoded(bool1) = bytes_encode<bool1>(tmp%1#1)
        let dynamic_bool_array#7: Encoded(len+bool1[]) = replace_value(dynamic_bool_array#0, 0u, encoded_value%2#0)
        let tmp%5#4: bool = (== dynamic_bool_array#7 0x000200)
        (assert tmp%5#4)
        let static_bool_array#0: Encoded(bool1[2]) = bytes_encode<bool1[2]>(tmp%0#1, tmp%0#1)
        let static_bool_array#1: Encoded(bool1[2]) = replace_value(static_bool_array#0, 1u, encoded_value%2#0)
        let tmp%9#3: bool = (== static_bool_array#1 0x80)
        (assert tmp%9#3)
        let tmp%1#6: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Happy")
        let tmp%2#6: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Days")
        let test_struct#0: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = bytes_encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%0#1, 0x32, tmp%1#6, tmp%2#6)
        let test_struct#1: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = replace_value(test_struct#0, 0, encoded_value%2#0)
        let encoded_value%1#4: Encoded(uint8) = bytes_encode<uint8>(0x0c)
        let test_struct#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = replace_value(test_struct#1, 1, encoded_value%1#4)
        let tmp%8#4: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = bytes_encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%1#1, 0x0c, tmp%1#6, tmp%2#6)
        let tmp%9#4: bool = (== test_struct#2 tmp%8#4)
        (assert tmp%9#4)
        let tmp%10#2: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hmmmm")
        let encoded_value%2#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%10#2)
        let test_struct#3: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = replace_value(test_struct#2, 2, encoded_value%2#1)
        let tmp%11#2: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Oh well")
        let encoded_value%3#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%11#2)
        let test_struct#4: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = replace_value(test_struct#3, 3, encoded_value%3#1)
        let tmp%15#2: Encoded(bool1,uint8,(len+utf8[]),(len+utf8[])) = bytes_encode<(bool1,uint8,(len+utf8[]),(len+utf8[]))>(tmp%1#1, 0x0c, tmp%10#2, tmp%11#2)
        let tmp%16#2: bool = (== test_struct#4 tmp%15#2)
        (assert tmp%16#2)
        let tmp%0#7: Encoded(uint8[]) = bytes_encode<uint8[]>(0x03, 0x04)
        let concat%0#3: Encoded(len+uint8[]) = (concat dynamic_uint8_array#0 tmp%0#7) // on error: max array length exceeded
        let add%0#2: uint64 = (+ extract_uint16%0#0 2u)
        let as_bytes%0#2: bytes[8] = (itob add%0#2)
        let as_u16_bytes%0#2: bytes = ((extract 6 2) as_bytes%0#2)
        let array_concat_tuple#0: Encoded(len+uint8[]) = ((replace2 0) concat%0#3 as_u16_bytes%0#2)
        let encoded_array%1#6: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x03, 0x04)
        let tmp%1#7: bool = (== array_concat_tuple#0 encoded_array%1#6)
        (assert tmp%1#7)
        let tmp%2#7: Encoded(uint8[]) = bytes_encode<uint8[]>(0x05)
        let concat%1#3: Encoded(len+uint8[]) = (concat array_concat_tuple#0 tmp%2#7) // on error: max array length exceeded
        let extract_uint16%1#1: uint64 = (extract_uint16 array_concat_tuple#0 0u)
        let add%1#1: uint64 = (+ extract_uint16%1#1 1u)
        let as_bytes%1#1: bytes[8] = (itob add%1#1)
        let as_u16_bytes%1#1: bytes = ((extract 6 2) as_bytes%1#1)
        let array_concat_tuple#1: Encoded(len+uint8[]) = ((replace2 0) concat%1#3 as_u16_bytes%1#1)
        let encoded_array%2#6: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x01, 0x02, 0x03, 0x04, 0x05)
        let tmp%3#6: bool = (== array_concat_tuple#1 encoded_array%2#6)
        (assert tmp%3#6)
        let encoded_array%4#3: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(hello#0)
        let encoded_array%5#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(world#0)
        let extract_to_end%0#3: bytes = ((extract 2 0) encoded_array%5#0)
        let tmp%8#5: uint64 = array_len(encoded_array%5#0)
        let start_of_tail%0#1: uint64 = (* tmp%8#5 2u)
        let total_length%0#1: uint64 = (len extract_to_end%0#3)
        let data%0#1: bytes = (substring3 extract_to_end%0#3 start_of_tail%0#1 total_length%0#1)
        let hello_world_concat#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(encoded_array%4#3, data%0#1, tmp%8#5)
        let tmp%9#5: bool = (== dynamic_string_array#0 hello_world_concat#0)
        (assert tmp%9#5)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <uint64, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let popped#0: uint64 = (getbit result#0 popped_location#0)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let result#2: bytes = (substring3 result#1 0u tmp%10#0)
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
    block@0: // L62
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let tmp%7#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
        let tmp%8#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%9#0: bytes = (substring3 head_and_tail#0 tmp%8#0 popped_offset#0)
        let head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = (itob length_minus_1#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
        let updated#0: bytes = (concat tmp%12#0 tmp%13#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1