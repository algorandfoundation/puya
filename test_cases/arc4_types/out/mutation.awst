contract Arc4MutationContract
{
  approval_program(): bool
  {
    this::dynamic_array_fixed_size()
    this::dynamic_array_bool()
    this::dynamic_array_string()
    this::array_of_array_dynamic()
    this::array_of_array_static()
    this::index_assign()
    this::struct_assign()
    this::array_concat()
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine check_copy_required(): void
  {
    d_array: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(arc4_encode('Test', arc4.dynamic_array<arc4.uint8>))
    nested_in_array: arc4.dynamic_array<arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>>(d_array.copy())
    nested_in_struct: test_cases.arc4_types.mutation.StructWithArray = new test_cases.arc4_types.mutation.StructWithArray(d_array=nested_in_array[0u].copy())
    assert(d_array == nested_in_struct.d_array)
  }
  
  subroutine array_concat(): void
  {
    uint8_array: arc4.dynamic_array<arc4.uint8> = new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8)
    array_concat_tuple: arc4.dynamic_array<arc4.uint8> = uint8_array + (3arc4u8, 4arc4u8)
    assert(array_concat_tuple == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 3arc4u8, 4arc4u8))
    array_concat_tuple.extend((5arc4u8))
    assert(array_concat_tuple == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 3arc4u8, 4arc4u8, 5arc4u8))
    hello_world: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(arc4_encode('Hello', arc4.dynamic_array<arc4.uint8>), arc4_encode('World', arc4.dynamic_array<arc4.uint8>))
    hello_world_concat: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(arc4_encode('Hello', arc4.dynamic_array<arc4.uint8>)) + new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(arc4_encode('World', arc4.dynamic_array<arc4.uint8>))
    assert(hello_world == hello_world_concat)
  }
  
  subroutine array_of_array_dynamic(): void
  {
    array_of_array: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>()
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"0000">)
    array_of_array.extend((new arc4.dynamic_array<arc4.uint8>(10arc4u8)))
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"0001000200010A">)
    array_of_array.extend((new arc4.dynamic_array<arc4.uint8>(16arc4u8)))
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"00020004000700010A000110">)
    array_of_array[0u].extend((255arc4u8))
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"00020004000800020AFF000110">)
    array_of_array[0u][1u]: arc4.uint8 = 0arc4u8
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"00020004000800020A00000110">)
  }
  
  subroutine array_of_array_static(): void
  {
    array_of_array: arc4.static_array<arc4.static_array<arc4.uint8, 2>, 2> = new arc4.static_array<arc4.static_array<arc4.uint8, 2>, 2>(new arc4.static_array<arc4.uint8, 2>(10arc4u8, 9arc4u8), new arc4.static_array<arc4.uint8, 2>(64arc4u8, 128arc4u8))
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"0A094080">)
    array_of_array[0u]: arc4.static_array<arc4.uint8, 2> = new arc4.static_array<arc4.uint8, 2>(255arc4u8, 254arc4u8)
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"FFFE4080">)
    array_of_array[1u][0u]: arc4.uint8 = 1arc4u8
    assert(reinterpret_cast<bytes>(array_of_array) == hex<"FFFE0180">)
  }
  
  subroutine index_assign(): void
  {
    dynamic_uint8_array: arc4.dynamic_array<arc4.uint8> = new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8)
    dynamic_uint8_array[0u]: arc4.uint8 = 255arc4u8
    assert(reinterpret_cast<bytes>(dynamic_uint8_array) == hex<"0002FF02">)
    static_uint8_array: arc4.static_array<arc4.uint8, 2> = new arc4.static_array<arc4.uint8, 2>(1arc4u8, 2arc4u8)
    static_uint8_array[1u]: arc4.uint8 = 255arc4u8
    assert(reinterpret_cast<bytes>(static_uint8_array) == hex<"01FF">)
    dynamic_bool_array: arc4.dynamic_array<arc4.bool> = new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool))
    dynamic_bool_array[0u]: arc4.bool = arc4_encode(false, arc4.bool)
    assert(reinterpret_cast<bytes>(dynamic_bool_array) == hex<"000200">)
    static_bool_array: arc4.static_array<arc4.bool, 2> = new arc4.static_array<arc4.bool, 2>(arc4_encode(true, arc4.bool), arc4_encode(true, arc4.bool))
    static_bool_array[1u]: arc4.bool = arc4_encode(false, arc4.bool)
    assert(reinterpret_cast<bytes>(static_bool_array) == hex<"80">)
  }
  
  subroutine struct_assign(): void
  {
    test_struct: test_cases.arc4_types.mutation.TestStruct = new test_cases.arc4_types.mutation.TestStruct(b_val=arc4_encode(true, arc4.bool), u_val=50arc4u8, s_val_1=arc4_encode('Happy', arc4.dynamic_array<arc4.uint8>), s_val_2=arc4_encode('Days', arc4.dynamic_array<arc4.uint8>))
    test_struct.b_val: arc4.bool = arc4_encode(false, arc4.bool)
    test_struct.u_val: arc4.uint8 = 12arc4u8
    assert(test_struct == new test_cases.arc4_types.mutation.TestStruct(b_val=arc4_encode(false, arc4.bool), u_val=12arc4u8, s_val_1=arc4_encode('Happy', arc4.dynamic_array<arc4.uint8>), s_val_2=arc4_encode('Days', arc4.dynamic_array<arc4.uint8>)))
    test_struct.s_val_1: arc4.dynamic_array<arc4.uint8> = arc4_encode('Hmmmm', arc4.dynamic_array<arc4.uint8>)
    test_struct.s_val_2: arc4.dynamic_array<arc4.uint8> = arc4_encode('Oh well', arc4.dynamic_array<arc4.uint8>)
    assert(test_struct == new test_cases.arc4_types.mutation.TestStruct(b_val=arc4_encode(false, arc4.bool), u_val=12arc4u8, s_val_1=arc4_encode('Hmmmm', arc4.dynamic_array<arc4.uint8>), s_val_2=arc4_encode('Oh well', arc4.dynamic_array<arc4.uint8>)))
  }
  
  subroutine dynamic_array_fixed_size(): void
  {
    dynamic_uint8_array: arc4.dynamic_array<arc4.uint8> = new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8)
    dynamic_uint8_array.extend((50arc4u8))
    assert(dynamic_uint8_array == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 50arc4u8))
    dynamic_uint8_array.extend(dynamic_uint8_array)
    assert(dynamic_uint8_array == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8))
    dynamic_uint8_array.extend((4arc4u8, 90arc4u8))
    assert(dynamic_uint8_array == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8, 4arc4u8, 90arc4u8))
    popped: arc4.uint8 = dynamic_uint8_array.pop()
    assert(reinterpret_cast<biguint>(popped) == reinterpret_cast<biguint>(90arc4u8))
    assert(dynamic_uint8_array == new arc4.dynamic_array<arc4.uint8>(1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8, 4arc4u8))
  }
  
  subroutine dynamic_array_bool(): void
  {
    dynamic_bool_array: arc4.dynamic_array<arc4.bool> = new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool))
    assert(reinterpret_cast<bytes>(dynamic_bool_array) == hex<"000280">)
    dynamic_bool_array.extend((arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool)))
    assert(reinterpret_cast<bytes>(dynamic_bool_array) == hex<"0004A0">)
    assert(dynamic_bool_array == new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool)))
    dynamic_bool_array.extend(dynamic_bool_array)
    assert(dynamic_bool_array == new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool)))
    dynamic_bool_array.extend((arc4_encode(true, arc4.bool)))
    assert(dynamic_bool_array == new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool)))
    assert(dynamic_bool_array.pop() == arc4_encode(true, arc4.bool))
    assert(dynamic_bool_array.pop() == arc4_encode(false, arc4.bool))
    assert(dynamic_bool_array == new arc4.dynamic_array<arc4.bool>(arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool)))
  }
  
  subroutine dynamic_array_string(): void
  {
    hello: arc4.dynamic_array<arc4.uint8> = arc4_encode('Hello', arc4.dynamic_array<arc4.uint8>)
    world: arc4.dynamic_array<arc4.uint8> = arc4_encode('World', arc4.dynamic_array<arc4.uint8>)
    foo: arc4.dynamic_array<arc4.uint8> = arc4_encode('Foo', arc4.dynamic_array<arc4.uint8>)
    bar: arc4.dynamic_array<arc4.uint8> = arc4_encode('Bar', arc4.dynamic_array<arc4.uint8>)
    dynamic_string_array: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(hello, world)
    assert(reinterpret_cast<bytes>(dynamic_string_array) == hex<"00020004000B000548656C6C6F0005576F726C64">)
    dynamic_string_array.extend((foo, bar))
    assert(reinterpret_cast<bytes>(dynamic_string_array) == hex<"00040008000F0016001B000548656C6C6F0005576F726C640003466F6F0003426172">)
    dynamic_string_array.extend(dynamic_string_array)
    assert(dynamic_string_array == new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(hello, world, foo, bar, hello, world, foo, bar))
    dynamic_string_array: arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>> = new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(hello, world, foo, bar, hello, world, foo, bar)
    dynamic_string_array[3u]: arc4.dynamic_array<arc4.uint8> = hello
    dynamic_string_array[5u]: arc4.dynamic_array<arc4.uint8> = hello
    assert(dynamic_string_array == new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(hello, world, foo, hello, hello, hello, foo, bar))
    assert(dynamic_string_array.pop() == bar)
    assert(dynamic_string_array.pop() == foo)
    assert(dynamic_string_array == new arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>(hello, world, foo, hello, hello, hello))
  }
}