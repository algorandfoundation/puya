contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L8
                let some_bytes#0: bytes = "Hello World!"
                let length%0#0: uint64 = (len some_bytes#0)
                let value_as_bytes%1#0: bytes = (itob length%0#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let some_bytes_as_string#0: bytes = (concat value_as_uint16%2#0 some_bytes#0)
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%3#0: uint64 = (!= some_bytes#0 some_bytes_as_string#0)
                (assert tmp%3#0) // Original bytes should not match encoded bytes
                let awst_tmp%4#0: uint64 = (len some_bytes_as_string#0)
                let tmp%5#0: uint64 = (< 2u awst_tmp%4#0)
                goto tmp%5#0 ? block@1 : block@2
            block@1: // ternary_true_L20
                let ternary_result%6#0: uint64 = 2u
                goto block@3
            block@2: // ternary_false_L20
                let ternary_result%6#0: uint64 = awst_tmp%4#0
                goto block@3
            block@3: // ternary_merge_L20
                let base_length%7#0: uint64 = (len some_bytes_as_string#0)
                let tmp%8#0: bytes = (substring3 some_bytes_as_string#0 ternary_result%6#0 base_length%7#0)
                let tmp%9#0: uint64 = (== some_bytes#0 tmp%8#0)
                (assert tmp%9#0) // Original bytes should match encoded if we strip the length header
                let tmp%10#0: uint64 = (== some_bytes#0 some_bytes_as_bytes_again#0)
                (assert tmp%10#0)
                let hello#0: bytes = "\x00\x05Hello"
                let space#0: bytes = "\x00\x01 "
                let world#0: bytes = "\x00\x06World!"
                let array_length%11#0: uint64 = (extract_uint16 space#0 0u)
                let data%12#0: bytes = ((extract 2 0) space#0)
                let concat_result%13#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(hello#0, data%12#0, array_length%11#0)
                let array_length%14#0: uint64 = (extract_uint16 world#0 0u)
                let data%15#0: bytes = ((extract 2 0) world#0)
                let concat_result%16#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(concat_result%13#0, data%15#0, array_length%14#0)
                let tmp%17#0: uint64 = (== "\x00\x0cHello World!" concat_result%16#0)
                (assert tmp%17#0)
                let thing#0: bytes = "\x00\x02hi"
                let array_length%18#0: uint64 = (extract_uint16 thing#0 0u)
                let data%19#0: bytes = ((extract 2 0) thing#0)
                let concat_result%20#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(thing#0, data%19#0, array_length%18#0)
                let thing#0: bytes = concat_result%20#0
                let tmp%21#0: uint64 = (== thing#0 "\x00\x04hihi")
                (assert tmp%21#0)
                let array_length%22#0: uint64 = (extract_uint16 "\x00\x01b" 0u)
                let data%23#0: bytes = ((extract 2 0) "\x00\x01b")
                let concat_result%24#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size("\x00\x01a", data%23#0, array_length%22#0)
                let array_length%25#0: uint64 = (extract_uint16 "\x00\x01c" 0u)
                let data%26#0: bytes = ((extract 2 0) "\x00\x01c")
                let concat_result%27#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(concat_result%24#0, data%26#0, array_length%25#0)
                let array_length%28#0: uint64 = (extract_uint16 "\x00\x01d" 0u)
                let data%29#0: bytes = ((extract 2 0) "\x00\x01d")
                let concat_result%30#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(concat_result%27#0, data%29#0, array_length%28#0)
                let value#0: bytes = concat_result%30#0
                let array_length%31#0: uint64 = (extract_uint16 "\x00\x01e" 0u)
                let data%32#0: bytes = ((extract 2 0) "\x00\x01e")
                let concat_result%33#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(value#0, data%32#0, array_length%31#0)
                let value#0: bytes = concat_result%33#0
                let array_length%34#0: uint64 = (extract_uint16 "\x00\x01f" 0u)
                let data%35#0: bytes = ((extract 2 0) "\x00\x01f")
                let concat_result%36#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(value#0, data%35#0, array_length%34#0)
                let value#0: bytes = concat_result%36#0
                let array_length%37#0: uint64 = (extract_uint16 "\x00\x01g" 0u)
                let data%38#0: bytes = ((extract 2 0) "\x00\x01g")
                let concat_result%39#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size(value#0, data%38#0, array_length%37#0)
                let value#0: bytes = concat_result%39#0
                let tmp%40#0: uint64 = (== "\x00\x07abcdefg" value#0)
                (assert tmp%40#0)
                return 1u
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_fixed_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L190
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_length#0)
                let new_length_header#0: bytes = ((extract 6 0) tmp%0#0)
                let tmp%1#0: bytes = ((extract 2 0) source#0)
                let tmp%2#0: bytes = (concat new_length_header#0 tmp%1#0)
                let tmp%3#0: bytes = (concat tmp%2#0 new_items_bytes#0)
                return tmp%3#0
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L42
                return 1u