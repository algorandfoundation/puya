#pragma version 10

test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    // arc4_types/string.py:11
    // some_bytes_as_string = String.encode(some_bytes)
    int 12
    itob
    extract 6 2
    // arc4_types/string.py:9
    // some_bytes = Bytes(b"Hello World!")
    byte "Hello World!"
    // arc4_types/string.py:11
    // some_bytes_as_string = String.encode(some_bytes)
    concat
    dupn 2
    // arc4_types/string.py:13
    // some_bytes_as_bytes_again = some_bytes_as_string.decode()
    extract 2 0
    swap
    // arc4_types/string.py:9
    // some_bytes = Bytes(b"Hello World!")
    byte "Hello World!"
    // arc4_types/string.py:16
    // some_bytes != some_bytes_as_string.bytes
    dig 1
    !=
    // arc4_types/string.py:15-17
    // assert (
    //     some_bytes != some_bytes_as_string.bytes
    // ), "Original bytes should not match encoded bytes"
    assert // Original bytes should not match encoded bytes
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    len
    dup
    int 2
    >
    bz main_ternary_false@2
    int 2
    b main_ternary_merge@3

main_ternary_false@2:
    dup

main_ternary_merge@3:
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    dig 3
    swap
    dig 2
    substring3
    // arc4_types/string.py:9
    // some_bytes = Bytes(b"Hello World!")
    byte "Hello World!"
    // arc4_types/string.py:20
    // some_bytes == some_bytes_as_string.bytes[2:]
    ==
    // arc4_types/string.py:19-21
    // assert (
    //     some_bytes == some_bytes_as_string.bytes[2:]
    // ), "Original bytes should match encoded if we strip the length header"
    assert // Original bytes should match encoded if we strip the length header
    // arc4_types/string.py:9
    // some_bytes = Bytes(b"Hello World!")
    byte "Hello World!"
    // arc4_types/string.py:23
    // assert some_bytes == some_bytes_as_bytes_again
    dig 2
    ==
    assert
    // arc4_types/string.py:29
    // assert String("Hello World!") == (hello + space + world)
    int 6
    itob
    extract 6 0
    byte "Hello "
    concat
    extract 2 0
    byte "World!"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    byte "\x00\x0cHello World!"
    ==
    assert
    // arc4_types/string.py:32
    // thing += thing
    int 4
    itob
    extract 6 0
    byte "hihi"
    concat
    // arc4_types/string.py:33
    // assert thing == String("hihi")
    byte "\x00\x04hihi"
    ==
    assert
    // arc4_types/string.py:35
    // value = String("a") + Bytes(b"b") + b"c" + "d"
    int 2
    itob
    extract 6 0
    byte "ab"
    concat
    extract 2 0
    byte "c"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    extract 2 0
    byte "d"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:36
    // value += "e"
    extract 2 0
    byte "e"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:37
    // value += b"f"
    extract 2 0
    byte "f"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:38
    // value += Bytes(b"g")
    extract 2 0
    byte "g"
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    // arc4_types/string.py:39
    // assert String("abcdefg") == value
    byte "\x00\x07abcdefg"
    ==
    assert
    // arc4_types/string.py:40
    // return True
    int 1
    return
