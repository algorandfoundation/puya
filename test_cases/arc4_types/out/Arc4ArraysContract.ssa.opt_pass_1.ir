contract test_cases.arc4_types.array.Arc4ArraysContract:
    program approval:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> bool:
            block@0: // L24
                let result%0#0: bytes = 0x01
                let result%1#0: bytes = (concat result%0#0 0x02)
                let dynamic_uint8_array#0: bytes = (concat 0x0002 result%1#0)
                let total#0: uint64 = 0u
                let array_length%0#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
                let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L27
                let array_head_and_tail%0#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let uint8_item#0: bytes = (extract3 array_head_and_tail%0#0 item_index_internal%0#1 1u) // on error: Index access is out of bounds
                let tmp%0#0: uint64 = (btoi uint8_item#0)
                let total#2: uint64 = (+ total#1 tmp%0#0)
                let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
                goto block@1
            block@4: // after_for_L27
                let tmp%1#0: bool = (== total#1 3u)
                (assert tmp%1#0) // Total should be sum of dynamic_uint8_array items
                let result%2#0: bytes = 0x0001
                let aliased_dynamic#0: bytes = (concat 0x0001 result%2#0)
                let array_length%1#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L32
                let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
                let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
                let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L32
                let array_head_and_tail%1#0: bytes = ((extract 2 0) aliased_dynamic#0)
                let item_offset%1#0: uint64 = (* item_index_internal%1#1 2u)
                let uint16_item#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 2u) // on error: Index access is out of bounds
                let tmp%2#0: uint64 = (btoi uint16_item#0)
                let total#4: uint64 = (+ total#3 tmp%2#0)
                let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
                goto block@5
            block@8: // after_for_L32
                let tmp%3#0: bool = (== total#3 4u)
                (assert tmp%3#0) // Total should now include sum of aliased_dynamic items
                let length%0#0: uint64 = 5u
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Hello")
                let length%1#0: uint64 = 5u
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "World")
                let next_item_head%0#0: bytes = 0x0004
                let next_item_len%0#0: uint64 = (len encoded_value%0#0)
                let tail_offset%0#0: uint64 = (+ 4u next_item_len%0#0)
                let as_bytes%3#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let result%4#0: bytes = (concat next_item_head%0#0 next_item_head%1#0)
                let next_item_len%1#0: uint64 = (len encoded_value%1#0)
                let result%5#0: bytes = (concat result%4#0 encoded_value%0#0)
                let result%6#0: bytes = (concat result%5#0 encoded_value%1#0)
                let dynamic_string_array#0: bytes = (concat 0x0002 result%6#0)
                let tmp%4#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let tmp%5#0: bool = (== tmp%4#0 2u)
                (assert tmp%5#0)
                let array_head_and_tail%2#0: bytes = ((extract 2 0) dynamic_string_array#0)
                (assert tmp%4#0) // Index access is out of bounds
                let item_offset_offset%0#0: uint64 = 0u
                let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%0#0)
                let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset%2#0)
                let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%6#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 item_head_tail_length%0#0)
                let length%2#0: uint64 = 5u
                let as_bytes%4#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "Hello")
                let tmp%7#0: bool = (== tmp%6#0 encoded_value%2#0)
                (assert tmp%7#0)
                let result#0: bytes = ""
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L39
                let index#0: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#3 <- block@13)
                let result#2: bytes = φ(result#0 <- block@8, result#4 <- block@13)
                let continue_looping%2#0: bool = (< index#0 tmp%4#0)
                goto continue_looping%2#0 ? block@10 : block@15
            block@10: // for_body_L39
                let item_offset_offset%1#0: uint64 = (* index#0 2u)
                let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%1#0)
                let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset%3#0)
                let item_head_tail_length%1#0: uint64 = (+ item_length%1#0 2u)
                let string_item#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%3#0 item_head_tail_length%1#0)
                let tmp%8#0: bool = (! index#0)
                goto index#0 ? block@12 : block@11
            block@11: // if_body_L40
                let result#1: bytes = ((extract 2 0) string_item#0)
                goto block@13
            block@12: // else_body_L40
                let tmp%9#0: bytes = ((extract 2 0) string_item#0)
                let tmp%10#0: bytes = (concat " " tmp%9#0)
                let result#3: bytes = (concat result#2 tmp%10#0)
                goto block@13
            block@13: // after_if_else_L40
                let result#4: bytes = φ(result#1 <- block@11, result#3 <- block@12)
                let item_index_internal%2#3: uint64 = (+ index#0 1u)
                goto block@9
            block@15: // after_for_L39
                let tmp%11#0: bool = (== result#2 "Hello World")
                (assert tmp%11#0)
                let result%7#0: bytes = 0x00000001
                let result%8#0: bytes = (concat result%7#0 0x0000000a)
                let result%9#0: bytes = (concat result%8#0 0x000000ff)
                let static_uint32_array#0: bytes = (concat result%9#0 0x00000080)
                let item_index_internal%3#0: uint64 = 0u
                goto block@16
            block@16: // for_header_L49
                let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@15, item_index_internal%3#2 <- block@17)
                let total#5: uint64 = φ(total#3 <- block@15, total#6 <- block@17)
                let continue_looping%3#0: bool = (< item_index_internal%3#1 4u)
                goto continue_looping%3#0 ? block@17 : block@19
            block@17: // for_body_L49
                let item_offset%4#0: uint64 = (* item_index_internal%3#1 4u)
                let uint32_item#0: bytes = (extract3 static_uint32_array#0 item_offset%4#0 4u) // on error: Index access is out of bounds
                let tmp%12#0: uint64 = (btoi uint32_item#0)
                let total#6: uint64 = (+ total#5 tmp%12#0)
                let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
                goto block@16
            block@19: // after_for_L49
                let tmp%13#0: bool = (== total#5 398u)
                (assert tmp%13#0)
                let aliased_static#0: bytes = 0x65
                let item_offset%5#0: uint64 = 0u
                let tmp%14#0: bytes = (extract3 aliased_static#0 item_offset%5#0 1u) // on error: Index access is out of bounds
                let tmp%15#0: uint64 = (btoi tmp%14#0)
                let item_offset%6#0: uint64 = 0u
                let tmp%16#0: bytes = (extract3 aliased_static#0 item_offset%6#0 1u) // on error: Index access is out of bounds
                let tmp%17#0: uint64 = (btoi tmp%16#0)
                let tmp%18#0: uint64 = (+ tmp%15#0 tmp%17#0)
                let tmp%19#0: bool = (== tmp%18#0 202u)
                (assert tmp%19#0)
                let length%3#0: uint64 = 4u
                let as_bytes%5#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "Ping")
                let length%4#0: uint64 = 4u
                let as_bytes%6#0: bytes = (itob length%4#0)
                let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
                let encoded_value%4#0: bytes = (concat length_uint16%4#0 "Pong")
                let next_item_head%2#0: bytes = 0x0004
                let next_item_len%2#0: uint64 = (len encoded_value%3#0)
                let tail_offset%2#0: uint64 = (+ 4u next_item_len%2#0)
                let as_bytes%8#0: bytes = (itob tail_offset%2#0)
                let next_item_head%3#0: bytes = ((extract 6 2) as_bytes%8#0)
                let result%13#0: bytes = (concat next_item_head%2#0 next_item_head%3#0)
                let next_item_len%3#0: uint64 = (len encoded_value%4#0)
                let result%14#0: bytes = (concat result%13#0 encoded_value%3#0)
                let static_string_array#0: bytes = (concat result%14#0 encoded_value%4#0)
                let result#5: bytes = ""
                let item_index_internal%4#0: uint64 = 0u
                goto block@20
            block@20: // for_header_L63
                let index#2: uint64 = φ(item_index_internal%4#0 <- block@19, item_index_internal%4#3 <- block@24)
                let result#7: bytes = φ(result#5 <- block@19, result#9 <- block@24)
                let continue_looping%4#0: bool = (< index#2 2u)
                goto continue_looping%4#0 ? block@21 : block@26
            block@21: // for_body_L63
                let item_offset_offset%2#0: uint64 = (* index#2 2u)
                let item_offset%7#0: uint64 = (extract_uint16 static_string_array#0 item_offset_offset%2#0)
                let item_length%2#0: uint64 = (extract_uint16 static_string_array#0 item_offset%7#0)
                let item_head_tail_length%2#0: uint64 = (+ item_length%2#0 2u)
                let string_item#1: bytes = (extract3 static_string_array#0 item_offset%7#0 item_head_tail_length%2#0)
                let tmp%20#0: bool = (! index#2)
                goto index#2 ? block@23 : block@22
            block@22: // if_body_L64
                let result#6: bytes = ((extract 2 0) string_item#1)
                goto block@24
            block@23: // else_body_L64
                let tmp%21#0: bytes = ((extract 2 0) string_item#1)
                let tmp%22#0: bytes = (concat " " tmp%21#0)
                let result#8: bytes = (concat result#7 tmp%22#0)
                goto block@24
            block@24: // after_if_else_L64
                let result#9: bytes = φ(result#6 <- block@22, result#8 <- block@23)
                let item_index_internal%4#3: uint64 = (+ index#2 1u)
                goto block@20
            block@26: // after_for_L63
                let tmp%23#0: bool = (== result#7 "Ping Pong")
                (assert tmp%23#0)
                test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array("Testing 123")
                return 1u
        
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
            block@0: // L75
                let tmp%0#0: bytes = (sha3_256 commitment_args_concat#0)
                return tmp%0#0
    
    program clear-state:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.clear_state_program() -> bool:
            block@0: // L79
                return 1u