// Op                                                                                              Stack (out)
// test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program() -> uint64:
main_block@0:
    // arc4_types/structs.py:27
    // coord_1 = Vector(x=Decimal("35.382882839"), y=Decimal("150.382884930"))
    byte 0x000000083cfbf217000000230384b842                                                        0x000000083cfbf217000000230384b842
    // arc4_types/structs.py:28
    // coord_2 = Vector(y=Decimal("150.382884930"), x=Decimal("35.382882839"))
    byte 0x000000083cfbf217000000230384b842                                                        0x000000083cfbf217000000230384b842,0x000000083cfbf217000000230384b842
    // arc4_types/structs.py:29
    // coord_3 = add(coord_1.copy(), coord_2.copy())
    callsub add                                                                                    coord_3#0,add%1#0,add%2#0
    pop 1                                                                                          coord_3#0,add%1#0
    pop 1                                                                                          coord_3#0
    l-store coord_3#0 0                                                                            coord_3#0
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    l-load-copy coord_3#0 0                                                                        coord_3#0,coord_3#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                         coord_3#0,val#0
    x-store val#0                                                                                  (洧뎶) val#0 | coord_3#0
    l-load coord_3#0 0                                                                             (洧뎶) val#0 | coord_3#0
    extract 8 8 // on error: Index access is out of bounds                                         (洧뎶) val#0 | val#2
    f-store val#2                                                                                  (洧뎽) val#2 | (洧뎶) val#0 |
    int 0                                                                                          (洧뎽) val#2 | (洧뎶) val#0 | loop_counter%0#0
    f-store loop_counter%0#0                                                                       (洧뎽) val#2,loop_counter%0#0 | (洧뎶) val#0 |
    // Implicit fall through to main_for_body@1                                                    (洧뎽) val#2,loop_counter%0#0 | (洧뎶) val#0 |

main_for_body@1:                                                                                   (洧뎽) val#2,loop_counter%0#0 | (洧뎶) val#0 |
    // arc4_types/structs.py:31
    // log(val.bytes)
    x-load val#0                                                                                   (洧뎽) val#2,loop_counter%0#0 | val#0
    log                                                                                            (洧뎽) val#2,loop_counter%0#0 |
    // arc4_types/structs.py:30
    // for val in (coord_3.x, coord_3.y):
    f-load loop_counter%0#0                                                                        (洧뎽) val#2,loop_counter%0#0 | loop_counter%0#0
    bnz main_after_for@4                                                                           (洧뎽) val#2,loop_counter%0#0 |
    // Implicit fall through to main_for_header_1@3                                                (洧뎽) val#2,loop_counter%0#0 |

main_for_header_1@3:                                                                               (洧뎽) val#2,loop_counter%0#0 |
    int 1                                                                                          (洧뎽) val#2,loop_counter%0#0 | loop_counter%0#0
    f-store loop_counter%0#0                                                                       (洧뎽) val#2,loop_counter%0#0 |
    f-load val#2                                                                                   (洧뎽) val#2,loop_counter%0#0 | val#0
    x-store val#0                                                                                  (洧뎽) val#2,loop_counter%0#0 | (洧뎶) val#0 |
    b main_for_body@1                                                                              (洧뎽) val#2,loop_counter%0#0 | (洧뎶) val#0 |

main_after_for@4:                                                                                  (洧뎽) val#2,loop_counter%0#0 |
    // arc4_types/structs.py:33
    // flags = Flags(a=arc4.Bool(True), b=arc4.Bool(False), c=arc4.Bool(True), d=arc4.Bool(False))
    byte 0xa0                                                                                      (洧뎽) val#2,loop_counter%0#0 | 0xa0
    // arc4_types/structs.py:34
    // check(flags.copy())
    callsub check                                                                                  (洧뎽) val#2,loop_counter%0#0 | check%0#0
    pop 1                                                                                          (洧뎽) val#2,loop_counter%0#0 |
    // arc4_types/structs.py:33
    // flags = Flags(a=arc4.Bool(True), b=arc4.Bool(False), c=arc4.Bool(True), d=arc4.Bool(False))
    byte 0xa0                                                                                      (洧뎽) val#2,loop_counter%0#0 | 0xa0
    // arc4_types/structs.py:35
    // log(flags.bytes)
    log                                                                                            (洧뎽) val#2,loop_counter%0#0 |
    // arc4_types/structs.py:38
    // nested_decode(VectorFlags(coord_1.copy(), flags.copy()))
    byte 0x000000083cfbf217000000230384b842a0                                                      (洧뎽) val#2,loop_counter%0#0 | 0x000000083cfbf217000000230384b842a0
    callsub nested_decode                                                                          (洧뎽) val#2,loop_counter%0#0 | nested_decode%0#0
    pop 1                                                                                          (洧뎽) val#2,loop_counter%0#0 |
    // arc4_types/structs.py:40
    // return True
    int 1                                                                                          (洧뎽) val#2,loop_counter%0#0 | 1
    return                                                                                         (洧뎽) val#2,loop_counter%0#0 |


// test_cases.arc4_types.structs.add(v1: bytes, v2: bytes) -> bytes, bytes, bytes:
add:                                                                                               (洧도) v1#0,v2#0 |
    // arc4_types/structs.py:46-47
    // @subroutine
    // def add(v1: Vector, v2: Vector) -> Vector:
    proto 2 3                                                                                      (洧도) v1#0,v2#0 |

add_block@0:                                                                                       (洧도) v1#0,v2#0 |
    // arc4_types/structs.py:49
    // x=add_decimal(v1.x, v2.x),
    p-load v1#0                                                                                    (洧도) v1#0,v2#0 | v1#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                         (洧도) v1#0,v2#0 | tmp%0#0
    p-load v2#0                                                                                    (洧도) v1#0,v2#0 | tmp%0#0,v2#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                         (洧도) v1#0,v2#0 | tmp%0#0,tmp%1#0
    l-load tmp%0#0 1                                                                               (洧도) v1#0,v2#0 | tmp%1#0,tmp%0#0
    l-load tmp%1#0 1                                                                               (洧도) v1#0,v2#0 | tmp%0#0,tmp%1#0
    callsub add_decimal                                                                            (洧도) v1#0,v2#0 | tmp%2#0
    // arc4_types/structs.py:50
    // y=add_decimal(v1.y, v2.y),
    p-load v1#0                                                                                    (洧도) v1#0,v2#0 | tmp%2#0,v1#0 (copy)
    extract 8 8 // on error: Index access is out of bounds                                         (洧도) v1#0,v2#0 | tmp%2#0,tmp%3#0
    p-load v2#0                                                                                    (洧도) v1#0,v2#0 | tmp%2#0,tmp%3#0,v2#0 (copy)
    extract 8 8 // on error: Index access is out of bounds                                         (洧도) v1#0,v2#0 | tmp%2#0,tmp%3#0,tmp%4#0
    l-load tmp%3#0 1                                                                               (洧도) v1#0,v2#0 | tmp%2#0,tmp%4#0,tmp%3#0
    l-load tmp%4#0 1                                                                               (洧도) v1#0,v2#0 | tmp%2#0,tmp%3#0,tmp%4#0
    callsub add_decimal                                                                            (洧도) v1#0,v2#0 | tmp%2#0,tmp%5#0
    // arc4_types/structs.py:48-51
    // return Vector(
    //     x=add_decimal(v1.x, v2.x),
    //     y=add_decimal(v1.y, v2.y),
    // )
    l-load tmp%2#0 1                                                                               (洧도) v1#0,v2#0 | tmp%5#0,tmp%2#0
    l-load tmp%5#0 1                                                                               (洧도) v1#0,v2#0 | tmp%2#0,tmp%5#0
    concat                                                                                         (洧도) v1#0,v2#0 | encoded_tuple_buffer%2#0
    p-load v1#0                                                                                    (洧도) v1#0,v2#0 | encoded_tuple_buffer%2#0,v1#0 (copy)
    p-load v2#0                                                                                    (洧도) v1#0,v2#0 | encoded_tuple_buffer%2#0,v1#0 (copy),v2#0 (copy)
    retsub                                                                                         encoded_tuple_buffer%2#0,v1#0 (copy),v2#0 (copy)


// test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
add_decimal:                                                                                       (洧도) x#0,y#0 |
    // arc4_types/structs.py:68-69
    // @subroutine
    // def add_decimal(x: Decimal, y: Decimal) -> Decimal:
    proto 2 1                                                                                      (洧도) x#0,y#0 |

add_decimal_block@0:                                                                               (洧도) x#0,y#0 |
    // arc4_types/structs.py:70
    // return Decimal.from_bytes(op.itob(op.btoi(x.bytes) + op.btoi(y.bytes)))
    p-load x#0                                                                                     (洧도) x#0,y#0 | x#0 (copy)
    btoi                                                                                           (洧도) x#0,y#0 | tmp%0#0
    p-load y#0                                                                                     (洧도) x#0,y#0 | tmp%0#0,y#0 (copy)
    btoi                                                                                           (洧도) x#0,y#0 | tmp%0#0,tmp%1#0
    l-load tmp%0#0 1                                                                               (洧도) x#0,y#0 | tmp%1#0,tmp%0#0
    l-load tmp%1#0 1                                                                               (洧도) x#0,y#0 | tmp%0#0,tmp%1#0
    +                                                                                              (洧도) x#0,y#0 | tmp%2#0
    itob                                                                                           (洧도) x#0,y#0 | tmp%3#0
    retsub                                                                                         tmp%3#0


// test_cases.arc4_types.structs.check(flags: bytes) -> bytes:
check:                                                                                             (洧도) flags#0 |
    // arc4_types/structs.py:54-55
    // @subroutine
    // def check(flags: Flags) -> None:
    proto 1 1                                                                                      (洧도) flags#0 |

check_block@0:                                                                                     (洧도) flags#0 |
    // arc4_types/structs.py:56
    // assert flags.a.native
    p-load flags#0                                                                                 (洧도) flags#0 | flags#0 (copy)
    int 0                                                                                          (洧도) flags#0 | flags#0 (copy),0
    getbit                                                                                         (洧도) flags#0 | is_true%0#0
    byte 0x00                                                                                      (洧도) flags#0 | is_true%0#0,0x00
    int 0                                                                                          (洧도) flags#0 | is_true%0#0,0x00,0
    l-load is_true%0#0 2                                                                           (洧도) flags#0 | 0x00,0,is_true%0#0
    setbit                                                                                         (洧도) flags#0 | encoded_bool%0#0
    int 0                                                                                          (洧도) flags#0 | encoded_bool%0#0,0
    getbit                                                                                         (洧도) flags#0 | tmp%0#0
    assert                                                                                         (洧도) flags#0 |
    // arc4_types/structs.py:57
    // assert not flags.b.native
    p-load flags#0                                                                                 (洧도) flags#0 | flags#0 (copy)
    int 1                                                                                          (洧도) flags#0 | flags#0 (copy),1
    getbit                                                                                         (洧도) flags#0 | is_true%1#0
    byte 0x00                                                                                      (洧도) flags#0 | is_true%1#0,0x00
    int 0                                                                                          (洧도) flags#0 | is_true%1#0,0x00,0
    l-load is_true%1#0 2                                                                           (洧도) flags#0 | 0x00,0,is_true%1#0
    setbit                                                                                         (洧도) flags#0 | encoded_bool%1#0
    int 0                                                                                          (洧도) flags#0 | encoded_bool%1#0,0
    getbit                                                                                         (洧도) flags#0 | tmp%1#0
    !                                                                                              (洧도) flags#0 | tmp%2#0
    assert                                                                                         (洧도) flags#0 |
    // arc4_types/structs.py:58
    // assert flags.c.native
    p-load flags#0                                                                                 (洧도) flags#0 | flags#0 (copy)
    int 2                                                                                          (洧도) flags#0 | flags#0 (copy),2
    getbit                                                                                         (洧도) flags#0 | is_true%2#0
    byte 0x00                                                                                      (洧도) flags#0 | is_true%2#0,0x00
    int 0                                                                                          (洧도) flags#0 | is_true%2#0,0x00,0
    l-load is_true%2#0 2                                                                           (洧도) flags#0 | 0x00,0,is_true%2#0
    setbit                                                                                         (洧도) flags#0 | encoded_bool%2#0
    int 0                                                                                          (洧도) flags#0 | encoded_bool%2#0,0
    getbit                                                                                         (洧도) flags#0 | tmp%3#0
    assert                                                                                         (洧도) flags#0 |
    // arc4_types/structs.py:59
    // assert not flags.d.native
    p-load flags#0                                                                                 (洧도) flags#0 | flags#0 (copy)
    int 3                                                                                          (洧도) flags#0 | flags#0 (copy),3
    getbit                                                                                         (洧도) flags#0 | is_true%3#0
    byte 0x00                                                                                      (洧도) flags#0 | is_true%3#0,0x00
    int 0                                                                                          (洧도) flags#0 | is_true%3#0,0x00,0
    l-load is_true%3#0 2                                                                           (洧도) flags#0 | 0x00,0,is_true%3#0
    setbit                                                                                         (洧도) flags#0 | encoded_bool%3#0
    int 0                                                                                          (洧도) flags#0 | encoded_bool%3#0,0
    getbit                                                                                         (洧도) flags#0 | tmp%4#0
    !                                                                                              (洧도) flags#0 | tmp%5#0
    assert                                                                                         (洧도) flags#0 |
    p-load flags#0                                                                                 (洧도) flags#0 | flags#0 (copy)
    retsub                                                                                         flags#0 (copy)


// test_cases.arc4_types.structs.nested_decode(vector_flags: bytes) -> bytes:
nested_decode:                                                                                     (洧도) vector_flags#0 |
    // arc4_types/structs.py:62-63
    // @subroutine
    // def nested_decode(vector_flags: VectorFlags) -> None:
    proto 1 1                                                                                      (洧도) vector_flags#0 |

nested_decode_block@0:                                                                             (洧도) vector_flags#0 |
    // arc4_types/structs.py:64
    // assert vector_flags.vector.x.bytes == op.itob(35382882839)
    p-load vector_flags#0                                                                          (洧도) vector_flags#0 | vector_flags#0 (copy)
    extract 0 16 // on error: Index access is out of bounds                                        (洧도) vector_flags#0 | tmp%0#0
    extract 0 8 // on error: Index access is out of bounds                                         (洧도) vector_flags#0 | tmp%1#0
    int 35382882839                                                                                (洧도) vector_flags#0 | tmp%1#0,35382882839
    itob                                                                                           (洧도) vector_flags#0 | tmp%1#0,tmp%2#0
    l-load tmp%1#0 1                                                                               (洧도) vector_flags#0 | tmp%2#0,tmp%1#0
    l-load tmp%2#0 1                                                                               (洧도) vector_flags#0 | tmp%1#0,tmp%2#0
    ==                                                                                             (洧도) vector_flags#0 | tmp%3#0
    assert                                                                                         (洧도) vector_flags#0 |
    // arc4_types/structs.py:65
    // assert vector_flags.flags.c.native
    p-load vector_flags#0                                                                          (洧도) vector_flags#0 | vector_flags#0 (copy)
    extract 16 1 // on error: Index access is out of bounds                                        (洧도) vector_flags#0 | tmp%4#0
    int 2                                                                                          (洧도) vector_flags#0 | tmp%4#0,2
    getbit                                                                                         (洧도) vector_flags#0 | is_true%0#0
    byte 0x00                                                                                      (洧도) vector_flags#0 | is_true%0#0,0x00
    int 0                                                                                          (洧도) vector_flags#0 | is_true%0#0,0x00,0
    l-load is_true%0#0 2                                                                           (洧도) vector_flags#0 | 0x00,0,is_true%0#0
    setbit                                                                                         (洧도) vector_flags#0 | encoded_bool%0#0
    int 0                                                                                          (洧도) vector_flags#0 | encoded_bool%0#0,0
    getbit                                                                                         (洧도) vector_flags#0 | tmp%5#0
    assert                                                                                         (洧도) vector_flags#0 |
    p-load vector_flags#0                                                                          (洧도) vector_flags#0 | vector_flags#0 (copy)
    retsub                                                                                         vector_flags#0 (copy)


