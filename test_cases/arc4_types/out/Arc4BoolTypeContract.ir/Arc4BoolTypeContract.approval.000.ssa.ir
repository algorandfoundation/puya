main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(tmp%0#0, tmp%1#0)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        let select%0#0: bool = (select 1u 0u tmp%3#0)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(select%0#0)
        let tmp%5#0: bool = decode_bytes<bool>(tmp%4#0)
        (assert tmp%5#0) // conditional expr
        let tmp%6#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%7#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%8#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%9#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%10#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%11#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%12#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%13#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%14#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%15#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%16#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%17#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let encoded_array%0#0: Encoded(bool1[12]) = bytes_encode<bool1[12]>(tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0, tmp%16#0, tmp%17#0)
        let static_boolean_array#0: Encoded(bool1[12]) = encoded_array%0#0
        let tmp%18#0: bool = (== static_boolean_array#0 0xfff0)
        (assert tmp%18#0)
        let array_item%0#0: bool = extract_value(static_boolean_array#0, 0u)
        let values%0#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(array_item%0#0)
        let tmp%19#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%20#0: bool = (== values%0#0 tmp%19#0)
        (assert tmp%20#0) // Single boolean can be unpacked
        let tmp%21#0: uint64 = (- 12u 1u)
        let array_item%1#0: bool = extract_value(static_boolean_array#0, tmp%21#0)
        let values%1#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(array_item%1#0)
        let tmp%22#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%23#0: bool = (== values%1#0 tmp%22#0)
        (assert tmp%23#0) // Single boolean can be unpacked
        let tmp%24#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%25#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%26#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let encoded_array%1#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%24#0, tmp%25#0, tmp%26#0)
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = encoded_array%1#0
        let tmp%27#0: bool = (== dynamic_boolean_array#0 0x0003a0)
        (assert tmp%27#0)
        let tmp%28#0: Encoded(len+bool1[]) = test_cases.arc4_types.bool.get_arr()
        let dynamic_boolean_array#1: Encoded(len+bool1[]) = tmp%28#0
        let tmp%29#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%30#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%31#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%32#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%33#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%34#0: Encoded(bool8[]) = bytes_encode<bool8[]>(tmp%29#0, tmp%30#0, tmp%31#0, tmp%32#0, tmp%33#0)
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dynamic_boolean_array#1, tmp%34#0, 5u, 8u)
        let dynamic_boolean_array#2: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        let tmp%35#0: bool = (== dynamic_boolean_array#2 0x0005a8)
        (assert tmp%35#0)
        let tmp%36#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%37#0: bool = decode_bytes<bool>(tmp%36#0)
        let tmp%38#0: bool = (== tmp%37#0 1u)
        (assert tmp%38#0)
        let tmp%39#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%40#0: bool = decode_bytes<bool>(tmp%39#0)
        let tmp%41#0: bool = (!= tmp%40#0 1u)
        (assert tmp%41#0)
        let tmp%42#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%43#0: bool = decode_bytes<bool>(tmp%42#0)
        let tmp%44#0: bool = (== tmp%43#0 0u)
        (assert tmp%44#0)
        let tmp%45#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%46#0: bool = decode_bytes<bool>(tmp%45#0)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#1: bytes = tmp%12#0
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let tmp%17#0: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let result#3: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#1 1u)
        let write_offset#2: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#1 read_step#0)
        let read_offset#2: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine test_cases.arc4_types.bool.get_arr() -> Encoded(len+bool1[]):
    block@0: // L72
        let encoded_array%0#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>()
        return encoded_array%0#0

subroutine test_cases.arc4_types.bool.Arc4BoolTypeContract.test_stuff(true: Encoded(bool8), false: Encoded(bool8)) -> bool:
    block@0: // L60
        let tmp%0#0: bool = decode_bytes<bool>(true#0)
        (assert tmp%0#0)
        let tmp%1#0: bool = decode_bytes<bool>(false#0)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = decode_bytes<bool>(true#0)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(tmp%3#0)
        let tmp%5#0: bool = (== true#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: bool = decode_bytes<bool>(false#0)
        let tmp%7#0: Encoded(bool8) = bytes_encode<bool8>(tmp%6#0)
        let tmp%8#0: bool = (== false#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = decode_bytes<bool>(true#0)
        return tmp%9#0