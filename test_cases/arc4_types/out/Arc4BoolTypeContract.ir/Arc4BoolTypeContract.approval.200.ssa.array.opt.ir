main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let true#0: Encoded(bool8) = 0x80
        let false#0: Encoded(bool8) = 0x00
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let select%0#0: bool = (! tmp%2#0)
        (assert select%0#0) // conditional expr
        let aggregate%encoded%0#1: bytes = 0x80
        let aggregate%get_bit%0#1: uint64 = 1u
        let aggregate%set_bit%0#1: bytes = 0xc0
        let aggregate%get_bit%1#1: uint64 = 1u
        let aggregate%set_bit%1#1: bytes = 0xe0
        let aggregate%get_bit%2#1: uint64 = 1u
        let aggregate%set_bit%2#1: bytes = 0xf0
        let aggregate%get_bit%3#1: uint64 = 1u
        let aggregate%set_bit%3#1: bytes = 0xf8
        let aggregate%get_bit%4#1: uint64 = 1u
        let aggregate%set_bit%4#1: bytes = 0xfc
        let aggregate%get_bit%5#1: uint64 = 1u
        let aggregate%set_bit%5#1: bytes = 0xfe
        let aggregate%get_bit%6#1: uint64 = 1u
        let aggregate%set_bit%6#1: bytes = 0xff
        let aggregate%encoded%1#1: bytes = 0xff80
        let aggregate%get_bit%7#1: uint64 = 1u
        let aggregate%set_bit%7#1: bytes = 0xffc0
        let aggregate%get_bit%8#1: uint64 = 1u
        let aggregate%set_bit%8#1: bytes = 0xffe0
        let aggregate%get_bit%9#1: uint64 = 1u
        let aggregate%set_bit%9#1: bytes = 0xfff0
        let static_boolean_array#0: Encoded(bool1[12]) = 0xfff0
        let tmp%18#0: bool = 1u
        let aggregate%lt%0#1: bool = 1u
        let aggregate%get_bit%10#1: uint64 = 1u
        let aggregate%encoded_bool%3#1: bytes[1] = 0x80
        let tmp%20#0: bool = 1u
        let aggregate%lt%1#1: bool = 1u
        let aggregate%get_bit%11#1: uint64 = 1u
        let aggregate%encoded_bool%4#1: bytes[1] = 0x80
        let tmp%23#0: bool = 1u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = 0x0003
        let aggregate%encoded%3#1: bytes = 0x000380
        let aggregate%get_bit%12#1: uint64 = 0u
        let aggregate%set_bit%10#1: bytes = 0x000380
        let aggregate%get_bit%13#1: uint64 = 1u
        let aggregate%set_bit%11#1: bytes = 0x0003a0
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = 0x0003a0
        let tmp%27#0: bool = 1u
        let dynamic_boolean_array#1: Encoded(len+bool1[]) = test_cases.arc4_types.bool.get_arr()
        let aggregate%encoded%5#1: bytes = 0x80
        let aggregate%encoded%6#1: bytes = 0x8000
        let aggregate%encoded%7#1: bytes = 0x800080
        let aggregate%encoded%8#1: bytes = 0x80008000
        let aggregate%encoded%9#1: bytes = 0x8000800080
        let new_items_bytes#0: bytes = 0x8000800080
        let array_length#0: uint64 = (extract_uint16 dynamic_boolean_array#1 0u)
        let new_array_length#0: uint64 = (+ array_length#0 5u)
        let tmp%2#2: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#2)
        let result#0: bytes = ((replace2 0) dynamic_boolean_array#1 new_array_length_b#0)
        let tmp%5#2: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#2 8u)
        let tmp%7#2: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#2 8u)
        let tmp%9#2: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#2 ? block@4 : block@5
    block@4: // if_body_L148
        let tmp%10#1: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#1: bytes = (bzero tmp%10#1)
        let result#1: bytes = (concat result#0 tmp%11#1)
        goto block@5
    block@5: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@4)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 5u)
        goto block@6
    block@6: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@7)
        let result#2: bytes = φ(result#4 <- block@5, result#3 <- block@7)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@5, read_offset#2 <- block@7)
        let tmp%15#1: bool = (< write_offset#1 write_end#0)
        goto tmp%15#1 ? block@7 : block@8
    block@7: // while_body_L154
        let tmp%16#1: uint64 = (getbit 0x8000800080 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#1)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 8u)
        goto block@6
    block@8: // after_while_L153
        let tmp%35#0: bool = (== result#2 0x0005a8)
        (assert tmp%35#0)
        return 1u

subroutine test_cases.arc4_types.bool.get_arr() -> Encoded(len+bool1[]):
    block@0: // L72
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = 0x0000
        let aggregate%encoded%0#1: Encoded(len+bool1[]) = 0x0000
        return 0x0000