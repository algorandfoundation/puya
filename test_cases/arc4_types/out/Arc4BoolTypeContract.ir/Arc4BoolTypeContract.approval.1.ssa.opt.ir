main test_cases.arc4_types.bool.Arc4BoolTypeContract.approval_program:
    block@0: // L12
        let true#0: Encoded(bool8) = 0x80
        let false#0: Encoded(bool8) = 0x00
        let tmp%0#1: bool = 1u
        let tmp%1#1: bool = 0u
        let tmp%2#1: bool = 1u
        let to_encode%0#0: bool = 1u
        let encoded_bool%0#1: bytes[1] = 0x80
        let tmp%3#1: bool = 1u
        let to_encode%1#0: bool = 0u
        let encoded_bool%1#1: bytes[1] = 0x00
        let tmp%4#1: bool = 1u
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let select%0#0: bool = (! tmp%0#0)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u select%0#0)
        let tmp%2#0: bool = (getbit encoded_bool%2#0 0u)
        (assert tmp%2#0) // conditional expr
        let encoded_bool%3#0: bytes[1] = 0x80
        let encoded_bool%4#0: bytes[1] = 0x80
        let encoded_bool%5#0: bytes[1] = 0x80
        let encoded_bool%6#0: bytes[1] = 0x80
        let encoded_bool%7#0: bytes[1] = 0x80
        let encoded_bool%8#0: bytes[1] = 0x80
        let encoded_bool%9#0: bytes[1] = 0x80
        let encoded_bool%10#0: bytes[1] = 0x80
        let encoded_bool%11#0: bytes[1] = 0x80
        let encoded_bool%12#0: bytes[1] = 0x80
        let encoded_bool%13#0: bytes[1] = 0x80
        let encoded_bool%14#0: bytes[1] = 0x80
        let encoded%0#0: Encoded((bool1)) = 0x80
        let get_bit%0#0: uint64 = 1u
        let set_bit%0#0: Encoded((bool1)) = 0xc0
        let get_bit%1#0: uint64 = 1u
        let set_bit%1#0: Encoded((bool1)) = 0xe0
        let get_bit%2#0: uint64 = 1u
        let set_bit%2#0: Encoded((bool1)) = 0xf0
        let get_bit%3#0: uint64 = 1u
        let set_bit%3#0: Encoded((bool1)) = 0xf8
        let get_bit%4#0: uint64 = 1u
        let set_bit%4#0: Encoded((bool1)) = 0xfc
        let get_bit%5#0: uint64 = 1u
        let set_bit%5#0: Encoded((bool1)) = 0xfe
        let get_bit%6#0: uint64 = 1u
        let set_bit%6#0: Encoded((bool1)) = 0xff
        let get_bit%7#0: uint64 = 1u
        let set_bit%7#0: bytes = 0x80
        let encoded%1#0: Encoded((bool1,bool1)) = 0xff80
        let get_bit%8#0: uint64 = 1u
        let set_bit%8#0: Encoded((bool1,bool1)) = 0xffc0
        let get_bit%9#0: uint64 = 1u
        let set_bit%9#0: Encoded((bool1,bool1)) = 0xffe0
        let get_bit%10#0: uint64 = 1u
        let set_bit%10#0: Encoded((bool1,bool1)) = 0xfff0
        let static_boolean_array#0: Encoded(bool1[12]) = 0xfff0
        let tmp%3#0: bool = 1u
        let array_length%0#0: uint64 = 0xfff0.length
        let lt%0#0: bool = (< 0u array_length%0#0)
        (assert array_length%0#0) // index access is out of bounds
        let is_true%0#0: bool = 1u
        let tmp%4#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_bool%15#0: bytes[1] = 0x80
        let tmp%5#0: bool = (== tmp%4#0 0x80)
        (assert tmp%5#0) // Single boolean can be unpacked
        let tmp%6#0: uint64 = 11u
        let array_length%1#0: uint64 = 0xfff0.length
        let lt%1#0: bool = (< 11u array_length%1#0)
        (assert lt%1#0) // index access is out of bounds
        let is_true%1#0: bool = 1u
        let tmp%7#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_bool%16#0: bytes[1] = 0x80
        let tmp%8#0: bool = (== tmp%7#0 0x80)
        (assert tmp%8#0) // Single boolean can be unpacked
        let encoded_bool%17#0: bytes[1] = 0x80
        let encoded_bool%18#0: bytes[1] = 0x00
        let encoded_bool%19#0: bytes[1] = 0x80
        let encoded%3#0: Encoded((bool1)) = 0x80
        let get_bit%11#0: uint64 = 0u
        let set_bit%11#0: Encoded((bool1)) = 0x80
        let get_bit%12#0: uint64 = 1u
        let set_bit%12#0: Encoded((bool1)) = 0xa0
        let encoded%4#0: bytes = 0xa0
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let len_u16%0#0: bytes = 0x0003
        let dynamic_boolean_array#0: Encoded(len+bool1[]) = 0x0003a0
        let tmp%9#0: bool = 1u
        let dynamic_boolean_array#1: Encoded(len+bool1[]) = test_cases.arc4_types.bool.get_arr()
        let encoded_bool%20#0: bytes[1] = 0x80
        let encoded_bool%21#0: bytes[1] = 0x00
        let encoded_bool%22#0: bytes[1] = 0x80
        let encoded_bool%23#0: bytes[1] = 0x00
        let encoded_bool%24#0: bytes[1] = 0x80
        let data%0#0: bytes = 0x80
        let data%1#0: bytes = 0x8000
        let data%2#0: bytes = 0x800080
        let data%3#0: bytes = 0x80008000
        let new_items_bytes#0: bytes = 0x8000800080
        let array_length#0: uint64 = (extract_uint16 dynamic_boolean_array#1 0u)
        let new_array_length#0: uint64 = (+ array_length#0 5u)
        let tmp%0#2: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#2)
        let result#0: bytes = ((replace2 0) dynamic_boolean_array#1 new_array_length_b#0)
        let tmp%1#2: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#2 8u)
        let tmp%2#2: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#2 8u)
        let tmp%3#2: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#2 ? block@4 : block@5
    block@4: // if_body_L148
        let tmp%4#2: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#2: bytes = (bzero tmp%4#2)
        let result#1: bytes = (concat result#0 tmp%5#2)
        goto block@5
    block@5: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@4)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 5u)
        goto block@6
    block@6: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@7)
        let result#2: bytes = φ(result#4 <- block@5, result#3 <- block@7)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@5, read_offset#2 <- block@7)
        let tmp%6#1: bool = (< write_offset#1 write_end#0)
        goto tmp%6#1 ? block@7 : block@8
    block@7: // while_body_L154
        let tmp%7#1: uint64 = (getbit 0x8000800080 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#1)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 8u)
        goto block@6
    block@8: // after_while_L153
        let tmp%10#0: bool = (== result#2 0x0005a8)
        (assert tmp%10#0)
        let encoded_bool%25#0: bytes[1] = 0x80
        let tmp%11#0: bool = 1u
        let tmp%12#0: bool = 1u
        let encoded_bool%26#0: bytes[1] = 0x00
        let tmp%13#0: bool = 0u
        let tmp%14#0: bool = 1u
        let encoded_bool%27#0: bytes[1] = 0x00
        let tmp%15#0: bool = 0u
        let tmp%16#0: bool = 1u
        let encoded_bool%28#0: bytes[1] = 0x80
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        return 1u

subroutine test_cases.arc4_types.bool.get_arr() -> Encoded(len+bool1[]):
    block@0: // L72
        let encoded%0#0: bytes = 0x
        let as_bytes%0#0: bytes[8] = (itob 0u)
        let len_u16%0#0: bytes = 0x0000
        let encoded%1#0: Encoded(len+bool1[]) = 0x0000
        return 0x0000