contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L7
                let some_bytes_as_string#0: bytes = 0x000c48656c6c6f20576f726c6421
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%0#0: uint64 = (!= some_bytes_as_string#0 "Hello World!")
                (assert tmp%0#0) // Original bytes should not match encoded bytes
                let tmp%1#0: uint64 = (len some_bytes_as_string#0)
                let tmp%3#0: uint64 = (< 2u tmp%1#0)
                let tmp%4#0: uint64 = (select tmp%1#0 2u tmp%3#0)
                let tmp%5#0: bytes = (substring3 some_bytes_as_string#0 tmp%4#0 tmp%1#0)
                let tmp%6#0: uint64 = (== tmp%5#0 "Hello World!")
                (assert tmp%6#0) // Original bytes should match encoded if we strip the length header
                let tmp%7#0: uint64 = (== some_bytes_as_bytes_again#0 "Hello World!")
                (assert tmp%7#0)
                let len_%0#0: uint64 = 6u
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 "Hello ")
                let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
                let concatenated%1#0: bytes = (concat expr_value_trimmed%2#0 "World!")
                let len_%1#0: uint64 = (len concatenated%1#0)
                let len_bytes%1#0: bytes = (itob len_%1#0)
                let len_16_bit%1#0: bytes = ((extract 6 0) len_bytes%1#0)
                let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
                let tmp%8#0: uint64 = (== "\x00\x0cHello World!" concat_result%1#0)
                (assert tmp%8#0)
                let len_%2#0: uint64 = 4u
                let len_bytes%2#0: bytes = (itob len_%2#0)
                let len_16_bit%2#0: bytes = ((extract 6 0) len_bytes%2#0)
                let thing#1: bytes = (concat len_16_bit%2#0 "hihi")
                let tmp%9#0: uint64 = (== thing#1 "\x00\x04hihi")
                (assert tmp%9#0)
                let len_%3#0: uint64 = 2u
                let len_bytes%3#0: bytes = (itob len_%3#0)
                let len_16_bit%3#0: bytes = ((extract 6 0) len_bytes%3#0)
                let concat_result%3#0: bytes = (concat len_16_bit%3#0 "ab")
                let expr_value_trimmed%8#0: bytes = ((extract 2 0) concat_result%3#0)
                let concatenated%4#0: bytes = (concat expr_value_trimmed%8#0 "cd")
                let len_%4#0: uint64 = (len concatenated%4#0)
                let len_bytes%4#0: bytes = (itob len_%4#0)
                let len_16_bit%4#0: bytes = ((extract 6 0) len_bytes%4#0)
                let value#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
                let expr_value_trimmed%10#0: bytes = ((extract 2 0) value#0)
                let concatenated%5#0: bytes = (concat expr_value_trimmed%10#0 "e")
                let len_%5#0: uint64 = (len concatenated%5#0)
                let len_bytes%5#0: bytes = (itob len_%5#0)
                let len_16_bit%5#0: bytes = ((extract 6 0) len_bytes%5#0)
                let value#1: bytes = (concat len_16_bit%5#0 concatenated%5#0)
                let expr_value_trimmed%12#0: bytes = ((extract 2 0) value#1)
                let concatenated%6#0: bytes = (concat expr_value_trimmed%12#0 "f")
                let len_%6#0: uint64 = (len concatenated%6#0)
                let len_bytes%6#0: bytes = (itob len_%6#0)
                let len_16_bit%6#0: bytes = ((extract 6 0) len_bytes%6#0)
                let value#2: bytes = (concat len_16_bit%6#0 concatenated%6#0)
                let expr_value_trimmed%14#0: bytes = ((extract 2 0) value#2)
                let concatenated%7#0: bytes = (concat expr_value_trimmed%14#0 "g")
                let len_%7#0: uint64 = (len concatenated%7#0)
                let len_bytes%7#0: bytes = (itob len_%7#0)
                let len_16_bit%7#0: bytes = ((extract 6 0) len_bytes%7#0)
                let value#3: bytes = (concat len_16_bit%7#0 concatenated%7#0)
                let tmp%10#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%10#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L39
                return 1u