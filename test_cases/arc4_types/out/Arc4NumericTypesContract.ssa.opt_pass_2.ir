contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> bool:
            block@0: // L28
                let int8_decoded#0: uint64 = 255u
                let tmp%0#0: bool = (== 255u int8_decoded#0)
                (assert tmp%0#0)
                let is_out_of_bounds%0#0: bool = 0u
                let bounded_index%0#0: uint64 = (select 1u 9u is_out_of_bounds%0#0)
                let tmp%1#0: bytes = (substring3 0x7fffffffffffffff00 0u bounded_index%0#0)
                let tmp%2#0: uint64 = (btoi tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 127u)
                (assert tmp%3#0)
                let is_out_of_bounds%1#0: bool = 0u
                let bounded_index%1#0: uint64 = (select 3u 9u is_out_of_bounds%1#0)
                let tmp%4#0: bytes = (substring3 0x7fffffffffffffff00 0u bounded_index%1#0)
                let tmp%5#0: uint64 = (btoi tmp%4#0)
                let tmp%6#0: bool = (== tmp%5#0 8388607u)
                (assert tmp%6#0)
                let is_out_of_bounds%2#0: bool = 0u
                let bounded_index%2#0: uint64 = (select 2u 9u is_out_of_bounds%2#0)
                let tmp%7#0: bytes = (substring3 0x7fffffffffffffff00 0u bounded_index%2#0)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bool = (== tmp%8#0 32767u)
                (assert tmp%9#0)
                let is_out_of_bounds%3#0: bool = 0u
                let bounded_index%3#0: uint64 = (select 4u 9u is_out_of_bounds%3#0)
                let tmp%10#0: bytes = (substring3 0x7fffffffffffffff00 0u bounded_index%3#0)
                let tmp%11#0: uint64 = (btoi tmp%10#0)
                let tmp%12#0: bool = (== tmp%11#0 2147483647u)
                (assert tmp%12#0)
                let is_out_of_bounds%4#0: bool = 0u
                let bounded_index%4#0: uint64 = (select 8u 9u is_out_of_bounds%4#0)
                let tmp%13#0: bytes = (substring3 0x7fffffffffffffff00 0u bounded_index%4#0)
                let tmp%14#0: uint64 = (btoi tmp%13#0)
                let tmp%15#0: bool = (== tmp%14#0 9223372036854775807u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (txn NumAppArgs)
                goto tmp%16#0 ? block@1 : block@2
            block@1: // ternary_true_L43
                let ternary_result%0#0: bytes = 0x01
                goto block@3
            block@2: // ternary_false_L43
                let ternary_result%0#1: bytes = 0x02
                goto block@3
            block@3: // ternary_merge_L43
                let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                let tmp%18#0: bool = (b== ternary_result%0#2 0x02)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (txn NumAppArgs)
                goto tmp%19#0 ? block@4 : block@5
            block@4: // ternary_true_L44
                let ternary_result%1#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
                goto block@6
            block@5: // ternary_false_L44
                let ternary_result%1#1: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
                goto block@6
            block@6: // ternary_merge_L44
                let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
                let tmp%21#0: bool = (b== ternary_result%1#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%21#0)
                let tmp%27#0: bool = 1u
                (assert tmp%27#0)
                let tmp%43#0: uint64 = (txn NumAppArgs)
                goto tmp%43#0 ? block@7 : block@8
            block@7: // ternary_true_L91
                let ternary_result%2#0: bytes = 0xffffffffffffffff
                goto block@9
            block@8: // ternary_false_L91
                let ternary_result%2#1: bytes = 0x0000000000000000
                goto block@9
            block@9: // ternary_merge_L91
                let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                let tmp%45#0: bool = (== ternary_result%2#2 0x0000000000000000)
                (assert tmp%45#0)
                let len_%0#0: uint64 = 1u
                let no_overflow%0#0: bool = (<= len_%0#0 16u)
                (assert no_overflow%0#0) // overflow
                let arc4_biguint_dynamic#0: bytes = 0x00000000000000000000000000000002
                let tmp%48#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%49#0: bool = (== tmp%48#0 16u)
                (assert tmp%49#0)
                let tmp%51#0: bool = 1u
                (assert tmp%51#0)
                let tmp%52#0: bytes = 0x0000000000000003
                let tmp%53#0: uint64 = (btoi tmp%52#0)
                let tmp%54#0: bool = (== tmp%53#0 ClearState)
                (assert tmp%54#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> bool:
            block@0: // L109
                return 1u