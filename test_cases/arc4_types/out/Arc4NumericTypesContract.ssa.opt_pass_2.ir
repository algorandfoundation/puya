contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
            block@0: // L25
                let int8_decoded#0: uint64 = 255u
                let tmp%1#0: uint64 = (== 255u int8_decoded#0)
                (assert tmp%1#0)
                let tmp%5#0: uint64 = 1u
                let tmp%6#0: uint64 = (select 9u 1u tmp%5#0)
                let tmp%7#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%6#0)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: uint64 = (== tmp%8#0 127u)
                (assert tmp%9#0)
                let tmp%13#0: uint64 = 1u
                let tmp%14#0: uint64 = (select 9u 3u tmp%13#0)
                let tmp%15#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%14#0)
                let tmp%16#0: uint64 = (btoi tmp%15#0)
                let tmp%17#0: uint64 = (== tmp%16#0 8388607u)
                (assert tmp%17#0)
                let tmp%21#0: uint64 = 1u
                let tmp%22#0: uint64 = (select 9u 2u tmp%21#0)
                let tmp%23#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%22#0)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = (== tmp%24#0 32767u)
                (assert tmp%25#0)
                let tmp%29#0: uint64 = 1u
                let tmp%30#0: uint64 = (select 9u 4u tmp%29#0)
                let tmp%31#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%30#0)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = (== tmp%32#0 2147483647u)
                (assert tmp%33#0)
                let tmp%37#0: uint64 = 1u
                let tmp%38#0: uint64 = (select 9u 8u tmp%37#0)
                let tmp%39#0: bytes = (substring3 0x7fffffffffffffff00 0u tmp%38#0)
                let tmp%40#0: uint64 = (btoi tmp%39#0)
                let tmp%41#0: uint64 = (== tmp%40#0 9223372036854775807u)
                (assert tmp%41#0)
                let tmp%43#0: uint64 = 1u
                (assert tmp%43#0)
                let tmp%45#0: uint64 = 1u
                (assert tmp%45#0)
                let tmp%47#0: uint64 = 1u
                (assert tmp%47#0)
                let tmp%49#0: uint64 = 1u
                (assert tmp%49#0)
                let tmp%51#0: uint64 = 1u
                (assert tmp%51#0)
                let tmp%53#0: uint64 = 1u
                (assert tmp%53#0)
                let tmp%55#0: uint64 = 1u
                (assert tmp%55#0)
                let tmp%57#0: uint64 = 1u
                (assert tmp%57#0)
                let tmp%59#0: uint64 = 1u
                (assert tmp%59#0)
                let tmp%61#0: uint64 = 1u
                (assert tmp%61#0)
                let tmp%63#0: uint64 = 1u
                (assert tmp%63#0)
                let tmp%65#0: uint64 = 1u
                (assert tmp%65#0)
                let tmp%67#0: uint64 = 1u
                (assert tmp%67#0)
                let tmp%69#0: uint64 = 1u
                (assert tmp%69#0)
                let tmp%71#0: uint64 = 1u
                (assert tmp%71#0)
                let tmp%73#0: uint64 = 1u
                (assert tmp%73#0)
                let tmp%75#0: uint64 = 1u
                (assert tmp%75#0)
                let tmp%77#0: uint64 = 1u
                (assert tmp%77#0)
                let tmp%79#0: uint64 = 1u
                (assert tmp%79#0)
                let no_overflow%81#0: uint64 = 1u
                (assert no_overflow%81#0) // overflow
                let tmp%84#0: uint64 = 1u
                (assert tmp%84#0)
                let no_overflow%86#0: uint64 = 1u
                (assert no_overflow%86#0) // overflow
                let len_%89#0: uint64 = 1u
                let no_overflow%90#0: uint64 = (<= len_%89#0 16u)
                (assert no_overflow%90#0) // overflow
                let arc4_biguint_dynamic#0: bytes = 0x00000000000000000000000000000002
                let tmp%93#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%94#0: uint64 = (== tmp%93#0 16u)
                (assert tmp%94#0)
                let tmp%95#0: uint64 = 64u
                let tmp%96#0: uint64 = (== tmp%95#0 64u)
                (assert tmp%96#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> uint64:
            block@0: // L109
                return 1u