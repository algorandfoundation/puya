contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L8
                let expr_value_trimmed%55#0: bytes = 0x61626364
                let concatenated%57#0: bytes = (concat expr_value_trimmed%55#0 "e")
                let len_%58#0: uint64 = (len concatenated%57#0)
                let len_bytes%59#0: bytes = (itob len_%58#0)
                let len_16_bit%60#0: bytes = ((extract 6 0) len_bytes%59#0)
                let value#1: bytes = (concat len_16_bit%60#0 concatenated%57#0)
                let expr_value_trimmed%62#0: bytes = ((extract 2 0) value#1)
                let concatenated%64#0: bytes = (concat expr_value_trimmed%62#0 "f")
                let len_%65#0: uint64 = (len concatenated%64#0)
                let len_bytes%66#0: bytes = (itob len_%65#0)
                let len_16_bit%67#0: bytes = ((extract 6 0) len_bytes%66#0)
                let value#2: bytes = (concat len_16_bit%67#0 concatenated%64#0)
                let expr_value_trimmed%69#0: bytes = ((extract 2 0) value#2)
                let concatenated%71#0: bytes = (concat expr_value_trimmed%69#0 "g")
                let len_%72#0: uint64 = (len concatenated%71#0)
                let len_bytes%73#0: bytes = (itob len_%72#0)
                let len_16_bit%74#0: bytes = ((extract 6 0) len_bytes%73#0)
                let value#3: bytes = (concat len_16_bit%74#0 concatenated%71#0)
                let tmp%76#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%76#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L42
                return 1u