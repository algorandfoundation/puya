struct Vector {
  x: arc4.ufixed64x9
  y: arc4.ufixed64x9
}

struct Flags {
  a: arc4.bool
  b: arc4.bool
  c: arc4.bool
  d: arc4.bool
}

struct VectorFlags {
  vector: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>
  flags: arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool>
}

contract Arc4StructsTypeContract
{
  approval_program(): bool
  {
    coord_1: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9> = new arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>(x=35.382882839arc4u64x9, y=150.382884930arc4u64x9)
    coord_2: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9> = new arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>(x=35.382882839arc4u64x9, y=150.382884930arc4u64x9)
    coord_3: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9> = test_cases.arc4_types.structs::add(coord_1.copy(), coord_2.copy())
    for val in (coord_3.x, coord_3.y) {
      log(reinterpret_cast<bytes>(val))
    }
    flags: arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool> = new arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool>(a=arc4_encode(true, arc4.bool), b=arc4_encode(false, arc4.bool), c=arc4_encode(true, arc4.bool), d=arc4_encode(false, arc4.bool))
    test_cases.arc4_types.structs::check(flags.copy())
    log(reinterpret_cast<bytes>(flags))
    assert(reinterpret_cast<bytes>(reinterpret_cast<arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>>(reinterpret_cast<bytes>(coord_1))) == reinterpret_cast<bytes>(coord_1))
    test_cases.arc4_types.structs::nested_decode(new arc4.struct<vector:arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>,flags:arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool>>(vector=coord_1.copy(), flags=flags.copy()))
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine add(v1: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>, v2: arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>): arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>
{
  return new arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>(x=test_cases.arc4_types.structs::add_decimal(v1.x, v2.x), y=test_cases.arc4_types.structs::add_decimal(v1.y, v2.y))
}

subroutine check(flags: arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool>): void
{
  assert(arc4_decode(flags.a, bool))
  assert(!(arc4_decode(flags.b, bool)))
  assert(arc4_decode(flags.c, bool))
  assert(!(arc4_decode(flags.d, bool)))
}

subroutine nested_decode(vector_flags: arc4.struct<vector:arc4.struct<x:arc4.ufixed64x9,y:arc4.ufixed64x9>,flags:arc4.struct<a:arc4.bool,b:arc4.bool,c:arc4.bool,d:arc4.bool>>): void
{
  assert(reinterpret_cast<bytes>(vector_flags.vector.x) == itob(35382882839u))
  assert(arc4_decode(vector_flags.flags.c, bool))
}

subroutine add_decimal(x: arc4.ufixed64x9, y: arc4.ufixed64x9): arc4.ufixed64x9
{
  return reinterpret_cast<arc4.ufixed64x9>(itob(btoi(reinterpret_cast<bytes>(x)) + btoi(reinterpret_cast<bytes>(y))))
}