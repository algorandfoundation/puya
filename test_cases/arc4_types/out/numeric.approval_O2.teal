#pragma version 10

test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program:
    // arc4_types/numeric.py:26
    // uint8 = UInt64(255)
    int 255
    // arc4_types/numeric.py:28
    // int8_encoded = UInt8(uint8)
    itob
    extract 7 1
    // arc4_types/numeric.py:30
    // int8_decoded = int8_encoded.decode()
    btoi
    // arc4_types/numeric.py:26
    // uint8 = UInt64(255)
    int 255
    // arc4_types/numeric.py:32
    // assert uint8 == int8_decoded
    ==
    assert
    // arc4_types/numeric.py:35
    // assert UInt8.from_bytes(test_bytes[:1]).decode() == 2**8 - 1 - 2**7
    byte 0x7f
    btoi
    int 127
    ==
    assert
    // arc4_types/numeric.py:37
    // UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).decode() == 2**24 - 1 - 2**23
    byte 0x7fffff
    btoi
    int 8388607
    ==
    // arc4_types/numeric.py:36-38
    // assert (
    //     UIntN[typing.Literal[24]].from_bytes(test_bytes[:3]).decode() == 2**24 - 1 - 2**23
    // )
    assert
    // arc4_types/numeric.py:39
    // assert UInt16.from_bytes(test_bytes[:2]).decode() == 2**16 - 1 - 2**15
    byte 0x7fff
    btoi
    int 32767
    ==
    assert
    // arc4_types/numeric.py:40
    // assert UInt32.from_bytes(test_bytes[:4]).decode() == 2**32 - 1 - 2**31
    byte 0x7fffffff
    btoi
    int 2147483647
    ==
    assert
    // arc4_types/numeric.py:41
    // assert ARC4UInt64.from_bytes(test_bytes[:8]).decode() == 2**64 - 1 - 2**63
    byte 0x7fffffffffffffff
    btoi
    int 9223372036854775807
    ==
    assert
    // arc4_types/numeric.py:50
    // assert really_big_int == BigUIntN[t.Literal[512]](really_big_int.decode())
    int 64
    bzero
    // arc4_types/numeric.py:47
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:50
    // assert really_big_int == BigUIntN[t.Literal[512]](really_big_int.decode())
    dig 1
    b|
    // arc4_types/numeric.py:47
    // really_big_int = BigUIntN[t.Literal[512]](sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:50
    // assert really_big_int == BigUIntN[t.Literal[512]](really_big_int.decode())
    ==
    assert
    // arc4_types/numeric.py:53
    // BigUInt(sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:52-54
    // really_big_decimal = BigUFixedNxM[t.Literal[512], t.Literal[2]].encode(
    //     BigUInt(sixty_four_byte_num)
    // )
    len
    int 64
    <=
    assert // overflow
    // arc4_types/numeric.py:53
    // BigUInt(sixty_four_byte_num)
    byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    // arc4_types/numeric.py:52-54
    // really_big_decimal = BigUFixedNxM[t.Literal[512], t.Literal[2]].encode(
    //     BigUInt(sixty_four_byte_num)
    // )
    b|
    // arc4_types/numeric.py:58
    // arc4_biguint_dynamic = ARC4BigUInt(biguint + 1)
    byte 0x02
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    byte 0x02
    b|
    // arc4_types/numeric.py:56
    // biguint = BigUInt(1)
    byte 0x01
    // arc4_types/numeric.py:57
    // arc4_biguint_const = ARC4BigUInt(1)
    byte 0x00000000000000000000000000000001
    // arc4_types/numeric.py:60
    // assert biguint == arc4_biguint_const.decode()
    b==
    assert
    // arc4_types/numeric.py:62
    // assert arc4_biguint_dynamic.bytes.length == (128 // 8)
    len
    int 16
    ==
    assert
    // arc4_types/numeric.py:64
    // assert really_big_decimal.bytes.length == 64
    len
    int 64
    ==
    assert
    // arc4_types/numeric.py:66
    // return True
    int 1
    return
