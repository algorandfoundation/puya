contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> bool:
            block@0: // L27
                let uint8#0: uint64 = 255u
                let val_as_bytes%0#0: bytes = (itob uint8#0)
                let int8_encoded#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%0#0: bool = (== uint8#0 int8_decoded#0)
                (assert tmp%0#0)
                let test_bytes#0: bytes = 0x7fffffffffffffff00
                let length%0#0: uint64 = (len test_bytes#0)
                let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
                let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
                let tmp%1#0: bytes = (substring3 test_bytes#0 0u bounded_index%0#0)
                let tmp%2#0: uint64 = (btoi tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 127u)
                (assert tmp%3#0)
                let length%1#0: uint64 = (len test_bytes#0)
                let is_out_of_bounds%1#0: bool = (>= 3u length%1#0)
                let bounded_index%1#0: uint64 = (select 3u length%1#0 is_out_of_bounds%1#0)
                let tmp%4#0: bytes = (substring3 test_bytes#0 0u bounded_index%1#0)
                let tmp%5#0: uint64 = (btoi tmp%4#0)
                let tmp%6#0: bool = (== tmp%5#0 8388607u)
                (assert tmp%6#0)
                let length%2#0: uint64 = (len test_bytes#0)
                let is_out_of_bounds%2#0: bool = (>= 2u length%2#0)
                let bounded_index%2#0: uint64 = (select 2u length%2#0 is_out_of_bounds%2#0)
                let tmp%7#0: bytes = (substring3 test_bytes#0 0u bounded_index%2#0)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bool = (== tmp%8#0 32767u)
                (assert tmp%9#0)
                let length%3#0: uint64 = (len test_bytes#0)
                let is_out_of_bounds%3#0: bool = (>= 4u length%3#0)
                let bounded_index%3#0: uint64 = (select 4u length%3#0 is_out_of_bounds%3#0)
                let tmp%10#0: bytes = (substring3 test_bytes#0 0u bounded_index%3#0)
                let tmp%11#0: uint64 = (btoi tmp%10#0)
                let tmp%12#0: bool = (== tmp%11#0 2147483647u)
                (assert tmp%12#0)
                let length%4#0: uint64 = (len test_bytes#0)
                let is_out_of_bounds%4#0: bool = (>= 8u length%4#0)
                let bounded_index%4#0: uint64 = (select 8u length%4#0 is_out_of_bounds%4#0)
                let tmp%13#0: bytes = (substring3 test_bytes#0 0u bounded_index%4#0)
                let tmp%14#0: uint64 = (btoi tmp%13#0)
                let tmp%15#0: bool = (== tmp%14#0 9223372036854775807u)
                (assert tmp%15#0)
                let decimals#0: bytes = 0x0000015333430684
                let tmp%16#0: bytes = (itob 1456853943940u)
                let tmp%17#0: bool = (== decimals#0 tmp%16#0)
                (assert tmp%17#0)
                let decimals_from_truncated_str#0: bytes = 0x000001519abc2400
                let tmp%18#0: bytes = (itob 1450000000000u)
                let tmp%19#0: bool = (== decimals_from_truncated_str#0 tmp%18#0)
                (assert tmp%19#0)
                let thousand#0: bytes = 0x000009184e72a000
                let tmp%20#0: uint64 = (len thousand#0)
                let tmp%21#0: bool = (== tmp%20#0 8u)
                (assert tmp%21#0)
                let tmp%22#0: bytes = (itob 10000000000000u)
                let tmp%23#0: bool = (== thousand#0 tmp%22#0)
                (assert tmp%23#0)
                let one_decimal#0: bytes = 0x00000002540be400
                let tmp%24#0: bytes = (itob 10000000000u)
                let tmp%25#0: bool = (== one_decimal#0 tmp%24#0)
                (assert tmp%25#0)
                let zero_decimal#0: bytes = 0x0000000000000000
                let tmp%26#0: bytes = (itob 0u)
                let tmp%27#0: bool = (== zero_decimal#0 tmp%26#0)
                (assert tmp%27#0)
                let small_decimal#0: bytes = 0x0000000000000064
                let tmp%28#0: bytes = (itob 100u)
                let tmp%29#0: bool = (== small_decimal#0 tmp%28#0)
                (assert tmp%29#0)
                let smaller_decimal#0: bytes = 0x000000000000000a
                let tmp%30#0: bytes = (itob 10u)
                let tmp%31#0: bool = (== smaller_decimal#0 tmp%30#0)
                (assert tmp%31#0)
                let smallest_decimal#0: bytes = 0x0000000000000001
                let tmp%32#0: bytes = (itob 1u)
                let tmp%33#0: bool = (== smallest_decimal#0 tmp%32#0)
                (assert tmp%33#0)
                let sixty_four_decimal#0: bytes = 0xffffffffffffffff
                let tmp%34#0: bytes = (itob 18446744073709551615u)
                let tmp%35#0: bool = (== sixty_four_decimal#0 tmp%34#0)
                (assert tmp%35#0)
                let really_big_int#0: bytes = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                let tmp%36#0: bool = (b== really_big_int#0 really_big_int#0)
                (assert tmp%36#0)
                let really_big_decimal#0: biguint = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b
                let biguint#0: biguint = 1b
                let arc4_biguint_const#0: bytes = 0x00000000000000000000000000000001
                let tmp%37#0: bytes = (b+ biguint#0 1b)
                let len_%0#0: uint64 = (len tmp%37#0)
                let no_overflow%0#0: bool = (<= len_%0#0 16u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| tmp%37#0 b_zeros%0#0)
                let tmp%38#0: bool = (b== biguint#0 arc4_biguint_const#0)
                (assert tmp%38#0)
                let tmp%39#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%40#0: bool = (== tmp%39#0 16u)
                (assert tmp%40#0)
                let tmp%41#0: uint64 = (len really_big_decimal#0)
                let tmp%42#0: bool = (== tmp%41#0 64u)
                (assert tmp%42#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> bool:
            block@0: // L100
                let tmp%0#0: bool = (b== 0x0000000000000000 0b)
                (assert tmp%0#0)
                let tmp%1#0: bool = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
                (assert tmp%1#0)
                let tmp%2#0: bool = (b== 0x00 0x00)
                (assert tmp%2#0)
                let tmp%3#0: bool = (b== 0x0000000000000000 0x0000000000000000)
                (assert tmp%3#0)
                let tmp%4#0: bool = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
                (assert tmp%4#0)
                return 1u