contract test_cases.arc4_types.numeric.Arc4NumericTypesContract:
    program approval:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.approval_program() -> uint64:
            block@0: // L27
                let uint8#0: uint64 = 255u
                let val_as_bytes%0#0: bytes = (itob uint8#0)
                let int8_encoded#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let int8_decoded#0: uint64 = (btoi int8_encoded#0)
                let tmp%1#0: uint64 = (== uint8#0 int8_decoded#0)
                (assert tmp%1#0)
                let test_bytes#0: bytes = 0x7fffffffffffffff00
                let awst_tmp%2#0: bytes = test_bytes#0
                let tmp%3#0: uint64 = (len awst_tmp%2#0)
                let tmp%4#0: uint64 = (len awst_tmp%2#0)
                let tmp%5#0: uint64 = (< 1u tmp%4#0)
                let tmp%6#0: uint64 = (select tmp%3#0 1u tmp%5#0)
                let tmp%7#0: bytes = (substring3 awst_tmp%2#0 0u tmp%6#0)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: uint64 = (== tmp%8#0 127u)
                (assert tmp%9#0)
                let awst_tmp%10#0: bytes = test_bytes#0
                let tmp%11#0: uint64 = (len awst_tmp%10#0)
                let tmp%12#0: uint64 = (len awst_tmp%10#0)
                let tmp%13#0: uint64 = (< 3u tmp%12#0)
                let tmp%14#0: uint64 = (select tmp%11#0 3u tmp%13#0)
                let tmp%15#0: bytes = (substring3 awst_tmp%10#0 0u tmp%14#0)
                let tmp%16#0: uint64 = (btoi tmp%15#0)
                let tmp%17#0: uint64 = (== tmp%16#0 8388607u)
                (assert tmp%17#0)
                let awst_tmp%18#0: bytes = test_bytes#0
                let tmp%19#0: uint64 = (len awst_tmp%18#0)
                let tmp%20#0: uint64 = (len awst_tmp%18#0)
                let tmp%21#0: uint64 = (< 2u tmp%20#0)
                let tmp%22#0: uint64 = (select tmp%19#0 2u tmp%21#0)
                let tmp%23#0: bytes = (substring3 awst_tmp%18#0 0u tmp%22#0)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = (== tmp%24#0 32767u)
                (assert tmp%25#0)
                let awst_tmp%26#0: bytes = test_bytes#0
                let tmp%27#0: uint64 = (len awst_tmp%26#0)
                let tmp%28#0: uint64 = (len awst_tmp%26#0)
                let tmp%29#0: uint64 = (< 4u tmp%28#0)
                let tmp%30#0: uint64 = (select tmp%27#0 4u tmp%29#0)
                let tmp%31#0: bytes = (substring3 awst_tmp%26#0 0u tmp%30#0)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = (== tmp%32#0 2147483647u)
                (assert tmp%33#0)
                let awst_tmp%34#0: bytes = test_bytes#0
                let tmp%35#0: uint64 = (len awst_tmp%34#0)
                let tmp%36#0: uint64 = (len awst_tmp%34#0)
                let tmp%37#0: uint64 = (< 8u tmp%36#0)
                let tmp%38#0: uint64 = (select tmp%35#0 8u tmp%37#0)
                let tmp%39#0: bytes = (substring3 awst_tmp%34#0 0u tmp%38#0)
                let tmp%40#0: uint64 = (btoi tmp%39#0)
                let tmp%41#0: uint64 = (== tmp%40#0 9223372036854775807u)
                (assert tmp%41#0)
                let decimals#0: bytes = 0x0000015333430684
                let tmp%42#0: bytes = (itob 1456853943940u)
                let tmp%43#0: uint64 = (== decimals#0 tmp%42#0)
                (assert tmp%43#0)
                let decimals_from_truncated_str#0: bytes = 0x000001519abc2400
                let tmp%44#0: bytes = (itob 1450000000000u)
                let tmp%45#0: uint64 = (== decimals_from_truncated_str#0 tmp%44#0)
                (assert tmp%45#0)
                let thousand#0: bytes = 0x000009184e72a000
                let tmp%46#0: uint64 = (len thousand#0)
                let tmp%47#0: uint64 = (== tmp%46#0 8u)
                (assert tmp%47#0)
                let tmp%48#0: bytes = (itob 10000000000000u)
                let tmp%49#0: uint64 = (== thousand#0 tmp%48#0)
                (assert tmp%49#0)
                let one_decimal#0: bytes = 0x00000002540be400
                let tmp%50#0: bytes = (itob 10000000000u)
                let tmp%51#0: uint64 = (== one_decimal#0 tmp%50#0)
                (assert tmp%51#0)
                let zero_decimal#0: bytes = 0x0000000000000000
                let tmp%52#0: bytes = (itob 0u)
                let tmp%53#0: uint64 = (== zero_decimal#0 tmp%52#0)
                (assert tmp%53#0)
                let small_decimal#0: bytes = 0x0000000000000064
                let tmp%54#0: bytes = (itob 100u)
                let tmp%55#0: uint64 = (== small_decimal#0 tmp%54#0)
                (assert tmp%55#0)
                let smaller_decimal#0: bytes = 0x000000000000000a
                let tmp%56#0: bytes = (itob 10u)
                let tmp%57#0: uint64 = (== smaller_decimal#0 tmp%56#0)
                (assert tmp%57#0)
                let smallest_decimal#0: bytes = 0x0000000000000001
                let tmp%58#0: bytes = (itob 1u)
                let tmp%59#0: uint64 = (== smallest_decimal#0 tmp%58#0)
                (assert tmp%59#0)
                let sixty_four_decimal#0: bytes = 0xffffffffffffffff
                let tmp%60#0: bytes = (itob 18446744073709551615u)
                let tmp%61#0: uint64 = (== sixty_four_decimal#0 tmp%60#0)
                (assert tmp%61#0)
                let really_big_int#0: bytes = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                let tmp%62#0: uint64 = (b== really_big_int#0 really_big_int#0)
                (assert tmp%62#0)
                let really_big_decimal#0: bytes = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b
                let biguint#0: bytes = 1b
                let arc4_biguint_const#0: bytes = 0x00000000000000000000000000000001
                let tmp%63#0: bytes = (b+ biguint#0 1b)
                let len_%64#0: uint64 = (len tmp%63#0)
                let no_overflow%65#0: uint64 = (<= len_%64#0 16u)
                (assert no_overflow%65#0) // overflow
                let b_zeros%66#0: bytes = (bzero 16u)
                let arc4_biguint_dynamic#0: bytes = (b| tmp%63#0 b_zeros%66#0)
                let tmp%67#0: uint64 = (b== biguint#0 arc4_biguint_const#0)
                (assert tmp%67#0)
                let tmp%68#0: uint64 = (len arc4_biguint_dynamic#0)
                let tmp%69#0: uint64 = (== tmp%68#0 16u)
                (assert tmp%69#0)
                let tmp%70#0: uint64 = (len really_big_decimal#0)
                let tmp%71#0: uint64 = (== tmp%70#0 64u)
                (assert tmp%71#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.numeric.Arc4NumericTypesContract.clear_state_program() -> uint64:
            block@0: // L100
                let tmp%0#0: uint64 = (b== 0x0000000000000000 0b)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0b)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (b== 0x00 0x00)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (b== 0x0000000000000000 0x0000000000000000)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (b== 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
                (assert tmp%4#0)
                return 1u