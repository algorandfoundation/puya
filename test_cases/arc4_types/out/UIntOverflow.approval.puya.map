{
  "version": 3,
  "sources": [
    "../uint_overflow.py"
  ],
  "mappings": ";;;;;;AAGA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;AAG6B;;AAAmB;;;AAAnB;AAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACc;;;AAAjB;AAAP;AAHH;AAAA;AAOyB;;AAAmB;;;;AAAnB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACc;;;;AAAjB;AAAP;AAHH;AAAA;AAOyB;;AAAmB;;;;;;AAAnB;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AACc;;;;;;AAAjB;AAAP;AAHH;AAAA;AAO8B;;AAAjB;AAAA;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACV;AAJH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 16 8"
    },
    "6": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "11": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "14": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "17": {
      "op": "assert",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0xea71ee7d 0xe31958f9 0xc7ed8497 0x65117897 // method \"test_uint8()void\", method \"test_uint16()void\", method \"test_uint32()void\", method \"test_as_uint64()void\"",
      "defined_out": [
        "Method(test_as_uint64()void)",
        "Method(test_uint16()void)",
        "Method(test_uint32()void)",
        "Method(test_uint8()void)"
      ],
      "stack_out": [
        "Method(test_uint8()void)",
        "Method(test_uint16()void)",
        "Method(test_uint32()void)",
        "Method(test_as_uint64()void)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_as_uint64()void)",
        "Method(test_uint16()void)",
        "Method(test_uint32()void)",
        "Method(test_uint8()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_uint8()void)",
        "Method(test_uint16()void)",
        "Method(test_uint32()void)",
        "Method(test_as_uint64()void)",
        "tmp%6#0"
      ]
    },
    "43": {
      "op": "match test_uint8 test_uint16 test_uint32 test_as_uint64",
      "stack_out": []
    },
    "53": {
      "op": "err"
    },
    "54": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "60": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "61": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "62": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "63": {
      "op": "return",
      "stack_out": []
    },
    "64": {
      "subroutine": "test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]",
      "params": {},
      "block": "test_uint8",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "256",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "256"
      ]
    },
    "69": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "70": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "71": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "72": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "73": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "74": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "75": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "76": {
      "op": "extract 7 1",
      "defined_out": [
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0"
      ]
    },
    "79": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0",
        "0x01"
      ]
    },
    "82": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "83": {
      "error": "this should not happen",
      "op": "assert // this should not happen",
      "stack_out": []
    },
    "84": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "subroutine": "test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]",
      "params": {},
      "block": "test_uint16",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "pushint 65536 // 65536",
      "defined_out": [
        "65536",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "65536"
      ]
    },
    "92": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "94": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "95": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "96": {
      "op": "intc_1 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "97": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "98": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "99": {
      "op": "extract 6 2",
      "defined_out": [
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0"
      ]
    },
    "102": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0",
        "0x0001"
      ]
    },
    "106": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "107": {
      "error": "this should not happen",
      "op": "assert // this should not happen",
      "stack_out": []
    },
    "108": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "109": {
      "op": "return",
      "stack_out": []
    },
    "110": {
      "subroutine": "test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]",
      "params": {},
      "block": "test_uint32",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "pushint 4294967296 // 4294967296",
      "defined_out": [
        "4294967296",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "4294967296"
      ]
    },
    "118": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "119": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "120": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "121": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "122": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "32"
      ]
    },
    "124": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "125": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "126": {
      "op": "extract 4 4",
      "defined_out": [
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0"
      ]
    },
    "129": {
      "op": "pushbytes 0x00000001",
      "defined_out": [
        "0x00000001",
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0",
        "0x00000001"
      ]
    },
    "135": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "136": {
      "error": "this should not happen",
      "op": "assert // this should not happen",
      "stack_out": []
    },
    "137": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    },
    "139": {
      "subroutine": "test_cases.arc4_types.uint_overflow.UIntOverflow.test_as_uint64[routing]",
      "params": {},
      "block": "test_as_uint64",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "142": {
      "op": "pushbytes 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x010000000000000000"
      ]
    },
    "153": {
      "op": "b+",
      "defined_out": [
        "biguint#0"
      ],
      "stack_out": [
        "biguint#0"
      ]
    },
    "154": {
      "op": "dup",
      "defined_out": [
        "biguint#0",
        "biguint#0 (copy)"
      ],
      "stack_out": [
        "biguint#0",
        "biguint#0 (copy)"
      ]
    },
    "155": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "biguint#0"
      ],
      "stack_out": [
        "biguint#0",
        "aggregate%value_len%0#0"
      ]
    },
    "156": {
      "op": "intc_1 // 16",
      "defined_out": [
        "16",
        "aggregate%value_len%0#0",
        "biguint#0"
      ],
      "stack_out": [
        "biguint#0",
        "aggregate%value_len%0#0",
        "16"
      ]
    },
    "157": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "biguint#0"
      ],
      "stack_out": [
        "biguint#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "158": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "biguint#0"
      ]
    },
    "159": {
      "op": "intc_1 // 16",
      "stack_out": [
        "biguint#0",
        "16"
      ]
    },
    "160": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "biguint#0"
      ],
      "stack_out": [
        "biguint#0",
        "aggregate%bzero%0#0"
      ]
    },
    "161": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "162": {
      "op": "dup",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%arc4_encoded%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%arc4_encoded%0#0 (copy)"
      ]
    },
    "163": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%bitlen%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "164": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "aggregate%arc4_encoded%0#0",
        "aggregate%bitlen%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%bitlen%0#0",
        "64"
      ]
    },
    "166": {
      "op": "<=",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%lte%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%lte%0#0"
      ]
    },
    "167": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "168": {
      "op": "dup",
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%arc4_encoded%0#0 (copy)"
      ]
    },
    "169": {
      "op": "len",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%len%0#0"
      ]
    },
    "170": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%arc4_encoded%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%len%0#0",
        "8"
      ]
    },
    "171": {
      "op": "-",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%sub%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%sub%0#0"
      ]
    },
    "172": {
      "op": "extract_uint64",
      "defined_out": [
        "too_big#0"
      ],
      "stack_out": [
        "too_big#0"
      ]
    },
    "173": {
      "error": "this should not happen",
      "op": "assert // this should not happen",
      "stack_out": []
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    }
  }
}