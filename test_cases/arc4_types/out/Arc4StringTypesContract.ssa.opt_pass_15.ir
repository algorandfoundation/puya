contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L8
                let value#0: bytes = 0x000461626364
                let expr_value_trimmed%57#0: bytes = ((extract 2 0) value#0)
                let concatenated%59#0: bytes = (concat expr_value_trimmed%57#0 "e")
                let len_%60#0: uint64 = (len concatenated%59#0)
                let len_bytes%61#0: bytes = (itob len_%60#0)
                let len_16_bit%62#0: bytes = ((extract 6 0) len_bytes%61#0)
                let value#1: bytes = (concat len_16_bit%62#0 concatenated%59#0)
                let expr_value_trimmed%64#0: bytes = ((extract 2 0) value#1)
                let concatenated%66#0: bytes = (concat expr_value_trimmed%64#0 "f")
                let len_%67#0: uint64 = (len concatenated%66#0)
                let len_bytes%68#0: bytes = (itob len_%67#0)
                let len_16_bit%69#0: bytes = ((extract 6 0) len_bytes%68#0)
                let value#2: bytes = (concat len_16_bit%69#0 concatenated%66#0)
                let expr_value_trimmed%71#0: bytes = ((extract 2 0) value#2)
                let concatenated%73#0: bytes = (concat expr_value_trimmed%71#0 "g")
                let len_%74#0: uint64 = (len concatenated%73#0)
                let len_bytes%75#0: bytes = (itob len_%74#0)
                let len_16_bit%76#0: bytes = ((extract 6 0) len_bytes%75#0)
                let value#3: bytes = (concat len_16_bit%76#0 concatenated%73#0)
                let tmp%78#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%78#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L42
                return 1u