contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> uint64:
            block@0: // L8
                let value_as_bytes%1#0: bytes = (itob 12u)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let some_bytes_as_string#0: bytes = (concat value_as_uint16%2#0 "Hello World!")
                let some_bytes_as_bytes_again#0: bytes = ((extract 2 0) some_bytes_as_string#0)
                let tmp%3#0: uint64 = (!= "Hello World!" some_bytes_as_string#0)
                (assert tmp%3#0) // Original bytes should not match encoded bytes
                let awst_tmp%4#0: uint64 = (len some_bytes_as_string#0)
                let tmp%5#0: uint64 = (< 2u awst_tmp%4#0)
                goto tmp%5#0 ? block@1 : block@2
            block@1: // ternary_true_L20
                let ternary_result%6#0: uint64 = 2u
                goto block@3
            block@2: // ternary_false_L20
                goto block@3
            block@3: // ternary_merge_L20
                let ternary_result%6#2: uint64 = Ï†(ternary_result%6#0 <- block@1, awst_tmp%4#0 <- block@2)
                let base_length%7#0: uint64 = (len some_bytes_as_string#0)
                let tmp%8#0: bytes = (substring3 some_bytes_as_string#0 ternary_result%6#2 base_length%7#0)
                let tmp%9#0: uint64 = (== "Hello World!" tmp%8#0)
                (assert tmp%9#0) // Original bytes should match encoded if we strip the length header
                let tmp%10#0: uint64 = (== "Hello World!" some_bytes_as_bytes_again#0)
                (assert tmp%10#0)
                let concatenated%13#0: bytes = (concat "Hello" " ")
                let len_%14#0: uint64 = (len concatenated%13#0)
                let len_bytes%15#0: bytes = (itob len_%14#0)
                let len_16_bit%16#0: bytes = ((extract 6 0) len_bytes%15#0)
                let concat_result%17#0: bytes = (concat len_16_bit%16#0 concatenated%13#0)
                let expr_value_trimmed%18#0: bytes = ((extract 2 0) concat_result%17#0)
                let concatenated%20#0: bytes = (concat expr_value_trimmed%18#0 "World!")
                let len_%21#0: uint64 = (len concatenated%20#0)
                let len_bytes%22#0: bytes = (itob len_%21#0)
                let len_16_bit%23#0: bytes = ((extract 6 0) len_bytes%22#0)
                let concat_result%24#0: bytes = (concat len_16_bit%23#0 concatenated%20#0)
                let tmp%25#0: uint64 = (== "\x00\x0cHello World!" concat_result%24#0)
                (assert tmp%25#0)
                let concatenated%28#0: bytes = (concat "hi" "hi")
                let len_%29#0: uint64 = (len concatenated%28#0)
                let len_bytes%30#0: bytes = (itob len_%29#0)
                let len_16_bit%31#0: bytes = ((extract 6 0) len_bytes%30#0)
                let thing#1: bytes = (concat len_16_bit%31#0 concatenated%28#0)
                let tmp%33#0: uint64 = (== thing#1 "\x00\x04hihi")
                (assert tmp%33#0)
                let len_%37#0: uint64 = (len "ab")
                let len_bytes%38#0: bytes = (itob len_%37#0)
                let len_16_bit%39#0: bytes = ((extract 6 0) len_bytes%38#0)
                let concat_result%40#0: bytes = (concat len_16_bit%39#0 "ab")
                let expr_value_trimmed%41#0: bytes = ((extract 2 0) concat_result%40#0)
                let concatenated%43#0: bytes = (concat expr_value_trimmed%41#0 "c")
                let len_%44#0: uint64 = (len concatenated%43#0)
                let len_bytes%45#0: bytes = (itob len_%44#0)
                let len_16_bit%46#0: bytes = ((extract 6 0) len_bytes%45#0)
                let concat_result%47#0: bytes = (concat len_16_bit%46#0 concatenated%43#0)
                let expr_value_trimmed%48#0: bytes = ((extract 2 0) concat_result%47#0)
                let concatenated%50#0: bytes = (concat expr_value_trimmed%48#0 "d")
                let len_%51#0: uint64 = (len concatenated%50#0)
                let len_bytes%52#0: bytes = (itob len_%51#0)
                let len_16_bit%53#0: bytes = ((extract 6 0) len_bytes%52#0)
                let value#0: bytes = (concat len_16_bit%53#0 concatenated%50#0)
                let expr_value_trimmed%55#0: bytes = ((extract 2 0) value#0)
                let concatenated%57#0: bytes = (concat expr_value_trimmed%55#0 "e")
                let len_%58#0: uint64 = (len concatenated%57#0)
                let len_bytes%59#0: bytes = (itob len_%58#0)
                let len_16_bit%60#0: bytes = ((extract 6 0) len_bytes%59#0)
                let value#1: bytes = (concat len_16_bit%60#0 concatenated%57#0)
                let expr_value_trimmed%62#0: bytes = ((extract 2 0) value#1)
                let concatenated%64#0: bytes = (concat expr_value_trimmed%62#0 "f")
                let len_%65#0: uint64 = (len concatenated%64#0)
                let len_bytes%66#0: bytes = (itob len_%65#0)
                let len_16_bit%67#0: bytes = ((extract 6 0) len_bytes%66#0)
                let value#2: bytes = (concat len_16_bit%67#0 concatenated%64#0)
                let expr_value_trimmed%69#0: bytes = ((extract 2 0) value#2)
                let concatenated%71#0: bytes = (concat expr_value_trimmed%69#0 "g")
                let len_%72#0: uint64 = (len concatenated%71#0)
                let len_bytes%73#0: bytes = (itob len_%72#0)
                let len_16_bit%74#0: bytes = ((extract 6 0) len_bytes%73#0)
                let value#3: bytes = (concat len_16_bit%74#0 concatenated%71#0)
                let tmp%76#0: uint64 = (== "\x00\x07abcdefg" value#3)
                (assert tmp%76#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> uint64:
            block@0: // L42
                return 1u