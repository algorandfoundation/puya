{
    "name": "MutableParams2",
    "structs": {},
    "methods": [
        {
            "name": "test_array_rebinding",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        28
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        45
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        31
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIC8vIGFyYzRfdHlwZXMvbXV0YWJsZV9wYXJhbXMyLnB5OjQKICAgIC8vIGNsYXNzIE11dGFibGVQYXJhbXMyKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A2CiAgICBwdXNoYnl0ZXMgMHg2YWM0YTU1NyAvLyBtZXRob2QgInRlc3RfYXJyYXlfcmViaW5kaW5nKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl90ZXN0X2FycmF5X3JlYmluZGluZ19yb3V0ZUAzCgptYWluX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weTo0CiAgICAvLyBjbGFzcyBNdXRhYmxlUGFyYW1zMihhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3Rlc3RfYXJyYXlfcmViaW5kaW5nX3JvdXRlQDM6CiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weTo1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfYXJyYXlfcmViaW5kaW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A2OgogICAgLy8gYXJjNF90eXBlcy9tdXRhYmxlX3BhcmFtczIucHk6NAogICAgLy8gY2xhc3MgTXV0YWJsZVBhcmFtczIoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLmFyYzRfdHlwZXMubXV0YWJsZV9wYXJhbXMyLk11dGFibGVQYXJhbXMyLnRlc3RfYXJyYXlfcmViaW5kaW5nKCkgLT4gdm9pZDoKdGVzdF9hcnJheV9yZWJpbmRpbmc6CiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weTo3CiAgICAvLyBhID0gYXJjNC5EeW5hbWljQnl0ZXMoMCkKICAgIHB1c2hieXRlcyAweDAwMDEwMAogICAgLy8gYXJjNF90eXBlcy9tdXRhYmxlX3BhcmFtczIucHk6OAogICAgLy8gc2VsZi5tYXliZV9tb2RpZnlfYXJyYXkoYSwgYXNzaWduX2xvY2FsPVRydWUpCiAgICBpbnRjXzEgLy8gMQogICAgY2FsbHN1YiBtYXliZV9tb2RpZnlfYXJyYXkKICAgIC8vIGFyYzRfdHlwZXMvbXV0YWJsZV9wYXJhbXMyLnB5OjkKICAgIC8vIGFzc2VydCBhID09IGFyYzQuRHluYW1pY0J5dGVzKDAsIDEpCiAgICBwdXNoYnl0ZXMgMHgwMDAyMDAwMQogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJjNF90eXBlcy9tdXRhYmxlX3BhcmFtczIucHk6MTEKICAgIC8vIGEgPSBhcmM0LkR5bmFtaWNCeXRlcygxKQogICAgcHVzaGJ5dGVzIDB4MDAwMTAxCiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weToxMgogICAgLy8gc2VsZi5tYXliZV9tb2RpZnlfYXJyYXkoYSwgYXNzaWduX2xvY2FsPUZhbHNlKQogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgbWF5YmVfbW9kaWZ5X2FycmF5CiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weToxMwogICAgLy8gYXNzZXJ0IGEgPT0gYXJjNC5EeW5hbWljQnl0ZXMoMSwgNDIsIDQpCiAgICBwdXNoYnl0ZXMgMHgwMDAzMDEyYTA0CiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFyYzRfdHlwZXMubXV0YWJsZV9wYXJhbXMyLk11dGFibGVQYXJhbXMyLm1heWJlX21vZGlmeV9hcnJheShhOiBieXRlcywgYXNzaWduX2xvY2FsOiB1aW50NjQpIC0+IGJ5dGVzOgptYXliZV9tb2RpZnlfYXJyYXk6CiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weToxNS0xNgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBtYXliZV9tb2RpZnlfYXJyYXkoc2VsZiwgYTogYXJjNC5EeW5hbWljQnl0ZXMsICosIGFzc2lnbl9sb2NhbDogYm9vbCkgLT4gTm9uZTogICMgdjAKICAgIHByb3RvIDIgMQogICAgaW50Y18wIC8vIDAKICAgIGludGNfMSAvLyAxCiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weToxNwogICAgLy8gaWYgYXNzaWduX2xvY2FsOgogICAgZnJhbWVfZGlnIC0xCiAgICBieiBtYXliZV9tb2RpZnlfYXJyYXlfZWxzZV9ib2R5QDEwCiAgICAvLyBhcmM0X3R5cGVzL211dGFibGVfcGFyYW1zMi5weToxOAogICAgLy8gYS5hcHBlbmQoYXJjNC5CeXRlKDEpKSAgIyB2MTogbW9kaWZ5IG91dAogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGJ5dGVzIDB4MDEKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIGFyYzRfdHlwZXMvbXV0YWJsZV9wYXJhbXMyLnB5OjIxCiAgICAvLyBhID0gYXJjNC5EeW5hbWljQnl0ZXMoMSwgMiwgNCkgICMgdjQ6IGxvY2FsIG9ubHkKICAgIHB1c2hieXRlcyAweDAwMDMwMTAyMDQKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9idXJ5IC0yCgptYXliZV9tb2RpZnlfYXJyYXlfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIGFyYzRfdHlwZXMvbXV0YWJsZV9wYXJhbXMyLnB5OjI1CiAgICAvLyBhLmFwcGVuZChhcmM0LkJ5dGUoNCkpICAjIHY2OiBtb2RpZnkgb3V0IElGIG5vdCBiIEVMU0UgbG9jYWwgb25seQogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGJ5dGVzIDB4MDQKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgLTIKICAgIGZyYW1lX2RpZyAxCiAgICBieiBtYXliZV9tb2RpZnlfYXJyYXlfYWZ0ZXJfaWZfZWxzZUAxNQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9idXJ5IDAKCm1heWJlX21vZGlmeV9hcnJheV9hZnRlcl9pZl9lbHNlQDE1OgogICAgcmV0c3ViCgptYXliZV9tb2RpZnlfYXJyYXlfZWxzZV9ib2R5QDEwOgogICAgLy8gYXJjNF90eXBlcy9tdXRhYmxlX3BhcmFtczIucHk6MjMKICAgIC8vIGEuYXBwZW5kKGFyYzQuQnl0ZSg0MikpICAjIHY1OiBtb2RpZnkgb3V0CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoYnl0ZXMgMHgyYQogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwbiAyCiAgICBmcmFtZV9idXJ5IC0yCiAgICBmcmFtZV9idXJ5IDAKICAgIGZyYW1lX2J1cnkgLTIKICAgIGIgbWF5YmVfbW9kaWZ5X2FycmF5X2FmdGVyX2lmX2Vsc2VAMTMK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAExG0EAG4AEasSlVzYaAI4BAAIiQzEZFEQxGESIAA0jQzEZQP/tMRgURCNDgAMAAQAjiAAbgAQAAgABEkSAAwABASKIAAqABQADASoEEkSJigIBIiOL/0EAQIv+VwIAgAEBUEkVFlcGAkxQjP6ABQADAQIEIowBi/6MAIz+i/5XAgCAAQRQSRUWVwYCTFCM/osBQQAEi/6MAImL/lcCAIABKlBJFRZXBgJMUEcCjP6MAIz+Qv/H",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}