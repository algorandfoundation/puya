contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> bool:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let array_data%0#0: bytes = 0x
                let array_data%0#1: bytes = (concat array_data%0#0 0x01)
                let array_data%0#2: bytes = (concat array_data%0#1 0x02)
                let array_data%0#3: bytes = (concat array_data%0#2 0x03)
                let array_data%0#4: bytes = (concat array_data%0#3 0x04)
                let my_array#0: bytes = array_data%0#4
                let tmp%0#0: bytes = (setbit 0x00 0u 1u)
                let length%0#0: uint64 = (len "Happy")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%1#0: bytes = (concat value_as_uint16%0#0 "Happy")
                let length%1#0: uint64 = (len "Days")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%2#0: bytes = (concat value_as_uint16%1#0 "Days")
                let current_tail_offset%0#0: uint64 = 6u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#0 tmp%0#0)
                let encoded_tuple_buffer%0#2: bytes = (concat encoded_tuple_buffer%0#1 0x32)
                let value_as_bytes%2#0: bytes = (itob current_tail_offset%0#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let encoded_tuple_buffer%0#3: bytes = (concat encoded_tuple_buffer%0#2 value_as_uint16%2#0)
                let data_length%0#0: uint64 = (len tmp%1#0)
                let current_tail_offset%0#1: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
                let value_as_bytes%3#0: bytes = (itob current_tail_offset%0#1)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let encoded_tuple_buffer%0#4: bytes = (concat encoded_tuple_buffer%0#3 value_as_uint16%3#0)
                let data_length%1#0: uint64 = (len tmp%2#0)
                let current_tail_offset%0#2: uint64 = (+ current_tail_offset%0#1 data_length%1#0)
                let encoded_tuple_buffer%0#5: bytes = (concat encoded_tuple_buffer%0#4 tmp%1#0)
                let encoded_tuple_buffer%0#6: bytes = (concat encoded_tuple_buffer%0#5 tmp%2#0)
                let my_struct#0: bytes = encoded_tuple_buffer%0#6
                let copy%0#0: bytes = my_array#0
                let my_array_copy#0: bytes = copy%0#0
                let copy%1#0: bytes = my_struct#0
                let my_struct_copy#0: bytes = copy%1#0
                let assigned_value%0#0: bytes = 0x05
                let updated_target%0#0: bytes = (replace3 my_array#0 2u assigned_value%0#0)
                let my_array#1: bytes = updated_target%0#0
                let item_index%0#0: uint64 = (* 2u 1u)
                let reinterpret_biguint%0#0: biguint = (extract3 my_array_copy#0 item_index%0#0 1u)
                let reinterpret_biguint%1#0: biguint = 0x03
                let tmp%3#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%3#0) // my_array_copy should be unchanged
                let item_index%1#0: uint64 = (* 2u 1u)
                let reinterpret_biguint%2#0: biguint = (extract3 my_array#1 item_index%1#0 1u)
                let reinterpret_biguint%3#0: biguint = 0x05
                let tmp%4#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
                (assert tmp%4#0) // my_array should be mutated
                let (other_routine%0#0: bool, other_routine%1#0: bool, other_routine%2#0: bytes, other_routine%3#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
                let my_struct#1: bytes = other_routine%3#0
                let my_array#2: bytes = other_routine%2#0
                let t#0: bool = other_routine%0#0
                let f#0: bool = other_routine%1#0
                (assert t#0)
                let tmp%5#0: bool = (! f#0)
                (assert tmp%5#0)
                let item_index%2#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%4#0: biguint = (extract3 my_array#2 item_index%2#0 1u)
                let reinterpret_biguint%5#0: biguint = 0x05
                let tmp%6#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
                (assert tmp%6#0) // my_array has been mutated by the subroutine
                let item_index%3#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_length%0#0: uint64 = (extract_uint16 my_struct#1 item_index%3#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%7#0: bytes = (extract3 my_struct#1 item_index%3#0 item_length_plus_2%0#0)
                let length%2#0: uint64 = (len "AARRGH!")
                let value_as_bytes%4#0: bytes = (itob length%2#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%8#0: bytes = (concat value_as_uint16%4#0 "AARRGH!")
                let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
                (assert tmp%9#0) // my_struct has been mutated by the subroutine
                let copy%2#0: bytes = my_array_copy#0
                let copy%3#0: bytes = my_struct_copy#0
                let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: bytes, other_routine%7#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(copy%2#0, copy%3#0)
                let copy%3#1: bytes = other_routine%7#0
                let copy%2#1: bytes = other_routine%6#0
                let item_index%4#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%6#0: biguint = (extract3 my_array_copy#0 item_index%4#0 1u)
                let reinterpret_biguint%7#0: biguint = 0x02
                let tmp%10#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
                (assert tmp%10#0) // my_array_copy should not be mutated by the subroutine
                let item_index%5#0: uint64 = (extract_uint16 my_struct_copy#0 2u)
                let item_length%1#0: uint64 = (extract_uint16 my_struct_copy#0 item_index%5#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let tmp%11#0: bytes = (extract3 my_struct_copy#0 item_index%5#0 item_length_plus_2%1#0)
                let length%3#0: uint64 = (len "Happy")
                let value_as_bytes%5#0: bytes = (itob length%3#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let tmp%12#0: bytes = (concat value_as_uint16%5#0 "Happy")
                let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
                (assert tmp%13#0) // my_struct_copy should not be mutated by the subroutine
                let copy%4#0: bytes = my_array_copy#0
                let my_array_copy_2#0: bytes = copy%4#0
                let (other_routine_2%0#0: bytes, other_routine_2%1#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
                let my_array_copy_2#1: bytes = other_routine_2%1#0
                let my_array_copy_2#2: bytes = (other_routine_2%0#0)
                let item_index%6#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%8#0: biguint = (extract3 my_array_copy_2#2 item_index%6#0 1u)
                let reinterpret_biguint%9#0: biguint = 0x01
                let tmp%14#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
                (assert tmp%14#0) // my_array_copy_2 should have original value
                let (other_routine_2%2#0: bytes, other_routine_2%3#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let my_array_copy_2#3: bytes = other_routine_2%3#0
                let item_index%7#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%10#0: biguint = (extract3 my_array_copy_2#3 item_index%7#0 1u)
                let reinterpret_biguint%11#0: biguint = 0x0a
                let tmp%15#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
                (assert tmp%15#0) // my_array_copy_2 should have mutated value
                let copy%5#0: bytes = my_array#2
                let current_tail_offset%1#0: uint64 = 4u
                let encoded_tuple_buffer%1#0: bytes = 0x
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#0 copy%5#0)
                let nested#0: bytes = encoded_tuple_buffer%1#1
                let tmp%16#0: bytes = (extract3 nested#0 0u 4u)
                let copy%6#0: bytes = tmp%16#0
                let (other_routine_2%4#0: bytes, other_routine_2%5#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(copy%6#0)
                let copy%6#1: bytes = other_routine_2%5#0
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <bool, bool, bytes, bytes>:
            block@0: // L92
                let assigned_value%0#0: bytes = 0x05
                let updated_target%0#0: bytes = (replace3 array#0 1u assigned_value%0#0)
                let array#1: bytes = updated_target%0#0
                let length%0#0: uint64 = (len "AARRGH!")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let assigned_value%1#0: bytes = (concat value_as_uint16%0#0 "AARRGH!")
                let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%0#0: uint64 = (len struct#0)
                let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 assigned_value%1#0)
                let updated_data%0#1: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
                let new_value_length%0#0: uint64 = (len assigned_value%1#0)
                let tail_cursor%0#0: uint64 = (+ item_offset%0#0 new_value_length%0#0)
                let updated_header_bytes%0#0: bytes = (itob tail_cursor%0#0)
                let updated_header_bytes%0#1: bytes = ((substring 6 8) updated_header_bytes%0#0)
                let updated_data%0#2: bytes = ((replace2 4) updated_data%0#1 updated_header_bytes%0#1)
                let struct#1: bytes = updated_data%0#2
                return 1u 0u array#1 struct#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L98
                let copy%0#0: bytes = array#0
                let copy#0: bytes = copy%0#0
                let assigned_value%0#0: bytes = 0x0a
                let updated_target%0#0: bytes = (replace3 array#0 0u assigned_value%0#0)
                let array#1: bytes = updated_target%0#0
                return copy#0 array#1
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> bool:
            block@0: // L115
                return 1u