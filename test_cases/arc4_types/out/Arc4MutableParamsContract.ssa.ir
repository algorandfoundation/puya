contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> bool:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let result%0#0: bytes = (concat 0x 0x01)
                let result%1#0: bytes = (concat result%0#0 0x02)
                let result%2#0: bytes = (concat result%1#0 0x03)
                let result%3#0: bytes = (concat result%2#0 0x04)
                let array_data%0#0: bytes = (concat 0x result%3#0)
                let my_array#0: bytes = array_data%0#0
                let encoded_bool%0#0: bytes = (setbit 0x00 0u 1u)
                let length%0#0: uint64 = (len "Happy")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Happy")
                let length%1#0: uint64 = (len "Days")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "Days")
                let current_tail_offset%0#0: uint64 = 6u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 encoded_bool%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x32)
                let as_bytes%2#0: bytes = (itob current_tail_offset%0#0)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let data_length%1#0: uint64 = (len encoded_value%1#0)
                let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%0#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%1#0)
                let my_struct#0: bytes = encoded_tuple_buffer%6#0
                let copy%0#0: bytes = my_array#0
                let my_array_copy#0: bytes = copy%0#0
                let copy%1#0: bytes = my_struct#0
                let my_struct_copy#0: bytes = copy%1#0
                let assigned_value%0#0: bytes = 0x05
                let updated_target%0#0: bytes = (replace3 my_array#0 2u assigned_value%0#0)
                let my_array#1: bytes = updated_target%0#0
                let array_head_and_tail%0#0: bytes = my_array_copy#0
                let item_offset%0#0: uint64 = (* 2u 1u)
                let reinterpret_biguint%0#0: biguint = (extract3 array_head_and_tail%0#0 item_offset%0#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%1#0: biguint = 0x03
                let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                (assert tmp%0#0) // my_array_copy should be unchanged
                let array_head_and_tail%1#0: bytes = my_array#1
                let item_offset%1#0: uint64 = (* 2u 1u)
                let reinterpret_biguint%2#0: biguint = (extract3 array_head_and_tail%1#0 item_offset%1#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%3#0: biguint = 0x05
                let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
                (assert tmp%1#0) // my_array should be mutated
                let (other_routine%0#0: bool, other_routine%1#0: bool, other_routine%2#0: bytes, other_routine%3#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
                let my_struct#1: bytes = other_routine%3#0
                let my_array#2: bytes = other_routine%2#0
                let t#0: bool = other_routine%0#0
                let f#0: bool = other_routine%1#0
                (assert t#0)
                let tmp%2#0: bool = (! f#0)
                (assert tmp%2#0)
                let array_head_and_tail%2#0: bytes = my_array#2
                let item_offset%2#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%4#0: biguint = (extract3 array_head_and_tail%2#0 item_offset%2#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%5#0: biguint = 0x05
                let tmp%3#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
                (assert tmp%3#0) // my_array has been mutated by the subroutine
                let item_start_offset%0#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_end_offset%0#0: uint64 = (extract_uint16 my_struct#1 4u)
                let tmp%4#0: bytes = (substring3 my_struct#1 item_start_offset%0#0 item_end_offset%0#0)
                let length%2#0: uint64 = (len "AARRGH!")
                let as_bytes%4#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "AARRGH!")
                let tmp%5#0: bool = (== tmp%4#0 encoded_value%2#0)
                (assert tmp%5#0) // my_struct has been mutated by the subroutine
                let copy%2#0: bytes = my_array_copy#0
                let copy%3#0: bytes = my_struct_copy#0
                let (other_routine%4#0: bool, other_routine%5#0: bool, other_routine%6#0: bytes, other_routine%7#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(copy%2#0, copy%3#0)
                let copy%3#1: bytes = other_routine%7#0
                let copy%2#1: bytes = other_routine%6#0
                let array_head_and_tail%3#0: bytes = my_array_copy#0
                let item_offset%3#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%6#0: biguint = (extract3 array_head_and_tail%3#0 item_offset%3#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%7#0: biguint = 0x02
                let tmp%6#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
                (assert tmp%6#0) // my_array_copy should not be mutated by the subroutine
                let item_start_offset%1#0: uint64 = (extract_uint16 my_struct_copy#0 2u)
                let item_end_offset%1#0: uint64 = (extract_uint16 my_struct_copy#0 4u)
                let tmp%7#0: bytes = (substring3 my_struct_copy#0 item_start_offset%1#0 item_end_offset%1#0)
                let length%3#0: uint64 = (len "Happy")
                let as_bytes%5#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "Happy")
                let tmp%8#0: bool = (== tmp%7#0 encoded_value%3#0)
                (assert tmp%8#0) // my_struct_copy should not be mutated by the subroutine
                let copy%4#0: bytes = my_array_copy#0
                let my_array_copy_2#0: bytes = copy%4#0
                let (other_routine_2%0#0: bytes, other_routine_2%1#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
                let my_array_copy_2#1: bytes = other_routine_2%1#0
                let my_array_copy_2#2: bytes = (other_routine_2%0#0)
                let array_head_and_tail%4#0: bytes = my_array_copy_2#2
                let item_offset%4#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%8#0: biguint = (extract3 array_head_and_tail%4#0 item_offset%4#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%9#0: biguint = 0x01
                let tmp%9#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
                (assert tmp%9#0) // my_array_copy_2 should have original value
                let (other_routine_2%2#0: bytes, other_routine_2%3#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let my_array_copy_2#3: bytes = other_routine_2%3#0
                let array_head_and_tail%5#0: bytes = my_array_copy_2#3
                let item_offset%5#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%10#0: biguint = (extract3 array_head_and_tail%5#0 item_offset%5#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%11#0: biguint = 0x0a
                let tmp%10#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
                (assert tmp%10#0) // my_array_copy_2 should have mutated value
                let copy%5#0: bytes = my_array_copy#0
                let my_array_copy_3#0: bytes = copy%5#0
                let copy%6#0: bytes = my_array#2
                let copy%7#0: bytes = my_array_copy_2#3
                let copy%8#0: bytes = my_array_copy_3#0
                let (originals.0#0: bytes, originals.1#0: bytes, originals.2#0: bytes) = (copy%6#0, copy%7#0, copy%8#0)
                let copy%9#0: bytes = my_array#2
                let copy%10#0: bytes = my_array_copy_2#3
                let copy%11#0: bytes = my_array_copy_3#0
                let (mutate_tuple_items_and_reassign%0#0: bytes, mutate_tuple_items_and_reassign%1#0: bytes, mutate_tuple_items_and_reassign%2#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(copy%9#0, copy%10#0, copy%11#0, 0u, 1u)
                let copy%11#1: bytes = mutate_tuple_items_and_reassign%2#0
                let copy%10#1: bytes = mutate_tuple_items_and_reassign%1#0
                let copy%9#1: bytes = mutate_tuple_items_and_reassign%0#0
                let tmp%11#0: bool = (== originals.0#0 my_array#2)
                let tmp%12#0: bool = (== originals.1#0 my_array_copy_2#3)
                let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
                let tmp%14#0: bool = (== originals.2#0 my_array_copy_3#0)
                let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
                (assert tmp%15#0)
                let (mutate_tuple_items_and_reassign%3#0: bytes, mutate_tuple_items_and_reassign%4#0: bytes, mutate_tuple_items_and_reassign%5#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#2, my_array_copy_2#3, my_array_copy_3#0, 100u, 1u)
                let my_array_copy_3#1: bytes = mutate_tuple_items_and_reassign%5#0
                let my_array_copy_2#4: bytes = mutate_tuple_items_and_reassign%4#0
                let my_array#3: bytes = mutate_tuple_items_and_reassign%3#0
                let array_head_and_tail%6#0: bytes = my_array#3
                let item_offset%6#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%12#0: biguint = (extract3 array_head_and_tail%6#0 item_offset%6#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%13#0: biguint = 0x64
                let tmp%16#0: bool = (b== reinterpret_biguint%12#0 reinterpret_biguint%13#0)
                (assert tmp%16#0)
                let array_head_and_tail%7#0: bytes = my_array_copy_2#4
                let item_offset%7#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%14#0: biguint = (extract3 array_head_and_tail%7#0 item_offset%7#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%15#0: biguint = 0x65
                let tmp%17#0: bool = (b== reinterpret_biguint%14#0 reinterpret_biguint%15#0)
                (assert tmp%17#0)
                let array_head_and_tail%8#0: bytes = my_array_copy_3#1
                let item_offset%8#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%16#0: biguint = (extract3 array_head_and_tail%8#0 item_offset%8#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%17#0: biguint = 0x66
                let tmp%18#0: bool = (b== reinterpret_biguint%16#0 reinterpret_biguint%17#0)
                (assert tmp%18#0)
                let array_head_and_tail%9#0: bytes = my_array#3
                let item_offset%9#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%18#0: biguint = (extract3 array_head_and_tail%9#0 item_offset%9#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%19#0: biguint = 0x67
                let tmp%19#0: bool = (b== reinterpret_biguint%18#0 reinterpret_biguint%19#0)
                (assert tmp%19#0)
                let array_head_and_tail%10#0: bytes = my_array_copy_2#4
                let item_offset%10#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%20#0: biguint = (extract3 array_head_and_tail%10#0 item_offset%10#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%21#0: biguint = 0x68
                let tmp%20#0: bool = (b== reinterpret_biguint%20#0 reinterpret_biguint%21#0)
                (assert tmp%20#0)
                let array_head_and_tail%11#0: bytes = my_array_copy_3#1
                let item_offset%11#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%22#0: biguint = (extract3 array_head_and_tail%11#0 item_offset%11#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%23#0: biguint = 0x69
                let tmp%21#0: bool = (b== reinterpret_biguint%22#0 reinterpret_biguint%23#0)
                (assert tmp%21#0)
                let (mutate_tuple_items_and_reassign%6#0: bytes, mutate_tuple_items_and_reassign%7#0: bytes, mutate_tuple_items_and_reassign%8#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(my_array#3, my_array_copy_2#4, my_array_copy_3#1, 200u, 0u)
                let my_array_copy_3#2: bytes = mutate_tuple_items_and_reassign%8#0
                let my_array_copy_2#5: bytes = mutate_tuple_items_and_reassign%7#0
                let my_array#4: bytes = mutate_tuple_items_and_reassign%6#0
                let array_head_and_tail%12#0: bytes = my_array#4
                let item_offset%12#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%24#0: biguint = (extract3 array_head_and_tail%12#0 item_offset%12#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%25#0: biguint = 0xc8
                let tmp%22#0: bool = (b== reinterpret_biguint%24#0 reinterpret_biguint%25#0)
                (assert tmp%22#0)
                let array_head_and_tail%13#0: bytes = my_array_copy_2#5
                let item_offset%13#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%26#0: biguint = (extract3 array_head_and_tail%13#0 item_offset%13#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%27#0: biguint = 0xc9
                let tmp%23#0: bool = (b== reinterpret_biguint%26#0 reinterpret_biguint%27#0)
                (assert tmp%23#0)
                let array_head_and_tail%14#0: bytes = my_array_copy_3#2
                let item_offset%14#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%28#0: biguint = (extract3 array_head_and_tail%14#0 item_offset%14#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%29#0: biguint = 0xca
                let tmp%24#0: bool = (b== reinterpret_biguint%28#0 reinterpret_biguint%29#0)
                (assert tmp%24#0)
                let array_head_and_tail%15#0: bytes = my_array#4
                let item_offset%15#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%30#0: biguint = (extract3 array_head_and_tail%15#0 item_offset%15#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%31#0: biguint = 0xce
                let tmp%25#0: bool = (b== reinterpret_biguint%30#0 reinterpret_biguint%31#0)
                (assert tmp%25#0)
                let array_head_and_tail%16#0: bytes = my_array_copy_2#5
                let item_offset%16#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%32#0: biguint = (extract3 array_head_and_tail%16#0 item_offset%16#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%33#0: biguint = 0xcf
                let tmp%26#0: bool = (b== reinterpret_biguint%32#0 reinterpret_biguint%33#0)
                (assert tmp%26#0)
                let array_head_and_tail%17#0: bytes = my_array_copy_3#2
                let item_offset%17#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%34#0: biguint = (extract3 array_head_and_tail%17#0 item_offset%17#0 1u) // on error: Index access is out of bounds
                let reinterpret_biguint%35#0: biguint = 0xd0
                let tmp%27#0: bool = (b== reinterpret_biguint%34#0 reinterpret_biguint%35#0)
                (assert tmp%27#0)
                let copy%12#0: bytes = my_array#4
                let current_tail_offset%3#0: uint64 = 4u
                let encoded_tuple_buffer%7#0: bytes = 0x
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 copy%12#0)
                let nested#0: bytes = encoded_tuple_buffer%8#0
                let tmp%28#0: bytes = (extract3 nested#0 0u 4u) // on error: Index access is out of bounds
                let copy%13#0: bytes = tmp%28#0
                let (other_routine_2%4#0: bytes, other_routine_2%5#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(copy%13#0)
                let copy%13#1: bytes = other_routine_2%5#0
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <bool, bool, bytes, bytes>:
            block@0: // L118
                let array%is_original#0: bool = 1u
                let array%out#0: bytes = array#0
                let struct%is_original#0: bool = 1u
                let struct%out#0: bytes = struct#0
                let assigned_value%0#0: bytes = 0x05
                let updated_target%0#0: bytes = (replace3 array#0 1u assigned_value%0#0)
                let array#1: bytes = updated_target%0#0
                goto array%is_original#0 ? block@1 : block@2
            block@1: // if_body_L1
                let array%out#1: bytes = array#1
                goto block@2
            block@2: // after_if_else_L1
                let length%0#0: uint64 = (len "AARRGH!")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "AARRGH!")
                let assigned_value%1#0: bytes = encoded_value%0#0
                let item_offset%0#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%0#0: bytes = (extract3 struct#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%0#0: uint64 = (len struct#0)
                let data_beyond_item%0#0: bytes = (substring3 struct#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 assigned_value%1#0)
                let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
                let new_value_length%0#0: uint64 = (len assigned_value%1#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 4u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%1#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let updated_data%2#0: bytes = (replace3 updated_data%1#0 4u tail_offset_bytes%0#0)
                let struct#2: bytes = updated_data%2#0
                goto struct%is_original#0 ? block@3 : block@4
            block@3: // if_body_L1
                let struct%out#1: bytes = struct#2
                goto block@4
            block@4: // after_if_else_L1
                return 1u 0u array#1 struct#2
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L124
                let array%is_original#0: bool = 1u
                let array%out#0: bytes = array#0
                let copy%0#0: bytes = array#0
                let copy#0: bytes = copy%0#0
                let assigned_value%0#0: bytes = 0x0a
                let updated_target%0#0: bytes = (replace3 array#0 0u assigned_value%0#0)
                let array#1: bytes = updated_target%0#0
                goto array%is_original#0 ? block@1 : block@2
            block@1: // if_body_L1
                let array%out#1: bytes = array#1
                goto block@2
            block@2: // after_if_else_L1
                return copy#0 array#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes, start: uint64, reassign: bool) -> <bytes, bytes, bytes>:
            block@0: // L130
                let arrays.0%is_original#0: bool = 1u
                let arrays.0%out#0: bytes = arrays.0#0
                let arrays.1%is_original#0: bool = 1u
                let arrays.1%out#0: bytes = arrays.1#0
                let arrays.2%is_original#0: bool = 1u
                let arrays.2%out#0: bytes = arrays.2#0
                let val_as_bytes%0#0: bytes = (itob start#0)
                let assigned_value%0#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let updated_target%0#0: bytes = (replace3 arrays.0#0 0u assigned_value%0#0)
                let arrays.0#1: bytes = updated_target%0#0
                goto arrays.0%is_original#0 ? block@1 : block@2
            block@1: // if_body_L1
                let arrays.0%out#1: bytes = arrays.0#1
                goto block@2
            block@2: // after_if_else_L1
                let arrays.0%out#14: bytes = φ(arrays.0%out#0 <- block@0, arrays.0%out#1 <- block@1)
                let to_encode%0#0: uint64 = (+ start#0 1u)
                let val_as_bytes%1#0: bytes = (itob to_encode%0#0)
                let assigned_value%1#0: bytes = ((extract 7 1) val_as_bytes%1#0)
                let updated_target%1#0: bytes = (replace3 arrays.1#0 0u assigned_value%1#0)
                let arrays.1#2: bytes = updated_target%1#0
                goto arrays.1%is_original#0 ? block@3 : block@4
            block@3: // if_body_L1
                let arrays.1%out#1: bytes = arrays.1#2
                goto block@4
            block@4: // after_if_else_L1
                let arrays.1%out#13: bytes = φ(arrays.1%out#0 <- block@2, arrays.1%out#1 <- block@3)
                let to_encode%1#0: uint64 = (+ start#0 2u)
                let val_as_bytes%2#0: bytes = (itob to_encode%1#0)
                let assigned_value%2#0: bytes = ((extract 7 1) val_as_bytes%2#0)
                let updated_target%2#0: bytes = (replace3 arrays.2#0 0u assigned_value%2#0)
                let arrays.2#3: bytes = updated_target%2#0
                goto arrays.2%is_original#0 ? block@5 : block@6
            block@5: // if_body_L1
                let arrays.2%out#1: bytes = arrays.2#3
                goto block@6
            block@6: // after_if_else_L1
                let arrays.2%out#12: bytes = φ(arrays.2%out#0 <- block@4, arrays.2%out#1 <- block@5)
                let array_head_and_tail%0#0: bytes = arrays.0#1
                let item_offset%0#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%0#0: biguint = (extract3 array_head_and_tail%0#0 item_offset%0#0 1u) // on error: Index access is out of bounds
                let tmp%0#0: biguint = (itob start#0)
                let tmp%1#0: bool = (b== reinterpret_biguint%0#0 tmp%0#0)
                (assert tmp%1#0)
                let array_head_and_tail%1#0: bytes = arrays.1#2
                let item_offset%1#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%1#0: biguint = (extract3 array_head_and_tail%1#0 item_offset%1#0 1u) // on error: Index access is out of bounds
                let tmp%2#0: uint64 = (+ start#0 1u)
                let tmp%3#0: biguint = (itob tmp%2#0)
                let tmp%4#0: bool = (b== reinterpret_biguint%1#0 tmp%3#0)
                (assert tmp%4#0)
                let array_head_and_tail%2#0: bytes = arrays.2#3
                let item_offset%2#0: uint64 = (* 0u 1u)
                let reinterpret_biguint%2#0: biguint = (extract3 array_head_and_tail%2#0 item_offset%2#0 1u) // on error: Index access is out of bounds
                let tmp%5#0: uint64 = (+ start#0 2u)
                let tmp%6#0: biguint = (itob tmp%5#0)
                let tmp%7#0: bool = (b== reinterpret_biguint%2#0 tmp%6#0)
                (assert tmp%7#0)
                let to_encode%2#0: uint64 = (+ start#0 3u)
                let val_as_bytes%3#0: bytes = (itob to_encode%2#0)
                let assigned_value%3#0: bytes = ((extract 7 1) val_as_bytes%3#0)
                let updated_target%3#0: bytes = (replace3 arrays.0#1 1u assigned_value%3#0)
                let arrays.0#5: bytes = updated_target%3#0
                goto arrays.0%is_original#0 ? block@7 : block@8
            block@7: // if_body_L1
                let arrays.0%out#2: bytes = arrays.0#5
                goto block@8
            block@8: // after_if_else_L1
                let arrays.0%out#11: bytes = φ(arrays.0%out#14 <- block@6, arrays.0%out#2 <- block@7)
                let to_encode%3#0: uint64 = (+ start#0 4u)
                let val_as_bytes%4#0: bytes = (itob to_encode%3#0)
                let assigned_value%4#0: bytes = ((extract 7 1) val_as_bytes%4#0)
                let updated_target%4#0: bytes = (replace3 arrays.1#2 1u assigned_value%4#0)
                let arrays.1#6: bytes = updated_target%4#0
                goto arrays.1%is_original#0 ? block@9 : block@10
            block@9: // if_body_L1
                let arrays.1%out#2: bytes = arrays.1#6
                goto block@10
            block@10: // after_if_else_L1
                let arrays.1%out#10: bytes = φ(arrays.1%out#13 <- block@8, arrays.1%out#2 <- block@9)
                let to_encode%4#0: uint64 = (+ start#0 5u)
                let val_as_bytes%5#0: bytes = (itob to_encode%4#0)
                let assigned_value%5#0: bytes = ((extract 7 1) val_as_bytes%5#0)
                let updated_target%5#0: bytes = (replace3 arrays.2#3 1u assigned_value%5#0)
                let arrays.2#7: bytes = updated_target%5#0
                goto arrays.2%is_original#0 ? block@11 : block@12
            block@11: // if_body_L1
                let arrays.2%out#2: bytes = arrays.2#7
                goto block@12
            block@12: // after_if_else_L1
                let arrays.2%out#9: bytes = φ(arrays.2%out#12 <- block@10, arrays.2%out#2 <- block@11)
                goto reassign#0 ? block@13 : block@20
            block@13: // if_body_L148
                let copy%0#0: bytes = arrays.0#5
                let copy%1#0: bytes = arrays.1#6
                let copy%2#0: bytes = arrays.2#7
                let arrays.0%is_original#4: bool = 0u
                let arrays.1%is_original#5: bool = 0u
                let arrays.2%is_original#6: bool = 0u
                let (arrays.0#9: bytes, arrays.1#9: bytes, arrays.2#9: bytes) = (copy%0#0, copy%1#0, copy%2#0)
                goto arrays.0%is_original#4 ? block@14 : block@15
            block@14: // if_body_L1
                let arrays.0%out#3: bytes = arrays.0#9
                goto block@15
            block@15: // after_if_else_L1
                let arrays.0%out#17: bytes = φ(arrays.0%out#11 <- block@13, arrays.0%out#3 <- block@14)
                goto arrays.1%is_original#5 ? block@16 : block@17
            block@16: // if_body_L1
                let arrays.1%out#3: bytes = arrays.1#9
                goto block@17
            block@17: // after_if_else_L1
                let arrays.1%out#16: bytes = φ(arrays.1%out#10 <- block@15, arrays.1%out#3 <- block@16)
                goto arrays.2%is_original#6 ? block@18 : block@19
            block@18: // if_body_L1
                let arrays.2%out#3: bytes = arrays.2#9
                goto block@19
            block@19: // after_if_else_L1
                let arrays.2%out#15: bytes = φ(arrays.2%out#9 <- block@17, arrays.2%out#3 <- block@18)
                goto block@20
            block@20: // after_if_else_L147
                let arrays.0#10: bytes = φ(arrays.0#5 <- block@12, arrays.0#9 <- block@19)
                let arrays.1#11: bytes = φ(arrays.1#6 <- block@12, arrays.1#9 <- block@19)
                let arrays.2#12: bytes = φ(arrays.2#7 <- block@12, arrays.2#9 <- block@19)
                let arrays.0%is_original#5: bool = φ(arrays.0%is_original#0 <- block@12, arrays.0%is_original#4 <- block@19)
                let arrays.1%is_original#8: bool = φ(arrays.1%is_original#0 <- block@12, arrays.1%is_original#5 <- block@19)
                let arrays.2%is_original#11: bool = φ(arrays.2%is_original#0 <- block@12, arrays.2%is_original#6 <- block@19)
                let arrays.0%out#8: bytes = φ(arrays.0%out#11 <- block@12, arrays.0%out#17 <- block@19)
                let arrays.1%out#8: bytes = φ(arrays.1%out#10 <- block@12, arrays.1%out#16 <- block@19)
                let arrays.2%out#8: bytes = φ(arrays.2%out#9 <- block@12, arrays.2%out#15 <- block@19)
                let to_encode%5#0: uint64 = (+ start#0 6u)
                let val_as_bytes%6#0: bytes = (itob to_encode%5#0)
                let assigned_value%6#0: bytes = ((extract 7 1) val_as_bytes%6#0)
                let updated_target%6#0: bytes = (replace3 arrays.0#10 1u assigned_value%6#0)
                let arrays.0#14: bytes = updated_target%6#0
                goto arrays.0%is_original#5 ? block@21 : block@22
            block@21: // if_body_L1
                let arrays.0%out#4: bytes = arrays.0#14
                goto block@22
            block@22: // after_if_else_L1
                let arrays.0%out#7: bytes = φ(arrays.0%out#8 <- block@20, arrays.0%out#4 <- block@21)
                let to_encode%6#0: uint64 = (+ start#0 7u)
                let val_as_bytes%7#0: bytes = (itob to_encode%6#0)
                let assigned_value%7#0: bytes = ((extract 7 1) val_as_bytes%7#0)
                let updated_target%7#0: bytes = (replace3 arrays.1#11 1u assigned_value%7#0)
                let arrays.1#15: bytes = updated_target%7#0
                goto arrays.1%is_original#8 ? block@23 : block@24
            block@23: // if_body_L1
                let arrays.1%out#4: bytes = arrays.1#15
                goto block@24
            block@24: // after_if_else_L1
                let arrays.1%out#6: bytes = φ(arrays.1%out#8 <- block@22, arrays.1%out#4 <- block@23)
                let to_encode%7#0: uint64 = (+ start#0 8u)
                let val_as_bytes%8#0: bytes = (itob to_encode%7#0)
                let assigned_value%8#0: bytes = ((extract 7 1) val_as_bytes%8#0)
                let updated_target%8#0: bytes = (replace3 arrays.2#12 1u assigned_value%8#0)
                let arrays.2#16: bytes = updated_target%8#0
                goto arrays.2%is_original#11 ? block@25 : block@26
            block@25: // if_body_L1
                let arrays.2%out#4: bytes = arrays.2#16
                goto block@26
            block@26: // after_if_else_L1
                let arrays.2%out#5: bytes = φ(arrays.2%out#8 <- block@24, arrays.2%out#4 <- block@25)
                let array_head_and_tail%3#0: bytes = arrays.0#14
                let item_offset%3#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%3#0: biguint = (extract3 array_head_and_tail%3#0 item_offset%3#0 1u) // on error: Index access is out of bounds
                let tmp%8#0: uint64 = (+ start#0 6u)
                let tmp%9#0: biguint = (itob tmp%8#0)
                let tmp%10#0: bool = (b== reinterpret_biguint%3#0 tmp%9#0)
                (assert tmp%10#0)
                let array_head_and_tail%4#0: bytes = arrays.1#15
                let item_offset%4#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%4#0: biguint = (extract3 array_head_and_tail%4#0 item_offset%4#0 1u) // on error: Index access is out of bounds
                let tmp%11#0: uint64 = (+ start#0 7u)
                let tmp%12#0: biguint = (itob tmp%11#0)
                let tmp%13#0: bool = (b== reinterpret_biguint%4#0 tmp%12#0)
                (assert tmp%13#0)
                let array_head_and_tail%5#0: bytes = arrays.2#16
                let item_offset%5#0: uint64 = (* 1u 1u)
                let reinterpret_biguint%5#0: biguint = (extract3 array_head_and_tail%5#0 item_offset%5#0 1u) // on error: Index access is out of bounds
                let tmp%14#0: uint64 = (+ start#0 8u)
                let tmp%15#0: biguint = (itob tmp%14#0)
                let tmp%16#0: bool = (b== reinterpret_biguint%5#0 tmp%15#0)
                (assert tmp%16#0)
                return arrays.0%out#7 arrays.1%out#6 arrays.2%out#5
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> bool:
            block@0: // L158
                return 1u