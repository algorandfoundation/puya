contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> uint64:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let array_data%0#0: bytes = 0x
                let array_data%0#1: bytes = (concat array_data%0#0 0x01)
                let array_data%0#2: bytes = (concat array_data%0#1 0x02)
                let array_data%0#3: bytes = (concat array_data%0#2 0x03)
                let array_data%0#4: bytes = (concat array_data%0#3 0x04)
                let my_array#0: bytes = array_data%0#4
                let tmp%1#0: any = (setbit 0x00 0u 1u)
                let current_tail_offset%2#0: uint64 = 6u
                let encoded_tuple_buffer%3#0: bytes = 0x
                let encoded_tuple_buffer%3#1: bytes = (concat encoded_tuple_buffer%3#0 tmp%1#0)
                let encoded_tuple_buffer%3#2: bytes = (concat encoded_tuple_buffer%3#1 0x32)
                let value_as_bytes%4#0: bytes = (itob current_tail_offset%2#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let encoded_tuple_buffer%3#3: bytes = (concat encoded_tuple_buffer%3#2 value_as_uint16%5#0)
                let data_length%6#0: uint64 = (len "\x00\x05Happy")
                let current_tail_offset%2#1: uint64 = (+ current_tail_offset%2#0 data_length%6#0)
                let value_as_bytes%7#0: bytes = (itob current_tail_offset%2#1)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let encoded_tuple_buffer%3#4: bytes = (concat encoded_tuple_buffer%3#3 value_as_uint16%8#0)
                let data_length%9#0: uint64 = (len "\x00\x04Days")
                let current_tail_offset%2#2: uint64 = (+ current_tail_offset%2#1 data_length%9#0)
                let encoded_tuple_buffer%3#5: bytes = (concat encoded_tuple_buffer%3#4 "\x00\x05Happy")
                let encoded_tuple_buffer%3#6: bytes = (concat encoded_tuple_buffer%3#5 "\x00\x04Days")
                let my_struct#0: bytes = encoded_tuple_buffer%3#6
                let copy%10#0: bytes = my_array#0
                let my_array_copy#0: bytes = copy%10#0
                let copy%11#0: bytes = my_struct#0
                let my_struct_copy#0: bytes = copy%11#0
                let assigned_value%12#0: bytes = 0x05
                let updated_target%13#0: bytes = (replace3 my_array#0 2u assigned_value%12#0)
                let my_array#1: bytes = updated_target%13#0
                let item_index%14#0: uint64 = (* 2u 1u)
                let tmp%15#0: bytes = (extract3 my_array_copy#0 item_index%14#0 1u)
                let tmp%16#0: uint64 = (b== tmp%15#0 0x03)
                (assert tmp%16#0) // my_array_copy should be unchanged
                let item_index%17#0: uint64 = (* 2u 1u)
                let tmp%18#0: bytes = (extract3 my_array#1 item_index%17#0 1u)
                let tmp%19#0: uint64 = (b== tmp%18#0 0x05)
                (assert tmp%19#0) // my_array should be mutated
                let (r_tmp%20#0: bytes, r_tmp%21#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, my_struct#0)
                let my_array#2: bytes = r_tmp%20#0
                let my_struct#1: bytes = r_tmp%21#0
                let item_index%22#0: uint64 = (* 1u 1u)
                let tmp%23#0: bytes = (extract3 my_array#2 item_index%22#0 1u)
                let tmp%24#0: uint64 = (b== tmp%23#0 0x05)
                (assert tmp%24#0) // my_array has been mutated by the subroutine
                let item_index%25#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_length%26#0: uint64 = (extract_uint16 my_struct#1 item_index%25#0)
                let item_length_plus_2%27#0: uint64 = (+ item_length%26#0 2u)
                let tmp%28#0: bytes = (extract3 my_struct#1 item_index%25#0 item_length_plus_2%27#0)
                let tmp%29#0: uint64 = (== tmp%28#0 "\x00\x07AARRGH!")
                (assert tmp%29#0) // my_struct has been mutated by the subroutine
                let copy%30#0: bytes = my_array_copy#0
                let copy%31#0: bytes = my_struct_copy#0
                let (r_tmp%32#0: bytes, r_tmp%33#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(copy%30#0, copy%31#0)
                let copy%30#1: bytes = r_tmp%32#0
                let copy%31#1: bytes = r_tmp%33#0
                let item_index%34#0: uint64 = (* 1u 1u)
                let tmp%35#0: bytes = (extract3 my_array_copy#0 item_index%34#0 1u)
                let tmp%36#0: uint64 = (b== tmp%35#0 0x02)
                (assert tmp%36#0) // my_array_copy should not be mutated by the subroutine
                let item_index%37#0: uint64 = (extract_uint16 my_struct_copy#0 2u)
                let item_length%38#0: uint64 = (extract_uint16 my_struct_copy#0 item_index%37#0)
                let item_length_plus_2%39#0: uint64 = (+ item_length%38#0 2u)
                let tmp%40#0: bytes = (extract3 my_struct_copy#0 item_index%37#0 item_length_plus_2%39#0)
                let tmp%41#0: uint64 = (== tmp%40#0 "\x00\x05Happy")
                (assert tmp%41#0) // my_struct_copy should not be mutated by the subroutine
                let copy%42#0: bytes = my_array_copy#0
                let my_array_copy_2#0: bytes = copy%42#0
                let (r_tmp%43#0: bytes, r_tmp%44#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#0)
                let my_array_copy_2#1: bytes = r_tmp%44#0
                let my_array_copy_2#2: bytes = (r_tmp%43#0)
                let item_index%45#0: uint64 = (* 0u 1u)
                let tmp%46#0: bytes = (extract3 my_array_copy_2#2 item_index%45#0 1u)
                let tmp%47#0: uint64 = (b== tmp%46#0 0x01)
                (assert tmp%47#0) // my_array_copy_2 should have original value
                let (r_tmp%48#0: bytes, r_tmp%49#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let my_array_copy_2#3: bytes = r_tmp%49#0
                let item_index%50#0: uint64 = (* 0u 1u)
                let tmp%51#0: bytes = (extract3 my_array_copy_2#3 item_index%50#0 1u)
                let tmp%52#0: uint64 = (b== tmp%51#0 0x0a)
                (assert tmp%52#0) // my_array_copy_2 should have mutated value
                let copy%53#0: bytes = my_array#2
                let current_tail_offset%54#0: uint64 = 4u
                let encoded_tuple_buffer%55#0: bytes = 0x
                let encoded_tuple_buffer%55#1: bytes = (concat encoded_tuple_buffer%55#0 copy%53#0)
                let nested#0: bytes = encoded_tuple_buffer%55#1
                let tmp%56#0: bytes = (extract3 nested#0 0u 4u)
                let copy%57#0: bytes = tmp%56#0
                let (r_tmp%58#0: bytes, r_tmp%59#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(copy%57#0)
                let copy%57#1: bytes = r_tmp%59#0
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <bytes, bytes>:
            block@0: // L90
                let assigned_value%0#0: bytes = 0x05
                let updated_target%1#0: bytes = (replace3 array#0 1u assigned_value%0#0)
                let array#1: bytes = updated_target%1#0
                let assigned_value%2#0: bytes = "\x00\x07AARRGH!"
                let item_offset%3#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%4#0: bytes = (extract3 struct#0 0u item_offset%3#0)
                let next_item_offset%5#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%6#0: uint64 = (len struct#0)
                let data_beyond_item%7#0: bytes = (substring3 struct#0 next_item_offset%5#0 total_data_length%6#0)
                let updated_data%8#0: bytes = (concat data_up_to_item%4#0 assigned_value%2#0)
                let updated_data%8#1: bytes = (concat updated_data%8#0 data_beyond_item%7#0)
                let new_value_length%9#0: uint64 = (len assigned_value%2#0)
                let tail_cursor%10#0: uint64 = (+ item_offset%3#0 new_value_length%9#0)
                let updated_header_bytes%11#0: bytes = (itob tail_cursor%10#0)
                let updated_header_bytes%11#1: bytes = ((substring 6 8) updated_header_bytes%11#0)
                let updated_data%8#2: bytes = ((replace2 4) updated_data%8#1 updated_header_bytes%11#1)
                let struct#1: bytes = updated_data%8#2
                return array#1 struct#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L95
                let copy%0#0: bytes = array#0
                let copy#0: bytes = copy%0#0
                let assigned_value%1#0: bytes = 0x0a
                let updated_target%2#0: bytes = (replace3 array#0 0u assigned_value%1#0)
                let array#1: bytes = updated_target%2#0
                return copy#0 array#1
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> uint64:
            block@0: // L118
                return 1u