main test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    block@0: // L7
        let length%0#0: uint64 = 12u
        let as_bytes%0#0: bytes[8] = (itob 12u)
        let length_uint16%0#0: bytes = 0x000c
        let some_bytes_as_string#0: bytes = 0x000c48656c6c6f20576f726c6421
        let some_bytes_as_bytes_again#0: bytes = 0x48656c6c6f20576f726c6421
        let tmp%0#0: bool = 1u
        let length%1#0: uint64 = 14u
        let is_out_of_bounds%0#0: bool = 0u
        let bounded_index%0#0: uint64 = 2u
        let tmp%1#0: bytes = 0x48656c6c6f20576f726c6421
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        let expr_value_trimmed%0#0: bytes = 0x48656c6c6f
        let expr_value_trimmed%1#0: bytes = 0x20
        let concatenated%0#0: bytes = 0x48656c6c6f20
        let len_%0#0: uint64 = 6u
        let as_bytes%1#0: bytes[8] = (itob 6u)
        let len_16_bit%0#0: bytes = 0x0006
        let concat_result%0#0: bytes = 0x000648656c6c6f20
        let expr_value_trimmed%2#0: bytes = 0x48656c6c6f20
        let expr_value_trimmed%3#0: bytes = 0x576f726c6421
        let concatenated%1#0: bytes = 0x48656c6c6f20576f726c6421
        let len_%1#0: uint64 = 12u
        let len_16_bit%1#0: bytes = 0x000c
        let concat_result%1#0: bytes = 0x000c48656c6c6f20576f726c6421
        let tmp%4#0: bool = 1u
        let expr_value_trimmed%4#0: bytes = 0x6869
        let expr_value_trimmed%5#0: bytes = 0x6869
        let concatenated%2#0: bytes = 0x68696869
        let len_%2#0: uint64 = 4u
        let as_bytes%3#0: bytes[8] = (itob 4u)
        let len_16_bit%2#0: bytes = 0x0004
        let thing#1: bytes = 0x000468696869
        let tmp%5#0: bool = 1u
        let expr_value_trimmed%6#0: bytes = 0x61
        let expr_value_trimmed%7#0: bytes = 0x62
        let concatenated%3#0: bytes = 0x6162
        let len_%3#0: uint64 = 2u
        let as_bytes%4#0: bytes[8] = (itob 2u)
        let len_16_bit%3#0: bytes = 0x0002
        let concat_result%3#0: bytes = 0x00026162
        let expr_value_trimmed%8#0: bytes = 0x6162
        let expr_value_trimmed%9#0: bytes = 0x6364
        let concatenated%4#0: bytes = 0x61626364
        let len_%4#0: uint64 = 4u
        let len_16_bit%4#0: bytes = 0x0004
        let value#0: bytes = 0x000461626364
        let expr_value_trimmed%10#0: bytes = 0x61626364
        let expr_value_trimmed%11#0: bytes = 0x65
        let concatenated%5#0: bytes = 0x6162636465
        let len_%5#0: uint64 = 5u
        let as_bytes%6#0: bytes[8] = (itob 5u)
        let len_16_bit%5#0: bytes = 0x0005
        let value#1: bytes = 0x00056162636465
        let expr_value_trimmed%12#0: bytes = 0x6162636465
        let expr_value_trimmed%13#0: bytes = 0x66
        let concatenated%6#0: bytes = 0x616263646566
        let len_%6#0: uint64 = 6u
        let len_16_bit%6#0: bytes = 0x0006
        let value#2: bytes = 0x0006616263646566
        let expr_value_trimmed%14#0: bytes = 0x616263646566
        let expr_value_trimmed%15#0: bytes = 0x67
        let concatenated%7#0: bytes = 0x61626364656667
        let len_%7#0: uint64 = 7u
        let as_bytes%8#0: bytes[8] = (itob 7u)
        let len_16_bit%7#0: bytes = 0x0007
        let value#3: bytes = 0x000761626364656667
        let tmp%6#0: bool = 1u
        let tmp%7#0: bytes = 0x
        let tmp%8#0: bool = 1u
        let tmp%9#0: bytes = 0x68656c6c6f
        let tmp%10#0: bool = 1u
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        goto tmp%11#0 ? block@1 : block@2
    block@1: // ternary_true_L41
        let ternary_result%0#0: bytes = 0x0003617965
        goto block@3
    block@2: // ternary_false_L41
        let ternary_result%0#1: bytes = 0x0003626565
        goto block@3
    block@3: // ternary_merge_L41
        let ternary_result%0#2: bytes = Ï†(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
        let tmp%13#0: bool = (== ternary_result%0#2 0x0003626565)
        (assert tmp%13#0)
        return 1u