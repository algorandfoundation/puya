main test_cases.arc4_types.string.Arc4StringTypesContract.approval_program:
    block@0: // L7
        let length%0#0: uint64 = 12u
        let as_bytes%0#0: bytes[8] = (itob 12u)
        let length_uint16%0#0: bytes = 0x000c
        let some_bytes_as_string#0: Encoded(len+utf8[]) = 0x000c48656c6c6f20576f726c6421
        let some_bytes_as_bytes_again#0: bytes = 0x48656c6c6f20576f726c6421
        let tmp%1#0: bool = 1u
        let length%1#0: uint64 = 14u
        let is_out_of_bounds%0#0: bool = 0u
        let bounded_index%0#0: uint64 = 2u
        let tmp%2#0: bytes = 0x48656c6c6f20576f726c6421
        let tmp%3#0: bool = 1u
        let tmp%4#0: bool = 1u
        let length%2#0: uint64 = 5u
        let as_bytes%1#0: bytes[8] = (itob 5u)
        let length_uint16%1#0: bytes = 0x0005
        let hello#0: Encoded(len+utf8[]) = 0x000548656c6c6f
        let length%3#0: uint64 = 1u
        let as_bytes%2#0: bytes[8] = (itob 1u)
        let length_uint16%2#0: bytes = 0x0001
        let space#0: Encoded(len+utf8[]) = 0x000120
        let length%4#0: uint64 = 6u
        let as_bytes%3#0: bytes[8] = (itob 6u)
        let length_uint16%3#0: bytes = 0x0006
        let world#0: Encoded(len+utf8[]) = 0x0006576f726c6421
        let length%5#0: uint64 = 12u
        let length_uint16%4#0: bytes = 0x000c
        let encoded_value%4#0: bytes = 0x000c48656c6c6f20576f726c6421
        let extract_to_end%0#0: bytes = 0x20
        let concat%0#0: Encoded(len+utf8[]) = 0x000548656c6c6f20
        let extract_to_end%1#0: bytes = 0x48656c6c6f20
        let len%0#0: uint64 = 6u
        let div_floor%0#0: uint64 = 6u
        let as_u16_bytes%0#0: bytes = 0x0006
        let replace%0#0: bytes = 0x000648656c6c6f20
        let extract_to_end%2#0: bytes = 0x576f726c6421
        let concat%1#0: Encoded(len+utf8[]) = 0x000648656c6c6f20576f726c6421
        let extract_to_end%3#0: bytes = 0x48656c6c6f20576f726c6421
        let len%1#0: uint64 = 12u
        let div_floor%1#0: uint64 = 12u
        let as_u16_bytes%1#0: bytes = 0x000c
        let replace%1#0: bytes = 0x000c48656c6c6f20576f726c6421
        let tmp%5#0: bool = 1u
        let length%6#0: uint64 = 2u
        let as_bytes%7#0: bytes[8] = (itob 2u)
        let length_uint16%5#0: bytes = 0x0002
        let thing#0: Encoded(len+utf8[]) = 0x00026869
        let extract_to_end%4#0: bytes = 0x6869
        let concat%2#0: Encoded(len+utf8[]) = 0x000268696869
        let extract_to_end%5#0: bytes = 0x68696869
        let len%2#0: uint64 = 4u
        let div_floor%2#0: uint64 = 4u
        let as_bytes%8#0: bytes[8] = (itob 4u)
        let as_u16_bytes%2#0: bytes = 0x0004
        let thing#1: Encoded(len+utf8[]) = 0x000468696869
        let length%7#0: uint64 = 4u
        let length_uint16%6#0: bytes = 0x0004
        let encoded_value%6#0: bytes = 0x000468696869
        let tmp%6#0: bool = 1u
        let length%8#0: uint64 = 1u
        let length_uint16%7#0: bytes = 0x0001
        let encoded_value%7#0: bytes = 0x000161
        let length%9#0: uint64 = 1u
        let length_uint16%8#0: bytes = 0x0001
        let encoded_value%8#0: bytes = 0x000162
        let extract_to_end%6#0: bytes = 0x62
        let concat%3#0: Encoded(len+utf8[]) = 0x00016162
        let extract_to_end%7#0: bytes = 0x6162
        let len%3#0: uint64 = 2u
        let div_floor%3#0: uint64 = 2u
        let as_u16_bytes%3#0: bytes = 0x0002
        let replace%3#0: bytes = 0x00026162
        let length%10#0: uint64 = 2u
        let length_uint16%9#0: bytes = 0x0002
        let encoded_value%9#0: bytes = 0x00026364
        let extract_to_end%8#0: bytes = 0x6364
        let concat%4#0: Encoded(len+utf8[]) = 0x000261626364
        let extract_to_end%9#0: bytes = 0x61626364
        let len%4#0: uint64 = 4u
        let div_floor%4#0: uint64 = 4u
        let as_u16_bytes%4#0: bytes = 0x0004
        let value#0: Encoded(len+utf8[]) = 0x000461626364
        let length%11#0: uint64 = 1u
        let length_uint16%10#0: bytes = 0x0001
        let encoded_value%10#0: bytes = 0x000165
        let extract_to_end%10#0: bytes = 0x65
        let concat%5#0: Encoded(len+utf8[]) = 0x00046162636465
        let extract_to_end%11#0: bytes = 0x6162636465
        let len%5#0: uint64 = 5u
        let div_floor%5#0: uint64 = 5u
        let as_u16_bytes%5#0: bytes = 0x0005
        let value#1: Encoded(len+utf8[]) = 0x00056162636465
        let length%12#0: uint64 = 1u
        let length_uint16%11#0: bytes = 0x0001
        let encoded_value%11#0: bytes = 0x000166
        let extract_to_end%12#0: bytes = 0x66
        let concat%6#0: Encoded(len+utf8[]) = 0x0005616263646566
        let extract_to_end%13#0: bytes = 0x616263646566
        let len%6#0: uint64 = 6u
        let div_floor%6#0: uint64 = 6u
        let as_u16_bytes%6#0: bytes = 0x0006
        let value#2: Encoded(len+utf8[]) = 0x0006616263646566
        let length%13#0: uint64 = 1u
        let length_uint16%12#0: bytes = 0x0001
        let encoded_value%12#0: bytes = 0x000167
        let extract_to_end%14#0: bytes = 0x67
        let concat%7#0: Encoded(len+utf8[]) = 0x000661626364656667
        let extract_to_end%15#0: bytes = 0x61626364656667
        let len%7#0: uint64 = 7u
        let div_floor%7#0: uint64 = 7u
        let as_bytes%20#0: bytes[8] = (itob 7u)
        let as_u16_bytes%7#0: bytes = 0x0007
        let value#3: Encoded(len+utf8[]) = 0x000761626364656667
        let length%14#0: uint64 = 7u
        let length_uint16%13#0: bytes = 0x0007
        let encoded_value%13#0: bytes = 0x000761626364656667
        let tmp%7#0: bool = 1u
        let length%15#0: uint64 = 0u
        let as_bytes%22#0: bytes[8] = (itob 0u)
        let length_uint16%14#0: bytes = 0x0000
        let encoded_value%14#0: bytes = 0x0000
        let tmp%8#0: bytes = 0x
        let tmp%9#0: bool = 1u
        let length%16#0: uint64 = 5u
        let length_uint16%15#0: bytes = 0x0005
        let encoded_value%15#0: bytes = 0x000568656c6c6f
        let tmp%10#0: bytes = 0x68656c6c6f
        let tmp%11#0: bool = 1u
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        goto tmp%12#0 ? block@1 : block@2
    block@1: // ternary_true_L41
        let length%17#0: uint64 = 3u
        let as_bytes%24#0: bytes[8] = (itob 3u)
        let length_uint16%16#0: bytes = 0x0003
        let encoded_value%16#0: bytes = 0x0003617965
        goto block@3
    block@2: // ternary_false_L41
        let length%18#0: uint64 = 3u
        let as_bytes%25#0: bytes[8] = (itob 3u)
        let length_uint16%17#0: bytes = 0x0003
        let encoded_value%17#0: bytes = 0x0003626565
        goto block@3
    block@3: // ternary_merge_L41
        let ternary_result%0#2: Encoded(len+utf8[]) = Ï†(encoded_value%16#0 <- block@1, encoded_value%17#0 <- block@2)
        let length%19#0: uint64 = 3u
        let as_bytes%26#0: bytes[8] = (itob 3u)
        let length_uint16%18#0: bytes = 0x0003
        let encoded_value%18#0: bytes = 0x0003626565
        let tmp%14#0: bool = (== ternary_result%0#2 0x0003626565)
        (assert tmp%14#0)
        return 1u