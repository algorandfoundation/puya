contract Arc4TuplesTypeContract
{
  approval_program(): bool
  {
    my_tuple: arc4.tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8> = arc4_encode((1arc4u8, 2arc4u8, arc4_encode('hello', arc4.string), arc4_encode('world', arc4.string), 255arc4u8), arc4.tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8>)
    assert(reinterpret_cast<bytes>(my_tuple) == reinterpret_cast<bytes>(reinterpret_cast<arc4.tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8>>(hex<"01020007000EFF000568656C6C6F0005776F726C64">)))
    boolean_packing: arc4.tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8> = arc4_encode((4arc4u8, arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(false, arc4.bool), arc4_encode(true, arc4.bool), arc4_encode(true, arc4.bool), 16arc4u8), arc4.tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8>)
    assert(reinterpret_cast<bytes>(boolean_packing) == hex<"04BD8010">)
    (a, b, c, d, e, f, g, h, i, j, k): tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8> = arc4_decode(boolean_packing, tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8>)
    assert(reinterpret_cast<biguint>(boolean_packing[10]) == reinterpret_cast<biguint>(k))
    assert(arc4_decode(a, uint64) == 4u, comment="a is 4")
    assert(reinterpret_cast<bytes>((reinterpret_cast<bytes>(b) == hex<"00">) ? (b) : ((reinterpret_cast<bytes>(d) == hex<"00">) ? (d) : ((reinterpret_cast<bytes>(e) == hex<"00">) ? (e) : ((reinterpret_cast<bytes>(f) == hex<"00">) ? (f) : ((reinterpret_cast<bytes>(g) == hex<"00">) ? (g) : ((reinterpret_cast<bytes>(i) == hex<"00">) ? (i) : (j))))))) != hex<"00">, comment="b,d,e,f,g,i,j are true")
    assert(reinterpret_cast<bytes>((reinterpret_cast<bytes>(c) != hex<"00">) ? (c) : (h)) == hex<"00">, comment="c and h are false")
    assert(arc4_decode(k, uint64) == 16u, comment="k is 16")
    assert(reinterpret_cast<bytes>(boolean_packing) == reinterpret_cast<bytes>(arc4_encode(arc4_decode(boolean_packing, tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8>), arc4.tuple<arc4.uint8,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.bool,arc4.uint8>)))
    (total, concat): tuple<uint64,arc4.string> = this::test_stuff(my_tuple)
    assert(arc4_decode(concat, string) == 'hello world')
    assert(total == 258u)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_stuff(test_tuple: arc4.tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8>): tuple<uint64,arc4.string>
  {
    (a, b, c, d, e): tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8> = arc4_decode(test_tuple, tuple<arc4.uint8,arc4.uint8,arc4.string,arc4.string,arc4.uint8>)
    assert(reinterpret_cast<biguint>(test_tuple[0]) == reinterpret_cast<biguint>(a))
    assert(reinterpret_cast<biguint>(test_tuple[-1]) == reinterpret_cast<biguint>(e))
    assert(reinterpret_cast<bytes>(test_tuple[-2]) == reinterpret_cast<bytes>(d))
    total: uint64 = arc4_decode(a, uint64) + arc4_decode(b, uint64) + arc4_decode(e, uint64)
    text: string = arc4_decode(c, string) + ' ' + arc4_decode(d, string)
    return (total, arc4_encode(text, arc4.string))
  }
}