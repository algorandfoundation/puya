contract Arc4TuplesTypeContract
{
  approval_program(): bool
  {
    my_tuple: puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_encode((1arc4u8, 2arc4u8, arc4_encode('hello', puyapy.arc4.String), arc4_encode('world', puyapy.arc4.String), 255arc4u8), puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]])
    assert(reinterpret_cast<puyapy.Bytes>(my_tuple) == reinterpret_cast<puyapy.Bytes>(reinterpret_cast<puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]]>(hex<"01020007000EFF000568656C6C6F0005776F726C64">)))
    boolean_packing: puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_encode((4arc4u8, arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), 16arc4u8), puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]])
    assert(reinterpret_cast<puyapy.Bytes>(boolean_packing) == hex<"04BD8010">)
    (a, b, c, d, e, f, g, h, i, j, k): tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_decode(boolean_packing, tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]])
    assert(reinterpret_cast<puyapy.BigUInt>(boolean_packing[10u]) == reinterpret_cast<puyapy.BigUInt>(k))
    assert(arc4_decode(a, puyapy.UInt64) == 4u, comment="a is 4")
    assert(reinterpret_cast<puyapy.Bytes>((reinterpret_cast<puyapy.Bytes>(b) == hex<"00">) ? (b) : ((reinterpret_cast<puyapy.Bytes>(d) == hex<"00">) ? (d) : ((reinterpret_cast<puyapy.Bytes>(e) == hex<"00">) ? (e) : ((reinterpret_cast<puyapy.Bytes>(f) == hex<"00">) ? (f) : ((reinterpret_cast<puyapy.Bytes>(g) == hex<"00">) ? (g) : ((reinterpret_cast<puyapy.Bytes>(i) == hex<"00">) ? (i) : (j))))))) != hex<"00">, comment="b,d,e,f,g,i,j are true")
    assert(reinterpret_cast<puyapy.Bytes>((reinterpret_cast<puyapy.Bytes>(c) != hex<"00">) ? (c) : (h)) == hex<"00">, comment="c and h are false")
    assert(arc4_decode(k, puyapy.UInt64) == 16u, comment="k is 16")
    assert(reinterpret_cast<puyapy.Bytes>(boolean_packing) == reinterpret_cast<puyapy.Bytes>(arc4_encode(arc4_decode(boolean_packing, tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]]), puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.Bool, puyapy.arc4.UIntN[typing.Literal[8]]])))
    (total, concat): tuple[puyapy.UInt64, puyapy.arc4.String] = this::test_stuff(my_tuple)
    assert(arc4_decode(concat, puyapy.Bytes) == 'hello world')
    assert(total == 258u)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_stuff(test_tuple: puyapy.arc4.Tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]]): tuple[puyapy.UInt64, puyapy.arc4.String]
  {
    (a, b, c, d, e): tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_decode(test_tuple, tuple[puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.UIntN[typing.Literal[8]], puyapy.arc4.String, puyapy.arc4.String, puyapy.arc4.UIntN[typing.Literal[8]]])
    total: puyapy.UInt64 = arc4_decode(a, puyapy.UInt64) + arc4_decode(b, puyapy.UInt64) + arc4_decode(e, puyapy.UInt64)
    text: puyapy.Bytes = arc4_decode(c, puyapy.Bytes) + ' ' + arc4_decode(d, puyapy.Bytes)
    return (total, arc4_encode(text, puyapy.arc4.String))
  }
}