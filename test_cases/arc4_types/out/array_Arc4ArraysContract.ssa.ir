contract test_cases.arc4_types.array.Arc4ArraysContract:
    program approval:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> uint64:
            block@0: // L21
                let array_data%0#0: bytes = 0x0002
                let array_data%0#1: bytes = (concat array_data%0#0 0x01)
                let array_data%0#2: bytes = (concat array_data%0#1 0x02)
                let dynamic_uint8_array#0: bytes = array_data%0#2
                let total#0: uint64 = 0u
                let array_length%1#0: uint64 = (extract_uint16 dynamic_uint8_array#0 0u)
                let array_value%2#0: bytes = ((extract 2 0) dynamic_uint8_array#0)
                let item_index_internal%3#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L24
                let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@0, item_index_internal%3#2 <- block@3)
                let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
                let continue_looping%4#0: uint64 = (< item_index_internal%3#1 array_length%1#0)
                goto continue_looping%4#0 ? block@2 : block@4
            block@2: // for_body_L24
                let item_index%5#0: uint64 = (* item_index_internal%3#1 1u)
                let uint8_item#0: bytes = (extract3 array_value%2#0 item_index%5#0 1u)
                let tmp%6#0: uint64 = (btoi uint8_item#0)
                let total#2: uint64 = (+ total#1 tmp%6#0)
                goto block@3
            block@3: // for_footer_L24
                let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
                goto block@1
            block@4: // after_for_L24
                let tmp%7#0: uint64 = (== total#1 3u)
                (assert tmp%7#0) // Total should be sum of dynamic_uint8_array items
                let array_data%8#0: bytes = 0x0001
                let array_data%8#1: bytes = (concat array_data%8#0 0x0001)
                let aliased_dynamic#0: bytes = array_data%8#1
                let array_length%9#0: uint64 = (extract_uint16 aliased_dynamic#0 0u)
                let array_value%10#0: bytes = ((extract 2 0) aliased_dynamic#0)
                let item_index_internal%11#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L29
                let item_index_internal%11#1: uint64 = φ(item_index_internal%11#0 <- block@4, item_index_internal%11#2 <- block@7)
                let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@7)
                let continue_looping%12#0: uint64 = (< item_index_internal%11#1 array_length%9#0)
                goto continue_looping%12#0 ? block@6 : block@8
            block@6: // for_body_L29
                let item_index%13#0: uint64 = (* item_index_internal%11#1 2u)
                let uint16_item#0: bytes = (extract3 array_value%10#0 item_index%13#0 2u)
                let tmp%14#0: uint64 = (btoi uint16_item#0)
                let total#4: uint64 = (+ total#3 tmp%14#0)
                goto block@7
            block@7: // for_footer_L29
                let item_index_internal%11#2: uint64 = (+ item_index_internal%11#1 1u)
                goto block@5
            block@8: // after_for_L29
                let tmp%15#0: uint64 = (== total#3 4u)
                (assert tmp%15#0) // Total should now include sum of aliased_dynamic items
                let array_data%16#0: bytes = 0x0002
                let next_offset%17#0: uint64 = 4u
                let value_as_bytes%18#0: bytes = (itob next_offset%17#0)
                let value_as_uint16%19#0: bytes = ((extract 6 2) value_as_bytes%18#0)
                let array_data%16#1: bytes = (concat array_data%16#0 value_as_uint16%19#0)
                let element_length%20#0: uint64 = (len "\x00\x05Hello")
                let next_offset%17#1: uint64 = (+ next_offset%17#0 element_length%20#0)
                let value_as_bytes%21#0: bytes = (itob next_offset%17#1)
                let value_as_uint16%22#0: bytes = ((extract 6 2) value_as_bytes%21#0)
                let array_data%16#2: bytes = (concat array_data%16#1 value_as_uint16%22#0)
                let element_length%23#0: uint64 = (len "\x00\x05World")
                let next_offset%17#2: uint64 = (+ next_offset%17#1 element_length%23#0)
                let array_data%16#3: bytes = (concat array_data%16#2 "\x00\x05Hello")
                let array_data%16#4: bytes = (concat array_data%16#3 "\x00\x05World")
                let dynamic_string_array#0: bytes = array_data%16#4
                let tmp%24#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let tmp%25#0: uint64 = (== tmp%24#0 2u)
                (assert tmp%25#0)
                let array_length%26#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let index_is_in_bounds%27#0: uint64 = (< 0u array_length%26#0)
                (assert index_is_in_bounds%27#0) // Index access is out of bounds
                let array_data_sans_header%28#0: bytes = ((extract 2 0) dynamic_string_array#0)
                let item_index_index%29#0: uint64 = (* 0u 2u)
                let item_index%30#0: uint64 = (extract_uint16 array_data_sans_header%28#0 item_index_index%29#0)
                let item_length%31#0: uint64 = (extract_uint16 array_data_sans_header%28#0 item_index%30#0)
                let item_length_plus_2%32#0: uint64 = (+ item_length%31#0 2u)
                let tmp%33#0: bytes = (extract3 array_data_sans_header%28#0 item_index%30#0 item_length_plus_2%32#0)
                let tmp%34#0: uint64 = (== tmp%33#0 "\x00\x05Hello")
                (assert tmp%34#0)
                let result#0: bytes = ""
                let array_length%35#0: uint64 = (extract_uint16 dynamic_string_array#0 0u)
                let array_value%36#0: bytes = ((extract 2 0) dynamic_string_array#0)
                let item_index_internal%37#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L36
                let item_index_internal%37#1: uint64 = φ(item_index_internal%37#0 <- block@8, item_index_internal%37#3 <- block@14)
                let result#2: bytes = φ(result#0 <- block@8, result#4 <- block@14)
                let continue_looping%38#0: uint64 = (< item_index_internal%37#1 array_length%35#0)
                goto continue_looping%38#0 ? block@10 : block@15
            block@10: // for_body_L36
                let item_index_index%39#0: uint64 = (* item_index_internal%37#1 2u)
                let item_index%40#0: uint64 = (extract_uint16 array_value%36#0 item_index_index%39#0)
                let item_length%41#0: uint64 = (extract_uint16 array_value%36#0 item_index%40#0)
                let item_length_plus_2%42#0: uint64 = (+ item_length%41#0 2u)
                let string_item#0: bytes = (extract3 array_value%36#0 item_index%40#0 item_length_plus_2%42#0)
                let index#0: uint64 = item_index_internal%37#1
                let tmp%43#0: uint64 = (== index#0 0u)
                goto tmp%43#0 ? block@11 : block@12
            block@11: // if_body_L37
                let result#1: bytes = ((extract 2 0) string_item#0)
                goto block@13
            block@12: // else_body_L37
                let tmp%44#0: bytes = ((extract 2 0) string_item#0)
                let tmp%45#0: bytes = (concat " " tmp%44#0)
                let result#3: bytes = (concat result#2 tmp%45#0)
                goto block@13
            block@13: // after_if_else_L37
                let result#4: bytes = φ(result#1 <- block@11, result#3 <- block@12)
                goto block@14
            block@14: // for_footer_L36
                let item_index_internal%37#3: uint64 = (+ item_index_internal%37#1 1u)
                goto block@9
            block@15: // after_for_L36
                let tmp%46#0: uint64 = (== result#2 "Hello World")
                (assert tmp%46#0)
                let array_data%47#0: bytes = 0x
                let array_data%47#1: bytes = (concat array_data%47#0 0x00000001)
                let array_data%47#2: bytes = (concat array_data%47#1 0x0000000a)
                let array_data%47#3: bytes = (concat array_data%47#2 0x000000ff)
                let array_data%47#4: bytes = (concat array_data%47#3 0x00000080)
                let static_uint32_array#0: bytes = array_data%47#4
                let item_index_internal%48#0: uint64 = 0u
                goto block@16
            block@16: // for_header_L46
                let item_index_internal%48#1: uint64 = φ(item_index_internal%48#0 <- block@15, item_index_internal%48#2 <- block@18)
                let total#5: uint64 = φ(total#3 <- block@15, total#6 <- block@18)
                let continue_looping%49#0: uint64 = (< item_index_internal%48#1 4u)
                goto continue_looping%49#0 ? block@17 : block@19
            block@17: // for_body_L46
                let item_index%50#0: uint64 = (* item_index_internal%48#1 4u)
                let uint32_item#0: bytes = (extract3 static_uint32_array#0 item_index%50#0 4u)
                let tmp%51#0: uint64 = (btoi uint32_item#0)
                let total#6: uint64 = (+ total#5 tmp%51#0)
                goto block@18
            block@18: // for_footer_L46
                let item_index_internal%48#2: uint64 = (+ item_index_internal%48#1 1u)
                goto block@16
            block@19: // after_for_L46
                let tmp%52#0: uint64 = (== total#5 398u)
                (assert tmp%52#0)
                let array_data%53#0: bytes = 0x
                let array_data%53#1: bytes = (concat array_data%53#0 0x65)
                let aliased_static#0: bytes = array_data%53#1
                let index#1: uint64 = 0u
                let item_index%54#0: uint64 = (* 0u 1u)
                let tmp%55#0: bytes = (extract3 aliased_static#0 item_index%54#0 1u)
                let tmp%56#0: uint64 = (btoi tmp%55#0)
                let array_length%57#0: uint64 = 1u
                let index_is_in_bounds%58#0: uint64 = (< index#1 array_length%57#0)
                (assert index_is_in_bounds%58#0) // Index access is out of bounds
                let item_index%59#0: uint64 = (* index#1 1u)
                let tmp%60#0: bytes = (extract3 aliased_static#0 item_index%59#0 1u)
                let tmp%61#0: uint64 = (btoi tmp%60#0)
                let tmp%62#0: uint64 = (+ tmp%56#0 tmp%61#0)
                let tmp%63#0: uint64 = (== tmp%62#0 202u)
                (assert tmp%63#0)
                let array_data%64#0: bytes = 0x
                let next_offset%65#0: uint64 = 4u
                let value_as_bytes%66#0: bytes = (itob next_offset%65#0)
                let value_as_uint16%67#0: bytes = ((extract 6 2) value_as_bytes%66#0)
                let array_data%64#1: bytes = (concat array_data%64#0 value_as_uint16%67#0)
                let element_length%68#0: uint64 = (len "\x00\x04Ping")
                let next_offset%65#1: uint64 = (+ next_offset%65#0 element_length%68#0)
                let value_as_bytes%69#0: bytes = (itob next_offset%65#1)
                let value_as_uint16%70#0: bytes = ((extract 6 2) value_as_bytes%69#0)
                let array_data%64#2: bytes = (concat array_data%64#1 value_as_uint16%70#0)
                let element_length%71#0: uint64 = (len "\x00\x04Pong")
                let next_offset%65#2: uint64 = (+ next_offset%65#1 element_length%71#0)
                let array_data%64#3: bytes = (concat array_data%64#2 "\x00\x04Ping")
                let array_data%64#4: bytes = (concat array_data%64#3 "\x00\x04Pong")
                let static_string_array#0: bytes = array_data%64#4
                let result#5: bytes = ""
                let item_index_internal%72#0: uint64 = 0u
                goto block@20
            block@20: // for_header_L60
                let item_index_internal%72#1: uint64 = φ(item_index_internal%72#0 <- block@19, item_index_internal%72#3 <- block@25)
                let result#7: bytes = φ(result#5 <- block@19, result#9 <- block@25)
                let continue_looping%73#0: uint64 = (< item_index_internal%72#1 2u)
                goto continue_looping%73#0 ? block@21 : block@26
            block@21: // for_body_L60
                let item_index_index%74#0: uint64 = (* item_index_internal%72#1 2u)
                let item_index%75#0: uint64 = (extract_uint16 static_string_array#0 item_index_index%74#0)
                let item_length%76#0: uint64 = (extract_uint16 static_string_array#0 item_index%75#0)
                let item_length_plus_2%77#0: uint64 = (+ item_length%76#0 2u)
                let string_item#1: bytes = (extract3 static_string_array#0 item_index%75#0 item_length_plus_2%77#0)
                let index#2: uint64 = item_index_internal%72#1
                let tmp%78#0: uint64 = (== index#2 0u)
                goto tmp%78#0 ? block@22 : block@23
            block@22: // if_body_L61
                let result#6: bytes = ((extract 2 0) string_item#1)
                goto block@24
            block@23: // else_body_L61
                let tmp%79#0: bytes = ((extract 2 0) string_item#1)
                let tmp%80#0: bytes = (concat " " tmp%79#0)
                let result#8: bytes = (concat result#7 tmp%80#0)
                goto block@24
            block@24: // after_if_else_L61
                let result#9: bytes = φ(result#6 <- block@22, result#8 <- block@23)
                goto block@25
            block@25: // for_footer_L60
                let item_index_internal%72#3: uint64 = (+ item_index_internal%72#1 1u)
                goto block@20
            block@26: // after_for_L60
                let tmp%81#0: uint64 = (== result#7 "Ping Pong")
                (assert tmp%81#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.array.Arc4ArraysContract.clear_state_program() -> uint64:
            block@0: // L70
                return 1u