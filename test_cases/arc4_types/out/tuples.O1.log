PC  Teal                                              Stack
1   <intcblock>
6   int 7                                             7
8   itob                                              0x0000000000000007
9   extract 6 2                                       0x0007
12  byte 0x0102                                       0x0007, 0x0102
16  swap                                              0x0102, 0x0007
17  concat                                            0x01020007
18  int 14                                            0x01020007, 14
20  itob                                              0x01020007, 0x000000000000000E
21  extract 6 2                                       0x01020007, 0x000E
24  concat                                            0x01020007000E
25  byte 0xff                                         0x01020007000E, 0xFF
28  concat                                            0x01020007000EFF
29  byte "\x00\x05hello"                              0x01020007000EFF, 0x000568656C6C6F
38  concat                                            0x01020007000EFF000568656C6C6F
39  byte "\x00\x05world"                              0x01020007000EFF000568656C6C6F, 0x0005776F726C64
48  concat                                            0x01020007000EFF000568656C6C6F0005776F726C64
49  dup                                               0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64
50  byte 0x01020007000eff000568656c6c6f0005776f726c64 0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64
73  ==                                                0x01020007000EFF000568656C6C6F0005776F726C64, 1
74  assert                                            0x01020007000EFF000568656C6C6F0005776F726C64
75  byte 0x04                                         0x01020007000EFF000568656C6C6F0005776F726C64, 0x04
78  btoi                                              0x01020007000EFF000568656C6C6F0005776F726C64, 4
79  int 4                                             0x01020007000EFF000568656C6C6F0005776F726C64, 4, 4
80  ==                                                0x01020007000EFF000568656C6C6F0005776F726C64, 1
81  assert                                            0x01020007000EFF000568656C6C6F0005776F726C64
82  byte 0x10                                         0x01020007000EFF000568656C6C6F0005776F726C64, 0x10
85  btoi                                              0x01020007000EFF000568656C6C6F0005776F726C64, 16
86  int 16                                            0x01020007000EFF000568656C6C6F0005776F726C64, 16, 16
88  ==                                                0x01020007000EFF000568656C6C6F0005776F726C64, 1
89  assert                                            0x01020007000EFF000568656C6C6F0005776F726C64
90  callsub test_stuff                                0x01020007000EFF000568656C6C6F0005776F726C64
118 proto 1 2                                         0x01020007000EFF000568656C6C6F0005776F726C64
121 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64
123 int 0                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64, 0
125 int 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64, 0, 1
126 extract3                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x01
127 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x01020007000EFF000568656C6C6F0005776F726C64
129 int 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x01020007000EFF000568656C6C6F0005776F726C64, 1
130 int 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x01020007000EFF000568656C6C6F0005776F726C64, 1, 1
131 extract3                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02
132 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x01020007000EFF000568656C6C6F0005776F726C64
134 int 2                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x01020007000EFF000568656C6C6F0005776F726C64, 2
135 extract_uint16                                    0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7
136 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 0x01020007000EFF000568656C6C6F0005776F726C64
138 dig 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 0x01020007000EFF000568656C6C6F0005776F726C64, 7
140 extract_uint16                                    0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 5
141 int 2                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 5, 2
142 +                                                 0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 7
143 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 7, 7, 0x01020007000EFF000568656C6C6F0005776F726C64
145 cover 2                                           0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x01020007000EFF000568656C6C6F0005776F726C64, 7, 7
147 extract3                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F
148 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x01020007000EFF000568656C6C6F0005776F726C64
150 int 4                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x01020007000EFF000568656C6C6F0005776F726C64, 4
151 extract_uint16                                    0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14
152 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 0x01020007000EFF000568656C6C6F0005776F726C64
154 dig 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 0x01020007000EFF000568656C6C6F0005776F726C64, 14
156 extract_uint16                                    0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 5
157 int 2                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 5, 2
158 +                                                 0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 7
159 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 14, 7, 0x01020007000EFF000568656C6C6F0005776F726C64
161 cover 2                                           0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x01020007000EFF000568656C6C6F0005776F726C64, 14, 7
163 extract3                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x0005776F726C64
164 frame_dig -1                                      0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64
166 int 6                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64, 6
168 int 1                                             0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0x01020007000EFF000568656C6C6F0005776F726C64, 6, 1
169 extract3                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x01, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0xFF
170 uncover 4                                         0x01020007000EFF000568656C6C6F0005776F726C64, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0xFF, 0x01
172 btoi                                              0x01020007000EFF000568656C6C6F0005776F726C64, 0x02, 0x000568656C6C6F, 0x0005776F726C64, 0xFF, 1
173 uncover 4                                         0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 0xFF, 1, 0x02
175 btoi                                              0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 0xFF, 1, 2
176 +                                                 0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 0xFF, 3
177 swap                                              0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 3, 0xFF
178 btoi                                              0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 3, 255
179 +                                                 0x01020007000EFF000568656C6C6F0005776F726C64, 0x000568656C6C6F, 0x0005776F726C64, 258
180 uncover 2                                         0x01020007000EFF000568656C6C6F0005776F726C64, 0x0005776F726C64, 258, 0x000568656C6C6F
182 extract 2 0                                       0x01020007000EFF000568656C6C6F0005776F726C64, 0x0005776F726C64, 258, "hello"
185 byte " "                                          0x01020007000EFF000568656C6C6F0005776F726C64, 0x0005776F726C64, 258, "hello", " "
188 concat                                            0x01020007000EFF000568656C6C6F0005776F726C64, 0x0005776F726C64, 258, "hello "
189 uncover 2                                         0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello ", 0x0005776F726C64
191 extract 2 0                                       0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello ", "world"
194 concat                                            0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello world"
195 dup                                               0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello world", "hello world"
196 len                                               0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello world", 11
197 itob                                              0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello world", 0x000000000000000B
198 extract 6 2                                       0x01020007000EFF000568656C6C6F0005776F726C64, 258, "hello world", 0x000B
201 swap                                              0x01020007000EFF000568656C6C6F0005776F726C64, 258, 0x000B, "hello world"
202 concat                                            0x01020007000EFF000568656C6C6F0005776F726C64, 258, 0x000B68656C6C6F20776F726C64
203 retsub                                            258, 0x000B68656C6C6F20776F726C64
93  extract 2 0                                       258, "hello world"
96  byte "hello world"                                258, "hello world", "hello world"
109 ==                                                258, 1
110 assert                                            258
111 int 258                                           258, 258
114 ==                                                1
115 assert
116 int 1                                             1
117 return                                            1