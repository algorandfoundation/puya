main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L35
        let tmp%2#3: bytes = test_cases.arc4_types.structs.add_decimal(0x000000083cfbf217, 0x000000083cfbf217)
        let tmp%5#3: bytes = test_cases.arc4_types.structs.add_decimal(0x000000230384b842, 0x000000230384b842)
        let coord_3#0: bytes = (concat tmp%2#3 tmp%5#3)
        let val#0: bytes = ((extract 0 8) coord_3#0) // on error: Index access is out of bounds
        let val#2: bytes = ((extract 8 8) coord_3#0) // on error: Index access is out of bounds
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L40
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: bytes = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto loop_counter%0#1 ? block@4 : block@3
    block@3: // for_header_1_L39
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // after_for_L39
        (log 0xa0)
        return 1u

subroutine test_cases.arc4_types.structs.add_decimal(x: bytes, y: bytes) -> bytes:
    block@0: // L90
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let tmp%3#0: bytes = (itob tmp%2#0)
        return tmp%3#0