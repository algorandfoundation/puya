main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L35
        let encoded%0#0: Encoded((uint64)) = 0x000000083cfbf217
        let encoded%1#0: Encoded((uint64,uint64)) = 0x000000083cfbf217000000230384b842
        let coord_1#0: Encoded((uint64,uint64)) = 0x000000083cfbf217000000230384b842
        let encoded%3#0: Encoded((uint64)) = 0x000000083cfbf217
        let encoded%4#0: Encoded((uint64,uint64)) = 0x000000083cfbf217000000230384b842
        let coord_2#0: Encoded((uint64,uint64)) = 0x000000083cfbf217000000230384b842
        let extract%0#2: bytes = 0x000000083cfbf217
        let extract%1#2: bytes = 0x000000083cfbf217
        let tmp%0#3: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(0x000000083cfbf217, 0x000000083cfbf217)
        let extract%2#2: bytes = 0x000000230384b842
        let extract%3#1: bytes = 0x000000230384b842
        let tmp%1#3: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(0x000000230384b842, 0x000000230384b842)
        let encoded%0#1: Encoded((uint64)) = tmp%0#3
        let encoded%1#1: Encoded((uint64,uint64)) = (concat tmp%0#3 tmp%1#3)
        let coord_3#0: Encoded((uint64,uint64)) = encoded%1#1
        let val#0: Encoded(uint64) = ((extract 0 8) encoded%1#1)
        let val#2: Encoded(uint64) = ((extract 8 8) encoded%1#1)
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L40
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto loop_counter%0#1 ? block@4 : block@3
    block@3: // for_header_1_L39
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // after_for_L39
        let encoded_bool%0#0: bytes[1] = 0x80
        let encoded_bool%1#0: bytes[1] = 0x00
        let encoded_bool%2#0: bytes[1] = 0x80
        let encoded_bool%3#0: bytes[1] = 0x00
        let encoded%6#0: Encoded((bool1)) = 0x80
        let get_bit%0#0: uint64 = 0u
        let set_bit%0#0: Encoded((bool1)) = 0x80
        let get_bit%1#0: uint64 = 1u
        let set_bit%1#0: Encoded((bool1)) = 0xa0
        let get_bit%2#0: uint64 = 0u
        let set_bit%2#0: Encoded((bool1)) = 0xa0
        let flags#0: Encoded((bool1,bool1,bool1,bool1)) = 0xa0
        let get_bit%0#1: uint64 = 1u
        let tmp%0#1: Encoded(bool8) = encode<bool8>(1u)
        let tmp%1#1: bool = (getbit tmp%0#1 0u)
        (assert tmp%1#1)
        let get_bit%1#1: uint64 = 0u
        let tmp%2#1: Encoded(bool8) = encode<bool8>(0u)
        let tmp%3#1: bool = (getbit tmp%2#1 0u)
        let tmp%4#1: bool = (! tmp%3#1)
        (assert tmp%4#1)
        let get_bit%2#1: uint64 = 1u
        let tmp%5#1: Encoded(bool8) = encode<bool8>(1u)
        let tmp%6#0: bool = (getbit tmp%5#1 0u)
        (assert tmp%6#0)
        let get_bit%3#0: uint64 = 0u
        let tmp%7#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%8#0: bool = (getbit tmp%7#0 0u)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0)
        (log 0xa0)
        let tmp%0#0: bool = 1u
        let encoded%8#0: Encoded(((uint64,uint64))) = 0x000000083cfbf217000000230384b842
        let encoded%9#0: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))) = 0x000000083cfbf217000000230384b842a0
        let vector_flags#0: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))) = 0x000000083cfbf217000000230384b842a0
        let extract%0#1: bytes = 0x000000083cfbf217000000230384b842
        let extract%1#1: bytes = 0x000000083cfbf217
        let tmp%0#2: bytes = (itob 35382882839u)
        let tmp%1#2: bool = 1u
        let extract%2#1: bytes = 0xa0
        let get_bit%0#2: uint64 = 1u
        let tmp%2#2: Encoded(bool8) = encode<bool8>(1u)
        let tmp%3#2: bool = (getbit tmp%2#2 0u)
        (assert tmp%3#2)
        let length%0#0: uint64 = 0u
        let as_bytes%0#0: bytes[8] = (itob 0u)
        let length_uint16%0#0: bytes = 0x0000
        let encoded_value%0#0: bytes = 0x0000
        let tail%0#0: bytes = 0x0000
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let offset_as_uint16%0#0: bytes = 0x0002
        let encoded%11#0: Encoded((len+uint8[])) = 0x0002
        let mutable#0: Encoded((len+uint8[])) = 0x00020000
        let extract_uint16%0#0: uint64 = 2u
        let len%0#0: uint64 = 4u
        let substring3%0#0: bytes = 0x0000
        let encoded%13#0: Encoded((uint8)) = 0x2a
        let encoded%14#0: Encoded(uint8[]) = 0x2a
        let concat%0#0: bytes = 0x00002a
        let extract_to_end%0#0: bytes = 0x2a
        let len%1#0: uint64 = 1u
        let div_floor%0#0: uint64 = 1u
        let as_bytes%2#0: bytes[8] = (itob 1u)
        let as_u16_bytes%0#0: bytes = 0x0001
        let replace%0#0: bytes = 0x00012a
        let item_offset%0#0: uint64 = 2u
        let data_up_to_item%0#0: bytes = 0x0002
        let copy#1: Encoded((len+uint8[])) = 0x000200012a
        let tmp%1#0: bool = 1u
        let encoded%15#0: Encoded((uint64)) = 0x000000000000000c
        let encoded%16#0: Encoded((uint64,uint64)) = 0x000000000000000c0000000000000022
        let immutable#0: Encoded((uint64,uint64)) = 0x000000000000000c0000000000000022
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        let extract%2#0: bytes = 0x000000000000000c
        let encoded%18#0: Encoded((uint64)) = 0x000000000000000c
        let encoded%19#0: Encoded((uint64,uint64)) = 0x000000000000000c000000000000007b
        let immutable2#0: Encoded((uint64,uint64)) = 0x000000000000000c000000000000007b
        let extract%3#0: bytes = 0x000000000000007b
        let tmp%4#0: bool = 1u
        let extract%4#0: bytes = 0x000000000000000c
        let extract%5#0: bytes = 0x000000000000000c
        let tmp%5#0: bool = 1u
        return 1u

subroutine test_cases.arc4_types.structs.add_decimal(x: Encoded(uint64), y: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L92
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#0)
        return reinterpret_Encoded(uint64)%0#0