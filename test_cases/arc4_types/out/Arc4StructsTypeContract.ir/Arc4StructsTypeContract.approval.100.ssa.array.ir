main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L39
        let aggregate%encoded%0#1: bytes = (concat 0x 0x000000083cfbf217)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 0x000000230384b842)
        let aggregate%encoded%2#1: Encoded(uint64,uint64) = (concat aggregate%encoded%1#1 0x)
        let coord_1#0: Encoded(uint64,uint64) = aggregate%encoded%2#1
        let aggregate%extract%0#1: bytes = (extract3 coord_1#0 0u 8u)
        let x#0: Encoded(uint64) = aggregate%extract%0#1
        let tmp%0#4: uint64 = (btoi x#0)
        let tmp%2#3: uint64 = (+ tmp%0#4 tmp%0#4)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#3)
        let aggregate%extract%1#1: bytes = (extract3 coord_1#0 8u 8u)
        let x#1: Encoded(uint64) = aggregate%extract%1#1
        let tmp%0#5: uint64 = (btoi x#1)
        let tmp%2#4: uint64 = (+ tmp%0#5 tmp%0#5)
        let reinterpret_Encoded(uint64)%0#1: Encoded(uint64) = (itob tmp%2#4)
        let aggregate%encoded%3#1: bytes = (concat 0x reinterpret_Encoded(uint64)%0#0)
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 reinterpret_Encoded(uint64)%0#1)
        let aggregate%encoded%5#1: Encoded(uint64,uint64) = (concat aggregate%encoded%4#1 0x)
        let coord_3#0: Encoded(uint64,uint64) = aggregate%encoded%5#1
        let aggregate%extract%2#1: bytes = (extract3 coord_3#0 0u 8u)
        let val#0: Encoded(uint64) = aggregate%extract%2#1
        let aggregate%extract%3#1: bytes = (extract3 coord_3#0 8u 8u)
        let val#2: Encoded(uint64) = aggregate%extract%3#1
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L44
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto loop_counter%0#1 ? block@4 : block@3
    block@3: // for_header_1_L43
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // after_for_L43
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let aggregate%encoded%6#1: bytes = (concat 0x tmp%2#0)
        let aggregate%get_bit%0#1: uint64 = (getbit tmp%3#0 0u)
        let aggregate%set_bit%0#1: bytes = (setbit aggregate%encoded%6#1 1u aggregate%get_bit%0#1)
        let aggregate%get_bit%1#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%1#1: bytes = (setbit aggregate%set_bit%0#1 2u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%3#0 0u)
        let aggregate%set_bit%2#1: bytes = (setbit aggregate%set_bit%1#1 3u aggregate%get_bit%2#1)
        let aggregate%encoded%7#1: Encoded(bool1,bool1,bool1,bool1) = (concat aggregate%set_bit%2#1 0x)
        let flags#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%encoded%7#1
        let aggregate%get_bit%3#1: uint64 = (getbit flags#0 0u)
        let tuple_item%0#1: bool = aggregate%get_bit%3#1
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u tuple_item%0#1)
        let values%0#0: Encoded(bool8) = aggregate%encoded_bool%2#1
        let aggregate%get_bit%4#1: bool = (getbit values%0#0 0u)
        let tmp%0#1: bool = aggregate%get_bit%4#1
        (assert tmp%0#1)
        let aggregate%get_bit%5#1: uint64 = (getbit flags#0 1u)
        let tuple_item%1#1: bool = aggregate%get_bit%5#1
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u tuple_item%1#1)
        let values%1#0: Encoded(bool8) = aggregate%encoded_bool%3#1
        let aggregate%get_bit%6#1: bool = (getbit values%1#0 0u)
        let tmp%1#1: bool = aggregate%get_bit%6#1
        let tmp%2#1: bool = (! tmp%1#1)
        (assert tmp%2#1)
        let aggregate%get_bit%7#1: uint64 = (getbit flags#0 2u)
        let tuple_item%2#1: bool = aggregate%get_bit%7#1
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u tuple_item%2#1)
        let values%2#0: Encoded(bool8) = aggregate%encoded_bool%4#1
        let aggregate%get_bit%8#1: bool = (getbit values%2#0 0u)
        let tmp%3#1: bool = aggregate%get_bit%8#1
        (assert tmp%3#1)
        let aggregate%get_bit%9#1: uint64 = (getbit flags#0 3u)
        let tuple_item%3#1: bool = aggregate%get_bit%9#1
        let aggregate%encoded_bool%5#1: bytes[1] = (setbit 0x00 0u tuple_item%3#1)
        let values%3#0: Encoded(bool8) = aggregate%encoded_bool%5#1
        let aggregate%get_bit%10#1: bool = (getbit values%3#0 0u)
        let tmp%4#1: bool = aggregate%get_bit%10#1
        let tmp%5#1: bool = (! tmp%4#1)
        (assert tmp%5#1)
        (log flags#0)
        let aggregate%encoded%8#1: bytes = (concat 0x coord_1#0)
        let aggregate%encoded%9#1: bytes = (concat aggregate%encoded%8#1 flags#0)
        let aggregate%encoded%10#1: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = (concat aggregate%encoded%9#1 0x)
        let vector_flags#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = aggregate%encoded%10#1
        let aggregate%extract%4#1: bytes = (extract3 vector_flags#0 0u 16u)
        let aggregate%extract%5#1: bytes = (extract3 aggregate%extract%4#1 0u 8u)
        let tuple_item%1#2: Encoded(uint64) = aggregate%extract%5#1
        let tmp%0#2: bytes = (itob 35382882839u)
        let tmp%1#2: bool = (== tuple_item%1#2 tmp%0#2)
        (assert tmp%1#2)
        let aggregate%extract%6#1: bytes = (extract3 vector_flags#0 16u 1u)
        let aggregate%get_bit%11#1: uint64 = (getbit aggregate%extract%6#1 2u)
        let tuple_item%3#2: bool = aggregate%get_bit%11#1
        let aggregate%encoded_bool%6#1: bytes[1] = (setbit 0x00 0u tuple_item%3#2)
        let values%0#1: Encoded(bool8) = aggregate%encoded_bool%6#1
        let aggregate%get_bit%12#1: bool = (getbit values%0#1 0u)
        let tmp%2#2: bool = aggregate%get_bit%12#1
        (assert tmp%2#2)
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%tail%0#1: bytes = (concat 0x tmp%9#0)
        let aggregate%data_length%0#1: uint64 = (len tmp%9#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 2u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%11#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%12#1: Encoded((len+uint8[])) = (concat aggregate%encoded%11#1 aggregate%tail%0#1)
        let mutable#0: Encoded((len+uint8[])) = aggregate%encoded%12#1
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 mutable#0 0u)
        let aggregate%len%0#1: uint64 = (len mutable#0)
        let aggregate%substring3%0#1: bytes = (substring3 mutable#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#1
        let aggregate%encoded%13#1: bytes = (concat 0x 0x2a)
        let aggregate%encoded%14#1: Encoded(uint8[]) = (concat aggregate%encoded%13#1 0x)
        let tmp%11#0: Encoded(uint8[]) = aggregate%encoded%14#1
        let concat%0#0: Encoded(len+uint8[]) = (concat tuple_item%2#0 tmp%11#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%2#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 mutable#0 0u)
        let aggregate%len%1#1: uint64 = (len mutable#0)
        let aggregate%substring3%1#1: bytes = (substring3 mutable#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 mutable#0 0u)
        let aggregate%data_up_to_item%0#1: bytes = (extract3 mutable#0 0u aggregate%item_offset%0#1)
        let aggregate%updated_data%0#1: bytes = (concat aggregate%data_up_to_item%0#1 replace%0#0)
        let copy#1: Encoded((len+uint8[])) = aggregate%updated_data%0#1
        let tmp%12#0: bool = (!= mutable#0 copy#1)
        (assert tmp%12#0) // expected copy is different
        let aggregate%encoded%15#1: bytes = (concat 0x 0x000000000000000c)
        let aggregate%encoded%16#1: bytes = (concat aggregate%encoded%15#1 0x0000000000000022)
        let aggregate%encoded%17#1: Encoded(uint64,uint64) = (concat aggregate%encoded%16#1 0x)
        let immutable#0: Encoded(uint64,uint64) = aggregate%encoded%17#1
        let aggregate%extract%7#1: bytes = (extract3 immutable#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%7#1
        let aggregate%encoded%18#1: bytes = (concat 0x tuple_item%3#0)
        let aggregate%encoded%19#1: bytes = (concat aggregate%encoded%18#1 0x000000000000007b)
        let aggregate%encoded%20#1: Encoded(uint64,uint64) = (concat aggregate%encoded%19#1 0x)
        let immutable2#0: Encoded(uint64,uint64) = aggregate%encoded%20#1
        let aggregate%extract%8#1: bytes = (extract3 immutable2#0 8u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%8#1
        let tmp%17#0: bool = (b== tuple_item%4#0 0x000000000000007b)
        (assert tmp%17#0)
        let aggregate%extract%9#1: bytes = (extract3 immutable2#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%9#1
        let tmp%18#0: bool = (b== tuple_item%5#0 tuple_item%3#0)
        (assert tmp%18#0)
        let aggregate%encoded%21#1: Encoded() = (concat 0x 0x)
        let tmp%19#0: Encoded() = aggregate%encoded%21#1
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1