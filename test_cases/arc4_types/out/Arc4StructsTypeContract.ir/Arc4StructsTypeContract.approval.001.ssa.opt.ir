main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L39
        let coord_1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000083cfbf217, 0x000000230384b842)
        let tuple_item%0#3: Encoded(uint64) = extract_value(coord_1#0, 0)
        let tmp%0#3: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%0#3, tuple_item%0#3)
        let tuple_item%2#3: Encoded(uint64) = extract_value(coord_1#0, 1)
        let tmp%1#3: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%2#3, tuple_item%2#3)
        let coord_3#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%0#3, tmp%1#3)
        let val#0: Encoded(uint64) = extract_value(coord_3#0, 0)
        let val#2: Encoded(uint64) = extract_value(coord_3#0, 1)
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L44
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto loop_counter%0#1 ? block@4 : block@3
    block@3: // for_header_1_L43
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // after_for_L43
        let tmp%2#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let flags#0: Encoded(bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1)>(tmp%2#0, tmp%3#0, tmp%2#0, tmp%3#0)
        let tuple_item%0#1: bool = extract_value(flags#0, 0)
        let values%0#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%0#1)
        let tmp%0#1: bool = decode_bytes<bool>(values%0#0)
        (assert tmp%0#1)
        let tuple_item%1#1: bool = extract_value(flags#0, 1)
        let values%1#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%1#1)
        let tmp%1#1: bool = decode_bytes<bool>(values%1#0)
        let tmp%2#1: bool = (! tmp%1#1)
        (assert tmp%2#1)
        let tuple_item%2#1: bool = extract_value(flags#0, 2)
        let values%2#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%2#1)
        let tmp%3#1: bool = decode_bytes<bool>(values%2#0)
        (assert tmp%3#1)
        let tuple_item%3#1: bool = extract_value(flags#0, 3)
        let values%3#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%3#1)
        let tmp%4#1: bool = decode_bytes<bool>(values%3#0)
        let tmp%5#1: bool = (! tmp%4#1)
        (assert tmp%5#1)
        (log flags#0)
        let tmp%7#0: bool = 1u
        let vector_flags#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = bytes_encode<((uint64,uint64),(bool1,bool1,bool1,bool1))>(coord_1#0, flags#0)
        let tuple_item%0#2: Encoded(uint64,uint64) = extract_value(vector_flags#0, 0)
        let tuple_item%1#2: Encoded(uint64) = extract_value(vector_flags#0, 0, 0)
        let tmp%0#2: bytes = (itob 35382882839u)
        let tmp%1#2: bool = (== tuple_item%1#2 tmp%0#2)
        (assert tmp%1#2)
        let tuple_item%2#2: Encoded(bool1,bool1,bool1,bool1) = extract_value(vector_flags#0, 1)
        let tuple_item%3#2: bool = extract_value(vector_flags#0, 1, 2)
        let values%0#1: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%3#2)
        let tmp%2#2: bool = decode_bytes<bool>(values%0#1)
        (assert tmp%2#2)
        let tmp%9#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x)
        let mutable#0: Encoded((len+uint8[])) = bytes_encode<((len+uint8[]))>(tmp%9#0)
        let tuple_item%2#0: Encoded(len+uint8[]) = extract_value(mutable#0, 0)
        let tmp%11#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x2a)
        let tmp%12#0: Encoded(len+uint8[]) = array_concat(tuple_item%2#0, tmp%11#0, 1u)
        let copy#1: Encoded((len+uint8[])) = replace_value(mutable#0, 0, tmp%12#0)
        let tmp%13#0: bool = (!= mutable#0 copy#1)
        (assert tmp%13#0) // expected copy is different
        let immutable#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000000000000c, 0x0000000000000022)
        let tmp%15#0: bool = 1u
        let tmp%16#0: bool = 1u
        let tuple_item%3#0: Encoded(uint64) = extract_value(immutable#0, 0)
        let immutable2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tuple_item%3#0, 0x000000000000007b)
        let tuple_item%4#0: Encoded(uint64) = extract_value(immutable2#0, 1)
        let tmp%18#0: bool = (b== tuple_item%4#0 0x000000000000007b)
        (assert tmp%18#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(immutable2#0, 0)
        let tmp%19#0: bool = (b== tuple_item%5#0 tuple_item%3#0)
        (assert tmp%19#0)
        let tmp%20#0: Encoded() = bytes_encode<()>()
        let tmp%22#0: bool = (== tmp%20#0 tmp%20#0)
        (assert tmp%22#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L224
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L247
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L276
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L259
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L277
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L276
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L285
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L335
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L334
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L313
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L334
        return array_head_and_tail#1

subroutine test_cases.arc4_types.structs.add_decimal(x: Encoded(uint64), y: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L98
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#0)
        return reinterpret_Encoded(uint64)%0#0