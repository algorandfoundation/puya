main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L35
        let encoded%0#0: Encoded((uint64)) = (concat 0x 0x000000083cfbf217)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat encoded%0#0 0x000000230384b842)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        let coord_1#0: Encoded((uint64,uint64)) = encoded%2#0
        let encoded%3#0: Encoded((uint64)) = (concat 0x 0x000000083cfbf217)
        let encoded%4#0: Encoded((uint64,uint64)) = (concat encoded%3#0 0x000000230384b842)
        let encoded%5#0: bytes = (concat encoded%4#0 0x)
        let coord_2#0: Encoded((uint64,uint64)) = encoded%5#0
        let copy%0#0: Encoded((uint64,uint64)) = coord_1#0
        let copy%1#0: Encoded((uint64,uint64)) = coord_2#0
        let (add%0#0: Encoded((uint64,uint64)), add%1#0: Encoded((uint64,uint64)), add%2#0: Encoded((uint64,uint64))) = test_cases.arc4_types.structs.add(copy%0#0, copy%1#0)
        let copy%1#1: Encoded((uint64,uint64)) = add%2#0
        let copy%0#1: Encoded((uint64,uint64)) = add%1#0
        let coord_3#0: Encoded((uint64,uint64)) = (add%0#0)
        let tmp%0#0: bytes = (extract3 coord_3#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bytes = (extract3 coord_3#0 8u 8u) // on error: Index access is out of bounds
        let loop_counter%0#0: uint64 = 0u
        let val#0: Encoded(uint64) = tmp%0#0
        goto block@1
    block@1: // for_body_L40
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto block@2
    block@2: // for_footer_L39
        goto_nth [block@3][loop_counter%0#1] else goto block@4
    block@3: // for_header_1_L39
        let loop_counter%0#2: uint64 = 1u
        let val#2: Encoded(uint64) = tmp%1#0
        goto block@1
    block@4: // after_for_L39
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded%6#0: Encoded((bool1)) = (concat 0x encoded_bool%0#0)
        let get_bit%0#0: uint64 = (getbit encoded_bool%1#0 0u)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded%6#0 1u get_bit%0#0)
        let get_bit%1#0: uint64 = (getbit encoded_bool%2#0 0u)
        let set_bit%1#0: Encoded((bool1)) = (setbit set_bit%0#0 2u get_bit%1#0)
        let get_bit%2#0: uint64 = (getbit encoded_bool%3#0 0u)
        let set_bit%2#0: Encoded((bool1)) = (setbit set_bit%1#0 3u get_bit%2#0)
        let encoded%7#0: bytes = (concat set_bit%2#0 0x)
        let flags#0: Encoded((bool1,bool1,bool1,bool1)) = encoded%7#0
        let copy%2#0: Encoded((bool1,bool1,bool1,bool1)) = flags#0
        let check%0#0: Encoded((bool1,bool1,bool1,bool1)) = test_cases.arc4_types.structs.check(copy%2#0)
        let copy%2#1: Encoded((bool1,bool1,bool1,bool1)) = check%0#0
        (log flags#0)
        let tmp%2#0: bool = (== coord_1#0 coord_1#0)
        (assert tmp%2#0)
        let copy%3#0: Encoded((uint64,uint64)) = coord_1#0
        let copy%4#0: Encoded((bool1,bool1,bool1,bool1)) = flags#0
        let encoded%8#0: Encoded(((uint64,uint64))) = (concat 0x copy%3#0)
        let encoded%9#0: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))) = (concat encoded%8#0 copy%4#0)
        let encoded%10#0: bytes = (concat encoded%9#0 0x)
        let nested_decode%0#0: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))) = test_cases.arc4_types.structs.nested_decode(encoded%10#0)
        let encoded%10#1: bytes = nested_decode%0#0
        let length%0#0: uint64 = (len 0x)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
        let tail%0#0: bytes = (concat 0x encoded_value%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 2u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%11#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%0#0)
        let encoded%12#0: bytes = (concat encoded%11#0 tail%0#0)
        let mutable#0: Encoded((len+uint8[])) = encoded%12#0
        let copy%5#0: Encoded((len+uint8[])) = mutable#0
        let copy#0: Encoded((len+uint8[])) = copy%5#0
        let item_start_offset%0#0: uint64 = (extract_uint16 copy#0 0u)
        let item_end_offset%0#0: uint64 = (len copy#0)
        let tmp%3#0: bytes = (substring3 copy#0 item_start_offset%0#0 item_end_offset%0#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%3#0)
        let encoded%13#0: Encoded((uint8)) = (concat 0x 0x2a)
        let encoded%14#0: bytes = (concat encoded%13#0 0x)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%14#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%2#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let item_offset%0#0: uint64 = (extract_uint16 copy#0 0u)
        let data_up_to_item%0#0: bytes = (extract3 copy#0 0u item_offset%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 concat_result%0#0)
        let copy#1: Encoded((len+uint8[])) = updated_data%0#0
        let tmp%4#0: bool = (!= mutable#0 copy#1)
        (assert tmp%4#0) // expected copy is different
        let encoded%15#0: Encoded((uint64)) = (concat 0x 0x000000000000000c)
        let encoded%16#0: Encoded((uint64,uint64)) = (concat encoded%15#0 0x0000000000000022)
        let encoded%17#0: bytes = (concat encoded%16#0 0x)
        let immutable#0: Encoded((uint64,uint64)) = encoded%17#0
        let no_copy#0: Encoded((uint64,uint64)) = immutable#0
        let copy%6#0: Encoded((uint64,uint64)) = immutable#0
        let immutable_copy#0: Encoded((uint64,uint64)) = copy%6#0
        let tmp%5#0: bool = (== no_copy#0 immutable#0)
        (assert tmp%5#0)
        let tmp%6#0: bool = (== immutable_copy#0 immutable#0)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (extract3 immutable#0 0u 8u) // on error: Index access is out of bounds
        let encoded%18#0: Encoded((uint64)) = (concat 0x tmp%7#0)
        let encoded%19#0: Encoded((uint64,uint64)) = (concat encoded%18#0 0x000000000000007b)
        let encoded%20#0: bytes = (concat encoded%19#0 0x)
        let immutable2#0: Encoded((uint64,uint64)) = encoded%20#0
        let reinterpret_biguint%0#0: biguint = (extract3 immutable2#0 8u 8u) // on error: Index access is out of bounds
        let reinterpret_biguint%1#0: biguint = 0x000000000000007b
        let tmp%8#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%8#0)
        let reinterpret_biguint%2#0: biguint = (extract3 immutable2#0 0u 8u) // on error: Index access is out of bounds
        let reinterpret_biguint%3#0: biguint = (extract3 immutable#0 0u 8u) // on error: Index access is out of bounds
        let tmp%9#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%9#0)
        return 1u

subroutine test_cases.arc4_types.structs.add(v1: Encoded((uint64,uint64)), v2: Encoded((uint64,uint64))) -> <Encoded((uint64,uint64)), Encoded((uint64,uint64)), Encoded((uint64,uint64))>:
    block@0: // L70
        let v1%is_original#0: bool = 1u
        let v1%out#0: Encoded((uint64,uint64)) = v1#0
        let v2%is_original#0: bool = 1u
        let v2%out#0: Encoded((uint64,uint64)) = v2#0
        let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tmp%0#0, tmp%1#0)
        let tmp%3#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%4#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tmp%3#0, tmp%4#0)
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%2#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat encoded%0#0 tmp%5#0)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        return encoded%2#0 v1#0 v2#0

subroutine test_cases.arc4_types.structs.check(flags: Encoded((bool1,bool1,bool1,bool1))) -> Encoded((bool1,bool1,bool1,bool1)):
    block@0: // L78
        let flags%is_original#0: bool = 1u
        let flags%out#0: Encoded((bool1,bool1,bool1,bool1)) = flags#0
        let is_true%0#0: uint64 = (getbit flags#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%0#0: bool = (getbit encoded_bool%0#0 0u)
        (assert tmp%0#0)
        let is_true%1#0: uint64 = (getbit flags#0 1u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tmp%1#0: bool = (getbit encoded_bool%1#0 0u)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let is_true%2#0: uint64 = (getbit flags#0 2u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let tmp%3#0: bool = (getbit encoded_bool%2#0 0u)
        (assert tmp%3#0)
        let is_true%3#0: uint64 = (getbit flags#0 3u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%3#0)
        let tmp%4#0: bool = (getbit encoded_bool%3#0 0u)
        let tmp%5#0: bool = (! tmp%4#0)
        (assert tmp%5#0)
        return flags%out#0

subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1)))) -> Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))):
    block@0: // L86
        let vector_flags%is_original#0: bool = 1u
        let vector_flags%out#0: Encoded(((uint64,uint64),(bool1,bool1,bool1,bool1))) = vector_flags#0
        let tmp%0#0: bytes = (extract3 vector_flags#0 0u 16u) // on error: Index access is out of bounds
        let tmp%1#0: bytes = (extract3 tmp%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: bytes = (itob 35382882839u)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bytes = (extract3 vector_flags#0 16u 1u) // on error: Index access is out of bounds
        let is_true%0#0: uint64 = (getbit tmp%4#0 2u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%5#0: bool = (getbit encoded_bool%0#0 0u)
        (assert tmp%5#0)
        return vector_flags%out#0

subroutine test_cases.arc4_types.structs.add_decimal(x: Encoded(uint64), y: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L92
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#0)
        return reinterpret_Encoded(uint64)%0#0