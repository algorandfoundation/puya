main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L39
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000083cfbf217, 0x000000230384b842)
        let coord_1#0: Encoded(uint64,uint64) = tmp%0#0
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000083cfbf217, 0x000000230384b842)
        let coord_2#0: Encoded(uint64,uint64) = tmp%1#0
        let (add%0#0: Encoded(uint64,uint64), add%1#0: Encoded(uint64,uint64), add%2#0: Encoded(uint64,uint64)) = test_cases.arc4_types.structs.add(coord_1#0, coord_2#0)
        let coord_3#0: Encoded(uint64,uint64) = (add%0#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(coord_3#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(coord_3#0, 1)
        let loop_counter%0#0: uint64 = 0u
        let val#0: Encoded(uint64) = tuple_item%0#0
        goto block@1
    block@1: // for_body_L44
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto block@2
    block@2: // for_footer_L43
        goto_nth [block@3][loop_counter%0#1] else goto block@4
    block@3: // for_header_1_L43
        let loop_counter%0#2: uint64 = 1u
        let val#2: Encoded(uint64) = tuple_item%1#0
        goto block@1
    block@4: // after_for_L43
        let tmp%2#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%5#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%6#0: Encoded(bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1)>(tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0)
        let flags#0: Encoded(bool1,bool1,bool1,bool1) = tmp%6#0
        let check%0#0: Encoded(bool1,bool1,bool1,bool1) = test_cases.arc4_types.structs.check(flags#0)
        (log flags#0)
        let tmp%7#0: bool = (== coord_1#0 coord_1#0)
        (assert tmp%7#0)
        let tmp%8#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = bytes_encode<((uint64,uint64),(bool1,bool1,bool1,bool1))>(coord_1#0, flags#0)
        let nested_decode%0#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = test_cases.arc4_types.structs.nested_decode(tmp%8#0)
        let tmp%9#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x)
        let tmp%10#0: Encoded((len+uint8[])) = bytes_encode<((len+uint8[]))>(tmp%9#0)
        let mutable#0: Encoded((len+uint8[])) = tmp%10#0
        let copy#0: Encoded((len+uint8[])) = mutable#0
        let tuple_item%2#0: Encoded(len+uint8[]) = extract_value(copy#0, 0)
        let tmp%11#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x2a)
        let concat%0#0: Encoded(len+uint8[]) = (concat tuple_item%2#0 tmp%11#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%2#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let updated_tuple%0#0: Encoded((len+uint8[])) = replace_value(copy#0, 0, as_Encoded(len+uint8[])%0#0)
        let copy#1: Encoded((len+uint8[])) = updated_tuple%0#0
        let tmp%12#0: bool = (!= mutable#0 copy#1)
        (assert tmp%12#0) // expected copy is different
        let tmp%13#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000000000000c, 0x0000000000000022)
        let immutable#0: Encoded(uint64,uint64) = tmp%13#0
        let no_copy#0: Encoded(uint64,uint64) = immutable#0
        let immutable_copy#0: Encoded(uint64,uint64) = immutable#0
        let tmp%14#0: bool = (== no_copy#0 immutable#0)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== immutable_copy#0 immutable#0)
        (assert tmp%15#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(immutable#0, 0)
        let tmp%16#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tuple_item%3#0, 0x000000000000007b)
        let immutable2#0: Encoded(uint64,uint64) = tmp%16#0
        let tuple_item%4#0: Encoded(uint64) = extract_value(immutable2#0, 1)
        let reinterpret_biguint%0#0: biguint = tuple_item%4#0
        let reinterpret_biguint%1#0: biguint = 0x000000000000007b
        let tmp%17#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%17#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(immutable2#0, 0)
        let reinterpret_biguint%2#0: biguint = tuple_item%5#0
        let tuple_item%6#0: Encoded(uint64) = extract_value(immutable#0, 0)
        let reinterpret_biguint%3#0: biguint = tuple_item%6#0
        let tmp%18#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%18#0)
        let tmp%19#0: Encoded() = bytes_encode<()>()
        let tmp%20#0: Encoded() = bytes_encode<()>()
        let tmp%21#0: bool = (== tmp%19#0 tmp%20#0)
        (assert tmp%21#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        let value_internal%0#0: uint64 = head_offset#0
        goto block@1
    block@1: // for_header_L282
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let head_offset#1: uint64 = value_internal%0#1
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L282
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        let value_internal%0#0: uint64 = head_offset#0
        goto block@1
    block@1: // for_header_L342
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let head_offset#1: uint64 = value_internal%0#1
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L342
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1

subroutine test_cases.arc4_types.structs.add(v1: Encoded(uint64,uint64), v2: Encoded(uint64,uint64)) -> <Encoded(uint64,uint64), Encoded(uint64,uint64), Encoded(uint64,uint64)>:
    block@0: // L76
        let v1%is_original#0: bool = 1u
        let v1%out#0: Encoded(uint64,uint64) = v1#0
        let v2%is_original#0: bool = 1u
        let v2%out#0: Encoded(uint64,uint64) = v2#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(v1#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(v2#0, 0)
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%0#0, tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = extract_value(v1#0, 1)
        let tuple_item%3#0: Encoded(uint64) = extract_value(v2#0, 1)
        let tmp%1#0: Encoded(uint64) = test_cases.arc4_types.structs.add_decimal(tuple_item%2#0, tuple_item%3#0)
        let tmp%2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%0#0, tmp%1#0)
        return tmp%2#0 v1#0 v2#0

subroutine test_cases.arc4_types.structs.check(flags: Encoded(bool1,bool1,bool1,bool1)) -> Encoded(bool1,bool1,bool1,bool1):
    block@0: // L84
        let flags%is_original#0: bool = 1u
        let flags%out#0: Encoded(bool1,bool1,bool1,bool1) = flags#0
        let tuple_item%0#0: bool = extract_value(flags#0, 0)
        let values%0#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%0#0)
        let tmp%0#0: bool = decode_bytes<bool>(values%0#0)
        (assert tmp%0#0)
        let tuple_item%1#0: bool = extract_value(flags#0, 1)
        let values%1#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%1#0)
        let tmp%1#0: bool = decode_bytes<bool>(values%1#0)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0)
        let tuple_item%2#0: bool = extract_value(flags#0, 2)
        let values%2#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%2#0)
        let tmp%3#0: bool = decode_bytes<bool>(values%2#0)
        (assert tmp%3#0)
        let tuple_item%3#0: bool = extract_value(flags#0, 3)
        let values%3#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%3#0)
        let tmp%4#0: bool = decode_bytes<bool>(values%3#0)
        let tmp%5#0: bool = (! tmp%4#0)
        (assert tmp%5#0)
        return flags%out#0

subroutine test_cases.arc4_types.structs.nested_decode(vector_flags: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1))) -> Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)):
    block@0: // L92
        let vector_flags%is_original#0: bool = 1u
        let vector_flags%out#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = vector_flags#0
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(vector_flags#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let tmp%0#0: bytes = (itob 35382882839u)
        let tmp%1#0: bool = (== tuple_item%1#0 tmp%0#0)
        (assert tmp%1#0)
        let tuple_item%2#0: Encoded(bool1,bool1,bool1,bool1) = extract_value(vector_flags#0, 1)
        let tuple_item%3#0: bool = extract_value(tuple_item%2#0, 2)
        let values%0#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%3#0)
        let tmp%2#0: bool = decode_bytes<bool>(values%0#0)
        (assert tmp%2#0)
        return vector_flags%out#0

subroutine test_cases.arc4_types.structs.add_decimal(x: Encoded(uint64), y: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L98
        let tmp%0#0: uint64 = (btoi x#0)
        let tmp%1#0: uint64 = (btoi y#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob tmp%2#0)
        return reinterpret_Encoded(uint64)%0#0