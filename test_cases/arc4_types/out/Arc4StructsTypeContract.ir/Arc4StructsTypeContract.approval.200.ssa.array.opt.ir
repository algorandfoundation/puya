main test_cases.arc4_types.structs.Arc4StructsTypeContract.approval_program:
    block@0: // L39
        let aggregate%head%0#1: bytes = 0x000000083cfbf217
        let coord_1#0: Encoded(uint64,uint64) = 0x000000083cfbf217000000230384b842
        let x#0: Encoded(uint64) = 0x000000083cfbf217
        let tmp%0#4: uint64 = 35382882839u
        let tmp%2#3: uint64 = 70765765678u
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (itob 70765765678u)
        let x#1: Encoded(uint64) = 0x000000230384b842
        let tmp%0#5: uint64 = 150382884930u
        let tmp%2#4: uint64 = 300765769860u
        let reinterpret_Encoded(uint64)%0#1: Encoded(uint64) = (itob 300765769860u)
        let aggregate%head%2#1: bytes = reinterpret_Encoded(uint64)%0#0
        let coord_3#0: Encoded(uint64,uint64) = 0x0000001079f7e42e0000004607097084
        let val#0: Encoded(uint64) = 0x0000001079f7e42e
        let val#2: Encoded(uint64) = 0x0000004607097084
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L44
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3)
        let val#1: Encoded(uint64) = φ(val#0 <- block@0, val#2 <- block@3)
        (log val#1)
        goto loop_counter%0#1 ? block@4 : block@3
    block@3: // for_header_1_L43
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // after_for_L43
        let aggregate%encoded_bool%0#1: bytes[1] = 0x80
        let aggregate%encoded_bool%1#1: bytes[1] = 0x00
        let aggregate%get_bit%0#1: uint64 = 0u
        let aggregate%set_bit%0#1: Encoded(bool8) = 0x80
        let aggregate%get_bit%1#1: uint64 = 1u
        let aggregate%set_bit%1#1: Encoded(bool8) = 0xa0
        let aggregate%get_bit%2#1: uint64 = 0u
        let aggregate%set_bit%2#1: Encoded(bool8) = 0xa0
        let flags#0: Encoded(bool1,bool1,bool1,bool1) = 0xa0
        let aggregate%get_bit%3#1: uint64 = 1u
        let aggregate%encoded_bool%2#1: bytes[1] = 0x80
        let aggregate%get_bit%4#1: bool = 1u
        let aggregate%get_bit%5#1: uint64 = 0u
        let aggregate%encoded_bool%3#1: bytes[1] = 0x00
        let aggregate%get_bit%6#1: bool = 0u
        let tmp%2#1: bool = 1u
        let aggregate%get_bit%7#1: uint64 = 1u
        let aggregate%encoded_bool%4#1: bytes[1] = 0x80
        let aggregate%get_bit%8#1: bool = 1u
        let aggregate%get_bit%9#1: uint64 = 0u
        let aggregate%encoded_bool%5#1: bytes[1] = 0x00
        let aggregate%get_bit%10#1: bool = 0u
        let tmp%5#1: bool = 1u
        (log 0xa0)
        let aggregate%head%5#1: bytes = 0x000000083cfbf217000000230384b842
        let vector_flags#0: Encoded((uint64,uint64),(bool1,bool1,bool1,bool1)) = 0x000000083cfbf217000000230384b842a0
        let aggregate%extract%4#1: bytes = 0x000000083cfbf217000000230384b842
        let aggregate%extract%5#1: bytes = 0x000000083cfbf217
        let tmp%0#2: bytes = (itob 35382882839u)
        let tmp%1#2: bool = 1u
        let aggregate%extract%6#1: bytes = 0xa0
        let aggregate%get_bit%11#1: uint64 = 1u
        let aggregate%encoded_bool%6#1: bytes[1] = 0x80
        let aggregate%get_bit%12#1: bool = 1u
        let aggregate%length%0#1: uint64 = 0u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%length_uint16%0#1: bytes = 0x0000
        let aggregate%encoded_value%0#1: bytes = 0x0000
        let aggregate%as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#1: bytes = 0x0002
        let aggregate%head%7#1: bytes = 0x0002
        let mutable#0: Encoded((len+uint8[])) = 0x00020000
        let aggregate%extract_uint16%0#1: uint64 = 2u
        let aggregate%len%0#1: uint64 = 4u
        let aggregate%substring3%0#1: bytes = 0x0000
        let aggregate%head%8#1: bytes = 0x2a
        let concat%0#0: Encoded(len+uint8[]) = 0x00002a
        let extract_uint16%0#0: uint64 = 0u
        let add%3#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let as_u16_bytes%0#0: bytes = 0x0001
        let replace%0#0: bytes = 0x00012a
        let aggregate%item_offset%0#1: uint64 = 2u
        let aggregate%data_up_to_item%0#1: bytes = 0x0002
        let copy#1: Encoded((len+uint8[])) = 0x000200012a
        let tmp%12#0: bool = 1u
        let aggregate%head%9#1: bytes = 0x000000000000000c
        let immutable#0: Encoded(uint64,uint64) = 0x000000000000000c0000000000000022
        let aggregate%extract%7#1: bytes = 0x000000000000000c
        let aggregate%head%11#1: bytes = 0x000000000000000c
        let immutable2#0: Encoded(uint64,uint64) = 0x000000000000000c000000000000007b
        let aggregate%extract%8#1: bytes = 0x000000000000007b
        let tmp%17#0: bool = 1u
        let aggregate%extract%9#1: bytes = 0x000000000000000c
        let tmp%18#0: bool = 1u
        return 1u