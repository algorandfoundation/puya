contract test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.approval_program() -> bool:
            block@0: // L4
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "xyz()string[]" => block@2, method "xyz_raw()string[]" => block@3, * => fail // reject transaction}
            block@2: // xyz_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz()
                let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
                (log tmp%6#0)
                return 1u
            block@3: // xyz_raw_route_L13
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                let tmp%10#0: bytes = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw()
                let tmp%11#0: bytes = (concat 0x151f7c75 tmp%10#0)
                (log tmp%11#0)
                return 1u
            block@6: // bare_routing_L4
                let tmp%12#0: uint64 = (txn OnCompletion)
                let not%tmp%12#0: bool = (! tmp%12#0)
                (assert not%tmp%12#0) // reject transaction
                let tmp%13#0: bool = (txn ApplicationID)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0) // is creating
                return 1u
        
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz() -> bytes:
            block@0: // L5
                let tmp%0#0: bytes = 0x000158
                let tmp%1#0: bytes = 0x000159
                let tmp%2#0: bytes = 0x00015a
                let next_item_len%0#0: uint64 = (len tmp%0#0)
                let tail_offset%0#0: uint64 = (+ 6u next_item_len%0#0)
                let as_bytes%4#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%4#0)
                let result%1#0: bytes = (concat 0x0006 next_item_head%1#0)
                let next_item_len%1#0: uint64 = (len tmp%1#0)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 next_item_len%1#0)
                let as_bytes%5#0: bytes = (itob tail_offset%1#0)
                let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%5#0)
                let result%2#0: bytes = (concat result%1#0 next_item_head%2#0)
                let result%3#0: bytes = (concat result%2#0 tmp%0#0)
                let result%4#0: bytes = (concat result%3#0 tmp%1#0)
                let result%5#0: bytes = (concat result%4#0 tmp%2#0)
                let array_data%0#0: bytes = (concat 0x0003 result%5#0)
                return array_data%0#0
        
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw() -> bytes:
            block@0: // L13
                let next_item_len%0#0: uint64 = 3u
                let tail_offset%0#0: uint64 = (+ 6u next_item_len%0#0)
                let as_bytes%1#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let result%4#0: bytes = (concat 0x0006 next_item_head%1#0)
                let next_item_len%1#0: uint64 = 3u
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 next_item_len%1#0)
                let as_bytes%2#0: bytes = (itob tail_offset%1#0)
                let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let result%5#0: bytes = (concat result%4#0 next_item_head%2#0)
                let result%6#0: bytes = (concat result%5#0 0x000158)
                let result%7#0: bytes = (concat result%6#0 0x000159)
                let result%8#0: bytes = (concat result%7#0 0x00015a)
                let raw#0: bytes = (concat 0x0003 result%8#0)
                return raw#0
    
    program clear-state:
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.clear_state_program() -> bool:
            block@0: // L4
                return 1u