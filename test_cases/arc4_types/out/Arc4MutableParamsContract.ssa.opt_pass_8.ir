contract test_cases.arc4_types.mutable_params.Arc4MutableParamsContract:
    program approval:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program() -> uint64:
            block@0: // L28
                test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies()
                return 1u
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
            block@0: // L33
                let my_array#1: bytes = ((replace2 2) 0x01020304 0x05)
                let tmp%18#0: bytes = ((extract 2 1) my_array#1)
                let tmp%19#0: uint64 = (b== tmp%18#0 0x05)
                (assert tmp%19#0) // my_array should be mutated
                let (t#0: uint64, f#0: uint64, my_array#2: bytes, my_struct#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(my_array#1, 0x80320006000d00054861707079000444617973)
                (assert t#0)
                let tmp%24#0: uint64 = (! f#0)
                (assert tmp%24#0)
                let tmp%26#0: bytes = ((extract 1 1) my_array#2)
                let tmp%27#0: uint64 = (b== tmp%26#0 0x05)
                (assert tmp%27#0) // my_array has been mutated by the subroutine
                let item_index%28#0: uint64 = (extract_uint16 my_struct#1 2u)
                let item_length%29#0: uint64 = (extract_uint16 my_struct#1 item_index%28#0)
                let item_length_plus_2%30#0: uint64 = (+ item_length%29#0 2u)
                let tmp%31#0: bytes = (extract3 my_struct#1 item_index%28#0 item_length_plus_2%30#0)
                let tmp%32#0: uint64 = (== tmp%31#0 "\x00\x07AARRGH!")
                (assert tmp%32#0) // my_struct has been mutated by the subroutine
                let (other_routine%35#0: uint64, other_routine%36#0: uint64, other_routine%37#0: bytes, other_routine%38#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(0x01020304, 0x80320006000d00054861707079000444617973)
                let item_length%43#0: uint64 = 5u
                let item_length_plus_2%44#0: uint64 = (+ item_length%43#0 2u)
                let tmp%45#0: bytes = (extract3 0x80320006000d00054861707079000444617973 6u item_length_plus_2%44#0)
                let tmp%46#0: uint64 = (== tmp%45#0 "\x00\x05Happy")
                (assert tmp%46#0) // my_struct_copy should not be mutated by the subroutine
                let (my_array_copy_2#2: bytes, my_array_copy_2#1: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(0x01020304)
                let tmp%51#0: bytes = ((extract 0 1) my_array_copy_2#2)
                let tmp%52#0: uint64 = (b== tmp%51#0 0x01)
                (assert tmp%52#0) // my_array_copy_2 should have original value
                let (other_routine_2%53#0: bytes, my_array_copy_2#3: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(my_array_copy_2#2)
                let tmp%56#0: bytes = ((extract 0 1) my_array_copy_2#3)
                let tmp%57#0: uint64 = (b== tmp%56#0 0x0a)
                (assert tmp%57#0) // my_array_copy_2 should have mutated value
                let tmp%61#0: bytes = ((extract 0 4) my_array#2)
                let (other_routine_2%63#0: bytes, other_routine_2%64#0: bytes) = test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(tmp%61#0)
                return 
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> <uint64, uint64, bytes, bytes>:
            block@0: // L92
                let array#1: bytes = ((replace2 1) array#0 0x05)
                let item_offset%3#0: uint64 = (extract_uint16 struct#0 2u)
                let data_up_to_item%4#0: bytes = (extract3 struct#0 0u item_offset%3#0)
                let next_item_offset%5#0: uint64 = (extract_uint16 struct#0 4u)
                let total_data_length%6#0: uint64 = (len struct#0)
                let data_beyond_item%7#0: bytes = (substring3 struct#0 next_item_offset%5#0 total_data_length%6#0)
                let updated_data%8#0: bytes = (concat data_up_to_item%4#0 "\x00\x07AARRGH!")
                let updated_data%8#1: bytes = (concat updated_data%8#0 data_beyond_item%7#0)
                let tail_cursor%10#0: uint64 = (+ item_offset%3#0 9u)
                let updated_header_bytes%11#0: bytes = (itob tail_cursor%10#0)
                let updated_header_bytes%11#1: bytes = ((substring 6 8) updated_header_bytes%11#0)
                let struct#1: bytes = ((replace2 4) updated_data%8#1 updated_header_bytes%11#1)
                return 1u 0u array#1 struct#1
        
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> <bytes, bytes>:
            block@0: // L98
                let array#1: bytes = ((replace2 0) array#0 0x0a)
                return array#0 array#1
    
    program clear-state:
        subroutine test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.clear_state_program() -> uint64:
            block@0: // L121
                return 1u