contract test_cases.arc4_types.structs2.Arc4StructsFromAnotherModule:
    program approval:
        subroutine test_cases.arc4_types.structs2.Arc4StructsFromAnotherModule.approval_program() -> uint64:
            block@0: // L7
                let tmp%0#0: any = (setbit 0x00 0u 1u)
                let tmp%1#0: any = (setbit 0x00 0u 0u)
                let tmp%2#0: any = (setbit 0x00 0u 1u)
                let tmp%3#0: any = (setbit 0x00 0u 0u)
                let current_tail_offset%0#0: uint64 = 1u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#0 tmp%0#0)
                let is_true%0#0: uint64 = (getbit tmp%1#0 0u)
                let encoded_tuple_buffer%0#2: any = (setbit encoded_tuple_buffer%0#1 1u is_true%0#0)
                let is_true%1#0: uint64 = (getbit tmp%2#0 0u)
                let encoded_tuple_buffer%0#3: any = (setbit encoded_tuple_buffer%0#2 2u is_true%1#0)
                let is_true%2#0: uint64 = (getbit tmp%3#0 0u)
                let encoded_tuple_buffer%0#4: any = (setbit encoded_tuple_buffer%0#3 3u is_true%2#0)
                let flags#0: any = encoded_tuple_buffer%0#4
                (log flags#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.structs2.Arc4StructsFromAnotherModule.clear_state_program() -> uint64:
            block@0: // L13
                return 1u