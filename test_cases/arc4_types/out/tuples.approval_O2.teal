#pragma version 10

test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    // arc4_types/tuples.py:15
    // my_tuple = Tuple((UInt8(1), UInt8(2), String("hello"), String("world"), UInt8(255)))
    int 7
    itob
    extract 6 2
    byte 0x0102
    swap
    concat
    int 14
    itob
    extract 6 2
    concat
    byte 0xff
    concat
    byte "\x00\x05hello"
    concat
    byte "\x00\x05world"
    concat
    // arc4_types/tuples.py:17-19
    // assert my_tuple == TestTuple.from_bytes(  # type: ignore[comparison-overlap]
    //     Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    // )
    dup
    // arc4_types/tuples.py:18
    // Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    byte 0x01020007000eff000568656c6c6f0005776f726c64
    // arc4_types/tuples.py:17-19
    // assert my_tuple == TestTuple.from_bytes(  # type: ignore[comparison-overlap]
    //     Bytes.from_hex("01020007000EFF000568656C6C6F0005776F726C64")
    // )
    ==
    assert
    // arc4_types/tuples.py:36
    // (a, b, c, d, e, f, g, h, i, j, k) = boolean_packing.decode()
    byte 0x04
    // arc4_types/tuples.py:38
    // assert a.decode() == 4, "a is 4"
    btoi
    int 4
    ==
    assert // a is 4
    // arc4_types/tuples.py:36
    // (a, b, c, d, e, f, g, h, i, j, k) = boolean_packing.decode()
    byte 0x10
    // arc4_types/tuples.py:41
    // assert k.decode() == 16, "k is 16"
    btoi
    int 16
    ==
    assert // k is 16
    // arc4_types/tuples.py:45
    // total, concat = self.test_stuff(my_tuple)
    callsub test_stuff
    // arc4_types/tuples.py:46
    // assert concat.decode() == b"hello world"
    extract 2 0
    byte "hello world"
    ==
    assert
    // arc4_types/tuples.py:47
    // assert total == 258
    int 258
    ==
    assert
    // arc4_types/tuples.py:49
    // return True
    int 1
    return


// test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> uint64, bytes:
test_stuff:
    // arc4_types/tuples.py:54-55
    // @subroutine
    // def test_stuff(self, test_tuple: TestTuple) -> tuple[UInt64, String]:
    proto 1 2
    // arc4_types/tuples.py:56
    // a, b, c, d, e = test_tuple.decode()
    frame_dig -1
    extract 0 1
    frame_dig -1
    extract 1 1
    swap
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    dig 1
    extract_uint16
    int 2
    +
    frame_dig -1
    cover 2
    extract3
    frame_dig -1
    int 4
    extract_uint16
    frame_dig -1
    dig 1
    extract_uint16
    int 2
    +
    frame_dig -1
    cover 2
    extract3
    frame_dig -1
    extract 6 1
    // arc4_types/tuples.py:58
    // total = a.decode() + b.decode() + e.decode()
    uncover 3
    btoi
    uncover 4
    btoi
    +
    swap
    btoi
    +
    swap
    // arc4_types/tuples.py:59
    // text = c.decode() + b" " + d.decode()
    uncover 2
    extract 2 0
    byte " "
    concat
    swap
    extract 2 0
    concat
    // arc4_types/tuples.py:61
    // return total, String.encode(text)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
