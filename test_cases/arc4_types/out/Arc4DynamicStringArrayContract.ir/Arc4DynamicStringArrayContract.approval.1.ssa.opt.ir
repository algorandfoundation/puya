main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "xyz()string[]" => block@3, method "xyz_raw()string[]" => block@4, * => block@11}
    block@3: // xyz_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: Encoded(len+len+utf8[][]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // xyz_raw_route_L13
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: Encoded(len+len+utf8[][]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        let test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L4
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create()
        let test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L4
        let test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#2 <- block@8, test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz() -> Encoded(len+len+utf8[][]):
    block@0: // L5
        let tail%0#0: bytes = 0x000158
        let data_length%0#0: uint64 = 3u
        let current_tail_offset%0#0: uint64 = 9u
        let as_bytes%0#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = 0x0006
        let encoded%0#0: Encoded((len+utf8[])) = 0x0006
        let tail%1#0: bytes = 0x000158000159
        let data_length%1#0: uint64 = 3u
        let current_tail_offset%1#0: uint64 = 12u
        let as_bytes%1#0: bytes[8] = (itob 9u)
        let offset_as_uint16%1#0: bytes = 0x0009
        let encoded%1#0: Encoded((len+utf8[],len+utf8[])) = 0x00060009
        let tail%2#0: bytes = 0x00015800015900015a
        let as_bytes%2#0: bytes[8] = (itob 12u)
        let offset_as_uint16%2#0: bytes = 0x000c
        let encoded%2#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = 0x00060009000c
        let encoded%3#0: bytes = 0x00060009000c00015800015900015a
        let as_bytes%3#0: bytes[8] = (itob 3u)
        let len_u16%0#0: bytes = 0x0003
        let encoded%4#0: Encoded(len+len+utf8[][]) = 0x000300060009000c00015800015900015a
        return 0x000300060009000c00015800015900015a

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw() -> Encoded(len+len+utf8[][]):
    block@0: // L13
        let encoded%0#0: Encoded((uint8)) = 0x58
        let encoded%1#0: bytes = 0x58
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let len_u16%0#0: bytes = 0x0001
        let encoded%2#0: Encoded(len+uint8[]) = 0x000158
        let encoded%3#0: Encoded((uint8)) = 0x59
        let encoded%4#0: bytes = 0x59
        let len_u16%1#0: bytes = 0x0001
        let encoded%5#0: Encoded(len+uint8[]) = 0x000159
        let encoded%6#0: Encoded((uint8)) = 0x5a
        let encoded%7#0: bytes = 0x5a
        let len_u16%2#0: bytes = 0x0001
        let encoded%8#0: Encoded(len+uint8[]) = 0x00015a
        let tail%0#0: bytes = 0x000158
        let data_length%0#0: uint64 = 3u
        let current_tail_offset%0#0: uint64 = 9u
        let as_bytes%3#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = 0x0006
        let encoded%9#0: Encoded((len+uint8[])) = 0x0006
        let tail%1#0: bytes = 0x000158000159
        let data_length%1#0: uint64 = 3u
        let current_tail_offset%1#0: uint64 = 12u
        let as_bytes%4#0: bytes[8] = (itob 9u)
        let offset_as_uint16%1#0: bytes = 0x0009
        let encoded%10#0: Encoded((len+uint8[],len+uint8[])) = 0x00060009
        let tail%2#0: bytes = 0x00015800015900015a
        let as_bytes%5#0: bytes[8] = (itob 12u)
        let offset_as_uint16%2#0: bytes = 0x000c
        let encoded%11#0: Encoded((len+uint8[],len+uint8[],len+uint8[])) = 0x00060009000c
        let encoded%12#0: bytes = 0x00060009000c00015800015900015a
        let as_bytes%6#0: bytes[8] = (itob 3u)
        let len_u16%3#0: bytes = 0x0003
        let raw#0: Encoded(len+len+uint8[][]) = 0x000300060009000c00015800015900015a
        return 0x000300060009000c00015800015900015a

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 