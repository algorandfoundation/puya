main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "xyz()string[]" => block@6, method "xyz_raw()string[]" => block@7, * => block@8}
    block@6: // xyz_route_L5
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]()
        fail
    block@7: // xyz_raw_route_L13
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]()
        fail
    block@8: // switch_case_default_L4
        fail
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]() -> void:
    block@0: // L5
        let aggregate%length%0#0: uint64 = 1u
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%length_uint16%0#0: bytes = 0x0001
        let aggregate%encoded_value%0#0: bytes = 0x000158
        let aggregate%length%1#0: uint64 = 1u
        let aggregate%length_uint16%1#0: bytes = 0x0001
        let aggregate%encoded_value%1#0: bytes = 0x000159
        let aggregate%length%2#0: uint64 = 1u
        let aggregate%length_uint16%2#0: bytes = 0x0001
        let aggregate%encoded_value%2#0: bytes = 0x00015a
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = 0x0003
        let aggregate%as_bytes%4#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0006
        let aggregate%head%0#0: bytes = 0x00030006
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 9u
        let aggregate%as_bytes%5#0: bytes[8] = (itob 9u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0009
        let aggregate%head%1#0: bytes = 0x000300060009
        let aggregate%data_length%1#0: uint64 = 3u
        let aggregate%current_tail_offset%1#0: uint64 = 12u
        let aggregate%as_bytes%6#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x000c
        let aggregate%head%2#0: bytes = 0x000300060009000c
        let aggregate%concat%0#0: bytes = 0x000300060009000c000158
        let aggregate%concat%1#0: bytes = 0x000300060009000c000158000159
        let aggregate%concat%2#0: bytes = 0x000300060009000c00015800015900015a
        let tmp%1#0: bytes = 0x151f7c75000300060009000c00015800015900015a
        (log 0x151f7c75000300060009000c00015800015900015a)
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]() -> void:
    block@0: // L13
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = 0x0001
        let aggregate%head%0#0: bytes = 0x000158
        let aggregate%len_u16%1#0: bytes = 0x0001
        let aggregate%head%1#0: bytes = 0x000159
        let aggregate%len_u16%2#0: bytes = 0x0001
        let aggregate%head%2#0: bytes = 0x00015a
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%3#0: bytes = 0x0003
        let aggregate%as_bytes%4#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0006
        let aggregate%head%3#0: bytes = 0x00030006
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 9u
        let aggregate%as_bytes%5#0: bytes[8] = (itob 9u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0009
        let aggregate%head%4#0: bytes = 0x000300060009
        let aggregate%data_length%1#0: uint64 = 3u
        let aggregate%current_tail_offset%1#0: uint64 = 12u
        let aggregate%as_bytes%6#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x000c
        let aggregate%head%5#0: bytes = 0x000300060009000c
        let aggregate%concat%0#0: bytes = 0x000300060009000c000158
        let aggregate%concat%1#0: bytes = 0x000300060009000c000158000159
        let raw#0: Encoded(len+(len+uint8[])[]) = 0x000300060009000c00015800015900015a
        let tmp%1#0: bytes = 0x151f7c75000300060009000c00015800015900015a
        (log 0x151f7c75000300060009000c00015800015900015a)
        exit 1u