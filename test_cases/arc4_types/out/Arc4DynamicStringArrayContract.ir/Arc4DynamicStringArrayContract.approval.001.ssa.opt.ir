main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@3 : block@9
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "xyz()string[]" => block@4, method "xyz_raw()string[]" => block@5, * => block@9}
    block@4: // xyz_route_L5
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]()
        goto block@9
    block@5: // xyz_raw_route_L13
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]()
        goto block@9
    block@9: // after_if_else_L4
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create()
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz[routing]() -> void:
    block@0: // L5
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("X")
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Y")
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Z")
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(tmp%0#1, tmp%1#1, tmp%2#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 encoded_array%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw[routing]() -> void:
    block@0: // L13
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x58)
        let encoded_array%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x59)
        let encoded_array%2#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x5a)
        let raw#0: Encoded(len+(len+uint8[])[]) = bytes_encode<(len+(len+uint8[])[])>(encoded_array%0#0, encoded_array%1#0, encoded_array%2#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 raw#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 