main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "xyz()string[]" => block@2, method "xyz_raw()string[]" => block@3, * => block@4}
    block@2: // xyz_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: Encoded(len+len+utf8[][]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // xyz_raw_route_L13
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let tmp%13#0: Encoded(len+len+utf8[][]) = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        return 1u
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@10
    block@6: // bare_routing_L4
        let tmp%15#0: uint64 = (txn OnCompletion)
        switch tmp%15#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (== tmp%16#0 0u)
        (assert tmp%17#0) // can only call when creating
        test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create()
        return 1u
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@10
    block@10: // after_if_else_L4
        return 0u

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz() -> Encoded(len+len+utf8[][]):
    block@0: // L5
        let tail%0#0: bytes = (concat 0x 0x000158)
        let data_length%0#0: uint64 = (len 0x000158)
        let current_tail_offset%0#0: uint64 = (+ 6u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%0#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 0x000159)
        let data_length%1#0: uint64 = (len 0x000159)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%1#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%0#0 offset_as_uint16%1#0)
        let tail%2#0: bytes = (concat tail%1#0 0x00015a)
        let data_length%2#0: uint64 = (len 0x00015a)
        let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%2#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%2#0: Encoded((len+utf8[],len+utf8[],len+utf8[])) = (concat encoded%1#0 offset_as_uint16%2#0)
        let encoded%3#0: bytes = (concat encoded%2#0 tail%2#0)
        let as_bytes%3#0: bytes[8] = (itob 3u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#0: Encoded(len+len+utf8[][]) = (concat len_u16%0#0 encoded%3#0)
        return encoded%4#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw() -> Encoded(len+len+utf8[][]):
    block@0: // L13
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x58)
        let encoded%1#0: bytes = (concat encoded%0#0 0x)
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%2#0: Encoded(len+uint8[]) = (concat len_u16%0#0 encoded%1#0)
        let encoded%3#0: Encoded((uint8)) = (concat 0x 0x59)
        let encoded%4#0: bytes = (concat encoded%3#0 0x)
        let as_bytes%1#0: bytes[8] = (itob 1u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%5#0: Encoded(len+uint8[]) = (concat len_u16%1#0 encoded%4#0)
        let encoded%6#0: Encoded((uint8)) = (concat 0x 0x5a)
        let encoded%7#0: bytes = (concat encoded%6#0 0x)
        let as_bytes%2#0: bytes[8] = (itob 1u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%8#0: Encoded(len+uint8[]) = (concat len_u16%2#0 encoded%7#0)
        let tail%0#0: bytes = (concat 0x encoded%2#0)
        let data_length%0#0: uint64 = (len encoded%2#0)
        let current_tail_offset%0#0: uint64 = (+ 6u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob 6u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%9#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 encoded%5#0)
        let data_length%1#0: uint64 = (len encoded%5#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%10#0: Encoded((len+uint8[],len+uint8[])) = (concat encoded%9#0 offset_as_uint16%1#0)
        let tail%2#0: bytes = (concat tail%1#0 encoded%8#0)
        let data_length%2#0: uint64 = (len encoded%8#0)
        let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%2#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%11#0: Encoded((len+uint8[],len+uint8[],len+uint8[])) = (concat encoded%10#0 offset_as_uint16%2#0)
        let encoded%12#0: bytes = (concat encoded%11#0 tail%2#0)
        let as_bytes%6#0: bytes[8] = (itob 3u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%13#0: Encoded(len+len+uint8[][]) = (concat len_u16%3#0 encoded%12#0)
        let raw#0: Encoded(len+len+uint8[][]) = encoded%13#0
        let reinterpret_Encoded(len+len+utf8[][])%0#0: Encoded(len+len+utf8[][]) = raw#0
        return reinterpret_Encoded(len+len+utf8[][])%0#0

subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 