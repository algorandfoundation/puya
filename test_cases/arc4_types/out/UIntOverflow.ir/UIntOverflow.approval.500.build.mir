// Op                                                                                            Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // arc4_types/uint_overflow.py:4
        // class UIntOverflow(arc4.ARC4Contract):
        txn NumAppArgs                                                                           tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                           tmp%0#1
        bz main_bare_routing@8 ; b main_abi_routing@2

    main_abi_routing@2:
        // arc4_types/uint_overflow.py:4
        // class UIntOverflow(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                   tmp%2#0
        v-store tmp%2#0
        method test_uint8()void                                                                  Method(test_uint8()void)
        method test_uint16()void                                                                 Method(test_uint8()void),Method(test_uint16()void)
        method test_uint32()void                                                                 Method(test_uint8()void),Method(test_uint16()void),Method(test_uint32()void)
        v-load tmp%2#0                                                                           Method(test_uint8()void),Method(test_uint16()void),Method(test_uint32()void),tmp%2#0
        match main_test_uint8_route@3 main_test_uint16_route@4 main_test_uint32_route@5 ; b main_after_if_else@12 

    main_test_uint8_route@3:
        // arc4_types/uint_overflow.py:5
        // @arc4.abimethod()
        txn OnCompletion                                                                         tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                           tmp%3#0
        !                                                                                        tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                           tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                        tmp%5#0
        v-store tmp%5#0
        v-load tmp%5#0                                                                           tmp%5#0
        assert // can only call when not creating
        callsub test_uint8
        int 1                                                                                    1
        v-store test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0 
        v-load test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0         test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13 

    main_test_uint16_route@4:
        // arc4_types/uint_overflow.py:10
        // @arc4.abimethod()
        txn OnCompletion                                                                         tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                           tmp%7#0
        !                                                                                        tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                           tmp%8#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                        tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                                           tmp%9#0
        assert // can only call when not creating
        callsub test_uint16
        int 1                                                                                    1
        v-store test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0 
        v-load test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0         test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13 

    main_test_uint32_route@5:
        // arc4_types/uint_overflow.py:15
        // @arc4.abimethod()
        txn OnCompletion                                                                         tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                                          tmp%11#0
        !                                                                                        tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                                          tmp%12#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                        tmp%13#0
        v-store tmp%13#0
        v-load tmp%13#0                                                                          tmp%13#0
        assert // can only call when not creating
        callsub test_uint32
        int 1                                                                                    1
        v-store test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0 
        v-load test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0         test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13 

    main_bare_routing@8:
        // arc4_types/uint_overflow.py:4
        // class UIntOverflow(arc4.ARC4Contract):
        txn OnCompletion                                                                         tmp%15#0
        v-store tmp%15#0
        v-load tmp%15#0                                                                          tmp%15#0
        bz main___algopy_default_create@9 ; b main_after_if_else@12

    main___algopy_default_create@9:
        txn ApplicationID                                                                        tmp%16#0
        v-store tmp%16#0
        v-load tmp%16#0                                                                          tmp%16#0
        !                                                                                        tmp%17#0
        v-store tmp%17#0
        v-load tmp%17#0                                                                          tmp%17#0
        assert // can only call when creating
        int 1                                                                                    1
        v-store test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0 
        v-load test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0         test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13 

    main_after_if_else@12:
        // arc4_types/uint_overflow.py:4
        // class UIntOverflow(arc4.ARC4Contract):
        int 0                                                                                    0
        v-store test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0 
        v-load test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0         test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13 

    main_after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__@13:
        v-load tmp%0#0                                                                           tmp%0#0
        return


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8() -> void:
subroutine test_uint8:
    test_uint8_block@0:
        // arc4_types/uint_overflow.py:7
        // too_big = arc4.UInt8(Txn.num_app_args + 2**8)  # should fail here with overflow
        txn NumAppArgs                                                                           tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                           tmp%0#0
        int 256                                                                                  tmp%0#0,256
        +                                                                                        tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                           tmp%1#0
        itob                                                                                     aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        bitlen                                                                                   aggregate%bitlen%0#0
        v-store aggregate%bitlen%0#0
        v-load aggregate%bitlen%0#0                                                              aggregate%bitlen%0#0
        int 8                                                                                    aggregate%bitlen%0#0,8
        <=                                                                                       aggregate%no_overflow%0#0
        v-store aggregate%no_overflow%0#0
        v-load aggregate%no_overflow%0#0                                                         aggregate%no_overflow%0#0
        assert // overflow
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        extract 7 1                                                                              too_big#0
        v-store too_big#0
        // arc4_types/uint_overflow.py:8
        // assert too_big.bytes != b"\x01", "this should not happen"
        v-load too_big#0                                                                         too_big#0
        byte 0x01                                                                                too_big#0,0x01
        !=                                                                                       tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                           tmp%3#0
        assert // this should not happen
        retsub


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16() -> void:
subroutine test_uint16:
    test_uint16_block@0:
        // arc4_types/uint_overflow.py:12
        // too_big = arc4.UInt16(Txn.num_app_args + 2**16)  # should fail here with overflow
        txn NumAppArgs                                                                           tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                           tmp%0#0
        int 65536                                                                                tmp%0#0,65536
        +                                                                                        tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                           tmp%1#0
        itob                                                                                     aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        bitlen                                                                                   aggregate%bitlen%0#0
        v-store aggregate%bitlen%0#0
        v-load aggregate%bitlen%0#0                                                              aggregate%bitlen%0#0
        int 16                                                                                   aggregate%bitlen%0#0,16
        <=                                                                                       aggregate%no_overflow%0#0
        v-store aggregate%no_overflow%0#0
        v-load aggregate%no_overflow%0#0                                                         aggregate%no_overflow%0#0
        assert // overflow
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        extract 6 2                                                                              too_big#0
        v-store too_big#0
        // arc4_types/uint_overflow.py:13
        // assert too_big.bytes != b"\x00\x01", "this should not happen"
        v-load too_big#0                                                                         too_big#0
        byte 0x0001                                                                              too_big#0,0x0001
        !=                                                                                       tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                           tmp%3#0
        assert // this should not happen
        retsub


// test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32() -> void:
subroutine test_uint32:
    test_uint32_block@0:
        // arc4_types/uint_overflow.py:17
        // too_big = arc4.UInt32(Txn.num_app_args + 2**32)  # should fail here with overflow
        txn NumAppArgs                                                                           tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                           tmp%0#0
        int 4294967296                                                                           tmp%0#0,4294967296
        +                                                                                        tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                           tmp%1#0
        itob                                                                                     aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        bitlen                                                                                   aggregate%bitlen%0#0
        v-store aggregate%bitlen%0#0
        v-load aggregate%bitlen%0#0                                                              aggregate%bitlen%0#0
        int 32                                                                                   aggregate%bitlen%0#0,32
        <=                                                                                       aggregate%no_overflow%0#0
        v-store aggregate%no_overflow%0#0
        v-load aggregate%no_overflow%0#0                                                         aggregate%no_overflow%0#0
        assert // overflow
        v-load aggregate%val_as_bytes%0#0                                                        aggregate%val_as_bytes%0#0
        extract 4 4                                                                              too_big#0
        v-store too_big#0
        // arc4_types/uint_overflow.py:18
        // assert too_big.bytes != b"\x00\x00\x00\x01", "this should not happen"
        v-load too_big#0                                                                         too_big#0
        byte 0x00000001                                                                          too_big#0,0x00000001
        !=                                                                                       tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                           tmp%3#0
        assert // this should not happen
        retsub


