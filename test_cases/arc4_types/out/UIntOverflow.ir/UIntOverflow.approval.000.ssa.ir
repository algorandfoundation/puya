main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@16
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@2}
    block@2: // route_NoOp_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@3}
    block@3: // switch_case_default_L4
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@4 : block@10
    block@4: // call_NoOp_L4
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_uint8()void" => block@5, method "test_uint16()void" => block@6, method "test_uint32()void" => block@7, * => block@8}
    block@5: // test_uint8_route_L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]()
        goto block@9
    block@6: // test_uint16_route_L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]()
        goto block@9
    block@7: // test_uint32_route_L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]()
        goto block@9
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@13
    block@10: // create_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@11}
    block@11: // switch_case_default_L4
        goto block@12
    block@12: // switch_case_next_L4
        goto block@13
    block@13: // after_if_else_L4
        goto block@14
    block@14: // switch_case_next_L4
        goto block@15
    block@15: // switch_case_next_L4
        goto block@20
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@17, * => block@18}
    block@17: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        test_cases.arc4_types.uint_overflow.UIntOverflow.__algopy_default_create()
        exit 1u
    block@18: // switch_case_default_L4
        goto block@19
    block@19: // switch_case_next_L4
        goto block@20
    block@20: // after_if_else_L4
        exit 0u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]() -> void:
    block@0: // L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]() -> void:
    block@0: // L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]() -> void:
    block@0: // L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 256u)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(tmp%1#0)
        let too_big#0: Encoded(uint8) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x01)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16() -> void:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 65536u)
        let tmp%2#0: Encoded(uint16) = bytes_encode<uint16>(tmp%1#0)
        let too_big#0: Encoded(uint16) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x0001)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32() -> void:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 4294967296u)
        let tmp%2#0: Encoded(uint32) = bytes_encode<uint32>(tmp%1#0)
        let too_big#0: Encoded(uint32) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.__algopy_default_create() -> void:
    block@0: // L1
        return 