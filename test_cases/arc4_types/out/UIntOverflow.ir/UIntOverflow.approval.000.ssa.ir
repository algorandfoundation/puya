main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@7, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@19, * => block@20}
    block@1: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_uint8()void" => block@2, method "test_uint16()void" => block@3, method "test_uint32()void" => block@4, * => block@5}
    block@2: // test_uint8_route_L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]()
        goto block@6
    block@3: // test_uint16_route_L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]()
        goto block@6
    block@4: // test_uint32_route_L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]()
        goto block@6
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // __algopy_default_create_L1
        test_cases.arc4_types.uint_overflow.UIntOverflow.__algopy_default_create()
        exit 1u
    block@9: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L4
        goto block@20
    block@11: // switch_case_3_L4
        goto block@20
    block@12: // switch_case_4_L4
        goto block@20
    block@13: // switch_case_5_L4
        goto block@20
    block@14: // switch_case_6_L4
        goto block@20
    block@15: // switch_case_7_L4
        goto block@20
    block@16: // switch_case_8_L4
        goto block@20
    block@17: // switch_case_9_L4
        goto block@20
    block@18: // switch_case_10_L4
        goto block@20
    block@19: // switch_case_11_L4
        goto block@20
    block@20: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]() -> void:
    block@0: // L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]() -> void:
    block@0: // L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]() -> void:
    block@0: // L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32()
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 256u)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(tmp%1#0)
        let too_big#0: Encoded(uint8) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x01)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16() -> void:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 65536u)
        let tmp%2#0: Encoded(uint16) = bytes_encode<uint16>(tmp%1#0)
        let too_big#0: Encoded(uint16) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x0001)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32() -> void:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 4294967296u)
        let tmp%2#0: Encoded(uint32) = bytes_encode<uint32>(tmp%1#0)
        let too_big#0: Encoded(uint32) = tmp%2#0
        let tmp%3#0: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#0) // this should not happen
        return 

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.__algopy_default_create() -> void:
    block@0: // L1
        return 