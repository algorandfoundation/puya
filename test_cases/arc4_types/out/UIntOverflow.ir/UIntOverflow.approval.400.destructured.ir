main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_uint8()void" => block@6, method "test_uint16()void" => block@7, method "test_uint32()void" => block@8, * => block@21}
    block@6: // test_uint8_route_L5
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]()
        goto block@21
    block@7: // test_uint16_route_L10
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]()
        goto block@21
    block@8: // test_uint32_route_L15
        test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]()
        goto block@21
    block@17: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u
    block@21: // after_if_else_L4
        fail

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint8[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 256u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let too_big#0: Encoded(uint8) = ((extract 7 1) aggregate%val_as_bytes%0#0)
        let tmp%3#0: bool = (!= too_big#0 0x01)
        (assert tmp%3#0) // this should not happen
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint16[routing]() -> void:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 65536u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let too_big#0: Encoded(uint16) = ((extract 6 2) aggregate%val_as_bytes%0#0)
        let tmp%3#0: bool = (!= too_big#0 0x0001)
        (assert tmp%3#0) // this should not happen
        exit 1u

subroutine test_cases.arc4_types.uint_overflow.UIntOverflow.test_uint32[routing]() -> void:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 4294967296u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 32u)
        (assert aggregate%no_overflow%0#0) // overflow
        let too_big#0: Encoded(uint32) = ((extract 4 4) aggregate%val_as_bytes%0#0)
        let tmp%3#0: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#0) // this should not happen
        exit 1u