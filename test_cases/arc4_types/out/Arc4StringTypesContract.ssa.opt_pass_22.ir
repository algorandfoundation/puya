contract test_cases.arc4_types.string.Arc4StringTypesContract:
    program approval:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.approval_program() -> bool:
            block@0: // L7
                let len_16_bit%6#0: bytes = 0x0006
                let value#2: bytes = (concat len_16_bit%6#0 0x616263646566)
                let expr_value_trimmed%14#0: bytes = ((extract 2 0) value#2)
                let concatenated%7#0: bytes = (concat expr_value_trimmed%14#0 0x67)
                let len_%7#0: uint64 = (len concatenated%7#0)
                let len_bytes%7#0: bytes = (itob len_%7#0)
                let len_16_bit%7#0: bytes = ((extract 6 0) len_bytes%7#0)
                let value#3: bytes = (concat len_16_bit%7#0 concatenated%7#0)
                let tmp%15#0: bool = (== 0x000761626364656667 value#3)
                (assert tmp%15#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.arc4_types.string.Arc4StringTypesContract.clear_state_program() -> bool:
            block@0: // L41
                return 1u