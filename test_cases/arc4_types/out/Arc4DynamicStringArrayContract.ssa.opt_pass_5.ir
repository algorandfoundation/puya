contract test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract:
    program approval:
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.approval_program() -> bool:
            block@0: // L4
                let tmp%0#0: bool = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "xyz()string[]" => block@2, method "xyz_raw()string[]" => block@3, * => return 0u}
            block@2: // xyz_route_L5
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz()
                let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
                (log tmp%8#0)
                return 1u
            block@3: // xyz_raw_route_L13
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                (assert tmp%11#0) // is not creating
                let tmp%13#0: bytes = test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw()
                let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
                (log tmp%14#0)
                return 1u
            block@6: // bare_routing_L4
                let tmp%15#0: uint64 = (txn OnCompletion)
                goto tmp%15#0 ? block@10 : block@7
            block@7: // __algopy_default_create_L4
                let tmp%16#0: uint64 = (txn ApplicationID)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // is creating
                return 1u
            block@10: // after_if_else_L4
                return 0u
        
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz() -> bytes:
            block@0: // L5
                let tail_offset%0#0: uint64 = 9u
                let as_bytes%4#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%4#0)
                let result%1#0: bytes = (concat 0x0006 next_item_head%1#0)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 3u)
                let as_bytes%5#0: bytes = (itob tail_offset%1#0)
                let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%5#0)
                let result%2#0: bytes = (concat result%1#0 next_item_head%2#0)
                let result%3#0: bytes = (concat result%2#0 0x000158)
                let result%4#0: bytes = (concat result%3#0 0x000159)
                let result%5#0: bytes = (concat result%4#0 0x00015a)
                let array_data%0#0: bytes = (concat 0x0003 result%5#0)
                return array_data%0#0
        
        subroutine test_cases.arc4_types.dynamic_string_array.Arc4DynamicStringArrayContract.xyz_raw() -> bytes:
            block@0: // L13
                let next_item_head%1#0: bytes = 0x0009
                let result%4#0: bytes = (concat 0x0006 next_item_head%1#0)
                let tail_offset%1#0: uint64 = 12u
                let as_bytes%2#0: bytes = (itob tail_offset%1#0)
                let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let result%5#0: bytes = (concat result%4#0 next_item_head%2#0)
                let result%6#0: bytes = (concat result%5#0 0x000158)
                let result%7#0: bytes = (concat result%6#0 0x000159)
                let result%8#0: bytes = (concat result%7#0 0x00015a)
                let raw#0: bytes = (concat 0x0003 result%8#0)
                return raw#0
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u