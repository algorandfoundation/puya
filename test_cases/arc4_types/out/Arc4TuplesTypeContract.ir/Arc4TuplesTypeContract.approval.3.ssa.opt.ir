main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let encoded%0#0: bytes[1][] = encode<bytes[1]>(0x00)
        let len_%0#0: uint64 = (len encoded%0#0)
        let as_bytes%2#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 encoded%0#0)
        let tup#1: bytes = (concat 0x000003 concat_result%0#0)
        let item_start_offset%1#1: uint64 = (extract_uint16 tup#1 1u)
        let item_end_offset%1#1: uint64 = (len tup#1)
        let tmp%1#2: bytes = (substring3 tup#1 item_start_offset%1#1 item_end_offset%1#1)
        let tmp%2#2: bool = (== tmp%1#2 0x000100)
        (assert tmp%2#2)
        let array_length%0#0: uint64 = (extract_uint16 tmp%1#2 0u)
        (assert array_length%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = ((replace2 2) tmp%1#2 0x01)
        let data_up_to_item%1#0: bytes = (extract3 tup#1 0u item_start_offset%1#1)
        let tup#2: bytes = (concat data_up_to_item%1#0 updated_target%0#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 tup#2 1u)
        let item_end_offset%3#0: uint64 = (len tup#2)
        let tmp%4#2: bytes = (substring3 tup#2 item_start_offset%3#0 item_end_offset%3#0)
        let tmp%6#2: bool = (!= tmp%4#2 tmp%1#2)
        (assert tmp%6#2)
        return 1u