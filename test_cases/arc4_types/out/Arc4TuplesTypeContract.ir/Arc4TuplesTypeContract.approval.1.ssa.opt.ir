main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let length%0#0: uint64 = 5u
        let as_bytes%0#0: bytes[8] = (itob 5u)
        let length_uint16%0#0: bytes = 0x0005
        let encoded_value%0#0: bytes = 0x000568656c6c6f
        let length%1#0: uint64 = 5u
        let length_uint16%1#0: bytes = 0x0005
        let encoded_value%1#0: bytes = 0x0005776f726c64
        let encoded%0#0: Encoded((uint8)) = 0x01
        let encoded%1#0: Encoded((uint8,uint8)) = 0x0102
        let tail%0#0: bytes = 0x000568656c6c6f
        let data_length%0#0: uint64 = 7u
        let current_tail_offset%0#0: uint64 = 14u
        let as_bytes%2#0: bytes[8] = (itob 7u)
        let offset_as_uint16%0#0: bytes = 0x0007
        let encoded%2#0: Encoded((uint8,uint8,len+utf8[])) = 0x01020007
        let tail%1#0: bytes = 0x000568656c6c6f0005776f726c64
        let as_bytes%3#0: bytes[8] = (itob 14u)
        let offset_as_uint16%1#0: bytes = 0x000e
        let encoded%3#0: Encoded((uint8,uint8,len+utf8[],len+utf8[])) = 0x01020007000e
        let encoded%4#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = 0x01020007000eff
        let my_tuple#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = 0x01020007000eff000568656c6c6f0005776f726c64
        let tmp%0#0: bool = 1u
        let encoded_bool%0#0: bytes[1] = 0x80
        let encoded_bool%1#0: bytes[1] = 0x00
        let encoded_bool%2#0: bytes[1] = 0x80
        let encoded_bool%3#0: bytes[1] = 0x80
        let encoded_bool%4#0: bytes[1] = 0x80
        let encoded_bool%5#0: bytes[1] = 0x80
        let encoded_bool%6#0: bytes[1] = 0x00
        let encoded_bool%7#0: bytes[1] = 0x80
        let encoded_bool%8#0: bytes[1] = 0x80
        let encoded%6#0: Encoded((uint8)) = 0x04
        let encoded%7#0: Encoded((uint8,bool1)) = 0x0480
        let get_bit%0#0: uint64 = 0u
        let set_bit%0#0: Encoded((uint8,bool1)) = 0x0480
        let get_bit%1#0: uint64 = 1u
        let set_bit%1#0: Encoded((uint8,bool1)) = 0x04a0
        let get_bit%2#0: uint64 = 1u
        let set_bit%2#0: Encoded((uint8,bool1)) = 0x04b0
        let get_bit%3#0: uint64 = 1u
        let set_bit%3#0: Encoded((uint8,bool1)) = 0x04b8
        let get_bit%4#0: uint64 = 1u
        let set_bit%4#0: Encoded((uint8,bool1)) = 0x04bc
        let get_bit%5#0: uint64 = 0u
        let set_bit%5#0: Encoded((uint8,bool1)) = 0x04bc
        let get_bit%6#0: uint64 = 1u
        let set_bit%6#0: Encoded((uint8,bool1)) = 0x04bd
        let get_bit%7#0: uint64 = 1u
        let set_bit%7#0: bytes = 0x80
        let encoded%8#0: Encoded((uint8,bool1,bool1)) = 0x04bd80
        let encoded%9#0: Encoded((uint8,bool1,bool1,uint8)) = 0x04bd8010
        let boolean_packing#0: Encoded((uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)) = 0x04bd8010
        let tmp%1#0: bool = 1u
        let a#0: Encoded(uint8) = 0x04
        let get_bit%8#0: uint64 = 1u
        let b#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%9#0: uint64 = 0u
        let c#0: Encoded(bool8) = encode<bool8>(0u)
        let get_bit%10#0: uint64 = 1u
        let d#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%11#0: uint64 = 1u
        let e#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%12#0: uint64 = 1u
        let f#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%13#0: uint64 = 1u
        let g#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%14#0: uint64 = 0u
        let h#0: Encoded(bool8) = encode<bool8>(0u)
        let get_bit%15#0: uint64 = 1u
        let i#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%16#0: uint64 = 1u
        let j#0: Encoded(bool8) = encode<bool8>(1u)
        let k#0: Encoded(uint8) = 0x10
        let extract%2#0: bytes = 0x10
        let tmp%11#0: bool = 1u
        let tmp%12#0: uint64 = 4u
        let tmp%13#0: bool = 1u
        let tmp%14#0: bool = (!= b#0 0x00)
        goto tmp%14#0 ? block@1 : block@8
    block@1: // and_contd_L39
        let tmp%15#0: bool = (!= d#0 0x00)
        goto tmp%15#0 ? block@2 : block@8
    block@2: // and_contd_L39
        let tmp%16#0: bool = (!= e#0 0x00)
        goto tmp%16#0 ? block@3 : block@8
    block@3: // and_contd_L39
        let tmp%17#0: bool = (!= f#0 0x00)
        goto tmp%17#0 ? block@4 : block@8
    block@4: // and_contd_L39
        let tmp%18#0: bool = (!= g#0 0x00)
        goto tmp%18#0 ? block@5 : block@8
    block@5: // and_contd_L39
        let tmp%19#0: bool = (!= i#0 0x00)
        goto tmp%19#0 ? block@6 : block@8
    block@6: // and_contd_L39
        let tmp%20#0: bool = (!= j#0 0x00)
        goto tmp%20#0 ? block@7 : block@8
    block@7: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L39
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L39
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // b,d,e,f,g,i,j are true
        let tmp%21#0: bool = (!= c#0 0x00)
        goto tmp%21#0 ? block@11 : block@10
    block@10: // or_contd_L40
        let tmp%22#0: bool = (!= h#0 0x00)
        goto tmp%22#0 ? block@11 : block@12
    block@11: // bool_true_L40
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L40
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let or_result%0#2: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
        let tmp%23#0: bool = (! or_result%0#2)
        (assert tmp%23#0) // c and h are false
        let tmp%24#0: uint64 = 16u
        let tmp%25#0: bool = 1u
        let extract%3#0: bytes = 0x04
        let get_bit%17#0: uint64 = 1u
        let tmp%26#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%18#0: uint64 = 0u
        let tmp%27#0: Encoded(bool8) = encode<bool8>(0u)
        let get_bit%19#0: uint64 = 1u
        let tmp%28#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%20#0: uint64 = 1u
        let tmp%29#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%21#0: uint64 = 1u
        let tmp%30#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%22#0: uint64 = 1u
        let tmp%31#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%23#0: uint64 = 0u
        let tmp%32#0: Encoded(bool8) = encode<bool8>(0u)
        let get_bit%24#0: uint64 = 1u
        let tmp%33#0: Encoded(bool8) = encode<bool8>(1u)
        let get_bit%25#0: uint64 = 1u
        let tmp%34#0: Encoded(bool8) = encode<bool8>(1u)
        let extract%4#0: bytes = 0x10
        let encoded%11#0: Encoded((uint8)) = 0x04
        let encoded%12#0: Encoded((uint8,bool1)) = (concat 0x04 tmp%26#0)
        let get_bit%26#0: uint64 = (getbit tmp%27#0 0u)
        let set_bit%8#0: Encoded((uint8,bool1)) = (setbit encoded%12#0 9u get_bit%26#0)
        let get_bit%27#0: uint64 = (getbit tmp%28#0 0u)
        let set_bit%9#0: Encoded((uint8,bool1)) = (setbit set_bit%8#0 10u get_bit%27#0)
        let get_bit%28#0: uint64 = (getbit tmp%29#0 0u)
        let set_bit%10#0: Encoded((uint8,bool1)) = (setbit set_bit%9#0 11u get_bit%28#0)
        let get_bit%29#0: uint64 = (getbit tmp%30#0 0u)
        let set_bit%11#0: Encoded((uint8,bool1)) = (setbit set_bit%10#0 12u get_bit%29#0)
        let get_bit%30#0: uint64 = (getbit tmp%31#0 0u)
        let set_bit%12#0: Encoded((uint8,bool1)) = (setbit set_bit%11#0 13u get_bit%30#0)
        let get_bit%31#0: uint64 = (getbit tmp%32#0 0u)
        let set_bit%13#0: Encoded((uint8,bool1)) = (setbit set_bit%12#0 14u get_bit%31#0)
        let get_bit%32#0: uint64 = (getbit tmp%33#0 0u)
        let set_bit%14#0: Encoded((uint8,bool1)) = (setbit set_bit%13#0 15u get_bit%32#0)
        let get_bit%33#0: uint64 = (getbit tmp%34#0 0u)
        let set_bit%15#0: bytes = (setbit 0x00 0u get_bit%33#0)
        let encoded%13#0: Encoded((uint8,bool1,bool1)) = (concat set_bit%14#0 set_bit%15#0)
        let encoded%14#0: Encoded((uint8,bool1,bool1,uint8)) = (concat encoded%13#0 0x10)
        let tmp%35#0: bool = (== 0x04bd8010 encoded%14#0)
        (assert tmp%35#0)
        let a#1: Encoded(uint8) = 0x01
        let b#1: Encoded(uint8) = 0x02
        let extract_uint16%0#0: uint64 = 7u
        let extract_uint16%1#0: uint64 = 14u
        let c#1: Encoded(len+utf8[]) = 0x000568656c6c6f
        let extract_uint16%2#0: uint64 = 14u
        let len%0#0: uint64 = 21u
        let d#1: Encoded(len+utf8[]) = 0x0005776f726c64
        let e#1: Encoded(uint8) = 0xff
        let extract%3#1: bytes = 0x01
        let tmp%0#1: bool = 1u
        let extract%4#1: bytes = 0xff
        let tmp%1#1: bool = 1u
        let extract_uint16%3#0: uint64 = 14u
        let len%1#0: uint64 = 21u
        let substring3%2#0: bytes = 0x0005776f726c64
        let tmp%2#1: bool = 1u
        let tmp%3#1: uint64 = 1u
        let tmp%4#1: uint64 = 2u
        let tmp%5#1: uint64 = 3u
        let tmp%6#1: uint64 = 255u
        let total#1: uint64 = 258u
        let tmp%8#1: bytes = 0x68656c6c6f
        let tmp%9#1: bytes = 0x68656c6c6f20
        let tmp%10#1: bytes = 0x776f726c64
        let text#0: string = 0x68656c6c6f20776f726c64
        let length%0#1: uint64 = 11u
        let as_bytes%0#1: bytes[8] = (itob 11u)
        let length_uint16%0#1: bytes = 0x000b
        let concat#0: Encoded(len+utf8[]) = 0x000b68656c6c6f20776f726c64
        let tmp%38#0: bytes = 0x68656c6c6f20776f726c64
        let tmp%39#0: bool = 1u
        let tmp%40#0: bool = 1u
        let length%0#2: uint64 = 0u
        let as_bytes%0#2: bytes[8] = (itob 0u)
        let length_uint16%0#2: bytes = 0x0000
        let encoded_value%0#2: bytes = 0x0000
        let encoded%0#1: Encoded((uint8)) = 0x00
        let tail%0#1: bytes = 0x0000
        let as_bytes%1#1: bytes[8] = (itob 3u)
        let offset_as_uint16%0#1: bytes = 0x0003
        let encoded%1#1: Encoded((uint8,len+uint8[])) = 0x000003
        let tup#0: Encoded((uint8,len+uint8[])) = 0x0000030000
        let extract_uint16%0#1: uint64 = 3u
        let len%0#1: uint64 = 5u
        let substring3%0#1: bytes = 0x0000
        let encoded%3#1: Encoded((uint8)) = 0x00
        let encoded%4#1: Encoded(uint8[]) = 0x00
        let concat%0#0: bytes = 0x000000
        let extract_to_end%0#0: bytes = 0x00
        let len%1#1: uint64 = 1u
        let div_floor%0#0: uint64 = 1u
        let as_bytes%2#1: bytes[8] = (itob 1u)
        let as_u16_bytes%0#0: bytes = 0x0001
        let replace%0#0: bytes = 0x000100
        let item_offset%0#0: uint64 = 3u
        let data_up_to_item%0#0: bytes = 0x000003
        let tup#1: Encoded((uint8,len+uint8[])) = 0x000003000100
        let extract_uint16%1#1: uint64 = 3u
        let len%2#0: uint64 = 6u
        let substring3%1#1: bytes = 0x000100
        let encoded%5#1: Encoded((uint8)) = 0x00
        let len_u16%0#0: bytes = 0x0001
        let encoded%6#1: bytes = 0x000100
        let encoded%7#1: Encoded(len+uint8[]) = 0x000100
        let tmp%0#2: bool = 1u
        let extract_uint16%2#1: uint64 = 3u
        let len%3#0: uint64 = 6u
        let substring3%2#1: bytes = 0x000100
        let write_offset%0#0: uint64 = 0u
        let write_offset_with_length_header%0#0: uint64 = 2u
        let updated_array%0#0: bytes = 0x000101
        let item_offset%1#0: uint64 = 3u
        let data_up_to_item%1#0: bytes = 0x000003
        let tup#2: Encoded((uint8,len+uint8[])) = 0x000003000101
        let extract_uint16%3#1: uint64 = 3u
        let len%4#0: uint64 = 6u
        let substring3%3#0: bytes = 0x000101
        let extract_uint16%4#0: uint64 = 3u
        let len%5#0: uint64 = 6u
        let substring3%4#0: bytes = 0x000100
        let tmp%1#2: bool = 1u
        return 1u