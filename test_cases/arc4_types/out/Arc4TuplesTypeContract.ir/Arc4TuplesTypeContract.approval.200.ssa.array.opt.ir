main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let aggregate%length%0#1: uint64 = 5u
        let aggregate%as_bytes%0#1: bytes[8] = (itob 5u)
        let aggregate%length_uint16%0#1: bytes = 0x0005
        let c#1: Encoded(len+utf8[]) = 0x000568656c6c6f
        let aggregate%length%1#1: uint64 = 5u
        let aggregate%length_uint16%1#1: bytes = 0x0005
        let d#1: Encoded(len+utf8[]) = 0x0005776f726c64
        let aggregate%encoded%0#1: Encoded(uint8) = 0x01
        let aggregate%encoded%1#1: Encoded(uint8,uint8) = 0x0102
        let aggregate%tail%0#1: bytes = 0x000568656c6c6f
        let aggregate%data_length%0#1: uint64 = 7u
        let aggregate%current_tail_offset%0#1: uint64 = 14u
        let aggregate%as_bytes%2#1: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%0#1: bytes = 0x0007
        let aggregate%encoded%2#1: Encoded(uint8,uint8,(len+utf8[])) = 0x01020007
        let aggregate%tail%1#1: bytes = 0x000568656c6c6f0005776f726c64
        let aggregate%as_bytes%3#1: bytes[8] = (itob 14u)
        let aggregate%offset_as_uint16%1#1: bytes = 0x000e
        let aggregate%encoded%3#1: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[])) = 0x01020007000e
        let aggregate%encoded%4#1: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = 0x01020007000eff
        let my_tuple#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = 0x01020007000eff000568656c6c6f0005776f726c64
        let tmp%1#0: bool = 1u
        let aggregate%encoded_bool%0#1: bytes[1] = 0x80
        let aggregate%encoded_bool%1#1: bytes[1] = 0x00
        let aggregate%encoded%6#1: Encoded(uint8) = 0x04
        let aggregate%encoded%7#1: Encoded(uint8,bool1) = 0x0480
        let aggregate%get_bit%0#1: uint64 = 0u
        let aggregate%set_bit%0#1: Encoded(uint8,bool1) = 0x0480
        let aggregate%get_bit%1#1: uint64 = 1u
        let aggregate%set_bit%1#1: Encoded(uint8,bool1) = 0x04a0
        let aggregate%get_bit%2#1: uint64 = 1u
        let aggregate%set_bit%2#1: Encoded(uint8,bool1) = 0x04b0
        let aggregate%get_bit%3#1: uint64 = 1u
        let aggregate%set_bit%3#1: Encoded(uint8,bool1) = 0x04b8
        let aggregate%get_bit%4#1: uint64 = 1u
        let aggregate%set_bit%4#1: Encoded(uint8,bool1) = 0x04bc
        let aggregate%get_bit%5#1: uint64 = 0u
        let aggregate%set_bit%5#1: Encoded(uint8,bool1) = 0x04bc
        let aggregate%get_bit%6#1: uint64 = 1u
        let aggregate%set_bit%6#1: Encoded(uint8,bool1) = 0x04bd
        let aggregate%get_bit%7#1: uint64 = 1u
        let aggregate%set_bit%7#1: bytes = 0x80
        let aggregate%encoded%8#1: Encoded(uint8,bool1,bool1) = 0x04bd80
        let aggregate%encoded%9#1: Encoded(uint8,bool1,bool1,uint8) = 0x04bd8010
        let boolean_packing#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = 0x04bd8010
        let tmp%12#0: bool = 1u
        let a#0: Encoded(uint8) = 0x04
        let aggregate%get_bit%8#1: uint64 = 1u
        let b#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%9#1: uint64 = 0u
        let c#0: Encoded(bool8) = 0x00
        let aggregate%get_bit%10#1: uint64 = 1u
        let d#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%11#1: uint64 = 1u
        let e#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%12#1: uint64 = 1u
        let f#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%13#1: uint64 = 1u
        let g#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%14#1: uint64 = 0u
        let h#0: Encoded(bool8) = 0x00
        let aggregate%get_bit%15#1: uint64 = 1u
        let i#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%16#1: uint64 = 1u
        let j#0: Encoded(bool8) = 0x80
        let k#0: Encoded(uint8) = 0x10
        let aggregate%extract%2#1: bytes = 0x10
        let tmp%24#0: bool = 1u
        let tmp%25#0: uint64 = 4u
        let tmp%26#0: bool = 1u
        let tmp%28#0: bool = 1u
        let tmp%30#0: bool = 1u
        let tmp%32#0: bool = 1u
        let tmp%34#0: bool = 1u
        let tmp%36#0: bool = 1u
        let tmp%38#0: bool = 1u
        let tmp%40#0: bool = 1u
        let and_result%0#0: bool = 1u
        goto block@9
    block@9: // bool_merge_L39
        (assert and_result%0#0) // b,d,e,f,g,i,j are true
        let tmp%42#0: bool = 0u
        let tmp%44#0: bool = 0u
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let tmp%45#0: bool = (! or_result%0#1)
        (assert tmp%45#0) // c and h are false
        let tmp%46#0: uint64 = 16u
        let tmp%47#0: bool = 1u
        let aggregate%encoded%11#1: Encoded(uint8) = 0x04
        let aggregate%encoded%12#1: Encoded(uint8,bool1) = 0x0480
        let aggregate%get_bit%17#1: uint64 = 0u
        let aggregate%set_bit%8#1: Encoded(uint8,bool1) = 0x0480
        let aggregate%get_bit%18#1: uint64 = 1u
        let aggregate%set_bit%9#1: Encoded(uint8,bool1) = 0x04a0
        let aggregate%get_bit%19#1: uint64 = 1u
        let aggregate%set_bit%10#1: Encoded(uint8,bool1) = 0x04b0
        let aggregate%get_bit%20#1: uint64 = 1u
        let aggregate%set_bit%11#1: Encoded(uint8,bool1) = 0x04b8
        let aggregate%get_bit%21#1: uint64 = 1u
        let aggregate%set_bit%12#1: Encoded(uint8,bool1) = 0x04bc
        let aggregate%get_bit%22#1: uint64 = 0u
        let aggregate%set_bit%13#1: Encoded(uint8,bool1) = 0x04bc
        let aggregate%get_bit%23#1: uint64 = 1u
        let aggregate%set_bit%14#1: Encoded(uint8,bool1) = 0x04bd
        let aggregate%get_bit%24#1: uint64 = 1u
        let aggregate%set_bit%15#1: bytes = 0x80
        let aggregate%encoded%13#1: Encoded(uint8,bool1,bool1) = 0x04bd80
        let aggregate%encoded%14#1: Encoded(uint8,bool1,bool1,uint8) = 0x04bd8010
        let aggregate%encoded%15#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = 0x04bd8010
        let tmp%60#0: bool = 1u
        let aggregate%extract%3#1: bytes = 0x01
        let tmp%5#1: bool = 1u
        let aggregate%extract%4#1: bytes = 0xff
        let tmp%6#1: bool = 1u
        let aggregate%extract_uint16%0#1: uint64 = 14u
        let aggregate%len%0#1: uint64 = 21u
        let aggregate%substring3%0#1: bytes = 0x0005776f726c64
        let tmp%7#1: bool = 1u
        let tmp%8#1: uint64 = 1u
        let tmp%9#1: uint64 = 2u
        let tmp%10#1: uint64 = 3u
        let tmp%11#1: uint64 = 255u
        let total#1: uint64 = 258u
        let tmp%65#0: bool = 1u
        let aggregate%length%3#1: uint64 = 0u
        let aggregate%as_bytes%5#1: bytes[8] = (itob 0u)
        let aggregate%length_uint16%3#1: bytes = 0x0000
        let aggregate%encoded_value%3#1: bytes = 0x0000
        let aggregate%encoded%16#1: Encoded(uint8) = 0x00
        let aggregate%tail%2#1: bytes = 0x0000
        let aggregate%as_bytes%6#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%2#1: bytes = 0x0003
        let aggregate%encoded%17#1: Encoded(uint8,(len+uint8[])) = 0x000003
        let tup#0: Encoded(uint8,(len+uint8[])) = 0x0000030000
        let aggregate%extract_uint16%1#1: uint64 = 3u
        let aggregate%len%1#1: uint64 = 5u
        let aggregate%substring3%1#1: bytes = 0x0000
        let aggregate%encoded%19#1: Encoded(uint8) = 0x00
        let aggregate%encoded%20#1: Encoded(uint8[]) = 0x00
        let concat%0#0: Encoded(len+uint8[]) = 0x000000
        let extract_uint16%0#0: uint64 = 0u
        let add%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let as_u16_bytes%0#0: bytes = 0x0001
        let replace%0#0: bytes = 0x000100
        let aggregate%item_offset%0#1: uint64 = 3u
        let aggregate%data_up_to_item%0#1: bytes = 0x000003
        let tup#1: Encoded(uint8,(len+uint8[])) = 0x000003000100
        let aggregate%extract_uint16%3#1: uint64 = 3u
        let aggregate%len%3#1: uint64 = 6u
        let aggregate%substring3%3#1: bytes = 0x000100
        let aggregate%encoded%21#1: Encoded(uint8) = 0x00
        let aggregate%len_u16%0#1: bytes = 0x0001
        let aggregate%encoded%22#1: bytes = 0x000100
        let aggregate%encoded%23#1: Encoded(len+uint8[]) = 0x000100
        let tmp%3#2: bool = 1u
        let aggregate%extract_uint16%4#1: uint64 = 3u
        let aggregate%len%4#1: uint64 = 6u
        let aggregate%substring3%4#1: bytes = 0x000100
        let aggregate%write_offset%0#1: uint64 = 0u
        let aggregate%write_offset_with_length_header%0#1: uint64 = 2u
        let aggregate%updated_array%0#1: bytes = 0x000101
        let aggregate%item_offset%1#1: uint64 = 3u
        let aggregate%data_up_to_item%1#1: bytes = 0x000003
        let tup#2: Encoded(uint8,(len+uint8[])) = 0x000003000101
        let aggregate%extract_uint16%5#1: uint64 = 3u
        let aggregate%len%5#1: uint64 = 6u
        let aggregate%substring3%5#1: bytes = 0x000101
        let tmp%4#2: bool = 1u
        return 1u