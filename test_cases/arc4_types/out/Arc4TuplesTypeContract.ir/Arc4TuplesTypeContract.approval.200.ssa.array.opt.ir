main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let aggregate%length%0#0: uint64 = 5u
        let aggregate%as_bytes%0#0: bytes[8] = (itob 5u)
        let aggregate%length_uint16%0#0: bytes = 0x0005
        let c#1: Encoded(len+utf8[]) = 0x000568656c6c6f
        let aggregate%length%1#0: uint64 = 5u
        let aggregate%length_uint16%1#0: bytes = 0x0005
        let d#1: Encoded(len+utf8[]) = 0x0005776f726c64
        let aggregate%head%0#0: bytes = 0x01
        let aggregate%head%1#0: bytes = 0x0102
        let aggregate%as_bytes%2#0: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0007
        let aggregate%head%2#0: bytes = 0x01020007
        let aggregate%data_length%0#0: uint64 = 7u
        let aggregate%current_tail_offset%0#0: uint64 = 14u
        let aggregate%as_bytes%3#0: bytes[8] = (itob 14u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x000e
        let aggregate%head%3#0: bytes = 0x01020007000e
        let aggregate%head%4#0: bytes = 0x01020007000eff
        let aggregate%concat%0#0: bytes = 0x01020007000eff000568656c6c6f
        let my_tuple#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = 0x01020007000eff000568656c6c6f0005776f726c64
        let tmp%3#0: bool = 1u
        let aggregate%encoded_bool%0#0: bytes[1] = 0x80
        let aggregate%encoded_bool%1#0: bytes[1] = 0x00
        let aggregate%head%5#0: bytes = 0x04
        let aggregate%get_bit%0#0: uint64 = 0u
        let aggregate%set_bit%0#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%1#0: uint64 = 1u
        let aggregate%set_bit%1#0: Encoded(bool8) = 0xa0
        let aggregate%get_bit%2#0: uint64 = 1u
        let aggregate%set_bit%2#0: Encoded(bool8) = 0xb0
        let aggregate%get_bit%3#0: uint64 = 1u
        let aggregate%set_bit%3#0: Encoded(bool8) = 0xb8
        let aggregate%get_bit%4#0: uint64 = 1u
        let aggregate%set_bit%4#0: Encoded(bool8) = 0xbc
        let aggregate%get_bit%5#0: uint64 = 0u
        let aggregate%set_bit%5#0: Encoded(bool8) = 0xbc
        let aggregate%get_bit%6#0: uint64 = 1u
        let aggregate%set_bit%6#0: Encoded(bool8) = 0xbd
        let aggregate%head%6#0: bytes = 0x04bd
        let aggregate%head%7#0: bytes = 0x04bd80
        let boolean_packing#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = 0x04bd8010
        let tmp%14#0: bool = 1u
        let a#0: Encoded(uint8) = 0x04
        let aggregate%get_bit%7#0: uint64 = 1u
        let b#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%8#0: uint64 = 0u
        let c#0: Encoded(bool8) = 0x00
        let aggregate%get_bit%9#0: uint64 = 1u
        let d#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%10#0: uint64 = 1u
        let e#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%11#0: uint64 = 1u
        let f#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%12#0: uint64 = 1u
        let g#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%13#0: uint64 = 0u
        let h#0: Encoded(bool8) = 0x00
        let aggregate%get_bit%14#0: uint64 = 1u
        let i#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%15#0: uint64 = 1u
        let j#0: Encoded(bool8) = 0x80
        let k#0: Encoded(uint8) = 0x10
        let aggregate%extract%2#0: bytes = 0x10
        let tmp%26#0: bool = 1u
        let tmp%27#0: uint64 = 4u
        let tmp%28#0: bool = 1u
        let tmp%30#0: bool = 1u
        let tmp%32#0: bool = 1u
        let tmp%34#0: bool = 1u
        let tmp%36#0: bool = 1u
        let tmp%38#0: bool = 1u
        let tmp%40#0: bool = 1u
        let tmp%42#0: bool = 1u
        let and_result%0#0: bool = 1u
        goto block@9
    block@9: // bool_merge_L39
        (assert and_result%0#0) // b,d,e,f,g,i,j are true
        let tmp%44#0: bool = 0u
        let tmp%46#0: bool = 0u
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let tmp%47#0: bool = (! or_result%0#1)
        (assert tmp%47#0) // c and h are false
        let tmp%48#0: uint64 = 16u
        let tmp%49#0: bool = 1u
        let aggregate%head%9#0: bytes = 0x04
        let aggregate%get_bit%16#0: uint64 = 0u
        let aggregate%set_bit%7#0: Encoded(bool8) = 0x80
        let aggregate%get_bit%17#0: uint64 = 1u
        let aggregate%set_bit%8#0: Encoded(bool8) = 0xa0
        let aggregate%get_bit%18#0: uint64 = 1u
        let aggregate%set_bit%9#0: Encoded(bool8) = 0xb0
        let aggregate%get_bit%19#0: uint64 = 1u
        let aggregate%set_bit%10#0: Encoded(bool8) = 0xb8
        let aggregate%get_bit%20#0: uint64 = 1u
        let aggregate%set_bit%11#0: Encoded(bool8) = 0xbc
        let aggregate%get_bit%21#0: uint64 = 0u
        let aggregate%set_bit%12#0: Encoded(bool8) = 0xbc
        let aggregate%get_bit%22#0: uint64 = 1u
        let aggregate%set_bit%13#0: Encoded(bool8) = 0xbd
        let aggregate%head%10#0: bytes = 0x04bd
        let aggregate%head%11#0: bytes = 0x04bd80
        let aggregate%head%12#0: bytes = 0x04bd8010
        let tmp%62#0: bool = 1u
        let aggregate%extract%3#0: bytes = 0x01
        let tmp%5#1: bool = 1u
        let aggregate%extract%4#0: bytes = 0xff
        let tmp%6#1: bool = 1u
        let aggregate%extract_uint16%0#0: uint64 = 14u
        let aggregate%len%0#0: uint64 = 21u
        let aggregate%substring3%0#0: bytes = 0x0005776f726c64
        let tmp%7#1: bool = 1u
        let tmp%8#1: uint64 = 1u
        let tmp%9#1: uint64 = 2u
        let tmp%10#1: uint64 = 3u
        let tmp%11#1: uint64 = 255u
        let total#1: uint64 = 258u
        let tmp%67#0: bool = 1u
        let aggregate%length%2#0: uint64 = 0u
        let aggregate%as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%length_uint16%2#0: bytes = 0x0000
        let aggregate%encoded_value%2#0: bytes = 0x0000
        let aggregate%head%13#0: bytes = 0x00
        let aggregate%as_bytes%5#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x0003
        let aggregate%head%14#0: bytes = 0x000003
        let tup#0: Encoded(uint8,(len+uint8[])) = 0x0000030000
        let aggregate%extract_uint16%1#0: uint64 = 3u
        let aggregate%len%1#0: uint64 = 5u
        let aggregate%substring3%1#0: bytes = 0x0000
        let aggregate%head%15#0: bytes = 0x00
        let aggregate%concat%3#0: Encoded(len+uint8[]) = 0x000000
        let aggregate%extract_uint16%2#0: uint64 = 0u
        let aggregate%add%0#0: uint64 = 1u
        let aggregate%as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%as_u16_bytes%0#0: bytes = 0x0001
        let aggregate%replace%0#0: bytes = 0x000100
        let aggregate%item_offset%0#0: uint64 = 3u
        let aggregate%data_up_to_item%0#0: bytes = 0x000003
        let tup#1: Encoded(uint8,(len+uint8[])) = 0x000003000100
        let aggregate%extract_uint16%4#0: uint64 = 3u
        let aggregate%len%3#0: uint64 = 6u
        let aggregate%substring3%3#0: bytes = 0x000100
        let aggregate%len_u16%0#0: bytes = 0x0001
        let aggregate%head%16#0: bytes = 0x000100
        let tmp%4#2: bool = 1u
        let aggregate%extract_uint16%5#0: uint64 = 3u
        let aggregate%len%4#0: uint64 = 6u
        let aggregate%substring3%4#0: bytes = 0x000100
        let aggregate%write_offset%0#0: uint64 = 0u
        let aggregate%write_offset_with_length_header%0#0: uint64 = 2u
        let aggregate%updated_array%0#0: bytes = 0x000101
        let aggregate%item_offset%1#0: uint64 = 3u
        let aggregate%data_up_to_item%1#0: bytes = 0x000003
        let tup#2: Encoded(uint8,(len+uint8[])) = 0x000003000101
        let aggregate%extract_uint16%6#0: uint64 = 3u
        let aggregate%len%5#0: uint64 = 6u
        let aggregate%substring3%5#0: bytes = 0x000101
        let tmp%5#2: bool = 1u
        return 1u