main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let aggregate%length%0#1: uint64 = (len 0x68656c6c6f)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x68656c6c6f)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let c#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x776f726c64)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x776f726c64)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let d#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%encoded%0#1: Encoded(uint8) = (concat 0x 0x01)
        let aggregate%encoded%1#1: Encoded(uint8,uint8) = (concat aggregate%encoded%0#1 0x02)
        let aggregate%tail%0#1: bytes = (concat 0x c#1)
        let aggregate%data_length%0#1: uint64 = (len c#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 7u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%2#1: Encoded(uint8,uint8,(len+utf8[])) = (concat aggregate%encoded%1#1 aggregate%offset_as_uint16%0#1)
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 d#1)
        let aggregate%data_length%1#1: uint64 = (len d#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%3#1: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%4#1: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = (concat aggregate%encoded%3#1 0xff)
        let aggregate%encoded%5#1: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = (concat aggregate%encoded%4#1 aggregate%tail%1#1)
        let my_tuple#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = aggregate%encoded%5#1
        let tmp%1#0: bool = (== my_tuple#0 0x01020007000eff000568656c6c6f0005776f726c64)
        (assert tmp%1#0)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let aggregate%encoded%6#1: Encoded(uint8) = (concat 0x 0x04)
        let aggregate%encoded%7#1: Encoded(uint8,bool1) = (concat aggregate%encoded%6#1 tmp%2#0)
        let aggregate%get_bit%0#1: uint64 = (getbit tmp%3#0 0u)
        let aggregate%set_bit%0#1: Encoded(uint8,bool1) = (setbit aggregate%encoded%7#1 9u aggregate%get_bit%0#1)
        let aggregate%get_bit%1#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%1#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%0#1 10u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%2#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%1#1 11u aggregate%get_bit%2#1)
        let aggregate%get_bit%3#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%3#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%2#1 12u aggregate%get_bit%3#1)
        let aggregate%get_bit%4#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%4#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%3#1 13u aggregate%get_bit%4#1)
        let aggregate%get_bit%5#1: uint64 = (getbit tmp%3#0 0u)
        let aggregate%set_bit%5#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%4#1 14u aggregate%get_bit%5#1)
        let aggregate%get_bit%6#1: uint64 = (getbit tmp%2#0 0u)
        let aggregate%set_bit%6#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%5#1 15u aggregate%get_bit%6#1)
        let aggregate%encoded%8#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = (concat aggregate%set_bit%6#1 tmp%2#0)
        let aggregate%encoded%9#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = (concat aggregate%encoded%8#1 0x10)
        let aggregate%encoded%10#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = (concat aggregate%encoded%9#1 0x)
        let boolean_packing#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%encoded%10#1
        let tmp%12#0: bool = (== boolean_packing#0 0x04bd8010)
        (assert tmp%12#0)
        let aggregate%extract%0#1: bytes = (extract3 boolean_packing#0 0u 1u)
        let aggregate%get_bit%7#1: uint64 = (getbit boolean_packing#0 8u)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%7#1)
        let aggregate%get_bit%8#1: uint64 = (getbit boolean_packing#0 9u)
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%8#1)
        let aggregate%get_bit%9#1: uint64 = (getbit boolean_packing#0 10u)
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%9#1)
        let aggregate%get_bit%10#1: uint64 = (getbit boolean_packing#0 11u)
        let aggregate%encoded_bool%5#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%10#1)
        let aggregate%get_bit%11#1: uint64 = (getbit boolean_packing#0 12u)
        let aggregate%encoded_bool%6#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%11#1)
        let aggregate%get_bit%12#1: uint64 = (getbit boolean_packing#0 13u)
        let aggregate%encoded_bool%7#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%12#1)
        let aggregate%get_bit%13#1: uint64 = (getbit boolean_packing#0 14u)
        let aggregate%encoded_bool%8#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%13#1)
        let aggregate%get_bit%14#1: uint64 = (getbit boolean_packing#0 15u)
        let aggregate%encoded_bool%9#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%14#1)
        let aggregate%get_bit%15#1: uint64 = (getbit boolean_packing#0 16u)
        let aggregate%encoded_bool%10#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%15#1)
        let aggregate%extract%1#1: bytes = (extract3 boolean_packing#0 3u 1u)
        let (a#0: Encoded(uint8), b#0: Encoded(bool8), c#0: Encoded(bool8), d#0: Encoded(bool8), e#0: Encoded(bool8), f#0: Encoded(bool8), g#0: Encoded(bool8), h#0: Encoded(bool8), i#0: Encoded(bool8), j#0: Encoded(bool8), k#0: Encoded(uint8)) = (aggregate%extract%0#1, aggregate%encoded_bool%2#1, aggregate%encoded_bool%3#1, aggregate%encoded_bool%4#1, aggregate%encoded_bool%5#1, aggregate%encoded_bool%6#1, aggregate%encoded_bool%7#1, aggregate%encoded_bool%8#1, aggregate%encoded_bool%9#1, aggregate%encoded_bool%10#1, aggregate%extract%1#1)
        let aggregate%extract%2#1: bytes = (extract3 boolean_packing#0 3u 1u)
        let tuple_item%0#0: Encoded(uint8) = aggregate%extract%2#1
        let tmp%24#0: bool = (b== tuple_item%0#0 k#0)
        (assert tmp%24#0)
        let tmp%25#0: uint64 = (btoi a#0)
        let tmp%26#0: bool = (== tmp%25#0 4u)
        (assert tmp%26#0) // a is 4
        let tmp%28#0: bool = (!= b#0 tmp%3#0)
        goto tmp%28#0 ? block@1 : block@8
    block@1: // and_contd_L39
        let tmp%30#0: bool = (!= d#0 tmp%3#0)
        goto tmp%30#0 ? block@2 : block@8
    block@2: // and_contd_L39
        let tmp%32#0: bool = (!= e#0 tmp%3#0)
        goto tmp%32#0 ? block@3 : block@8
    block@3: // and_contd_L39
        let tmp%34#0: bool = (!= f#0 tmp%3#0)
        goto tmp%34#0 ? block@4 : block@8
    block@4: // and_contd_L39
        let tmp%36#0: bool = (!= g#0 tmp%3#0)
        goto tmp%36#0 ? block@5 : block@8
    block@5: // and_contd_L39
        let tmp%38#0: bool = (!= i#0 tmp%3#0)
        goto tmp%38#0 ? block@6 : block@8
    block@6: // and_contd_L39
        let tmp%40#0: bool = (!= j#0 tmp%3#0)
        goto tmp%40#0 ? block@7 : block@8
    block@7: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L39
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L39
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // b,d,e,f,g,i,j are true
        let tmp%42#0: bool = (!= c#0 tmp%3#0)
        goto tmp%42#0 ? block@11 : block@10
    block@10: // or_contd_L40
        let tmp%44#0: bool = (!= h#0 tmp%3#0)
        goto tmp%44#0 ? block@11 : block@12
    block@11: // bool_true_L40
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L40
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let or_result%0#2: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
        let tmp%45#0: bool = (! or_result%0#2)
        (assert tmp%45#0) // c and h are false
        let tmp%46#0: uint64 = (btoi k#0)
        let tmp%47#0: bool = (== tmp%46#0 16u)
        (assert tmp%47#0) // k is 16
        let aggregate%encoded%11#1: Encoded(uint8) = (concat 0x a#0)
        let aggregate%encoded%12#1: Encoded(uint8,bool1) = (concat aggregate%encoded%11#1 b#0)
        let aggregate%get_bit%16#1: uint64 = (getbit c#0 0u)
        let aggregate%set_bit%7#1: Encoded(uint8,bool1) = (setbit aggregate%encoded%12#1 9u aggregate%get_bit%16#1)
        let aggregate%get_bit%17#1: uint64 = (getbit d#0 0u)
        let aggregate%set_bit%8#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%7#1 10u aggregate%get_bit%17#1)
        let aggregate%get_bit%18#1: uint64 = (getbit e#0 0u)
        let aggregate%set_bit%9#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%8#1 11u aggregate%get_bit%18#1)
        let aggregate%get_bit%19#1: uint64 = (getbit f#0 0u)
        let aggregate%set_bit%10#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%9#1 12u aggregate%get_bit%19#1)
        let aggregate%get_bit%20#1: uint64 = (getbit g#0 0u)
        let aggregate%set_bit%11#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%10#1 13u aggregate%get_bit%20#1)
        let aggregate%get_bit%21#1: uint64 = (getbit h#0 0u)
        let aggregate%set_bit%12#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%11#1 14u aggregate%get_bit%21#1)
        let aggregate%get_bit%22#1: uint64 = (getbit i#0 0u)
        let aggregate%set_bit%13#1: Encoded(uint8,bool1) = (setbit aggregate%set_bit%12#1 15u aggregate%get_bit%22#1)
        let aggregate%encoded%13#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = (concat aggregate%set_bit%13#1 j#0)
        let aggregate%encoded%14#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = (concat aggregate%encoded%13#1 k#0)
        let aggregate%encoded%15#1: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = (concat aggregate%encoded%14#1 0x)
        let tmp%59#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = aggregate%encoded%15#1
        let tmp%60#0: bool = (== boolean_packing#0 tmp%59#0)
        (assert tmp%60#0)
        let aggregate%extract%3#1: bytes = (extract3 my_tuple#0 0u 1u)
        let tuple_item%0#1: Encoded(uint8) = aggregate%extract%3#1
        let tmp%5#1: bool = (b== tuple_item%0#1 0x01)
        (assert tmp%5#1)
        let aggregate%extract%4#1: bytes = (extract3 my_tuple#0 6u 1u)
        let tuple_item%1#0: Encoded(uint8) = aggregate%extract%4#1
        let tmp%6#1: bool = (b== tuple_item%1#0 0xff)
        (assert tmp%6#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 my_tuple#0 4u)
        let aggregate%len%0#1: uint64 = (len my_tuple#0)
        let aggregate%substring3%0#1: bytes = (substring3 my_tuple#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%2#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let tmp%7#1: bool = (== tuple_item%2#0 d#1)
        (assert tmp%7#1)
        let tmp%8#1: uint64 = (btoi 0x01)
        let tmp%9#1: uint64 = (btoi 0x02)
        let tmp%10#1: uint64 = (+ tmp%8#1 tmp%9#1)
        let tmp%11#1: uint64 = (btoi 0xff)
        let total#1: uint64 = (+ tmp%10#1 tmp%11#1)
        let aggregate%length%2#1: uint64 = (len 0x68656c6c6f20776f726c64)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x68656c6c6f20776f726c64)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let concat#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let tmp%65#0: bool = (== total#1 258u)
        (assert tmp%65#0)
        let aggregate%length%3#1: uint64 = (len 0x)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let tmp%0#2: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%encoded%16#1: Encoded(uint8) = (concat 0x 0x00)
        let aggregate%tail%2#1: bytes = (concat 0x tmp%0#2)
        let aggregate%data_length%2#1: uint64 = (len tmp%0#2)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 3u aggregate%data_length%2#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%17#1: Encoded(uint8,(len+uint8[])) = (concat aggregate%encoded%16#1 aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%18#1: Encoded(uint8,(len+uint8[])) = (concat aggregate%encoded%17#1 aggregate%tail%2#1)
        let tup#0: Encoded(uint8,(len+uint8[])) = aggregate%encoded%18#1
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%1#1: uint64 = (len tup#0)
        let aggregate%substring3%1#1: bytes = (substring3 tup#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tuple_item%0#2: Encoded(len+uint8[]) = aggregate%substring3%1#1
        let aggregate%encoded%19#1: Encoded(uint8) = (concat 0x 0x00)
        let aggregate%encoded%20#1: Encoded(uint8[]) = (concat aggregate%encoded%19#1 0x)
        let tmp%2#2: Encoded(uint8[]) = aggregate%encoded%20#1
        let concat%0#0: Encoded(len+uint8[]) = (concat tuple_item%0#2 tmp%2#2) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%0#2 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%len%2#1: uint64 = (len tup#0)
        let aggregate%substring3%2#1: bytes = (substring3 tup#0 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 tup#0 1u)
        let aggregate%data_up_to_item%0#1: bytes = (extract3 tup#0 0u aggregate%item_offset%0#1)
        let aggregate%updated_data%0#1: bytes = (concat aggregate%data_up_to_item%0#1 replace%0#0)
        let tup#1: Encoded(uint8,(len+uint8[])) = aggregate%updated_data%0#1
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 tup#1 1u)
        let aggregate%len%3#1: uint64 = (len tup#1)
        let aggregate%substring3%3#1: bytes = (substring3 tup#1 aggregate%extract_uint16%3#1 aggregate%len%3#1)
        let tuple_item%1#1: Encoded(len+uint8[]) = aggregate%substring3%3#1
        let aggregate%encoded%21#1: Encoded(uint8) = (concat 0x 0x00)
        let aggregate%as_bytes%7#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%22#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%21#1)
        let aggregate%encoded%23#1: Encoded(len+uint8[]) = (concat aggregate%encoded%22#1 0x)
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%encoded%23#1
        let tmp%3#2: bool = (== tuple_item%1#1 encoded_array%0#0)
        (assert tmp%3#2)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 tup#1 1u)
        let aggregate%len%4#1: uint64 = (len tup#1)
        let aggregate%substring3%4#1: bytes = (substring3 tup#1 aggregate%extract_uint16%4#1 aggregate%len%4#1)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 1u) // on error: index access is out of bounds
        let aggregate%write_offset%0#1: uint64 = (* 0u 1u)
        let aggregate%write_offset_with_length_header%0#1: uint64 = (+ aggregate%write_offset%0#1 2u)
        let aggregate%updated_array%0#1: bytes = (replace3 aggregate%substring3%4#1 aggregate%write_offset_with_length_header%0#1 0x01)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 tup#1 1u)
        let aggregate%data_up_to_item%1#1: bytes = (extract3 tup#1 0u aggregate%item_offset%1#1)
        let aggregate%updated_data%1#1: bytes = (concat aggregate%data_up_to_item%1#1 aggregate%updated_array%0#1)
        let tup#2: Encoded(uint8,(len+uint8[])) = aggregate%updated_data%1#1
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 tup#2 1u)
        let aggregate%len%5#1: uint64 = (len tup#2)
        let aggregate%substring3%5#1: bytes = (substring3 tup#2 aggregate%extract_uint16%5#1 aggregate%len%5#1)
        let tuple_item%2#1: Encoded(len+uint8[]) = aggregate%substring3%5#1
        let tmp%4#2: bool = (!= tuple_item%2#1 tuple_item%1#1)
        (assert tmp%4#2)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1