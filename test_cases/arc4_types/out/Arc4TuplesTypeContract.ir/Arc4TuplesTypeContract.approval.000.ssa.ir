main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let encoded%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x68656c6c6f)
        let encoded%1#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x776f726c64)
        let tmp%0#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = bytes_encode<(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)>(0x01, 0x02, encoded%0#0, encoded%1#0, 0xff)
        let my_tuple#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = tmp%0#0
        let reinterpret_Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)%0#0: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8) = 0x01020007000eff000568656c6c6f0005776f726c64
        let tmp%1#0: bool = (== my_tuple#0 reinterpret_Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)%0#0)
        (assert tmp%1#0)
        let tmp%2#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%5#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%6#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%7#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%8#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%9#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%10#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%11#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = bytes_encode<(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)>(0x04, tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0, tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, 0x10)
        let boolean_packing#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = tmp%11#0
        let tmp%12#0: bool = (== boolean_packing#0 0x04bd8010)
        (assert tmp%12#0)
        let (tmp%13#0: Encoded(uint8), tmp%14#0: Encoded(bool8), tmp%15#0: Encoded(bool8), tmp%16#0: Encoded(bool8), tmp%17#0: Encoded(bool8), tmp%18#0: Encoded(bool8), tmp%19#0: Encoded(bool8), tmp%20#0: Encoded(bool8), tmp%21#0: Encoded(bool8), tmp%22#0: Encoded(bool8), tmp%23#0: Encoded(uint8)) = decode_bytes<(Encoded(uint8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(uint8),)>(boolean_packing#0)
        let a#0: Encoded(uint8) = tmp%13#0
        let b#0: Encoded(bool8) = tmp%14#0
        let c#0: Encoded(bool8) = tmp%15#0
        let d#0: Encoded(bool8) = tmp%16#0
        let e#0: Encoded(bool8) = tmp%17#0
        let f#0: Encoded(bool8) = tmp%18#0
        let g#0: Encoded(bool8) = tmp%19#0
        let h#0: Encoded(bool8) = tmp%20#0
        let i#0: Encoded(bool8) = tmp%21#0
        let j#0: Encoded(bool8) = tmp%22#0
        let k#0: Encoded(uint8) = tmp%23#0
        let tuple_item%0#0: Encoded(uint8) = extract_value(boolean_packing#0, 10)
        let reinterpret_biguint%0#0: biguint = tuple_item%0#0
        let reinterpret_biguint%1#0: biguint = k#0
        let tmp%24#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%24#0)
        let tmp%25#0: uint64 = decode_bytes<uint64>(a#0)
        let tmp%26#0: bool = (== tmp%25#0 4u)
        (assert tmp%26#0) // a is 4
        let tmp%27#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%28#0: bool = (!= b#0 tmp%27#0)
        goto tmp%28#0 ? block@1 : block@8
    block@1: // and_contd_L39
        let tmp%29#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%30#0: bool = (!= d#0 tmp%29#0)
        goto tmp%30#0 ? block@2 : block@8
    block@2: // and_contd_L39
        let tmp%31#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%32#0: bool = (!= e#0 tmp%31#0)
        goto tmp%32#0 ? block@3 : block@8
    block@3: // and_contd_L39
        let tmp%33#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%34#0: bool = (!= f#0 tmp%33#0)
        goto tmp%34#0 ? block@4 : block@8
    block@4: // and_contd_L39
        let tmp%35#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%36#0: bool = (!= g#0 tmp%35#0)
        goto tmp%36#0 ? block@5 : block@8
    block@5: // and_contd_L39
        let tmp%37#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%38#0: bool = (!= i#0 tmp%37#0)
        goto tmp%38#0 ? block@6 : block@8
    block@6: // and_contd_L39
        let tmp%39#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%40#0: bool = (!= j#0 tmp%39#0)
        goto tmp%40#0 ? block@7 : block@8
    block@7: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L39
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L39
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // b,d,e,f,g,i,j are true
        let tmp%41#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%42#0: bool = (!= c#0 tmp%41#0)
        goto tmp%42#0 ? block@11 : block@10
    block@10: // or_contd_L40
        let tmp%43#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%44#0: bool = (!= h#0 tmp%43#0)
        goto tmp%44#0 ? block@11 : block@12
    block@11: // bool_true_L40
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L40
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let or_result%0#2: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
        let tmp%45#0: bool = (! or_result%0#2)
        (assert tmp%45#0) // c and h are false
        let tmp%46#0: uint64 = decode_bytes<uint64>(k#0)
        let tmp%47#0: bool = (== tmp%46#0 16u)
        (assert tmp%47#0) // k is 16
        let (tmp%48#0: Encoded(uint8), tmp%49#0: Encoded(bool8), tmp%50#0: Encoded(bool8), tmp%51#0: Encoded(bool8), tmp%52#0: Encoded(bool8), tmp%53#0: Encoded(bool8), tmp%54#0: Encoded(bool8), tmp%55#0: Encoded(bool8), tmp%56#0: Encoded(bool8), tmp%57#0: Encoded(bool8), tmp%58#0: Encoded(uint8)) = decode_bytes<(Encoded(uint8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(bool8),Encoded(uint8),)>(boolean_packing#0)
        let tmp%59#0: Encoded(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8) = bytes_encode<(uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)>(tmp%48#0, tmp%49#0, tmp%50#0, tmp%51#0, tmp%52#0, tmp%53#0, tmp%54#0, tmp%55#0, tmp%56#0, tmp%57#0, tmp%58#0)
        let tmp%60#0: bool = (== boolean_packing#0 tmp%59#0)
        (assert tmp%60#0)
        let (tmp%61#0: uint64, tmp%62#0: Encoded(len+utf8[])) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
        let total#0: uint64 = tmp%61#0
        let concat#0: Encoded(len+utf8[]) = tmp%62#0
        let tmp%63#0: string = decode_bytes<string>(concat#0)
        let tmp%64#0: bool = (== tmp%63#0 "hello world")
        (assert tmp%64#0)
        let tmp%65#0: bool = (== total#0 258u)
        (assert tmp%65#0)
        test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy()
        return 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: Encoded(uint8,uint8,(len+utf8[]),(len+utf8[]),uint8)) -> <uint64, Encoded(len+utf8[])>:
    block@0: // L56
        let (tmp%0#0: Encoded(uint8), tmp%1#0: Encoded(uint8), tmp%2#0: Encoded(len+utf8[]), tmp%3#0: Encoded(len+utf8[]), tmp%4#0: Encoded(uint8)) = decode_bytes<(Encoded(uint8),Encoded(uint8),Encoded(len+utf8[]),Encoded(len+utf8[]),Encoded(uint8),)>(test_tuple#0)
        let a#0: Encoded(uint8) = tmp%0#0
        let b#0: Encoded(uint8) = tmp%1#0
        let c#0: Encoded(len+utf8[]) = tmp%2#0
        let d#0: Encoded(len+utf8[]) = tmp%3#0
        let e#0: Encoded(uint8) = tmp%4#0
        let tuple_item%0#0: Encoded(uint8) = extract_value(test_tuple#0, 0)
        let reinterpret_biguint%0#0: biguint = tuple_item%0#0
        let reinterpret_biguint%1#0: biguint = a#0
        let tmp%5#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%5#0)
        let tuple_item%1#0: Encoded(uint8) = extract_value(test_tuple#0, -1)
        let reinterpret_biguint%2#0: biguint = tuple_item%1#0
        let reinterpret_biguint%3#0: biguint = e#0
        let tmp%6#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%6#0)
        let tuple_item%2#0: Encoded(len+utf8[]) = extract_value(test_tuple#0, -2)
        let tmp%7#0: bool = (== tuple_item%2#0 d#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = decode_bytes<uint64>(a#0)
        let tmp%9#0: uint64 = decode_bytes<uint64>(b#0)
        let tmp%10#0: uint64 = (+ tmp%8#0 tmp%9#0)
        let tmp%11#0: uint64 = decode_bytes<uint64>(e#0)
        let tmp%12#0: uint64 = (+ tmp%10#0 tmp%11#0)
        let total#0: uint64 = tmp%12#0
        let tmp%13#0: string = decode_bytes<string>(c#0)
        let tmp%14#0: bytes = (concat tmp%13#0 " ")
        let tmp%15#0: string = decode_bytes<string>(d#0)
        let tmp%16#0: bytes = (concat tmp%14#0 tmp%15#0)
        let text#0: string = tmp%16#0
        let tmp%17#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(text#0)
        return total#0 tmp%17#0

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
    block@0: // L69
        let tmp%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x)
        let tmp%1#0: Encoded(uint8,(len+uint8[])) = bytes_encode<(uint8,(len+uint8[]))>(0x00, tmp%0#0)
        let tup#0: Encoded(uint8,(len+uint8[])) = tmp%1#0
        let tuple_item%0#0: Encoded(len+uint8[]) = extract_value(tup#0, 1)
        let tmp%2#0: Encoded(uint8[]) = bytes_encode<uint8[]>(0x00)
        let concat%0#0: Encoded(len+uint8[]) = (concat tuple_item%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let updated_tuple%0#0: Encoded(uint8,(len+uint8[])) = replace_value(tup#0, 1, as_Encoded(len+uint8[])%0#0)
        let tup#1: Encoded(uint8,(len+uint8[])) = updated_tuple%0#0
        let tuple_item%1#0: Encoded(len+uint8[]) = extract_value(tup#1, 1)
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x00)
        let tmp%3#0: bool = (== tuple_item%1#0 encoded_array%0#0)
        (assert tmp%3#0)
        let tup2#0: Encoded(uint8,(len+uint8[])) = tup#1
        let updated_tuple%1#0: Encoded(uint8,(len+uint8[])) = replace_value(tup#1, 1, 0u, 0x01)
        let tup#2: Encoded(uint8,(len+uint8[])) = updated_tuple%1#0
        let tuple_item%2#0: Encoded(len+uint8[]) = extract_value(tup#2, 1)
        let tuple_item%3#0: Encoded(len+uint8[]) = extract_value(tup2#0, 1)
        let tmp%4#0: bool = (!= tuple_item%2#0 tuple_item%3#0)
        (assert tmp%4#0)
        return 