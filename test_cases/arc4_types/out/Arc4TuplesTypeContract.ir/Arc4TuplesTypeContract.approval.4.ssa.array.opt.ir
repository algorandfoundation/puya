main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let b#0: Encoded(bool8) = 0x80
        let c#0: Encoded(bool8) = 0x00
        let d#0: Encoded(bool8) = 0x80
        let e#0: Encoded(bool8) = 0x80
        let f#0: Encoded(bool8) = 0x80
        let g#0: Encoded(bool8) = 0x80
        let h#0: Encoded(bool8) = 0x00
        let i#0: Encoded(bool8) = 0x80
        let j#0: Encoded(bool8) = 0x80
        let tmp%14#0: bool = 1u
        let tmp%15#0: bool = 1u
        let tmp%16#0: bool = 1u
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        let tmp%19#0: bool = 1u
        let tmp%20#0: bool = 1u
        let and_result%0#0: bool = 1u
        goto block@9
    block@9: // bool_merge_L39
        (assert and_result%0#0) // b,d,e,f,g,i,j are true
        let tmp%21#0: bool = 0u
        let tmp%22#0: bool = 0u
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let tmp%23#0: bool = (! or_result%0#1)
        (assert tmp%23#0) // c and h are false
        let array%encoded_bool%9#1: bytes[1] = 0x80
        let array%encoded_bool%10#1: bytes[1] = 0x00
        let array%encoded_bool%11#1: bytes[1] = 0x80
        let array%encoded_bool%12#1: bytes[1] = 0x80
        let array%encoded_bool%13#1: bytes[1] = 0x80
        let array%encoded_bool%14#1: bytes[1] = 0x80
        let array%encoded_bool%15#1: bytes[1] = 0x00
        let array%encoded_bool%16#1: bytes[1] = 0x80
        let array%encoded_bool%17#1: bytes[1] = 0x80
        let encoded%12#0: Encoded((uint8,bool1)) = 0x0480
        let get_bit%26#0: uint64 = 0u
        let set_bit%8#0: Encoded((uint8,bool1)) = 0x0480
        let get_bit%27#0: uint64 = 1u
        let set_bit%9#0: Encoded((uint8,bool1)) = 0x04a0
        let get_bit%28#0: uint64 = 1u
        let set_bit%10#0: Encoded((uint8,bool1)) = 0x04b0
        let get_bit%29#0: uint64 = 1u
        let set_bit%11#0: Encoded((uint8,bool1)) = 0x04b8
        let get_bit%30#0: uint64 = 1u
        let set_bit%12#0: Encoded((uint8,bool1)) = 0x04bc
        let get_bit%31#0: uint64 = 0u
        let set_bit%13#0: Encoded((uint8,bool1)) = 0x04bc
        let get_bit%32#0: uint64 = 1u
        let set_bit%14#0: Encoded((uint8,bool1)) = 0x04bd
        let get_bit%33#0: uint64 = 1u
        let set_bit%15#0: bytes = 0x80
        let encoded%13#0: Encoded((uint8,bool1,bool1)) = 0x04bd80
        let encoded%14#0: Encoded((uint8,bool1,bool1,uint8)) = 0x04bd8010
        let tmp%35#0: bool = 1u
        return 1u