main test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program:
    block@0: // L14
        let length%0#0: uint64 = (len 0x68656c6c6f)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x68656c6c6f)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x776f726c64)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x776f726c64)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x01)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0x02)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 7u data_length%0#0)
        let as_bytes%2#0: bytes[8] = (itob 7u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%2#0: Encoded((uint8,uint8,len+utf8[])) = (concat encoded%1#0 offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let data_length%1#0: uint64 = (len as_Encoded(len+utf8[])%1#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%3#0: Encoded((uint8,uint8,len+utf8[],len+utf8[])) = (concat encoded%2#0 offset_as_uint16%1#0)
        let encoded%4#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = (concat encoded%3#0 0xff)
        let encoded%5#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = (concat encoded%4#0 tail%1#0)
        let my_tuple#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = encoded%5#0
        let reinterpret_Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8))%0#0: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8)) = 0x01020007000eff000568656c6c6f0005776f726c64
        let tmp%0#0: bool = (== my_tuple#0 reinterpret_Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8))%0#0)
        (assert tmp%0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%4#0: Encoded(bool8) = encoded_bool%4#0
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%5#0: Encoded(bool8) = encoded_bool%5#0
        let encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_Encoded(bool8)%6#0: Encoded(bool8) = encoded_bool%6#0
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%7#0: Encoded(bool8) = encoded_bool%7#0
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_Encoded(bool8)%8#0: Encoded(bool8) = encoded_bool%8#0
        let encoded%6#0: Encoded((uint8)) = (concat 0x 0x04)
        let encoded%7#0: Encoded((uint8,bool1)) = (concat encoded%6#0 as_Encoded(bool8)%0#0)
        let get_bit%0#0: uint64 = (getbit as_Encoded(bool8)%1#0 0u)
        let set_bit%0#0: Encoded((uint8,bool1)) = (setbit encoded%7#0 9u get_bit%0#0)
        let get_bit%1#0: uint64 = (getbit as_Encoded(bool8)%2#0 0u)
        let set_bit%1#0: Encoded((uint8,bool1)) = (setbit set_bit%0#0 10u get_bit%1#0)
        let get_bit%2#0: uint64 = (getbit as_Encoded(bool8)%3#0 0u)
        let set_bit%2#0: Encoded((uint8,bool1)) = (setbit set_bit%1#0 11u get_bit%2#0)
        let get_bit%3#0: uint64 = (getbit as_Encoded(bool8)%4#0 0u)
        let set_bit%3#0: Encoded((uint8,bool1)) = (setbit set_bit%2#0 12u get_bit%3#0)
        let get_bit%4#0: uint64 = (getbit as_Encoded(bool8)%5#0 0u)
        let set_bit%4#0: Encoded((uint8,bool1)) = (setbit set_bit%3#0 13u get_bit%4#0)
        let get_bit%5#0: uint64 = (getbit as_Encoded(bool8)%6#0 0u)
        let set_bit%5#0: Encoded((uint8,bool1)) = (setbit set_bit%4#0 14u get_bit%5#0)
        let get_bit%6#0: uint64 = (getbit as_Encoded(bool8)%7#0 0u)
        let set_bit%6#0: Encoded((uint8,bool1)) = (setbit set_bit%5#0 15u get_bit%6#0)
        let get_bit%7#0: uint64 = (getbit as_Encoded(bool8)%8#0 0u)
        let set_bit%7#0: bytes = (setbit 0x00 0u get_bit%7#0)
        let encoded%8#0: Encoded((uint8,bool1,bool1)) = (concat set_bit%6#0 set_bit%7#0)
        let encoded%9#0: Encoded((uint8,bool1,bool1,uint8)) = (concat encoded%8#0 0x10)
        let encoded%10#0: Encoded((uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)) = (concat encoded%9#0 0x)
        let boolean_packing#0: Encoded((uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)) = encoded%10#0
        let tmp%1#0: bool = (== boolean_packing#0 0x04bd8010)
        (assert tmp%1#0)
        let extract%0#0: bytes = (extract3 boolean_packing#0 0u 1u)
        let get_bit%8#0: uint64 = (getbit boolean_packing#0 8u)
        let tmp%2#0: Encoded(bool8) = encode<bool8>(get_bit%8#0)
        let get_bit%9#0: uint64 = (getbit boolean_packing#0 9u)
        let tmp%3#0: Encoded(bool8) = encode<bool8>(get_bit%9#0)
        let get_bit%10#0: uint64 = (getbit boolean_packing#0 10u)
        let tmp%4#0: Encoded(bool8) = encode<bool8>(get_bit%10#0)
        let get_bit%11#0: uint64 = (getbit boolean_packing#0 11u)
        let tmp%5#0: Encoded(bool8) = encode<bool8>(get_bit%11#0)
        let get_bit%12#0: uint64 = (getbit boolean_packing#0 12u)
        let tmp%6#0: Encoded(bool8) = encode<bool8>(get_bit%12#0)
        let get_bit%13#0: uint64 = (getbit boolean_packing#0 13u)
        let tmp%7#0: Encoded(bool8) = encode<bool8>(get_bit%13#0)
        let get_bit%14#0: uint64 = (getbit boolean_packing#0 14u)
        let tmp%8#0: Encoded(bool8) = encode<bool8>(get_bit%14#0)
        let get_bit%15#0: uint64 = (getbit boolean_packing#0 15u)
        let tmp%9#0: Encoded(bool8) = encode<bool8>(get_bit%15#0)
        let get_bit%16#0: uint64 = (getbit boolean_packing#0 16u)
        let tmp%10#0: Encoded(bool8) = encode<bool8>(get_bit%16#0)
        let extract%1#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let a#0: Encoded(uint8) = extract%0#0
        let b#0: Encoded(bool8) = tmp%2#0
        let c#0: Encoded(bool8) = tmp%3#0
        let d#0: Encoded(bool8) = tmp%4#0
        let e#0: Encoded(bool8) = tmp%5#0
        let f#0: Encoded(bool8) = tmp%6#0
        let g#0: Encoded(bool8) = tmp%7#0
        let h#0: Encoded(bool8) = tmp%8#0
        let i#0: Encoded(bool8) = tmp%9#0
        let j#0: Encoded(bool8) = tmp%10#0
        let k#0: Encoded(uint8) = extract%1#0
        let extract%2#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let reinterpret_biguint%0#0: biguint = extract%2#0
        let reinterpret_biguint%1#0: biguint = k#0
        let tmp%11#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (btoi a#0)
        let tmp%13#0: bool = (== tmp%12#0 4u)
        (assert tmp%13#0) // a is 4
        let tmp%14#0: bool = (!= b#0 0x00)
        goto tmp%14#0 ? block@1 : block@8
    block@1: // and_contd_L39
        let tmp%15#0: bool = (!= d#0 0x00)
        goto tmp%15#0 ? block@2 : block@8
    block@2: // and_contd_L39
        let tmp%16#0: bool = (!= e#0 0x00)
        goto tmp%16#0 ? block@3 : block@8
    block@3: // and_contd_L39
        let tmp%17#0: bool = (!= f#0 0x00)
        goto tmp%17#0 ? block@4 : block@8
    block@4: // and_contd_L39
        let tmp%18#0: bool = (!= g#0 0x00)
        goto tmp%18#0 ? block@5 : block@8
    block@5: // and_contd_L39
        let tmp%19#0: bool = (!= i#0 0x00)
        goto tmp%19#0 ? block@6 : block@8
    block@6: // and_contd_L39
        let tmp%20#0: bool = (!= j#0 0x00)
        goto tmp%20#0 ? block@7 : block@8
    block@7: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L39
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L39
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // b,d,e,f,g,i,j are true
        let tmp%21#0: bool = (!= c#0 0x00)
        goto tmp%21#0 ? block@11 : block@10
    block@10: // or_contd_L40
        let tmp%22#0: bool = (!= h#0 0x00)
        goto tmp%22#0 ? block@11 : block@12
    block@11: // bool_true_L40
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L40
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L40
        let or_result%0#2: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
        let tmp%23#0: bool = (! or_result%0#2)
        (assert tmp%23#0) // c and h are false
        let tmp%24#0: uint64 = (btoi k#0)
        let tmp%25#0: bool = (== tmp%24#0 16u)
        (assert tmp%25#0) // k is 16
        let extract%3#0: bytes = (extract3 boolean_packing#0 0u 1u)
        let get_bit%17#0: uint64 = (getbit boolean_packing#0 8u)
        let tmp%26#0: Encoded(bool8) = encode<bool8>(get_bit%17#0)
        let get_bit%18#0: uint64 = (getbit boolean_packing#0 9u)
        let tmp%27#0: Encoded(bool8) = encode<bool8>(get_bit%18#0)
        let get_bit%19#0: uint64 = (getbit boolean_packing#0 10u)
        let tmp%28#0: Encoded(bool8) = encode<bool8>(get_bit%19#0)
        let get_bit%20#0: uint64 = (getbit boolean_packing#0 11u)
        let tmp%29#0: Encoded(bool8) = encode<bool8>(get_bit%20#0)
        let get_bit%21#0: uint64 = (getbit boolean_packing#0 12u)
        let tmp%30#0: Encoded(bool8) = encode<bool8>(get_bit%21#0)
        let get_bit%22#0: uint64 = (getbit boolean_packing#0 13u)
        let tmp%31#0: Encoded(bool8) = encode<bool8>(get_bit%22#0)
        let get_bit%23#0: uint64 = (getbit boolean_packing#0 14u)
        let tmp%32#0: Encoded(bool8) = encode<bool8>(get_bit%23#0)
        let get_bit%24#0: uint64 = (getbit boolean_packing#0 15u)
        let tmp%33#0: Encoded(bool8) = encode<bool8>(get_bit%24#0)
        let get_bit%25#0: uint64 = (getbit boolean_packing#0 16u)
        let tmp%34#0: Encoded(bool8) = encode<bool8>(get_bit%25#0)
        let extract%4#0: bytes = (extract3 boolean_packing#0 3u 1u)
        let encoded%11#0: Encoded((uint8)) = (concat 0x extract%3#0)
        let encoded%12#0: Encoded((uint8,bool1)) = (concat encoded%11#0 tmp%26#0)
        let get_bit%26#0: uint64 = (getbit tmp%27#0 0u)
        let set_bit%8#0: Encoded((uint8,bool1)) = (setbit encoded%12#0 9u get_bit%26#0)
        let get_bit%27#0: uint64 = (getbit tmp%28#0 0u)
        let set_bit%9#0: Encoded((uint8,bool1)) = (setbit set_bit%8#0 10u get_bit%27#0)
        let get_bit%28#0: uint64 = (getbit tmp%29#0 0u)
        let set_bit%10#0: Encoded((uint8,bool1)) = (setbit set_bit%9#0 11u get_bit%28#0)
        let get_bit%29#0: uint64 = (getbit tmp%30#0 0u)
        let set_bit%11#0: Encoded((uint8,bool1)) = (setbit set_bit%10#0 12u get_bit%29#0)
        let get_bit%30#0: uint64 = (getbit tmp%31#0 0u)
        let set_bit%12#0: Encoded((uint8,bool1)) = (setbit set_bit%11#0 13u get_bit%30#0)
        let get_bit%31#0: uint64 = (getbit tmp%32#0 0u)
        let set_bit%13#0: Encoded((uint8,bool1)) = (setbit set_bit%12#0 14u get_bit%31#0)
        let get_bit%32#0: uint64 = (getbit tmp%33#0 0u)
        let set_bit%14#0: Encoded((uint8,bool1)) = (setbit set_bit%13#0 15u get_bit%32#0)
        let get_bit%33#0: uint64 = (getbit tmp%34#0 0u)
        let set_bit%15#0: bytes = (setbit 0x00 0u get_bit%33#0)
        let encoded%13#0: Encoded((uint8,bool1,bool1)) = (concat set_bit%14#0 set_bit%15#0)
        let encoded%14#0: Encoded((uint8,bool1,bool1,uint8)) = (concat encoded%13#0 extract%4#0)
        let encoded%15#0: Encoded((uint8,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint8)) = (concat encoded%14#0 0x)
        let tmp%35#0: bool = (== boolean_packing#0 encoded%15#0)
        (assert tmp%35#0)
        let (tmp%36#0: uint64, tmp%37#0: Encoded(len+utf8[])) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(my_tuple#0)
        let total#0: uint64 = tmp%36#0
        let concat#0: Encoded(len+utf8[]) = tmp%37#0
        let tmp%38#0: bytes = ((extract 2 0) concat#0)
        let tmp%39#0: bool = (== tmp%38#0 "hello world")
        (assert tmp%39#0)
        let tmp%40#0: bool = (== total#0 258u)
        (assert tmp%40#0)
        test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy()
        return 1u

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: Encoded((uint8,uint8,len+utf8[],len+utf8[],uint8))) -> <uint64, Encoded(len+utf8[])>:
    block@0: // L56
        let extract%0#0: bytes = (extract3 test_tuple#0 0u 1u)
        let extract%1#0: bytes = (extract3 test_tuple#0 1u 1u)
        let extract_uint16%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
        let extract_uint16%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let substring3%0#0: bytes = (substring3 test_tuple#0 extract_uint16%0#0 extract_uint16%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let len%0#0: uint64 = (len test_tuple#0)
        let substring3%1#0: bytes = (substring3 test_tuple#0 extract_uint16%2#0 len%0#0)
        let extract%2#0: bytes = (extract3 test_tuple#0 6u 1u)
        let a#0: Encoded(uint8) = extract%0#0
        let b#0: Encoded(uint8) = extract%1#0
        let c#0: Encoded(len+utf8[]) = substring3%0#0
        let d#0: Encoded(len+utf8[]) = substring3%1#0
        let e#0: Encoded(uint8) = extract%2#0
        let extract%3#0: bytes = (extract3 test_tuple#0 0u 1u)
        let reinterpret_biguint%0#0: biguint = extract%3#0
        let reinterpret_biguint%1#0: biguint = a#0
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0)
        let extract%4#0: bytes = (extract3 test_tuple#0 6u 1u)
        let reinterpret_biguint%2#0: biguint = extract%4#0
        let reinterpret_biguint%3#0: biguint = e#0
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0)
        let extract_uint16%3#0: uint64 = (extract_uint16 test_tuple#0 4u)
        let len%1#0: uint64 = (len test_tuple#0)
        let substring3%2#0: bytes = (substring3 test_tuple#0 extract_uint16%3#0 len%1#0)
        let tmp%2#0: bool = (== substring3%2#0 d#0)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (btoi a#0)
        let tmp%4#0: uint64 = (btoi b#0)
        let tmp%5#0: uint64 = (+ tmp%3#0 tmp%4#0)
        let tmp%6#0: uint64 = (btoi e#0)
        let tmp%7#0: uint64 = (+ tmp%5#0 tmp%6#0)
        let total#0: uint64 = tmp%7#0
        let tmp%8#0: bytes = ((extract 2 0) c#0)
        let tmp%9#0: bytes = (concat tmp%8#0 " ")
        let tmp%10#0: bytes = ((extract 2 0) d#0)
        let tmp%11#0: bytes = (concat tmp%9#0 tmp%10#0)
        let text#0: string = tmp%11#0
        let length%0#0: uint64 = (len text#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 text#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        return total#0 as_Encoded(len+utf8[])%0#0

subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_copy() -> void:
    block@0: // L69
        let length%0#0: uint64 = (len 0x)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%0#0
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0x00)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+uint8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+uint8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 3u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%1#0: Encoded((uint8,len+uint8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint8,len+uint8[])) = (concat encoded%1#0 tail%0#0)
        let tup#0: Encoded((uint8,len+uint8[])) = encoded%2#0
        let extract_uint16%0#0: uint64 = (extract_uint16 tup#0 1u)
        let len%0#0: uint64 = (len tup#0)
        let substring3%0#0: bytes = (substring3 tup#0 extract_uint16%0#0 len%0#0)
        let encoded%3#0: Encoded((uint8)) = (concat 0x 0x00)
        let encoded%4#0: Encoded(uint8[]) = (concat encoded%3#0 0x)
        let concat%0#0: bytes = (concat substring3%0#0 encoded%4#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%1#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%1#0 1u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = replace%0#0
        let item_offset%0#0: uint64 = (extract_uint16 tup#0 1u)
        let data_up_to_item%0#0: bytes = (extract3 tup#0 0u item_offset%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 as_Encoded(len+uint8[])%1#0)
        let tup#1: Encoded((uint8,len+uint8[])) = updated_data%0#0
        let extract_uint16%1#0: uint64 = (extract_uint16 tup#1 1u)
        let len%2#0: uint64 = (len tup#1)
        let substring3%1#0: bytes = (substring3 tup#1 extract_uint16%1#0 len%2#0)
        let encoded%5#0: Encoded((uint8)) = (concat 0x 0x00)
        let as_bytes%3#0: bytes[8] = (itob 1u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%6#0: bytes = (concat len_u16%0#0 encoded%5#0)
        let encoded%7#0: Encoded(len+uint8[]) = (concat encoded%6#0 0x)
        let tmp%0#0: bool = (== substring3%1#0 encoded%7#0)
        (assert tmp%0#0)
        let copy%0#0: Encoded((uint8,len+uint8[])) = tup#1
        let tup2#0: Encoded((uint8,len+uint8[])) = copy%0#0
        let extract_uint16%2#0: uint64 = (extract_uint16 tup#1 1u)
        let len%3#0: uint64 = (len tup#1)
        let substring3%2#0: bytes = (substring3 tup#1 extract_uint16%2#0 len%3#0)
        let write_offset%0#0: uint64 = (* 0u 1u)
        let write_offset_with_length_header%0#0: uint64 = (+ write_offset%0#0 2u)
        let updated_array%0#0: bytes = (replace3 substring3%2#0 write_offset_with_length_header%0#0 0x01)
        let item_offset%1#0: uint64 = (extract_uint16 tup#1 1u)
        let data_up_to_item%1#0: bytes = (extract3 tup#1 0u item_offset%1#0)
        let updated_data%1#0: bytes = (concat data_up_to_item%1#0 updated_array%0#0)
        let tup#2: Encoded((uint8,len+uint8[])) = updated_data%1#0
        let extract_uint16%3#0: uint64 = (extract_uint16 tup#2 1u)
        let len%4#0: uint64 = (len tup#2)
        let substring3%3#0: bytes = (substring3 tup#2 extract_uint16%3#0 len%4#0)
        let extract_uint16%4#0: uint64 = (extract_uint16 tup2#0 1u)
        let len%5#0: uint64 = (len tup2#0)
        let substring3%4#0: bytes = (substring3 tup2#0 extract_uint16%4#0 len%5#0)
        let tmp%1#0: bool = (!= substring3%3#0 substring3%4#0)
        (assert tmp%1#0)
        return 