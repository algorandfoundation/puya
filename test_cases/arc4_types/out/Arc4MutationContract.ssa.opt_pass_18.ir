contract test_cases.arc4_types.mutation.Arc4MutationContract:
    program approval:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.approval_program() -> bool:
            block@0: // L34
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool()
                test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static()
                test_cases.arc4_types.mutation.Arc4MutationContract.index_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign()
                test_cases.arc4_types.mutation.Arc4MutationContract.array_concat()
                return 1u
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_fixed_size() -> void:
            block@0: // L143
                let dynamic_uint8_array#3: bytes = 0x0008010232010232045a
                let tmp%2#0: bool = (== dynamic_uint8_array#3 0x0008010232010232045a)
                (assert tmp%2#0)
                let (popped#0: bytes, dynamic_uint8_array#4: bytes) = algopy_lib_arc4.dynamic_array_pop_fixed_size(dynamic_uint8_array#3, 1u)
                let tmp%3#0: bool = (b== popped#0 0x5a)
                (assert tmp%3#0)
                let tmp%4#0: bool = (== dynamic_uint8_array#4 0x000701023201023204)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_bool() -> void:
            block@0: // L166
                let dynamic_bool_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_bits(0x000280, 0x8000, 2u, 0u)
                let tmp%1#0: bool = (== dynamic_bool_array#1 0x0004a0)
                (assert tmp%1#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_bool_array#1 0u)
                let array_head_and_tail%6#0: bytes = ((extract 2 0) dynamic_bool_array#1)
                let dynamic_bool_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#1, array_head_and_tail%6#0, array_length%0#0, 1u)
                let tmp%3#0: bool = (== dynamic_bool_array#2 0x0008aa)
                (assert tmp%3#0)
                let dynamic_bool_array#3: bytes = algopy_lib_arc4.dynamic_array_concat_bits(dynamic_bool_array#2, 0x80, 1u, 0u)
                let tmp%4#0: bool = (== dynamic_bool_array#3 0x0009aa80)
                (assert tmp%4#0)
                let (popped%0#1: bytes, dynamic_bool_array#4: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#3)
                let tmp%5#0: bool = (== popped%0#1 0x80)
                (assert tmp%5#0)
                let (popped%1#1: bytes, dynamic_bool_array#5: bytes) = algopy_lib_arc4.dynamic_array_pop_bit(dynamic_bool_array#4)
                let tmp%6#0: bool = (== popped%1#1 0x00)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== dynamic_bool_array#5 0x0007aa)
                (assert tmp%7#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.dynamic_array_string() -> void:
            block@0: // L213
                let dynamic_string_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_byte_length_head(0x00020004000b000548656c6c6f0005576f726c64, 0x0003466f6f0003426172, 2u)
                let tmp%1#0: bool = (== dynamic_string_array#1 "\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar")
                (assert tmp%1#0)
                let array_length%0#0: uint64 = (extract_uint16 dynamic_string_array#1 0u)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) dynamic_string_array#1)
                let start_of_tail%0#0: uint64 = (* array_length%0#0 2u)
                let total_length%0#0: uint64 = (len array_head_and_tail%0#0)
                let data%2#0: bytes = (substring3 array_head_and_tail%0#0 start_of_tail%0#0 total_length%0#0)
                let dynamic_string_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_byte_length_head(dynamic_string_array#1, data%2#0, array_length%0#0)
                let result%16#0: bytes = 0x00100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f
                let result%17#0: bytes = (concat result%16#0 0x0005576f726c64)
                let result%18#0: bytes = (concat result%17#0 0x0003466f6f)
                let result%19#0: bytes = (concat result%18#0 0x0003426172)
                let dynamic_string_array#3: bytes = (concat 0x0008 result%19#0)
                let tmp%2#0: bool = (== dynamic_string_array#2 dynamic_string_array#3)
                (assert tmp%2#0)
                let dynamic_string_array#4: bytes = algopy_lib_arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#3, 0x000548656c6c6f, 3u)
                let dynamic_string_array#5: bytes = algopy_lib_arc4.dynamic_array_replace_byte_length_head(dynamic_string_array#4, 0x000548656c6c6f, 5u)
                let result%48#0: bytes = 0x00100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f
                let result%49#0: bytes = (concat result%48#0 0x000548656c6c6f)
                let result%50#0: bytes = (concat result%49#0 0x0003466f6f)
                let result%51#0: bytes = (concat result%50#0 0x0003426172)
                let array_data%3#0: bytes = (concat 0x0008 result%51#0)
                let tmp%3#0: bool = (== dynamic_string_array#5 array_data%3#0)
                (assert tmp%3#0)
                let (popped%0#1: bytes, dynamic_string_array#6: bytes) = algopy_lib_arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#5)
                let tmp%4#0: bool = (== popped%0#1 0x0003426172)
                (assert tmp%4#0)
                let (popped%1#1: bytes, dynamic_string_array#7: bytes) = algopy_lib_arc4.dynamic_array_pop_byte_length_head(dynamic_string_array#6)
                let tmp%5#0: bool = (== popped%1#1 0x0003466f6f)
                (assert tmp%5#0)
                let array_data%4#0: bytes = 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
                let tmp%6#0: bool = (== dynamic_string_array#7 array_data%4#0)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_dynamic() -> void:
            block@0: // L70
                let array_of_array#1: bytes = algopy_lib_arc4.dynamic_array_concat_byte_length_head(0x0000, 0x00010a, 1u)
                let tmp%1#0: bool = (== array_of_array#1 0x0001000200010a)
                (assert tmp%1#0)
                let array_of_array#2: bytes = algopy_lib_arc4.dynamic_array_concat_byte_length_head(array_of_array#1, 0x000110, 1u)
                let tmp%2#0: bool = (== array_of_array#2 0x00020004000700010a000110)
                (assert tmp%2#0)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) array_of_array#2)
                let array_length%0#0: uint64 = (extract_uint16 array_of_array#2 0u)
                (assert array_length%0#0) // Index access is out of bounds
                let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 0u)
                let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
                let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
                let tmp%3#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%3#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0xff)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let concat_result%2#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let array_of_array#3: bytes = algopy_lib_arc4.dynamic_array_replace_byte_length_head(array_of_array#2, concat_result%2#0, 0u)
                let tmp%4#0: bool = (== array_of_array#3 0x00020004000800020aff000110)
                (assert tmp%4#0)
                let array_head_and_tail%1#0: bytes = ((extract 2 0) array_of_array#3)
                let array_length%1#0: uint64 = (extract_uint16 array_of_array#3 0u)
                (assert array_length%1#0) // Index access is out of bounds
                let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 0u)
                let item_length%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset%1#0)
                let item_head_tail_length%1#0: uint64 = (+ item_length%1#0 2u)
                let tmp%5#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 item_head_tail_length%1#0)
                let array_length%2#0: uint64 = (extract_uint16 tmp%5#0 0u)
                let index_is_in_bounds%2#0: bool = (< 1u array_length%2#0)
                (assert index_is_in_bounds%2#0) // Index access is out of bounds
                let updated_target%0#0: bytes = ((replace2 3) tmp%5#0 0x00)
                let array_of_array#4: bytes = algopy_lib_arc4.dynamic_array_replace_byte_length_head(array_of_array#3, updated_target%0#0, 0u)
                let tmp%6#0: bool = (== array_of_array#4 0x00020004000800020a00000110)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_of_array_static() -> void:
            block@0: // L85
                let array_of_array#1: bytes = ((replace2 0) 0x0a094080 0xfffe)
                let tmp%1#0: bool = (== array_of_array#1 0xfffe4080)
                (assert tmp%1#0)
                let tmp%2#0: bytes = ((extract 2 2) array_of_array#1) // on error: Index access is out of bounds
                let updated_target%1#0: bytes = ((replace2 0) tmp%2#0 0x01)
                let array_of_array#2: bytes = ((replace2 2) array_of_array#1 updated_target%1#0)
                let tmp%3#0: bool = (== array_of_array#2 0xfffe0180)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.index_assign() -> void:
            block@0: // L100
                let dynamic_uint8_array#1: bytes = ((replace2 2) 0x00020102 0xff)
                let tmp%0#0: bool = (== dynamic_uint8_array#1 0x0002ff02)
                (assert tmp%0#0)
                let static_uint8_array#1: bytes = ((replace2 1) 0x0102 0xff)
                let tmp%1#0: bool = (== static_uint8_array#1 0x01ff)
                (assert tmp%1#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.struct_assign() -> void:
            block@0: // L116
                let test_struct#2: bytes = ((replace2 1) 0x00320006000d00054861707079000444617973 0x0c)
                let tmp%0#0: bool = (== test_struct#2 0x000c0006000d00054861707079000444617973)
                (assert tmp%0#0)
                let item_offset%0#0: uint64 = (extract_uint16 test_struct#2 2u)
                let data_up_to_item%0#0: bytes = (extract3 test_struct#2 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 test_struct#2 4u)
                let total_data_length%0#0: uint64 = (len test_struct#2)
                let data_beyond_item%0#0: bytes = (substring3 test_struct#2 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%2#0: bytes = (concat data_up_to_item%0#0 0x0005486d6d6d6d)
                let updated_data%3#0: bytes = (concat updated_data%2#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%3#0 4u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 7u)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%9#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%9#0)
                let test_struct#3: bytes = ((replace2 4) updated_data%3#0 tail_offset_bytes%0#0)
                let item_offset%1#0: uint64 = (extract_uint16 test_struct#3 4u)
                let data_up_to_item%1#0: bytes = (extract3 test_struct#3 0u item_offset%1#0)
                let test_struct#4: bytes = (concat data_up_to_item%1#0 0x00074f682077656c6c)
                let tmp%1#0: bool = (== test_struct#4 0x000c0006000d0005486d6d6d6d00074f682077656c6c)
                (assert tmp%1#0)
                return 
        
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.array_concat() -> void:
            block@0: // L58
                let hello_world_concat#0: bytes = algopy_lib_arc4.dynamic_array_concat_byte_length_head(0x00010002000548656c6c6f, 0x0005576f726c64, 1u)
                let tmp%2#0: bool = (== 0x00020004000b000548656c6c6f0005576f726c64 hello_world_concat#0)
                (assert tmp%2#0)
                return 
        
        subroutine algopy_lib_arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
            block@0: // L25
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
                let popped_location#0: uint64 = (+ length_minus_1#0 16u)
                let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
                let popped#0: bytes = (setbit "\x00" 0u tmp%2#0)
                let result#1: bytes = (setbit result#0 popped_location#0 0u)
                let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
                let tmp%4#0: uint64 = (/ tmp%3#0 8u)
                let tmp%5#0: uint64 = (+ 2u tmp%4#0)
                let result#2: bytes = (substring3 result#1 0u tmp%5#0)
                return popped#0 result#2
        
        subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
            block@0: // L44
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
                let tmp%2#0: uint64 = (len result#0)
                let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
                let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
                let result#1: bytes = (substring3 result#0 0u item_location#0)
                return popped#0 result#1
        
        subroutine algopy_lib_arc4.dynamic_array_pop_byte_length_head(array: bytes) -> <bytes, bytes>:
            block@0: // L62
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
                let head_and_tail#0: bytes = ((extract 2 0) array#0)
                let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
                let tmp%0#0: uint64 = (len head_and_tail#0)
                let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
                let tmp%1#0: bytes = (substring3 head_and_tail#0 0u popped_header_offset#0)
                let tmp%2#0: uint64 = (+ popped_header_offset#0 2u)
                let tmp%3#0: bytes = (substring3 head_and_tail#0 tmp%2#0 popped_offset#0)
                let head_and_tail#1: bytes = (concat tmp%1#0 tmp%3#0)
                let tmp%4#0: bytes = (itob length_minus_1#0)
                let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
                let tmp%6#0: bytes = algopy_lib_arc4.recalculate_head_for_elements_with_byte_length_head(head_and_tail#1, length_minus_1#0, 0u)
                let updated#0: bytes = (concat tmp%5#0 tmp%6#0)
                return popped#0 updated#0
        
        subroutine algopy_lib_arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, is_packed: bool) -> bytes:
            block@0: // L124
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: bytes = (itob new_array_length#0)
                let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
                let tmp%1#0: uint64 = (+ array_length#0 7u)
                let current_bytes#0: uint64 = (/ tmp%1#0 8u)
                let tmp%2#0: uint64 = (+ new_array_length#0 7u)
                let required_bytes#0: uint64 = (/ tmp%2#0 8u)
                let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
                goto tmp%3#0 ? block@1 : block@2
            block@1: // if_body_L146
                let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let result#1: bytes = (concat result#0 tmp%5#0)
                goto block@2
            block@2: // after_if_else_L146
                let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1)
                let write_offset#0: uint64 = (+ array_length#0 16u)
                goto is_packed#0 ? block@3 : block@4
            block@3: // ternary_true_L150
                let ternary_result%0#0: uint64 = 1u
                goto block@5
            block@4: // ternary_false_L150
                let ternary_result%0#1: uint64 = 8u
                goto block@5
            block@5: // ternary_merge_L150
                let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4)
                (assert ternary_result%0#2) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@6
            block@6: // for_header_L150
                let i#0: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@7)
                let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@7)
                let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@7)
                let continue_looping%0#0: bool = (< i#0 new_items_count#0)
                goto continue_looping%0#0 ? block@7 : block@10
            block@7: // for_body_L150
                let tmp%6#0: uint64 = (getbit new_items_bytes#0 i#0)
                let result#3: bytes = (setbit result#4 write_offset#3 tmp%6#0)
                let write_offset#2: uint64 = (+ write_offset#3 1u)
                let range_item%0#3: uint64 = (+ i#0 ternary_result%0#2)
                goto block@6
            block@10: // after_for_L150
                return result#4
        
        subroutine algopy_lib_arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L157
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%0#0: uint64 = (* array_length#0 2u)
                let header_end#0: uint64 = (+ tmp%0#0 2u)
                let tmp%1#0: bytes = (itob new_length#0)
                let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
                let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
                let tmp%4#0: uint64 = (* new_items_count#0 2u)
                let tmp%5#0: bytes = (bzero tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                let tmp%7#0: uint64 = (len array#0)
                let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
                let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
                let tmp%11#0: bytes = algopy_lib_arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
                let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
                return tmp%12#0
        
        subroutine algopy_lib_arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L217
                let size_b#0: bytes = ((substring 0 2) array#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) array#0)
                let tmp%1#0: bytes = algopy_lib_arc4.static_array_replace_byte_length_head(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine algopy_lib_arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L278
                let tmp%0#0: bool = (< index#0 array_length#0)
                (assert tmp%0#0) // Index out of bounds
                let tmp%1#0: uint64 = (* index#0 2u)
                let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
                let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
                let tmp%2#0: uint64 = (+ offset_for_index#0 old_item_length#0)
                let old_item_end#0: uint64 = (+ tmp%2#0 2u)
                let tmp%3#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
                let tmp%4#0: bytes = (concat tmp%3#0 new_item#0)
                let tmp%5#0: uint64 = (len array_head_and_tail#0)
                let tmp%6#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%5#0)
                let tmp%7#0: bytes = (concat tmp%4#0 tmp%6#0)
                let tmp%8#0: bytes = algopy_lib_arc4.recalculate_head_for_elements_with_byte_length_head(tmp%7#0, array_length#0, index#0)
                return tmp%8#0
        
        subroutine algopy_lib_arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
            block@0: // L306
                let tmp%0#0: uint64 = (* length#0 2u)
                let tmp%1#0: uint64 = (* start_at_index#0 2u)
                let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
                let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
                goto block@1
            block@1: // for_header_L327
                let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, range_item%0#3 <- block@2)
                let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
                let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L327
                let tmp%5#0: bytes = (itob tail_offset#3)
                let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#0)
                let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#3 head_offset#0 tail_offset_bytes#0)
                let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#3)
                let tmp%7#0: uint64 = (+ tmp%6#0 2u)
                let tail_offset#2: uint64 = (+ tail_offset#3 tmp%7#0)
                let range_item%0#3: uint64 = (+ head_offset#0 2u)
                goto block@1
            block@5: // after_for_L327
                return array_head_and_tail#3
    
    program clear-state:
        subroutine test_cases.arc4_types.mutation.Arc4MutationContract.clear_state_program() -> bool:
            block@0: // L45
                return 1u