contract test_cases.arc4_types.tuples.Arc4TuplesTypeContract:
    program approval:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.approval_program() -> bool:
            block@0: // L14
                let d#0: bytes = 0x80
                let e#0: bytes = 0x80
                let f#0: bytes = 0x80
                let g#0: bytes = 0x80
                let i#0: bytes = 0x80
                let j#0: bytes = 0x80
                goto block@13
            block@13: // ternary_merge_L39
                goto block@14
            block@14: // ternary_merge_L39
                goto block@15
            block@15: // ternary_merge_L39
                goto block@16
            block@16: // ternary_merge_L39
                goto block@17
            block@17: // ternary_merge_L39
                let encoded_tuple_buffer%2#3: bytes = 0x0480
                let encoded_tuple_buffer%2#4: bytes = (setbit encoded_tuple_buffer%2#3 10u 1u)
                let encoded_tuple_buffer%2#5: bytes = (setbit encoded_tuple_buffer%2#4 11u 1u)
                let encoded_tuple_buffer%2#6: bytes = (setbit encoded_tuple_buffer%2#5 12u 1u)
                let encoded_tuple_buffer%2#7: bytes = (setbit encoded_tuple_buffer%2#6 13u 1u)
                let encoded_tuple_buffer%2#8: bytes = (setbit encoded_tuple_buffer%2#7 14u 0u)
                let encoded_tuple_buffer%2#9: bytes = (setbit encoded_tuple_buffer%2#8 15u 1u)
                let encoded_tuple_buffer%2#10: bytes = (concat encoded_tuple_buffer%2#9 0x80)
                let encoded_tuple_buffer%2#11: bytes = (concat encoded_tuple_buffer%2#10 0x10)
                let tmp%27#0: bool = (== 0x04bd8010 encoded_tuple_buffer%2#11)
                (assert tmp%27#0)
                let (total#0: uint64, concat#0: bytes) = test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(0x01020007000eff000568656c6c6f0005776f726c64)
                let tmp%28#0: bytes = ((extract 2 0) concat#0)
                let tmp%29#0: bool = (== tmp%28#0 "hello world")
                (assert tmp%29#0)
                let tmp%30#0: bool = (== total#0 258u)
                (assert tmp%30#0)
                return 1u
        
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.test_stuff(test_tuple: bytes) -> <uint64, bytes>:
            block@0: // L54
                let a#0: bytes = ((extract 0 1) test_tuple#0)
                let b#0: bytes = ((extract 1 1) test_tuple#0)
                let item_index%0#0: uint64 = (extract_uint16 test_tuple#0 2u)
                let item_length%0#0: uint64 = (extract_uint16 test_tuple#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let c#0: bytes = (extract3 test_tuple#0 item_index%0#0 item_length_plus_2%0#0)
                let item_index%1#0: uint64 = (extract_uint16 test_tuple#0 4u)
                let item_length%1#0: uint64 = (extract_uint16 test_tuple#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let d#0: bytes = (extract3 test_tuple#0 item_index%1#0 item_length_plus_2%1#0)
                let e#0: bytes = ((extract 6 1) test_tuple#0)
                let tmp%4#0: uint64 = (btoi a#0)
                let tmp%5#0: uint64 = (btoi b#0)
                let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
                let tmp%7#0: uint64 = (btoi e#0)
                let total#0: uint64 = (+ tmp%6#0 tmp%7#0)
                let tmp%8#0: bytes = ((extract 2 0) c#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: bytes = ((extract 2 0) d#0)
                let text#0: bytes = (concat tmp%9#0 tmp%10#0)
                let length%0#0: uint64 = (len text#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%11#0: bytes = (concat value_as_uint16%0#0 text#0)
                return total#0 tmp%11#0
    
    program clear-state:
        subroutine test_cases.arc4_types.tuples.Arc4TuplesTypeContract.clear_state_program() -> bool:
            block@0: // L51
                return 1u