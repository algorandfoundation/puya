#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.mutation.Arc4MutationContract.approval_program() -> uint64:
main:
    intcblock 0 2 1 8
    bytecblock 0x00 0x80 0x00020004000b000548656c6c6f0005576f726c64 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172 0x000548656c6c6f
    pushbytess 0x000280 0x8000 // 0x000280, 0x8000
    intc_1 // 2
    intc_3 // 8
    callsub dynamic_array_concat_bits
    dup
    pushbytes 0x0004a0
    ==
    assert
    dup
    extract 2 0
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    callsub dynamic_array_concat_bits
    dup
    pushbytes 0x0008aa
    ==
    assert
    bytec_1 // 0x80
    intc_2 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    dup
    pushbytes 0x0009aa80
    ==
    assert
    callsub dynamic_array_pop_bit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    bytec_1 // 0x80
    ==
    assert
    callsub dynamic_array_pop_bit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    bytec_0 // 0x00
    ==
    assert
    pushbytes 0x0007aa
    ==
    assert
    bytec_2 // 0x00020004000b000548656c6c6f0005576f726c64
    pushbytes 0x0003466f6f0003426172
    intc_1 // 2
    callsub dynamic_array_concat_byte_length_head
    dup
    pushbytes 0x00040008000f0016001b000548656c6c6f0005576f726c640003466f6f0003426172
    ==
    assert
    dup
    extract 2 0
    dig 1
    intc_0 // 0
    extract_uint16
    dup
    intc_1 // 2
    *
    dig 2
    len
    uncover 3
    cover 2
    substring3
    swap
    callsub dynamic_array_concat_byte_length_head
    bytec_3 // 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
    ==
    assert
    bytec_3 // 0x000800100017001e00230028002f0036003b000548656c6c6f0005576f726c640003466f6f0003426172000548656c6c6f0005576f726c640003466f6f0003426172
    bytec 4 // 0x000548656c6c6f
    pushint 3 // 3
    callsub dynamic_array_replace_byte_length_head
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    >
    assert // index access is out of bounds
    bytec 4 // 0x000548656c6c6f
    pushint 5 // 5
    callsub dynamic_array_replace_byte_length_head
    dup
    pushbytes 0x000800100017001e0023002a00310038003d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f0003466f6f0003426172
    ==
    assert
    callsub dynamic_array_pop_byte_length_head
    swap
    pushbytes 0x0003426172
    ==
    assert
    callsub dynamic_array_pop_byte_length_head
    swap
    pushbytes 0x0003466f6f
    ==
    assert
    pushbytes 0x0006000c0013001a001f0026002d000548656c6c6f0005576f726c640003466f6f000548656c6c6f000548656c6c6f000548656c6c6f
    ==
    assert
    pushbytess 0x0000 0x00010a // 0x0000, 0x00010a
    intc_2 // 1
    callsub dynamic_array_concat_byte_length_head
    dup
    pushbytes 0x0001000200010a
    ==
    assert
    pushbytes 0x000110
    intc_2 // 1
    callsub dynamic_array_concat_byte_length_head
    dup
    pushbytes 0x00020004000700010a000110
    ==
    assert
    dup
    extract 2 0
    dig 1
    intc_0 // 0
    extract_uint16
    assert // index access is out of bounds
    dup
    intc_0 // 0
    extract_uint16
    dup2
    extract_uint16
    intc_1 // 2
    +
    extract3
    dup
    pushbytes 0xff
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    replace2 0
    intc_0 // 0
    callsub dynamic_array_replace_byte_length_head
    dup
    pushbytes 0x00020004000800020aff000110
    ==
    assert
    dup
    extract 2 0
    dig 1
    intc_0 // 0
    extract_uint16
    assert // index access is out of bounds
    dup
    intc_0 // 0
    extract_uint16
    dup2
    extract_uint16
    intc_1 // 2
    +
    extract3
    bytec_0 // 0x00
    replace2 3 // on error: index access is out of bounds
    intc_0 // 0
    callsub dynamic_array_replace_byte_length_head
    pushbytes 0x00020004000800020a00000110
    ==
    assert
    pushbytess 0x00010002000548656c6c6f 0x0005576f726c64 // 0x00010002000548656c6c6f, 0x0005576f726c64
    intc_2 // 1
    callsub dynamic_array_concat_byte_length_head
    bytec_2 // 0x00020004000b000548656c6c6f0005576f726c64
    ==
    assert
    intc_2 // 1
    return


// _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> uint64, bytes:
dynamic_array_pop_bit:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    dup
    itob
    extract 6 0
    frame_dig -1
    swap
    replace2 0
    dig 1
    pushint 16 // 16
    +
    dup2
    getbit
    cover 2
    intc_0 // 0
    setbit
    uncover 2
    pushint 7 // 7
    +
    intc_3 // 8
    /
    intc_1 // 2
    +
    intc_0 // 0
    swap
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_byte_length_head(array: bytes) -> bytes, bytes:
dynamic_array_pop_byte_length_head:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    dup
    intc_1 // 2
    *
    frame_dig -1
    extract 2 0
    dup
    dig 2
    extract_uint16
    dig 1
    len
    dig 2
    dig 2
    uncover 2
    substring3
    dig 2
    intc_0 // 0
    dig 5
    substring3
    uncover 4
    intc_1 // 2
    +
    uncover 4
    swap
    uncover 4
    substring3
    concat
    dig 2
    itob
    extract 6 2
    swap
    uncover 3
    intc_0 // 0
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    pushbytes ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_2 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    swap
    intc_1 // 2
    *
    intc_1 // 2
    +
    dig 1
    itob
    extract 6 2
    frame_dig -3
    intc_1 // 2
    dig 3
    substring3
    frame_dig -1
    intc_1 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 4
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    uncover 2
    intc_0 // 0
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_byte_length_head:
    proto 3 1
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -1
    dig 2
    <
    assert // Index out of bounds
    frame_dig -1
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    dig 1
    +
    intc_1 // 2
    +
    dig 2
    intc_0 // 0
    uncover 3
    substring3
    frame_dig -2
    concat
    dig 2
    len
    swap
    cover 3
    substring3
    concat
    swap
    frame_dig -1
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    proto 3 1
    frame_dig -2
    intc_1 // 2
    *
    dup
    frame_dig -1
    intc_1 // 2
    *
    dup
    cover 2
    frame_dig -3
    swap
    extract_uint16
    frame_dig -1
    select

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    frame_dig 1
    frame_dig 0
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4
    frame_dig 2
    dup
    itob
    extract 6 2
    frame_dig -3
    frame_dig 1
    dup
    cover 4
    uncover 2
    replace3
    dup
    frame_bury -3
    dig 1
    extract_uint16
    intc_1 // 2
    +
    +
    frame_bury 2
    intc_1 // 2
    +
    frame_bury 1
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    frame_dig -3
    frame_bury 0
    retsub
