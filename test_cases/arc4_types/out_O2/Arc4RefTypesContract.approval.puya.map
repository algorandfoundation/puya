{
  "version": 3,
  "sources": [
    "../reference_types.py"
  ],
  "mappings": ";AAOsC;;AACvB;;AAAA;AAAP;AAG+B;;AAAA;AAAA;;AAAb;AAAA;AAAA;;AAAA;AAAA;AAG0B;;AAA5C;;AACO;AAAA;;;AAAsC;AAAA;AAAtC;;;;;AAAP;AAGO;;AAAP;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc4_types.reference_types.Arc4RefTypesContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn Sender"
    },
    "3": {
      "op": "dupn 2",
      "defined_out": [
        "sender_address#0",
        "sender_address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_address#0",
        "sender_address#0 (copy)",
        "tmp%0#0"
      ]
    },
    "5": {
      "op": "==",
      "defined_out": [
        "sender_address#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_address#0",
        "tmp%1#0"
      ]
    },
    "6": {
      "op": "assert",
      "stack_out": [
        "sender_address#0"
      ]
    },
    "7": {
      "op": "txn Sender"
    },
    "9": {
      "op": "dup",
      "defined_out": [
        "checked_address#0",
        "sender_address#0"
      ],
      "stack_out": [
        "sender_address#0",
        "checked_address#0",
        "checked_address#0"
      ]
    },
    "10": {
      "op": "cover 2",
      "defined_out": [
        "checked_address#0",
        "sender_address#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0"
      ]
    },
    "12": {
      "op": "dup",
      "defined_out": [
        "checked_address#0",
        "checked_address#0 (copy)",
        "sender_address#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "checked_address#0 (copy)"
      ]
    },
    "13": {
      "op": "len",
      "defined_out": [
        "checked_address#0",
        "sender_address#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "tmp%2#0"
      ]
    },
    "14": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "checked_address#0",
        "sender_address#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "tmp%2#0",
        "32"
      ]
    },
    "16": {
      "op": "==",
      "defined_out": [
        "checked_address#0",
        "sender_address#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "tmp%3#0"
      ]
    },
    "17": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0"
      ]
    },
    "18": {
      "op": "txn Sender",
      "defined_out": [
        "checked_address#0",
        "sender_address#0",
        "unchecked_address#0"
      ],
      "stack_out": [
        "checked_address#0",
        "sender_address#0",
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "20": {
      "op": "cover 2",
      "defined_out": [
        "checked_address#0",
        "sender_address#0",
        "unchecked_address#0"
      ],
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0",
        "sender_address#0",
        "checked_address#0"
      ]
    },
    "22": {
      "op": "==",
      "defined_out": [
        "checked_address#0",
        "tmp%4#0",
        "unchecked_address#0"
      ],
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0",
        "tmp%4#0"
      ]
    },
    "23": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "26": {
      "op": "dup2"
    },
    "27": {
      "op": "=="
    },
    "28": {
      "op": "bz main_bool_false@3"
    },
    "31": {
      "op": "pushint 1 // 1"
    },
    "33": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "checked_address#0",
        "unchecked_address#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "34": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0",
        "1"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0"
      ]
    },
    "37": {
      "block": "main_bool_false@3",
      "stack_in": [
        "checked_address#0",
        "unchecked_address#0"
      ],
      "op": "pushint 0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "checked_address#0",
        "unchecked_address#0",
        "and_result%0#0"
      ]
    },
    "39": {
      "op": "b main_bool_merge@4"
    }
  }
}