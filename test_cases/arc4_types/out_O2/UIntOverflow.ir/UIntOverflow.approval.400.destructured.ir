main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint8()void" => block@3, method "test_uint16()void" => block@4, method "test_uint32()void" => block@5, * => block@12}
    block@3: // test_uint8_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 256u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let too_big#0: bytes = ((extract 7 1) aggregate%val_as_bytes%0#1)
        let tmp%3#1: bool = (!= too_big#0 0x01)
        (assert tmp%3#1) // this should not happen
        let test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        goto block@13
    block@4: // test_uint16_route_L10
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 65536u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%1#1: uint64 = (bitlen aggregate%val_as_bytes%1#1)
        let aggregate%no_overflow%1#1: bool = (<= aggregate%bitlen%1#1 16u)
        (assert aggregate%no_overflow%1#1) // overflow
        let too_big#0: bytes = ((extract 6 2) aggregate%val_as_bytes%1#1)
        let tmp%3#1: bool = (!= too_big#0 0x0001)
        (assert tmp%3#1) // this should not happen
        let test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        goto block@13
    block@5: // test_uint32_route_L15
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 4294967296u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%2#1: uint64 = (bitlen aggregate%val_as_bytes%2#1)
        let aggregate%no_overflow%2#1: bool = (<= aggregate%bitlen%2#1 32u)
        (assert aggregate%no_overflow%2#1) // overflow
        let too_big#0: bytes = ((extract 4 4) aggregate%val_as_bytes%2#1)
        let tmp%3#1: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#1) // this should not happen
        let test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        goto block@13
    block@8: // bare_routing_L4
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@12 : block@9
    block@9: // __algopy_default_create_L1
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        goto block@13
    block@12: // after_if_else_L4
        let test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router__%0#0
        goto block@13
    block@13: // after_inlined_test_cases.arc4_types.uint_overflow.UIntOverflow.__puya_arc4_router___L1
        return tmp%0#0