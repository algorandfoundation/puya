main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@8, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21][tmp%4#0] else goto block@21
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_uint8()void" => block@3, method "test_uint16()void" => block@4, method "test_uint32()void" => block@5, * => block@7}
    block@3: // test_uint8_route_L5
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#2 256u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let too_big#0: bytes = ((extract 7 1) aggregate%val_as_bytes%0#0)
        let tmp%3#1: bool = (!= too_big#0 0x01)
        (assert tmp%3#1) // this should not happen
        exit 1u
    block@4: // test_uint16_route_L10
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#2 65536u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%1#0: uint64 = (bitlen aggregate%val_as_bytes%1#0)
        let aggregate%no_overflow%1#0: bool = (<= aggregate%bitlen%1#0 16u)
        (assert aggregate%no_overflow%1#0) // overflow
        let too_big#0: bytes = ((extract 6 2) aggregate%val_as_bytes%1#0)
        let tmp%3#1: bool = (!= too_big#0 0x0001)
        (assert tmp%3#1) // this should not happen
        exit 1u
    block@5: // test_uint32_route_L15
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#2 4294967296u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#1)
        let aggregate%bitlen%2#0: uint64 = (bitlen aggregate%val_as_bytes%2#0)
        let aggregate%no_overflow%2#0: bool = (<= aggregate%bitlen%2#0 32u)
        (assert aggregate%no_overflow%2#0) // overflow
        let too_big#0: bytes = ((extract 4 4) aggregate%val_as_bytes%2#0)
        let tmp%3#1: bool = (!= too_big#0 0x00000001)
        (assert tmp%3#1) // this should not happen
        exit 1u
    block@7: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@21: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?