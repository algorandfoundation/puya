#pragma version 10
#pragma typetrack false

// test_cases.arc4_types.array.Arc4ArraysContract.approval_program() -> uint64:
main:
    intcblock 2 1 0 4
    bytecblock "" 0x0004000b000548656c6c6f0005576f726c64 0x0004000a000450696e670004506f6e67 " "
    intc_2 // 0
    bytec_0 // ""
    dupn 2
    intc_2 // 0
    dup

main_for_header@1:
    dup
    intc_0 // 2
    <
    bz main_after_for@4
    pushbytes 0x0102
    dig 1
    dup
    cover 2
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    dig 1
    pushint 3 // 3
    ==
    assert // Total should be sum of dynamic_uint8_array items
    intc_2 // 0
    bury 4

main_for_header@5:
    dig 3
    intc_1 // 1
    <
    bz main_after_for@8
    dig 3
    dup
    intc_0 // 2
    *
    pushbytes 0x0001
    swap
    intc_0 // 2
    extract3 // on error: Index access is out of bounds
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 4
    b main_for_header@5

main_after_for@8:
    dig 1
    intc_3 // 4
    ==
    assert // Total should now include sum of aliased_dynamic items
    bytec_0 // ""
    bury 6
    intc_2 // 0
    bury 5

main_for_header@9:
    dig 4
    intc_0 // 2
    <
    bz main_after_for@15
    dig 4
    dup
    intc_0 // 2
    *
    bytec_1 // 0x0004000b000548656c6c6f0005576f726c64
    swap
    extract_uint16
    bytec_1 // 0x0004000b000548656c6c6f0005576f726c64
    dig 1
    extract_uint16
    intc_0 // 2
    +
    bytec_1 // 0x0004000b000548656c6c6f0005576f726c64
    cover 2
    extract3
    swap
    bnz main_else_body@12
    extract 2 0
    bury 6

main_after_if_else@13:
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@9

main_else_body@12:
    extract 2 0
    bytec_3 // " "
    swap
    concat
    dig 6
    swap
    concat
    bury 6
    b main_after_if_else@13

main_after_for@15:
    dig 5
    pushbytes "Hello World"
    ==
    assert
    intc_2 // 0
    bury 3

main_for_header@16:
    dig 2
    intc_3 // 4
    <
    bz main_after_for@19
    dig 2
    dup
    intc_3 // 4
    *
    pushbytes 0x000000010000000a000000ff00000080
    swap
    intc_3 // 4
    extract3 // on error: Index access is out of bounds
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 3
    b main_for_header@16

main_after_for@19:
    dig 1
    pushint 398 // 398
    ==
    assert
    bytec_0 // ""
    bury 6
    intc_2 // 0
    bury 5

main_for_header@20:
    dig 4
    intc_0 // 2
    <
    bz main_after_for@26
    dig 4
    dup
    intc_0 // 2
    *
    bytec_2 // 0x0004000a000450696e670004506f6e67
    swap
    extract_uint16
    bytec_2 // 0x0004000a000450696e670004506f6e67
    dig 1
    extract_uint16
    intc_0 // 2
    +
    bytec_2 // 0x0004000a000450696e670004506f6e67
    cover 2
    extract3
    swap
    bnz main_else_body@23
    extract 2 0
    bury 6

main_after_if_else@24:
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@20

main_else_body@23:
    extract 2 0
    bytec_3 // " "
    swap
    concat
    dig 6
    swap
    concat
    bury 6
    b main_after_if_else@24

main_after_for@26:
    dig 5
    pushbytes "Ping Pong"
    ==
    assert
    intc_1 // 1
    return
