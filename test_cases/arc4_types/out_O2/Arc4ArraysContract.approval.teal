#pragma version 10

test_cases.arc4_types.array.Arc4ArraysContract.approval_program:
    int 0
    dupn 2
    byte ""
    dupn 4
    int 0
    byte 0x00020102
    int 0
    extract_uint16
    int 0

main_for_header@1:
    dup
    dig 2
    <
    bz main_after_for@4
    byte 0x0102
    dig 1
    dup
    cover 2
    int 1
    extract3
    btoi
    dig 4
    +
    bury 4
    int 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    dig 2
    int 3
    ==
    assert // Total should be sum of dynamic_uint8_array items
    byte 0x00010001
    int 0
    extract_uint16
    bury 8
    int 0
    bury 6

main_for_header@5:
    dig 5
    dig 8
    <
    bz main_after_for@8
    dig 5
    dup
    int 2
    *
    byte 0x0001
    swap
    int 2
    extract3
    btoi
    dig 4
    +
    bury 4
    int 1
    +
    bury 6
    b main_for_header@5

main_after_for@8:
    dig 2
    int 4
    ==
    assert // Total should now include sum of aliased_dynamic items
    byte 0x00020004000b
    byte "\x00\x05Hello"
    concat
    byte "\x00\x05World"
    concat
    dup
    int 0
    extract_uint16
    dup
    bury 6
    dup
    int 2
    ==
    assert
    int 0
    >
    assert // Index access is out of bounds
    extract 2 0
    dup
    bury 12
    dup
    int 0
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    byte "\x00\x05Hello"
    ==
    assert
    byte ""
    bury 10
    int 0
    bury 7

main_for_header@9:
    dig 6
    dig 4
    <
    bz main_after_for@15
    dig 6
    dup
    int 2
    *
    dig 12
    dup
    uncover 2
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    swap
    bnz main_else_body@12
    extract 2 0
    bury 10
    b main_after_if_else@13

main_else_body@12:
    extract 2 0
    byte " "
    swap
    concat
    dig 10
    swap
    concat
    bury 10

main_after_if_else@13:
    dig 6
    int 1
    +
    bury 7
    b main_for_header@9

main_after_for@15:
    dig 9
    byte "Hello World"
    ==
    assert
    int 0
    bury 5

main_for_header@16:
    dig 4
    int 4
    <
    bz main_after_for@19
    dig 4
    dup
    int 4
    *
    byte 0x000000010000000a000000ff00000080
    swap
    int 4
    extract3
    btoi
    dig 4
    +
    bury 4
    int 1
    +
    bury 5
    b main_for_header@16

main_after_for@19:
    dig 2
    int 398
    ==
    assert
    byte 0x65
    btoi
    dup
    +
    int 202
    ==
    assert
    byte 0x0004000a
    byte "\x00\x04Ping"
    concat
    byte "\x00\x04Pong"
    concat
    bury 9
    byte ""
    bury 10
    int 0
    bury 7

main_for_header@20:
    dig 6
    int 2
    <
    bz main_after_for@26
    dig 6
    dup
    int 2
    *
    dig 10
    dup
    uncover 2
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    swap
    bnz main_else_body@23
    extract 2 0
    bury 10
    b main_after_if_else@24

main_else_body@23:
    extract 2 0
    byte " "
    swap
    concat
    dig 10
    swap
    concat
    bury 10

main_after_if_else@24:
    dig 6
    int 1
    +
    bury 7
    b main_for_header@20

main_after_for@26:
    dig 9
    byte "Ping Pong"
    ==
    assert
    byte "Testing 123"
    callsub hash_as_array
    pop
    int 1
    return


// test_cases.arc4_types.array.Arc4ArraysContract.hash_as_array(commitment_args_concat: bytes) -> bytes:
hash_as_array:
    proto 1 1
    frame_dig -1
    sha3_256
    retsub
