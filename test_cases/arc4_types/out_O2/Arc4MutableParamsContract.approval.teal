#pragma version 10

test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.approval_program:
    intcblock 0 1 4 2
    bytecblock 0x01020304 0x05 0x80320006000d00054861707079000444617973 0x000741415252474821
    callsub mutating_copies
    intc_1 // 1
    return


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutating_copies() -> void:
mutating_copies:
    proto 0 0
    bytec_0 // 0x01020304
    bytec_1 // 0x05
    replace2 2
    dup
    extract 2 1 // on error: Index access is out of bounds
    bytec_1 // 0x05
    b==
    assert // my_array should be mutated
    bytec_2 // 0x80320006000d00054861707079000444617973
    callsub other_routine
    uncover 3
    assert
    uncover 2
    !
    assert
    dig 1
    extract 1 1 // on error: Index access is out of bounds
    bytec_1 // 0x05
    b==
    assert // my_array has been mutated by the subroutine
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    intc_2 // 4
    extract_uint16
    substring3
    bytec_3 // 0x000741415252474821
    ==
    assert // my_struct has been mutated by the subroutine
    bytec_0 // 0x01020304
    bytec_2 // 0x80320006000d00054861707079000444617973
    callsub other_routine
    popn 4
    bytec_0 // 0x01020304
    callsub other_routine_2
    pop
    dup
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x01
    b==
    assert // my_array_copy_2 should have original value
    callsub other_routine_2
    bury 1
    dup
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x0a
    b==
    assert // my_array_copy_2 should have mutated value
    dup2
    bytec_0 // 0x01020304
    intc_0 // 0
    intc_1 // 1
    callsub mutate_tuple_items_and_reassign
    popn 3
    bytec_0 // 0x01020304
    pushint 100 // 100
    intc_1 // 1
    callsub mutate_tuple_items_and_reassign
    dig 2
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x64
    b==
    assert
    dig 1
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x65
    b==
    assert
    dup
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x66
    b==
    assert
    dig 2
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x67
    b==
    assert
    dig 1
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x68
    b==
    assert
    dup
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x69
    b==
    assert
    pushint 200 // 200
    intc_0 // 0
    callsub mutate_tuple_items_and_reassign
    dig 2
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0xc8
    b==
    assert
    dig 1
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0xc9
    b==
    assert
    dup
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0xca
    b==
    assert
    dig 2
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0xce
    b==
    assert
    swap
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0xcf
    b==
    assert
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0xd0
    b==
    assert
    extract 0 4 // on error: Index access is out of bounds
    callsub other_routine_2
    popn 2
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine(array: bytes, struct: bytes) -> uint64, uint64, bytes, bytes:
other_routine:
    proto 2 4
    frame_dig -2
    bytec_1 // 0x05
    replace2 1
    frame_bury -2
    frame_dig -1
    intc_3 // 2
    extract_uint16
    frame_dig -1
    intc_0 // 0
    dig 2
    extract3
    frame_dig -1
    intc_2 // 4
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    dig 2
    uncover 2
    substring3
    uncover 2
    bytec_3 // 0x000741415252474821
    concat
    swap
    concat
    swap
    uncover 2
    -
    dig 1
    intc_2 // 4
    extract_uint16
    pushint 9 // 9
    +
    swap
    -
    itob
    extract 6 2
    replace2 4
    frame_bury -1
    intc_1 // 1
    intc_0 // 0
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.other_routine_2(array: bytes) -> bytes, bytes:
other_routine_2:
    proto 1 2
    frame_dig -1
    pushbytes 0x0a
    replace2 0
    frame_dig -1
    swap
    retsub


// test_cases.arc4_types.mutable_params.Arc4MutableParamsContract.mutate_tuple_items_and_reassign(arrays.0: bytes, arrays.1: bytes, arrays.2: bytes, start: uint64, reassign: uint64) -> bytes, bytes, bytes:
mutate_tuple_items_and_reassign:
    proto 5 3
    intc_0 // 0
    dupn 5
    intc_1 // 1
    dupn 2
    frame_dig -2
    itob
    dup
    extract 7 1
    frame_dig -5
    swap
    replace2 0
    frame_bury -5
    frame_dig -2
    intc_1 // 1
    +
    itob
    dup
    extract 7 1
    frame_dig -4
    swap
    replace2 0
    frame_bury -4
    frame_dig -2
    intc_3 // 2
    +
    itob
    dup
    extract 7 1
    frame_dig -3
    swap
    replace2 0
    frame_bury -3
    frame_dig -5
    extract 0 1 // on error: Index access is out of bounds
    uncover 3
    b==
    assert
    frame_dig -4
    extract 0 1 // on error: Index access is out of bounds
    uncover 2
    b==
    assert
    frame_dig -3
    extract 0 1 // on error: Index access is out of bounds
    b==
    assert
    frame_dig -2
    pushint 3 // 3
    +
    itob
    extract 7 1
    frame_dig -5
    swap
    replace2 1
    frame_bury -5
    frame_dig -2
    intc_2 // 4
    +
    itob
    extract 7 1
    frame_dig -4
    swap
    replace2 1
    frame_bury -4
    frame_dig -2
    pushint 5 // 5
    +
    itob
    extract 7 1
    frame_dig -3
    swap
    replace2 1
    dup
    frame_bury -3
    frame_dig -4
    frame_dig -5
    frame_dig -1
    bz mutate_tuple_items_and_reassign_after_if_else@20
    intc_0 // 0
    frame_bury 6
    intc_0 // 0
    frame_bury 7
    intc_0 // 0
    frame_bury 8
    frame_dig -3
    frame_bury 9
    frame_dig -4
    frame_bury 10
    frame_dig -5
    frame_bury 11

mutate_tuple_items_and_reassign_after_if_else@20:
    frame_dig -2
    pushint 6 // 6
    +
    itob
    dup
    frame_bury 3
    extract 7 1
    frame_dig 11
    swap
    replace2 1
    frame_bury 11
    frame_dig -5
    frame_bury 0
    frame_dig 6
    bz mutate_tuple_items_and_reassign_after_if_else@22
    frame_dig 11
    frame_bury 0

mutate_tuple_items_and_reassign_after_if_else@22:
    frame_dig -2
    pushint 7 // 7
    +
    itob
    dup
    frame_bury 4
    extract 7 1
    frame_dig 10
    swap
    replace2 1
    frame_bury 10
    frame_dig -4
    frame_bury 1
    frame_dig 7
    bz mutate_tuple_items_and_reassign_after_if_else@24
    frame_dig 10
    frame_bury 1

mutate_tuple_items_and_reassign_after_if_else@24:
    frame_dig -2
    pushint 8 // 8
    +
    itob
    dup
    frame_bury 5
    extract 7 1
    frame_dig 9
    swap
    replace2 1
    frame_bury 9
    frame_dig -3
    frame_bury 2
    frame_dig 8
    bz mutate_tuple_items_and_reassign_after_if_else@26
    frame_dig 9
    frame_bury 2

mutate_tuple_items_and_reassign_after_if_else@26:
    frame_dig 11
    extract 1 1 // on error: Index access is out of bounds
    frame_dig 3
    b==
    assert
    frame_dig 10
    extract 1 1 // on error: Index access is out of bounds
    frame_dig 4
    b==
    assert
    frame_dig 9
    extract 1 1 // on error: Index access is out of bounds
    frame_dig 5
    b==
    assert
    retsub
