#pragma version 10
#pragma typetrack false

// test_cases.augmented_assignment.contract.Augmented.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "counter" "my_uint" "global_uint" "global_bytes" "my_bytes"
    intc_0 // 0
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    bytec_2 // "global_uint"
    intc_0 // 0
    app_global_put
    bytec_3 // "global_bytes"
    pushbytes 0x
    app_global_put

main_after_if_else@2:
    txn Sender
    bury 1
    txn OnCompletion
    intc_1 // OptIn
    ==
    bz main_after_if_else@5
    dupn 2
    bytec_1 // "my_uint"
    intc_0 // 0
    app_local_put
    bytec 4 // "my_bytes"
    pushbytes 0x
    app_local_put

main_after_if_else@5:
    txn ApplicationID
    bz main_after_if_else@7
    txn NumAppArgs
    dup
    itob
    dig 2
    dup
    cover 2
    intc_0 // 0
    bytec_1 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    dig 3
    +
    dig 2
    bytec_1 // "my_uint"
    uncover 2
    app_local_put
    dig 1
    intc_0 // 0
    bytec 4 // "my_bytes"
    app_local_get_ex
    assert // check self.my_bytes exists for account
    dig 1
    concat
    uncover 2
    bytec 4 // "my_bytes"
    uncover 2
    app_local_put
    intc_0 // 0
    bytec_2 // "global_uint"
    app_global_get_ex
    assert // check self.global_uint exists
    uncover 2
    +
    bytec_2 // "global_uint"
    swap
    app_global_put
    intc_0 // 0
    bytec_3 // "global_bytes"
    app_global_get_ex
    assert // check self.global_bytes exists
    swap
    concat
    bytec_3 // "global_bytes"
    swap
    app_global_put
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    !
    assert
    callsub get_sender_with_side_effect
    dup
    intc_0 // 0
    bytec_1 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    intc_1 // 1
    +
    bytec_1 // "my_uint"
    swap
    app_local_put
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    ==
    assert // this should not error
    callsub get_sender_with_side_effect
    dup
    intc_0 // 0
    bytec_1 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    intc_1 // 1
    -
    bytec_1 // "my_uint"
    swap
    app_local_put
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    pushint 2 // 2
    ==
    assert // this should not error

main_after_if_else@7:
    intc_1 // 1
    return


// test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect() -> bytes:
get_sender_with_side_effect:
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    +
    bytec_0 // "counter"
    swap
    app_global_put
    txn Sender
    retsub
