main test_cases.augmented_assignment.contract.Augmented.approval_program:
    block@0: // L22
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "counter" 0u)
        (app_global_put "global_uint" 0u)
        (app_global_put "global_bytes" 0x)
        goto block@2
    block@2: // after_if_else_L1
        let me#0: account = (txn Sender)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 OptIn)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L26
        (app_local_put me#0 "my_uint" 0u)
        (app_local_put me#0 "my_bytes" 0x)
        goto block@4
    block@4: // after_if_else_L25
        let tmp%4#0: uint64 = (txn ApplicationID)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L30
        let n#0: uint64 = (txn NumAppArgs)
        let bytes_to_add#0: bytes = (itob n#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex me#0 0u "my_uint")
        (assert maybe_exists%0#0) // check self.my_uint exists for account
        let tmp%8#0: uint64 = (+ maybe_value%0#0 n#0)
        (app_local_put me#0 "my_uint" tmp%8#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex me#0 0u "my_bytes")
        (assert maybe_exists%1#0) // check self.my_bytes exists for account
        let tmp%9#0: bytes = (concat maybe_value%1#0 bytes_to_add#0)
        (app_local_put me#0 "my_bytes" tmp%9#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "global_uint")
        (assert maybe_exists%2#0) // check self.global_uint exists
        let tmp%10#0: uint64 = (+ maybe_value%2#0 n#0)
        (app_global_put "global_uint" tmp%10#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "global_bytes")
        (assert maybe_exists%3#0) // check self.global_bytes exists
        let tmp%11#0: bytes = (concat maybe_value%3#0 bytes_to_add#0)
        (app_global_put "global_bytes" tmp%11#0)
        (app_global_put "counter" 0u)
        let tmp%13#0: account = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_local_get_ex tmp%13#0 0u "my_uint")
        (assert maybe_exists%5#0) // check self.my_uint exists for account
        let tmp%14#0: uint64 = (+ maybe_value%5#0 1u)
        (app_local_put tmp%13#0 "my_uint" tmp%14#0)
        let (maybe_value%6#0: uint64, maybe_exists%6#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%6#0) // check self.counter exists
        let tmp%15#0: bool = (== maybe_value%6#0 1u)
        (assert tmp%15#0) // this should not error
        let tmp%16#0: account = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
        let (maybe_value%7#0: uint64, maybe_exists%7#0: bool) = (app_local_get_ex tmp%16#0 0u "my_uint")
        (assert maybe_exists%7#0) // check self.my_uint exists for account
        let tmp%17#0: uint64 = (- maybe_value%7#0 1u)
        (app_local_put tmp%16#0 "my_uint" tmp%17#0)
        let (maybe_value%8#0: uint64, maybe_exists%8#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%8#0) // check self.counter exists
        let tmp%18#0: bool = (== maybe_value%8#0 2u)
        (assert tmp%18#0) // this should not error
        goto block@6
    block@6: // after_if_else_L28
        return 1u

subroutine test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect() -> account:
    block@0: // L53
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "counter" tmp%0#0)
        let tmp%1#0: account = (txn Sender)
        return tmp%1#0