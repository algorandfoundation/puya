// Op                                                            Stack (out)
// test_cases.augmented_assignment.contract.Augmented.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                        tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // augmented_assignment/contract.py:18
        // self.counter = UInt64()
        byte "counter"                                           "counter"
        int 0                                                    "counter",0
        app_global_put
        // augmented_assignment/contract.py:19
        // self.global_uint = UInt64(0)
        byte "global_uint"                                       "global_uint"
        int 0                                                    "global_uint",0
        app_global_put
        // augmented_assignment/contract.py:20
        // self.global_bytes = Bytes(b"")
        byte "global_bytes"                                      "global_bytes"
        byte 0x                                                  "global_bytes",0x
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // augmented_assignment/contract.py:23
        // me = op.Txn.sender
        txn Sender                                               me#0
        v-store me#0
        // augmented_assignment/contract.py:25
        // if op.Txn.on_completion == OnCompleteAction.OptIn:
        txn OnCompletion                                         tmp%1#1
        int OptIn                                                tmp%1#1,OptIn
        ==                                                       tmp%2#0
        bz main_after_if_else@5 ; b main_if_body@4

    main_if_body@4:
        // augmented_assignment/contract.py:26
        // self.my_uint[me] = UInt64(0)
        v-load me#0                                              me#0
        l-store-copy me#0 0                                      me#0,me#0 (copy)
        byte "my_uint"                                           me#0,me#0 (copy),"my_uint"
        int 0                                                    me#0,me#0 (copy),"my_uint",0
        app_local_put                                            me#0
        // augmented_assignment/contract.py:27
        // self.my_bytes[me] = Bytes(b"")
        l-load me#0 0                                            me#0
        byte "my_bytes"                                          me#0,"my_bytes"
        byte 0x                                                  me#0,"my_bytes",0x
        app_local_put
        b main_after_if_else@5

    main_after_if_else@5:
        // augmented_assignment/contract.py:28
        // if op.Txn.application_id:
        txn ApplicationID                                        reinterpret_bool%0#0
        bz main_after_if_else@7 ; b main_if_body@6

    main_if_body@6:
        // augmented_assignment/contract.py:30
        // n = op.Txn.num_app_args
        txn NumAppArgs                                           n#0
        // augmented_assignment/contract.py:31
        // bytes_to_add = BigUInt(n).bytes
        l-load-copy n#0 0                                        n#0,n#0 (copy)
        itob                                                     n#0,bytes_to_add#0
        // augmented_assignment/contract.py:34
        // self.my_uint[me] += n
        v-load me#0                                              n#0,bytes_to_add#0,me#0
        l-store-copy me#0 1                                      n#0,me#0,bytes_to_add#0,me#0 (copy)
        int 0                                                    n#0,me#0,bytes_to_add#0,me#0 (copy),0
        byte "my_uint"                                           n#0,me#0,bytes_to_add#0,me#0 (copy),0,"my_uint"
        app_local_get_ex                                         n#0,me#0,bytes_to_add#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.my_uint exists for account          n#0,me#0,bytes_to_add#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                 n#0,me#0,bytes_to_add#0,maybe_value%0#0
        l-load-copy n#0 3                                        n#0,me#0,bytes_to_add#0,maybe_value%0#0,n#0 (copy)
        +                                                        n#0,me#0,bytes_to_add#0,tmp%5#0
        l-load-copy me#0 2                                       n#0,me#0,bytes_to_add#0,tmp%5#0,me#0 (copy)
        byte "my_uint"                                           n#0,me#0,bytes_to_add#0,tmp%5#0,me#0 (copy),"my_uint"
        l-load tmp%5#0 2                                         n#0,me#0,bytes_to_add#0,me#0 (copy),"my_uint",tmp%5#0
        app_local_put                                            n#0,me#0,bytes_to_add#0
        // augmented_assignment/contract.py:35
        // self.my_bytes[me] += bytes_to_add
        l-load-copy me#0 1                                       n#0,me#0,bytes_to_add#0,me#0 (copy)
        int 0                                                    n#0,me#0,bytes_to_add#0,me#0 (copy),0
        byte "my_bytes"                                          n#0,me#0,bytes_to_add#0,me#0 (copy),0,"my_bytes"
        app_local_get_ex                                         n#0,me#0,bytes_to_add#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.my_bytes exists for account         n#0,me#0,bytes_to_add#0,maybe_value%1#0
        l-load maybe_value%1#0 0                                 n#0,me#0,bytes_to_add#0,maybe_value%1#0
        l-load-copy bytes_to_add#0 1                             n#0,me#0,bytes_to_add#0,maybe_value%1#0,bytes_to_add#0 (copy)
        concat                                                   n#0,me#0,bytes_to_add#0,tmp%6#0
        l-load me#0 2                                            n#0,bytes_to_add#0,tmp%6#0,me#0
        byte "my_bytes"                                          n#0,bytes_to_add#0,tmp%6#0,me#0,"my_bytes"
        l-load tmp%6#0 2                                         n#0,bytes_to_add#0,me#0,"my_bytes",tmp%6#0
        app_local_put                                            n#0,bytes_to_add#0
        // augmented_assignment/contract.py:38
        // self.global_uint += n
        int 0                                                    n#0,bytes_to_add#0,0
        byte "global_uint"                                       n#0,bytes_to_add#0,0,"global_uint"
        app_global_get_ex                                        n#0,bytes_to_add#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.global_uint exists                  n#0,bytes_to_add#0,maybe_value%2#0
        l-load maybe_value%2#0 0                                 n#0,bytes_to_add#0,maybe_value%2#0
        l-load n#0 2                                             bytes_to_add#0,maybe_value%2#0,n#0
        +                                                        bytes_to_add#0,tmp%7#0
        byte "global_uint"                                       bytes_to_add#0,tmp%7#0,"global_uint"
        l-load tmp%7#0 1                                         bytes_to_add#0,"global_uint",tmp%7#0
        app_global_put                                           bytes_to_add#0
        // augmented_assignment/contract.py:39
        // self.global_bytes += bytes_to_add
        int 0                                                    bytes_to_add#0,0
        byte "global_bytes"                                      bytes_to_add#0,0,"global_bytes"
        app_global_get_ex                                        bytes_to_add#0,maybe_value%3#0,maybe_exists%3#0
        assert // check self.global_bytes exists                 bytes_to_add#0,maybe_value%3#0
        l-load maybe_value%3#0 0                                 bytes_to_add#0,maybe_value%3#0
        l-load bytes_to_add#0 1                                  maybe_value%3#0,bytes_to_add#0
        concat                                                   tmp%8#0
        byte "global_bytes"                                      tmp%8#0,"global_bytes"
        l-load tmp%8#0 1                                         "global_bytes",tmp%8#0
        app_global_put
        // augmented_assignment/contract.py:41
        // self.counter = UInt64()
        byte "counter"                                           "counter"
        int 0                                                    "counter",0
        app_global_put
        // augmented_assignment/contract.py:43
        // self.my_uint[self.get_sender_with_side_effect()] += 1
        callsub get_sender_with_side_effect                      tmp%10#0
        l-load-copy tmp%10#0 0                                   tmp%10#0,tmp%10#0 (copy)
        int 0                                                    tmp%10#0,tmp%10#0 (copy),0
        byte "my_uint"                                           tmp%10#0,tmp%10#0 (copy),0,"my_uint"
        app_local_get_ex                                         tmp%10#0,maybe_value%5#0,maybe_exists%5#0
        assert // check self.my_uint exists for account          tmp%10#0,maybe_value%5#0
        l-load maybe_value%5#0 0                                 tmp%10#0,maybe_value%5#0
        int 1                                                    tmp%10#0,maybe_value%5#0,1
        +                                                        tmp%10#0,tmp%11#0
        l-load tmp%10#0 1                                        tmp%11#0,tmp%10#0
        byte "my_uint"                                           tmp%11#0,tmp%10#0,"my_uint"
        l-load tmp%11#0 2                                        tmp%10#0,"my_uint",tmp%11#0
        app_local_put
        // augmented_assignment/contract.py:44
        // assert self.counter == 1, "this should not error"
        int 0                                                    0
        byte "counter"                                           0,"counter"
        app_global_get_ex                                        maybe_value%6#0,maybe_exists%6#0
        assert // check self.counter exists                      maybe_value%6#0
        l-load maybe_value%6#0 0                                 maybe_value%6#0
        int 1                                                    maybe_value%6#0,1
        ==                                                       tmp%12#0
        assert // this should not error
        // augmented_assignment/contract.py:45
        // self.my_uint[self.get_sender_with_side_effect()] -= 1
        callsub get_sender_with_side_effect                      tmp%13#0
        l-load-copy tmp%13#0 0                                   tmp%13#0,tmp%13#0 (copy)
        int 0                                                    tmp%13#0,tmp%13#0 (copy),0
        byte "my_uint"                                           tmp%13#0,tmp%13#0 (copy),0,"my_uint"
        app_local_get_ex                                         tmp%13#0,maybe_value%7#0,maybe_exists%7#0
        assert // check self.my_uint exists for account          tmp%13#0,maybe_value%7#0
        l-load maybe_value%7#0 0                                 tmp%13#0,maybe_value%7#0
        int 1                                                    tmp%13#0,maybe_value%7#0,1
        -                                                        tmp%13#0,tmp%14#0
        l-load tmp%13#0 1                                        tmp%14#0,tmp%13#0
        byte "my_uint"                                           tmp%14#0,tmp%13#0,"my_uint"
        l-load tmp%14#0 2                                        tmp%13#0,"my_uint",tmp%14#0
        app_local_put
        // augmented_assignment/contract.py:46
        // assert self.counter == 2, "this should not error"
        int 0                                                    0
        byte "counter"                                           0,"counter"
        app_global_get_ex                                        maybe_value%8#0,maybe_exists%8#0
        assert // check self.counter exists                      maybe_value%8#0
        l-load maybe_value%8#0 0                                 maybe_value%8#0
        int 2                                                    maybe_value%8#0,2
        ==                                                       tmp%15#0
        assert // this should not error
        b main_after_if_else@7

    main_after_if_else@7:
        // augmented_assignment/contract.py:48
        // return True
        int 1                                                    1
        return


// test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect() -> bytes:
subroutine get_sender_with_side_effect:
    get_sender_with_side_effect_block@0:
        // augmented_assignment/contract.py:55
        // self.counter += 1
        int 0                                                    0
        byte "counter"                                           0,"counter"
        app_global_get_ex                                        maybe_value%0#0,maybe_exists%0#0
        assert // check self.counter exists                      maybe_value%0#0
        l-load maybe_value%0#0 0                                 maybe_value%0#0
        int 1                                                    maybe_value%0#0,1
        +                                                        tmp%0#0
        byte "counter"                                           tmp%0#0,"counter"
        l-load tmp%0#0 1                                         "counter",tmp%0#0
        app_global_put
        // augmented_assignment/contract.py:56
        // return op.Txn.sender
        txn Sender                                               tmp%1#0
        retsub                                                   tmp%1#0


