contract Augmented
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  globals {
    ['counter']: uint64
    ['global_uint']: uint64
    ['global_bytes']: bytes
  }
  locals {
    ['my_uint']: uint64
    ['my_bytes']: bytes
  }
  
  subroutine test_cases.augmented_assignment.contract.Augmented.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    me: account = txn<Sender>()
    if (txn<OnCompletion>() == OptIn) {
      LocalState['my_uint', me]: uint64 = 0u
      LocalState['my_bytes', me]: bytes = hex<"">
    }
    if (reinterpret_cast<uint64>(txn<ApplicationID>()) != 0u) {
      n: uint64 = txn<NumAppArgs>()
      bytes_to_add: bytes = reinterpret_cast<bytes>(itob(n))
      LocalState['my_uint', me] += n
      LocalState['my_bytes', me] += bytes_to_add
      GlobalState['global_uint'] += n
      GlobalState['global_bytes'] += bytes_to_add
      GlobalState['counter']: uint64 = 0u
      assert(GlobalState['counter'] == 0u)
      LocalState['my_uint', this::get_sender_with_side_effect()] += 1u
      assert(GlobalState['counter'] == 1u, comment="this should not error")
      LocalState['my_uint', this::get_sender_with_side_effect()] -= 1u
      assert(GlobalState['counter'] == 2u, comment="this should not error")
    }
    return true
  }
  
  subroutine test_cases.augmented_assignment.contract.Augmented.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.augmented_assignment.contract.Augmented.__init__(): void
  {
    GlobalState['counter']: uint64 = 0u
    GlobalState['global_uint']: uint64 = 0u
    GlobalState['global_bytes']: bytes = hex<"">
  }
  
  subroutine test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect(): account
  {
    GlobalState['counter'] += 1u
    return txn<Sender>()
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}