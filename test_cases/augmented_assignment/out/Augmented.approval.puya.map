{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBQ;AAAe;AAAf;AACA;AAAmB;AAAnB;AACA;AAAoB;;AAApB;AAGK;;AAAL;;AAEG;;AAAwB;AAAxB;AAAX;;;AACY;;AAAA;AAAmB;AAAnB;AACA;;AAAoB;;AAApB;AACD;;AAAX;;;AAEgB;;AACJ;AAAe;AAGf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAe;AAAf;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AACa;;;AAAb;AAAA;AAAA;AAAA;AAAA;AAAoD;AAApD;AAAA;AAAA;AAAA;AACO;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAP;AACa;;;AAAb;AAAA;AAAA;AAAA;AAAA;AAAoD;AAApD;AAAA;AAAA;AAAA;AACO;AAAA;AAAA;AAAA;AAAgB;;AAAhB;AAAP;AAEG;;AAOP;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAA;AAAA;AAAA;AACO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.augmented_assignment.contract.Augmented.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"counter\" \"my_uint\" \"global_uint\" \"global_bytes\" \"my_bytes\""
    },
    "57": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0"
      ]
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "me#0"
      ]
    },
    "63": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "me#0",
        "\"counter\""
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "me#0",
        "\"counter\"",
        "0"
      ]
    },
    "65": {
      "op": "app_global_put",
      "stack_out": [
        "me#0"
      ]
    },
    "66": {
      "op": "bytec_2 // \"global_uint\"",
      "defined_out": [
        "\"global_uint\""
      ],
      "stack_out": [
        "me#0",
        "\"global_uint\""
      ]
    },
    "67": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "\"global_uint\"",
        "0"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": [
        "me#0"
      ]
    },
    "69": {
      "op": "bytec_3 // \"global_bytes\"",
      "defined_out": [
        "\"global_bytes\""
      ],
      "stack_out": [
        "me#0",
        "\"global_bytes\""
      ]
    },
    "70": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"global_bytes\"",
        "0x"
      ],
      "stack_out": [
        "me#0",
        "\"global_bytes\"",
        "0x"
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": [
        "me#0"
      ]
    },
    "73": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "me#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "me#0"
      ]
    },
    "75": {
      "op": "bury 1",
      "defined_out": [
        "me#0"
      ],
      "stack_out": [
        "me#0"
      ]
    },
    "77": {
      "op": "txn OnCompletion",
      "defined_out": [
        "me#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "me#0",
        "tmp%0#1"
      ]
    },
    "79": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "me#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "me#0",
        "tmp%0#1",
        "OptIn"
      ]
    },
    "80": {
      "op": "==",
      "defined_out": [
        "me#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "me#0",
        "tmp%1#1"
      ]
    },
    "81": {
      "op": "bz main_after_if_else@5",
      "stack_out": [
        "me#0"
      ]
    },
    "84": {
      "op": "dupn 2",
      "defined_out": [
        "me#0",
        "me#0 (copy)"
      ],
      "stack_out": [
        "me#0",
        "me#0",
        "me#0 (copy)"
      ]
    },
    "86": {
      "op": "bytec_1 // \"my_uint\"",
      "defined_out": [
        "\"my_uint\"",
        "me#0",
        "me#0 (copy)"
      ],
      "stack_out": [
        "me#0",
        "me#0",
        "me#0 (copy)",
        "\"my_uint\""
      ]
    },
    "87": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "me#0",
        "me#0 (copy)",
        "\"my_uint\"",
        "0"
      ]
    },
    "88": {
      "op": "app_local_put",
      "stack_out": [
        "me#0",
        "me#0"
      ]
    },
    "89": {
      "op": "bytec 4 // \"my_bytes\"",
      "defined_out": [
        "\"my_bytes\"",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "me#0",
        "\"my_bytes\""
      ]
    },
    "91": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"my_bytes\"",
        "0x",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "me#0",
        "\"my_bytes\"",
        "0x"
      ]
    },
    "93": {
      "op": "app_local_put",
      "stack_out": [
        "me#0"
      ]
    },
    "94": {
      "block": "main_after_if_else@5",
      "stack_in": [
        "me#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "me#0",
        "reinterpret_bool%0#0"
      ]
    },
    "96": {
      "op": "bz main_after_if_else@7",
      "stack_out": [
        "me#0"
      ]
    },
    "99": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0"
      ]
    },
    "101": {
      "op": "dup",
      "defined_out": [
        "n#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "n#0 (copy)"
      ]
    },
    "102": {
      "op": "itob",
      "defined_out": [
        "bytes_to_add#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0"
      ]
    },
    "103": {
      "op": "dig 2",
      "defined_out": [
        "bytes_to_add#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "me#0"
      ]
    },
    "105": {
      "op": "dup",
      "defined_out": [
        "bytes_to_add#0",
        "me#0",
        "me#0 (copy)",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "me#0 (copy)"
      ]
    },
    "106": {
      "op": "cover 2",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bytes_to_add#0",
        "me#0",
        "me#0 (copy)",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "0"
      ]
    },
    "109": {
      "op": "bytec_1 // \"my_uint\"",
      "defined_out": [
        "\"my_uint\"",
        "0",
        "bytes_to_add#0",
        "me#0",
        "me#0 (copy)",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "0",
        "\"my_uint\""
      ]
    },
    "110": {
      "op": "app_local_get_ex",
      "defined_out": [
        "bytes_to_add#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "111": {
      "error": "check self.my_uint exists for account",
      "op": "assert // check self.my_uint exists for account",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%0#0"
      ]
    },
    "112": {
      "op": "dig 3",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%0#0",
        "n#0 (copy)"
      ]
    },
    "114": {
      "op": "+",
      "defined_out": [
        "bytes_to_add#0",
        "materialized_values%0#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "materialized_values%0#0"
      ]
    },
    "115": {
      "op": "dig 2",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "materialized_values%0#0",
        "me#0 (copy)"
      ]
    },
    "117": {
      "op": "bytec_1 // \"my_uint\"",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "materialized_values%0#0",
        "me#0 (copy)",
        "\"my_uint\""
      ]
    },
    "118": {
      "op": "uncover 2",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "\"my_uint\"",
        "materialized_values%0#0"
      ]
    },
    "120": {
      "op": "app_local_put",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0"
      ]
    },
    "121": {
      "op": "dig 1",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)"
      ]
    },
    "123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "0"
      ]
    },
    "124": {
      "op": "bytec 4 // \"my_bytes\"",
      "defined_out": [
        "\"my_bytes\"",
        "0",
        "bytes_to_add#0",
        "me#0",
        "me#0 (copy)",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "me#0 (copy)",
        "0",
        "\"my_bytes\""
      ]
    },
    "126": {
      "op": "app_local_get_ex",
      "defined_out": [
        "bytes_to_add#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "127": {
      "error": "check self.my_bytes exists for account",
      "op": "assert // check self.my_bytes exists for account",
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%1#0"
      ]
    },
    "128": {
      "op": "dig 1",
      "defined_out": [
        "bytes_to_add#0",
        "bytes_to_add#0 (copy)",
        "maybe_value%1#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "maybe_value%1#0",
        "bytes_to_add#0 (copy)"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "bytes_to_add#0",
        "materialized_values%1#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "me#0",
        "bytes_to_add#0",
        "materialized_values%1#0"
      ]
    },
    "131": {
      "op": "uncover 2",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "materialized_values%1#0",
        "me#0"
      ]
    },
    "133": {
      "op": "bytec 4 // \"my_bytes\"",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "materialized_values%1#0",
        "me#0",
        "\"my_bytes\""
      ]
    },
    "135": {
      "op": "uncover 2",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "me#0",
        "\"my_bytes\"",
        "materialized_values%1#0"
      ]
    },
    "137": {
      "op": "app_local_put",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0"
      ]
    },
    "138": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "0"
      ]
    },
    "139": {
      "op": "bytec_2 // \"global_uint\"",
      "defined_out": [
        "\"global_uint\"",
        "0",
        "bytes_to_add#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "0",
        "\"global_uint\""
      ]
    },
    "140": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bytes_to_add#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "me#0",
        "n#0"
      ],
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "141": {
      "error": "check self.global_uint exists",
      "op": "assert // check self.global_uint exists",
      "stack_out": [
        "me#0",
        "n#0",
        "bytes_to_add#0",
        "maybe_value%2#0"
      ]
    },
    "142": {
      "op": "uncover 2",
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "maybe_value%2#0",
        "n#0"
      ]
    },
    "144": {
      "op": "+",
      "defined_out": [
        "bytes_to_add#0",
        "materialized_values%2#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "materialized_values%2#0"
      ]
    },
    "145": {
      "op": "bytec_2 // \"global_uint\"",
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "materialized_values%2#0",
        "\"global_uint\""
      ]
    },
    "146": {
      "op": "swap",
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "\"global_uint\"",
        "materialized_values%2#0"
      ]
    },
    "147": {
      "op": "app_global_put",
      "stack_out": [
        "me#0",
        "bytes_to_add#0"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "0"
      ]
    },
    "149": {
      "op": "bytec_3 // \"global_bytes\"",
      "defined_out": [
        "\"global_bytes\"",
        "0",
        "bytes_to_add#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "0",
        "\"global_bytes\""
      ]
    },
    "150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bytes_to_add#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "151": {
      "error": "check self.global_bytes exists",
      "op": "assert // check self.global_bytes exists",
      "stack_out": [
        "me#0",
        "bytes_to_add#0",
        "maybe_value%3#0"
      ]
    },
    "152": {
      "op": "swap",
      "stack_out": [
        "me#0",
        "maybe_value%3#0",
        "bytes_to_add#0"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "materialized_values%3#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "materialized_values%3#0"
      ]
    },
    "154": {
      "op": "bytec_3 // \"global_bytes\"",
      "stack_out": [
        "me#0",
        "materialized_values%3#0",
        "\"global_bytes\""
      ]
    },
    "155": {
      "op": "swap",
      "stack_out": [
        "me#0",
        "\"global_bytes\"",
        "materialized_values%3#0"
      ]
    },
    "156": {
      "op": "app_global_put",
      "stack_out": [
        "me#0"
      ]
    },
    "157": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "\"counter\""
      ]
    },
    "158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "\"counter\"",
        "0"
      ]
    },
    "159": {
      "op": "app_global_put",
      "stack_out": [
        "me#0"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "0"
      ]
    },
    "161": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "me#0",
        "0",
        "\"counter\""
      ]
    },
    "162": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "163": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "me#0",
        "maybe_value%4#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "me#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%2#0"
      ]
    },
    "165": {
      "op": "assert",
      "stack_out": [
        "me#0"
      ]
    },
    "166": {
      "callsub": "test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect",
      "op": "callsub get_sender_with_side_effect",
      "defined_out": [
        "me#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%3#0"
      ]
    },
    "169": {
      "op": "dup",
      "defined_out": [
        "me#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "170": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0"
      ]
    },
    "171": {
      "op": "bytec_1 // \"my_uint\"",
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0",
        "\"my_uint\""
      ]
    },
    "172": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "me#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "173": {
      "error": "check self.my_uint exists for account",
      "op": "assert // check self.my_uint exists for account",
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "maybe_value%5#0"
      ]
    },
    "174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0",
        "me#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "175": {
      "op": "+",
      "defined_out": [
        "materialized_values%4#0",
        "me#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "materialized_values%4#0"
      ]
    },
    "176": {
      "op": "bytec_1 // \"my_uint\""
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "me#0",
        "tmp%3#0",
        "\"my_uint\"",
        "materialized_values%4#0"
      ]
    },
    "178": {
      "op": "app_local_put",
      "stack_out": [
        "me#0"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "0"
      ]
    },
    "180": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "me#0",
        "0",
        "\"counter\""
      ]
    },
    "181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "182": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "me#0",
        "maybe_value%6#0"
      ]
    },
    "183": {
      "op": "intc_1 // 1",
      "stack_out": [
        "me#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "me#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%4#0"
      ]
    },
    "185": {
      "error": "this should not error",
      "op": "assert // this should not error",
      "stack_out": [
        "me#0"
      ]
    },
    "186": {
      "callsub": "test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect",
      "op": "callsub get_sender_with_side_effect",
      "defined_out": [
        "me#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%5#0"
      ]
    },
    "189": {
      "op": "dup",
      "defined_out": [
        "me#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0"
      ]
    },
    "191": {
      "op": "bytec_1 // \"my_uint\"",
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0",
        "\"my_uint\""
      ]
    },
    "192": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "me#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "193": {
      "error": "check self.my_uint exists for account",
      "op": "assert // check self.my_uint exists for account",
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "maybe_value%7#0"
      ]
    },
    "194": {
      "op": "intc_1 // 1",
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "195": {
      "op": "-",
      "defined_out": [
        "materialized_values%5#0",
        "me#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "materialized_values%5#0"
      ]
    },
    "196": {
      "op": "bytec_1 // \"my_uint\""
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "me#0",
        "tmp%5#0",
        "\"my_uint\"",
        "materialized_values%5#0"
      ]
    },
    "198": {
      "op": "app_local_put",
      "stack_out": [
        "me#0"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "me#0",
        "0"
      ]
    },
    "200": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "me#0",
        "0",
        "\"counter\""
      ]
    },
    "201": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "202": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "me#0",
        "maybe_value%8#0"
      ]
    },
    "203": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%8#0",
        "me#0"
      ],
      "stack_out": [
        "me#0",
        "maybe_value%8#0",
        "2"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "me#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "me#0",
        "tmp%6#0"
      ]
    },
    "206": {
      "error": "this should not error",
      "op": "assert // this should not error",
      "stack_out": [
        "me#0"
      ]
    },
    "207": {
      "block": "main_after_if_else@7",
      "stack_in": [
        "me#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "me#0",
        "1"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": [
        "me#0"
      ]
    },
    "209": {
      "subroutine": "test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect",
      "params": {},
      "block": "get_sender_with_side_effect",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "210": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "212": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "213": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "214": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "215": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"counter\""
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "217": {
      "op": "app_global_put",
      "stack_out": []
    },
    "218": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "retsub": true,
      "op": "retsub"
    }
  }
}