contract test_cases.augmented_assignment.contract.Augmented:
    program approval:
        subroutine test_cases.augmented_assignment.contract.Augmented.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = (txn ApplicationID)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // call __init___L1
                test_cases.augmented_assignment.contract.Augmented.__init__()
                goto block@2
            block@2: // after_if_else_L1
                let me#0: bytes = (txn Sender)
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (== tmp%1#0 OptIn)
                goto tmp%2#0 ? block@3 : block@4
            block@3: // if_body_L26
                (app_local_put me#0 "my_uint" 0u)
                (app_local_put me#0 "my_bytes" 0x)
                goto block@4
            block@4: // after_if_else_L25
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@5 : block@6
            block@5: // if_body_L30
                let n#0: uint64 = (txn NumAppArgs)
                let reinterpret_bytes%0#0: bytes = (itob n#0)
                let bytes_to_add#0: bytes = reinterpret_bytes%0#0
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex me#0 0u "my_uint")
                (assert maybe_exists%0#0) // check self.my_uint exists for account
                let new_state_value%0#0: uint64 = (+ maybe_value%0#0 n#0)
                (app_local_put me#0 "my_uint" new_state_value%0#0)
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex me#0 0u "my_bytes")
                (assert maybe_exists%1#0) // check self.my_bytes exists for account
                let new_state_value%1#0: bytes = (concat maybe_value%1#0 bytes_to_add#0)
                (app_local_put me#0 "my_bytes" new_state_value%1#0)
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "global_uint")
                (assert maybe_exists%2#0) // check self.global_uint exists
                let new_state_value%2#0: uint64 = (+ maybe_value%2#0 n#0)
                (app_global_put "global_uint" new_state_value%2#0)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "global_bytes")
                (assert maybe_exists%3#0) // check self.global_bytes exists
                let new_state_value%3#0: bytes = (concat maybe_value%3#0 bytes_to_add#0)
                (app_global_put "global_bytes" new_state_value%3#0)
                (app_global_put "counter" 0u)
                let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%4#0) // check self.counter exists
                let tmp%3#0: bool = (== maybe_value%4#0 0u)
                (assert tmp%3#0)
                let tmp%4#0: bytes = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
                let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_local_get_ex tmp%4#0 0u "my_uint")
                (assert maybe_exists%5#0) // check self.my_uint exists for account
                let tmp%5#0: bytes = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
                let new_state_value%4#0: uint64 = (+ maybe_value%5#0 1u)
                (app_local_put tmp%5#0 "my_uint" new_state_value%4#0)
                let (maybe_value%6#0: uint64, maybe_exists%6#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%6#0) // check self.counter exists
                let tmp%6#0: bool = (== maybe_value%6#0 1u)
                (assert tmp%6#0) // this should not error
                let tmp%7#0: bytes = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
                let (maybe_value%7#0: uint64, maybe_exists%7#0: bool) = (app_local_get_ex tmp%7#0 0u "my_uint")
                (assert maybe_exists%7#0) // check self.my_uint exists for account
                let tmp%8#0: bytes = test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect()
                let new_state_value%5#0: uint64 = (- maybe_value%7#0 1u)
                (app_local_put tmp%8#0 "my_uint" new_state_value%5#0)
                let (maybe_value%8#0: uint64, maybe_exists%8#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%8#0) // check self.counter exists
                let tmp%9#0: bool = (== maybe_value%8#0 2u)
                (assert tmp%9#0) // this should not error
                goto block@6
            block@6: // after_if_else_L28
                return 1u
        
        subroutine test_cases.augmented_assignment.contract.Augmented.__init__() -> void:
            block@0: // L15
                (app_global_put "counter" 0u)
                (app_global_put "global_uint" 0u)
                (app_global_put "global_bytes" 0x)
                return 
        
        subroutine test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect() -> bytes:
            block@0: // L53
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%0#0) // check self.counter exists
                let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
                (app_global_put "counter" new_state_value%0#0)
                let tmp%0#0: bytes = (txn Sender)
                return tmp%0#0
    
    program clear-state:
        subroutine test_cases.augmented_assignment.contract.Augmented.clear_state_program() -> bool:
            block@0: // L50
                return 1u