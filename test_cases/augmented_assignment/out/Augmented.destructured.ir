contract test_cases.augmented_assignment.contract.Augmented:
    program approval:
        subroutine test_cases.augmented_assignment.contract.Augmented.approval_program() -> bool:
            block@0: // L19
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L13
                test_cases.augmented_assignment.contract.Augmented.__init__()
                goto block@2
            block@2: // entrypoint_L13
                let me#0: bytes = (txn Sender)
                let tmp%0#0: uint64 = (txn OnCompletion)
                let tmp%1#0: bool = (== tmp%0#0 OptIn)
                goto tmp%1#0 ? block@3 : block@4
            block@3: // if_body_L22
                (app_local_put me#0 "my_uint" 0u)
                (app_local_put me#0 "my_bytes" 0x)
                goto block@4
            block@4: // after_if_else_L22
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@5 : block@6
            block@5: // if_body_L25
                let n#0: uint64 = (txn NumAppArgs)
                let bytes_to_add#0: bytes = (itob n#0)
                let (my_uint_value%0#0: uint64, my_uint_exists%0#0: bool) = (app_local_get_ex me#0 0u "my_uint")
                (assert my_uint_exists%0#0) // check my_uint exists for account
                let new_state_value%0#0: uint64 = (+ my_uint_value%0#0 n#0)
                (app_local_put me#0 "my_uint" new_state_value%0#0)
                let (my_bytes_value%0#0: bytes, my_bytes_exists%0#0: bool) = (app_local_get_ex me#0 0u "my_bytes")
                (assert my_bytes_exists%0#0) // check my_bytes exists for account
                let new_state_value%1#0: bytes = (concat my_bytes_value%0#0 bytes_to_add#0)
                (app_local_put me#0 "my_bytes" new_state_value%1#0)
                let (global_uint_value%0#0: uint64, global_uint_exists%0#0: bool) = (app_global_get_ex 0u "global_uint")
                (assert global_uint_exists%0#0) // check global_uint exists
                let new_state_value%2#0: uint64 = (+ global_uint_value%0#0 n#0)
                (app_global_put "global_uint" new_state_value%2#0)
                let (global_bytes_value%0#0: bytes, global_bytes_exists%0#0: bool) = (app_global_get_ex 0u "global_bytes")
                (assert global_bytes_exists%0#0) // check global_bytes exists
                let new_state_value%3#0: bytes = (concat global_bytes_value%0#0 bytes_to_add#0)
                (app_global_put "global_bytes" new_state_value%3#0)
                goto block@6
            block@6: // after_if_else_L25
                return 1u
        
        subroutine test_cases.augmented_assignment.contract.Augmented.__init__() -> void:
            block@0: // L13
                (app_global_put "global_uint" 0u)
                (app_global_put "global_bytes" 0x)
                return 
    
    program clear-state:
        subroutine test_cases.augmented_assignment.contract.Augmented.clear_state_program() -> bool:
            block@0: // L40
                return 1u