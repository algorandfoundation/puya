// Op                                                     Stack (out)
// test_cases.augmented_assignment.contract.Augmented.approval_program() -> uint64:
main:
    allocate 1 to stack                                   (𝕗) me#0 |

main_block@0:                                             (𝕗) me#0 |
    txn ApplicationID                                     (𝕗) me#0 | app_id%0#0
    bnz main_after_if_else@2                              (𝕗) me#0 |
    // Implicit fall through to main_on_create@1          (𝕗) me#0 |

main_on_create@1:                                         (𝕗) me#0 |
    callsub __init__                                      (𝕗) me#0 |
    // Implicit fall through to main_after_if_else@2      (𝕗) me#0 |

main_after_if_else@2:                                     (𝕗) me#0 |
    // augmented_assignment/contract.py:20
    // me = op.Txn.sender
    txn Sender                                            (𝕗) me#0 | me#0
    f-store me#0                                          (𝕗) me#0 |
    // augmented_assignment/contract.py:22
    // if op.Txn.on_completion == OnCompleteAction.OptIn:
    txn OnCompletion                                      (𝕗) me#0 | tmp%0#0
    int OptIn                                             (𝕗) me#0 | tmp%0#0,OptIn
    ==                                                    (𝕗) me#0 | tmp%1#0
    bz main_after_if_else@4                               (𝕗) me#0 |
    // Implicit fall through to main_if_body@3            (𝕗) me#0 |

main_if_body@3:                                           (𝕗) me#0 |
    // augmented_assignment/contract.py:23
    // self.my_uint[me] = UInt64(0)
    f-load me#0                                           (𝕗) me#0 | me#0
    l-store-copy me#0 0                                   (𝕗) me#0 | me#0,me#0 (copy)
    byte "my_uint"                                        (𝕗) me#0 | me#0,me#0 (copy),"my_uint"
    int 0                                                 (𝕗) me#0 | me#0,me#0 (copy),"my_uint",0
    app_local_put                                         (𝕗) me#0 | me#0
    // augmented_assignment/contract.py:24
    // self.my_bytes[me] = Bytes(b"")
    l-load me#0 0                                         (𝕗) me#0 | me#0
    byte "my_bytes"                                       (𝕗) me#0 | me#0,"my_bytes"
    byte 0x                                               (𝕗) me#0 | me#0,"my_bytes",0x
    app_local_put                                         (𝕗) me#0 |
    // Implicit fall through to main_after_if_else@4      (𝕗) me#0 |

main_after_if_else@4:                                     (𝕗) me#0 |
    // augmented_assignment/contract.py:25
    // if op.Txn.application_id:
    txn ApplicationID                                     (𝕗) me#0 | reinterpret_bool%0#0
    bz main_after_if_else@6                               (𝕗) me#0 |
    // Implicit fall through to main_if_body@5            (𝕗) me#0 |

main_if_body@5:                                           (𝕗) me#0 |
    // augmented_assignment/contract.py:27
    // n = op.Txn.num_app_args
    txn NumAppArgs                                        (𝕗) me#0 | n#0
    // augmented_assignment/contract.py:28
    // bytes_to_add = BigUInt(n).bytes
    l-load-copy n#0 0                                     (𝕗) me#0 | n#0,n#0 (copy)
    itob                                                  (𝕗) me#0 | n#0,bytes_to_add#0
    // augmented_assignment/contract.py:32
    // self.my_uint[me] += n
    f-load me#0                                           (𝕗) me#0 | n#0,bytes_to_add#0,me#0
    l-store-copy me#0 1                                   (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy)
    int 0                                                 (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy),0
    byte "my_uint"                                        (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy),0,"my_uint"
    app_local_get_ex                                      (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%0#0,maybe_exists%0#0
    assert // check self.my_uint exists for account       (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%0#0
    l-load maybe_value%0#0 0                              (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%0#0
    l-load-copy n#0 3                                     (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%0#0,n#0 (copy)
    +                                                     (𝕗) me#0 | n#0,me#0,bytes_to_add#0,new_state_value%0#0
    l-load-copy me#0 2                                    (𝕗) me#0 | n#0,me#0,bytes_to_add#0,new_state_value%0#0,me#0 (copy)
    byte "my_uint"                                        (𝕗) me#0 | n#0,me#0,bytes_to_add#0,new_state_value%0#0,me#0 (copy),"my_uint"
    l-load new_state_value%0#0 2                          (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy),"my_uint",new_state_value%0#0
    app_local_put                                         (𝕗) me#0 | n#0,me#0,bytes_to_add#0
    // augmented_assignment/contract.py:33
    // self.my_bytes[me] += bytes_to_add
    l-load-copy me#0 1                                    (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy)
    int 0                                                 (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy),0
    byte "my_bytes"                                       (𝕗) me#0 | n#0,me#0,bytes_to_add#0,me#0 (copy),0,"my_bytes"
    app_local_get_ex                                      (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%1#0,maybe_exists%1#0
    assert // check self.my_bytes exists for account      (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%1#0
    l-load maybe_value%1#0 0                              (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%1#0
    l-load-copy bytes_to_add#0 1                          (𝕗) me#0 | n#0,me#0,bytes_to_add#0,maybe_value%1#0,bytes_to_add#0 (copy)
    concat                                                (𝕗) me#0 | n#0,me#0,bytes_to_add#0,new_state_value%1#0
    l-load me#0 2                                         (𝕗) me#0 | n#0,bytes_to_add#0,new_state_value%1#0,me#0
    byte "my_bytes"                                       (𝕗) me#0 | n#0,bytes_to_add#0,new_state_value%1#0,me#0,"my_bytes"
    l-load new_state_value%1#0 2                          (𝕗) me#0 | n#0,bytes_to_add#0,me#0,"my_bytes",new_state_value%1#0
    app_local_put                                         (𝕗) me#0 | n#0,bytes_to_add#0
    // augmented_assignment/contract.py:36
    // self.global_uint += n
    int 0                                                 (𝕗) me#0 | n#0,bytes_to_add#0,0
    byte "global_uint"                                    (𝕗) me#0 | n#0,bytes_to_add#0,0,"global_uint"
    app_global_get_ex                                     (𝕗) me#0 | n#0,bytes_to_add#0,maybe_value%2#0,maybe_exists%2#0
    assert // check self.global_uint exists               (𝕗) me#0 | n#0,bytes_to_add#0,maybe_value%2#0
    l-load maybe_value%2#0 0                              (𝕗) me#0 | n#0,bytes_to_add#0,maybe_value%2#0
    l-load n#0 2                                          (𝕗) me#0 | bytes_to_add#0,maybe_value%2#0,n#0
    +                                                     (𝕗) me#0 | bytes_to_add#0,new_state_value%2#0
    byte "global_uint"                                    (𝕗) me#0 | bytes_to_add#0,new_state_value%2#0,"global_uint"
    l-load new_state_value%2#0 1                          (𝕗) me#0 | bytes_to_add#0,"global_uint",new_state_value%2#0
    app_global_put                                        (𝕗) me#0 | bytes_to_add#0
    // augmented_assignment/contract.py:37
    // self.global_bytes += bytes_to_add
    int 0                                                 (𝕗) me#0 | bytes_to_add#0,0
    byte "global_bytes"                                   (𝕗) me#0 | bytes_to_add#0,0,"global_bytes"
    app_global_get_ex                                     (𝕗) me#0 | bytes_to_add#0,maybe_value%3#0,maybe_exists%3#0
    assert // check self.global_bytes exists              (𝕗) me#0 | bytes_to_add#0,maybe_value%3#0
    l-load maybe_value%3#0 0                              (𝕗) me#0 | bytes_to_add#0,maybe_value%3#0
    l-load bytes_to_add#0 1                               (𝕗) me#0 | maybe_value%3#0,bytes_to_add#0
    concat                                                (𝕗) me#0 | new_state_value%3#0
    byte "global_bytes"                                   (𝕗) me#0 | new_state_value%3#0,"global_bytes"
    l-load new_state_value%3#0 1                          (𝕗) me#0 | "global_bytes",new_state_value%3#0
    app_global_put                                        (𝕗) me#0 |
    // Implicit fall through to main_after_if_else@6      (𝕗) me#0 |

main_after_if_else@6:                                     (𝕗) me#0 |
    // augmented_assignment/contract.py:38
    // return True
    int 1                                                 (𝕗) me#0 | 1
    return                                                (𝕗) me#0 |


// test_cases.augmented_assignment.contract.Augmented.__init__() -> void:
__init__:
    // augmented_assignment/contract.py:13
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // augmented_assignment/contract.py:16
    // self.global_uint = UInt64(0)
    byte "global_uint"                                    "global_uint"
    int 0                                                 "global_uint",0
    app_global_put
    // augmented_assignment/contract.py:17
    // self.global_bytes = Bytes(b"")
    byte "global_bytes"                                   "global_bytes"
    byte 0x                                               "global_bytes",0x
    app_global_put
    retsub


