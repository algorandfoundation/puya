#pragma version 11
#pragma typetrack false

// test_cases.augmented_assignment.contract.Augmented.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "my_uint" "counter" "my_bytes" "global_uint" "global_bytes"
    intc_0 // 0
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    // augmented_assignment/contract.py:23
    // me = op.Txn.sender
    txn Sender
    bury 1
    // augmented_assignment/contract.py:25
    // if op.Txn.on_completion == OnCompleteAction.OptIn:
    txn OnCompletion
    intc_1 // OptIn
    ==
    bz main_after_if_else@4
    b main_if_body@3

main_if_body@3:
    // augmented_assignment/contract.py:26
    // self.my_uint[me] = UInt64(0)
    dupn 2
    bytec_0 // "my_uint"
    intc_0 // 0
    app_local_put
    // augmented_assignment/contract.py:27
    // self.my_bytes[me] = Bytes(b"")
    bytec_2 // "my_bytes"
    pushbytes 0x
    app_local_put
    b main_after_if_else@4

main_after_if_else@4:
    // augmented_assignment/contract.py:28
    // if op.Txn.application_id:
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_after_if_else@6
    b main_if_body@5

main_if_body@5:
    // augmented_assignment/contract.py:29-30
    // # variable augmented assignment
    // n = op.Txn.num_app_args
    txn NumAppArgs
    // augmented_assignment/contract.py:31
    // bytes_to_add = BigUInt(n).bytes
    dup
    itob
    cover 1
    // augmented_assignment/contract.py:33-34
    // # local augmented assignment
    // self.my_uint[me] += n
    dig 2
    dup
    intc_0 // 0
    bytec_0 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    dig 2
    +
    dig 1
    bytec_0 // "my_uint"
    uncover 2
    app_local_put
    // augmented_assignment/contract.py:35
    // self.my_bytes[me] += bytes_to_add
    dup
    intc_0 // 0
    bytec_2 // "my_bytes"
    app_local_get_ex
    assert // check self.my_bytes exists for account
    dig 3
    concat
    uncover 1
    bytec_2 // "my_bytes"
    uncover 2
    app_local_put
    // augmented_assignment/contract.py:37-38
    // # global augmented assignment
    // self.global_uint += n
    intc_0 // 0
    bytec_3 // "global_uint"
    app_global_get_ex
    assert // check self.global_uint exists
    +
    bytec_3 // "global_uint"
    uncover 1
    app_global_put
    // augmented_assignment/contract.py:39
    // self.global_bytes += bytes_to_add
    intc_0 // 0
    bytec 4 // "global_bytes"
    app_global_get_ex
    assert // check self.global_bytes exists
    uncover 1
    concat
    bytec 4 // "global_bytes"
    uncover 1
    app_global_put
    // augmented_assignment/contract.py:41
    // self.counter = UInt64()
    bytec_1 // "counter"
    intc_0 // 0
    app_global_put
    // augmented_assignment/contract.py:42
    // assert self.counter == 0
    intc_0 // 0
    bytec_1 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_0 // 0
    ==
    assert
    // augmented_assignment/contract.py:43
    // self.my_uint[self.get_sender_with_side_effect()] += 1
    callsub get_sender_with_side_effect
    dup
    intc_0 // 0
    bytec_0 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    intc_1 // 1
    +
    uncover 1
    bytec_0 // "my_uint"
    uncover 2
    app_local_put
    // augmented_assignment/contract.py:44
    // assert self.counter == 1, "this should not error"
    intc_0 // 0
    bytec_1 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    ==
    assert // this should not error
    // augmented_assignment/contract.py:45
    // self.my_uint[self.get_sender_with_side_effect()] -= 1
    callsub get_sender_with_side_effect
    dup
    intc_0 // 0
    bytec_0 // "my_uint"
    app_local_get_ex
    assert // check self.my_uint exists for account
    intc_1 // 1
    -
    uncover 1
    bytec_0 // "my_uint"
    uncover 2
    app_local_put
    // augmented_assignment/contract.py:46
    // assert self.counter == 2, "this should not error"
    intc_0 // 0
    bytec_1 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    pushint 2 // 2
    ==
    assert // this should not error
    b main_after_if_else@6

main_after_if_else@6:
    // augmented_assignment/contract.py:48
    // return True
    intc_1 // 1
    return


// test_cases.augmented_assignment.contract.Augmented.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // augmented_assignment/contract.py:18
    // self.counter = UInt64()
    bytec_1 // "counter"
    intc_0 // 0
    app_global_put
    // augmented_assignment/contract.py:19
    // self.global_uint = UInt64(0)
    bytec_3 // "global_uint"
    intc_0 // 0
    app_global_put
    // augmented_assignment/contract.py:20
    // self.global_bytes = Bytes(b"")
    bytec 4 // "global_bytes"
    pushbytes 0x
    app_global_put
    retsub


// test_cases.augmented_assignment.contract.Augmented.get_sender_with_side_effect() -> bytes:
get_sender_with_side_effect:
    b get_sender_with_side_effect_block@0

get_sender_with_side_effect_block@0:
    // augmented_assignment/contract.py:55
    // self.counter += 1
    intc_0 // 0
    bytec_1 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    +
    bytec_1 // "counter"
    uncover 1
    app_global_put
    // augmented_assignment/contract.py:56
    // return op.Txn.sender
    txn Sender
    retsub
