main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receive_bools(bool[])void" => block@3, method "delete()void" => block@4, * => block@11}
    block@3: // receive_bools_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        test_cases.arc4_encode_decode.receiver.Receiver.receive_bools(tmp%7#0)
        let test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        goto block@12
    block@4: // delete_route_L12
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 DeleteApplication)
        (assert tmp%9#0) // OnCompletion is not DeleteApplication
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        goto block@12
    block@7: // bare_routing_L5
        let tmp%12#0: uint64 = (txn OnCompletion)
        goto tmp%12#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // can only call when creating
        let test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        goto block@12
    block@11: // after_if_else_L5
        let test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.arc4_encode_decode.receiver.Receiver.receive_bools(b: bytes) -> void:
    block@0: // L6
        let tmp%0#0: uint64 = (extract_uint16 b#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 2u)
        (assert tmp%1#0) // expected 2 bools
        let array_head_and_tail%0#0: bytes = ((extract 2 0) b#0)
        (assert tmp%0#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%0#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%2#0: bool = (!= encoded_bool%0#0 0x00)
        (assert tmp%2#0) // expected first bool to be true
        let index_is_in_bounds%1#0: bool = (< 1u tmp%0#0)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let is_true%1#0: uint64 = (getbit array_head_and_tail%0#0 1u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tmp%3#0: bool = (!= encoded_bool%1#0 0x00)
        (assert tmp%3#0) // expected second bool to be true
        return 