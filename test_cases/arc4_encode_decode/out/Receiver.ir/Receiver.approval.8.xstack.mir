// Op                                                                                           Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // arc4_encode_decode/receiver.py:5
        // class Receiver(ARC4Contract):
        txn NumAppArgs                                                                          tmp%0#1
        bz main_bare_routing@7 ; b main_abi_routing@2

    main_abi_routing@2:
        // arc4_encode_decode/receiver.py:5
        // class Receiver(ARC4Contract):
        txna ApplicationArgs 0                                                                  tmp%2#0
        method receive_bools(bool[])void                                                        tmp%2#0,Method(receive_bools(bool[])void)
        method delete()void                                                                     tmp%2#0,Method(receive_bools(bool[])void),Method(delete()void)
        l-load tmp%2#0 2                                                                        Method(receive_bools(bool[])void),Method(delete()void),tmp%2#0
        match main_receive_bools_route@3 main_delete_route@4 ; b main_after_if_else@11

    main_receive_bools_route@3:
        // arc4_encode_decode/receiver.py:6
        // @abimethod()
        txn OnCompletion                                                                        tmp%3#0
        !                                                                                       tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%5#0
        assert // can only call when not creating
        // arc4_encode_decode/receiver.py:5
        // class Receiver(ARC4Contract):
        txna ApplicationArgs 1                                                                  tmp%7#0
        // arc4_encode_decode/receiver.py:6
        // @abimethod()
        callsub receive_bools
        int 1                                                                                   test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        x-store tmp%0#0                                                                         (洧뎶) tmp%0#0 |
        b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12 (洧뎶) tmp%0#0 | 

    main_delete_route@4:
        // arc4_encode_decode/receiver.py:12
        // @abimethod(allow_actions=["DeleteApplication"])
        txn OnCompletion                                                                        tmp%8#0
        int DeleteApplication                                                                   tmp%8#0,DeleteApplication
        ==                                                                                      tmp%9#0
        assert // OnCompletion is not DeleteApplication
        txn ApplicationID                                                                       tmp%10#0
        assert // can only call when not creating
        int 1                                                                                   test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        x-store tmp%0#0                                                                         (洧뎶) tmp%0#0 |
        b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12 (洧뎶) tmp%0#0 | 

    main_bare_routing@7:
        // arc4_encode_decode/receiver.py:5
        // class Receiver(ARC4Contract):
        txn OnCompletion                                                                        tmp%12#0
        bz main___algopy_default_create@8 ; b main_after_if_else@11

    main___algopy_default_create@8:
        txn ApplicationID                                                                       tmp%13#0
        !                                                                                       tmp%14#0
        assert // can only call when creating
        int 1                                                                                   test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        x-store tmp%0#0                                                                         (洧뎶) tmp%0#0 |
        b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12 (洧뎶) tmp%0#0 | 

    main_after_if_else@11:
        // arc4_encode_decode/receiver.py:5
        // class Receiver(ARC4Contract):
        int 0                                                                                   test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__%0#0
        x-store tmp%0#0                                                                         (洧뎶) tmp%0#0 |
        b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12 (洧뎶) tmp%0#0 | 

    main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12: (洧뎶) tmp%0#0 |
        x-load tmp%0#0                                                                          tmp%0#0
        return


// test_cases.arc4_encode_decode.receiver.Receiver.receive_bools(b: bytes) -> void:
subroutine receive_bools:
    receive_bools_block@0:                                                                      (洧도) b#0 |
        // arc4_encode_decode/receiver.py:8
        // assert b.length == 2, "expected 2 bools"
        p-load b#0                                                                              (洧도) b#0 | b#0 (copy)
        int 0                                                                                   (洧도) b#0 | b#0 (copy),0
        extract_uint16                                                                          (洧도) b#0 | tmp%0#0
        l-load-copy tmp%0#0 0                                                                   (洧도) b#0 | tmp%0#0,tmp%0#0 (copy)
        int 2                                                                                   (洧도) b#0 | tmp%0#0,tmp%0#0 (copy),2
        ==                                                                                      (洧도) b#0 | tmp%0#0,tmp%1#0
        assert // expected 2 bools                                                              (洧도) b#0 | tmp%0#0
        // arc4_encode_decode/receiver.py:9
        // assert b[0], "expected first bool to be true"
        p-load b#0                                                                              (洧도) b#0 | tmp%0#0,b#0 (copy)
        extract 2 0                                                                             (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0
        l-load-copy tmp%0#0 1                                                                   (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,tmp%0#0 (copy)
        assert // Index access is out of bounds                                                 (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0
        l-load-copy array_head_and_tail%0#0 0                                                   (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy)
        int 0                                                                                   (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy),0
        getbit                                                                                  (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,is_true%0#0
        byte 0x00                                                                               (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,is_true%0#0,0x00
        int 0                                                                                   (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,is_true%0#0,0x00,0
        l-load is_true%0#0 2                                                                    (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,0x00,0,is_true%0#0
        setbit                                                                                  (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,encoded_bool%0#0
        byte 0x00                                                                               (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,encoded_bool%0#0,0x00
        !=                                                                                      (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,tmp%2#0
        assert // expected first bool to be true                                                (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0
        // arc4_encode_decode/receiver.py:10
        // assert b[1], "expected second bool to be true"
        int 1                                                                                   (洧도) b#0 | tmp%0#0,array_head_and_tail%0#0,1
        l-load tmp%0#0 2                                                                        (洧도) b#0 | array_head_and_tail%0#0,1,tmp%0#0
        <                                                                                       (洧도) b#0 | array_head_and_tail%0#0,index_is_in_bounds%1#0
        assert // Index access is out of bounds                                                 (洧도) b#0 | array_head_and_tail%0#0
        l-load array_head_and_tail%0#0 0                                                        (洧도) b#0 | array_head_and_tail%0#0
        int 1                                                                                   (洧도) b#0 | array_head_and_tail%0#0,1
        getbit                                                                                  (洧도) b#0 | is_true%1#0
        byte 0x00                                                                               (洧도) b#0 | is_true%1#0,0x00
        int 0                                                                                   (洧도) b#0 | is_true%1#0,0x00,0
        l-load is_true%1#0 2                                                                    (洧도) b#0 | 0x00,0,is_true%1#0
        setbit                                                                                  (洧도) b#0 | encoded_bool%1#0
        byte 0x00                                                                               (洧도) b#0 | encoded_bool%1#0,0x00
        !=                                                                                      (洧도) b#0 | tmp%3#0
        assert // expected second bool to be true                                               (洧도) b#0 |
        retsub


