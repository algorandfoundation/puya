#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 1 8
    bytecblock 0xf9d0fe74 base64(CoEBQw==) base64(CiACAAEmAQEAMRtBADGCAgT50P50BCQ3jTw2GgCOAgANAAIiQzEZgQUSRDEYRCNDMRkURDEYRDYaAYgADSNDMRlA/98xGBREI0OKAQCL/yJZSYECEkSL/1cCAEsBREkiUygiTwJUKBNEI08CDEQjUygiTwJUKBNEiQ==) 0x0000 0x8080 0x24378d3c
    // arc4_encode_decode/contract.py:7
    // class Arc4EncodeDecodeContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x7f067754 0xfbc75e8c // method "test_arc4_bool_array()void", method "test_arc4_bool_array_not_working()void"
    txna ApplicationArgs 0
    match main_test_arc4_bool_array_route@3 main_test_arc4_bool_array_not_working_route@4

main_after_if_else@11:
    // arc4_encode_decode/contract.py:7
    // class Arc4EncodeDecodeContract(ARC4Contract):
    intc_0 // 0
    return

main_test_arc4_bool_array_not_working_route@4:
    // arc4_encode_decode/contract.py:24
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_arc4_bool_array_not_working
    intc_2 // 1
    return

main_test_arc4_bool_array_route@3:
    // arc4_encode_decode/contract.py:8
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_arc4_bool_array
    intc_2 // 1
    return

main_bare_routing@7:
    // arc4_encode_decode/contract.py:7
    // class Arc4EncodeDecodeContract(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    pushbytes ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_2 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.arc4_encode_decode.contract.Arc4EncodeDecodeContract.test_arc4_bool_array() -> void:
test_arc4_bool_array:
    // arc4_encode_decode/contract.py:10
    // app_id = arc4_create(Receiver).created_app
    itxn_begin
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    bytec_2 // base64(CiACAAEmAQEAMRtBADGCAgT50P50BCQ3jTw2GgCOAgANAAIiQzEZgQUSRDEYRCNDMRkURDEYRDYaAYgADSNDMRlA/98xGBREI0OKAQCL/yJZSYECEkSL/1cCAEsBREkiUygiTwJUKBNEI08CDEQjUygiTwJUKBNEiQ==)
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // arc4_encode_decode/contract.py:12
    // imm_arc4 = ImmutableArray(Bool(True), Bool(True))
    bytec_3 // 0x0000
    bytec 4 // 0x8080
    pushint 2 // 2
    intc_3 // 8
    callsub dynamic_array_concat_bits
    // arc4_encode_decode/contract.py:13
    // abi_call(Receiver.receive_bools, imm_arc4, app_id=app_id)
    itxn_begin
    dig 1
    itxn_field ApplicationID
    bytec_0 // method "receive_bools(bool[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // arc4_encode_decode/contract.py:15
    // imm_nat = ImmutableArray(True, True)
    bytec_3 // 0x0000
    bytec 4 // 0x8080
    pushint 2 // 2
    intc_3 // 8
    callsub dynamic_array_concat_bits
    // arc4_encode_decode/contract.py:16
    // abi_call(Receiver.receive_bools, imm_nat, app_id=app_id)
    itxn_begin
    dig 1
    itxn_field ApplicationID
    bytec_0 // method "receive_bools(bool[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // arc4_encode_decode/contract.py:19
    // abi_call(Receiver.receive_bools, arc4_arc4, app_id=app_id)
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_0 // method "receive_bools(bool[])void"
    itxn_field ApplicationArgs
    // arc4_encode_decode/contract.py:18
    // arc4_arc4 = DynamicArray(Bool(True), Bool(True))
    pushbytes 0x0002c0
    itxn_field ApplicationArgs
    // arc4_encode_decode/contract.py:19
    // abi_call(Receiver.receive_bools, arc4_arc4, app_id=app_id)
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // arc4_encode_decode/contract.py:21-22
    // # delete app so we don't need to worry about MBR in test suite
    // abi_call(Receiver.delete, app_id=app_id)
    itxn_begin
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 5 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// test_cases.arc4_encode_decode.contract.Arc4EncodeDecodeContract.test_arc4_bool_array_not_working() -> void:
test_arc4_bool_array_not_working:
    // arc4_encode_decode/contract.py:26
    // app_id = arc4_create(Receiver).created_app
    itxn_begin
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    bytec_2 // base64(CiACAAEmAQEAMRtBADGCAgT50P50BCQ3jTw2GgCOAgANAAIiQzEZgQUSRDEYRCNDMRkURDEYRDYaAYgADSNDMRlA/98xGBREI0OKAQCL/yJZSYECEkSL/1cCAEsBREkiUygiTwJUKBNEI08CDEQjUygiTwJUKBNEiQ==)
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // arc4_encode_decode/contract.py:40
    // abi_call(Receiver.receive_bools, tup_arc4, app_id=app_id)
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_0 // method "receive_bools(bool[])void"
    itxn_field ApplicationArgs
    pushbytes 0x0001c0
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // arc4_encode_decode/contract.py:42-43
    // # delete app so we don't need to worry about MBR in test suite
    // abi_call(Receiver.delete, app_id=app_id)
    itxn_begin
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 5 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub
