{
  "version": 3,
  "sources": [
    "../receiver.py"
  ],
  "mappings": ";;;;;;;;;AAIA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAOK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AACK;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEe;;AAAA;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAA;AAAE;AAAF;AAAA;AAAE;AAAF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAA;AAAE;AAAF;AAAA;AAAE;AAAF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x00"
    },
    "9": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "11": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "12": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "13": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "16": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "pushbytes 0xf9d0fe74 // method \"receive_bools(bool[])void\"",
      "defined_out": [
        "Method(receive_bools(bool[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(receive_bools(bool[])void)"
      ]
    },
    "25": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(receive_bools(bool[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(receive_bools(bool[])void)",
        "Method(delete()void)"
      ]
    },
    "31": {
      "op": "uncover 2",
      "stack_out": [
        "Method(receive_bools(bool[])void)",
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "match main_receive_bools_route@3 main_delete_route@4",
      "stack_out": []
    },
    "39": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "block": "main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "41": {
      "block": "main_delete_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "43": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "DeleteApplication"
      ]
    },
    "45": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "46": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "49": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "50": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "51": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "52": {
      "callsub": "test_cases.arc4_encode_decode.receiver.Receiver.delete",
      "op": "callsub delete"
    },
    "55": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12"
    },
    "59": {
      "block": "main_receive_bools_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "61": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "62": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "63": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "64": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "66": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "67": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "68": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "69": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "72": {
      "callsub": "test_cases.arc4_encode_decode.receiver.Receiver.receive_bools",
      "op": "callsub receive_bools",
      "stack_out": []
    },
    "75": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12"
    },
    "79": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "81": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%12#0"
      ]
    },
    "83": {
      "op": "match main___algopy_default_create@8",
      "stack_out": []
    },
    "87": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "90": {
      "block": "main___algopy_default_create@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "92": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "94": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "95": {
      "block": "main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12"
    },
    "99": {
      "subroutine": "test_cases.arc4_encode_decode.receiver.Receiver.receive_bools",
      "params": {
        "b#0": "bytes"
      },
      "block": "receive_bools",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "102": {
      "block": "receive_bools_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "104": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0"
      ]
    },
    "105": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "109": {
      "error": "expected 2 bools",
      "op": "assert // expected 2 bools",
      "stack_out": []
    },
    "110": {
      "op": "frame_dig -1",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "112": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "115": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "b#0 (copy)"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "b#0 (copy)",
        "0"
      ]
    },
    "118": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0"
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0"
      ]
    },
    "120": {
      "op": ">",
      "defined_out": [
        "array_head_and_tail%0#0",
        "index_is_in_bounds%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "121": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "123": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00"
      ]
    },
    "125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "126": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "128": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "129": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "130": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "131": {
      "error": "expected first bool to be true",
      "op": "assert // expected first bool to be true",
      "stack_out": []
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "134": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0"
      ]
    },
    "137": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "b#0 (copy)"
      ]
    },
    "139": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%1#0",
        "b#0 (copy)",
        "0"
      ]
    },
    "140": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ]
    },
    "141": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1"
      ]
    },
    "142": {
      "op": ">",
      "defined_out": [
        "array_head_and_tail%1#0",
        "index_is_in_bounds%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "index_is_in_bounds%1#0"
      ]
    },
    "143": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "array_head_and_tail%1#0"
      ]
    },
    "144": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "145": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0"
      ],
      "stack_out": [
        "is_true%1#0"
      ]
    },
    "146": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "is_true%1#0",
        "0x00"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "148": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "150": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "151": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "152": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "153": {
      "error": "expected second bool to be true",
      "op": "assert // expected second bool to be true",
      "stack_out": []
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "subroutine": "test_cases.arc4_encode_decode.receiver.Receiver.delete",
      "params": {},
      "block": "delete_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}