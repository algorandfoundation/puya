#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x00

main_block@0:

main_block@1:
    // arc4_encode_decode/receiver.py:5
    // class Receiver(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // arc4_encode_decode/receiver.py:5
    // class Receiver(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xf9d0fe74 // method "receive_bools(bool[])void"
    pushbytes 0x24378d3c // method "delete()void"
    uncover 2
    match main_receive_bools_route@3 main_delete_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // arc4_encode_decode/receiver.py:5
    // class Receiver(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12:
    return

main_delete_route@4:
    // arc4_encode_decode/receiver.py:12
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub delete
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12

main_receive_bools_route@3:
    // arc4_encode_decode/receiver.py:6
    // @abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc4_encode_decode/receiver.py:5
    // class Receiver(ARC4Contract):
    txna ApplicationArgs 1
    // arc4_encode_decode/receiver.py:6
    // @abimethod()
    callsub receive_bools
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12

main_bare_routing@7:
    // arc4_encode_decode/receiver.py:5
    // class Receiver(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algopy_default_create@8:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@13:

main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__algopy_default_create@14:
    intc_1 // 1
    b main_after_inlined_test_cases.arc4_encode_decode.receiver.Receiver.__puya_arc4_router__@12


// test_cases.arc4_encode_decode.receiver.Receiver.receive_bools(b: bytes) -> void:
receive_bools:
    // arc4_encode_decode/receiver.py:6-7
    // @abimethod()
    // def receive_bools(self, b: DynamicArray[Bool]) -> None:
    proto 1 0

receive_bools_block@0:
    // arc4_encode_decode/receiver.py:8
    // assert b.length == 2, "expected 2 bools"
    frame_dig -1
    intc_0 // 0
    extract_uint16
    pushint 2 // 2
    ==
    assert // expected 2 bools
    // arc4_encode_decode/receiver.py:9
    // assert b[0], "expected first bool to be true"
    frame_dig -1
    extract 2 0
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // Index access is out of bounds
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    !=
    assert // expected first bool to be true
    // arc4_encode_decode/receiver.py:10
    // assert b[1], "expected second bool to be true"
    frame_dig -1
    extract 2 0
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    >
    assert // Index access is out of bounds
    intc_1 // 1
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    !=
    assert // expected second bool to be true
    retsub


// test_cases.arc4_encode_decode.receiver.Receiver.delete() -> void:
delete:

delete_block@0:
    retsub
