main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "sha256()byte[]" => block@3, method "sha3_256()byte[]" => block@4, method "sha512_256()byte[]" => block@5, method "keccak256()byte[]" => block@6, method "all(byte[])(byte[],byte[],byte[],byte[])" => block@7, * => block@8}
    block@3: // sha256_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha256()
        let aggregate%length%0#0: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%7#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%8#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@4: // sha3_256_route_L9
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha3_256()
        let aggregate%length%1#0: uint64 = (len tmp%14#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%14#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%15#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@5: // sha512_256_route_L13
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha512_256()
        let aggregate%length%2#0: uint64 = (len tmp%21#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%21#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%22#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#0
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@6: // keccak256_route_L17
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let tmp%28#0: bytes = test_cases.intrinsics.optimizations.Optimizations.keccak256()
        let aggregate%length%3#0: uint64 = (len tmp%28#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 tmp%28#0)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let tmp%29#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let tmp%30#0: bytes = (concat 0x151f7c75 tmp%29#0)
        (log tmp%30#0)
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@7: // all_route_L21
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%35#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let (tmp%36#0: bytes, tmp%37#0: bytes, tmp%38#0: bytes, tmp%39#0: bytes) = test_cases.intrinsics.optimizations.Optimizations.all(tmp%35#0)
        let aggregate%length%4#0: uint64 = (len tmp%36#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 tmp%36#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 8u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%4#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 8u aggregate%data_length%0#0)
        let aggregate%length%5#0: uint64 = (len tmp%37#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%37#0)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%5#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%length%6#0: uint64 = (len tmp%38#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 tmp%38#0)
        let aggregate%as_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%6#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%2#0)
        let aggregate%length%7#0: uint64 = (len tmp%39#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 tmp%39#0)
        let aggregate%as_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = aggregate%encoded_value%7#0
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%4#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%5#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 aggregate%as_Encoded(len+uint8[])%6#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%as_Encoded(len+uint8[])%7#0)
        let aggregate%as_Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))%0#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = aggregate%concat%3#0
        let tmp%40#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = aggregate%as_Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))%0#0
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@14
    block@10: // bare_routing_L4
        let tmp%42#0: uint64 = (txn OnCompletion)
        switch tmp%42#0 {0u => block@11, * => block@12}
    block@11: // __algopy_default_create_L1
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (== tmp%43#0 0u)
        (assert tmp%44#0) // can only call when creating
        goto block@16
    block@16: // L1
        goto block@17
    block@17: // after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create_L1
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@12: // switch_case_default_L4
        goto block@13
    block@13: // switch_case_next_L4
        goto block@14
    block@14: // after_if_else_L4
        let test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__%0#0
        goto block@15
    block@15: // after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256() -> bytes:
    block@0: // L5
        let tmp%0#0: bytes = (sha256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256() -> bytes:
    block@0: // L9
        let tmp%0#0: bytes = (sha3_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256() -> bytes:
    block@0: // L13
        let tmp%0#0: bytes = (sha512_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256() -> bytes:
    block@0: // L17
        let tmp%0#0: bytes = (keccak256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.all(value_to_hash: bytes) -> <bytes, bytes, bytes, bytes>:
    block@0: // L21
        let tmp%0#0: bytes = (sha256 value_to_hash#0)
        let tmp%1#0: bytes = (sha3_256 value_to_hash#0)
        let tmp%2#0: bytes = (sha512_256 value_to_hash#0)
        let tmp%3#0: bytes = (keccak256 value_to_hash#0)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0