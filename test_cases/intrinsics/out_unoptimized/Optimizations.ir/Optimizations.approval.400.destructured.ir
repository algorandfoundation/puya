main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@19
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L4
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@13
    block@5: // call_NoOp_L4
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "sha256()byte[]" => block@6, method "sha3_256()byte[]" => block@7, method "sha512_256()byte[]" => block@8, method "keccak256()byte[]" => block@9, method "all(byte[])(byte[],byte[],byte[],byte[])" => block@10, * => block@11}
    block@6: // sha256_route_L5
        test_cases.intrinsics.optimizations.Optimizations.sha256[routing]()
        goto block@12
    block@7: // sha3_256_route_L9
        test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]()
        goto block@12
    block@8: // sha512_256_route_L13
        test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]()
        goto block@12
    block@9: // keccak256_route_L17
        test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]()
        goto block@12
    block@10: // all_route_L21
        test_cases.intrinsics.optimizations.Optimizations.all[routing]()
        goto block@12
    block@11: // switch_case_default_L4
        goto block@12
    block@12: // switch_case_next_L4
        goto block@16
    block@13: // create_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@14}
    block@14: // switch_case_default_L4
        goto block@15
    block@15: // switch_case_next_L4
        goto block@16
    block@16: // after_if_else_L4
        goto block@17
    block@17: // switch_case_next_L4
        goto block@18
    block@18: // switch_case_next_L4
        goto block@23
    block@19: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@20, * => block@21}
    block@20: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@25
    block@25: // L1
        goto block@26
    block@26: // after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create_L1
        exit 1u
    block@21: // switch_case_default_L4
        goto block@22
    block@22: // switch_case_next_L4
        goto block@23
    block@23: // after_if_else_L4
        exit 0u
    block@24: // after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha256()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha3_256()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]() -> void:
    block@0: // L13
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha512_256()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]() -> void:
    block@0: // L17
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.keccak256()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.all[routing]() -> void:
    block@0: // L21
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let (tmp%1#0: bytes, tmp%2#0: bytes, tmp%3#0: bytes, tmp%4#0: bytes) = test_cases.intrinsics.optimizations.Optimizations.all(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 8u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 8u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%2#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%length%2#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%3#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%2#0)
        let aggregate%length%3#0: uint64 = (len tmp%4#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 tmp%4#0)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%as_Encoded(len+uint8[])%3#0)
        let aggregate%as_Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))%0#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = aggregate%concat%3#0
        let tmp%5#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = aggregate%as_Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256() -> bytes:
    block@0: // L5
        let tmp%0#0: bytes = (sha256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256() -> bytes:
    block@0: // L9
        let tmp%0#0: bytes = (sha3_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256() -> bytes:
    block@0: // L13
        let tmp%0#0: bytes = (sha512_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256() -> bytes:
    block@0: // L17
        let tmp%0#0: bytes = (keccak256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.all(value_to_hash: bytes) -> <bytes, bytes, bytes, bytes>:
    block@0: // L21
        let tmp%0#0: bytes = (sha256 value_to_hash#0)
        let tmp%1#0: bytes = (sha3_256 value_to_hash#0)
        let tmp%2#0: bytes = (sha512_256 value_to_hash#0)
        let tmp%3#0: bytes = (keccak256 value_to_hash#0)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0