#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 0x48656c6c6f20576f726c64

main_block@0:

main_block@1:
    // intrinsics/optimizations.py:4
    // class Optimizations(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@9

main_abi_routing@2:
    // intrinsics/optimizations.py:4
    // class Optimizations(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x86db3e46 // method "sha256()byte[]"
    pushbytes 0x5468f98b // method "sha3_256()byte[]"
    pushbytes 0x3c539b61 // method "sha512_256()byte[]"
    pushbytes 0xe6b8cd41 // method "keccak256()byte[]"
    uncover 4
    match main_sha256_route@3 main_sha3_256_route@4 main_sha512_256_route@5 main_keccak256_route@6

main_switch_case_default@7:

main_switch_case_next@8:

main_after_if_else@13:
    // intrinsics/optimizations.py:4
    // class Optimizations(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14:
    return

main_keccak256_route@6:
    // intrinsics/optimizations.py:17
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub keccak256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14

main_sha512_256_route@5:
    // intrinsics/optimizations.py:13
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub sha512_256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14

main_sha3_256_route@4:
    // intrinsics/optimizations.py:9
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub sha3_256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14

main_sha256_route@3:
    // intrinsics/optimizations.py:5
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub sha256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14

main_bare_routing@9:
    // intrinsics/optimizations.py:4
    // class Optimizations(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@10

main_switch_case_default@11:

main_switch_case_next@12:
    b main_after_if_else@13

main___algopy_default_create@10:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@15:

main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create@16:
    intc_1 // 1
    b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@14


// test_cases.intrinsics.optimizations.Optimizations.sha256() -> bytes:
sha256:

sha256_block@0:
    // intrinsics/optimizations.py:7
    // return op.sha256(b"Hello World")
    bytec_1 // 0x48656c6c6f20576f726c64
    sha256
    retsub


// test_cases.intrinsics.optimizations.Optimizations.sha3_256() -> bytes:
sha3_256:

sha3_256_block@0:
    // intrinsics/optimizations.py:11
    // return op.sha3_256(b"Hello World")
    bytec_1 // 0x48656c6c6f20576f726c64
    sha3_256
    retsub


// test_cases.intrinsics.optimizations.Optimizations.sha512_256() -> bytes:
sha512_256:

sha512_256_block@0:
    // intrinsics/optimizations.py:15
    // return op.sha512_256(b"Hello World")
    bytec_1 // 0x48656c6c6f20576f726c64
    sha512_256
    retsub


// test_cases.intrinsics.optimizations.Optimizations.keccak256() -> bytes:
keccak256:

keccak256_block@0:
    // intrinsics/optimizations.py:19
    // return op.keccak256(b"Hello World")
    bytec_1 // 0x48656c6c6f20576f726c64
    keccak256
    retsub
