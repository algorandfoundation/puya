{
  "version": 3,
  "sources": [
    "../optimizations.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAdoB;AAAV;AAAP;;;;AAImB;AAAZ;AAAP;;;;AAIqB;AAAd;AAAP;;;;AAIoB;AAAb;AAAP;AAER;;;;;;AAGY;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AAJJ;;AAAA;;AAAA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 0x48656c6c6f20576f726c64"
    },
    "25": {
      "op": "b block@0"
    },
    "28": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "31": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "33": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "34": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "36": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "37": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "38": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "39": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "40": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "41": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "43": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "45": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "47": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "49": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "51": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "53": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "54": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "56": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "58": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "60": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "62": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "88": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "91": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "92": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "95": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "98": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "101": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "104": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "107": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "110": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "113": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "116": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "119": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "122": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "124": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "125": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "126": {
      "op": "bz else_body@12",
      "stack_out": []
    },
    "129": {
      "op": "b __algopy_default_create@11"
    },
    "132": {
      "block": "__algopy_default_create@11",
      "stack_in": [],
      "op": "b block@25"
    },
    "135": {
      "block": "block@25",
      "stack_in": [],
      "op": "b after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create@26"
    },
    "138": {
      "block": "after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create@26",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@12",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "141": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "144": {
      "op": "pushbytes 0x86db3e46 // method \"sha256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(sha256()byte[])"
      ]
    },
    "150": {
      "op": "pushbytes 0x5468f98b // method \"sha3_256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])"
      ]
    },
    "156": {
      "op": "pushbytes 0x3c539b61 // method \"sha512_256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])"
      ]
    },
    "162": {
      "op": "pushbytes 0xe6b8cd41 // method \"keccak256()byte[]\"",
      "defined_out": [
        "Method(keccak256()byte[])",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])"
      ]
    },
    "168": {
      "op": "pushbytes 0xb15dc12a // method \"all(byte[])(byte[],byte[],byte[],byte[])\"",
      "defined_out": [
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))",
        "Method(keccak256()byte[])",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])",
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))"
      ]
    },
    "174": {
      "op": "uncover 5",
      "stack_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])",
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))",
        "tmp%5#0"
      ]
    },
    "176": {
      "op": "match sha256_route@3 sha3_256_route@4 sha512_256_route@5 keccak256_route@6 all_route@7",
      "stack_out": []
    },
    "188": {
      "op": "b switch_case_default@8"
    },
    "191": {
      "block": "switch_case_default@8",
      "stack_in": [],
      "op": "b switch_case_next@9"
    },
    "194": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "195": {
      "block": "all_route@7",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.all[routing]",
      "op": "callsub all"
    },
    "198": {
      "op": "b switch_case_next@9"
    },
    "201": {
      "block": "keccak256_route@6",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]",
      "op": "callsub keccak256"
    },
    "204": {
      "op": "b switch_case_next@9"
    },
    "207": {
      "block": "sha512_256_route@5",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]",
      "op": "callsub sha512_256"
    },
    "210": {
      "op": "b switch_case_next@9"
    },
    "213": {
      "block": "sha3_256_route@4",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]",
      "op": "callsub sha3_256"
    },
    "216": {
      "op": "b switch_case_next@9"
    },
    "219": {
      "block": "sha256_route@3",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha256[routing]",
      "op": "callsub sha256"
    },
    "222": {
      "op": "b switch_case_next@9"
    },
    "225": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha256[routing]",
      "params": {},
      "block": "sha256",
      "stack_in": [],
      "op": "b sha256_block@0"
    },
    "228": {
      "block": "sha256_block@0",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha256",
      "op": "callsub test_cases.intrinsics.optimizations.Optimizations.sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "232": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "233": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "234": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "237": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "241": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": []
    },
    "245": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]",
      "params": {},
      "block": "sha3_256",
      "stack_in": [],
      "op": "b sha3_256_block@0"
    },
    "250": {
      "block": "sha3_256_block@0",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "op": "callsub test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "254": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "255": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "256": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "259": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "262": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "263": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "266": {
      "op": "log",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "268": {
      "op": "return",
      "stack_out": []
    },
    "269": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]",
      "params": {},
      "block": "sha512_256",
      "stack_in": [],
      "op": "b sha512_256_block@0"
    },
    "272": {
      "block": "sha512_256_block@0",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "op": "callsub test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "276": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "277": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "278": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "281": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "283": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "284": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "285": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "287": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "288": {
      "op": "log",
      "stack_out": []
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]",
      "params": {},
      "block": "keccak256",
      "stack_in": [],
      "op": "b keccak256_block@0"
    },
    "294": {
      "block": "keccak256_block@0",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "op": "callsub test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "298": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "299": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "300": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "303": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "310": {
      "op": "log",
      "stack_out": []
    },
    "311": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "312": {
      "op": "return",
      "stack_out": []
    },
    "313": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.all[routing]",
      "params": {},
      "block": "all",
      "stack_in": [],
      "op": "b all_block@0"
    },
    "316": {
      "block": "all_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "319": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.all",
      "op": "callsub test_cases.intrinsics.optimizations.Optimizations.all",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "325": {
      "op": "cover 3",
      "stack_out": [
        "tmp%4#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "327": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "329": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "331": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "332": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "334": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "337": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "340": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "8"
      ]
    },
    "341": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "342": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "345": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "347": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0"
      ]
    },
    "350": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "352": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "353": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "354": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "8"
      ]
    },
    "355": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "356": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "360": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "363": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%2#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "366": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0 (copy)"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "369": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "372": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%0#0"
      ]
    },
    "374": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%1#0"
      ]
    },
    "377": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0 (copy)"
      ]
    },
    "380": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%data_length%1#0"
      ]
    },
    "381": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%data_length%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "383": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "384": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "tmp%3#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%length%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%2#0"
      ]
    },
    "387": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "388": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "391": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%2#0",
        "tmp%3#0"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0"
      ]
    },
    "394": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%current_tail_offset%1#0 (copy)",
        "aggregate%head%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0 (copy)"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_bytes%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "397": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "400": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%1#0"
      ]
    },
    "402": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "404": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%head%2#0"
      ]
    },
    "405": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0"
      ]
    },
    "407": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0 (copy)",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0 (copy)"
      ]
    },
    "408": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%data_length%2#0",
        "aggregate%head%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%data_length%2#0"
      ]
    },
    "409": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%data_length%2#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "411": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "412": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "414": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%length%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length%3#0"
      ]
    },
    "415": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_bytes%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "416": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "419": {
      "op": "uncover 6",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length_uint16%3#0",
        "tmp%4#0"
      ]
    },
    "421": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%3#0"
      ]
    },
    "422": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "424": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%as_bytes%7#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "425": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "428": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%2#0"
      ]
    },
    "430": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%head%3#0"
      ]
    },
    "433": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%0#0"
      ]
    },
    "436": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%1#0"
      ]
    },
    "439": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%1#0",
        "aggregate%as_Encoded(len+uint8[])%2#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%3#0",
        "aggregate%concat%2#0"
      ]
    },
    "442": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_Encoded(len+uint8[])%3#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "445": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "446": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%5#0"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "449": {
      "op": "log",
      "stack_out": []
    },
    "450": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "451": {
      "op": "return",
      "stack_out": []
    },
    "452": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha256",
      "params": {},
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha256",
      "stack_in": [],
      "op": "b test_cases.intrinsics.optimizations.Optimizations.sha256_block@0"
    },
    "455": {
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "456": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "retsub": true,
      "op": "retsub"
    },
    "458": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "params": {},
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "stack_in": [],
      "op": "b test_cases.intrinsics.optimizations.Optimizations.sha3_256_block@0"
    },
    "461": {
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha3_256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "462": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "463": {
      "retsub": true,
      "op": "retsub"
    },
    "464": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "params": {},
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "stack_in": [],
      "op": "b test_cases.intrinsics.optimizations.Optimizations.sha512_256_block@0"
    },
    "467": {
      "block": "test_cases.intrinsics.optimizations.Optimizations.sha512_256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "468": {
      "op": "sha512_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "params": {},
      "block": "test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "stack_in": [],
      "op": "b test_cases.intrinsics.optimizations.Optimizations.keccak256_block@0"
    },
    "473": {
      "block": "test_cases.intrinsics.optimizations.Optimizations.keccak256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "474": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.all",
      "params": {
        "value_to_hash#0": "bytes"
      },
      "block": "test_cases.intrinsics.optimizations.Optimizations.all",
      "stack_in": [],
      "op": "proto 1 4"
    },
    "479": {
      "op": "b test_cases.intrinsics.optimizations.Optimizations.all_block@0"
    },
    "482": {
      "block": "test_cases.intrinsics.optimizations.Optimizations.all_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value_to_hash#0 (copy)"
      ],
      "stack_out": [
        "value_to_hash#0 (copy)"
      ]
    },
    "484": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "485": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "487": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "488": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "490": {
      "op": "sha512_256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "491": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "493": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "494": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "496": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "498": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "500": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "502": {
      "retsub": true,
      "op": "retsub"
    }
  }
}