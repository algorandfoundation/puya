{
  "version": 3,
  "sources": [
    "../optimizations.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AAiBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjBL;;;AAAA;;;AAiyB;AAAV;AAAP;AAImB;AAAZ;AAAP;AAIqB;AAAd;AAAP;AAIoB;AAAb;AAAP;AAER;;;AAGY;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AAJJ;;AAAA;;AAAA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 0x48656c6c6f20576f726c64"
    },
    "25": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "27": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "28": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "32": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "pushbytes 0x86db3e46 // method \"sha256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(sha256()byte[])"
      ]
    },
    "41": {
      "op": "pushbytes 0x5468f98b // method \"sha3_256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])"
      ]
    },
    "47": {
      "op": "pushbytes 0x3c539b61 // method \"sha512_256()byte[]\"",
      "defined_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])"
      ]
    },
    "53": {
      "op": "pushbytes 0xe6b8cd41 // method \"keccak256()byte[]\"",
      "defined_out": [
        "Method(keccak256()byte[])",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])"
      ]
    },
    "59": {
      "op": "pushbytes 0xb15dc12a // method \"all(byte[])(byte[],byte[],byte[],byte[])\"",
      "defined_out": [
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))",
        "Method(keccak256()byte[])",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])",
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))"
      ]
    },
    "65": {
      "op": "uncover 5",
      "stack_out": [
        "Method(sha256()byte[])",
        "Method(sha3_256()byte[])",
        "Method(sha512_256()byte[])",
        "Method(keccak256()byte[])",
        "Method(all(byte[])(byte[],byte[],byte[],byte[]))",
        "tmp%2#0"
      ]
    },
    "67": {
      "op": "match main_sha256_route@3 main_sha3_256_route@4 main_sha512_256_route@5 main_keccak256_route@6 main_all_route@7",
      "stack_out": []
    },
    "79": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "80": {
      "block": "main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "81": {
      "block": "main_all_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "83": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "NoOp"
      ]
    },
    "84": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "89": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "90": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "91": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "94": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "97": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.all",
      "op": "callsub all",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "100": {
      "op": "cover 3",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "102": {
      "op": "cover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "104": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "105": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "106": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%length%4#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "108": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%length_uint16%4#0",
        "tmp%36#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0"
      ]
    },
    "113": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "8"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_bytes%5#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "115": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "118": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "120": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%0#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0"
      ]
    },
    "123": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%4#0 (copy)",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%4#0 (copy)"
      ]
    },
    "124": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%data_length%0#0"
      ]
    },
    "125": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%data_length%0#0",
        "8"
      ]
    },
    "126": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "127": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%37#0 (copy)"
      ]
    },
    "129": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length%5#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%5#0"
      ]
    },
    "130": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_bytes%6#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "131": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%5#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "134": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%5#0",
        "tmp%37#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0"
      ]
    },
    "137": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0 (copy)"
      ]
    },
    "139": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_bytes%7#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "140": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "143": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%0#0"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%1#0"
      ]
    },
    "147": {
      "op": "cover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0"
      ]
    },
    "149": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%5#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%5#0 (copy)"
      ]
    },
    "150": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%data_length%1#0"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%data_length%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "153": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "154": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%38#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "tmp%38#0 (copy)"
      ]
    },
    "156": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%length%6#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%6#0"
      ]
    },
    "157": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_bytes%8#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%8#0"
      ]
    },
    "158": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%6#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "161": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%6#0",
        "tmp%38#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0"
      ]
    },
    "164": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%current_tail_offset%1#0 (copy)",
        "aggregate%head%1#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0 (copy)"
      ]
    },
    "166": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_bytes%9#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_bytes%9#0"
      ]
    },
    "167": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "170": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%1#0"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%head%2#0"
      ]
    },
    "174": {
      "op": "cover 2",
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0"
      ]
    },
    "176": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%6#0 (copy)",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%6#0 (copy)"
      ]
    },
    "177": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%data_length%2#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%data_length%2#0"
      ]
    },
    "178": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%data_length%2#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "180": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "181": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "tmp%39#0 (copy)"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%length%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length%7#0"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_bytes%10#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_bytes%10#0"
      ]
    },
    "185": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "188": {
      "op": "uncover 6",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%length_uint16%7#0",
        "tmp%39#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(len+uint8[])%7#0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "192": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%as_bytes%11#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%as_bytes%11#0"
      ]
    },
    "193": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "196": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%2#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%4#0",
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%head%3#0"
      ]
    },
    "200": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%4#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%5#0",
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%0#0"
      ]
    },
    "203": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%5#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%6#0",
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%1#0"
      ]
    },
    "206": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%1#0",
        "aggregate%as_Encoded(len+uint8[])%6#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%7#0",
        "aggregate%concat%2#0"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_Encoded(len+uint8[])%7#0"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "211": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0x151f7c75"
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%40#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "214": {
      "op": "log",
      "stack_out": []
    },
    "215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "219": {
      "block": "main_keccak256_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "221": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "NoOp"
      ]
    },
    "222": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0"
      ]
    },
    "227": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "228": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "229": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "op": "callsub keccak256",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "233": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%length%3#0"
      ]
    },
    "234": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "235": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%3#0",
        "tmp%28#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0x151f7c75"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%29#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "243": {
      "op": "log",
      "stack_out": []
    },
    "244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "248": {
      "block": "main_sha512_256_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "250": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "256": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "op": "callsub sha512_256",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ]
    },
    "262": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "aggregate%length%2#0"
      ]
    },
    "263": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "264": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "tmp%21#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "269": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "270": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%22#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "272": {
      "op": "log",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "277": {
      "block": "main_sha3_256_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "279": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "NoOp"
      ]
    },
    "280": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "281": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "282": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "284": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "285": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "286": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "287": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "op": "callsub sha3_256",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "291": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "aggregate%length%1#0"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "293": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%14#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "298": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "301": {
      "op": "log",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "306": {
      "block": "main_sha256_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "308": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "309": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "310": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "311": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "313": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "314": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "315": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "316": {
      "callsub": "test_cases.intrinsics.optimizations.Optimizations.sha256",
      "op": "callsub sha256",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "319": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "320": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length%0#0"
      ]
    },
    "321": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "322": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "325": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ]
    },
    "326": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "327": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "330": {
      "op": "log",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "335": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%42#0"
      ]
    },
    "339": {
      "op": "match main___algopy_default_create@11",
      "stack_out": []
    },
    "343": {
      "block": "main_switch_case_next@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "346": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "348": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0"
      ]
    },
    "349": {
      "op": "==",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "350": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "351": {
      "block": "main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create@17",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "b main_after_inlined_test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__@15"
    },
    "355": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha256",
      "params": {},
      "block": "sha256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "356": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "retsub": true,
      "op": "retsub"
    },
    "358": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha3_256",
      "params": {},
      "block": "sha3_256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "359": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "360": {
      "retsub": true,
      "op": "retsub"
    },
    "361": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.sha512_256",
      "params": {},
      "block": "sha512_256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "362": {
      "op": "sha512_256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "363": {
      "retsub": true,
      "op": "retsub"
    },
    "364": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.keccak256",
      "params": {},
      "block": "keccak256_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "365": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "retsub": true,
      "op": "retsub"
    },
    "367": {
      "subroutine": "test_cases.intrinsics.optimizations.Optimizations.all",
      "params": {
        "value_to_hash#0": "bytes"
      },
      "block": "all",
      "stack_in": [],
      "op": "proto 1 4"
    },
    "370": {
      "block": "all_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value_to_hash#0 (copy)"
      ],
      "stack_out": [
        "value_to_hash#0 (copy)"
      ]
    },
    "372": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "373": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "375": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "376": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "378": {
      "op": "sha512_256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "379": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "value_to_hash#0 (copy)"
      ]
    },
    "381": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "382": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "384": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "386": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "388": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "390": {
      "retsub": true,
      "op": "retsub"
    }
  }
}