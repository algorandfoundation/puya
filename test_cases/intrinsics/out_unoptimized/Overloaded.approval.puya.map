{
  "version": 3,
  "sources": [
    "../overloaded.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKQ;AAAuB;AAAvB;;AAER;;;;;;AACuC;AAAxB;AAA2D;AAAxB;AAAnC;AAAP;AACO;AAAA;AAAA;AAAA;;AAAuB;AAAA;AAAA;AAAA;;AAAvB;AAAP;AACwB;AAAG;AAAG;AAAvB;AAAiD;AAAG;AAAG;AAAvB;AAAhC;AAAP;AACwB;AAAG;AAAG;AAAvB;AAAiD;AAAG;AAAG;AAAvB;AAAhC;AAAP;AACkC;;;;;;;;;;;AAAW;AAAG;AAA/B;AAAuC;AAAjD;AAAuD;AAAvD;AAAP;AACkC;;AAAK;AAAG;AAAzB;AAAgC;AAA1C;AAAgD;AAAhD;AAAP;AACO;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.intrinsics.overloaded.Overloaded.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 4"
    },
    "7": {
      "op": "bytecblock 0x6b6579"
    },
    "13": {
      "op": "b main_block@0"
    },
    "16": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "21": {
      "op": "b main_call___init__@1"
    },
    "24": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.overloaded.Overloaded.__init__",
      "op": "callsub __init__"
    },
    "27": {
      "op": "b main_after_if_else@2"
    },
    "30": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.intrinsics.overloaded.Overloaded.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "33": {
      "op": "return",
      "stack_out": []
    },
    "34": {
      "subroutine": "test_cases.intrinsics.overloaded.Overloaded.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "37": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"key\"",
      "defined_out": [
        "\"key\""
      ],
      "stack_out": [
        "\"key\""
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"key\"",
        "0"
      ],
      "stack_out": [
        "\"key\"",
        "0"
      ]
    },
    "39": {
      "op": "app_global_put",
      "stack_out": []
    },
    "40": {
      "retsub": true,
      "op": "retsub"
    },
    "41": {
      "subroutine": "test_cases.intrinsics.overloaded.Overloaded.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "44": {
      "op": "b approval_program_block@0"
    },
    "47": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x6b6579",
      "defined_out": [
        "0x6b6579"
      ],
      "stack_out": [
        "0x6b6579"
      ]
    },
    "48": {
      "op": "app_global_get",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "49": {
      "op": "bytec_0 // 0x6b6579",
      "stack_out": [
        "tmp%0#0",
        "0x6b6579"
      ]
    },
    "50": {
      "op": "app_global_get",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "52": {
      "op": "assert",
      "stack_out": []
    },
    "53": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "54": {
      "op": "bytec_0 // \"key\"",
      "defined_out": [
        "\"key\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key\""
      ]
    },
    "55": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "56": {
      "op": "cover 1",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "58": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "59": {
      "op": "bytec_0 // \"key\"",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "0",
        "\"key\""
      ]
    },
    "60": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "61": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%3#0"
      ]
    },
    "64": {
      "op": "assert",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "65": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0"
      ]
    },
    "66": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0",
        "0"
      ]
    },
    "67": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0",
        "0",
        "1"
      ]
    },
    "68": {
      "op": "setbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0"
      ]
    },
    "69": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "70": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0",
        "0",
        "0"
      ]
    },
    "71": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0",
        "0",
        "0",
        "1"
      ]
    },
    "72": {
      "op": "setbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%6#0"
      ]
    },
    "74": {
      "op": "assert",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "75": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0"
      ]
    },
    "76": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0",
        "1"
      ]
    },
    "77": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0",
        "1",
        "1"
      ]
    },
    "78": {
      "op": "select",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0"
      ]
    },
    "79": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0",
        "1"
      ]
    },
    "80": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0",
        "1",
        "0"
      ]
    },
    "81": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0",
        "1",
        "0",
        "0"
      ]
    },
    "82": {
      "op": "select",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "83": {
      "op": "==",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%9#0"
      ]
    },
    "84": {
      "op": "assert",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "85": {
      "op": "pushint 18446744073709551615 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "18446744073709551615"
      ]
    },
    "96": {
      "op": "intc_2 // 3",
      "defined_out": [
        "18446744073709551615",
        "3",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "18446744073709551615",
        "3"
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "18446744073709551615",
        "3",
        "0"
      ]
    },
    "98": {
      "op": "setbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%10#0"
      ]
    },
    "99": {
      "op": "intc_2 // 3",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%10#0",
        "3"
      ]
    },
    "100": {
      "op": "getbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%11#0"
      ]
    },
    "101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%11#0",
        "0"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%12#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "104": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "123"
      ]
    },
    "106": {
      "op": "intc_3 // 4",
      "defined_out": [
        "123",
        "4",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "123",
        "4"
      ]
    },
    "107": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "123",
        "4",
        "1"
      ]
    },
    "108": {
      "op": "setbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%13#0"
      ]
    },
    "109": {
      "op": "intc_3 // 4",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%13#0",
        "4"
      ]
    },
    "110": {
      "op": "getbit",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%14#0"
      ]
    },
    "111": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%14#0",
        "1"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "tmp%15#0"
      ]
    },
    "113": {
      "op": "assert",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "114": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "1"
      ]
    },
    "115": {
      "op": "frame_bury 0"
    },
    "117": {
      "retsub": true,
      "op": "retsub"
    }
  }
}