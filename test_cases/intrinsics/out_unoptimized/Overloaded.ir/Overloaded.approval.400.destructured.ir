main test_cases.intrinsics.overloaded.Overloaded.approval_program:
    block@0: // L8
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.intrinsics.overloaded.Overloaded.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: uint64 = (app_global_get 0x6b6579)
        let tmp%2#0: uint64 = (app_global_get 0x6b6579)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "key")
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "key")
        let tmp%4#0: bool = (== maybe_value%0#0 maybe_value%1#0)
        (assert tmp%4#0)
        let tmp%5#0: uint64 = (setbit 0u 0u 1u)
        let tmp%6#0: uint64 = (setbit 0u 0u 1u)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = (select 0u 1u 1u)
        let tmp%9#0: uint64 = (select 1u 0u 0u)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (setbit 18446744073709551615u 3u 0u)
        let tmp%12#0: bool = (getbit tmp%11#0 3u)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (setbit 123u 4u 1u)
        let tmp%15#0: bool = (getbit tmp%14#0 4u)
        let tmp%16#0: bool = (== tmp%15#0 1u)
        (assert tmp%16#0)
        return 1u

subroutine test_cases.intrinsics.overloaded.Overloaded.__init__() -> void:
    block@0: // L5
        (app_global_put "key" 0u)
        return 