main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@19
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "sha256()byte[]" => block@6, method "sha3_256()byte[]" => block@7, method "sha512_256()byte[]" => block@8, method "keccak256()byte[]" => block@9, method "all(byte[])(byte[],byte[],byte[],byte[])" => block@10, * => block@11}
    block@6: // sha256_route_L5
        (log 0x151f7c750020a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e)
        exit lifted%return#0
    block@7: // sha3_256_route_L9
        (log 0x151f7c750020e167f68d6563d75bb25f3aa49c29ef612d41352dc00606de7cbd630bb2665f51)
        exit lifted%return#0
    block@8: // sha512_256_route_L13
        (log 0x151f7c750020ff20018851481c25bfc2e5d0c1e1fa57dac2a237a1a96192f99a10da47aa5442)
        exit lifted%return#0
    block@9: // keccak256_route_L17
        (log 0x151f7c750020592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba)
        exit lifted%return#0
    block@10: // all_route_L21
        test_cases.intrinsics.optimizations.Optimizations.all[routing]()
        fail
    block@11: // switch_case_default_L4
        fail
    block@19: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0

subroutine test_cases.intrinsics.optimizations.Optimizations.all[routing]() -> void:
    block@0: // L21
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let value_to_hash#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: bytes = (sha256 value_to_hash#0)
        let tmp%1#1: bytes = (sha3_256 value_to_hash#0)
        let tmp%2#1: bytes = (sha512_256 value_to_hash#0)
        let tmp%3#1: bytes = (keccak256 value_to_hash#0)
        let aggregate%encoded_value%0#0: bytes = (concat 0x0020 tmp%0#1)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 8u aggregate%data_length%0#0)
        let aggregate%encoded_value%1#0: bytes = (concat 0x0020 tmp%1#1)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat 0x0008 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%encoded_value%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%encoded_value%2#0: bytes = (concat 0x0020 tmp%2#1)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%encoded_value%2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%2#0)
        let aggregate%encoded_value%3#0: bytes = (concat 0x0020 tmp%3#1)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 aggregate%encoded_value%2#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%encoded_value%3#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%concat%3#0)
        (log tmp%6#0)
        exit 1u