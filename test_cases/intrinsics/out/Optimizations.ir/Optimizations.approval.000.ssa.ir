main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@9, 2u => block@12, 3u => block@13, 4u => block@14, 5u => block@15, 6u => block@16, 7u => block@17, 8u => block@18, 9u => block@19, 10u => block@20, 11u => block@21, * => block@22}
    block@1: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "sha256()byte[]" => block@2, method "sha3_256()byte[]" => block@3, method "sha512_256()byte[]" => block@4, method "keccak256()byte[]" => block@5, method "all(byte[])(byte[],byte[],byte[],byte[])" => block@6, * => block@7}
    block@2: // sha256_route_L5
        test_cases.intrinsics.optimizations.Optimizations.sha256[routing]()
        goto block@8
    block@3: // sha3_256_route_L9
        test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]()
        goto block@8
    block@4: // sha512_256_route_L13
        test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]()
        goto block@8
    block@5: // keccak256_route_L17
        test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]()
        goto block@8
    block@6: // all_route_L21
        test_cases.intrinsics.optimizations.Optimizations.all[routing]()
        goto block@8
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@10 : block@11
    block@10: // __algopy_default_create_L1
        test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create()
        exit 1u
    block@11: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L4
        goto block@22
    block@13: // switch_case_3_L4
        goto block@22
    block@14: // switch_case_4_L4
        goto block@22
    block@15: // switch_case_5_L4
        goto block@22
    block@16: // switch_case_6_L4
        goto block@22
    block@17: // switch_case_7_L4
        goto block@22
    block@18: // switch_case_8_L4
        goto block@22
    block@19: // switch_case_9_L4
        goto block@22
    block@20: // switch_case_10_L4
        goto block@22
    block@21: // switch_case_11_L4
        goto block@22
    block@22: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha3_256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]() -> void:
    block@0: // L13
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha512_256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]() -> void:
    block@0: // L17
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.keccak256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.all[routing]() -> void:
    block@0: // L21
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let (tmp%1#0: bytes, tmp%2#0: bytes, tmp%3#0: bytes, tmp%4#0: bytes) = test_cases.intrinsics.optimizations.Optimizations.all(tmp%0#0)
        let tmp%5#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = bytes_encode<((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))>(tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256() -> bytes:
    block@0: // L5
        let tmp%0#0: bytes = (sha256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256() -> bytes:
    block@0: // L9
        let tmp%0#0: bytes = (sha3_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256() -> bytes:
    block@0: // L13
        let tmp%0#0: bytes = (sha512_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256() -> bytes:
    block@0: // L17
        let tmp%0#0: bytes = (keccak256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.all(value_to_hash: bytes) -> <bytes, bytes, bytes, bytes>:
    block@0: // L21
        let tmp%0#0: bytes = (sha256 value_to_hash#0)
        let tmp%1#0: bytes = (sha3_256 value_to_hash#0)
        let tmp%2#0: bytes = (sha512_256 value_to_hash#0)
        let tmp%3#0: bytes = (keccak256 value_to_hash#0)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create() -> void:
    block@0: // L1
        return 