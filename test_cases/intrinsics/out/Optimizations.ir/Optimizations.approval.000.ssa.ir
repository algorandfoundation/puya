main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@11
    block@1: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@9
    block@2: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "sha256()byte[]" => block@3, method "sha3_256()byte[]" => block@4, method "sha512_256()byte[]" => block@5, method "keccak256()byte[]" => block@6, method "all(byte[])(byte[],byte[],byte[],byte[])" => block@7, * => block@8}
    block@3: // sha256_route_L5
        test_cases.intrinsics.optimizations.Optimizations.sha256[routing]()
        goto block@8
    block@4: // sha3_256_route_L9
        test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]()
        goto block@8
    block@5: // sha512_256_route_L13
        test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]()
        goto block@8
    block@6: // keccak256_route_L17
        test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]()
        goto block@8
    block@7: // all_route_L21
        test_cases.intrinsics.optimizations.Optimizations.all[routing]()
        goto block@8
    block@8: // switch_case_next_L4
        goto block@10
    block@9: // create_NoOp_L4
        goto block@10
    block@10: // after_if_else_L4
        goto block@12
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create()
        exit 1u
    block@12: // after_if_else_L4
        exit 0u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha3_256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256[routing]() -> void:
    block@0: // L13
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.sha512_256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256[routing]() -> void:
    block@0: // L17
        let tmp%0#0: bytes = test_cases.intrinsics.optimizations.Optimizations.keccak256()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.all[routing]() -> void:
    block@0: // L21
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let (tmp%2#0: bytes, tmp%3#0: bytes, tmp%4#0: bytes, tmp%5#0: bytes) = test_cases.intrinsics.optimizations.Optimizations.all(tmp%1#0)
        let tmp%6#0: Encoded((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[])) = bytes_encode<((len+uint8[]),(len+uint8[]),(len+uint8[]),(len+uint8[]))>(tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
        (log tmp%7#0)
        exit 1u

subroutine test_cases.intrinsics.optimizations.Optimizations.sha256() -> bytes:
    block@0: // L5
        let tmp%0#0: bytes = (sha256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha3_256() -> bytes:
    block@0: // L9
        let tmp%0#0: bytes = (sha3_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.sha512_256() -> bytes:
    block@0: // L13
        let tmp%0#0: bytes = (sha512_256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.keccak256() -> bytes:
    block@0: // L17
        let tmp%0#0: bytes = (keccak256 0x48656c6c6f20576f726c64)
        return tmp%0#0

subroutine test_cases.intrinsics.optimizations.Optimizations.all(value_to_hash: bytes) -> <bytes, bytes, bytes, bytes>:
    block@0: // L21
        let tmp%0#0: bytes = (sha256 value_to_hash#0)
        let tmp%1#0: bytes = (sha3_256 value_to_hash#0)
        let tmp%2#0: bytes = (sha512_256 value_to_hash#0)
        let tmp%3#0: bytes = (keccak256 value_to_hash#0)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create() -> void:
    block@0: // L1
        return 