main test_cases.intrinsics.immediate_variants.ImmediateVariants.approval_program:
    block@0: // L18
        let num_app_args#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (gtxn 0 NumAppArgs)
        let tmp%2#0: bool = (== tmp%1#0 num_app_args#0)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = ((gtxns NumAppArgs) 0u)
        let tmp%4#0: bool = (== tmp%3#0 num_app_args#0)
        (assert tmp%4#0)
        let first_arg#0: bytes = (txna ApplicationArgs 0)
        let tmp%6#0: bytes = ((txnas ApplicationArgs) 0u)
        let tmp%7#0: bool = (== tmp%6#0 first_arg#0)
        (assert tmp%7#0)
        let tmp%8#0: bytes = (gtxna 0 ApplicationArgs 0)
        let tmp%9#0: bool = (== tmp%8#0 first_arg#0)
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((gtxnas 0 ApplicationArgs) 0u)
        let tmp%11#0: bool = (== tmp%10#0 first_arg#0)
        (assert tmp%11#0)
        let tmp%12#0: bytes = ((gtxnsa ApplicationArgs 0) 0u)
        let tmp%13#0: bool = (== tmp%12#0 first_arg#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = ((gtxnsas ApplicationArgs) 0u 0u)
        let tmp%15#0: bool = (== tmp%14#0 first_arg#0)
        (assert tmp%15#0)
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        ((itxn_field ApplicationArgs) first_arg#0)
        let second_arg#0: bytes = (concat first_arg#0 0x32)
        ((itxn_field ApplicationArgs) second_arg#0)
        itxn_submit
        let tmp%17#0: uint64 = (itxn NumAppArgs)
        let tmp%18#0: bool = (== tmp%17#0 2u)
        (assert tmp%18#0)
        let tmp%19#0: bytes = (itxna ApplicationArgs 0)
        let tmp%20#0: bool = (== tmp%19#0 first_arg#0)
        (assert tmp%20#0)
        let tmp%21#0: bytes = (itxna ApplicationArgs 1)
        let tmp%22#0: bool = (== tmp%21#0 second_arg#0)
        (assert tmp%22#0)
        let tmp%23#0: uint64 = (gitxn 0 NumAppArgs)
        let tmp%24#0: bool = (== tmp%23#0 2u)
        (assert tmp%24#0)
        let tmp%25#0: bytes = (gitxna 0 ApplicationArgs 0)
        let tmp%26#0: bool = (== tmp%25#0 first_arg#0)
        (assert tmp%26#0)
        let tmp%27#0: bytes = (gitxna 0 ApplicationArgs 1)
        let tmp%28#0: bool = (== tmp%27#0 second_arg#0)
        (assert tmp%28#0)
        let tmp%29#0: bytes = (gitxna 0 ApplicationArgs 0)
        let tmp%30#0: bool = (== tmp%29#0 first_arg#0)
        (assert tmp%30#0)
        let tmp%31#0: bytes = (gitxna 0 ApplicationArgs 1)
        let tmp%32#0: bool = (== tmp%31#0 second_arg#0)
        (assert tmp%32#0)
        return 1u