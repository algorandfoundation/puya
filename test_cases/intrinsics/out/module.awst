contract Overloaded
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  globals {
    ['key']: uint64
  }
  
  subroutine test_cases.intrinsics.overloaded.Overloaded.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine test_cases.intrinsics.overloaded.Overloaded.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.intrinsics.overloaded.Overloaded.__init__(): void
  {
    GlobalState['key']: uint64 = 0u
  }
  
  subroutine test_cases.intrinsics.overloaded.Overloaded.approval_program(): bool
  {
    assert(app_global_get(hex<"6B6579">) == app_global_get(hex<"6B6579">))
    assert(STATE_GET_EX(GlobalState['key'])[0] == STATE_GET_EX(GlobalState['key'])[0])
    assert(setbit(0u, 0u, 1u) == setbit(0u, 0u, 1u))
    assert(select(0u, 1u, true) == select(1u, 0u, false))
    assert(getbit(setbit(18446744073709551615u, 3u, 0u), 3u) == 0u)
    assert(getbit(setbit(123u, 4u, 1u), 4u) == 1u)
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract Optimizations
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.intrinsics.optimizations.Optimizations.sha256(): bytes
  {
    return sha256(hex<"48656C6C6F20576F726C64">)
  }
  
  baremethod test_cases.intrinsics.optimizations.Optimizations.__algopy_default_create(): void
  {
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract ImmediateVariants
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  
  subroutine test_cases.intrinsics.immediate_variants.ImmediateVariants.approval_program(): bool
  {
    num_app_args: uint64 = txn<NumAppArgs>()
    assert(gtxn<0, NumAppArgs>() == num_app_args)
    assert(gtxns<NumAppArgs>(0u) == num_app_args)
    first_arg: bytes = txna<ApplicationArgs, 0>()
    assert(txnas<ApplicationArgs>(0u) == first_arg)
    assert(gtxna<0, ApplicationArgs, 0>() == first_arg)
    assert(gtxnas<0, ApplicationArgs>(0u) == first_arg)
    assert(gtxnsa<ApplicationArgs, 0>(0u) == first_arg)
    assert(gtxnsas<ApplicationArgs>(0u, 0u) == first_arg)
    itxn_begin()
    itxn_field<TypeEnum>(appl)
    itxn_field<OnCompletion>(DeleteApplication)
    itxn_field<ApprovalProgram>(hex<"068101">)
    itxn_field<ClearStateProgram>(hex<"068101">)
    itxn_field<Fee>(0u)
    itxn_field<Fee>(0u)
    itxn_field<ApplicationArgs>(first_arg)
    second_arg: bytes = first_arg + hex<"32">
    itxn_field<ApplicationArgs>(second_arg)
    itxn_submit()
    assert(itxn<NumAppArgs>() == 2u)
    assert(itxna<ApplicationArgs, 0>() == first_arg)
    assert(itxnas<ApplicationArgs>(1u) == second_arg)
    assert(gitxn<0, NumAppArgs>() == 2u)
    assert(gitxnas<0, ApplicationArgs>(0u) == first_arg)
    assert(gitxnas<0, ApplicationArgs>(1u) == second_arg)
    assert(gitxna<0, ApplicationArgs, 0>() == first_arg)
    assert(gitxna<0, ApplicationArgs, 1>() == second_arg)
    return true
  }
  
  subroutine test_cases.intrinsics.immediate_variants.ImmediateVariants.clear_state_program(): bool
  {
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}