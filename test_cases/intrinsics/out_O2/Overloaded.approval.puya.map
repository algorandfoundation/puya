{
  "version": 3,
  "sources": [
    "../overloaded.py"
  ],
  "mappings": ";;;;;;;;;;;;AAKQ;AAAuB;;AAAvB;AAG+B;AAAxB;AAA2D;AAAxB;AAAnC;AAAP;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAA;AAAA;AAAA;AAAvB;AAAP;AAKO;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.intrinsics.overloaded.Overloaded.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x6b6579"
    },
    "7": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "9": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "12": {
      "op": "bytec_0 // \"key\"",
      "defined_out": [
        "\"key\""
      ],
      "stack_out": [
        "\"key\""
      ]
    },
    "13": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "\"key\"",
        "0"
      ],
      "stack_out": [
        "\"key\"",
        "0"
      ]
    },
    "15": {
      "op": "app_global_put",
      "stack_out": []
    },
    "16": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "bytec_0 // 0x6b6579",
      "defined_out": [
        "0x6b6579"
      ],
      "stack_out": [
        "0x6b6579"
      ]
    },
    "17": {
      "op": "app_global_get",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bytec_0 // 0x6b6579",
      "stack_out": [
        "tmp%0#1",
        "0x6b6579"
      ]
    },
    "19": {
      "op": "app_global_get",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "20": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "assert",
      "stack_out": []
    },
    "22": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "24": {
      "op": "bytec_0 // \"key\"",
      "defined_out": [
        "\"key\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key\""
      ]
    },
    "25": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "26": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "27": {
      "op": "pushint 0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "29": {
      "op": "bytec_0 // \"key\"",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"key\""
      ]
    },
    "30": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "31": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "32": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "33": {
      "op": "assert",
      "stack_out": []
    },
    "34": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    }
  }
}