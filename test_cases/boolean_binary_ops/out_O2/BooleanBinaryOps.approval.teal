#pragma version 10

test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    intcblock 1 0 3 4
    bytecblock "" 0x5f 0x6c6873 0x726873 0x616263
    intc_0 // 1
    intc_1 // 0
    callsub test_boolean_binary_ops
    callsub test_boolean_shortcircuit_binary_ops
    callsub test_union_boolean_binary_ops
    callsub test_literal_boolean_binary_ops
    intc_0 // 1
    intc_1 // 0
    callsub test_literal_conditionals
    intc_0 // 1
    return


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:
    proto 2 0
    frame_dig -2
    frame_dig -1
    &&
    !
    assert
    frame_dig -1
    frame_dig -2
    &&
    !
    assert
    frame_dig -2
    dup
    &&
    assert
    frame_dig -1
    dup
    &&
    !
    assert
    frame_dig -2
    frame_dig -1
    ||
    assert
    frame_dig -1
    frame_dig -2
    ||
    assert
    frame_dig -2
    dup
    ||
    assert
    frame_dig -1
    dup
    ||
    !
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    proto 0 0
    intc_1 // 0
    dup
    bytec_0 // ""
    dup
    intc_1 // 0
    intc_0 // 1

test_boolean_shortcircuit_binary_ops_for_body@1:
    intc_1 // 0
    frame_bury 2
    intc_0 // 1
    frame_bury 3

test_boolean_shortcircuit_binary_ops_for_body@2:
    frame_dig 5
    dup
    callsub bool_to_bytes
    bytec_1 // 0x5f
    swap
    concat
    pushbytes 0x5f616e645f
    concat
    frame_dig 3
    callsub bool_to_bytes
    concat
    dup
    frame_bury 0
    bytec_2 // 0x6c6873
    swap
    concat
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@5
    bytec_3 // 0x726873
    frame_dig 0
    concat
    frame_dig 3
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@5
    intc_0 // 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@6

test_boolean_shortcircuit_binary_ops_bool_false@5:
    intc_1 // 0

test_boolean_shortcircuit_binary_ops_bool_merge@6:
    frame_dig 5
    dup
    frame_dig 3
    dup
    cover 3
    &&
    uncover 3
    ==
    assert
    dup
    callsub bool_to_bytes
    bytec_1 // 0x5f
    swap
    concat
    pushbytes 0x5f6f725f
    concat
    uncover 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 1
    bytec_2 // 0x6c6873
    swap
    concat
    callsub log_and_return
    bnz test_boolean_shortcircuit_binary_ops_bool_true@8
    bytec_3 // 0x726873
    frame_dig 1
    concat
    frame_dig 3
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9

test_boolean_shortcircuit_binary_ops_bool_true@8:
    intc_0 // 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@10

test_boolean_shortcircuit_binary_ops_bool_false@9:
    intc_1 // 0

test_boolean_shortcircuit_binary_ops_bool_merge@10:
    frame_dig 5
    frame_dig 3
    ||
    ==
    assert
    frame_dig 2
    bnz test_boolean_shortcircuit_binary_ops_after_for@13
    intc_0 // 1
    frame_bury 2
    intc_1 // 0
    frame_bury 3
    b test_boolean_shortcircuit_binary_ops_for_body@2

test_boolean_shortcircuit_binary_ops_after_for@13:
    frame_dig 4
    bnz test_boolean_shortcircuit_binary_ops_after_for@16
    intc_0 // 1
    frame_bury 4
    intc_1 // 0
    frame_bury 5
    b test_boolean_shortcircuit_binary_ops_for_body@1

test_boolean_shortcircuit_binary_ops_after_for@16:
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:
    proto 1 1
    pushbytess 0x66616c7365 0x74727565 // 0x66616c7365, 0x74727565
    frame_dig -1
    select
    retsub


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:
    proto 2 1
    frame_dig -1
    log
    frame_dig -2
    retsub


// test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
test_union_boolean_binary_ops:
    proto 0 0
    intc_1 // 0

test_union_boolean_binary_ops_for_header@45:
    frame_dig 0
    intc_2 // 3
    <
    bz test_union_boolean_binary_ops_after_for@48
    bytec 4 // 0x616263
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    swap
    dup
    intc_0 // 1
    +
    bytec 4 // 0x616263
    uncover 2
    dig 2
    substring3
    uncover 2
    ==
    assert
    frame_bury 0
    b test_union_boolean_binary_ops_for_header@45

test_union_boolean_binary_ops_after_for@48:
    pushbytess "ight" "right" // "ight", "right"
    callsub is_substring
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
test_literal_boolean_binary_ops:
    proto 0 0
    intc_3 // 4
    bitlen
    intc_2 // 3
    ==
    assert
    pushbytes 0x68656c6c6f
    bitlen
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: uint64, false: uint64) -> void:
test_literal_conditionals:
    proto 2 0
    bytec_0 // ""
    frame_dig -1
    intc_0 // 1
    ||
    assert
    frame_dig -2
    bz test_literal_conditionals_bool_false@3
    intc_0 // 1
    b test_literal_conditionals_bool_merge@4

test_literal_conditionals_bool_false@3:
    intc_1 // 0

test_literal_conditionals_bool_merge@4:
    assert
    frame_dig -1
    intc_2 // 3
    *
    dup
    frame_bury 0
    bz test_literal_conditionals_ternary_false@10
    frame_dig 0
    b test_literal_conditionals_ternary_merge@11

test_literal_conditionals_ternary_false@10:
    intc_3 // 4

test_literal_conditionals_ternary_merge@11:
    intc_3 // 4
    ==
    assert
    frame_dig -2
    intc_2 // 3
    *
    intc_2 // 3
    ==
    assert
    retsub


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    bytec_0 // ""
    intc_1 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 1
    +
    dup
    frame_bury 0
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -1
    frame_dig 1
    frame_dig 0
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4
    intc_0 // 1
    frame_bury 0
    retsub

is_substring_after_if_else@4:
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_1 // 0
    frame_bury 0
    retsub
