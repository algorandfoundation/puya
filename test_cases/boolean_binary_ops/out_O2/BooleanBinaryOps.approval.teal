#pragma version 10

test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    int 1
    int 0
    callsub test_boolean_binary_ops
    callsub test_boolean_shortcircuit_binary_ops
    int 1
    return


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:
    proto 2 0
    frame_dig -2
    frame_dig -1
    &&
    !
    assert
    frame_dig -1
    frame_dig -2
    &&
    !
    assert
    frame_dig -2
    dup
    &&
    assert
    frame_dig -1
    dup
    &&
    !
    assert
    frame_dig -2
    frame_dig -1
    ||
    assert
    frame_dig -1
    frame_dig -2
    ||
    assert
    frame_dig -2
    dup
    ||
    assert
    frame_dig -1
    dup
    ||
    !
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    proto 0 0
    int 0
    dup
    byte ""
    dupn 3
    int 0
    int 1
    b test_boolean_shortcircuit_binary_ops_for_body@3

test_boolean_shortcircuit_binary_ops_for_header_1@2:
    int 0
    frame_bury 7
    frame_dig 3
    frame_bury 6

test_boolean_shortcircuit_binary_ops_for_body@3:
    int 0
    frame_bury 4
    int 1
    frame_bury 2
    b test_boolean_shortcircuit_binary_ops_for_body@6

test_boolean_shortcircuit_binary_ops_for_header_1@5:
    int 0
    frame_bury 2
    frame_dig 5
    frame_bury 4

test_boolean_shortcircuit_binary_ops_for_body@6:
    frame_dig 7
    dup
    callsub bool_to_bytes
    byte 0x5f
    swap
    concat
    byte 0x5f616e645f
    concat
    frame_dig 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 0
    byte 0x6c6873
    swap
    concat
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9
    byte 0x726873
    frame_dig 0
    concat
    frame_dig 2
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@10

test_boolean_shortcircuit_binary_ops_bool_false@9:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@10:
    frame_dig 7
    dup
    frame_dig 2
    dup
    cover 3
    &&
    uncover 3
    ==
    assert
    dup
    callsub bool_to_bytes
    byte 0x5f
    swap
    concat
    byte 0x5f6f725f
    concat
    uncover 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 1
    byte 0x6c6873
    swap
    concat
    callsub log_and_return
    bnz test_boolean_shortcircuit_binary_ops_bool_true@12
    byte 0x726873
    frame_dig 1
    concat
    frame_dig 2
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@13

test_boolean_shortcircuit_binary_ops_bool_true@12:
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@14

test_boolean_shortcircuit_binary_ops_bool_false@13:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@14:
    frame_dig 7
    frame_dig 2
    ||
    ==
    assert
    frame_dig 4
    dup
    int 1
    +
    frame_bury 5
    bz test_boolean_shortcircuit_binary_ops_for_header_1@5
    frame_dig 6
    dup
    int 1
    +
    frame_bury 3
    bz test_boolean_shortcircuit_binary_ops_for_header_1@2
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:
    proto 1 1
    frame_dig -1
    bz bool_to_bytes_ternary_false@2
    byte 0x74727565
    b bool_to_bytes_ternary_merge@3

bool_to_bytes_ternary_false@2:
    byte 0x66616c7365

bool_to_bytes_ternary_merge@3:
    retsub


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:
    proto 2 1
    frame_dig -1
    log
    frame_dig -2
    retsub
