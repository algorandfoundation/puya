#pragma version 10
#pragma typetrack false

// test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x66616c7365 0x74727565 0x6c6873 0x726873
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 4
    intc_0 // 0
    intc_1 // 1

for_body@4:
    intc_0 // 0
    bury 6
    intc_1 // 1
    bury 5

for_body@5:
    bytec_0 // 0x66616c7365
    bytec_1 // 0x74727565
    dig 2
    dup
    cover 3
    select
    pushbytes 0x5f
    swap
    concat
    dup
    bury 10
    pushbytes 0x5f616e645f
    concat
    bytec_0 // 0x66616c7365
    bytec_1 // 0x74727565
    dig 8
    select
    dup
    bury 12
    concat
    dup
    bury 13
    bytec_2 // 0x6c6873
    swap
    concat
    log
    bz bool_false@8
    bytec_3 // 0x726873
    dig 11
    concat
    log
    dig 4
    bz bool_false@8
    intc_1 // 1

bool_merge@9:
    dig 1
    dup
    dig 7
    &&
    uncover 2
    ==
    assert
    dig 8
    pushbytes 0x5f6f725f
    concat
    dig 10
    concat
    dup
    bury 12
    bytec_2 // 0x6c6873
    swap
    concat
    log
    bnz bool_true@11
    bytec_3 // 0x726873
    dig 10
    concat
    log
    dig 4
    bz bool_false@12

bool_true@11:
    intc_1 // 1

bool_merge@13:
    dig 1
    dig 6
    ||
    ==
    assert
    dig 5
    bnz after_for@16
    intc_1 // 1
    bury 6
    intc_0 // 0
    bury 5
    b for_body@5

after_for@16:
    dig 1
    bnz after_for@19
    intc_1 // 1
    bury 2
    intc_0 // 0
    bury 1
    b for_body@4

after_for@19:
    intc_0 // 0
    bury 7

for_header@68:
    dig 6
    pushint 3 // 3
    <
    bz after_for@71
    dig 6
    intc_1 // 1
    +
    bury 7
    b for_header@68

after_for@71:
    intc_0 // 0
    bury 4

while_top@118:
    dig 3
    pushint 4 // 4
    +
    dup
    bury 4
    pushint 5 // 5
    <=
    bz after_while@122
    pushbytes "right"
    dig 4
    dig 4
    substring3
    pushbytes "ight"
    ==
    bz after_if_else@121
    intc_1 // 1
    return

after_if_else@121:
    dig 3
    intc_1 // 1
    +
    bury 4
    b while_top@118

after_while@122:
    intc_0 // 0
    return

bool_false@12:
    intc_0 // 0
    b bool_merge@13

bool_false@8:
    intc_0 // 0
    b bool_merge@9
