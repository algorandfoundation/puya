debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, debug_level=1, optimization_level=0, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['boolean_binary_ops'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: found python prefix: <git root>/.venv
boolean_binary_ops/contract.py:97:12 warning: expression is always True
boolean_binary_ops/contract.py:98:12 warning: expression is always True
boolean_binary_ops/contract.py:99:25 warning: expression is always True
boolean_binary_ops/contract.py:102:9 warning: expression is always True
boolean_binary_ops/contract.py:103:9 warning: expression is always True
boolean_binary_ops/contract.py:104:27 warning: expression is always True
boolean_binary_ops/contract.py:108:8 warning: expression is always False
boolean_binary_ops/contract.py:110:8 warning: expression is always False
boolean_binary_ops/contract.py:112:21 warning: expression is always False
boolean_binary_ops/contract.py:127:13 warning: expression is always True
boolean_binary_ops/contract.py:127:13 warning: expression is always False
boolean_binary_ops/contract.py:127:35 warning: expression is always True
boolean_binary_ops/contract.py:128:12 warning: expression is always False
boolean_binary_ops/contract.py:128:18 warning: expression is always True
boolean_binary_ops/contract.py:128:18 warning: expression is always False
boolean_binary_ops/contract.py:129:12 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always False
boolean_binary_ops/contract.py:130:13 warning: expression is always True
boolean_binary_ops/contract.py:130:13 warning: expression is always False
boolean_binary_ops/contract.py:130:35 warning: expression is always True
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1
debug: Terminated block@1
debug: Looking for 'loop_counter%1' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let loop_counter%1#1: uint64 = undefined while trying to resolve 'loop_counter%1' in block@2
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let lhs#1: bool = undefined while trying to resolve 'lhs' in block@2
debug: Looking for 'rhs' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let rhs#1: bool = undefined while trying to resolve 'rhs' in block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@6
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4) in block@4
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5) in block@5
debug: Created Phi assignment: let lhs#2: bool = undefined while trying to resolve 'lhs' in block@6
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4) in block@4
debug: Created Phi assignment: let lhs#3: bool = undefined while trying to resolve 'lhs' in block@5
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2) in block@2
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1
debug: Deleting Phi assignment: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3)
debug: Replaced trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1
debug: Deleting Phi assignment: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5)
debug: Replaced trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#2: bool = undefined while trying to resolve 'rhs' in block@6
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4) in block@4
debug: Created Phi assignment: let rhs#3: bool = undefined while trying to resolve 'rhs' in block@5
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2) in block@2
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1
debug: Deleting Phi assignment: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3)
debug: Replaced trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1
debug: Deleting Phi assignment: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5)
debug: Replaced trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@10
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8) in block@8
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9) in block@9
debug: Created Phi assignment: let lhs#4: bool = undefined while trying to resolve 'lhs' in block@10
debug: Created Phi assignment: let lhs#5: bool = undefined while trying to resolve 'lhs' in block@8
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6) in block@6
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1
debug: Deleting Phi assignment: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7)
debug: Replaced trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8) in block@8
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) in block@9
debug: Replacing trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1
debug: Deleting Phi assignment: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9)
debug: Replaced trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#4: bool = undefined while trying to resolve 'rhs' in block@10
debug: Created Phi assignment: let rhs#5: bool = undefined while trying to resolve 'rhs' in block@8
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6) in block@6
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1
debug: Deleting Phi assignment: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7)
debug: Replaced trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8) in block@8
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) in block@9
debug: Replacing trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1
debug: Deleting Phi assignment: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9)
debug: Replaced trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@2
debug: Added loop_counter%1#0 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1) in block@1
debug: Added loop_counter%1#2 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12) in block@12
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let lhs#6: bool = undefined while trying to resolve 'lhs' in block@1
debug: Added lhs#6 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1) in block@1
debug: Added lhs#1 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) in block@12
debug: Replacing trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6
debug: Deleting Phi assignment: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12)
debug: Replaced trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6 in current definition for 11 blocks
debug: Added rhs#0 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1) in block@1
debug: Added rhs#6 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12) in block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@1
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15) in block@15
debug: Added lhs#0 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0) in block@0
debug: Added lhs#7 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15) in block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Building IR for function test_cases.boolean_binary_ops.contract.log_and_return
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.type_coercion
debug: Sealing block@0
boolean_binary_ops/contract.py:62:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@0
debug: Sealing block@1
boolean_binary_ops/contract.py:64:9 debug: encountered already materialized expression (appl), reusing result: appl
debug: Terminated block@1
debug: Sealing block@2
boolean_binary_ops/contract.py:64:44 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Terminated block@3
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@10
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8) in block@8
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8, or_result%1#1 <- block@9) in block@9
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@10
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@8
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4) in block@4
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5) in block@5
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6) in block@6
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8) in block@8
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Created Phi assignment: let y#1: bytes = undefined while trying to resolve 'y' in block@10
debug: Created Phi assignment: let y#2: bytes = undefined while trying to resolve 'y' in block@8
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4) in block@4
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5) in block@5
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6) in block@6
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7)
debug: Replaced trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8) in block@8
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9)
debug: Replaced trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@12
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10) in block@10
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let y#3: bytes = undefined while trying to resolve 'y' in block@12
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10) in block@10
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0
debug: Deleting Phi assignment: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11)
debug: Replaced trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@16
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14) in block@14
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14, and_result%0#1 <- block@15) in block@15
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@16
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@14
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12) in block@12
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0
debug: Deleting Phi assignment: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14) in block@14
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@15
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11) in block@11
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0
debug: Deleting Phi assignment: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0
debug: Deleting Phi assignment: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15)
debug: Replaced trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0 in current definition for 1 blocks
debug: Terminated block@16
debug: Sealing block@17
debug: Created Phi assignment: let y#4: bytes = undefined while trying to resolve 'y' in block@16
debug: Created Phi assignment: let y#5: bytes = undefined while trying to resolve 'y' in block@14
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12) in block@12
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0
debug: Deleting Phi assignment: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14) in block@14
debug: Created Phi assignment: let y#6: bytes = undefined while trying to resolve 'y' in block@15
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11) in block@11
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0
debug: Deleting Phi assignment: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0
debug: Deleting Phi assignment: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15)
debug: Replaced trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0 in current definition for 1 blocks
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let z#1: bytes = undefined while trying to resolve 'z' in block@16
debug: Created Phi assignment: let z#2: bytes = undefined while trying to resolve 'z' in block@14
debug: Created Phi assignment: let z#3: bytes = undefined while trying to resolve 'z' in block@12
debug: Created Phi assignment: let z#4: bytes = undefined while trying to resolve 'z' in block@10
debug: Created Phi assignment: let z#5: bytes = undefined while trying to resolve 'z' in block@8
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4) in block@4
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5) in block@5
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6) in block@6
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0
debug: Deleting Phi assignment: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7)
debug: Replaced trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8) in block@8
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0
debug: Deleting Phi assignment: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9)
debug: Replaced trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10) in block@10
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0
debug: Deleting Phi assignment: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11)
debug: Replaced trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12) in block@12
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0
debug: Deleting Phi assignment: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14) in block@14
debug: Created Phi assignment: let z#6: bytes = undefined while trying to resolve 'z' in block@15
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11) in block@11
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0
debug: Deleting Phi assignment: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0
debug: Deleting Phi assignment: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15)
debug: Replaced trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0 in current definition for 1 blocks
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Created Phi assignment: let or_result%2#2: bool = undefined while trying to resolve 'or_result%2' in block@21
debug: Added or_result%2#0 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19) in block@19
debug: Added or_result%2#1 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19, or_result%2#1 <- block@20) in block@20
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@21
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@19
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16) in block@16
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17) in block@17
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19) in block@19
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0
debug: Deleting Phi assignment: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20)
debug: Replaced trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0 in current definition for 1 blocks
debug: Terminated block@21
debug: Sealing block@22
debug: Created Phi assignment: let y#7: bytes = undefined while trying to resolve 'y' in block@21
debug: Created Phi assignment: let y#8: bytes = undefined while trying to resolve 'y' in block@19
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16) in block@16
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17) in block@17
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0
debug: Deleting Phi assignment: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18)
debug: Replaced trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19) in block@19
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0
debug: Deleting Phi assignment: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20)
debug: Replaced trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0 in current definition for 1 blocks
debug: Terminated block@22
debug: Sealing block@23
debug: Created Phi assignment: let z#7: bytes = undefined while trying to resolve 'z' in block@21
debug: Created Phi assignment: let z#8: bytes = undefined while trying to resolve 'z' in block@19
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16) in block@16
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17) in block@17
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0
debug: Deleting Phi assignment: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18)
debug: Replaced trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19) in block@19
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0
debug: Deleting Phi assignment: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20)
debug: Replaced trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0 in current definition for 1 blocks
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Created Phi assignment: let or_result%3#2: bool = undefined while trying to resolve 'or_result%3' in block@26
debug: Added or_result%3#0 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24) in block@24
debug: Added or_result%3#1 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24, or_result%3#1 <- block@25) in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@29
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27) in block@27
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27, ternary_result%1#1 <- block@28) in block@28
debug: Terminated block@29
debug: Sealing block@30
debug: Terminated block@30
debug: Sealing block@31
boolean_binary_ops/contract.py:81:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ri')))), reusing result: tmp%26#0
debug: Terminated block@31
debug: Sealing block@32
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@32
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30) in block@30
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30, ternary_result%0#1 <- block@31) in block@31
debug: Terminated block@32
debug: Sealing block@33
debug: Terminated block@33
debug: Sealing block@34
debug: Terminated block@34
debug: Sealing block@35
debug: Created Phi assignment: let ternary_result%3#2: bytes = undefined while trying to resolve 'ternary_result%3' in block@35
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33) in block@33
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33, ternary_result%3#1 <- block@34) in block@34
debug: Terminated block@35
debug: Sealing block@36
debug: Terminated block@36
debug: Sealing block@37
boolean_binary_ops/contract.py:82:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>((len(SINGLE_EVAL(id=0, source='le')) == 0u) ? (SINGLE_EVAL(id=0)) : (SINGLE_EVAL(id=1, source='ri'))))), reusing result: tmp%34#0
debug: Terminated block@37
debug: Sealing block@38
debug: Terminated block@38
debug: Sealing block@39
debug: Terminated block@39
debug: Sealing block@40
debug: Created Phi assignment: let ternary_result%4#2: bytes = undefined while trying to resolve 'ternary_result%4' in block@40
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38) in block@38
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38, ternary_result%4#1 <- block@39) in block@39
debug: Terminated block@40
debug: Sealing block@41
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@41
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36) in block@36
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36, ternary_result%2#1 <- block@40) in block@40
boolean_binary_ops/contract.py:85:30 debug: encountered already materialized expression (hex<"6E65766572207365656E">), reusing result: 0x6e65766572207365656e
debug: Terminated block@41
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@42
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@42
debug: Terminated block@42
debug: Sealing block@43
debug: Looking for 'bytes_to_iterate' in an unsealed block creating an incomplete Phi: block@42
debug: Created Phi assignment: let bytes_to_iterate#1: bytes = undefined while trying to resolve 'bytes_to_iterate' in block@42
debug: Terminated block@43
debug: Sealing block@44
debug: Terminated block@44
debug: Sealing block@42
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41) in block@41
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41, item_index_internal%0#2 <- block@44) in block@44
debug: Added bytes_to_iterate#0 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41) in block@41
debug: Added bytes_to_iterate#1 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) in block@44
debug: Replacing trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0
debug: Deleting Phi assignment: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44)
debug: Replaced trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0 in current definition for 3 blocks
debug: Sealing block@45
boolean_binary_ops/contract.py:87:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
boolean_binary_ops/contract.py:88:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
debug: Terminated block@45
debug: Sealing block@46
debug: Terminated block@46
debug: Sealing block@47
debug: Terminated block@47
debug: Sealing block@48
debug: Created Phi assignment: let ternary_result%5#2: bytes = undefined while trying to resolve 'ternary_result%5' in block@48
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46) in block@46
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46, ternary_result%5#1 <- block@47) in block@47
boolean_binary_ops/contract.py:91:13 debug: encountered already materialized expression (1u), reusing result: 1u
boolean_binary_ops/contract.py:92:14 debug: encountered already materialized expression (1u), reusing result: 1u
debug: Terminated block@48
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Sealing block@0
boolean_binary_ops/contract.py:97:5 warning: assertion is always true, ignoring
boolean_binary_ops/contract.py:98:5 warning: assertion is always true, ignoring
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7
debug: Created Phi assignment: let a#1: bool = undefined while trying to resolve 'a' in block@8
debug: Created Phi assignment: let a#2: bool = undefined while trying to resolve 'a' in block@6
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4) in block@4
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6) in block@6
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7)
debug: Replaced trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let b#1: bool = undefined while trying to resolve 'b' in block@8
debug: Created Phi assignment: let b#2: bool = undefined while trying to resolve 'b' in block@6
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4) in block@4
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6) in block@6
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7)
debug: Replaced trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0 in current definition for 1 blocks
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let c#1: bool = undefined while trying to resolve 'c' in block@8
debug: Created Phi assignment: let c#2: bool = undefined while trying to resolve 'c' in block@6
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4) in block@4
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6) in block@6
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7)
debug: Replaced trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@14
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12) in block@12
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12, and_result%0#1 <- block@13) in block@13
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
boolean_binary_ops/contract.py:120:22 debug: encountered already materialized expression (one), reusing result: one#0
boolean_binary_ops/contract.py:122:22 debug: encountered already materialized expression (empty_bytes), reusing result: empty_bytes#0
debug: Terminated block@24
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let true#1: bool = undefined while trying to resolve 'true' in block@4
debug: Created Phi assignment: let true#2: bool = undefined while trying to resolve 'true' in block@2
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0) in block@0
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1)
debug: Replaced trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2) in block@2
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3)
debug: Replaced trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7
debug: Created Phi assignment: let false#1: bool = undefined while trying to resolve 'false' in block@8
debug: Created Phi assignment: let false#2: bool = undefined while trying to resolve 'false' in block@6
debug: Created Phi assignment: let false#3: bool = undefined while trying to resolve 'false' in block@4
debug: Created Phi assignment: let false#4: bool = undefined while trying to resolve 'false' in block@2
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0) in block@0
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1)
debug: Replaced trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2) in block@2
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3)
debug: Replaced trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4) in block@4
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6) in block@6
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7)
debug: Replaced trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@11
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9) in block@9
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9, ternary_result%0#1 <- block@10) in block@10
debug: Terminated block@11
debug: Sealing block@12
boolean_binary_ops/contract.py:133:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let true#3: bool = undefined while trying to resolve 'true' in block@11
debug: Created Phi assignment: let true#4: bool = undefined while trying to resolve 'true' in block@8
debug: Created Phi assignment: let true#5: bool = undefined while trying to resolve 'true' in block@6
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4) in block@4
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6) in block@6
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7)
debug: Replaced trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9) in block@9
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) in block@10
debug: Replacing trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10)
debug: Replaced trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@14
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12) in block@12
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12, ternary_result%1#1 <- block@13) in block@13
debug: Terminated block@14
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: optimizing approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Removing unused variable z#0
debug: Removing unused variable bytes_to_iterate#0
debug: Removing unused variable reverse_index_internal%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable one#0
debug: Removing unused variable empty_bytes#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: optimizing clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
debug: lowering array IR nodes in clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
debug: optimizing approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
boolean_binary_ops/contract.py:6 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program, []
debug: auto reserving slots in _puya_lib.bytes_.is_substring, []
boolean_binary_ops/contract.py:20 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops, []
boolean_binary_ops/contract.py:33 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.bool_to_bytes, []
boolean_binary_ops/contract.py:38 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops, []
boolean_binary_ops/contract.py:54 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.log_and_return, []
boolean_binary_ops/contract.py:60 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.type_coercion, []
boolean_binary_ops/contract.py:68 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops, []
boolean_binary_ops/contract.py:95 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops, []
boolean_binary_ops/contract.py:125 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.test_literal_conditionals, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
boolean_binary_ops/contract.py:15 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for _puya_lib.bytes_.is_substring
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in _puya_lib.bytes_.is_substring using strategy RootOperandGrouping
debug: Coalescing start#0 with [start#5, start#1, start#2]
debug: Coalescing resulted in 10 replacement/s
debug: Sequentializing parallel copies in _puya_lib.bytes_.is_substring
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.bool_to_bytes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#5, loop_counter%0#1, loop_counter%0#2]
debug: Coalescing lhs#0 with [lhs#10, lhs#6, lhs#7]
debug: Coalescing loop_counter%1#0 with [loop_counter%1#5, loop_counter%1#1, loop_counter%1#2]
debug: Coalescing rhs#0 with [rhs#9, rhs#1, rhs#6]
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing or_result%0#0 with [or_result%0#5, or_result%0#1, or_result%0#2]
debug: Coalescing resulted in 52 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.log_and_return
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.log_and_return using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.log_and_return
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.type_coercion
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.type_coercion using strategy RootOperandGrouping
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.type_coercion
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing or_result%0#0 with [or_result%0#5, or_result%0#1, or_result%0#2]
debug: Coalescing or_result%1#0 with [or_result%1#5, or_result%1#1, or_result%1#2]
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing or_result%2#0 with [or_result%2#5, or_result%2#1, or_result%2#2]
debug: Coalescing or_result%3#0 with [or_result%3#5, or_result%3#1, or_result%3#2]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#5, ternary_result%1#1, ternary_result%1#2]
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing ternary_result%3#0 with [ternary_result%3#5, ternary_result%3#1, ternary_result%3#2]
debug: Coalescing ternary_result%2#0 with [ternary_result%2#5, ternary_result%2#1, ternary_result%2#2]
debug: Coalescing ternary_result%4#0 with [ternary_result%4#5, ternary_result%4#1, ternary_result%4#2]
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#5, item_index_internal%0#1, item_index_internal%0#2]
debug: Coalescing ternary_result%5#0 with [ternary_result%5#5, ternary_result%5#1, ternary_result%5#2]
debug: Coalescing resulted in 88 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing or_result%0#0 with [or_result%0#5, or_result%0#1, or_result%0#2]
debug: Coalescing or_result%1#0 with [or_result%1#5, or_result%1#1, or_result%1#2]
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing resulted in 21 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_literal_conditionals using strategy RootOperandGrouping
debug: Coalescing or_result%0#0 with [or_result%0#5, or_result%0#1, or_result%0#2]
debug: Coalescing or_result%1#0 with [or_result%1#5, or_result%1#1, or_result%1#2]
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#5, ternary_result%1#1, ternary_result%1#2]
debug: Coalescing resulted in 28 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Performing post-SSA optimizations at level 0
debug: Output IR to boolean_binary_ops/out_unoptimized/BooleanBinaryOps.ir/BooleanBinaryOps.approval.0.destructured.ir
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to boolean_binary_ops/out_unoptimized/BooleanBinaryOps.ir/BooleanBinaryOps.clear.0.destructured.ir
debug: Inserted is_substring_while_top@1.ops[13]: 'l-store-copy tmp%3#0 0'
debug: Replaced is_substring_while_top@1.ops[15]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted is_substring_while_top@1.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced is_substring_while_top@1.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted is_substring_while_top@1.ops[10]: 'l-store-copy tmp%2#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted is_substring_while_top@1.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted is_substring_while_body@2.ops[15]: 'l-store-copy tmp%7#0 0'
debug: Replaced is_substring_while_body@2.ops[17]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted is_substring_while_body@2.ops[2]: 'l-store-copy tmp%4#0 0'
debug: Replaced is_substring_while_body@2.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted is_substring_while_body@2.ops[12]: 'l-store-copy tmp%6#0 0'
debug: Replaced is_substring_while_body@2.ops[15]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted is_substring_while_body@2.ops[7]: 'l-store-copy tmp%5#0 0'
debug: Replaced is_substring_while_body@2.ops[11]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted is_substring_while_body@2.ops[5]: 'l-store-copy start#0 1'
debug: Replaced is_substring_while_body@2.ops[11]: 'v-load start#0' with 'l-load start#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[9]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[14]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[16]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[18]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[25]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[27]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[32]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[34]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[36]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[38]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[43]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[45]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[50]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[52]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[57]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[59]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[64]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[66]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[68]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[70]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted bool_to_bytes_block@0.ops[4]: 'l-store-copy select%0#0 0'
debug: Replaced bool_to_bytes_block@0.ops[6]: 'v-load select%0#0' with 'l-load select%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[6]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[8]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[26]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[15]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[20]: 'l-store-copy and_msg#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[23]: 'v-load and_msg#0' with 'l-load and_msg#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[25]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[12]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[1]: 'l-store-copy lhs#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[29]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[7]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[9]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[6]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[9]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[11]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[19]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[21]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[39]: 'l-store-copy tmp%15#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[41]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[5]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[8]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[16]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[19]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[29]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[32]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[34]: 'l-store-copy or_msg#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[37]: 'v-load or_msg#0' with 'l-load or_msg#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[39]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[42]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[26]: 'l-store-copy tmp%12#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[32]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[1]: 'l-store-copy and_result#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[8]: 'v-load and_result#0' with 'l-load and_result#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[4]: 'l-store-copy lhs#0 1'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[16]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[6]: 'l-store-copy rhs#0 3'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[31]: 'v-load rhs#0' with 'l-load rhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[18]: 'l-store-copy lhs#0 1'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[46]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[7]: 'l-store-copy tmp%17#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[9]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[3]: 'l-store-copy tmp%16#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[6]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[9]: 'l-store-copy tmp%19#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[11]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[5]: 'l-store-copy tmp%18#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[8]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[1]: 'l-store-copy or_result#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[8]: 'v-load or_result#0' with 'l-load or_result#0'
debug: Inserted type_coercion_block@0.ops[8]: 'l-store-copy select%0#0 0'
debug: Replaced type_coercion_block@0.ops[10]: 'v-load select%0#0' with 'l-load select%0#0'
debug: Inserted type_coercion_block@0.ops[11]: 'l-store-copy b#0 0'
debug: Replaced type_coercion_block@0.ops[13]: 'v-load b#0' with 'l-load b#0'
debug: Inserted type_coercion_block@0.ops[16]: 'l-store-copy tmp%1#0 0'
debug: Replaced type_coercion_block@0.ops[18]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted type_coercion_block@0.ops[23]: 'l-store-copy tmp%2#0 0'
debug: Replaced type_coercion_block@0.ops[25]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted type_coercion_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced type_coercion_block@0.ops[7]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted type_coercion_ternary_false@2.ops[8]: 'l-store-copy select%1#0 0'
debug: Replaced type_coercion_ternary_false@2.ops[10]: 'v-load select%1#0' with 'l-load select%1#0'
debug: Inserted type_coercion_ternary_false@2.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced type_coercion_ternary_false@2.ops[7]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted type_coercion_ternary_merge@3.ops[1]: 'l-store-copy c#0 0'
debug: Replaced type_coercion_ternary_merge@3.ops[3]: 'v-load c#0' with 'l-load c#0'
debug: Inserted type_coercion_ternary_merge@3.ops[6]: 'l-store-copy tmp%4#0 0'
debug: Replaced type_coercion_ternary_merge@3.ops[8]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_union_boolean_binary_ops_block@0.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_union_boolean_binary_ops_block@0.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_union_boolean_binary_ops_block@0.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_union_boolean_binary_ops_block@0.ops[9]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@1.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@1.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@4.ops[1]: 'l-store-copy ok#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@4.ops[3]: 'v-load ok#0' with 'l-load ok#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@4.ops[8]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@4.ops[10]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@5.ops[2]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@5.ops[4]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@5.ops[7]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@5.ops[9]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@6.ops[2]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@6.ops[4]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@6.ops[7]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@6.ops[9]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@7.ops[2]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@7.ops[4]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@7.ops[7]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@7.ops[9]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@10.ops[5]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@10.ops[7]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@11.ops[2]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@11.ops[4]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@11.ops[7]: 'l-store-copy tmp%12#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@11.ops[9]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted test_union_boolean_binary_ops_and_contd@12.ops[3]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_union_boolean_binary_ops_and_contd@12.ops[5]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@13.ops[2]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@13.ops[4]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@13.ops[7]: 'l-store-copy tmp%15#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@13.ops[9]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@16.ops[5]: 'l-store-copy tmp%16#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@16.ops[7]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@17.ops[2]: 'l-store-copy tmp%17#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@17.ops[4]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@17.ops[7]: 'l-store-copy tmp%18#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@17.ops[9]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@18.ops[2]: 'l-store-copy tmp%19#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@18.ops[4]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@18.ops[7]: 'l-store-copy tmp%20#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@18.ops[9]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@21.ops[5]: 'l-store-copy tmp%21#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@21.ops[7]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@22.ops[2]: 'l-store-copy tmp%22#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@22.ops[4]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@22.ops[7]: 'l-store-copy tmp%23#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@22.ops[9]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@23.ops[2]: 'l-store-copy tmp%24#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@23.ops[4]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted test_union_boolean_binary_ops_or_contd@23.ops[7]: 'l-store-copy tmp%25#0 0'
debug: Replaced test_union_boolean_binary_ops_or_contd@23.ops[9]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@26.ops[7]: 'l-store-copy tmp%27#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@26.ops[9]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted test_union_boolean_binary_ops_bool_merge@26.ops[12]: 'l-store-copy tmp%28#0 0'
debug: Replaced test_union_boolean_binary_ops_bool_merge@26.ops[14]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@29.ops[6]: 'l-store-copy tmp%30#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@29.ops[8]: 'v-load tmp%30#0' with 'l-load tmp%30#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@29.ops[2]: 'l-store-copy tmp%29#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@29.ops[5]: 'v-load tmp%29#0' with 'l-load tmp%29#0'
debug: Inserted test_union_boolean_binary_ops_ternary_false@31.ops[4]: 'l-store-copy tmp%31#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_false@31.ops[6]: 'v-load tmp%31#0' with 'l-load tmp%31#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@32.ops[4]: 'l-store-copy tmp%32#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@32.ops[6]: 'v-load tmp%32#0' with 'l-load tmp%32#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@32.ops[9]: 'l-store-copy tmp%33#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@32.ops[11]: 'v-load tmp%33#0' with 'l-load tmp%33#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@35.ops[9]: 'l-store-copy tmp%36#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@35.ops[11]: 'v-load tmp%36#0' with 'l-load tmp%36#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@35.ops[5]: 'l-store-copy tmp%35#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@35.ops[8]: 'v-load tmp%35#0' with 'l-load tmp%35#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@35.ops[2]: 'l-store-copy tmp%34#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@35.ops[8]: 'v-load tmp%34#0' with 'l-load tmp%34#0'
debug: Inserted test_union_boolean_binary_ops_ternary_false@37.ops[7]: 'l-store-copy tmp%38#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_false@37.ops[9]: 'v-load tmp%38#0' with 'l-load tmp%38#0'
debug: Inserted test_union_boolean_binary_ops_ternary_false@37.ops[12]: 'l-store-copy tmp%39#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_false@37.ops[14]: 'v-load tmp%39#0' with 'l-load tmp%39#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@41.ops[4]: 'l-store-copy tmp%40#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@41.ops[6]: 'v-load tmp%40#0' with 'l-load tmp%40#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@41.ops[14]: 'l-store-copy select%0#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@41.ops[16]: 'v-load select%0#0' with 'l-load select%0#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@41.ops[9]: 'l-store-copy tmp%41#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@41.ops[13]: 'v-load tmp%41#0' with 'l-load tmp%41#0'
debug: Inserted test_union_boolean_binary_ops_for_header@42.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced test_union_boolean_binary_ops_for_header@42.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[15]: 'l-store-copy tmp%43#0 0'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[17]: 'v-load tmp%43#0' with 'l-load tmp%43#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[6]: 'l-store-copy idx#0 0'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[9]: 'v-load idx#0' with 'l-load idx#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[12]: 'l-store-copy tmp%42#0 0'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[15]: 'v-load tmp%42#0' with 'l-load tmp%42#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[2]: 'l-store-copy item_index_internal%0#0 1'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[6]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[5]: 'l-store-copy b#0 1'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[16]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[2]: 'l-store-copy tmp%44#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[4]: 'v-load tmp%44#0' with 'l-load tmp%44#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[12]: 'l-store-copy select%1#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[14]: 'v-load select%1#0' with 'l-load select%1#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[16]: 'l-store-copy tmp%46#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[18]: 'v-load tmp%46#0' with 'l-load tmp%46#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[21]: 'l-store-copy tmp%47#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[23]: 'v-load tmp%47#0' with 'l-load tmp%47#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[27]: 'l-store-copy tmp%48#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[29]: 'v-load tmp%48#0' with 'l-load tmp%48#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[37]: 'l-store-copy select%2#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[39]: 'v-load select%2#0' with 'l-load select%2#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[64]: 'l-store-copy tmp%50#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[66]: 'v-load tmp%50#0' with 'l-load tmp%50#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[69]: 'l-store-copy tmp%51#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[71]: 'v-load tmp%51#0' with 'l-load tmp%51#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[75]: 'l-store-copy tmp%52#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[77]: 'v-load tmp%52#0' with 'l-load tmp%52#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[80]: 'l-store-copy tmp%53#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[82]: 'v-load tmp%53#0' with 'l-load tmp%53#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[41]: 'l-store-copy length%0#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[44]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[7]: 'l-store-copy tmp%45#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[11]: 'v-load tmp%45#0' with 'l-load tmp%45#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[33]: 'l-store-copy tmp%49#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[37]: 'v-load tmp%49#0' with 'l-load tmp%49#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[48]: 'l-store-copy is_out_of_bounds%0#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[52]: 'v-load is_out_of_bounds%0#0' with 'l-load is_out_of_bounds%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[58]: 'l-store-copy is_out_of_bounds%1#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[62]: 'v-load is_out_of_bounds%1#0' with 'l-load is_out_of_bounds%1#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[64]: 'l-store-copy bounded_index%1#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[68]: 'v-load bounded_index%1#0' with 'l-load bounded_index%1#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[47]: 'l-store-copy length%0#0 1'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[52]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[58]: 'l-store-copy length%0#0 1'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[63]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[53]: 'l-store-copy length%0#0 2'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[58]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[56]: 'l-store-copy bounded_index%0#0 1'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[71]: 'v-load bounded_index%0#0' with 'l-load bounded_index%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[42]: 'l-store-copy select%2#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[71]: 'v-load select%2#0' with 'l-load select%2#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[3]: 'l-store-copy tmp%54#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[5]: 'v-load tmp%54#0' with 'l-load tmp%54#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[15]: 'l-store-copy select%3#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[17]: 'v-load select%3#0' with 'l-load select%3#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[20]: 'l-store-copy tmp%56#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[22]: 'v-load tmp%56#0' with 'l-load tmp%56#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[25]: 'l-store-copy tmp%57#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[27]: 'v-load tmp%57#0' with 'l-load tmp%57#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[37]: 'l-store-copy select%4#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[39]: 'v-load select%4#0' with 'l-load select%4#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[48]: 'l-store-copy tmp%61#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[50]: 'v-load tmp%61#0' with 'l-load tmp%61#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[44]: 'l-store-copy tmp%60#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[47]: 'v-load tmp%60#0' with 'l-load tmp%60#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[10]: 'l-store-copy tmp%55#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[14]: 'v-load tmp%55#0' with 'l-load tmp%55#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[33]: 'l-store-copy tmp%58#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[37]: 'v-load tmp%58#0' with 'l-load tmp%58#0'
debug: Inserted test_union_boolean_binary_ops_ternary_merge@48.ops[43]: 'l-store-copy tmp%59#0 0'
debug: Replaced test_union_boolean_binary_ops_ternary_merge@48.ops[49]: 'v-load tmp%59#0' with 'l-load tmp%59#0'
debug: Inserted test_literal_boolean_binary_ops_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_literal_boolean_binary_ops_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_literal_boolean_binary_ops_block@0.ops[8]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_literal_boolean_binary_ops_block@0.ops[10]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@1.ops[2]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@1.ops[4]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@1.ops[7]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@1.ops[9]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_literal_boolean_binary_ops_bool_merge@4.ops[5]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_literal_boolean_binary_ops_bool_merge@4.ops[7]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@5.ops[2]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@5.ops[4]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@5.ops[7]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@5.ops[9]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@18.ops[3]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@18.ops[5]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@22.ops[2]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@22.ops[4]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_literal_boolean_binary_ops_or_contd@22.ops[7]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_literal_boolean_binary_ops_or_contd@22.ops[9]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[3]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[5]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[15]: 'l-store-copy select%0#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[17]: 'v-load select%0#0' with 'l-load select%0#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[19]: 'l-store-copy tmp%12#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[21]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[24]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[26]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[30]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[32]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[40]: 'l-store-copy select%1#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[42]: 'v-load select%1#0' with 'l-load select%1#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[44]: 'l-store-copy tmp%16#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[46]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[49]: 'l-store-copy tmp%17#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[51]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[10]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[14]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_literal_boolean_binary_ops_after_if_else@24.ops[36]: 'l-store-copy tmp%15#0 0'
debug: Replaced test_literal_boolean_binary_ops_after_if_else@24.ops[40]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted test_literal_conditionals_block@0.ops[4]: 'l-store-copy select%0#0 0'
debug: Replaced test_literal_conditionals_block@0.ops[6]: 'v-load select%0#0' with 'l-load select%0#0'
debug: Inserted test_literal_conditionals_block@0.ops[9]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_literal_conditionals_block@0.ops[11]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_literal_conditionals_or_contd@1.ops[4]: 'l-store-copy select%1#0 0'
debug: Replaced test_literal_conditionals_or_contd@1.ops[6]: 'v-load select%1#0' with 'l-load select%1#0'
debug: Inserted test_literal_conditionals_or_contd@5.ops[4]: 'l-store-copy select%2#0 0'
debug: Replaced test_literal_conditionals_or_contd@5.ops[6]: 'v-load select%2#0' with 'l-load select%2#0'
debug: Inserted test_literal_conditionals_bool_merge@8.ops[6]: 'l-store-copy select%3#0 0'
debug: Replaced test_literal_conditionals_bool_merge@8.ops[8]: 'v-load select%3#0' with 'l-load select%3#0'
debug: Inserted test_literal_conditionals_bool_merge@8.ops[11]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_literal_conditionals_bool_merge@8.ops[13]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_literal_conditionals_bool_merge@8.ops[19]: 'l-store-copy select%4#0 0'
debug: Replaced test_literal_conditionals_bool_merge@8.ops[21]: 'v-load select%4#0' with 'l-load select%4#0'
debug: Inserted test_literal_conditionals_bool_merge@8.ops[24]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_literal_conditionals_bool_merge@8.ops[26]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[1]: 'l-store-copy y#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[3]: 'v-load y#0' with 'l-load y#0'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[6]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[8]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[13]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[15]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_literal_conditionals_ternary_false@13.ops[4]: 'l-store-copy select%5#0 0'
debug: Replaced test_literal_conditionals_ternary_false@13.ops[6]: 'v-load select%5#0' with 'l-load select%5#0'
debug: Inserted test_literal_conditionals_ternary_merge@14.ops[1]: 'l-store-copy z#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@14.ops[3]: 'v-load z#0' with 'l-load z#0'
debug: Inserted test_literal_conditionals_ternary_merge@14.ops[6]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@14.ops[8]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Found 3 edge set/s for _puya_lib.bytes_.is_substring
debug: Found 10 edge set/s for test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Allocated 2 variable/s to x-stack: and_result%0#0, or_result%0#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@4 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result%0#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@5 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result%0#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@8 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result%0#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@9 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result%0#0
debug: Found 2 edge set/s for test_cases.boolean_binary_ops.contract.type_coercion
debug: Allocated 1 variable/s to x-stack: ternary_result%0#0
debug: shared x-stack for type_coercion_ternary_true@1 -> type_coercion_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for type_coercion_ternary_false@2 -> type_coercion_ternary_merge@3: ternary_result%0#0
debug: Found 25 edge set/s for test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Allocated 10 variable/s to x-stack: and_result%0#0, or_result%0#0, or_result%1#0, or_result%2#0, or_result%3#0, ternary_result%0#0, ternary_result%2#0, ternary_result%3#0, ternary_result%4#0, ternary_result%5#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_true@2 -> test_union_boolean_binary_ops_bool_merge@4: or_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_false@3 -> test_union_boolean_binary_ops_bool_merge@4: or_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_true@8 -> test_union_boolean_binary_ops_bool_merge@10: or_result%1#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_false@9 -> test_union_boolean_binary_ops_bool_merge@10: or_result%1#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_true@14 -> test_union_boolean_binary_ops_bool_merge@16: and_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_false@15 -> test_union_boolean_binary_ops_bool_merge@16: and_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_true@19 -> test_union_boolean_binary_ops_bool_merge@21: or_result%2#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_false@20 -> test_union_boolean_binary_ops_bool_merge@21: or_result%2#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_true@24 -> test_union_boolean_binary_ops_bool_merge@26: or_result%3#0
debug: shared x-stack for test_union_boolean_binary_ops_bool_false@25 -> test_union_boolean_binary_ops_bool_merge@26: or_result%3#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_true@30 -> test_union_boolean_binary_ops_ternary_merge@32: ternary_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_false@31 -> test_union_boolean_binary_ops_ternary_merge@32: ternary_result%0#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_true@33 -> test_union_boolean_binary_ops_ternary_merge@35: ternary_result%3#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_false@34 -> test_union_boolean_binary_ops_ternary_merge@35: ternary_result%3#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_true@36 -> test_union_boolean_binary_ops_ternary_merge@41: ternary_result%2#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_merge@40 -> test_union_boolean_binary_ops_ternary_merge@41: ternary_result%2#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_true@38 -> test_union_boolean_binary_ops_ternary_merge@40: ternary_result%4#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_false@39 -> test_union_boolean_binary_ops_ternary_merge@40: ternary_result%4#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_true@46 -> test_union_boolean_binary_ops_ternary_merge@48: ternary_result%5#0
debug: shared x-stack for test_union_boolean_binary_ops_ternary_false@47 -> test_union_boolean_binary_ops_ternary_merge@48: ternary_result%5#0
debug: Found 10 edge set/s for test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Allocated 3 variable/s to x-stack: and_result%0#0, or_result%0#0, or_result%1#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_true@2 -> test_literal_boolean_binary_ops_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_false@3 -> test_literal_boolean_binary_ops_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_true@6 -> test_literal_boolean_binary_ops_bool_merge@8: or_result%1#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_false@7 -> test_literal_boolean_binary_ops_bool_merge@8: or_result%1#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_true@12 -> test_literal_boolean_binary_ops_bool_merge@14: and_result%0#0
debug: shared x-stack for test_literal_boolean_binary_ops_bool_false@13 -> test_literal_boolean_binary_ops_bool_merge@14: and_result%0#0
debug: Found 8 edge set/s for test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Allocated 4 variable/s to x-stack: or_result%0#0, or_result%1#0, ternary_result%0#0, ternary_result%1#0
debug: shared x-stack for test_literal_conditionals_bool_true@2 -> test_literal_conditionals_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_conditionals_bool_false@3 -> test_literal_conditionals_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_conditionals_bool_true@6 -> test_literal_conditionals_bool_merge@8: or_result%1#0
debug: shared x-stack for test_literal_conditionals_bool_false@7 -> test_literal_conditionals_bool_merge@8: or_result%1#0
debug: shared x-stack for test_literal_conditionals_ternary_true@9 -> test_literal_conditionals_ternary_merge@11: ternary_result%0#0
debug: shared x-stack for test_literal_conditionals_ternary_false@10 -> test_literal_conditionals_ternary_merge@11: ternary_result%0#0
debug: shared x-stack for test_literal_conditionals_ternary_true@12 -> test_literal_conditionals_ternary_merge@14: ternary_result%1#0
debug: shared x-stack for test_literal_conditionals_ternary_false@13 -> test_literal_conditionals_ternary_merge@14: ternary_result%1#0
debug: _puya_lib.bytes_.is_substring f-stack entry: []
debug: _puya_lib.bytes_.is_substring f-stack on first store: ['start#0']
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack entry: ['and_msg#0', 'or_msg#0', 'loop_counter%1#0', 'rhs#0']
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack on first store: ['loop_counter%0#0', 'lhs#0']
debug: test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops f-stack entry: ['select%0#0', 'ternary_result%1#0', 'tmp%37#0', 'bytes_length%0#0', 'item_index_internal%0#0', 'tmp%26#0', 'tmp%34#0']
debug: test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops f-stack on first store: []
debug: test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops f-stack entry: ['c#0', 'd#0']
debug: test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops f-stack on first store: []
debug: test_cases.boolean_binary_ops.contract.test_literal_conditionals f-stack entry: ['select%4#0']
debug: test_cases.boolean_binary_ops.contract.test_literal_conditionals f-stack on first store: []
debug: Inserted main_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
boolean_binary_ops/contract.py:6 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
debug: optimizing TEAL subroutine ops _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
boolean_binary_ops/contract.py:20 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
boolean_binary_ops/contract.py:33 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
boolean_binary_ops/contract.py:38 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
boolean_binary_ops/contract.py:54 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
boolean_binary_ops/contract.py:60 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.type_coercion() -> void:
boolean_binary_ops/contract.py:68 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
boolean_binary_ops/contract.py:95 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
boolean_binary_ops/contract.py:125 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: uint64, false: uint64) -> void:
boolean_binary_ops/contract.py:6 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
debug: removing explicit jump to fall-through block main_block@0
debug: optimizing TEAL subroutine blocks _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
debug: removing explicit jump to fall-through block is_substring_block@0
debug: removing explicit jump to fall-through block is_substring_while_top@1
debug: removing explicit jump to fall-through block is_substring_while_body@2
debug: removing explicit jump to fall-through block is_substring_if_body@3
boolean_binary_ops/contract.py:20 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
debug: removing explicit jump to fall-through block test_boolean_binary_ops_block@0
boolean_binary_ops/contract.py:33 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
debug: removing explicit jump to fall-through block bool_to_bytes_block@0
boolean_binary_ops/contract.py:38 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_block@0
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_for_body@1
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_for_body@2
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_and_contd@3
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_bool_true@4
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_bool_merge@6
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_or_contd@7
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_bool_true@8
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_bool_merge@10
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_for_footer@11
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_after_for@13
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_for_footer@14
debug: removing explicit jump to fall-through block test_boolean_shortcircuit_binary_ops_after_for@16
boolean_binary_ops/contract.py:54 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
debug: removing explicit jump to fall-through block log_and_return_block@0
boolean_binary_ops/contract.py:60 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.type_coercion() -> void:
debug: removing explicit jump to fall-through block type_coercion_block@0
debug: removing explicit jump to fall-through block type_coercion_ternary_true@1
debug: removing explicit jump to fall-through block type_coercion_ternary_merge@3
boolean_binary_ops/contract.py:68 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_block@0
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@1
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_true@2
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_merge@4
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@5
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@6
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@7
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_true@8
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_merge@10
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@11
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_and_contd@12
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@13
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_true@14
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_merge@16
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@17
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@18
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_true@19
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_merge@21
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@22
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_or_contd@23
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_true@24
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_bool_merge@26
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@27
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@29
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@30
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@32
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@33
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@35
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@36
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@41
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_for_header@42
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_for_body@43
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_for_footer@44
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@46
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@48
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_true@38
debug: removing explicit jump to fall-through block test_union_boolean_binary_ops_ternary_merge@40
boolean_binary_ops/contract.py:95 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_block@0
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_or_contd@1
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_true@2
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_merge@4
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_or_contd@5
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_true@6
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_merge@8
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_and_contd@9
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_and_contd@10
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_and_contd@11
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_true@12
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_bool_merge@14
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_if_body@15
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_if_body@17
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_or_contd@19
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_if_body@20
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_or_contd@22
debug: removing explicit jump to fall-through block test_literal_boolean_binary_ops_if_body@23
boolean_binary_ops/contract.py:125 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: uint64, false: uint64) -> void:
debug: removing explicit jump to fall-through block test_literal_conditionals_block@0
debug: removing explicit jump to fall-through block test_literal_conditionals_or_contd@1
debug: removing explicit jump to fall-through block test_literal_conditionals_bool_true@2
debug: removing explicit jump to fall-through block test_literal_conditionals_bool_merge@4
debug: removing explicit jump to fall-through block test_literal_conditionals_or_contd@5
debug: removing explicit jump to fall-through block test_literal_conditionals_bool_true@6
debug: removing explicit jump to fall-through block test_literal_conditionals_bool_merge@8
debug: removing explicit jump to fall-through block test_literal_conditionals_ternary_true@9
debug: removing explicit jump to fall-through block test_literal_conditionals_ternary_merge@11
debug: removing explicit jump to fall-through block test_literal_conditionals_ternary_true@12
debug: removing explicit jump to fall-through block test_literal_conditionals_ternary_merge@14
boolean_binary_ops/contract.py:15 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> uint64:
boolean_binary_ops/contract.py:15 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> uint64:
debug: removing explicit jump to fall-through block main_block@0
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.approval.teal
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.clear.teal
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.approval.bin
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.clear.bin
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.approval.puya.map
info: Writing boolean_binary_ops/out_unoptimized/BooleanBinaryOps.clear.puya.map