debug: PuyaOptions(paths=['boolean_binary_ops'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Found algopy: 1.0.1
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@1: // for_header_0_L35
debug: Terminated block@1: // for_header_0_L35
debug: Terminated block@2: // for_header_1_L35
debug: Sealing block@None: // for_body_L35
debug: Terminated block@3: // for_body_L35
debug: Sealing block@4: // for_header_0_L36
debug: Terminated block@4: // for_header_0_L36
debug: Terminated block@5: // for_header_1_L36
debug: Sealing block@None: // for_body_L36
debug: Created Phi assignment: let lhs#2: uint64 = undefined while trying to resolve 'lhs' in block@6: // for_body_L36
debug: Created Phi assignment: let lhs#3: uint64 = undefined while trying to resolve 'lhs' in block@3: // for_body_L35
debug: Added lhs#0 to Phi node: let lhs#3: uint64 = φ(lhs#0 <- block@1) in block@1: // for_header_0_L35
debug: Added lhs#1 to Phi node: let lhs#3: uint64 = φ(lhs#0 <- block@1, lhs#1 <- block@2) in block@2: // for_header_1_L35
debug: Added lhs#3 to Phi node: let lhs#2: uint64 = φ(lhs#3 <- block@4) in block@4: // for_header_0_L36
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@5: // for_header_1_L36
debug: Created Phi assignment: let lhs#4: uint64 = undefined while trying to resolve 'lhs' in block@5: // for_header_1_L36
debug: Added lhs#4 to Phi node: let lhs#2: uint64 = φ(lhs#3 <- block@4, lhs#4 <- block@5) in block@5: // for_header_1_L36
debug: Created Phi assignment: let rhs#2: uint64 = undefined while trying to resolve 'rhs' in block@6: // for_body_L36
debug: Added rhs#0 to Phi node: let rhs#2: uint64 = φ(rhs#0 <- block@4) in block@4: // for_header_0_L36
debug: Added rhs#1 to Phi node: let rhs#2: uint64 = φ(rhs#0 <- block@4, rhs#1 <- block@5) in block@5: // for_header_1_L36
debug: Terminated block@6: // for_body_L36
debug: Sealing block@None: // and_contd_L38
debug: Terminated block@7: // and_contd_L38
debug: Sealing block@None: // bool_true_L38
debug: Sealing block@None: // bool_false_L38
debug: Terminated block@8: // bool_true_L38
debug: Terminated block@9: // bool_false_L38
debug: Sealing block@10: // bool_merge_L38
debug: Created Phi assignment: let and_result%0#2: uint64 = undefined while trying to resolve 'and_result%0' in block@10: // bool_merge_L38
debug: Added and_result%0#0 to Phi node: let and_result%0#2: uint64 = φ(and_result%0#0 <- block@8) in block@8: // bool_true_L38
debug: Added and_result%0#1 to Phi node: let and_result%0#2: uint64 = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9) in block@9: // bool_false_L38
debug: Created Phi assignment: let lhs#5: uint64 = undefined while trying to resolve 'lhs' in block@10: // bool_merge_L38
debug: Added lhs#2 to Phi node: let lhs#5: uint64 = φ(lhs#2 <- block@8) in block@8: // bool_true_L38
debug: Created Phi assignment: let lhs#6: uint64 = undefined while trying to resolve 'lhs' in block@9: // bool_false_L38
debug: Added lhs#2 to Phi node: let lhs#6: uint64 = φ(lhs#2 <- block@6) in block@6: // for_body_L36
debug: Added lhs#2 to Phi node: let lhs#6: uint64 = φ(lhs#2 <- block@6, lhs#2 <- block@7) in block@7: // and_contd_L38
debug: Replacing trivial Phi node: let lhs#6: uint64 = φ(lhs#2 <- block@6, lhs#2 <- block@7) (lhs#6) with lhs#2
debug: Deleting Phi assignment: let lhs#6: uint64 = φ(lhs#2 <- block@6, lhs#2 <- block@7)
debug: Replaced trivial Phi node: let lhs#6: uint64 = φ(lhs#2 <- block@6, lhs#2 <- block@7) (lhs#6) with lhs#2 in current definition for 1 blocks
debug: Added lhs#2 to Phi node: let lhs#5: uint64 = φ(lhs#2 <- block@8, lhs#2 <- block@9) in block@9: // bool_false_L38
debug: Replacing trivial Phi node: let lhs#5: uint64 = φ(lhs#2 <- block@8, lhs#2 <- block@9) (lhs#5) with lhs#2
debug: Deleting Phi assignment: let lhs#5: uint64 = φ(lhs#2 <- block@8, lhs#2 <- block@9)
debug: Replaced trivial Phi node: let lhs#5: uint64 = φ(lhs#2 <- block@8, lhs#2 <- block@9) (lhs#5) with lhs#2 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#3: uint64 = undefined while trying to resolve 'rhs' in block@10: // bool_merge_L38
debug: Added rhs#2 to Phi node: let rhs#3: uint64 = φ(rhs#2 <- block@8) in block@8: // bool_true_L38
debug: Created Phi assignment: let rhs#4: uint64 = undefined while trying to resolve 'rhs' in block@9: // bool_false_L38
debug: Added rhs#2 to Phi node: let rhs#4: uint64 = φ(rhs#2 <- block@6) in block@6: // for_body_L36
debug: Added rhs#2 to Phi node: let rhs#4: uint64 = φ(rhs#2 <- block@6, rhs#2 <- block@7) in block@7: // and_contd_L38
debug: Replacing trivial Phi node: let rhs#4: uint64 = φ(rhs#2 <- block@6, rhs#2 <- block@7) (rhs#4) with rhs#2
debug: Deleting Phi assignment: let rhs#4: uint64 = φ(rhs#2 <- block@6, rhs#2 <- block@7)
debug: Replaced trivial Phi node: let rhs#4: uint64 = φ(rhs#2 <- block@6, rhs#2 <- block@7) (rhs#4) with rhs#2 in current definition for 1 blocks
debug: Added rhs#2 to Phi node: let rhs#3: uint64 = φ(rhs#2 <- block@8, rhs#2 <- block@9) in block@9: // bool_false_L38
debug: Replacing trivial Phi node: let rhs#3: uint64 = φ(rhs#2 <- block@8, rhs#2 <- block@9) (rhs#3) with rhs#2
debug: Deleting Phi assignment: let rhs#3: uint64 = φ(rhs#2 <- block@8, rhs#2 <- block@9)
debug: Replaced trivial Phi node: let rhs#3: uint64 = φ(rhs#2 <- block@8, rhs#2 <- block@9) (rhs#3) with rhs#2 in current definition for 1 blocks
debug: Terminated block@10: // bool_merge_L38
debug: Sealing block@None: // or_contd_L43
debug: Terminated block@11: // or_contd_L43
debug: Sealing block@None: // bool_true_L43
debug: Sealing block@None: // bool_false_L43
debug: Terminated block@12: // bool_true_L43
debug: Terminated block@13: // bool_false_L43
debug: Sealing block@14: // bool_merge_L43
debug: Created Phi assignment: let or_result%0#2: uint64 = undefined while trying to resolve 'or_result%0' in block@14: // bool_merge_L43
debug: Added or_result%0#0 to Phi node: let or_result%0#2: uint64 = φ(or_result%0#0 <- block@12) in block@12: // bool_true_L43
debug: Added or_result%0#1 to Phi node: let or_result%0#2: uint64 = φ(or_result%0#0 <- block@12, or_result%0#1 <- block@13) in block@13: // bool_false_L43
debug: Created Phi assignment: let lhs#7: uint64 = undefined while trying to resolve 'lhs' in block@14: // bool_merge_L43
debug: Created Phi assignment: let lhs#8: uint64 = undefined while trying to resolve 'lhs' in block@12: // bool_true_L43
debug: Added lhs#2 to Phi node: let lhs#8: uint64 = φ(lhs#2 <- block@10) in block@10: // bool_merge_L38
debug: Added lhs#2 to Phi node: let lhs#8: uint64 = φ(lhs#2 <- block@10, lhs#2 <- block@11) in block@11: // or_contd_L43
debug: Replacing trivial Phi node: let lhs#8: uint64 = φ(lhs#2 <- block@10, lhs#2 <- block@11) (lhs#8) with lhs#2
debug: Deleting Phi assignment: let lhs#8: uint64 = φ(lhs#2 <- block@10, lhs#2 <- block@11)
debug: Replaced trivial Phi node: let lhs#8: uint64 = φ(lhs#2 <- block@10, lhs#2 <- block@11) (lhs#8) with lhs#2 in current definition for 1 blocks
debug: Added lhs#2 to Phi node: let lhs#7: uint64 = φ(lhs#2 <- block@12) in block@12: // bool_true_L43
debug: Added lhs#2 to Phi node: let lhs#7: uint64 = φ(lhs#2 <- block@12, lhs#2 <- block@13) in block@13: // bool_false_L43
debug: Replacing trivial Phi node: let lhs#7: uint64 = φ(lhs#2 <- block@12, lhs#2 <- block@13) (lhs#7) with lhs#2
debug: Deleting Phi assignment: let lhs#7: uint64 = φ(lhs#2 <- block@12, lhs#2 <- block@13)
debug: Replaced trivial Phi node: let lhs#7: uint64 = φ(lhs#2 <- block@12, lhs#2 <- block@13) (lhs#7) with lhs#2 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#5: uint64 = undefined while trying to resolve 'rhs' in block@14: // bool_merge_L43
debug: Created Phi assignment: let rhs#6: uint64 = undefined while trying to resolve 'rhs' in block@12: // bool_true_L43
debug: Added rhs#2 to Phi node: let rhs#6: uint64 = φ(rhs#2 <- block@10) in block@10: // bool_merge_L38
debug: Added rhs#2 to Phi node: let rhs#6: uint64 = φ(rhs#2 <- block@10, rhs#2 <- block@11) in block@11: // or_contd_L43
debug: Replacing trivial Phi node: let rhs#6: uint64 = φ(rhs#2 <- block@10, rhs#2 <- block@11) (rhs#6) with rhs#2
debug: Deleting Phi assignment: let rhs#6: uint64 = φ(rhs#2 <- block@10, rhs#2 <- block@11)
debug: Replaced trivial Phi node: let rhs#6: uint64 = φ(rhs#2 <- block@10, rhs#2 <- block@11) (rhs#6) with rhs#2 in current definition for 1 blocks
debug: Added rhs#2 to Phi node: let rhs#5: uint64 = φ(rhs#2 <- block@12) in block@12: // bool_true_L43
debug: Added rhs#2 to Phi node: let rhs#5: uint64 = φ(rhs#2 <- block@12, rhs#2 <- block@13) in block@13: // bool_false_L43
debug: Replacing trivial Phi node: let rhs#5: uint64 = φ(rhs#2 <- block@12, rhs#2 <- block@13) (rhs#5) with rhs#2
debug: Deleting Phi assignment: let rhs#5: uint64 = φ(rhs#2 <- block@12, rhs#2 <- block@13)
debug: Replaced trivial Phi node: let rhs#5: uint64 = φ(rhs#2 <- block@12, rhs#2 <- block@13) (rhs#5) with rhs#2 in current definition for 1 blocks
debug: Terminated block@14: // bool_merge_L43
debug: Sealing block@15: // for_footer_L36
debug: Created Phi assignment: let tuple_index%1#1: uint64 = undefined while trying to resolve 'tuple_index%1' in block@14: // bool_merge_L43
debug: Created Phi assignment: let tuple_index%1#2: uint64 = undefined while trying to resolve 'tuple_index%1' in block@12: // bool_true_L43
debug: Created Phi assignment: let tuple_index%1#3: uint64 = undefined while trying to resolve 'tuple_index%1' in block@10: // bool_merge_L38
debug: Created Phi assignment: let tuple_index%1#4: uint64 = undefined while trying to resolve 'tuple_index%1' in block@6: // for_body_L36
debug: Added tuple_index%1#0 to Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#0 <- block@4) in block@4: // for_header_0_L36
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@5: // for_header_1_L36
debug: Created Phi assignment: let tuple_index%1#5: uint64 = undefined while trying to resolve 'tuple_index%1' in block@5: // for_header_1_L36
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#0 <- block@4, tuple_index%1#5 <- block@5) in block@5: // for_header_1_L36
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#4 <- block@8) in block@8: // bool_true_L38
debug: Created Phi assignment: let tuple_index%1#6: uint64 = undefined while trying to resolve 'tuple_index%1' in block@9: // bool_false_L38
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#6: uint64 = φ(tuple_index%1#4 <- block@6) in block@6: // for_body_L36
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#6: uint64 = φ(tuple_index%1#4 <- block@6, tuple_index%1#4 <- block@7) in block@7: // and_contd_L38
debug: Replacing trivial Phi node: let tuple_index%1#6: uint64 = φ(tuple_index%1#4 <- block@6, tuple_index%1#4 <- block@7) (tuple_index%1#6) with tuple_index%1#4
debug: Deleting Phi assignment: let tuple_index%1#6: uint64 = φ(tuple_index%1#4 <- block@6, tuple_index%1#4 <- block@7)
debug: Replaced trivial Phi node: let tuple_index%1#6: uint64 = φ(tuple_index%1#4 <- block@6, tuple_index%1#4 <- block@7) (tuple_index%1#6) with tuple_index%1#4 in current definition for 1 blocks
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#4 <- block@8, tuple_index%1#4 <- block@9) in block@9: // bool_false_L38
debug: Replacing trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#4 <- block@8, tuple_index%1#4 <- block@9) (tuple_index%1#3) with tuple_index%1#4
debug: Deleting Phi assignment: let tuple_index%1#3: uint64 = φ(tuple_index%1#4 <- block@8, tuple_index%1#4 <- block@9)
debug: Replaced trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#4 <- block@8, tuple_index%1#4 <- block@9) (tuple_index%1#3) with tuple_index%1#4 in current definition for 1 blocks
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#4 <- block@10) in block@10: // bool_merge_L38
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#4 <- block@10, tuple_index%1#4 <- block@11) in block@11: // or_contd_L43
debug: Replacing trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#4 <- block@10, tuple_index%1#4 <- block@11) (tuple_index%1#2) with tuple_index%1#4
debug: Deleting Phi assignment: let tuple_index%1#2: uint64 = φ(tuple_index%1#4 <- block@10, tuple_index%1#4 <- block@11)
debug: Replaced trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#4 <- block@10, tuple_index%1#4 <- block@11) (tuple_index%1#2) with tuple_index%1#4 in current definition for 1 blocks
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#4 <- block@12) in block@12: // bool_true_L43
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#4 <- block@12, tuple_index%1#4 <- block@13) in block@13: // bool_false_L43
debug: Replacing trivial Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#4 <- block@12, tuple_index%1#4 <- block@13) (tuple_index%1#1) with tuple_index%1#4
debug: Deleting Phi assignment: let tuple_index%1#1: uint64 = φ(tuple_index%1#4 <- block@12, tuple_index%1#4 <- block@13)
debug: Replaced trivial Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#4 <- block@12, tuple_index%1#4 <- block@13) (tuple_index%1#1) with tuple_index%1#4 in current definition for 1 blocks
debug: Terminated block@15: // for_footer_L36
debug: Sealing block@5: // for_header_1_L36
debug: Added lhs#2 to Phi node: let lhs#4: uint64 = φ(lhs#2 <- block@15) in block@15: // for_footer_L36
debug: Replacing trivial Phi node: let lhs#4: uint64 = φ(lhs#2 <- block@15) (lhs#4) with lhs#2
debug: Deleting Phi assignment: let lhs#4: uint64 = φ(lhs#2 <- block@15)
debug: Replacing trivial Phi node: let lhs#2: uint64 = φ(lhs#3 <- block@4, lhs#2 <- block@5) (lhs#2) with lhs#3
debug: Deleting Phi assignment: let lhs#2: uint64 = φ(lhs#3 <- block@4, lhs#2 <- block@5)
debug: Replaced trivial Phi node: let lhs#4: uint64 = φ(lhs#2 <- block@15) (lhs#4) with lhs#2 in current definition for 1 blocks
debug: Replaced trivial Phi node: let lhs#2: uint64 = φ(lhs#3 <- block@4, lhs#2 <- block@5) (lhs#2) with lhs#3 in current definition for 11 blocks
debug: Added tuple_index%1#7 to Phi node: let tuple_index%1#5: uint64 = φ(tuple_index%1#7 <- block@15) in block@15: // for_footer_L36
debug: Replacing trivial Phi node: let tuple_index%1#5: uint64 = φ(tuple_index%1#7 <- block@15) (tuple_index%1#5) with tuple_index%1#7
debug: Deleting Phi assignment: let tuple_index%1#5: uint64 = φ(tuple_index%1#7 <- block@15)
debug: Replaced trivial Phi node: let tuple_index%1#5: uint64 = φ(tuple_index%1#7 <- block@15) (tuple_index%1#5) with tuple_index%1#7 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L36
debug: Terminated block@16: // after_for_L36
debug: Sealing block@17: // for_footer_L35
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@14: // bool_merge_L43
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@12: // bool_true_L43
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@10: // bool_merge_L38
debug: Created Phi assignment: let tuple_index%0#4: uint64 = undefined while trying to resolve 'tuple_index%0' in block@6: // for_body_L36
debug: Created Phi assignment: let tuple_index%0#5: uint64 = undefined while trying to resolve 'tuple_index%0' in block@3: // for_body_L35
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#5: uint64 = φ(tuple_index%0#0 <- block@1) in block@1: // for_header_0_L35
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L35
debug: Created Phi assignment: let tuple_index%0#6: uint64 = undefined while trying to resolve 'tuple_index%0' in block@2: // for_header_1_L35
debug: Added tuple_index%0#6 to Phi node: let tuple_index%0#5: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#6 <- block@2) in block@2: // for_header_1_L35
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@4) in block@4: // for_header_0_L36
debug: Added tuple_index%0#1 to Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@4, tuple_index%0#1 <- block@5) in block@5: // for_header_1_L36
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@8) in block@8: // bool_true_L38
debug: Created Phi assignment: let tuple_index%0#7: uint64 = undefined while trying to resolve 'tuple_index%0' in block@9: // bool_false_L38
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#7: uint64 = φ(tuple_index%0#4 <- block@6) in block@6: // for_body_L36
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#7: uint64 = φ(tuple_index%0#4 <- block@6, tuple_index%0#4 <- block@7) in block@7: // and_contd_L38
debug: Replacing trivial Phi node: let tuple_index%0#7: uint64 = φ(tuple_index%0#4 <- block@6, tuple_index%0#4 <- block@7) (tuple_index%0#7) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#7: uint64 = φ(tuple_index%0#4 <- block@6, tuple_index%0#4 <- block@7)
debug: Replaced trivial Phi node: let tuple_index%0#7: uint64 = φ(tuple_index%0#4 <- block@6, tuple_index%0#4 <- block@7) (tuple_index%0#7) with tuple_index%0#4 in current definition for 1 blocks
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@8, tuple_index%0#4 <- block@9) in block@9: // bool_false_L38
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@8, tuple_index%0#4 <- block@9) (tuple_index%0#3) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@8, tuple_index%0#4 <- block@9)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@8, tuple_index%0#4 <- block@9) (tuple_index%0#3) with tuple_index%0#4 in current definition for 1 blocks
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@10) in block@10: // bool_merge_L38
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@10, tuple_index%0#4 <- block@11) in block@11: // or_contd_L43
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@10, tuple_index%0#4 <- block@11) (tuple_index%0#2) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@10, tuple_index%0#4 <- block@11)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@10, tuple_index%0#4 <- block@11) (tuple_index%0#2) with tuple_index%0#4 in current definition for 1 blocks
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#4 <- block@12) in block@12: // bool_true_L43
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#4 <- block@12, tuple_index%0#4 <- block@13) in block@13: // bool_false_L43
debug: Replacing trivial Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#4 <- block@12, tuple_index%0#4 <- block@13) (tuple_index%0#1) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#1: uint64 = φ(tuple_index%0#4 <- block@12, tuple_index%0#4 <- block@13)
debug: Replacing trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@4, tuple_index%0#4 <- block@5) (tuple_index%0#4) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@4, tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#4 <- block@12, tuple_index%0#4 <- block@13) (tuple_index%0#1) with tuple_index%0#4 in current definition for 3 blocks
debug: Replaced trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@4, tuple_index%0#4 <- block@5) (tuple_index%0#4) with tuple_index%0#5 in current definition for 11 blocks
debug: Terminated block@17: // for_footer_L35
debug: Sealing block@2: // for_header_1_L35
debug: Added tuple_index%0#8 to Phi node: let tuple_index%0#6: uint64 = φ(tuple_index%0#8 <- block@17) in block@17: // for_footer_L35
debug: Replacing trivial Phi node: let tuple_index%0#6: uint64 = φ(tuple_index%0#8 <- block@17) (tuple_index%0#6) with tuple_index%0#8
debug: Deleting Phi assignment: let tuple_index%0#6: uint64 = φ(tuple_index%0#8 <- block@17)
debug: Replaced trivial Phi node: let tuple_index%0#6: uint64 = φ(tuple_index%0#8 <- block@17) (tuple_index%0#6) with tuple_index%0#8 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L35
debug: Terminated block@18: // after_for_L35
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Sealing block@None: // ternary_true_L30
debug: Sealing block@None: // ternary_false_L30
debug: Terminated block@1: // ternary_true_L30
debug: Terminated block@2: // ternary_false_L30
debug: Sealing block@3: // ternary_merge_L30
debug: Created Phi assignment: let ternary_result%0#2: bytes = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L30
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L30
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L30
debug: Terminated block@3: // ternary_merge_L30
debug: Sealing block@0: // L49
debug: Terminated block@0: // L49
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L10
debug: Terminated block@0: // L10
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.ir
info: Optimizing test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, and_result#0
debug: Replacing {and_result%0#2} with and_result#0 made 1 modifications
debug: Found equivalence set: or_result%0#2, or_result#0
debug: Replacing {or_result%0#2} with or_result#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@15: // for_footer_L36 from goto_nth [block@5][tuple_index%1#4] else goto block@16 to goto tuple_index%1#4 ? block@16 : block@5
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@17: // for_footer_L35 from goto_nth [block@2][tuple_index%0#5] else goto block@18 to goto tuple_index%0#5 ? block@18 : block@2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L35 with block@0: // L33 in block@3: // for_body_L35
debug: Merged linear block@1: // for_header_0_L35 into block@0: // L33
debug: Replaced predecessor block@4: // for_header_0_L36 with block@3: // for_body_L35 in block@6: // for_body_L36
debug: Merged linear block@4: // for_header_0_L36 into block@3: // for_body_L35
debug: Replaced predecessor block@15: // for_footer_L36 with block@14: // bool_merge_L43 in block@5: // for_header_1_L36
debug: Replaced predecessor block@15: // for_footer_L36 with block@14: // bool_merge_L43 in block@16: // after_for_L36
debug: Merged linear block@15: // for_footer_L36 into block@14: // bool_merge_L43
debug: Replaced predecessor block@17: // for_footer_L35 with block@16: // after_for_L36 in block@2: // for_header_1_L35
debug: Replaced predecessor block@17: // for_footer_L35 with block@16: // after_for_L36 in block@18: // after_for_L35
debug: Merged linear block@17: // for_footer_L35 into block@16: // after_for_L36
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Removing Phis from test_cases.boolean_binary_ops.contract.log_and_return
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops using strategy RootOperandGrouping
debug: Coalescing tuple_index%0#0 with [tuple_index%0#11, tuple_index%0#5]
debug: Coalescing lhs#0 with [lhs#6, lhs#1, lhs#3]
debug: Coalescing tuple_index%1#0 with [tuple_index%1#10, tuple_index%1#4]
debug: Coalescing rhs#0 with [rhs#5, rhs#1, rhs#2]
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing and_result#0 with [and_result#1]
debug: Coalescing or_result%0#0 with [or_result%0#1]
debug: Coalescing or_result#0 with [or_result#1]
debug: Coalescing resulted in 46 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.bool_to_bytes using strategy RootOperandGrouping
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.log_and_return using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: loc: {lhs#0=lhs#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {lhs#0=lhs#0, tuple_index%0#0=tuple_index%0#0}
debug: ready: 
debug: to_do: lhs#0, tuple_index%0#0
debug: * to_do tuple_index%0#0
debug: * to_do lhs#0
debug: loc: {lhs#0=lhs#0, tuple_index%0#0=None, tuple_index%0#8=tuple_index%0#8}
debug: pred: {lhs#0=lhs#0, tuple_index%0#0=tuple_index%0#8}
debug: ready: tuple_index%0#0
debug: to_do: lhs#0, tuple_index%0#0
debug: * avail tuple_index%0#0
debug: * avail tuple_index%0#8
debug: * to_do tuple_index%0#0
debug: * to_do lhs#0
debug: loc: {lhs#0=lhs#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {lhs#0=lhs#0, tuple_index%0#0=tuple_index%0#0}
debug: ready: 
debug: to_do: lhs#0, tuple_index%0#0
debug: * to_do tuple_index%0#0
debug: * to_do lhs#0
debug: loc: {rhs#0=rhs#0, tuple_index%1#0=tuple_index%1#0}
debug: pred: {rhs#0=rhs#0, tuple_index%1#0=tuple_index%1#0}
debug: ready: 
debug: to_do: rhs#0, tuple_index%1#0
debug: * to_do tuple_index%1#0
debug: * to_do rhs#0
debug: loc: {rhs#0=rhs#0, tuple_index%1#0=None, tuple_index%1#7=tuple_index%1#7}
debug: pred: {rhs#0=rhs#0, tuple_index%1#0=tuple_index%1#7}
debug: ready: tuple_index%1#0
debug: to_do: rhs#0, tuple_index%1#0
debug: * avail tuple_index%1#0
debug: * avail tuple_index%1#7
debug: * to_do tuple_index%1#0
debug: * to_do rhs#0
debug: loc: {rhs#0=rhs#0, tuple_index%1#0=tuple_index%1#0}
debug: pred: {rhs#0=rhs#0, tuple_index%1#0=tuple_index%1#0}
debug: ready: 
debug: to_do: rhs#0, tuple_index%1#0
debug: * to_do tuple_index%1#0
debug: * to_do rhs#0
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.log_and_return
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.destructured.ir
debug: Inserted test_boolean_binary_ops_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[14]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[20]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[25]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[27]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[32]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[36]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[38]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[43]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[45]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[50]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[52]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[57]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[59]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[64]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[66]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[68]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[70]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[26]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[28]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[15]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[20]: 'store and_msg#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[23]: 'load and_msg#0' with 'load and_msg#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[25]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[28]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@6.ops[1]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@6.ops[29]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@7.ops[7]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@7.ops[9]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@7.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@7.ops[6]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@8.ops[1]: 'store and_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@8.ops[3]: 'load and_result%0#0' with 'load and_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@9.ops[1]: 'store and_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@9.ops[3]: 'load and_result%0#0' with 'load and_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[7]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[9]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[17]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[19]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[37]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[39]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[3]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[6]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[14]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[17]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[27]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[30]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[32]: 'store or_msg#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[35]: 'load or_msg#0' with 'load or_msg#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[37]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[40]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[24]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[30]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[1]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[13]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[3]: 'store rhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[28]: 'load rhs#0' with 'load rhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[15]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[43]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@11.ops[7]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@11.ops[9]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@11.ops[3]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@11.ops[6]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@12.ops[1]: 'store or_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@12.ops[3]: 'load or_result%0#0' with 'load or_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@13.ops[1]: 'store or_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@13.ops[3]: 'load or_result%0#0' with 'load or_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[7]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[9]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[3]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[6]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[13]: 'store tuple_index%1#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@14.ops[17]: 'load tuple_index%1#0' with 'load tuple_index%1#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_after_for@16.ops[1]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_after_for@16.ops[5]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Found 8 edge set/s for test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Allocated 2 variable/s to x-stack: and_result#0, or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@8 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@9 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@12 -> test_boolean_shortcircuit_binary_ops_bool_merge@14: or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@13 -> test_boolean_shortcircuit_binary_ops_bool_merge@14: or_result#0
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack entry: ['and_msg#0', 'or_msg#0', 'rhs#0', 'tuple_index%0#8', 'tuple_index%1#0', 'tuple_index%1#7']
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack on first store: ['tuple_index%0#0', 'lhs#0']
debug: Found 2 edge set/s for test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Allocated 1 variable/s to x-stack: ternary_result%0#0
debug: shared x-stack for bool_to_bytes_ternary_true@1 -> bool_to_bytes_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for bool_to_bytes_ternary_false@2 -> bool_to_bytes_ternary_merge@3: ternary_result%0#0
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.teal