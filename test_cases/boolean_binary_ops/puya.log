debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['boolean_binary_ops'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
boolean_binary_ops/contract.py:97:12 warning: expression is always True
boolean_binary_ops/contract.py:98:12 warning: expression is always True
boolean_binary_ops/contract.py:99:25 warning: expression is always True
boolean_binary_ops/contract.py:102:9 warning: expression is always True
boolean_binary_ops/contract.py:103:9 warning: expression is always True
boolean_binary_ops/contract.py:104:27 warning: expression is always True
boolean_binary_ops/contract.py:108:8 warning: expression is always False
boolean_binary_ops/contract.py:110:8 warning: expression is always False
boolean_binary_ops/contract.py:112:21 warning: expression is always False
boolean_binary_ops/contract.py:127:13 warning: expression is always True
boolean_binary_ops/contract.py:127:13 warning: expression is always False
boolean_binary_ops/contract.py:127:35 warning: expression is always True
boolean_binary_ops/contract.py:128:12 warning: expression is always False
boolean_binary_ops/contract.py:128:18 warning: expression is always True
boolean_binary_ops/contract.py:128:18 warning: expression is always False
boolean_binary_ops/contract.py:129:12 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always False
boolean_binary_ops/contract.py:130:13 warning: expression is always True
boolean_binary_ops/contract.py:130:13 warning: expression is always False
boolean_binary_ops/contract.py:130:35 warning: expression is always True
info: writing boolean_binary_ops/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1
debug: Terminated block@1
debug: Looking for 'loop_counter%1' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let loop_counter%1#1: uint64 = undefined while trying to resolve 'loop_counter%1' in block@2
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let lhs#1: bool = undefined while trying to resolve 'lhs' in block@2
debug: Looking for 'rhs' in an unsealed block creating an incomplete Phi: block@2
debug: Created Phi assignment: let rhs#1: bool = undefined while trying to resolve 'rhs' in block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@6
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4) in block@4
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5) in block@5
debug: Created Phi assignment: let lhs#2: bool = undefined while trying to resolve 'lhs' in block@6
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4) in block@4
debug: Created Phi assignment: let lhs#3: bool = undefined while trying to resolve 'lhs' in block@5
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2) in block@2
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1
debug: Deleting Phi assignment: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3)
debug: Replaced trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1
debug: Deleting Phi assignment: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5)
debug: Replaced trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#2: bool = undefined while trying to resolve 'rhs' in block@6
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4) in block@4
debug: Created Phi assignment: let rhs#3: bool = undefined while trying to resolve 'rhs' in block@5
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2) in block@2
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1
debug: Deleting Phi assignment: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3)
debug: Replaced trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1
debug: Deleting Phi assignment: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5)
debug: Replaced trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@10
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8) in block@8
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9) in block@9
debug: Created Phi assignment: let lhs#4: bool = undefined while trying to resolve 'lhs' in block@10
debug: Created Phi assignment: let lhs#5: bool = undefined while trying to resolve 'lhs' in block@8
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6) in block@6
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1
debug: Deleting Phi assignment: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7)
debug: Replaced trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8) in block@8
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) in block@9
debug: Replacing trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1
debug: Deleting Phi assignment: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9)
debug: Replaced trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#4: bool = undefined while trying to resolve 'rhs' in block@10
debug: Created Phi assignment: let rhs#5: bool = undefined while trying to resolve 'rhs' in block@8
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6) in block@6
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1
debug: Deleting Phi assignment: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7)
debug: Replaced trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8) in block@8
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) in block@9
debug: Replacing trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1
debug: Deleting Phi assignment: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9)
debug: Replaced trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@2
debug: Added loop_counter%1#0 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1) in block@1
debug: Added loop_counter%1#2 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12) in block@12
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let lhs#6: bool = undefined while trying to resolve 'lhs' in block@1
debug: Added lhs#6 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1) in block@1
debug: Added lhs#1 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) in block@12
debug: Replacing trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6
debug: Deleting Phi assignment: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12)
debug: Replaced trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6 in current definition for 11 blocks
debug: Added rhs#0 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1) in block@1
debug: Added rhs#6 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12) in block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@1
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15) in block@15
debug: Added lhs#0 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0) in block@0
debug: Added lhs#7 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15) in block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Building IR for function test_cases.boolean_binary_ops.contract.log_and_return
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.type_coercion
debug: Sealing block@0
boolean_binary_ops/contract.py:62:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@0
debug: Sealing block@1
boolean_binary_ops/contract.py:64:9 debug: encountered already materialized expression (appl), reusing result: appl
debug: Terminated block@1
debug: Sealing block@2
boolean_binary_ops/contract.py:64:44 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Terminated block@3
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@10
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8) in block@8
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8, or_result%1#1 <- block@9) in block@9
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@10
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@8
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4) in block@4
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5) in block@5
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6) in block@6
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8) in block@8
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Created Phi assignment: let y#1: bytes = undefined while trying to resolve 'y' in block@10
debug: Created Phi assignment: let y#2: bytes = undefined while trying to resolve 'y' in block@8
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4) in block@4
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5) in block@5
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6) in block@6
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7)
debug: Replaced trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8) in block@8
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9)
debug: Replaced trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@12
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10) in block@10
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let y#3: bytes = undefined while trying to resolve 'y' in block@12
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10) in block@10
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0
debug: Deleting Phi assignment: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11)
debug: Replaced trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@16
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14) in block@14
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14, and_result%0#1 <- block@15) in block@15
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@16
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@14
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12) in block@12
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0
debug: Deleting Phi assignment: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14) in block@14
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@15
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11) in block@11
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0
debug: Deleting Phi assignment: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0
debug: Deleting Phi assignment: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15)
debug: Replaced trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0 in current definition for 1 blocks
debug: Terminated block@16
debug: Sealing block@17
debug: Created Phi assignment: let y#4: bytes = undefined while trying to resolve 'y' in block@16
debug: Created Phi assignment: let y#5: bytes = undefined while trying to resolve 'y' in block@14
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12) in block@12
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0
debug: Deleting Phi assignment: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14) in block@14
debug: Created Phi assignment: let y#6: bytes = undefined while trying to resolve 'y' in block@15
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11) in block@11
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0
debug: Deleting Phi assignment: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0
debug: Deleting Phi assignment: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15)
debug: Replaced trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0 in current definition for 1 blocks
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let z#1: bytes = undefined while trying to resolve 'z' in block@16
debug: Created Phi assignment: let z#2: bytes = undefined while trying to resolve 'z' in block@14
debug: Created Phi assignment: let z#3: bytes = undefined while trying to resolve 'z' in block@12
debug: Created Phi assignment: let z#4: bytes = undefined while trying to resolve 'z' in block@10
debug: Created Phi assignment: let z#5: bytes = undefined while trying to resolve 'z' in block@8
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4) in block@4
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5) in block@5
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6) in block@6
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0
debug: Deleting Phi assignment: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7)
debug: Replaced trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8) in block@8
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0
debug: Deleting Phi assignment: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9)
debug: Replaced trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10) in block@10
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0
debug: Deleting Phi assignment: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11)
debug: Replaced trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12) in block@12
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0
debug: Deleting Phi assignment: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14) in block@14
debug: Created Phi assignment: let z#6: bytes = undefined while trying to resolve 'z' in block@15
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11) in block@11
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) in block@13
debug: Replacing trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0
debug: Deleting Phi assignment: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) in block@15
debug: Replacing trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0
debug: Deleting Phi assignment: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15)
debug: Replaced trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0 in current definition for 1 blocks
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Created Phi assignment: let or_result%2#2: bool = undefined while trying to resolve 'or_result%2' in block@21
debug: Added or_result%2#0 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19) in block@19
debug: Added or_result%2#1 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19, or_result%2#1 <- block@20) in block@20
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@21
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@19
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16) in block@16
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17) in block@17
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19) in block@19
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0
debug: Deleting Phi assignment: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20)
debug: Replaced trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0 in current definition for 1 blocks
debug: Terminated block@21
debug: Sealing block@22
debug: Created Phi assignment: let y#7: bytes = undefined while trying to resolve 'y' in block@21
debug: Created Phi assignment: let y#8: bytes = undefined while trying to resolve 'y' in block@19
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16) in block@16
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17) in block@17
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0
debug: Deleting Phi assignment: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18)
debug: Replaced trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19) in block@19
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0
debug: Deleting Phi assignment: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20)
debug: Replaced trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0 in current definition for 1 blocks
debug: Terminated block@22
debug: Sealing block@23
debug: Created Phi assignment: let z#7: bytes = undefined while trying to resolve 'z' in block@21
debug: Created Phi assignment: let z#8: bytes = undefined while trying to resolve 'z' in block@19
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16) in block@16
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17) in block@17
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) in block@18
debug: Replacing trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0
debug: Deleting Phi assignment: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18)
debug: Replaced trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19) in block@19
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) in block@20
debug: Replacing trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0
debug: Deleting Phi assignment: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20)
debug: Replaced trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0 in current definition for 1 blocks
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Created Phi assignment: let or_result%3#2: bool = undefined while trying to resolve 'or_result%3' in block@26
debug: Added or_result%3#0 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24) in block@24
debug: Added or_result%3#1 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24, or_result%3#1 <- block@25) in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@29
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27) in block@27
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27, ternary_result%1#1 <- block@28) in block@28
debug: Terminated block@29
debug: Sealing block@30
debug: Terminated block@30
debug: Sealing block@31
boolean_binary_ops/contract.py:81:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ri')))), reusing result: tmp%26#0
debug: Terminated block@31
debug: Sealing block@32
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@32
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30) in block@30
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30, ternary_result%0#1 <- block@31) in block@31
debug: Terminated block@32
debug: Sealing block@33
debug: Terminated block@33
debug: Sealing block@34
debug: Terminated block@34
debug: Sealing block@35
debug: Created Phi assignment: let ternary_result%3#2: bytes = undefined while trying to resolve 'ternary_result%3' in block@35
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33) in block@33
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33, ternary_result%3#1 <- block@34) in block@34
debug: Terminated block@35
debug: Sealing block@36
debug: Terminated block@36
debug: Sealing block@37
boolean_binary_ops/contract.py:82:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>((len(SINGLE_EVAL(id=0, source='le')) == 0u) ? (SINGLE_EVAL(id=0)) : (SINGLE_EVAL(id=1, source='ri'))))), reusing result: tmp%34#0
debug: Terminated block@37
debug: Sealing block@38
debug: Terminated block@38
debug: Sealing block@39
debug: Terminated block@39
debug: Sealing block@40
debug: Created Phi assignment: let ternary_result%4#2: bytes = undefined while trying to resolve 'ternary_result%4' in block@40
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38) in block@38
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38, ternary_result%4#1 <- block@39) in block@39
debug: Terminated block@40
debug: Sealing block@41
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@41
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36) in block@36
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36, ternary_result%2#1 <- block@40) in block@40
boolean_binary_ops/contract.py:85:30 debug: encountered already materialized expression (hex<"6E65766572207365656E">), reusing result: 0x6e65766572207365656e
debug: Terminated block@41
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@42
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@42
debug: Terminated block@42
debug: Sealing block@43
debug: Looking for 'bytes_to_iterate' in an unsealed block creating an incomplete Phi: block@42
debug: Created Phi assignment: let bytes_to_iterate#1: bytes = undefined while trying to resolve 'bytes_to_iterate' in block@42
debug: Terminated block@43
debug: Sealing block@44
debug: Terminated block@44
debug: Sealing block@42
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41) in block@41
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41, item_index_internal%0#2 <- block@44) in block@44
debug: Added bytes_to_iterate#0 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41) in block@41
debug: Added bytes_to_iterate#1 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) in block@44
debug: Replacing trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0
debug: Deleting Phi assignment: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44)
debug: Replaced trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0 in current definition for 3 blocks
debug: Sealing block@45
boolean_binary_ops/contract.py:87:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
boolean_binary_ops/contract.py:88:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
debug: Terminated block@45
debug: Sealing block@46
debug: Terminated block@46
debug: Sealing block@47
debug: Terminated block@47
debug: Sealing block@48
debug: Created Phi assignment: let ternary_result%5#2: bytes = undefined while trying to resolve 'ternary_result%5' in block@48
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46) in block@46
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46, ternary_result%5#1 <- block@47) in block@47
boolean_binary_ops/contract.py:91:13 debug: encountered already materialized expression (1u), reusing result: 1u
boolean_binary_ops/contract.py:92:14 debug: encountered already materialized expression (1u), reusing result: 1u
debug: Terminated block@48
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Sealing block@0
boolean_binary_ops/contract.py:97:5 warning: assertion is always true, ignoring
boolean_binary_ops/contract.py:98:5 warning: assertion is always true, ignoring
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7
debug: Created Phi assignment: let a#1: bool = undefined while trying to resolve 'a' in block@8
debug: Created Phi assignment: let a#2: bool = undefined while trying to resolve 'a' in block@6
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4) in block@4
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6) in block@6
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7)
debug: Replaced trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let b#1: bool = undefined while trying to resolve 'b' in block@8
debug: Created Phi assignment: let b#2: bool = undefined while trying to resolve 'b' in block@6
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4) in block@4
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6) in block@6
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7)
debug: Replaced trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0 in current definition for 1 blocks
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let c#1: bool = undefined while trying to resolve 'c' in block@8
debug: Created Phi assignment: let c#2: bool = undefined while trying to resolve 'c' in block@6
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4) in block@4
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6) in block@6
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7)
debug: Replaced trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@14
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12) in block@12
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12, and_result%0#1 <- block@13) in block@13
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
boolean_binary_ops/contract.py:120:22 debug: encountered already materialized expression (one), reusing result: one#0
boolean_binary_ops/contract.py:122:22 debug: encountered already materialized expression (empty_bytes), reusing result: empty_bytes#0
debug: Terminated block@24
debug: Building IR for function test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Created Phi assignment: let true#1: bool = undefined while trying to resolve 'true' in block@4
debug: Created Phi assignment: let true#2: bool = undefined while trying to resolve 'true' in block@2
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0) in block@0
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1)
debug: Replaced trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2) in block@2
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3)
debug: Replaced trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7
debug: Created Phi assignment: let false#1: bool = undefined while trying to resolve 'false' in block@8
debug: Created Phi assignment: let false#2: bool = undefined while trying to resolve 'false' in block@6
debug: Created Phi assignment: let false#3: bool = undefined while trying to resolve 'false' in block@4
debug: Created Phi assignment: let false#4: bool = undefined while trying to resolve 'false' in block@2
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0) in block@0
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1)
debug: Replaced trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2) in block@2
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3)
debug: Replaced trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4) in block@4
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6) in block@6
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7)
debug: Replaced trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@11
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9) in block@9
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9, ternary_result%0#1 <- block@10) in block@10
debug: Terminated block@11
debug: Sealing block@12
boolean_binary_ops/contract.py:133:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let true#3: bool = undefined while trying to resolve 'true' in block@11
debug: Created Phi assignment: let true#4: bool = undefined while trying to resolve 'true' in block@8
debug: Created Phi assignment: let true#5: bool = undefined while trying to resolve 'true' in block@6
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4) in block@4
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6) in block@6
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7)
debug: Replaced trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9) in block@9
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) in block@10
debug: Replacing trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10)
debug: Replaced trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@14
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12) in block@12
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12, ternary_result%1#1 <- block@13) in block@13
debug: Terminated block@14
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Building IR for function test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.__puya_arc4_router__
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.0.ssa.ir
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.0.ssa.ir
debug: optimizing approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: marking single-use function _puya_lib.bytes_.is_substring for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.test_boolean_binary_ops for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.type_coercion for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops for inlining
debug: marking single-use function test_cases.boolean_binary_ops.contract.test_literal_conditionals for inlining
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
boolean_binary_ops/contract.py:7:9 debug: inlining call to test_cases.boolean_binary_ops.contract.test_boolean_binary_ops in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:8:9 debug: inlining call to test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:9:9 debug: inlining call to test_cases.boolean_binary_ops.contract.type_coercion in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:10:9 debug: inlining call to test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:11:9 debug: inlining call to test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:12:9 debug: inlining call to test_cases.boolean_binary_ops.contract.test_literal_conditionals in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, and_result#0
debug: selected and_result#0 from equivalence set
debug: Found equivalence set: or_result%0#2, or_result#0
debug: selected or_result#0 from equivalence set
debug: Found equivalence set: select%0#0, b#0
debug: selected b#0 from equivalence set
debug: Found equivalence set: select%1#0, ternary_result%0#1
debug: selected select%1#0 from equivalence set
debug: Found equivalence set: ternary_result%0#2, c#0
debug: selected c#0 from equivalence set
debug: Found equivalence set: or_result%0#5, ok#0
debug: selected ok#0 from equivalence set
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: selected bytes_length%0#0 from equivalence set
debug: Found equivalence set: item_index_internal%0#1, idx#0
debug: selected idx#0 from equivalence set
debug: Found equivalence set: or_result%1#5, d#0
debug: selected d#0 from equivalence set
debug: Found equivalence set: select%4#1, ternary_result%0#6
debug: selected select%4#1 from equivalence set
debug: Found equivalence set: ternary_result%0#8, y#1
debug: selected y#1 from equivalence set
debug: Found equivalence set: select%5#0, ternary_result%1#4
debug: selected select%5#0 from equivalence set
debug: Found equivalence set: ternary_result%1#5, z#1
debug: selected z#1 from equivalence set
debug: Copy propagation made 15 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Removing unused variable z#0
debug: Removing unused variable bytes_to_iterate#0
debug: Removing unused variable a#0
debug: Removing unused variable b#2
debug: Removing unused variable one#0
debug: Removing unused variable empty_bytes#0
debug: Removing unused variable true#1
debug: Removing unused variable false#1
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (&& 1u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (&& 0u 1u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (&& 0u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (|| 1u 0u) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Simplified (|| 0u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u 0u) to OptIn
debug: Simplified (> OptIn 0u) to 1u
debug: Simplified (!= appl 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u 0u) to OptIn
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "ri") to 2u
debug: Simplified (len "left") to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (len "le") to 2u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (len "right") to 5u
debug: Simplified (len "le") to 2u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (len 0x6e65766572207365656e) to 10u
debug: Simplified (== 10u 0u) to 0u
debug: Simplified (select 0x616263 0x6e65766572207365656e 0u) to 0x616263
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (select 0x7269676874 0x6c656674 0u) to 0x7269676874
debug: Simplified ((extract 1 1) 0x7269676874) to 0x69
debug: Simplified (== 0x69 0x69) to 1u
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (!= 4u 0u) to 1u
debug: Simplified (select 0x7269676874 0x6c656674 1u) to 0x6c656674
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (>= 0u 4u) to 0u
debug: Simplified (select 0u 4u 0u) to 0u
debug: Simplified (>= 2u 4u) to 0u
debug: Simplified (select 2u 4u 0u) to 2u
debug: Simplified (substring3 0x6c656674 0u 2u) to 0x6c65
debug: Simplified (== 0x6c65 0x6c65) to 1u
debug: Simplified (len "left") to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (== 1u 0u) to 0u
debug: Simplified (select 2u 1u 0u) to 2u
debug: Simplified (+ 2u 3u) to 5u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (select 2u 1u 1u) to 1u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (== 18446744073709551614u 18446744073709551614u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 3u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 3u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 0u) to 0u
debug: Simplified (select 4u 1u 0u) to 4u
debug: Simplified (bitlen 4u) to 3u
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select 0x68656c6c6f 0x 0u) to 0x68656c6c6f
debug: Simplified (bitlen 0x68656c6c6f) to 39u
debug: Simplified (> 39u 0u) to 1u
debug: Simplified (select 0u 1u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (select 0u 1u 1u) to 1u
debug: Simplified (select 0u 1u 1u) to 1u
debug: Simplified (select 0u 1u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (select 0u 3u 0u) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select 0u 3u 1u) to 3u
debug: Simplified (extract3 ternary_result%1#2 0u 2u) to ((extract 0 2) ternary_result%1#2)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@14 from goto_nth [block@15][loop_counter%1#1] else goto block@16 to goto loop_counter%1#1 ? block@16 : block@15
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@17 from goto_nth [block@18][loop_counter%0#1] else goto block@19 to goto loop_counter%0#1 ? block@19 : block@18
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21 from goto 1u ? block@22 : block@23 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 0u ? block@28 : block@27 to goto block@27
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@27 from goto 1u ? block@28 : block@29 to goto block@28
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@30 from goto 0u ? block@34 : block@31 to goto block@31
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@31 from goto 1u ? block@34 : block@32 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32 from goto 1u ? block@34 : block@33 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@33 from goto 1u ? block@34 : block@35 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@36 from goto 0u ? block@38 : block@37 to goto block@37
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@37 from goto 1u ? block@38 : block@41 to goto block@38
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@38 from goto 0u ? block@40 : block@39 to goto block@39
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@39 from goto 1u ? block@40 : block@41 to goto block@40
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@42 from goto 0u ? block@45 : block@43 to goto block@43
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@43 from goto 1u ? block@45 : block@44 to goto block@45
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@44 from goto 1u ? block@45 : block@46 to goto block@45
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@47 from goto 0u ? block@50 : block@48 to goto block@48
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@48 from goto 1u ? block@50 : block@49 to goto block@50
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@49 from goto 1u ? block@50 : block@51 to goto block@50
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@52 from goto 0u ? block@53 : block@54 to goto block@54
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@58 from goto 0u ? block@59 : block@60 to goto block@60
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@63 from goto 0u ? block@64 : block@65 to goto block@65
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@71 from goto 0u ? block@72 : block@73 to goto block@73
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@76 from goto 0u ? block@78 : block@77 to goto block@77
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@77 from goto 1u ? block@78 : block@79 to goto block@78
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@80 from goto 0u ? block@82 : block@81 to goto block@81
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@81 from goto 1u ? block@82 : block@83 to goto block@82
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@84 from goto 1u ? block@85 : block@89 to goto block@85
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@85 from goto 1u ? block@86 : block@89 to goto block@86
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@86 from goto 1u ? block@87 : block@89 to goto block@87
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@90 from goto 0u ? block@91 : block@92 to goto block@92
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@92 from goto 0u ? block@93 : block@94 to goto block@94
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@94 from goto 0u ? block@96 : block@95 to goto block@95
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@95 from goto 0u ? block@96 : block@97 to goto block@97
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@97 from goto 0u ? block@99 : block@98 to goto block@98
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@98 from goto 0u ? block@99 : block@100 to goto block@100
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@102 from goto 0u ? block@104 : block@103 to goto block@103
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@103 from goto 1u ? block@104 : block@105 to goto block@104
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@106 from goto 1u ? block@108 : block@107 to goto block@108
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@107 from goto 1u ? block@108 : block@109 to goto block@108
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@110 from goto 0u ? block@111 : block@112 to goto block@112
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@113 from goto 0u ? block@114 : block@115 to goto block@115
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@14 with block@13 in block@15
debug: Replaced predecessor block@14 with block@13 in block@16
debug: Merged linear block@14 into block@13
debug: Replaced predecessor block@17 with block@16 in block@18
debug: Replaced predecessor block@17 with block@16 in block@19
debug: Merged linear block@17 into block@16
debug: Replaced predecessor block@20 with block@19 in block@21
debug: Merged linear block@20 into block@19
debug: Replaced predecessor block@21 with block@19 in block@22
debug: Merged linear block@21 into block@19
debug: Replaced predecessor block@22 with block@19 in block@24
debug: Merged linear block@22 into block@19
debug: Replaced predecessor block@25 with block@24 in block@26
debug: Merged linear block@25 into block@24
debug: Replaced predecessor block@26 with block@24 in block@27
debug: Merged linear block@26 into block@24
debug: Replaced predecessor block@27 with block@24 in block@28
debug: Merged linear block@27 into block@24
debug: Replaced predecessor block@28 with block@24 in block@30
debug: Merged linear block@28 into block@24
debug: Replaced predecessor block@31 with block@30 in block@34
debug: Merged linear block@31 into block@30
debug: Replaced predecessor block@37 with block@36 in block@38
debug: Merged linear block@37 into block@36
debug: Replaced predecessor block@38 with block@36 in block@39
debug: Merged linear block@38 into block@36
debug: Replaced predecessor block@39 with block@36 in block@40
debug: Merged linear block@39 into block@36
debug: Replaced predecessor block@40 with block@36 in block@42
debug: Merged linear block@40 into block@36
debug: Replaced predecessor block@43 with block@42 in block@45
debug: Merged linear block@43 into block@42
debug: Replaced predecessor block@48 with block@47 in block@50
debug: Merged linear block@48 into block@47
debug: Replaced predecessor block@54 with block@52 in block@55
debug: Merged linear block@54 into block@52
debug: Replaced predecessor block@60 with block@58 in block@61
debug: Merged linear block@60 into block@58
debug: Replaced predecessor block@65 with block@63 in block@66
debug: Merged linear block@65 into block@63
debug: Replaced predecessor block@70 with block@69 in block@68
debug: Merged linear block@70 into block@69
debug: Replaced predecessor block@73 with block@71 in block@74
debug: Merged linear block@73 into block@71
debug: Replaced predecessor block@75 with block@74 in block@76
debug: Merged linear block@75 into block@74
debug: Replaced predecessor block@76 with block@74 in block@77
debug: Merged linear block@76 into block@74
debug: Replaced predecessor block@77 with block@74 in block@78
debug: Merged linear block@77 into block@74
debug: Replaced predecessor block@78 with block@74 in block@80
debug: Merged linear block@78 into block@74
debug: Replaced predecessor block@81 with block@80 in block@82
debug: Merged linear block@81 into block@80
debug: Replaced predecessor block@82 with block@80 in block@84
debug: Merged linear block@82 into block@80
debug: Replaced predecessor block@85 with block@84 in block@86
debug: Merged linear block@85 into block@84
debug: Replaced predecessor block@86 with block@84 in block@87
debug: Merged linear block@86 into block@84
debug: Replaced predecessor block@87 with block@84 in block@89
debug: Replaced predecessor block@87 with block@84 in block@88
debug: Merged linear block@87 into block@84
debug: Replaced predecessor block@92 with block@90 in block@94
debug: Merged linear block@92 into block@90
debug: Replaced predecessor block@94 with block@90 in block@95
debug: Merged linear block@94 into block@90
debug: Replaced predecessor block@95 with block@90 in block@97
debug: Merged linear block@95 into block@90
debug: Replaced predecessor block@97 with block@90 in block@98
debug: Merged linear block@97 into block@90
debug: Replaced predecessor block@98 with block@90 in block@100
debug: Merged linear block@98 into block@90
debug: Replaced predecessor block@100 with block@90 in block@101
debug: Merged linear block@100 into block@90
debug: Replaced predecessor block@101 with block@90 in block@102
debug: Merged linear block@101 into block@90
debug: Replaced predecessor block@102 with block@90 in block@103
debug: Merged linear block@102 into block@90
debug: Replaced predecessor block@103 with block@90 in block@104
debug: Merged linear block@103 into block@90
debug: Replaced predecessor block@104 with block@90 in block@106
debug: Merged linear block@104 into block@90
debug: Replaced predecessor block@112 with block@110 in block@113
debug: Merged linear block@112 into block@110
debug: Replaced predecessor block@115 with block@113 in block@116
debug: Merged linear block@115 into block@113
debug: Merged linear block@117 into block@116
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@111 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@23, block@29, block@32, block@33, block@35, block@41, block@44, block@46, block@49, block@51, block@53, block@59, block@64, block@72, block@79, block@83, block@91, block@93, block@96, block@99, block@105, block@107, block@109, block@111, block@114
debug: Removed unreachable predecessors from block@24
debug: Removed unreachable predecessors from block@30
debug: Removed unreachable predecessors from block@34
debug: Removed unreachable predecessors from block@36
debug: Removed unreachable predecessors from block@42
debug: Removed unreachable predecessors from block@45
debug: Removed unreachable predecessors from block@47
debug: Removed unreachable predecessors from block@50
debug: Removed unreachable predecessors from block@52
debug: Removed unreachable predecessors from block@55
debug: Removed unreachable predecessors from block@61
debug: Removed unreachable predecessors from block@66
debug: Removed unreachable predecessors from block@74
debug: Removed unreachable predecessors from block@80
debug: Removed unreachable predecessors from block@84
debug: Removed unreachable predecessors from block@106
debug: Removed unreachable predecessors from block@108
debug: Removed unreachable predecessors from block@110
debug: Removed unreachable predecessors from block@113
debug: Removed unreachable predecessors from block@116
debug: Removing unreachable phi arguments: select%1#0 <- block@23
debug: Replacing trivial Phi node: let c#0: uint64 = φ(ternary_result%0#0 <- block@19) (c#0) with ternary_result%0#0
debug: Deleting Phi assignment: let c#0: uint64 = φ(ternary_result%0#0 <- block@19)
debug: Removing unreachable phi arguments: or_result%0#4 <- block@29
debug: Replacing trivial Phi node: let ok#0: bool = φ(or_result%0#3 <- block@24) (ok#0) with or_result%0#3
debug: Deleting Phi assignment: let ok#0: bool = φ(or_result%0#3 <- block@24)
debug: Removing unreachable phi arguments: or_result%1#1 <- block@35
debug: Replacing trivial Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@34) (or_result%1#2) with or_result%1#0
debug: Deleting Phi assignment: let or_result%1#2: bool = φ(or_result%1#0 <- block@34)
debug: Removing unreachable phi arguments: and_result%0#4 <- block@41
debug: Replacing trivial Phi node: let and_result%0#5: bool = φ(and_result%0#3 <- block@36) (and_result%0#5) with and_result%0#3
debug: Deleting Phi assignment: let and_result%0#5: bool = φ(and_result%0#3 <- block@36)
debug: Removing unreachable phi arguments: or_result%2#1 <- block@46
debug: Replacing trivial Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@45) (or_result%2#2) with or_result%2#0
debug: Deleting Phi assignment: let or_result%2#2: bool = φ(or_result%2#0 <- block@45)
debug: Removing unreachable phi arguments: or_result%3#1 <- block@51
debug: Replacing trivial Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@50) (or_result%3#2) with or_result%3#0
debug: Deleting Phi assignment: let or_result%3#2: bool = φ(or_result%3#0 <- block@50)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@53
debug: Replacing trivial Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@52) (ternary_result%1#2) with ternary_result%1#1
debug: Deleting Phi assignment: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@52)
debug: Removing unreachable phi arguments: ternary_result%3#0 <- block@59
debug: Replacing trivial Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@58) (ternary_result%3#2) with ternary_result%3#1
debug: Deleting Phi assignment: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@58)
debug: Removing unreachable phi arguments: ternary_result%4#0 <- block@64
debug: Replacing trivial Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@63) (ternary_result%4#2) with ternary_result%4#1
debug: Deleting Phi assignment: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@63)
debug: Removing unreachable phi arguments: ternary_result%5#0 <- block@72
debug: Replacing trivial Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#1 <- block@71) (ternary_result%5#2) with ternary_result%5#1
debug: Deleting Phi assignment: let ternary_result%5#2: bytes = φ(ternary_result%5#1 <- block@71)
debug: Removing unreachable phi arguments: or_result%0#7 <- block@79
debug: Replacing trivial Phi node: let or_result%0#8: bool = φ(or_result%0#6 <- block@74) (or_result%0#8) with or_result%0#6
debug: Deleting Phi assignment: let or_result%0#8: bool = φ(or_result%0#6 <- block@74)
debug: Removing unreachable phi arguments: or_result%1#4 <- block@83
debug: Replacing trivial Phi node: let d#0: bool = φ(or_result%1#3 <- block@80) (d#0) with or_result%1#3
debug: Deleting Phi assignment: let d#0: bool = φ(or_result%1#3 <- block@80)
debug: Removing unreachable phi arguments: or_result%0#10 <- block@105
debug: Replacing trivial Phi node: let or_result%0#11: bool = φ(or_result%0#9 <- block@90) (or_result%0#11) with or_result%0#9
debug: Deleting Phi assignment: let or_result%0#11: bool = φ(or_result%0#9 <- block@90)
debug: Removing unreachable phi arguments: or_result%1#7 <- block@109
debug: Replacing trivial Phi node: let or_result%1#8: bool = φ(or_result%1#6 <- block@108) (or_result%1#8) with or_result%1#6
debug: Deleting Phi assignment: let or_result%1#8: bool = φ(or_result%1#6 <- block@108)
debug: Removing unreachable phi arguments: select%4#1 <- block@111
debug: Replacing trivial Phi node: let y#1: uint64 = φ(ternary_result%0#7 <- block@110) (y#1) with ternary_result%0#7
debug: Deleting Phi assignment: let y#1: uint64 = φ(ternary_result%0#7 <- block@110)
debug: Removing unreachable phi arguments: ternary_result%1#3 <- block@114
debug: Replacing trivial Phi node: let z#1: uint64 = φ(select%5#0 <- block@113) (z#1) with select%5#0
debug: Deleting Phi assignment: let z#1: uint64 = φ(select%5#0 <- block@113)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%42#0: bytes = (extract3 0x616263 idx#0 1u) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:85:13-14, ir_type=bytes, name='b', version=1),)
debug: Found equivalence set: b#1, tmp%42#0
debug: selected b#1 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%4#0: uint64 = (len item#0) with copy of existing registers (Register(source_location=INTERNAL:11:18-29, ir_type=uint64, name='tmp%0', version=0),)
debug: Found equivalence set: tmp%0#0, tmp%4#0
debug: selected tmp%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Replacing redundant declaration let tmp%5#0: uint64 = (+ start#1 tmp%0#0) with copy of existing registers (Register(source_location=INTERNAL:11:10-29, ir_type=uint64, name='tmp%1', version=0),)
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: selected tmp%1#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, and_result#0
debug: selected and_result#0 from equivalence set
debug: Found equivalence set: or_result%0#2, or_result#0
debug: selected or_result#0 from equivalence set
debug: Copy propagation made 2 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@11 from goto_nth [block@12][loop_counter%1#1] else goto block@13 to goto loop_counter%1#1 ? block@13 : block@12
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@14 from goto_nth [block@15][loop_counter%0#1] else goto block@16 to goto loop_counter%0#1 ? block@16 : block@15
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@11 with block@10 in block@12
debug: Replaced predecessor block@11 with block@10 in block@13
debug: Merged linear block@11 into block@10
debug: Replaced predecessor block@14 with block@13 in block@15
debug: Replaced predecessor block@14 with block@13 in block@16
debug: Merged linear block@14 into block@13
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: select%0#0, b#0
debug: selected b#0 from equivalence set
debug: Found equivalence set: select%1#0, ternary_result%0#1
debug: selected select%1#0 from equivalence set
debug: Found equivalence set: ternary_result%0#2, c#0
debug: selected c#0 from equivalence set
debug: Copy propagation made 3 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u 0u) to OptIn
debug: Simplified (> OptIn 0u) to 1u
debug: Simplified (!= appl 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u 0u) to OptIn
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 1u ? block@1 : block@2 to goto block@1
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@3
debug: Merged linear block@1 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2
debug: Removed unreachable predecessors from block@3
debug: Removing unreachable phi arguments: select%1#0 <- block@2
debug: Replacing trivial Phi node: let c#0: uint64 = φ(ternary_result%0#0 <- block@0) (c#0) with ternary_result%0#0
debug: Deleting Phi assignment: let c#0: uint64 = φ(ternary_result%0#0 <- block@0)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
boolean_binary_ops/contract.py:89:12 debug: inlining call to _puya_lib.bytes_.is_substring in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: or_result%0#2, ok#0
debug: selected ok#0 from equivalence set
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: selected bytes_length%0#0 from equivalence set
debug: Found equivalence set: item_index_internal%0#1, idx#0
debug: selected idx#0 from equivalence set
debug: Found equivalence set: ternary_result%5#2, sequence#0
debug: selected sequence#0 from equivalence set
debug: Copy propagation made 6 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Removing unused variable z#0
debug: Removing unused variable bytes_to_iterate#0
debug: Removing unused variable item#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (len "ri") to 2u
debug: Simplified (len "left") to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (len "le") to 2u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (len "right") to 5u
debug: Simplified (len "le") to 2u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (len 0x6e65766572207365656e) to 10u
debug: Simplified (== 10u 0u) to 0u
debug: Simplified (select 0x616263 0x6e65766572207365656e 0u) to 0x616263
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (select 0x7269676874 0x6c656674 0u) to 0x7269676874
debug: Simplified ((extract 1 1) 0x7269676874) to 0x69
debug: Simplified (== 0x69 0x69) to 1u
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (!= 4u 0u) to 1u
debug: Simplified (select 0x7269676874 0x6c656674 1u) to 0x6c656674
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (>= 0u 4u) to 0u
debug: Simplified (select 0u 4u 0u) to 0u
debug: Simplified (>= 2u 4u) to 0u
debug: Simplified (select 2u 4u 0u) to 2u
debug: Simplified (substring3 0x6c656674 0u 2u) to 0x6c65
debug: Simplified (== 0x6c65 0x6c65) to 1u
debug: Simplified (len "left") to 4u
debug: Simplified (== 4u 0u) to 0u
debug: Simplified (len "ight") to 4u
debug: Simplified (== 1u 0u) to 0u
debug: Simplified (select 2u 1u 0u) to 2u
debug: Simplified (+ 2u 3u) to 5u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (select 2u 1u 1u) to 1u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (== 18446744073709551614u 18446744073709551614u) to 1u
debug: Simplified (extract3 ternary_result%1#2 0u 2u) to ((extract 0 2) ternary_result%1#2)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1 from goto 1u ? block@2 : block@3 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4 from goto 0u ? block@8 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@5 from goto 1u ? block@8 : block@6 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6 from goto 1u ? block@8 : block@7 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@7 from goto 1u ? block@8 : block@9 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10 from goto 0u ? block@12 : block@11 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11 from goto 1u ? block@12 : block@15 to goto block@12
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12 from goto 0u ? block@14 : block@13 to goto block@13
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@13 from goto 1u ? block@14 : block@15 to goto block@14
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16 from goto 0u ? block@19 : block@17 to goto block@17
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@17 from goto 1u ? block@19 : block@18 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18 from goto 1u ? block@19 : block@20 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21 from goto 0u ? block@24 : block@22 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@22 from goto 1u ? block@24 : block@23 to goto block@24
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@23 from goto 1u ? block@24 : block@25 to goto block@24
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 0u ? block@27 : block@28 to goto block@28
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32 from goto 0u ? block@33 : block@34 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@37 from goto 0u ? block@38 : block@39 to goto block@39
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@45 from goto 0u ? block@46 : block@47 to goto block@47
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@4
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@5 with block@4 in block@8
debug: Merged linear block@5 into block@4
debug: Replaced predecessor block@11 with block@10 in block@12
debug: Merged linear block@11 into block@10
debug: Replaced predecessor block@12 with block@10 in block@13
debug: Merged linear block@12 into block@10
debug: Replaced predecessor block@13 with block@10 in block@14
debug: Merged linear block@13 into block@10
debug: Replaced predecessor block@14 with block@10 in block@16
debug: Merged linear block@14 into block@10
debug: Replaced predecessor block@17 with block@16 in block@19
debug: Merged linear block@17 into block@16
debug: Replaced predecessor block@22 with block@21 in block@24
debug: Merged linear block@22 into block@21
debug: Replaced predecessor block@28 with block@26 in block@29
debug: Merged linear block@28 into block@26
debug: Replaced predecessor block@34 with block@32 in block@35
debug: Merged linear block@34 into block@32
debug: Replaced predecessor block@39 with block@37 in block@40
debug: Merged linear block@39 into block@37
debug: Replaced predecessor block@44 with block@43 in block@42
debug: Merged linear block@44 into block@43
debug: Replaced predecessor block@47 with block@45 in block@48
debug: Merged linear block@47 into block@45
debug: Replaced predecessor block@49 with block@48 in block@50
debug: Merged linear block@49 into block@48
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3, block@6, block@7, block@9, block@15, block@18, block@20, block@23, block@25, block@27, block@33, block@38, block@46
debug: Removed unreachable predecessors from block@4
debug: Removed unreachable predecessors from block@8
debug: Removed unreachable predecessors from block@10
debug: Removed unreachable predecessors from block@16
debug: Removed unreachable predecessors from block@19
debug: Removed unreachable predecessors from block@21
debug: Removed unreachable predecessors from block@24
debug: Removed unreachable predecessors from block@26
debug: Removed unreachable predecessors from block@29
debug: Removed unreachable predecessors from block@35
debug: Removed unreachable predecessors from block@40
debug: Removed unreachable predecessors from block@48
debug: Removing unreachable phi arguments: or_result%0#1 <- block@3
debug: Replacing trivial Phi node: let ok#0: bool = φ(or_result%0#0 <- block@0) (ok#0) with or_result%0#0
debug: Deleting Phi assignment: let ok#0: bool = φ(or_result%0#0 <- block@0)
debug: Removing unreachable phi arguments: or_result%1#1 <- block@9
debug: Replacing trivial Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8) (or_result%1#2) with or_result%1#0
debug: Deleting Phi assignment: let or_result%1#2: bool = φ(or_result%1#0 <- block@8)
debug: Removing unreachable phi arguments: and_result%0#1 <- block@15
debug: Replacing trivial Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@10) (and_result%0#2) with and_result%0#0
debug: Deleting Phi assignment: let and_result%0#2: bool = φ(and_result%0#0 <- block@10)
debug: Removing unreachable phi arguments: or_result%2#1 <- block@20
debug: Replacing trivial Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19) (or_result%2#2) with or_result%2#0
debug: Deleting Phi assignment: let or_result%2#2: bool = φ(or_result%2#0 <- block@19)
debug: Removing unreachable phi arguments: or_result%3#1 <- block@25
debug: Replacing trivial Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24) (or_result%3#2) with or_result%3#0
debug: Deleting Phi assignment: let or_result%3#2: bool = φ(or_result%3#0 <- block@24)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@27
debug: Replacing trivial Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@26) (ternary_result%1#2) with ternary_result%1#1
debug: Deleting Phi assignment: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@26)
debug: Removing unreachable phi arguments: ternary_result%3#0 <- block@33
debug: Replacing trivial Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@32) (ternary_result%3#2) with ternary_result%3#1
debug: Deleting Phi assignment: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@32)
debug: Removing unreachable phi arguments: ternary_result%4#0 <- block@38
debug: Replacing trivial Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@37) (ternary_result%4#2) with ternary_result%4#1
debug: Deleting Phi assignment: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@37)
debug: Removing unreachable phi arguments: ternary_result%5#0 <- block@46
debug: Replacing trivial Phi node: let sequence#0: bytes = φ(ternary_result%5#1 <- block@45) (sequence#0) with ternary_result%5#1
debug: Deleting Phi assignment: let sequence#0: bytes = φ(ternary_result%5#1 <- block@45)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%42#0: bytes = (extract3 0x616263 idx#0 1u) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:85:13-14, ir_type=bytes, name='b', version=0),)
debug: Found equivalence set: b#0, tmp%42#0
debug: selected b#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: or_result%1#2, d#0
debug: selected d#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable one#0
debug: Removing unused variable empty_bytes#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 3u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 3u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 0u) to 0u
debug: Simplified (select 4u 1u 0u) to 4u
debug: Simplified (bitlen 4u) to 3u
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select 0x68656c6c6f 0x 0u) to 0x68656c6c6f
debug: Simplified (bitlen 0x68656c6c6f) to 39u
debug: Simplified (> 39u 0u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1 from goto 1u ? block@2 : block@3 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4 from goto 0u ? block@6 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@5 from goto 1u ? block@6 : block@7 to goto block@6
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@8 from goto 1u ? block@9 : block@13 to goto block@9
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9 from goto 1u ? block@10 : block@13 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10 from goto 1u ? block@11 : block@13 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@14 from goto 0u ? block@15 : block@16 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16 from goto 0u ? block@17 : block@18 to goto block@18
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18 from goto 0u ? block@20 : block@19 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@19 from goto 0u ? block@20 : block@21 to goto block@21
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21 from goto 0u ? block@23 : block@22 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@22 from goto 0u ? block@23 : block@24 to goto block@24
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@4
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@5 with block@4 in block@6
debug: Merged linear block@5 into block@4
debug: Replaced predecessor block@6 with block@4 in block@8
debug: Merged linear block@6 into block@4
debug: Replaced predecessor block@9 with block@8 in block@10
debug: Merged linear block@9 into block@8
debug: Replaced predecessor block@10 with block@8 in block@11
debug: Merged linear block@10 into block@8
debug: Replaced predecessor block@11 with block@8 in block@13
debug: Replaced predecessor block@11 with block@8 in block@12
debug: Merged linear block@11 into block@8
debug: Replaced predecessor block@16 with block@14 in block@18
debug: Merged linear block@16 into block@14
debug: Replaced predecessor block@18 with block@14 in block@19
debug: Merged linear block@18 into block@14
debug: Replaced predecessor block@19 with block@14 in block@21
debug: Merged linear block@19 into block@14
debug: Replaced predecessor block@21 with block@14 in block@22
debug: Merged linear block@21 into block@14
debug: Replaced predecessor block@22 with block@14 in block@24
debug: Merged linear block@22 into block@14
debug: Merged linear block@24 into block@14
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3, block@7, block@15, block@17, block@20, block@23
debug: Removed unreachable predecessors from block@4
debug: Removed unreachable predecessors from block@8
debug: Removing unreachable phi arguments: or_result%0#1 <- block@3
debug: Replacing trivial Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@0) (or_result%0#2) with or_result%0#0
debug: Deleting Phi assignment: let or_result%0#2: bool = φ(or_result%0#0 <- block@0)
debug: Removing unreachable phi arguments: or_result%1#1 <- block@7
debug: Replacing trivial Phi node: let d#0: bool = φ(or_result%1#0 <- block@4) (d#0) with or_result%1#0
debug: Deleting Phi assignment: let d#0: bool = φ(or_result%1#0 <- block@4)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: select%4#0, ternary_result%0#0
debug: selected select%4#0 from equivalence set
debug: Found equivalence set: ternary_result%0#2, y#0
debug: selected y#0 from equivalence set
debug: Found equivalence set: select%5#0, ternary_result%1#1
debug: selected select%5#0 from equivalence set
debug: Found equivalence set: ternary_result%1#2, z#0
debug: selected z#0 from equivalence set
debug: Copy propagation made 4 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select 0u 1u false#0) to false#0
debug: Simplified (select 0u 1u true#0) to true#0
debug: Simplified (select 0u 1u true#0) to true#0
debug: Simplified (select 0u 1u false#0) to false#0
debug: Simplified (select 0u 3u false#0) to (* false#0 3u)
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select 0u 3u true#0) to (* true#0 3u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4 from goto 1u ? block@6 : block@5 to goto block@6
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11 from goto 0u ? block@12 : block@13 to goto block@13
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@3
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@13 with block@11 in block@14
debug: Merged linear block@13 into block@11
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5, block@7, block@12
debug: Removed unreachable predecessors from block@6
debug: Removed unreachable predecessors from block@8
debug: Removed unreachable predecessors from block@14
debug: Removing unreachable phi arguments: or_result%1#1 <- block@7
debug: Replacing trivial Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) (or_result%1#2) with or_result%1#0
debug: Deleting Phi assignment: let or_result%1#2: bool = φ(or_result%1#0 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@12
debug: Replacing trivial Phi node: let z#0: uint64 = φ(select%5#0 <- block@11) (z#0) with select%5#0
debug: Deleting Phi assignment: let z#0: uint64 = φ(select%5#0 <- block@11)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%1#0: bool = (|| false#0 1u) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:127:11-35, ir_type=bool, name='tmp%0', version=0),)
debug: Found equivalence set: false#0, select%0#0, select%3#0
debug: selected false#0 from equivalence set
debug: Found equivalence set: true#0, select%1#0
debug: selected true#0 from equivalence set
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: selected tmp%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Removing redundant assert of tmp%0#0
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Unused subroutines removed
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.1.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: marking single-use function _puya_lib.bytes_.is_substring for inlining
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
boolean_binary_ops/contract.py:89:12 debug: inlining call to _puya_lib.bytes_.is_substring in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%0#2
debug: Removing unused variable b#0
debug: Removing unused variable tmp%1#2
debug: Removing unused variable tmp%2#2
debug: Removing unused variable ternary_result%0#0
debug: Removing unused variable tmp%0#3
debug: Removing unused variable tmp%1#3
debug: Removing unused variable tmp%2#3
debug: Removing unused variable or_result%0#3
debug: Removing unused variable tmp%3#3
debug: Removing unused variable tmp%4#3
debug: Removing unused variable tmp%5#2
debug: Removing unused variable or_result%1#0
debug: Removing unused variable tmp%10#2
debug: Removing unused variable tmp%11#2
debug: Removing unused variable tmp%12#1
debug: Removing unused variable tmp%13#1
debug: Removing unused variable tmp%14#1
debug: Removing unused variable tmp%15#1
debug: Removing unused variable and_result%0#3
debug: Removing unused variable tmp%16#1
debug: Removing unused variable tmp%17#1
debug: Removing unused variable tmp%18#1
debug: Removing unused variable or_result%2#0
debug: Removing unused variable tmp%21#0
debug: Removing unused variable tmp%22#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable or_result%3#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable ternary_result%3#1
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable ternary_result%4#1
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%41#0
debug: Removing unused variable select%0#1
debug: Removing unused variable bytes_length%0#0
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable select%1#1
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%48#0
debug: Removing unused variable tmp%49#0
debug: Removing unused variable select%2#0
debug: Removing unused variable length%0#0
debug: Removing unused variable is_out_of_bounds%0#0
debug: Removing unused variable bounded_index%0#0
debug: Removing unused variable is_out_of_bounds%1#0
debug: Removing unused variable bounded_index%1#0
debug: Removing unused variable tmp%50#0
debug: Removing unused variable tmp%51#0
debug: Removing unused variable tmp%52#0
debug: Removing unused variable tmp%53#0
debug: Removing unused variable ternary_result%5#1
debug: Removing unused variable item#0
debug: Removing unused variable sequence#0
debug: Removing unused variable tmp%55#0
debug: Removing unused variable select%3#0
debug: Removing unused variable tmp%56#0
debug: Removing unused variable tmp%57#0
debug: Removing unused variable tmp%58#0
debug: Removing unused variable select%4#0
debug: Removing unused variable tmp%59#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%61#0
debug: Removing unused variable tmp%0#4
debug: Removing unused variable tmp%1#4
debug: Removing unused variable tmp%2#4
debug: Removing unused variable tmp%3#4
debug: Removing unused variable or_result%0#6
debug: Removing unused variable tmp%4#4
debug: Removing unused variable c#1
debug: Removing unused variable tmp%5#3
debug: Removing unused variable tmp%6#3
debug: Removing unused variable or_result%1#3
debug: Removing unused variable tmp%7#3
debug: Removing unused variable tmp%8#3
debug: Removing unused variable tmp%9#3
debug: Removing unused variable tmp%10#3
debug: Removing unused variable tmp%11#3
debug: Removing unused variable select%0#2
debug: Removing unused variable tmp%12#2
debug: Removing unused variable tmp%13#2
debug: Removing unused variable tmp%14#2
debug: Removing unused variable tmp%15#2
debug: Removing unused variable select%1#2
debug: Removing unused variable tmp%16#2
debug: Removing unused variable tmp%17#2
debug: Removing unused variable select%0#3
debug: Removing unused variable tmp%0#5
debug: Removing unused variable select%1#3
debug: Removing unused variable or_result%0#9
debug: Removing unused variable or_result%1#6
debug: Removing unused variable select%3#1
debug: Removing unused variable tmp%1#5
debug: Removing unused variable select%4#1
debug: Removing unused variable tmp%2#5
debug: Removing unused variable ternary_result%0#7
debug: Removing unused variable tmp%4#5
debug: Removing unused variable select%5#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== appl appl) to 1u
debug: Simplified (len "right") to 5u
debug: Simplified (> 2u 5u) to 0u
debug: Simplified ((extract 0 2) "right") to "ri"
debug: Simplified (== "ri" "ri") to 1u
debug: Simplified (len "ri") to 2u
debug: Simplified (> 2u 5u) to 0u
debug: Simplified (extract3 "right" 0u 2u) to "ri"
debug: Simplified (== "ri" "ri") to 1u
debug: Simplified (== b#1 b#1) to 1u
debug: Simplified (len "ight") to 4u
debug: Simplified (len "right") to 5u
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (== 3u 3u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@55 from goto 0u ? block@56 : block@57 to goto block@57
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@61 from goto 0u ? block@62 : block@63 to goto block@63
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@84 from goto 1u ? block@88 : block@89 to goto block@88
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@24 with block@19 in block@30
debug: Merged linear block@24 into block@19
debug: Replaced predecessor block@30 with block@19 in block@34
debug: Merged linear block@30 into block@19
debug: Replaced predecessor block@34 with block@19 in block@36
debug: Merged linear block@34 into block@19
debug: Replaced predecessor block@36 with block@19 in block@42
debug: Merged linear block@36 into block@19
debug: Replaced predecessor block@42 with block@19 in block@45
debug: Merged linear block@42 into block@19
debug: Replaced predecessor block@45 with block@19 in block@47
debug: Merged linear block@45 into block@19
debug: Replaced predecessor block@47 with block@19 in block@50
debug: Merged linear block@47 into block@19
debug: Replaced predecessor block@50 with block@19 in block@52
debug: Merged linear block@50 into block@19
debug: Replaced predecessor block@52 with block@19 in block@55
debug: Merged linear block@52 into block@19
debug: Replaced predecessor block@55 with block@19 in block@57
debug: Merged linear block@55 into block@19
debug: Replaced predecessor block@57 with block@19 in block@58
debug: Merged linear block@57 into block@19
debug: Replaced predecessor block@61 with block@58 in block@63
debug: Merged linear block@61 into block@58
debug: Replaced predecessor block@63 with block@58 in block@66
debug: Merged linear block@63 into block@58
debug: Replaced predecessor block@66 with block@58 in block@67
debug: Merged linear block@66 into block@58
debug: Replaced predecessor block@74 with block@71 in block@117
debug: Merged linear block@74 into block@71
debug: Replaced predecessor block@117 with block@71 in block@118
debug: Merged linear block@117 into block@71
debug: Replaced predecessor block@80 with block@123 in block@84
debug: Merged linear block@80 into block@123
debug: Replaced predecessor block@84 with block@123 in block@88
debug: Merged linear block@84 into block@123
debug: Replaced predecessor block@88 with block@123 in block@90
debug: Merged linear block@88 into block@123
debug: Replaced predecessor block@106 with block@90 in block@108
debug: Merged linear block@106 into block@90
debug: Replaced predecessor block@108 with block@90 in block@110
debug: Merged linear block@108 into block@90
debug: Replaced predecessor block@110 with block@90 in block@113
debug: Merged linear block@110 into block@90
debug: Replaced predecessor block@113 with block@90 in block@116
debug: Merged linear block@113 into block@90
debug: Merged linear block@116 into block@90
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@56, block@62, block@89
debug: Removed unreachable predecessors from block@58
debug: Removed unreachable predecessors from block@67
debug: Removed unreachable predecessors from block@90
debug: Removing unreachable phi arguments: ternary_result%0#3 <- block@56
debug: Replacing trivial Phi node: let ternary_result%0#5: bool = φ(ternary_result%0#4 <- block@19) (ternary_result%0#5) with ternary_result%0#4
debug: Deleting Phi assignment: let ternary_result%0#5: bool = φ(ternary_result%0#4 <- block@19)
debug: Removing unreachable phi arguments: ternary_result%2#0 <- block@62
debug: Replacing trivial Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@58) (ternary_result%2#2) with ternary_result%2#1
debug: Deleting Phi assignment: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@58)
debug: Removing unreachable phi arguments: and_result%0#7 <- block@89
debug: Replacing trivial Phi node: let and_result%0#8: bool = φ(and_result%0#6 <- block@123) (and_result%0#8) with and_result%0#6
debug: Deleting Phi assignment: let and_result%0#8: bool = φ(and_result%0#6 <- block@123)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: Unused subroutines removed
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.2.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: marking simple function test_cases.boolean_binary_ops.contract.bool_to_bytes for inlining (complexity=1 <= threshold=3)
debug: marking simple function test_cases.boolean_binary_ops.contract.log_and_return for inlining (complexity=1 <= threshold=4)
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
boolean_binary_ops/contract.py:48:65 debug: inlining call to test_cases.boolean_binary_ops.contract.log_and_return in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:47:29 debug: inlining call to test_cases.boolean_binary_ops.contract.bool_to_bytes in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:47:60 debug: inlining call to test_cases.boolean_binary_ops.contract.bool_to_bytes in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:48:25 debug: inlining call to test_cases.boolean_binary_ops.contract.log_and_return in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:43:68 debug: inlining call to test_cases.boolean_binary_ops.contract.log_and_return in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:42:30 debug: inlining call to test_cases.boolean_binary_ops.contract.bool_to_bytes in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:42:62 debug: inlining call to test_cases.boolean_binary_ops.contract.bool_to_bytes in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
boolean_binary_ops/contract.py:43:26 debug: inlining call to test_cases.boolean_binary_ops.contract.log_and_return in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: lhs#6, x#5, x#7, tmp%5#1, x#1, x#3, tmp%15#0
debug: selected lhs#6 from equivalence set
debug: Found equivalence set: select%0#2, tmp%0#1
debug: selected select%0#2 from equivalence set
debug: Found equivalence set: rhs#1, x#6, x#4, tmp%7#1, x#2, x#0, tmp%17#0
debug: selected rhs#1 from equivalence set
debug: Found equivalence set: select%0#3, tmp%3#1
debug: selected select%0#3 from equivalence set
debug: Found equivalence set: tmp%4#1, msg#3
debug: selected msg#3 from equivalence set
debug: Found equivalence set: tmp%6#1, msg#2
debug: selected msg#2 from equivalence set
debug: Found equivalence set: select%0#0, tmp%10#1
debug: selected select%0#0 from equivalence set
debug: Found equivalence set: select%0#1, tmp%13#0
debug: selected select%0#1 from equivalence set
debug: Found equivalence set: tmp%14#0, msg#1
debug: selected msg#1 from equivalence set
debug: Found equivalence set: tmp%16#0, msg#0
debug: selected msg#0 from equivalence set
debug: Copy propagation made 16 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#2
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable ternary_result%0#4
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%37#0
debug: Removing unused variable ternary_result%2#1
debug: Removing unused variable b#1
debug: Removing unused variable tmp%43#0
debug: Removing unused variable tmp%0#6
debug: Removing unused variable tmp%2#6
debug: Removing unused variable and_result%0#6
debug: Removing unused variable tmp%3#5
debug: Removing unused variable tmp%5#4
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@134 with block@5 in block@135
debug: Merged linear block@134 into block@5
debug: Replaced predecessor block@135 with block@5 in block@136
debug: Merged linear block@135 into block@5
debug: Replaced predecessor block@136 with block@5 in block@137
debug: Merged linear block@136 into block@5
debug: Replaced predecessor block@137 with block@5 in block@138
debug: Merged linear block@137 into block@5
debug: Replaced predecessor block@138 with block@5 in block@139
debug: Merged linear block@138 into block@5
debug: Replaced predecessor block@139 with block@5 in block@8
debug: Replaced predecessor block@139 with block@5 in block@6
debug: Merged linear block@139 into block@5
debug: Replaced predecessor block@132 with block@6 in block@133
debug: Merged linear block@132 into block@6
debug: Replaced predecessor block@133 with block@6 in block@8
debug: Replaced predecessor block@133 with block@6 in block@7
debug: Merged linear block@133 into block@6
debug: Replaced predecessor block@126 with block@9 in block@127
debug: Merged linear block@126 into block@9
debug: Replaced predecessor block@127 with block@9 in block@128
debug: Merged linear block@127 into block@9
debug: Replaced predecessor block@128 with block@9 in block@129
debug: Merged linear block@128 into block@9
debug: Replaced predecessor block@129 with block@9 in block@130
debug: Merged linear block@129 into block@9
debug: Replaced predecessor block@130 with block@9 in block@131
debug: Merged linear block@130 into block@9
debug: Replaced predecessor block@131 with block@9 in block@10
debug: Replaced predecessor block@131 with block@9 in block@11
debug: Merged linear block@131 into block@9
debug: Replaced predecessor block@124 with block@10 in block@125
debug: Merged linear block@124 into block@10
debug: Replaced predecessor block@125 with block@10 in block@12
debug: Replaced predecessor block@125 with block@10 in block@11
debug: Merged linear block@125 into block@10
debug: Replaced predecessor block@58 with block@19 in block@67
debug: Merged linear block@58 into block@19
debug: Replaced predecessor block@67 with block@19 in block@68
debug: Merged linear block@67 into block@19
debug: Merged linear block@90 into block@123
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let select%0#0: bytes = (select 0x66616c7365 0x74727565 lhs#6) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:35:17-43, ir_type=bytes, name='select%0', version=2),)
debug: Replacing redundant declaration let select%0#1: bytes = (select 0x66616c7365 0x74727565 rhs#1) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:35:17-43, ir_type=bytes, name='select%0', version=3),)
debug: Found equivalence set: select%0#2, select%0#0
debug: selected select%0#2 from equivalence set
debug: Found equivalence set: select%0#3, select%0#1
debug: selected select%0#3 from equivalence set
debug: Copy propagation made 2 modifications
debug: Replacing redundant declaration let tmp%11#1: bytes = (concat 0x5f select%0#2) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:42:22-47, ir_type=bytes, name='tmp%1', version=1),)
debug: Found equivalence set: tmp%1#1, tmp%11#1
debug: selected tmp%1#1 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: removing unused subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Unused subroutines removed
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.3.ssa.opt.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 4, ending loop
debug: optimizing clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.1.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.2.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: lowering array IR nodes in approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.4.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.3.ssa.array.ir
debug: optimizing approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
boolean_binary_ops/contract.py:6 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program, []
debug: Slot allocation not required
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.5.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.boolean_binary_ops.contract.BooleanBinaryOps
boolean_binary_ops/contract.py:15 debug: auto reserving slots in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.4.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#5, loop_counter%0#1, loop_counter%0#2]
debug: Coalescing lhs#0 with [lhs#10, lhs#6, lhs#7]
debug: Coalescing loop_counter%1#0 with [loop_counter%1#5, loop_counter%1#1, loop_counter%1#2]
debug: Coalescing rhs#0 with [rhs#9, rhs#1, rhs#6]
debug: Coalescing select%0#2 with [select%0#3]
debug: Coalescing msg#0 with [msg#3, msg#2, msg#1]
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing and_result#0 with [and_result#1]
debug: Coalescing or_result%0#0 with [or_result%0#1]
debug: Coalescing or_result#0 with [or_result#1]
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#2]
debug: Coalescing idx#0 with [idx#1]
debug: Coalescing start#0 with [start#5, start#1, start#2]
debug: Coalescing _puya_lib.bytes_.is_substring%0#0 with [_puya_lib.bytes_.is_substring%0#1]
debug: Coalescing tmp%54#0 with [tmp%54#1]
debug: Coalescing resulted in 74 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: Performing post-SSA optimizations at level 1
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.approval.6.destructured.ir
debug: Performing SSA IR destructuring for test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ir/BooleanBinaryOps.clear.5.destructured.ir
debug: Inserted main_for_body@5.ops[8]: 'l-store-copy tmp%1#1 0'
debug: Replaced main_for_body@5.ops[10]: 'v-load tmp%1#1' with 'l-load tmp%1#1'
debug: Inserted main_for_body@5.ops[26]: 'l-store-copy msg#0 0'
debug: Replaced main_for_body@5.ops[28]: 'v-load msg#0' with 'l-load msg#0'
debug: Inserted main_for_body@5.ops[4]: 'l-store-copy select%0#2 0'
debug: Replaced main_for_body@5.ops[7]: 'v-load select%0#2' with 'l-load select%0#2'
debug: Inserted main_for_body@5.ops[19]: 'l-store-copy select%0#2 0'
debug: Replaced main_for_body@5.ops[22]: 'v-load select%0#2' with 'l-load select%0#2'
debug: Inserted main_for_body@5.ops[24]: 'l-store-copy and_msg#0 0'
debug: Replaced main_for_body@5.ops[27]: 'v-load and_msg#0' with 'l-load and_msg#0'
debug: Inserted main_for_body@5.ops[14]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_for_body@5.ops[22]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_for_body@5.ops[3]: 'l-store-copy lhs#0 2'
debug: Replaced main_for_body@5.ops[35]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted main_and_contd@6.ops[3]: 'l-store-copy msg#0 0'
debug: Replaced main_and_contd@6.ops[5]: 'v-load msg#0' with 'l-load msg#0'
debug: Inserted main_bool_true@7.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_true@7.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_false@8.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_false@8.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_merge@9.ops[7]: 'l-store-copy tmp%9#1 0'
debug: Replaced main_bool_merge@9.ops[9]: 'v-load tmp%9#1' with 'l-load tmp%9#1'
debug: Inserted main_bool_merge@9.ops[14]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_bool_merge@9.ops[16]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_bool_merge@9.ops[23]: 'l-store-copy msg#0 0'
debug: Replaced main_bool_merge@9.ops[25]: 'v-load msg#0' with 'l-load msg#0'
debug: Inserted main_bool_merge@9.ops[3]: 'l-store-copy tmp%8#1 0'
debug: Replaced main_bool_merge@9.ops[6]: 'v-load tmp%8#1' with 'l-load tmp%8#1'
debug: Inserted main_bool_merge@9.ops[20]: 'l-store-copy or_msg#0 0'
debug: Replaced main_bool_merge@9.ops[23]: 'v-load or_msg#0' with 'l-load or_msg#0'
debug: Inserted main_bool_merge@9.ops[1]: 'l-store-copy lhs#0 0'
debug: Replaced main_bool_merge@9.ops[30]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted main_or_contd@10.ops[3]: 'l-store-copy msg#0 0'
debug: Replaced main_or_contd@10.ops[5]: 'v-load msg#0' with 'l-load msg#0'
debug: Inserted main_bool_true@11.ops[1]: 'l-store-copy or_result%0#0 0'
debug: Replaced main_bool_true@11.ops[3]: 'v-load or_result%0#0' with 'l-load or_result%0#0'
debug: Inserted main_bool_false@12.ops[1]: 'l-store-copy or_result%0#0 0'
debug: Replaced main_bool_false@12.ops[3]: 'v-load or_result%0#0' with 'l-load or_result%0#0'
debug: Inserted main_bool_merge@13.ops[7]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_bool_merge@13.ops[9]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_bool_merge@13.ops[3]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_bool_merge@13.ops[6]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_after_for@19.ops[1]: 'l-store-copy item_index_internal%0#0 0'
debug: Replaced main_after_for@19.ops[3]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted main_for_header@68.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@68.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_for_body@69.ops[3]: 'l-store-copy item_index_internal%0#0 0'
debug: Replaced main_for_body@69.ops[5]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted main_while_top@118.ops[3]: 'l-store-copy tmp%1#6 0'
debug: Replaced main_while_top@118.ops[5]: 'v-load tmp%1#6' with 'l-load tmp%1#6'
debug: Inserted main_while_top@118.ops[8]: 'l-store-copy tmp%3#6 0'
debug: Replaced main_while_top@118.ops[10]: 'v-load tmp%3#6' with 'l-load tmp%3#6'
debug: Inserted main_while_body@119.ops[8]: 'l-store-copy tmp%7#4 0'
debug: Replaced main_while_body@119.ops[10]: 'v-load tmp%7#4' with 'l-load tmp%7#4'
debug: Inserted main_while_body@119.ops[4]: 'l-store-copy tmp%6#4 0'
debug: Replaced main_while_body@119.ops[7]: 'v-load tmp%6#4' with 'l-load tmp%6#4'
debug: Inserted main_if_body@120.ops[1]: 'l-store-copy _puya_lib.bytes_.is_substring%0#0 0'
debug: Replaced main_if_body@120.ops[3]: 'v-load _puya_lib.bytes_.is_substring%0#0' with 'l-load _puya_lib.bytes_.is_substring%0#0'
debug: Inserted main_after_while@122.ops[1]: 'l-store-copy _puya_lib.bytes_.is_substring%0#0 0'
debug: Replaced main_after_while@122.ops[3]: 'v-load _puya_lib.bytes_.is_substring%0#0' with 'l-load _puya_lib.bytes_.is_substring%0#0'
debug: Found 14 edge set/s for test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Allocated 3 variable/s to x-stack: and_result#0, or_result#0, tmp%54#0
debug: shared x-stack for main_bool_true@7 -> main_bool_merge@9: and_result#0
debug: shared x-stack for main_bool_false@8 -> main_bool_merge@9: and_result#0
debug: shared x-stack for main_bool_true@11 -> main_bool_merge@13: or_result#0
debug: shared x-stack for main_bool_false@12 -> main_bool_merge@13: or_result#0
debug: shared x-stack for main_if_body@120 -> main_after_inlined__puya_lib.bytes_.is_substring@123: tmp%54#0
debug: shared x-stack for main_after_while@122 -> main_after_inlined__puya_lib.bytes_.is_substring@123: tmp%54#0
debug: test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program f-stack entry: ['and_msg#0', 'or_msg#0', 'select%0#2', 'tmp%1#1', 'idx#0', 'loop_counter%1#0', 'rhs#0', 'start#0', 'tmp%1#6']
debug: test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program f-stack on first store: ['loop_counter%0#0', 'lhs#0']
boolean_binary_ops/contract.py:6 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
boolean_binary_ops/contract.py:6 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_and_contd@6 into main_for_body@5
debug: inlining single reference block main_bool_true@7 into main_for_body@5
debug: inlining single reference block main_or_contd@10 into main_bool_merge@9
debug: inlining single reference block main_for_header_1@15 into main_bool_merge@13
debug: inlining single reference block main_for_header_1@18 into main_after_for@16
debug: inlining single reference block main_for_body@69 into main_for_header@68
debug: inlining single reference block main_while_body@119 into main_while_top@118
debug: inlining single reference block main_if_body@120 into main_while_top@118
debug: removing explicit jump to fall-through block main_for_body@4
debug: removing explicit jump to fall-through block main_for_body@5
debug: removing explicit jump to fall-through block main_bool_merge@9
debug: removing explicit jump to fall-through block main_bool_true@11
debug: removing explicit jump to fall-through block main_bool_merge@13
debug: removing explicit jump to fall-through block main_for_header@68
debug: removing explicit jump to fall-through block main_while_top@118
debug: removing explicit jump to fall-through block main_after_inlined__puya_lib.bytes_.is_substring@123
boolean_binary_ops/contract.py:15 debug: optimizing TEAL subroutine ops test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> uint64:
boolean_binary_ops/contract.py:15 debug: optimizing TEAL subroutine blocks test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.bin
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.bin
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.stats.txt
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.stats.txt
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.puya.map
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.puya.map