debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['boolean_binary_ops'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
boolean_binary_ops/contract.py:97:12 warning: expression is always True
boolean_binary_ops/contract.py:98:12 warning: expression is always True
boolean_binary_ops/contract.py:99:25 warning: expression is always True
boolean_binary_ops/contract.py:102:9 warning: expression is always True
boolean_binary_ops/contract.py:103:9 warning: expression is always True
boolean_binary_ops/contract.py:104:27 warning: expression is always True
boolean_binary_ops/contract.py:108:8 warning: expression is always False
boolean_binary_ops/contract.py:110:8 warning: expression is always False
boolean_binary_ops/contract.py:112:21 warning: expression is always False
boolean_binary_ops/contract.py:127:13 warning: expression is always True
boolean_binary_ops/contract.py:127:13 warning: expression is always False
boolean_binary_ops/contract.py:127:35 warning: expression is always True
boolean_binary_ops/contract.py:128:12 warning: expression is always False
boolean_binary_ops/contract.py:128:18 warning: expression is always True
boolean_binary_ops/contract.py:128:18 warning: expression is always False
boolean_binary_ops/contract.py:129:12 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always True
boolean_binary_ops/contract.py:129:23 warning: expression is always False
boolean_binary_ops/contract.py:130:13 warning: expression is always True
boolean_binary_ops/contract.py:130:13 warning: expression is always False
boolean_binary_ops/contract.py:130:35 warning: expression is always True
info: writing boolean_binary_ops/out/module.awst
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@2: // while_body_L21
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L21
debug: Sealing block@3: // switch_case_0_L28
debug: Terminated block@3: // switch_case_0_L28
debug: Sealing block@4: // switch_case_1_L30
debug: Terminated block@4: // switch_case_1_L30
debug: Sealing block@5: // switch_case_default_L26
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@1: // abi_routing_L5
debug: Terminated block@1: // abi_routing_L5
debug: Sealing block@2: // bare_routing_L5
debug: Terminated block@2: // bare_routing_L5
debug: Sealing block@3: // after_if_else_L5
debug: Terminated block@3: // after_if_else_L5
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L41
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L41
debug: Terminated block@1: // for_body_L41
debug: Looking for 'loop_counter%1' in an unsealed block creating an incomplete Phi: block@2: // for_body_L42
debug: Created Phi assignment: let loop_counter%1#1: uint64 = undefined while trying to resolve 'loop_counter%1' in block@2: // for_body_L42
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@2: // for_body_L42
debug: Created Phi assignment: let lhs#1: bool = undefined while trying to resolve 'lhs' in block@2: // for_body_L42
debug: Looking for 'rhs' in an unsealed block creating an incomplete Phi: block@2: // for_body_L42
debug: Created Phi assignment: let rhs#1: bool = undefined while trying to resolve 'rhs' in block@2: // for_body_L42
debug: Terminated block@2: // for_body_L42
debug: Sealing block@3: // and_contd_L43
debug: Terminated block@3: // and_contd_L43
debug: Sealing block@4: // bool_true_L43
debug: Terminated block@4: // bool_true_L43
debug: Sealing block@5: // bool_false_L43
debug: Terminated block@5: // bool_false_L43
debug: Sealing block@6: // bool_merge_L43
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@6: // bool_merge_L43
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4) in block@4: // bool_true_L43
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5) in block@5: // bool_false_L43
debug: Created Phi assignment: let lhs#2: bool = undefined while trying to resolve 'lhs' in block@6: // bool_merge_L43
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4) in block@4: // bool_true_L43
debug: Created Phi assignment: let lhs#3: bool = undefined while trying to resolve 'lhs' in block@5: // bool_false_L43
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2) in block@2: // for_body_L42
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) in block@3: // and_contd_L43
debug: Replacing trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1
debug: Deleting Phi assignment: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3)
debug: Replaced trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) in block@5: // bool_false_L43
debug: Replacing trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1
debug: Deleting Phi assignment: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5)
debug: Replaced trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#2: bool = undefined while trying to resolve 'rhs' in block@6: // bool_merge_L43
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4) in block@4: // bool_true_L43
debug: Created Phi assignment: let rhs#3: bool = undefined while trying to resolve 'rhs' in block@5: // bool_false_L43
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2) in block@2: // for_body_L42
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) in block@3: // and_contd_L43
debug: Replacing trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1
debug: Deleting Phi assignment: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3)
debug: Replaced trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) in block@5: // bool_false_L43
debug: Replacing trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1
debug: Deleting Phi assignment: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5)
debug: Replaced trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1 in current definition for 1 blocks
debug: Terminated block@6: // bool_merge_L43
debug: Sealing block@7: // or_contd_L48
debug: Terminated block@7: // or_contd_L48
debug: Sealing block@8: // bool_true_L48
debug: Terminated block@8: // bool_true_L48
debug: Sealing block@9: // bool_false_L48
debug: Terminated block@9: // bool_false_L48
debug: Sealing block@10: // bool_merge_L48
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@10: // bool_merge_L48
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8) in block@8: // bool_true_L48
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9) in block@9: // bool_false_L48
debug: Created Phi assignment: let lhs#4: bool = undefined while trying to resolve 'lhs' in block@10: // bool_merge_L48
debug: Created Phi assignment: let lhs#5: bool = undefined while trying to resolve 'lhs' in block@8: // bool_true_L48
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6) in block@6: // bool_merge_L43
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) in block@7: // or_contd_L48
debug: Replacing trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1
debug: Deleting Phi assignment: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7)
debug: Replaced trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8) in block@8: // bool_true_L48
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) in block@9: // bool_false_L48
debug: Replacing trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1
debug: Deleting Phi assignment: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9)
debug: Replaced trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#4: bool = undefined while trying to resolve 'rhs' in block@10: // bool_merge_L48
debug: Created Phi assignment: let rhs#5: bool = undefined while trying to resolve 'rhs' in block@8: // bool_true_L48
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6) in block@6: // bool_merge_L43
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) in block@7: // or_contd_L48
debug: Replacing trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1
debug: Deleting Phi assignment: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7)
debug: Replaced trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8) in block@8: // bool_true_L48
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) in block@9: // bool_false_L48
debug: Replacing trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1
debug: Deleting Phi assignment: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9)
debug: Replaced trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1 in current definition for 1 blocks
debug: Terminated block@10: // bool_merge_L48
debug: Sealing block@11: // for_footer_L41
debug: Terminated block@11: // for_footer_L41
debug: Sealing block@12: // for_header_1_L41
debug: Terminated block@12: // for_header_1_L41
debug: Sealing block@2: // for_body_L42
debug: Added loop_counter%1#0 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1) in block@1: // for_body_L41
debug: Added loop_counter%1#2 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12) in block@12: // for_header_1_L41
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@1: // for_body_L41
debug: Created Phi assignment: let lhs#6: bool = undefined while trying to resolve 'lhs' in block@1: // for_body_L41
debug: Added lhs#6 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1) in block@1: // for_body_L41
debug: Added lhs#1 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) in block@12: // for_header_1_L41
debug: Replacing trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6
debug: Deleting Phi assignment: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12)
debug: Replaced trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6 in current definition for 11 blocks
debug: Added rhs#0 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1) in block@1: // for_body_L41
debug: Added rhs#6 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12) in block@12: // for_header_1_L41
debug: Sealing block@13: // after_for_L41
debug: Terminated block@13: // after_for_L41
debug: Sealing block@14: // for_footer_L40
debug: Terminated block@14: // for_footer_L40
debug: Sealing block@15: // for_header_1_L40
debug: Terminated block@15: // for_header_1_L40
debug: Sealing block@1: // for_body_L41
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L38
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15) in block@15: // for_header_1_L40
debug: Added lhs#0 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0) in block@0: // L38
debug: Added lhs#7 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15) in block@15: // for_header_1_L40
debug: Sealing block@16: // after_for_L40
debug: Terminated block@16: // after_for_L40
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@0: // L54
debug: Terminated block@0: // L54
debug: Sealing block@0: // L60
boolean_binary_ops/contract.py:62:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@0: // L60
debug: Sealing block@1: // ternary_true_L64
boolean_binary_ops/contract.py:64:9 debug: encountered already materialized expression (appl), reusing result: appl
debug: Terminated block@1: // ternary_true_L64
debug: Sealing block@2: // ternary_false_L64
boolean_binary_ops/contract.py:64:44 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@2: // ternary_false_L64
debug: Sealing block@3: // ternary_merge_L64
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L64
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L64
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L64
debug: Terminated block@3: // ternary_merge_L64
debug: Sealing block@0: // L68
debug: Terminated block@0: // L68
debug: Sealing block@1: // or_contd_L70
debug: Terminated block@1: // or_contd_L70
debug: Sealing block@2: // bool_true_L70
debug: Terminated block@2: // bool_true_L70
debug: Sealing block@3: // bool_false_L70
debug: Terminated block@3: // bool_false_L70
debug: Sealing block@4: // bool_merge_L70
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4: // bool_merge_L70
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2: // bool_true_L70
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3: // bool_false_L70
debug: Terminated block@4: // bool_merge_L70
debug: Sealing block@5: // or_contd_L76
debug: Terminated block@5: // or_contd_L76
debug: Sealing block@6: // or_contd_L76
debug: Terminated block@6: // or_contd_L76
debug: Sealing block@7: // or_contd_L76
debug: Terminated block@7: // or_contd_L76
debug: Sealing block@8: // bool_true_L76
debug: Terminated block@8: // bool_true_L76
debug: Sealing block@9: // bool_false_L76
debug: Terminated block@9: // bool_false_L76
debug: Sealing block@10: // bool_merge_L76
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@10: // bool_merge_L76
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8) in block@8: // bool_true_L76
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8, or_result%1#1 <- block@9) in block@9: // bool_false_L76
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@10: // bool_merge_L76
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@8: // bool_true_L76
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4) in block@4: // bool_merge_L70
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5) in block@5: // or_contd_L76
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6) in block@6: // or_contd_L76
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) in block@7: // or_contd_L76
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#0 <- block@4, x#0 <- block@5, x#0 <- block@6, x#0 <- block@7) (x#2) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8) in block@8: // bool_true_L76
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) in block@9: // bool_false_L76
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@8, x#0 <- block@9) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@10: // bool_merge_L76
debug: Sealing block@11: // or_contd_L77
debug: Created Phi assignment: let y#1: bytes = undefined while trying to resolve 'y' in block@10: // bool_merge_L76
debug: Created Phi assignment: let y#2: bytes = undefined while trying to resolve 'y' in block@8: // bool_true_L76
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4) in block@4: // bool_merge_L70
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5) in block@5: // or_contd_L76
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6) in block@6: // or_contd_L76
debug: Added y#0 to Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) in block@7: // or_contd_L76
debug: Replacing trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7)
debug: Replaced trivial Phi node: let y#2: bytes = φ(y#0 <- block@4, y#0 <- block@5, y#0 <- block@6, y#0 <- block@7) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8) in block@8: // bool_true_L76
debug: Added y#0 to Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) in block@9: // bool_false_L76
debug: Replacing trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9)
debug: Replaced trivial Phi node: let y#1: bytes = φ(y#0 <- block@8, y#0 <- block@9) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@11: // or_contd_L77
debug: Sealing block@12: // and_contd_L77
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@12: // and_contd_L77
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10) in block@10: // bool_merge_L76
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) in block@11: // or_contd_L77
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#3) with x#0 in current definition for 1 blocks
debug: Terminated block@12: // and_contd_L77
debug: Sealing block@13: // or_contd_L77
debug: Created Phi assignment: let y#3: bytes = undefined while trying to resolve 'y' in block@12: // and_contd_L77
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10) in block@10: // bool_merge_L76
debug: Added y#0 to Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) in block@11: // or_contd_L77
debug: Replacing trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0
debug: Deleting Phi assignment: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11)
debug: Replaced trivial Phi node: let y#3: bytes = φ(y#0 <- block@10, y#0 <- block@11) (y#3) with y#0 in current definition for 1 blocks
debug: Terminated block@13: // or_contd_L77
debug: Sealing block@14: // bool_true_L77
debug: Terminated block@14: // bool_true_L77
debug: Sealing block@15: // bool_false_L77
debug: Terminated block@15: // bool_false_L77
debug: Sealing block@16: // bool_merge_L77
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@16: // bool_merge_L77
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14) in block@14: // bool_true_L77
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@14, and_result%0#1 <- block@15) in block@15: // bool_false_L77
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@16: // bool_merge_L77
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@14: // bool_true_L77
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12) in block@12: // and_contd_L77
debug: Added x#0 to Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0
debug: Deleting Phi assignment: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#5: uint64 = φ(x#0 <- block@12, x#0 <- block@13) (x#5) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14) in block@14: // bool_true_L77
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@15: // bool_false_L77
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11) in block@11: // or_contd_L77
debug: Added x#0 to Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0
debug: Deleting Phi assignment: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13)
debug: Replaced trivial Phi node: let x#6: uint64 = φ(x#0 <- block@11, x#0 <- block@13) (x#6) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) in block@15: // bool_false_L77
debug: Replacing trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0
debug: Deleting Phi assignment: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15)
debug: Replaced trivial Phi node: let x#4: uint64 = φ(x#0 <- block@14, x#0 <- block@15) (x#4) with x#0 in current definition for 1 blocks
debug: Terminated block@16: // bool_merge_L77
debug: Sealing block@17: // or_contd_L78
debug: Created Phi assignment: let y#4: bytes = undefined while trying to resolve 'y' in block@16: // bool_merge_L77
debug: Created Phi assignment: let y#5: bytes = undefined while trying to resolve 'y' in block@14: // bool_true_L77
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12) in block@12: // and_contd_L77
debug: Added y#0 to Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0
debug: Deleting Phi assignment: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#5: bytes = φ(y#0 <- block@12, y#0 <- block@13) (y#5) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14) in block@14: // bool_true_L77
debug: Created Phi assignment: let y#6: bytes = undefined while trying to resolve 'y' in block@15: // bool_false_L77
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11) in block@11: // or_contd_L77
debug: Added y#0 to Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0
debug: Deleting Phi assignment: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13)
debug: Replaced trivial Phi node: let y#6: bytes = φ(y#0 <- block@11, y#0 <- block@13) (y#6) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) in block@15: // bool_false_L77
debug: Replacing trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0
debug: Deleting Phi assignment: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15)
debug: Replaced trivial Phi node: let y#4: bytes = φ(y#0 <- block@14, y#0 <- block@15) (y#4) with y#0 in current definition for 1 blocks
debug: Terminated block@17: // or_contd_L78
debug: Sealing block@18: // or_contd_L78
debug: Created Phi assignment: let z#1: bytes = undefined while trying to resolve 'z' in block@16: // bool_merge_L77
debug: Created Phi assignment: let z#2: bytes = undefined while trying to resolve 'z' in block@14: // bool_true_L77
debug: Created Phi assignment: let z#3: bytes = undefined while trying to resolve 'z' in block@12: // and_contd_L77
debug: Created Phi assignment: let z#4: bytes = undefined while trying to resolve 'z' in block@10: // bool_merge_L76
debug: Created Phi assignment: let z#5: bytes = undefined while trying to resolve 'z' in block@8: // bool_true_L76
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4) in block@4: // bool_merge_L70
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5) in block@5: // or_contd_L76
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6) in block@6: // or_contd_L76
debug: Added z#0 to Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) in block@7: // or_contd_L76
debug: Replacing trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0
debug: Deleting Phi assignment: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7)
debug: Replaced trivial Phi node: let z#5: bytes = φ(z#0 <- block@4, z#0 <- block@5, z#0 <- block@6, z#0 <- block@7) (z#5) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8) in block@8: // bool_true_L76
debug: Added z#0 to Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) in block@9: // bool_false_L76
debug: Replacing trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0
debug: Deleting Phi assignment: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9)
debug: Replaced trivial Phi node: let z#4: bytes = φ(z#0 <- block@8, z#0 <- block@9) (z#4) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10) in block@10: // bool_merge_L76
debug: Added z#0 to Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) in block@11: // or_contd_L77
debug: Replacing trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0
debug: Deleting Phi assignment: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11)
debug: Replaced trivial Phi node: let z#3: bytes = φ(z#0 <- block@10, z#0 <- block@11) (z#3) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12) in block@12: // and_contd_L77
debug: Added z#0 to Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0
debug: Deleting Phi assignment: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#2: bytes = φ(z#0 <- block@12, z#0 <- block@13) (z#2) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14) in block@14: // bool_true_L77
debug: Created Phi assignment: let z#6: bytes = undefined while trying to resolve 'z' in block@15: // bool_false_L77
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11) in block@11: // or_contd_L77
debug: Added z#0 to Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) in block@13: // or_contd_L77
debug: Replacing trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0
debug: Deleting Phi assignment: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#6: bytes = φ(z#0 <- block@11, z#0 <- block@13) (z#6) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) in block@15: // bool_false_L77
debug: Replacing trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0
debug: Deleting Phi assignment: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15)
debug: Replaced trivial Phi node: let z#1: bytes = φ(z#0 <- block@14, z#0 <- block@15) (z#1) with z#0 in current definition for 1 blocks
debug: Terminated block@18: // or_contd_L78
debug: Sealing block@19: // bool_true_L78
debug: Terminated block@19: // bool_true_L78
debug: Sealing block@20: // bool_false_L78
debug: Terminated block@20: // bool_false_L78
debug: Sealing block@21: // bool_merge_L78
debug: Created Phi assignment: let or_result%2#2: bool = undefined while trying to resolve 'or_result%2' in block@21: // bool_merge_L78
debug: Added or_result%2#0 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19) in block@19: // bool_true_L78
debug: Added or_result%2#1 to Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19, or_result%2#1 <- block@20) in block@20: // bool_false_L78
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@21: // bool_merge_L78
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@19: // bool_true_L78
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16) in block@16: // bool_merge_L77
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17) in block@17: // or_contd_L78
debug: Added x#0 to Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) in block@18: // or_contd_L78
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#0 <- block@16, x#0 <- block@17, x#0 <- block@18) (x#8) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19) in block@19: // bool_true_L78
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) in block@20: // bool_false_L78
debug: Replacing trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0
debug: Deleting Phi assignment: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20)
debug: Replaced trivial Phi node: let x#7: uint64 = φ(x#0 <- block@19, x#0 <- block@20) (x#7) with x#0 in current definition for 1 blocks
debug: Terminated block@21: // bool_merge_L78
debug: Sealing block@22: // or_contd_L79
debug: Created Phi assignment: let y#7: bytes = undefined while trying to resolve 'y' in block@21: // bool_merge_L78
debug: Created Phi assignment: let y#8: bytes = undefined while trying to resolve 'y' in block@19: // bool_true_L78
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16) in block@16: // bool_merge_L77
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17) in block@17: // or_contd_L78
debug: Added y#0 to Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) in block@18: // or_contd_L78
debug: Replacing trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0
debug: Deleting Phi assignment: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18)
debug: Replaced trivial Phi node: let y#8: bytes = φ(y#0 <- block@16, y#0 <- block@17, y#0 <- block@18) (y#8) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19) in block@19: // bool_true_L78
debug: Added y#0 to Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) in block@20: // bool_false_L78
debug: Replacing trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0
debug: Deleting Phi assignment: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20)
debug: Replaced trivial Phi node: let y#7: bytes = φ(y#0 <- block@19, y#0 <- block@20) (y#7) with y#0 in current definition for 1 blocks
debug: Terminated block@22: // or_contd_L79
debug: Sealing block@23: // or_contd_L79
debug: Created Phi assignment: let z#7: bytes = undefined while trying to resolve 'z' in block@21: // bool_merge_L78
debug: Created Phi assignment: let z#8: bytes = undefined while trying to resolve 'z' in block@19: // bool_true_L78
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16) in block@16: // bool_merge_L77
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17) in block@17: // or_contd_L78
debug: Added z#0 to Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) in block@18: // or_contd_L78
debug: Replacing trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0
debug: Deleting Phi assignment: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18)
debug: Replaced trivial Phi node: let z#8: bytes = φ(z#0 <- block@16, z#0 <- block@17, z#0 <- block@18) (z#8) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19) in block@19: // bool_true_L78
debug: Added z#0 to Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) in block@20: // bool_false_L78
debug: Replacing trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0
debug: Deleting Phi assignment: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20)
debug: Replaced trivial Phi node: let z#7: bytes = φ(z#0 <- block@19, z#0 <- block@20) (z#7) with z#0 in current definition for 1 blocks
debug: Terminated block@23: // or_contd_L79
debug: Sealing block@24: // bool_true_L79
debug: Terminated block@24: // bool_true_L79
debug: Sealing block@25: // bool_false_L79
debug: Terminated block@25: // bool_false_L79
debug: Sealing block@26: // bool_merge_L79
debug: Created Phi assignment: let or_result%3#2: bool = undefined while trying to resolve 'or_result%3' in block@26: // bool_merge_L79
debug: Added or_result%3#0 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24) in block@24: // bool_true_L79
debug: Added or_result%3#1 to Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24, or_result%3#1 <- block@25) in block@25: // bool_false_L79
debug: Terminated block@26: // bool_merge_L79
debug: Sealing block@27: // ternary_true_L81
debug: Terminated block@27: // ternary_true_L81
debug: Sealing block@28: // ternary_false_L81
debug: Terminated block@28: // ternary_false_L81
debug: Sealing block@29: // ternary_merge_L81
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@29: // ternary_merge_L81
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27) in block@27: // ternary_true_L81
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@27, ternary_result%1#1 <- block@28) in block@28: // ternary_false_L81
debug: Terminated block@29: // ternary_merge_L81
debug: Sealing block@30: // ternary_true_L81
debug: Terminated block@30: // ternary_true_L81
debug: Sealing block@31: // ternary_false_L81
boolean_binary_ops/contract.py:81:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ri')))), reusing result: tmp%26#0
debug: Terminated block@31: // ternary_false_L81
debug: Sealing block@32: // ternary_merge_L81
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@32: // ternary_merge_L81
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30) in block@30: // ternary_true_L81
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30, ternary_result%0#1 <- block@31) in block@31: // ternary_false_L81
debug: Terminated block@32: // ternary_merge_L81
debug: Sealing block@33: // ternary_true_L82
debug: Terminated block@33: // ternary_true_L82
debug: Sealing block@34: // ternary_false_L82
debug: Terminated block@34: // ternary_false_L82
debug: Sealing block@35: // ternary_merge_L82
debug: Created Phi assignment: let ternary_result%3#2: bytes = undefined while trying to resolve 'ternary_result%3' in block@35: // ternary_merge_L82
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33) in block@33: // ternary_true_L82
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@33, ternary_result%3#1 <- block@34) in block@34: // ternary_false_L82
debug: Terminated block@35: // ternary_merge_L82
debug: Sealing block@36: // ternary_true_L82
debug: Terminated block@36: // ternary_true_L82
debug: Sealing block@37: // ternary_false_L82
boolean_binary_ops/contract.py:82:12 debug: encountered already materialized expression (len(reinterpret_cast<bytes>((len(SINGLE_EVAL(id=0, source='le')) == 0u) ? (SINGLE_EVAL(id=0)) : (SINGLE_EVAL(id=1, source='ri'))))), reusing result: tmp%34#0
debug: Terminated block@37: // ternary_false_L82
debug: Sealing block@38: // ternary_true_L82
debug: Terminated block@38: // ternary_true_L82
debug: Sealing block@39: // ternary_false_L82
debug: Terminated block@39: // ternary_false_L82
debug: Sealing block@40: // ternary_merge_L82
debug: Created Phi assignment: let ternary_result%4#2: bytes = undefined while trying to resolve 'ternary_result%4' in block@40: // ternary_merge_L82
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38) in block@38: // ternary_true_L82
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@38, ternary_result%4#1 <- block@39) in block@39: // ternary_false_L82
debug: Terminated block@40: // ternary_merge_L82
debug: Sealing block@41: // ternary_merge_L82
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@41: // ternary_merge_L82
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36) in block@36: // ternary_true_L82
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36, ternary_result%2#1 <- block@40) in block@40: // ternary_merge_L82
boolean_binary_ops/contract.py:85:30 debug: encountered already materialized expression (hex<"6E65766572207365656E">), reusing result: 0x6e65766572207365656e
debug: Terminated block@41: // ternary_merge_L82
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@42: // for_header_L85
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@42: // for_header_L85
debug: Terminated block@42: // for_header_L85
debug: Sealing block@43: // for_body_L86
debug: Looking for 'bytes_to_iterate' in an unsealed block creating an incomplete Phi: block@42: // for_header_L85
debug: Created Phi assignment: let bytes_to_iterate#1: bytes = undefined while trying to resolve 'bytes_to_iterate' in block@42: // for_header_L85
debug: Terminated block@43: // for_body_L86
debug: Sealing block@44: // for_footer_L85
debug: Terminated block@44: // for_footer_L85
debug: Sealing block@42: // for_header_L85
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41) in block@41: // ternary_merge_L82
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41, item_index_internal%0#2 <- block@44) in block@44: // for_footer_L85
debug: Added bytes_to_iterate#0 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41) in block@41: // ternary_merge_L82
debug: Added bytes_to_iterate#1 to Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) in block@44: // for_footer_L85
debug: Replacing trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0
debug: Deleting Phi assignment: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44)
debug: Replaced trivial Phi node: let bytes_to_iterate#1: bytes = φ(bytes_to_iterate#0 <- block@41, bytes_to_iterate#1 <- block@44) (bytes_to_iterate#1) with bytes_to_iterate#0 in current definition for 3 blocks
debug: Sealing block@45: // after_for_L85
boolean_binary_ops/contract.py:87:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
boolean_binary_ops/contract.py:88:13 debug: encountered already materialized expression (hex<"6C656674">), reusing result: 0x6c656674
debug: Terminated block@45: // after_for_L85
debug: Sealing block@46: // ternary_true_L89
debug: Terminated block@46: // ternary_true_L89
debug: Sealing block@47: // ternary_false_L89
debug: Terminated block@47: // ternary_false_L89
debug: Sealing block@48: // ternary_merge_L89
debug: Created Phi assignment: let ternary_result%5#2: bytes = undefined while trying to resolve 'ternary_result%5' in block@48: // ternary_merge_L89
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46) in block@46: // ternary_true_L89
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@46, ternary_result%5#1 <- block@47) in block@47: // ternary_false_L89
boolean_binary_ops/contract.py:91:13 debug: encountered already materialized expression (1u), reusing result: 1u
boolean_binary_ops/contract.py:92:14 debug: encountered already materialized expression (1u), reusing result: 1u
debug: Terminated block@48: // ternary_merge_L89
debug: Sealing block@0: // L95
boolean_binary_ops/contract.py:97:5 warning: assertion is always true, ignoring
boolean_binary_ops/contract.py:98:5 warning: assertion is always true, ignoring
debug: Terminated block@0: // L95
debug: Sealing block@1: // or_contd_L100
debug: Terminated block@1: // or_contd_L100
debug: Sealing block@2: // bool_true_L100
debug: Terminated block@2: // bool_true_L100
debug: Sealing block@3: // bool_false_L100
debug: Terminated block@3: // bool_false_L100
debug: Sealing block@4: // bool_merge_L100
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4: // bool_merge_L100
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2: // bool_true_L100
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3: // bool_false_L100
debug: Terminated block@4: // bool_merge_L100
debug: Sealing block@5: // or_contd_L105
debug: Terminated block@5: // or_contd_L105
debug: Sealing block@6: // bool_true_L105
debug: Terminated block@6: // bool_true_L105
debug: Sealing block@7: // bool_false_L105
debug: Terminated block@7: // bool_false_L105
debug: Sealing block@8: // bool_merge_L105
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8: // bool_merge_L105
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6: // bool_true_L105
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7: // bool_false_L105
debug: Created Phi assignment: let a#1: bool = undefined while trying to resolve 'a' in block@8: // bool_merge_L105
debug: Created Phi assignment: let a#2: bool = undefined while trying to resolve 'a' in block@6: // bool_true_L105
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4) in block@4: // bool_merge_L100
debug: Added a#0 to Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) in block@5: // or_contd_L105
debug: Replacing trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#2: bool = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6) in block@6: // bool_true_L105
debug: Added a#0 to Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) in block@7: // bool_false_L105
debug: Replacing trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7)
debug: Replaced trivial Phi node: let a#1: bool = φ(a#0 <- block@6, a#0 <- block@7) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@8: // bool_merge_L105
debug: Sealing block@9: // and_contd_L106
debug: Created Phi assignment: let b#1: bool = undefined while trying to resolve 'b' in block@8: // bool_merge_L105
debug: Created Phi assignment: let b#2: bool = undefined while trying to resolve 'b' in block@6: // bool_true_L105
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4) in block@4: // bool_merge_L100
debug: Added b#0 to Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) in block@5: // or_contd_L105
debug: Replacing trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#2: bool = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6) in block@6: // bool_true_L105
debug: Added b#0 to Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) in block@7: // bool_false_L105
debug: Replacing trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7)
debug: Replaced trivial Phi node: let b#1: bool = φ(b#0 <- block@6, b#0 <- block@7) (b#1) with b#0 in current definition for 1 blocks
debug: Terminated block@9: // and_contd_L106
debug: Sealing block@10: // and_contd_L106
debug: Created Phi assignment: let c#1: bool = undefined while trying to resolve 'c' in block@8: // bool_merge_L105
debug: Created Phi assignment: let c#2: bool = undefined while trying to resolve 'c' in block@6: // bool_true_L105
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4) in block@4: // bool_merge_L100
debug: Added c#0 to Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) in block@5: // or_contd_L105
debug: Replacing trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#2: bool = φ(c#0 <- block@4, c#0 <- block@5) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6) in block@6: // bool_true_L105
debug: Added c#0 to Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) in block@7: // bool_false_L105
debug: Replacing trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7)
debug: Replaced trivial Phi node: let c#1: bool = φ(c#0 <- block@6, c#0 <- block@7) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@10: // and_contd_L106
debug: Sealing block@11: // and_contd_L106
debug: Terminated block@11: // and_contd_L106
debug: Sealing block@12: // bool_true_L106
debug: Terminated block@12: // bool_true_L106
debug: Sealing block@13: // bool_false_L106
debug: Terminated block@13: // bool_false_L106
debug: Sealing block@14: // bool_merge_L106
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@14: // bool_merge_L106
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12) in block@12: // bool_true_L106
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@12, and_result%0#1 <- block@13) in block@13: // bool_false_L106
debug: Terminated block@14: // bool_merge_L106
debug: Sealing block@15: // if_body_L109
debug: Terminated block@15: // if_body_L109
debug: Sealing block@16: // after_if_else_L108
debug: Terminated block@16: // after_if_else_L108
debug: Sealing block@17: // if_body_L111
debug: Terminated block@17: // if_body_L111
debug: Sealing block@18: // after_if_else_L110
debug: Terminated block@18: // after_if_else_L110
debug: Sealing block@19: // or_contd_L112
debug: Terminated block@19: // or_contd_L112
debug: Sealing block@20: // if_body_L113
debug: Terminated block@20: // if_body_L113
debug: Sealing block@21: // after_if_else_L112
debug: Terminated block@21: // after_if_else_L112
debug: Sealing block@22: // or_contd_L114
debug: Terminated block@22: // or_contd_L114
debug: Sealing block@23: // if_body_L115
debug: Terminated block@23: // if_body_L115
debug: Sealing block@24: // after_if_else_L114
boolean_binary_ops/contract.py:120:22 debug: encountered already materialized expression (one), reusing result: one#0
boolean_binary_ops/contract.py:122:22 debug: encountered already materialized expression (empty_bytes), reusing result: empty_bytes#0
debug: Terminated block@24: // after_if_else_L114
debug: Sealing block@0: // L125
debug: Terminated block@0: // L125
debug: Sealing block@1: // or_contd_L128
debug: Terminated block@1: // or_contd_L128
debug: Sealing block@2: // bool_true_L128
debug: Terminated block@2: // bool_true_L128
debug: Sealing block@3: // bool_false_L128
debug: Terminated block@3: // bool_false_L128
debug: Sealing block@4: // bool_merge_L128
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4: // bool_merge_L128
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2: // bool_true_L128
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3: // bool_false_L128
debug: Terminated block@4: // bool_merge_L128
debug: Sealing block@5: // or_contd_L129
debug: Created Phi assignment: let true#1: bool = undefined while trying to resolve 'true' in block@4: // bool_merge_L128
debug: Created Phi assignment: let true#2: bool = undefined while trying to resolve 'true' in block@2: // bool_true_L128
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0) in block@0: // L125
debug: Added true#0 to Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) in block@1: // or_contd_L128
debug: Replacing trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1)
debug: Replaced trivial Phi node: let true#2: bool = φ(true#0 <- block@0, true#0 <- block@1) (true#2) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2) in block@2: // bool_true_L128
debug: Added true#0 to Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) in block@3: // bool_false_L128
debug: Replacing trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3)
debug: Replaced trivial Phi node: let true#1: bool = φ(true#0 <- block@2, true#0 <- block@3) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@5: // or_contd_L129
debug: Sealing block@6: // bool_true_L129
debug: Terminated block@6: // bool_true_L129
debug: Sealing block@7: // bool_false_L129
debug: Terminated block@7: // bool_false_L129
debug: Sealing block@8: // bool_merge_L129
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@8: // bool_merge_L129
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) in block@6: // bool_true_L129
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7) in block@7: // bool_false_L129
debug: Created Phi assignment: let false#1: bool = undefined while trying to resolve 'false' in block@8: // bool_merge_L129
debug: Created Phi assignment: let false#2: bool = undefined while trying to resolve 'false' in block@6: // bool_true_L129
debug: Created Phi assignment: let false#3: bool = undefined while trying to resolve 'false' in block@4: // bool_merge_L128
debug: Created Phi assignment: let false#4: bool = undefined while trying to resolve 'false' in block@2: // bool_true_L128
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0) in block@0: // L125
debug: Added false#0 to Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) in block@1: // or_contd_L128
debug: Replacing trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1)
debug: Replaced trivial Phi node: let false#4: bool = φ(false#0 <- block@0, false#0 <- block@1) (false#4) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2) in block@2: // bool_true_L128
debug: Added false#0 to Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) in block@3: // bool_false_L128
debug: Replacing trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3)
debug: Replaced trivial Phi node: let false#3: bool = φ(false#0 <- block@2, false#0 <- block@3) (false#3) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4) in block@4: // bool_merge_L128
debug: Added false#0 to Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // or_contd_L129
debug: Replacing trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: bool = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6) in block@6: // bool_true_L129
debug: Added false#0 to Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) in block@7: // bool_false_L129
debug: Replacing trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7)
debug: Replaced trivial Phi node: let false#1: bool = φ(false#0 <- block@6, false#0 <- block@7) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@8: // bool_merge_L129
debug: Sealing block@9: // ternary_true_L131
debug: Terminated block@9: // ternary_true_L131
debug: Sealing block@10: // ternary_false_L131
debug: Terminated block@10: // ternary_false_L131
debug: Sealing block@11: // ternary_merge_L131
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@11: // ternary_merge_L131
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9) in block@9: // ternary_true_L131
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9, ternary_result%0#1 <- block@10) in block@10: // ternary_false_L131
debug: Terminated block@11: // ternary_merge_L131
debug: Sealing block@12: // ternary_true_L133
boolean_binary_ops/contract.py:133:9 debug: encountered already materialized expression (0u), reusing result: 0u
debug: Terminated block@12: // ternary_true_L133
debug: Sealing block@13: // ternary_false_L133
debug: Created Phi assignment: let true#3: bool = undefined while trying to resolve 'true' in block@11: // ternary_merge_L131
debug: Created Phi assignment: let true#4: bool = undefined while trying to resolve 'true' in block@8: // bool_merge_L129
debug: Created Phi assignment: let true#5: bool = undefined while trying to resolve 'true' in block@6: // bool_true_L129
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4) in block@4: // bool_merge_L128
debug: Added true#0 to Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // or_contd_L129
debug: Replacing trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#5: bool = φ(true#0 <- block@4, true#0 <- block@5) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6) in block@6: // bool_true_L129
debug: Added true#0 to Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) in block@7: // bool_false_L129
debug: Replacing trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7)
debug: Replaced trivial Phi node: let true#4: bool = φ(true#0 <- block@6, true#0 <- block@7) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9) in block@9: // ternary_true_L131
debug: Added true#0 to Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) in block@10: // ternary_false_L131
debug: Replacing trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10)
debug: Replaced trivial Phi node: let true#3: bool = φ(true#0 <- block@9, true#0 <- block@10) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@13: // ternary_false_L133
debug: Sealing block@14: // ternary_merge_L133
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@14: // ternary_merge_L133
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12) in block@12: // ternary_true_L133
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12, ternary_result%1#1 <- block@13) in block@13: // ternary_false_L133
debug: Terminated block@14: // ternary_merge_L133
debug: Sealing block@0: // L6
debug: Terminated block@0: // L6
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.ir
info: optimizing test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, and_result#0
debug: Replacing {and_result%0#2} with and_result#0 made 1 modifications
debug: Found equivalence set: or_result%0#2, or_result#0
debug: Replacing {or_result%0#2} with or_result#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@11: // for_footer_L41 from goto_nth [block@12][loop_counter%1#1] else goto block@13 to goto loop_counter%1#1 ? block@13 : block@12
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@14: // for_footer_L40 from goto_nth [block@15][loop_counter%0#1] else goto block@16 to goto loop_counter%0#1 ? block@16 : block@15
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@11: // for_footer_L41 with block@10: // bool_merge_L48 in block@12: // for_header_1_L41
debug: Replaced predecessor block@11: // for_footer_L41 with block@10: // bool_merge_L48 in block@13: // after_for_L41
debug: Merged linear block@11: // for_footer_L41 into block@10: // bool_merge_L48
debug: Replaced predecessor block@14: // for_footer_L40 with block@13: // after_for_L41 in block@15: // for_header_1_L40
debug: Replaced predecessor block@14: // for_footer_L40 with block@13: // after_for_L41 in block@16: // after_for_L40
debug: Merged linear block@14: // for_footer_L40 into block@13: // after_for_L41
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: ternary_result%0#2, c#0
debug: Replacing {ternary_result%0#2} with c#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u tmp%0#0) to (! tmp%0#0)
debug: Simplified (!= appl 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u tmp%3#0) to (! tmp%3#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: or_result%0#2, ok#0
debug: Replacing {or_result%0#2} with ok#0 made 1 modifications
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: Found equivalence set: item_index_internal%0#1, idx#0
debug: Replacing {item_index_internal%0#1} with idx#0 made 4 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x) to 0u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (len 0x79) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x79) to 1u
debug: Simplified (len "z") to 1u
debug: Simplified (len "ri") to 2u
debug: Simplified (len "left") to 4u
debug: Simplified (== tmp%27#0 0u) to (! tmp%27#0)
debug: Simplified (len "le") to 2u
debug: Simplified (== tmp%32#0 0u) to (! tmp%32#0)
debug: Simplified (len "right") to 5u
debug: Simplified (len "le") to 2u
debug: Simplified (== tmp%38#0 0u) to (! tmp%38#0)
debug: Simplified (len 0x6e65766572207365656e) to 10u
debug: Simplified (== tmp%40#0 0u) to (! tmp%40#0)
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (== tmp%45#0 0u) to (! tmp%45#0)
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (select 0x7269676874 0x6c656674 tmp%51#0) to (select 0x7269676874 0x6c656674 tmp%50#0)
debug: Simplified (len "left") to 4u
debug: Simplified (== tmp%55#0 0u) to (! tmp%55#0)
debug: Simplified (== 1u 0u) to (! 1u)
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (! 1u) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Removing unused variable z#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable bytes_to_iterate#0
debug: Removing unused variable tmp%51#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%28#0 by swapping zero and non-zero targets
debug: simplified terminator of block@26: // bool_merge_L79 from goto tmp%28#0 ? block@27 : block@28 to goto tmp%27#0 ? block@28 : block@27
debug: simplified branch on !tmp%33#0 by swapping zero and non-zero targets
debug: simplified terminator of block@32: // ternary_merge_L81 from goto tmp%33#0 ? block@33 : block@34 to goto tmp%32#0 ? block@34 : block@33
debug: simplified branch on !tmp%39#0 by swapping zero and non-zero targets
debug: simplified terminator of block@37: // ternary_false_L82 from goto tmp%39#0 ? block@38 : block@39 to goto tmp%38#0 ? block@39 : block@38
debug: simplified branch on !tmp%56#0 by swapping zero and non-zero targets
debug: simplified terminator of block@45: // after_for_L85 from goto tmp%56#0 ? block@46 : block@47 to goto tmp%55#0 ? block@47 : block@46
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@44: // for_footer_L85 with block@43: // for_body_L86 in block@42: // for_header_L85
debug: Merged linear block@44: // for_footer_L85 into block@43: // for_body_L86
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: or_result%1#2, d#0
debug: Replacing {or_result%1#2} with d#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (len 0x) to 0u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 0u) to (! 1u)
debug: Simplified (len 0x) to 0u
debug: Simplified (select 0x68656c6c6f 0x tmp%16#0) to (select 0x68656c6c6f 0x tmp%15#0)
debug: Simplified (! 1u) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%3#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable one#0
debug: Removing unused variable empty_bytes#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%19#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L95 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4: // bool_merge_L100 from goto 0u ? block@6 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@8: // bool_merge_L105 from goto 1u ? block@9 : block@13 to goto block@9
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9: // and_contd_L106 from goto 1u ? block@10 : block@13 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@14: // bool_merge_L106 from goto 0u ? block@15 : block@16 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16: // after_if_else_L108 from goto 0u ? block@17 : block@18 to goto block@18
debug: inlining condition branch to err block into an assert false
debug: simplified terminator of block@18: // after_if_else_L110 from goto tmp%7#0 ? block@20 : block@19 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@19: // or_contd_L112 from goto 0u ? block@20 : block@21 to goto block@21
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21: // after_if_else_L112 from goto 0u ? block@23 : block@22 to goto block@22
debug: inlining condition branch to err block into an assert false
debug: simplified terminator of block@22: // or_contd_L114 from goto tmp%8#0 ? block@23 : block@24 to goto block@24
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // or_contd_L100 with block@0: // L95 in block@3: // bool_false_L100
debug: Replaced predecessor block@1: // or_contd_L100 with block@0: // L95 in block@2: // bool_true_L100
debug: Merged linear block@1: // or_contd_L100 into block@0: // L95
debug: Replaced predecessor block@5: // or_contd_L105 with block@4: // bool_merge_L100 in block@7: // bool_false_L105
debug: Replaced predecessor block@5: // or_contd_L105 with block@4: // bool_merge_L100 in block@6: // bool_true_L105
debug: Merged linear block@5: // or_contd_L105 into block@4: // bool_merge_L100
debug: Replaced predecessor block@9: // and_contd_L106 with block@8: // bool_merge_L105 in block@10: // and_contd_L106
debug: Merged linear block@9: // and_contd_L106 into block@8: // bool_merge_L105
debug: Replaced predecessor block@10: // and_contd_L106 with block@8: // bool_merge_L105 in block@13: // bool_false_L106
debug: Replaced predecessor block@10: // and_contd_L106 with block@8: // bool_merge_L105 in block@11: // and_contd_L106
debug: Merged linear block@10: // and_contd_L106 into block@8: // bool_merge_L105
debug: Replaced predecessor block@16: // after_if_else_L108 with block@14: // bool_merge_L106 in block@18: // after_if_else_L110
debug: Merged linear block@16: // after_if_else_L108 into block@14: // bool_merge_L106
debug: Replaced predecessor block@18: // after_if_else_L110 with block@14: // bool_merge_L106 in block@19: // or_contd_L112
debug: Merged linear block@18: // after_if_else_L110 into block@14: // bool_merge_L106
debug: Replaced predecessor block@19: // or_contd_L112 with block@14: // bool_merge_L106 in block@21: // after_if_else_L112
debug: Merged linear block@19: // or_contd_L112 into block@14: // bool_merge_L106
debug: Replaced predecessor block@21: // after_if_else_L112 with block@14: // bool_merge_L106 in block@22: // or_contd_L114
debug: Merged linear block@21: // after_if_else_L112 into block@14: // bool_merge_L106
debug: Replaced predecessor block@22: // or_contd_L114 with block@14: // bool_merge_L106 in block@24: // after_if_else_L114
debug: Merged linear block@22: // or_contd_L114 into block@14: // bool_merge_L106
debug: Merged linear block@24: // after_if_else_L114 into block@14: // bool_merge_L106
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@15: // if_body_L109, block@17: // if_body_L111, block@20: // if_body_L113, block@23: // if_body_L115
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%0#0, ternary_result%0#0
debug: Replacing {ternary_result%0#0} with awst_tmp%0#0 made 1 modifications
debug: Found equivalence set: ternary_result%0#2, y#0
debug: Replacing {ternary_result%0#2} with y#0 made 1 modifications
debug: Found equivalence set: ternary_result%1#2, z#0
debug: Replacing {ternary_result%1#2} with z#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select 0u 1u false#0) to false#0
debug: Simplified (select 0u 1u true#0) to true#0
debug: Simplified (select 0u 1u true#0) to true#0
debug: Simplified (select 0u 1u false#0) to false#0
debug: Simplified (select 0u 3u false#0) to (* false#0 3u)
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select 0u 3u true#0) to (* true#0 3u)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%6#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L125 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4: // bool_merge_L128 from goto 1u ? block@6 : block@5 to goto block@6
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // or_contd_L128 with block@0: // L125 in block@3: // bool_false_L128
debug: Replaced predecessor block@1: // or_contd_L128 with block@0: // L125 in block@2: // bool_true_L128
debug: Merged linear block@1: // or_contd_L128 into block@0: // L125
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // or_contd_L129, block@7: // bool_false_L129
debug: Removed unreachable predecessors from block@6: // bool_true_L129
debug: Removed unreachable predecessors from block@8: // bool_merge_L129
debug: Removing unreachable phi arguments: or_result%1#1 <- block@7
debug: Replacing trivial Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@6) (or_result%1#2) with or_result%1#0
debug: Deleting Phi assignment: let or_result%1#2: bool = φ(or_result%1#0 <- block@6)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%4#0: uint64 = (len item#0) with copy of existing registers (Register(source_location=INTERNAL:11:18-29, ir_type=uint64, name='tmp%0', version=0),)
debug: Found equivalence set: tmp%0#0, tmp%4#0
debug: Replacing {tmp%4#0} with tmp%0#0 made 1 modifications
debug: Replacing redundant declaration let tmp%5#0: uint64 = (+ start#1 tmp%0#0) with copy of existing registers (Register(source_location=INTERNAL:11:10-29, ir_type=uint64, name='tmp%1', version=0),)
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: Replacing {tmp%5#0} with tmp%1#0 made 1 modifications
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L60 from goto 1u ? block@1 : block@2 to goto block@1
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // ternary_true_L64 with block@0: // L60 in block@3: // ternary_merge_L64
debug: Merged linear block@1: // ternary_true_L64 into block@0: // L60
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2: // ternary_false_L64
debug: Removed unreachable predecessors from block@3: // ternary_merge_L64
debug: Removing unreachable phi arguments: ternary_result%0#1 <- block@2
debug: Replacing trivial Phi node: let c#0: uint64 = φ(ternary_result%0#0 <- block@0) (c#0) with ternary_result%0#0
debug: Deleting Phi assignment: let c#0: uint64 = φ(ternary_result%0#0 <- block@0)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 4u) to 0u
debug: Simplified (extract3 ternary_result%1#2 0u 2u) to ((extract 0 2) ternary_result%1#2)
debug: Simplified (! 2u) to 0u
debug: Simplified (! 2u) to 0u
debug: Simplified (! 10u) to 0u
debug: Simplified (! 4u) to 0u
debug: Simplified (select 0x7269676874 0x6c656674 4u) to 0x6c656674
debug: Simplified (! 4u) to 0u
debug: Simplified (select 2u 1u 0u) to 2u
debug: Simplified (select 2u 1u 1u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%21#0
debug: Removing unused variable tmp%22#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable tmp%50#0
debug: Removing unused variable tmp%55#0
debug: Removing unused variable tmp%56#0
debug: Removing unused variable tmp%58#0
debug: Removing unused variable tmp%62#0
debug: Removing unused variable tmp%65#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L68 from goto 0u ? block@2 : block@1 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@1: // or_contd_L70 from goto 1u ? block@2 : block@3 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4: // bool_merge_L70 from goto 0u ? block@8 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@5: // or_contd_L76 from goto 1u ? block@8 : block@6 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6: // or_contd_L76 from goto 1u ? block@8 : block@7 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@7: // or_contd_L76 from goto 1u ? block@8 : block@9 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10: // bool_merge_L76 from goto 0u ? block@12 : block@11 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11: // or_contd_L77 from goto 1u ? block@12 : block@15 to goto block@12
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12: // and_contd_L77 from goto 0u ? block@14 : block@13 to goto block@13
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@13: // or_contd_L77 from goto 1u ? block@14 : block@15 to goto block@14
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16: // bool_merge_L77 from goto 0u ? block@19 : block@17 to goto block@17
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@17: // or_contd_L78 from goto 1u ? block@19 : block@18 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18: // or_contd_L78 from goto 1u ? block@19 : block@20 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21: // bool_merge_L78 from goto 0u ? block@24 : block@22 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@22: // or_contd_L79 from goto 1u ? block@24 : block@23 to goto block@24
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@23: // or_contd_L79 from goto 1u ? block@24 : block@25 to goto block@24
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26: // bool_merge_L79 from goto 4u ? block@28 : block@27 to goto block@28
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32: // ternary_merge_L81 from goto 2u ? block@34 : block@33 to goto block@34
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@37: // ternary_false_L82 from goto 2u ? block@39 : block@38 to goto block@39
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@45: // after_for_L85 from goto 4u ? block@47 : block@46 to goto block@47
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // or_contd_L70 with block@0: // L68 in block@2: // bool_true_L70
debug: Merged linear block@1: // or_contd_L70 into block@0: // L68
debug: Replaced predecessor block@2: // bool_true_L70 with block@0: // L68 in block@4: // bool_merge_L70
debug: Merged linear block@2: // bool_true_L70 into block@0: // L68
debug: Replaced predecessor block@5: // or_contd_L76 with block@4: // bool_merge_L70 in block@8: // bool_true_L76
debug: Merged linear block@5: // or_contd_L76 into block@4: // bool_merge_L70
debug: Replaced predecessor block@11: // or_contd_L77 with block@10: // bool_merge_L76 in block@12: // and_contd_L77
debug: Merged linear block@11: // or_contd_L77 into block@10: // bool_merge_L76
debug: Replaced predecessor block@12: // and_contd_L77 with block@10: // bool_merge_L76 in block@13: // or_contd_L77
debug: Merged linear block@12: // and_contd_L77 into block@10: // bool_merge_L76
debug: Replaced predecessor block@13: // or_contd_L77 with block@10: // bool_merge_L76 in block@14: // bool_true_L77
debug: Merged linear block@13: // or_contd_L77 into block@10: // bool_merge_L76
debug: Replaced predecessor block@14: // bool_true_L77 with block@10: // bool_merge_L76 in block@16: // bool_merge_L77
debug: Merged linear block@14: // bool_true_L77 into block@10: // bool_merge_L76
debug: Replaced predecessor block@17: // or_contd_L78 with block@16: // bool_merge_L77 in block@19: // bool_true_L78
debug: Merged linear block@17: // or_contd_L78 into block@16: // bool_merge_L77
debug: Replaced predecessor block@22: // or_contd_L79 with block@21: // bool_merge_L78 in block@24: // bool_true_L79
debug: Merged linear block@22: // or_contd_L79 into block@21: // bool_merge_L78
debug: Replaced predecessor block@28: // ternary_false_L81 with block@26: // bool_merge_L79 in block@29: // ternary_merge_L81
debug: Merged linear block@28: // ternary_false_L81 into block@26: // bool_merge_L79
debug: Replaced predecessor block@34: // ternary_false_L82 with block@32: // ternary_merge_L81 in block@35: // ternary_merge_L82
debug: Merged linear block@34: // ternary_false_L82 into block@32: // ternary_merge_L81
debug: Replaced predecessor block@39: // ternary_false_L82 with block@37: // ternary_false_L82 in block@40: // ternary_merge_L82
debug: Merged linear block@39: // ternary_false_L82 into block@37: // ternary_false_L82
debug: Replaced predecessor block@47: // ternary_false_L89 with block@45: // after_for_L85 in block@48: // ternary_merge_L89
debug: Merged linear block@47: // ternary_false_L89 into block@45: // after_for_L85
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@6: // or_contd_L76
debug: Removed empty block: block@7: // or_contd_L76
debug: Removed empty block: block@18: // or_contd_L78
debug: Removed empty block: block@23: // or_contd_L79
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3: // bool_false_L70, block@9: // bool_false_L76, block@15: // bool_false_L77, block@20: // bool_false_L78, block@25: // bool_false_L79, block@27: // ternary_true_L81, block@33: // ternary_true_L82, block@38: // ternary_true_L82, block@46: // ternary_true_L89
debug: Removed unreachable predecessors from block@4: // bool_merge_L70
debug: Removed unreachable predecessors from block@10: // bool_merge_L76
debug: Removed unreachable predecessors from block@16: // bool_merge_L77
debug: Removed unreachable predecessors from block@21: // bool_merge_L78
debug: Removed unreachable predecessors from block@26: // bool_merge_L79
debug: Removed unreachable predecessors from block@29: // ternary_merge_L81
debug: Removed unreachable predecessors from block@35: // ternary_merge_L82
debug: Removed unreachable predecessors from block@40: // ternary_merge_L82
debug: Removed unreachable predecessors from block@48: // ternary_merge_L89
debug: Removing unreachable phi arguments: or_result%0#1 <- block@3
debug: Replacing trivial Phi node: let ok#0: bool = φ(or_result%0#0 <- block@0) (ok#0) with or_result%0#0
debug: Deleting Phi assignment: let ok#0: bool = φ(or_result%0#0 <- block@0)
debug: Removing unreachable phi arguments: or_result%1#1 <- block@9
debug: Replacing trivial Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@8) (or_result%1#2) with or_result%1#0
debug: Deleting Phi assignment: let or_result%1#2: bool = φ(or_result%1#0 <- block@8)
debug: Removing unreachable phi arguments: and_result%0#1 <- block@15
debug: Replacing trivial Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@10) (and_result%0#2) with and_result%0#0
debug: Deleting Phi assignment: let and_result%0#2: bool = φ(and_result%0#0 <- block@10)
debug: Removing unreachable phi arguments: or_result%2#1 <- block@20
debug: Replacing trivial Phi node: let or_result%2#2: bool = φ(or_result%2#0 <- block@19) (or_result%2#2) with or_result%2#0
debug: Deleting Phi assignment: let or_result%2#2: bool = φ(or_result%2#0 <- block@19)
debug: Removing unreachable phi arguments: or_result%3#1 <- block@25
debug: Replacing trivial Phi node: let or_result%3#2: bool = φ(or_result%3#0 <- block@24) (or_result%3#2) with or_result%3#0
debug: Deleting Phi assignment: let or_result%3#2: bool = φ(or_result%3#0 <- block@24)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@27
debug: Replacing trivial Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@26) (ternary_result%1#2) with ternary_result%1#1
debug: Deleting Phi assignment: let ternary_result%1#2: bytes = φ(ternary_result%1#1 <- block@26)
debug: Removing unreachable phi arguments: ternary_result%3#0 <- block@33
debug: Replacing trivial Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@32) (ternary_result%3#2) with ternary_result%3#1
debug: Deleting Phi assignment: let ternary_result%3#2: bytes = φ(ternary_result%3#1 <- block@32)
debug: Removing unreachable phi arguments: ternary_result%4#0 <- block@38
debug: Replacing trivial Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@37) (ternary_result%4#2) with ternary_result%4#1
debug: Deleting Phi assignment: let ternary_result%4#2: bytes = φ(ternary_result%4#1 <- block@37)
debug: Removing unreachable phi arguments: ternary_result%5#0 <- block@46
debug: Replacing trivial Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#1 <- block@45) (ternary_result%5#2) with ternary_result%5#1
debug: Deleting Phi assignment: let ternary_result%5#2: bytes = φ(ternary_result%5#1 <- block@45)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (select 4u 1u 0u) to 4u
debug: Simplified (select 0x68656c6c6f 0x 0u) to 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%15#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L95 from goto 3u ? block@2 : block@3 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@4: // bool_merge_L100 from goto 3u ? block@6 : block@7 to goto block@6
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // bool_true_L100 with block@0: // L95 in block@4: // bool_merge_L100
debug: Merged linear block@2: // bool_true_L100 into block@0: // L95
debug: Replaced predecessor block@6: // bool_true_L105 with block@4: // bool_merge_L100 in block@8: // bool_merge_L105
debug: Merged linear block@6: // bool_true_L105 into block@4: // bool_merge_L100
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3: // bool_false_L100, block@7: // bool_false_L105
debug: Removed unreachable predecessors from block@4: // bool_merge_L100
debug: Removed unreachable predecessors from block@8: // bool_merge_L105
debug: Removing unreachable phi arguments: or_result%0#1 <- block@3
debug: Replacing trivial Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@0) (or_result%0#2) with or_result%0#0
debug: Deleting Phi assignment: let or_result%0#2: bool = φ(or_result%0#0 <- block@0)
debug: Removing unreachable phi arguments: or_result%1#1 <- block@7
debug: Replacing trivial Phi node: let d#0: bool = φ(or_result%1#0 <- block@4) (d#0) with or_result%1#0
debug: Deleting Phi assignment: let d#0: bool = φ(or_result%1#0 <- block@4)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: false#0, tmp%0#0, tmp%4#0
debug: Replacing {tmp%0#0, tmp%4#0} with false#0 made 2 modifications
debug: Found equivalence set: true#0, tmp%2#0
debug: Replacing {tmp%2#0} with true#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%1#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11: // ternary_merge_L131 from goto 0u ? block@12 : block@13 to goto block@13
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@6: // bool_true_L129 with block@4: // bool_merge_L128 in block@8: // bool_merge_L129
debug: Merged linear block@6: // bool_true_L129 into block@4: // bool_merge_L128
debug: Replaced predecessor block@8: // bool_merge_L129 with block@4: // bool_merge_L128 in block@10: // ternary_false_L131
debug: Replaced predecessor block@8: // bool_merge_L129 with block@4: // bool_merge_L128 in block@9: // ternary_true_L131
debug: Merged linear block@8: // bool_merge_L129 into block@4: // bool_merge_L128
debug: Replaced predecessor block@13: // ternary_false_L133 with block@11: // ternary_merge_L131 in block@14: // ternary_merge_L133
debug: Merged linear block@13: // ternary_false_L133 into block@11: // ternary_merge_L131
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@12: // ternary_true_L133
debug: Removed unreachable predecessors from block@14: // ternary_merge_L133
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@12
debug: Replacing trivial Phi node: let z#0: uint64 = φ(ternary_result%1#1 <- block@11) (z#0) with ternary_result%1#1
debug: Deleting Phi assignment: let z#0: uint64 = φ(ternary_result%1#1 <- block@11)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%5#0: bool = (|| false#0 1u) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:127:11-35, ir_type=bool, name='tmp%1', version=0),)
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: Replacing {tmp%5#0} with tmp%1#0 made 1 modifications
debug: Removing redundant assert of tmp%1#0
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== appl appl) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#0
debug: Removing unused variable ternary_result%0#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@3: // ternary_merge_L64 into block@0: // L60
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len "right") to 5u
debug: Simplified ((extract 0 2) "right") to "ri"
debug: Simplified (len "ri") to 2u
debug: Simplified (select 0x616263 0x6e65766572207365656e 0u) to 0x616263
debug: Simplified (select 0x7269676874 0x6c656674 0u) to 0x7269676874
debug: Simplified (len 0x6c656674) to 4u
debug: Simplified (+ 2u 3u) to 5u
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%0#0
debug: Removing unused variable or_result%1#0
debug: Removing unused variable and_result%0#0
debug: Removing unused variable or_result%2#0
debug: Removing unused variable or_result%3#0
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable ternary_result%3#1
debug: Removing unused variable ternary_result%4#1
debug: Removing unused variable tmp%41#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%52#0
debug: Removing unused variable ternary_result%5#1
debug: Removing unused variable tmp%59#0
debug: Removing unused variable tmp%63#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // bool_merge_L70 with block@0: // L68 in block@8: // bool_true_L76
debug: Merged linear block@4: // bool_merge_L70 into block@0: // L68
debug: Replaced predecessor block@8: // bool_true_L76 with block@0: // L68 in block@10: // bool_merge_L76
debug: Merged linear block@8: // bool_true_L76 into block@0: // L68
debug: Replaced predecessor block@10: // bool_merge_L76 with block@0: // L68 in block@16: // bool_merge_L77
debug: Merged linear block@10: // bool_merge_L76 into block@0: // L68
debug: Replaced predecessor block@16: // bool_merge_L77 with block@0: // L68 in block@19: // bool_true_L78
debug: Merged linear block@16: // bool_merge_L77 into block@0: // L68
debug: Replaced predecessor block@19: // bool_true_L78 with block@0: // L68 in block@21: // bool_merge_L78
debug: Merged linear block@19: // bool_true_L78 into block@0: // L68
debug: Replaced predecessor block@21: // bool_merge_L78 with block@0: // L68 in block@24: // bool_true_L79
debug: Merged linear block@21: // bool_merge_L78 into block@0: // L68
debug: Replaced predecessor block@24: // bool_true_L79 with block@0: // L68 in block@26: // bool_merge_L79
debug: Merged linear block@24: // bool_true_L79 into block@0: // L68
debug: Replaced predecessor block@26: // bool_merge_L79 with block@0: // L68 in block@29: // ternary_merge_L81
debug: Merged linear block@26: // bool_merge_L79 into block@0: // L68
debug: Replaced predecessor block@29: // ternary_merge_L81 with block@0: // L68 in block@31: // ternary_false_L81
debug: Replaced predecessor block@29: // ternary_merge_L81 with block@0: // L68 in block@30: // ternary_true_L81
debug: Merged linear block@29: // ternary_merge_L81 into block@0: // L68
debug: Replaced predecessor block@35: // ternary_merge_L82 with block@32: // ternary_merge_L81 in block@37: // ternary_false_L82
debug: Replaced predecessor block@35: // ternary_merge_L82 with block@32: // ternary_merge_L81 in block@36: // ternary_true_L82
debug: Merged linear block@35: // ternary_merge_L82 into block@32: // ternary_merge_L81
debug: Replaced predecessor block@40: // ternary_merge_L82 with block@37: // ternary_false_L82 in block@41: // ternary_merge_L82
debug: Merged linear block@40: // ternary_merge_L82 into block@37: // ternary_false_L82
debug: Merged linear block@48: // ternary_merge_L89 into block@45: // after_for_L85
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable or_result%0#0
debug: Removing unused variable c#0
debug: Removing unused variable or_result%1#0
debug: Removing unused variable not%tmp%7#0
debug: Removing unused variable not%tmp%8#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%17#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@8: // bool_merge_L105 from goto 1u ? block@11 : block@13 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11: // and_contd_L106 from goto 1u ? block@12 : block@13 to goto block@12
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // bool_merge_L100 with block@0: // L95 in block@8: // bool_merge_L105
debug: Merged linear block@4: // bool_merge_L100 into block@0: // L95
debug: Replaced predecessor block@8: // bool_merge_L105 with block@0: // L95 in block@11: // and_contd_L106
debug: Merged linear block@8: // bool_merge_L105 into block@0: // L95
debug: Replaced predecessor block@11: // and_contd_L106 with block@0: // L95 in block@12: // bool_true_L106
debug: Merged linear block@11: // and_contd_L106 into block@0: // L95
debug: Replaced predecessor block@12: // bool_true_L106 with block@0: // L95 in block@14: // bool_merge_L106
debug: Merged linear block@12: // bool_true_L106 into block@0: // L95
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@13: // bool_false_L106
debug: Removed unreachable predecessors from block@14: // bool_merge_L106
debug: Removing unreachable phi arguments: and_result%0#1 <- block@13
debug: Replacing trivial Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@0) (and_result%0#2) with and_result%0#0
debug: Deleting Phi assignment: let and_result%0#2: bool = φ(and_result%0#0 <- block@0)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@14: // ternary_merge_L133 into block@11: // ternary_merge_L131
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (> 2u 5u) to 0u
debug: Simplified (== "ri" "ri") to 1u
debug: Simplified (> 2u 5u) to 0u
debug: Simplified (extract3 "right" 0u 2u) to "ri"
debug: Simplified (len 0x616263) to 3u
debug: Simplified ((extract 1 1) 0x7269676874) to 0x69
debug: Simplified (>= 0u 4u) to 0u
debug: Simplified (select 0u 4u is_out_of_bounds%0#0) to (* is_out_of_bounds%0#0 4u)
debug: Simplified (>= 2u 4u) to 0u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (== 18446744073709551614u 18446744073709551614u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%42#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable length%0#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%64#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%43#0: bytes = (extract3 0x616263 idx#0 1u) with copy of existing registers (Register(source_location=boolean_binary_ops/contract.py:85:13-14, ir_type=bytes, name='b', version=0),)
debug: Found equivalence set: b#0, tmp%43#0
debug: Replacing {tmp%43#0} with b#0 made 1 modifications
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable and_result%0#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@14: // bool_merge_L106 into block@0: // L95
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "ri" "ri") to 1u
debug: Simplified (== b#0 b#0) to 1u
debug: Simplified (== 0x69 0x69) to 1u
debug: Simplified (* 0u 4u) to 0u
debug: Simplified (select 2u 4u 0u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%37#0
debug: Removing unused variable bytes_length%0#0
debug: Removing unused variable b#0
debug: Removing unused variable tmp%48#0
debug: Removing unused variable is_out_of_bounds%0#0
debug: Removing unused variable is_out_of_bounds%1#0
debug: Removing unused variable tmp%61#0
debug: Removing unused variable tmp%66#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L68 from goto 0u ? block@30 : block@31 to goto block@31
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@32: // ternary_merge_L81 from goto 0u ? block@36 : block@37 to goto block@37
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@31: // ternary_false_L81 with block@0: // L68 in block@32: // ternary_merge_L81
debug: Merged linear block@31: // ternary_false_L81 into block@0: // L68
debug: Replaced predecessor block@37: // ternary_false_L82 with block@32: // ternary_merge_L81 in block@41: // ternary_merge_L82
debug: Merged linear block@37: // ternary_false_L82 into block@32: // ternary_merge_L81
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@30: // ternary_true_L81, block@36: // ternary_true_L82
debug: Removed unreachable predecessors from block@32: // ternary_merge_L81
debug: Removed unreachable predecessors from block@41: // ternary_merge_L82
debug: Removing unreachable phi arguments: ternary_result%0#0 <- block@30
debug: Replacing trivial Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#1 <- block@0) (ternary_result%0#2) with ternary_result%0#1
debug: Deleting Phi assignment: let ternary_result%0#2: bool = φ(ternary_result%0#1 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%2#0 <- block@36
debug: Replacing trivial Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@32) (ternary_result%2#2) with ternary_result%2#1
debug: Deleting Phi assignment: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@32)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (substring3 0x6c656674 0u 2u) to 0x6c65
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable ternary_result%2#1
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%49#0
debug: Removing unused variable bounded_index%0#0
debug: Removing unused variable bounded_index%1#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@32: // ternary_merge_L81 with block@0: // L68 in block@41: // ternary_merge_L82
debug: Merged linear block@32: // ternary_merge_L81 into block@0: // L68
debug: Replaced predecessor block@41: // ternary_merge_L82 with block@0: // L68 in block@42: // for_header_L85
debug: Merged linear block@41: // ternary_merge_L82 into block@0: // L68
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0x6c65 0x6c65) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%53#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_7.ir
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%54#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_8.ir
debug: Begin optimization pass 9/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify bitlen of 4
debug: Don't know how to simplify bitlen of 0x68656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@9: // ternary_true_L131 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine _puya_lib.bytes_.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 9, ending loop
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Removing Phis from test_cases.boolean_binary_ops.contract.log_and_return
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Removing Phis from _puya_lib.bytes_.is_substring
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#5, loop_counter%0#1, loop_counter%0#2]
debug: Coalescing lhs#0 with [lhs#10, lhs#6, lhs#7]
debug: Coalescing loop_counter%1#0 with [loop_counter%1#5, loop_counter%1#1, loop_counter%1#2]
debug: Coalescing rhs#0 with [rhs#9, rhs#1, rhs#6]
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing and_result#0 with [and_result#1]
debug: Coalescing or_result%0#0 with [or_result%0#1]
debug: Coalescing or_result#0 with [or_result#1]
debug: Coalescing resulted in 48 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.bool_to_bytes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.log_and_return using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#2]
debug: Coalescing idx#0 with [idx#1]
debug: Coalescing resulted in 5 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_literal_conditionals using strategy RootOperandGrouping
debug: Coalescing or_result%0#0 with [or_result%0#5, or_result%0#1, or_result%0#2]
debug: Coalescing y#0 with [y#1]
debug: Coalescing resulted in 10 replacement/s
debug: Coalescing local variables in _puya_lib.bytes_.is_substring using strategy RootOperandGrouping
debug: Coalescing start#0 with [start#5, start#1, start#2]
debug: Coalescing resulted in 9 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.log_and_return
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Sequentializing parallel copies in _puya_lib.bytes_.is_substring
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.destructured.ir
debug: Inserted test_boolean_binary_ops_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[9]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[14]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[16]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[18]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[25]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[27]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[32]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[34]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[36]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[38]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[43]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[45]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[50]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[52]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[57]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[59]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[64]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[66]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_boolean_binary_ops_block@0.ops[68]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_boolean_binary_ops_block@0.ops[70]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[6]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[8]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[26]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[15]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[20]: 'l-store-copy and_msg#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[23]: 'v-load and_msg#0' with 'l-load and_msg#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[25]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[12]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[1]: 'l-store-copy lhs#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[29]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[7]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[9]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[6]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@4.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@4.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@5.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@5.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[7]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[9]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[17]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[19]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[37]: 'l-store-copy tmp%15#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[39]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[3]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[6]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[14]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[17]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[27]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[30]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[32]: 'l-store-copy or_msg#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[35]: 'v-load or_msg#0' with 'l-load or_msg#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[37]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[40]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[24]: 'l-store-copy tmp%12#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[30]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[1]: 'l-store-copy lhs#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[13]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[3]: 'l-store-copy rhs#0 2'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[28]: 'v-load rhs#0' with 'l-load rhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[15]: 'l-store-copy lhs#0 1'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[43]: 'v-load lhs#0' with 'l-load lhs#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[7]: 'l-store-copy tmp%17#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[9]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[3]: 'l-store-copy tmp%16#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[6]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@8.ops[1]: 'l-store-copy or_result%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@8.ops[3]: 'v-load or_result%0#0' with 'l-load or_result%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@9.ops[1]: 'l-store-copy or_result%0#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@9.ops[3]: 'v-load or_result%0#0' with 'l-load or_result%0#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[7]: 'l-store-copy tmp%19#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[9]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[3]: 'l-store-copy tmp%18#0 0'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[6]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted bool_to_bytes_block@0.ops[4]: 'l-store-copy tmp%0#0 0'
debug: Replaced bool_to_bytes_block@0.ops[6]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_union_boolean_binary_ops_block@0.ops[1]: 'l-store-copy item_index_internal%0#0 0'
debug: Replaced test_union_boolean_binary_ops_block@0.ops[3]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted test_union_boolean_binary_ops_for_header@42.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced test_union_boolean_binary_ops_for_header@42.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted test_union_boolean_binary_ops_for_body@43.ops[3]: 'l-store-copy item_index_internal%0#0 0'
debug: Replaced test_union_boolean_binary_ops_for_body@43.ops[5]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted test_union_boolean_binary_ops_after_for@45.ops[3]: 'l-store-copy tmp%57#0 0'
debug: Replaced test_union_boolean_binary_ops_after_for@45.ops[5]: 'v-load tmp%57#0' with 'l-load tmp%57#0'
debug: Inserted test_literal_boolean_binary_ops_block@0.ops[2]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_literal_boolean_binary_ops_block@0.ops[4]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_literal_boolean_binary_ops_block@0.ops[7]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_literal_boolean_binary_ops_block@0.ops[9]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_literal_boolean_binary_ops_block@0.ops[13]: 'l-store-copy tmp%18#0 0'
debug: Replaced test_literal_boolean_binary_ops_block@0.ops[15]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted test_literal_conditionals_block@0.ops[3]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_literal_conditionals_block@0.ops[5]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_literal_conditionals_bool_merge@4.ops[5]: 'l-store-copy awst_tmp%0#0 0'
debug: Replaced test_literal_conditionals_bool_merge@4.ops[7]: 'v-load awst_tmp%0#0' with 'l-load awst_tmp%0#0'
debug: Inserted test_literal_conditionals_ternary_false@10.ops[1]: 'l-store-copy ternary_result%0#1 0'
debug: Replaced test_literal_conditionals_ternary_false@10.ops[3]: 'v-load ternary_result%0#1' with 'l-load ternary_result%0#1'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[3]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[5]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[10]: 'l-store-copy ternary_result%1#1 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[12]: 'v-load ternary_result%1#1' with 'l-load ternary_result%1#1'
debug: Inserted test_literal_conditionals_ternary_merge@11.ops[15]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_literal_conditionals_ternary_merge@11.ops[17]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted is_substring_while_top@1.ops[13]: 'l-store-copy tmp%3#0 0'
debug: Replaced is_substring_while_top@1.ops[15]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted is_substring_while_top@1.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced is_substring_while_top@1.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted is_substring_while_top@1.ops[10]: 'l-store-copy tmp%2#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted is_substring_while_top@1.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced is_substring_while_top@1.ops[13]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted is_substring_while_body@2.ops[8]: 'l-store-copy tmp%7#0 0'
debug: Replaced is_substring_while_body@2.ops[10]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted is_substring_while_body@2.ops[4]: 'l-store-copy tmp%6#0 0'
debug: Replaced is_substring_while_body@2.ops[7]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Found 8 edge set/s for test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Allocated 2 variable/s to x-stack: and_result#0, or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@4 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@5 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@8 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@9 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result#0
debug: Found 2 edge set/s for test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops
debug: Found 4 edge set/s for test_cases.boolean_binary_ops.contract.test_literal_conditionals
debug: Allocated 2 variable/s to x-stack: or_result%0#0, y#0
debug: shared x-stack for test_literal_conditionals_bool_true@2 -> test_literal_conditionals_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_conditionals_bool_false@3 -> test_literal_conditionals_bool_merge@4: or_result%0#0
debug: shared x-stack for test_literal_conditionals_ternary_true@9 -> test_literal_conditionals_ternary_merge@11: y#0
debug: shared x-stack for test_literal_conditionals_ternary_false@10 -> test_literal_conditionals_ternary_merge@11: y#0
debug: Found 3 edge set/s for _puya_lib.bytes_.is_substring
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack entry: ['and_msg#0', 'or_msg#0', 'loop_counter%1#0', 'rhs#0']
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack on first store: ['loop_counter%0#0', 'lhs#0']
debug: test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops f-stack entry: []
debug: test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops f-stack on first store: ['idx#0']
debug: test_cases.boolean_binary_ops.contract.test_literal_conditionals f-stack entry: ['awst_tmp%0#0']
debug: test_cases.boolean_binary_ops.contract.test_literal_conditionals f-stack on first store: []
debug: _puya_lib.bytes_.is_substring f-stack entry: ['tmp%1#0']
debug: _puya_lib.bytes_.is_substring f-stack on first store: ['start#0']
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.bin
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.bin
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.puya.map
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.puya.map