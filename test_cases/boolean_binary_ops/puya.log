debug: PuyaPyOptions(output_teal=True, output_arc32=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['boolean_binary_ops'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing boolean_binary_ops/out/module.awst
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@2: // while_body_L21
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L21
debug: Sealing block@3: // switch_case_0_L28
debug: Terminated block@3: // switch_case_0_L28
debug: Sealing block@4: // switch_case_1_L30
debug: Terminated block@4: // switch_case_1_L30
debug: Sealing block@5: // switch_case_default_L26
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Sealing block@1: // abi_routing_L4
debug: Terminated block@1: // abi_routing_L4
debug: Sealing block@2: // bare_routing_L4
debug: Terminated block@2: // bare_routing_L4
debug: Sealing block@3: // after_if_else_L4
debug: Terminated block@3: // after_if_else_L4
debug: Sealing block@0: // L16
debug: Terminated block@0: // L16
debug: Sealing block@0: // L34
debug: Terminated block@0: // L34
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L37
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L37
debug: Terminated block@1: // for_body_L37
debug: Looking for 'loop_counter%1' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let loop_counter%1#1: uint64 = undefined while trying to resolve 'loop_counter%1' in block@2: // for_body_L38
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let lhs#1: bool = undefined while trying to resolve 'lhs' in block@2: // for_body_L38
debug: Looking for 'rhs' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let rhs#1: bool = undefined while trying to resolve 'rhs' in block@2: // for_body_L38
debug: Terminated block@2: // for_body_L38
debug: Sealing block@3: // and_contd_L39
debug: Terminated block@3: // and_contd_L39
debug: Sealing block@4: // bool_true_L39
debug: Terminated block@4: // bool_true_L39
debug: Sealing block@5: // bool_false_L39
debug: Terminated block@5: // bool_false_L39
debug: Sealing block@6: // bool_merge_L39
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@6: // bool_merge_L39
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4) in block@4: // bool_true_L39
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5) in block@5: // bool_false_L39
debug: Created Phi assignment: let lhs#2: bool = undefined while trying to resolve 'lhs' in block@6: // bool_merge_L39
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4) in block@4: // bool_true_L39
debug: Created Phi assignment: let lhs#3: bool = undefined while trying to resolve 'lhs' in block@5: // bool_false_L39
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2) in block@2: // for_body_L38
debug: Added lhs#1 to Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) in block@3: // and_contd_L39
debug: Replacing trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1
debug: Deleting Phi assignment: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3)
debug: Replaced trivial Phi node: let lhs#3: bool = φ(lhs#1 <- block@2, lhs#1 <- block@3) (lhs#3) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) in block@5: // bool_false_L39
debug: Replacing trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1
debug: Deleting Phi assignment: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5)
debug: Replaced trivial Phi node: let lhs#2: bool = φ(lhs#1 <- block@4, lhs#1 <- block@5) (lhs#2) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#2: bool = undefined while trying to resolve 'rhs' in block@6: // bool_merge_L39
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4) in block@4: // bool_true_L39
debug: Created Phi assignment: let rhs#3: bool = undefined while trying to resolve 'rhs' in block@5: // bool_false_L39
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2) in block@2: // for_body_L38
debug: Added rhs#1 to Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) in block@3: // and_contd_L39
debug: Replacing trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1
debug: Deleting Phi assignment: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3)
debug: Replaced trivial Phi node: let rhs#3: bool = φ(rhs#1 <- block@2, rhs#1 <- block@3) (rhs#3) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) in block@5: // bool_false_L39
debug: Replacing trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1
debug: Deleting Phi assignment: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5)
debug: Replaced trivial Phi node: let rhs#2: bool = φ(rhs#1 <- block@4, rhs#1 <- block@5) (rhs#2) with rhs#1 in current definition for 1 blocks
debug: Terminated block@6: // bool_merge_L39
debug: Sealing block@7: // or_contd_L44
debug: Terminated block@7: // or_contd_L44
debug: Sealing block@8: // bool_true_L44
debug: Terminated block@8: // bool_true_L44
debug: Sealing block@9: // bool_false_L44
debug: Terminated block@9: // bool_false_L44
debug: Sealing block@10: // bool_merge_L44
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@10: // bool_merge_L44
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8) in block@8: // bool_true_L44
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9) in block@9: // bool_false_L44
debug: Created Phi assignment: let lhs#4: bool = undefined while trying to resolve 'lhs' in block@10: // bool_merge_L44
debug: Created Phi assignment: let lhs#5: bool = undefined while trying to resolve 'lhs' in block@8: // bool_true_L44
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6) in block@6: // bool_merge_L39
debug: Added lhs#1 to Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) in block@7: // or_contd_L44
debug: Replacing trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1
debug: Deleting Phi assignment: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7)
debug: Replaced trivial Phi node: let lhs#5: bool = φ(lhs#1 <- block@6, lhs#1 <- block@7) (lhs#5) with lhs#1 in current definition for 1 blocks
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8) in block@8: // bool_true_L44
debug: Added lhs#1 to Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) in block@9: // bool_false_L44
debug: Replacing trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1
debug: Deleting Phi assignment: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9)
debug: Replaced trivial Phi node: let lhs#4: bool = φ(lhs#1 <- block@8, lhs#1 <- block@9) (lhs#4) with lhs#1 in current definition for 1 blocks
debug: Created Phi assignment: let rhs#4: bool = undefined while trying to resolve 'rhs' in block@10: // bool_merge_L44
debug: Created Phi assignment: let rhs#5: bool = undefined while trying to resolve 'rhs' in block@8: // bool_true_L44
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6) in block@6: // bool_merge_L39
debug: Added rhs#1 to Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) in block@7: // or_contd_L44
debug: Replacing trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1
debug: Deleting Phi assignment: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7)
debug: Replaced trivial Phi node: let rhs#5: bool = φ(rhs#1 <- block@6, rhs#1 <- block@7) (rhs#5) with rhs#1 in current definition for 1 blocks
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8) in block@8: // bool_true_L44
debug: Added rhs#1 to Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) in block@9: // bool_false_L44
debug: Replacing trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1
debug: Deleting Phi assignment: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9)
debug: Replaced trivial Phi node: let rhs#4: bool = φ(rhs#1 <- block@8, rhs#1 <- block@9) (rhs#4) with rhs#1 in current definition for 1 blocks
debug: Terminated block@10: // bool_merge_L44
debug: Sealing block@11: // for_footer_L37
debug: Terminated block@11: // for_footer_L37
debug: Sealing block@12: // for_header_1_L37
debug: Terminated block@12: // for_header_1_L37
debug: Sealing block@2: // for_body_L38
debug: Added loop_counter%1#0 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1) in block@1: // for_body_L37
debug: Added loop_counter%1#2 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12) in block@12: // for_header_1_L37
debug: Looking for 'lhs' in an unsealed block creating an incomplete Phi: block@1: // for_body_L37
debug: Created Phi assignment: let lhs#6: bool = undefined while trying to resolve 'lhs' in block@1: // for_body_L37
debug: Added lhs#6 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1) in block@1: // for_body_L37
debug: Added lhs#1 to Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) in block@12: // for_header_1_L37
debug: Replacing trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6
debug: Deleting Phi assignment: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12)
debug: Replaced trivial Phi node: let lhs#1: bool = φ(lhs#6 <- block@1, lhs#1 <- block@12) (lhs#1) with lhs#6 in current definition for 11 blocks
debug: Added rhs#0 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1) in block@1: // for_body_L37
debug: Added rhs#6 to Phi node: let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12) in block@12: // for_header_1_L37
debug: Sealing block@13: // after_for_L37
debug: Terminated block@13: // after_for_L37
debug: Sealing block@14: // for_footer_L36
debug: Terminated block@14: // for_footer_L36
debug: Sealing block@15: // for_header_1_L36
debug: Terminated block@15: // for_header_1_L36
debug: Sealing block@1: // for_body_L37
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L34
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15) in block@15: // for_header_1_L36
debug: Added lhs#0 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0) in block@0: // L34
debug: Added lhs#7 to Phi node: let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15) in block@15: // for_header_1_L36
debug: Sealing block@16: // after_for_L36
debug: Terminated block@16: // after_for_L36
debug: Sealing block@0: // L29
debug: Terminated block@0: // L29
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Sealing block@0: // L56
debug: Terminated block@0: // L56
debug: Sealing block@1: // ternary_true_L60
debug: Terminated block@1: // ternary_true_L60
debug: Sealing block@2: // ternary_false_L60
debug: Terminated block@2: // ternary_false_L60
debug: Sealing block@3: // ternary_merge_L60
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L60
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L60
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L60
debug: Terminated block@3: // ternary_merge_L60
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.ir
info: optimizing test_cases.boolean_binary_ops.contract.BooleanBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, and_result#0
debug: Replacing {and_result%0#2} with and_result#0 made 1 modifications
debug: Found equivalence set: or_result%0#2, or_result#0
debug: Replacing {or_result%0#2} with or_result#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@11: // for_footer_L37 from goto_nth [block@12][loop_counter%1#1] else goto block@13 to goto loop_counter%1#1 ? block@13 : block@12
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@14: // for_footer_L36 from goto_nth [block@15][loop_counter%0#1] else goto block@16 to goto loop_counter%0#1 ? block@16 : block@15
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@11: // for_footer_L37 with block@10: // bool_merge_L44 in block@12: // for_header_1_L37
debug: Replaced predecessor block@11: // for_footer_L37 with block@10: // bool_merge_L44 in block@13: // after_for_L37
debug: Merged linear block@11: // for_footer_L37 into block@10: // bool_merge_L44
debug: Replaced predecessor block@14: // for_footer_L36 with block@13: // after_for_L37 in block@15: // for_header_1_L36
debug: Replaced predecessor block@14: // for_footer_L36 with block@13: // after_for_L37 in block@16: // after_for_L36
debug: Merged linear block@14: // for_footer_L36 into block@13: // after_for_L37
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: ternary_result%0#2, c#0
debug: Replacing {ternary_result%0#2} with c#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u tmp%0#0) to (! tmp%0#0)
debug: Simplified (!= appl 0u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (select OptIn 0u tmp%3#0) to (! tmp%3#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L56 from goto 1u ? block@1 : block@2 to goto block@1
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // ternary_true_L60 with block@0: // L56 in block@3: // ternary_merge_L60
debug: Merged linear block@1: // ternary_true_L60 into block@0: // L56
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2: // ternary_false_L60
debug: Removed unreachable predecessors from block@3: // ternary_merge_L60
debug: Removing unreachable phi arguments: ternary_result%0#1 <- block@2
debug: Replacing trivial Phi node: let c#0: uint64 = φ(ternary_result%0#0 <- block@0) (c#0) with ternary_result%0#0
debug: Deleting Phi assignment: let c#0: uint64 = φ(ternary_result%0#0 <- block@0)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== appl appl) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable b#0
debug: Removing unused variable ternary_result%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@3: // ternary_merge_L60 into block@0: // L56
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.type_coercion
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.log_and_return
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 6, ending loop
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Removing Phis from test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Removing Phis from test_cases.boolean_binary_ops.contract.log_and_return
debug: Removing Phis from test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#5, loop_counter%0#1, loop_counter%0#2]
debug: Coalescing lhs#0 with [lhs#10, lhs#6, lhs#7]
debug: Coalescing loop_counter%1#0 with [loop_counter%1#5, loop_counter%1#1, loop_counter%1#2]
debug: Coalescing rhs#0 with [rhs#9, rhs#1, rhs#6]
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing and_result#0 with [and_result#1]
debug: Coalescing or_result%0#0 with [or_result%0#1]
debug: Coalescing or_result#0 with [or_result#1]
debug: Coalescing resulted in 48 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.bool_to_bytes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.log_and_return using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_binary_ops
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: pred: {loop_counter%1#0=loop_counter%1#0, rhs#0=rhs#0}
debug: ready: 
debug: to_do: loop_counter%1#0, rhs#0
debug: * to_do rhs#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, lhs#0=lhs#0}
debug: ready: 
debug: to_do: loop_counter%0#0, lhs#0
debug: * to_do lhs#0
debug: * to_do loop_counter%0#0
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.bool_to_bytes
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.log_and_return
debug: Sequentializing parallel copies in test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to boolean_binary_ops/out/BooleanBinaryOps.destructured.ir
debug: Inserted test_boolean_binary_ops_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[14]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[20]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[25]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[27]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[32]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[36]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[38]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[43]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[45]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[50]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[52]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[57]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[59]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[64]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[66]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted test_boolean_binary_ops_block@0.ops[68]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced test_boolean_binary_ops_block@0.ops[70]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[26]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[15]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[20]: 'store and_msg#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[23]: 'load and_msg#0' with 'load and_msg#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[25]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[28]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_for_body@2.ops[1]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_for_body@2.ops[29]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[7]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[9]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_and_contd@3.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_and_contd@3.ops[6]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@4.ops[1]: 'store and_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@4.ops[3]: 'load and_result%0#0' with 'load and_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@5.ops[1]: 'store and_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@5.ops[3]: 'load and_result%0#0' with 'load and_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[7]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[9]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[17]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[19]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[37]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[39]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[3]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[6]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[14]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[17]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[27]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[30]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[32]: 'store or_msg#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[35]: 'load or_msg#0' with 'load or_msg#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[37]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[40]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[24]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[30]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[1]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[13]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[3]: 'store rhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[28]: 'load rhs#0' with 'load rhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[15]: 'store lhs#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@6.ops[43]: 'load lhs#0' with 'load lhs#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[7]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[9]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_or_contd@7.ops[3]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_or_contd@7.ops[6]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_true@8.ops[1]: 'store or_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_true@8.ops[3]: 'load or_result%0#0' with 'load or_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_false@9.ops[1]: 'store or_result%0#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_false@9.ops[3]: 'load or_result%0#0' with 'load or_result%0#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[7]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[9]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[3]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced test_boolean_shortcircuit_binary_ops_bool_merge@10.ops[6]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Found 8 edge set/s for test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops
debug: Allocated 2 variable/s to x-stack: and_result#0, or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@4 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@5 -> test_boolean_shortcircuit_binary_ops_bool_merge@6: and_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_true@8 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result#0
debug: shared x-stack for test_boolean_shortcircuit_binary_ops_bool_false@9 -> test_boolean_shortcircuit_binary_ops_bool_merge@10: or_result#0
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack entry: ['and_msg#0', 'or_msg#0', 'loop_counter%1#0', 'rhs#0']
debug: test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops f-stack on first store: ['loop_counter%0#0', 'lhs#0']
debug: Inserted bool_to_bytes_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced bool_to_bytes_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.teal
info: Writing boolean_binary_ops/out/BooleanBinaryOps.approval.bin
info: Writing boolean_binary_ops/out/BooleanBinaryOps.clear.bin