// Op                                                                                Stack (out)
// test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
main_block@0:
    // boolean_binary_ops/contract.py:7
    // test_boolean_binary_ops(true=True, false=False)
    int 1                                                                            1
    int 0                                                                            1,0
    callsub test_boolean_binary_ops
    // boolean_binary_ops/contract.py:8
    // test_boolean_shortcircuit_binary_ops()
    callsub test_boolean_shortcircuit_binary_ops
    // boolean_binary_ops/contract.py:10
    // test_union_boolean_binary_ops()
    callsub test_union_boolean_binary_ops
    // boolean_binary_ops/contract.py:11
    // test_literal_boolean_binary_ops()
    callsub test_literal_boolean_binary_ops
    // boolean_binary_ops/contract.py:12
    // test_literal_conditionals(true=True, false=False)
    int 1                                                                            1
    int 0                                                                            1,0
    callsub test_literal_conditionals
    // boolean_binary_ops/contract.py:13
    // return True
    int 1                                                                            1
    return


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:                                                             (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:20-21
    // @subroutine
    // def test_boolean_binary_ops(*, true: bool, false: bool) -> None:
    proto 2 0                                                                        (洧도) true#0,false#0 |

test_boolean_binary_ops_block@0:                                                     (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:22
    // assert not (true and false)
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy)
    p-load false#0                                                                   (洧도) true#0,false#0 | true#0 (copy),false#0 (copy)
    &&                                                                               (洧도) true#0,false#0 | tmp%0#0
    !                                                                                (洧도) true#0,false#0 | tmp%1#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:23
    // assert not (false and true)
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy)
    p-load true#0                                                                    (洧도) true#0,false#0 | false#0 (copy),true#0 (copy)
    &&                                                                               (洧도) true#0,false#0 | tmp%2#0
    !                                                                                (洧도) true#0,false#0 | tmp%3#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:24
    // assert true and true
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy)
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy),true#0 (copy)
    &&                                                                               (洧도) true#0,false#0 | tmp%4#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:25
    // assert not (false and false)
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy)
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy),false#0 (copy)
    &&                                                                               (洧도) true#0,false#0 | tmp%5#0
    !                                                                                (洧도) true#0,false#0 | tmp%6#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:27
    // assert true or false
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy)
    p-load false#0                                                                   (洧도) true#0,false#0 | true#0 (copy),false#0 (copy)
    ||                                                                               (洧도) true#0,false#0 | tmp%7#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:28
    // assert false or true
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy)
    p-load true#0                                                                    (洧도) true#0,false#0 | false#0 (copy),true#0 (copy)
    ||                                                                               (洧도) true#0,false#0 | tmp%8#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:29
    // assert true or true
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy)
    p-load true#0                                                                    (洧도) true#0,false#0 | true#0 (copy),true#0 (copy)
    ||                                                                               (洧도) true#0,false#0 | tmp%9#0
    assert                                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:30
    // assert not (false or false)
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy)
    p-load false#0                                                                   (洧도) true#0,false#0 | false#0 (copy),false#0 (copy)
    ||                                                                               (洧도) true#0,false#0 | tmp%10#0
    !                                                                                (洧도) true#0,false#0 | tmp%11#0
    assert                                                                           (洧도) true#0,false#0 |
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    // boolean_binary_ops/contract.py:38-39
    // @subroutine
    // def test_boolean_shortcircuit_binary_ops() -> None:
    proto 0 0
    allocate 4 to stack                                                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0 |

test_boolean_shortcircuit_binary_ops_block@0:                                        (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0 |
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0 | loop_counter%0#0
    f-store loop_counter%0#0                                                         (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0 |
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0 | lhs#0
    f-store lhs#0                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_for_body@1      (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_for_body@1:                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | loop_counter%1#0
    f-store loop_counter%1#0                                                         (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0
    f-store rhs#0                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_for_body@2      (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_for_body@2:                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:42
    // and_msg = b"_" + bool_to_bytes(lhs) + b"_and_" + bool_to_bytes(rhs)
    f-load lhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0
    l-store-copy lhs#0 0                                                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,lhs#0 (copy)
    callsub bool_to_bytes                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%0#0
    byte 0x5f                                                                        (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%0#0,0x5f
    l-load tmp%0#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,0x5f,tmp%0#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%1#0
    byte 0x5f616e645f                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%1#0,0x5f616e645f
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%2#0
    f-load rhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%2#0,rhs#0
    callsub bool_to_bytes                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%2#0,tmp%3#0
    l-load tmp%2#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%3#0,tmp%2#0
    l-load tmp%3#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%2#0,tmp%3#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,and_msg#0
    l-store-copy and_msg#0 0                                                         (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,and_msg#0,and_msg#0
    f-store and_msg#0                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,and_msg#0
    // boolean_binary_ops/contract.py:43
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    byte 0x6c6873                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,and_msg#0,0x6c6873
    l-load and_msg#0 1                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,0x6c6873,and_msg#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%4#0
    l-load lhs#0 1                                                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%4#0,lhs#0
    l-load tmp%4#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%4#0
    callsub log_and_return                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%5#0
    // boolean_binary_ops/contract.py:43-45
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    bz test_boolean_shortcircuit_binary_ops_bool_false@5                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_and_contd@3     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_and_contd@3:                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:44
    // rhs, b"rhs" + and_msg
    byte 0x726873                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | 0x726873
    f-load and_msg#0                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | 0x726873,and_msg#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%6#0
    // boolean_binary_ops/contract.py:43-45
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    f-load rhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%6#0,rhs#0
    l-load tmp%6#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,tmp%6#0
    callsub log_and_return                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%7#0
    bz test_boolean_shortcircuit_binary_ops_bool_false@5                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_bool_true@4     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_bool_true@4:                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | and_result#0
    x-store and_result#0                                                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 |
    b test_boolean_shortcircuit_binary_ops_bool_merge@6                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 |

test_boolean_shortcircuit_binary_ops_bool_false@5:                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | and_result#0
    x-store and_result#0                                                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_bool_merge@6    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 |

test_boolean_shortcircuit_binary_ops_bool_merge@6:                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 |
    // boolean_binary_ops/contract.py:46
    // assert and_result == (lhs and rhs)
    f-load lhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 | lhs#0
    l-store-copy lhs#0 0                                                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 | lhs#0,lhs#0 (copy)
    f-load rhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 | lhs#0,lhs#0 (copy),rhs#0
    l-store-copy rhs#0 2                                                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 | rhs#0,lhs#0,lhs#0 (copy),rhs#0 (copy)
    &&                                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) and_result#0 | rhs#0,lhs#0,tmp%8#0
    x-load and_result#0                                                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%8#0,and_result#0
    l-load tmp%8#0 1                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,and_result#0,tmp%8#0
    ==                                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%9#0
    assert                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0
    // boolean_binary_ops/contract.py:47
    // or_msg = b"_" + bool_to_bytes(lhs) + b"_or_" + bool_to_bytes(rhs)
    l-load-copy lhs#0 0                                                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,lhs#0 (copy)
    callsub bool_to_bytes                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%10#0
    byte 0x5f                                                                        (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%10#0,0x5f
    l-load tmp%10#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,0x5f,tmp%10#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%11#0
    byte 0x5f6f725f                                                                  (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%11#0,0x5f6f725f
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,lhs#0,tmp%12#0
    l-load rhs#0 2                                                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%12#0,rhs#0
    callsub bool_to_bytes                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%12#0,tmp%13#0
    l-load tmp%12#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%13#0,tmp%12#0
    l-load tmp%13#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%12#0,tmp%13#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,or_msg#0
    l-store-copy or_msg#0 0                                                          (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,or_msg#0,or_msg#0
    f-store or_msg#0                                                                 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,or_msg#0
    // boolean_binary_ops/contract.py:48
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    byte 0x6c6873                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,or_msg#0,0x6c6873
    l-load or_msg#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,0x6c6873,or_msg#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%14#0
    l-load lhs#0 1                                                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%14#0,lhs#0
    l-load tmp%14#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0,tmp%14#0
    callsub log_and_return                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%15#0
    // boolean_binary_ops/contract.py:48-50
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    bnz test_boolean_shortcircuit_binary_ops_bool_true@8                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_or_contd@7      (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_or_contd@7:                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:49
    // rhs, b"rhs" + or_msg
    byte 0x726873                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | 0x726873
    f-load or_msg#0                                                                  (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | 0x726873,or_msg#0
    concat                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%16#0
    // boolean_binary_ops/contract.py:48-50
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    f-load rhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%16#0,rhs#0
    l-load tmp%16#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0,tmp%16#0
    callsub log_and_return                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%17#0
    bz test_boolean_shortcircuit_binary_ops_bool_false@9                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_bool_true@8     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_bool_true@8:                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | or_result#0
    x-store or_result#0                                                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 |
    b test_boolean_shortcircuit_binary_ops_bool_merge@10                             (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 |

test_boolean_shortcircuit_binary_ops_bool_false@9:                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | or_result#0
    x-store or_result#0                                                              (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_bool_merge@10   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 |

test_boolean_shortcircuit_binary_ops_bool_merge@10:                                  (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 |
    // boolean_binary_ops/contract.py:51
    // assert or_result == (lhs or rhs)
    f-load lhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 | lhs#0
    f-load rhs#0                                                                     (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 | lhs#0,rhs#0
    ||                                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | (洧뎶) or_result#0 | tmp%18#0
    x-load or_result#0                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%18#0,or_result#0
    l-load tmp%18#0 1                                                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | or_result#0,tmp%18#0
    ==                                                                               (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | tmp%19#0
    assert                                                                           (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    f-load loop_counter%1#0                                                          (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | loop_counter%1#0
    bnz test_boolean_shortcircuit_binary_ops_after_for@13                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_for_header_1@12 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_for_header_1@12:                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | loop_counter%1#0
    f-store loop_counter%1#0                                                         (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | rhs#0
    f-store rhs#0                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    b test_boolean_shortcircuit_binary_ops_for_body@2                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_after_for@13:                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    f-load loop_counter%0#0                                                          (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | loop_counter%0#0
    bnz test_boolean_shortcircuit_binary_ops_after_for@16                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // Implicit fall through to test_boolean_shortcircuit_binary_ops_for_header_1@15 (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_for_header_1@15:                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    int 1                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | loop_counter%0#0
    f-store loop_counter%0#0                                                         (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    int 0                                                                            (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 | lhs#0
    f-store lhs#0                                                                    (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    b test_boolean_shortcircuit_binary_ops_for_body@1                                (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |

test_boolean_shortcircuit_binary_ops_after_for@16:                                   (洧뎽) and_msg#0,or_msg#0,loop_counter%1#0,rhs#0,loop_counter%0#0,lhs#0 |
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:                                                                       (洧도) x#0 |
    // boolean_binary_ops/contract.py:33-34
    // @subroutine
    // def bool_to_bytes(x: bool) -> Bytes:
    proto 1 1                                                                        (洧도) x#0 |

bool_to_bytes_block@0:                                                               (洧도) x#0 |
    // boolean_binary_ops/contract.py:35
    // return Bytes(b"true" if x else b"false")
    byte 0x66616c7365                                                                (洧도) x#0 | 0x66616c7365
    byte 0x74727565                                                                  (洧도) x#0 | 0x66616c7365,0x74727565
    p-load x#0                                                                       (洧도) x#0 | 0x66616c7365,0x74727565,x#0 (copy)
    select                                                                           (洧도) x#0 | tmp%0#0
    retsub                                                                           tmp%0#0


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:                                                                      (洧도) x#0,msg#0 |
    // boolean_binary_ops/contract.py:54-55
    // @subroutine
    // def log_and_return(x: bool, msg: Bytes) -> bool:
    proto 2 1                                                                        (洧도) x#0,msg#0 |

log_and_return_block@0:                                                              (洧도) x#0,msg#0 |
    // boolean_binary_ops/contract.py:56
    // log(msg)
    p-load msg#0                                                                     (洧도) x#0,msg#0 | msg#0 (copy)
    log                                                                              (洧도) x#0,msg#0 |
    // boolean_binary_ops/contract.py:57
    // return x
    p-load x#0                                                                       (洧도) x#0,msg#0 | x#0 (copy)
    retsub                                                                           x#0 (copy)


// test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
test_union_boolean_binary_ops:
    // boolean_binary_ops/contract.py:68-69
    // @subroutine
    // def test_union_boolean_binary_ops() -> None:
    proto 0 0

test_union_boolean_binary_ops_block@0:
    int 0                                                                            idx#0
    f-store idx#0                                                                    (洧뎽) idx#0 |
    // Implicit fall through to test_union_boolean_binary_ops_for_header@45          (洧뎽) idx#0 |

test_union_boolean_binary_ops_for_header@45:                                         (洧뎽) idx#0 |
    // boolean_binary_ops/contract.py:85
    // for idx, b in uenumerate(Bytes(b"never seen") and bytes_to_iterate):
    f-load idx#0                                                                     (洧뎽) idx#0 | idx#0
    int 3                                                                            (洧뎽) idx#0 | idx#0,3
    <                                                                                (洧뎽) idx#0 | continue_looping%0#0
    bz test_union_boolean_binary_ops_after_for@48                                    (洧뎽) idx#0 |
    // Implicit fall through to test_union_boolean_binary_ops_for_body@46            (洧뎽) idx#0 |

test_union_boolean_binary_ops_for_body@46:                                           (洧뎽) idx#0 |
    f-load idx#0                                                                     (洧뎽) idx#0 | idx#0
    int 1                                                                            (洧뎽) idx#0 | idx#0,1
    +                                                                                (洧뎽) idx#0 | idx#0
    f-store idx#0                                                                    (洧뎽) idx#0 |
    b test_union_boolean_binary_ops_for_header@45                                    (洧뎽) idx#0 |

test_union_boolean_binary_ops_after_for@48:                                          (洧뎽) idx#0 |
    // boolean_binary_ops/contract.py:89
    // assert "ight" in (String("left") and String("right"))
    byte "ight"                                                                      (洧뎽) idx#0 | "ight"
    byte "right"                                                                     (洧뎽) idx#0 | "ight","right"
    callsub is_substring                                                             (洧뎽) idx#0 | tmp%61#0
    assert                                                                           (洧뎽) idx#0 |
    retsub


// test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
test_literal_boolean_binary_ops:
    // boolean_binary_ops/contract.py:95-96
    // @subroutine
    // def test_literal_boolean_binary_ops() -> None:
    proto 0 0

test_literal_boolean_binary_ops_block@0:
    // boolean_binary_ops/contract.py:120
    // assert op.bitlen(one and 4) == 3
    int 4                                                                            4
    bitlen                                                                           tmp%13#0
    int 3                                                                            tmp%13#0,3
    ==                                                                               tmp%14#0
    assert
    // boolean_binary_ops/contract.py:122
    // assert op.bitlen(empty_bytes or b"hello") > 0
    byte 0x68656c6c6f                                                                0x68656c6c6f
    bitlen                                                                           tmp%18#0
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: uint64, false: uint64) -> void:
test_literal_conditionals:                                                           (洧도) true#0,false#0 |
    // boolean_binary_ops/contract.py:125-126
    // @subroutine
    // def test_literal_conditionals(*, true: bool, false: bool) -> None:
    proto 2 0                                                                        (洧도) true#0,false#0 |
    allocate 1 to stack                                                              (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |

test_literal_conditionals_block@0:                                                   (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // boolean_binary_ops/contract.py:127
    // assert (3 if false else 0) or 4
    p-load false#0                                                                   (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | false#0 (copy)
    int 1                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | false#0 (copy),1
    ||                                                                               (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | tmp%1#0
    assert                                                                           (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // boolean_binary_ops/contract.py:128
    // assert 0 or (3 if true else 0)
    p-load true#0                                                                    (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | true#0 (copy)
    bz test_literal_conditionals_bool_false@3                                        (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // Implicit fall through to test_literal_conditionals_bool_true@2                (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |

test_literal_conditionals_bool_true@2:                                               (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    int 1                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | or_result%0#0
    x-store or_result%0#0                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) or_result%0#0 |
    b test_literal_conditionals_bool_merge@4                                         (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) or_result%0#0 |

test_literal_conditionals_bool_false@3:                                              (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    int 0                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | or_result%0#0
    x-store or_result%0#0                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) or_result%0#0 |
    // Implicit fall through to test_literal_conditionals_bool_merge@4               (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) or_result%0#0 |

test_literal_conditionals_bool_merge@4:                                              (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) or_result%0#0 |
    // boolean_binary_ops/contract.py:128
    // assert 0 or (3 if true else 0)
    x-load or_result%0#0                                                             (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | or_result%0#0
    assert                                                                           (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // boolean_binary_ops/contract.py:131
    // y = UInt64((3 if false else 0) or 4)
    p-load false#0                                                                   (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | false#0 (copy)
    int 3                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | false#0 (copy),3
    *                                                                                (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | awst_tmp%0#0
    l-store-copy awst_tmp%0#0 0                                                      (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | awst_tmp%0#0,awst_tmp%0#0
    f-store awst_tmp%0#0                                                             (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | awst_tmp%0#0
    l-load awst_tmp%0#0 0                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | awst_tmp%0#0
    bz test_literal_conditionals_ternary_false@10                                    (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // Implicit fall through to test_literal_conditionals_ternary_true@9             (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |

test_literal_conditionals_ternary_true@9:                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    f-load awst_tmp%0#0                                                              (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | y#0
    x-store y#0                                                                      (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) y#0 |
    b test_literal_conditionals_ternary_merge@11                                     (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) y#0 |

test_literal_conditionals_ternary_false@10:                                          (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // boolean_binary_ops/contract.py:131
    // y = UInt64((3 if false else 0) or 4)
    int 4                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | y#0
    x-store y#0                                                                      (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) y#0 |
    // Implicit fall through to test_literal_conditionals_ternary_merge@11           (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) y#0 |

test_literal_conditionals_ternary_merge@11:                                          (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | (洧뎶) y#0 |
    // boolean_binary_ops/contract.py:132
    // assert y == 4
    x-load y#0                                                                       (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | y#0
    int 4                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | y#0,4
    ==                                                                               (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | tmp%7#0
    assert                                                                           (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    // boolean_binary_ops/contract.py:133
    // z = UInt64(0 or (3 if true else 0))
    p-load true#0                                                                    (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | true#0 (copy)
    int 3                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | true#0 (copy),3
    *                                                                                (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | ternary_result%1#1
    // boolean_binary_ops/contract.py:134
    // assert z == 3
    int 3                                                                            (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | ternary_result%1#1,3
    ==                                                                               (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 | tmp%9#0
    assert                                                                           (洧도) true#0,false#0 | (洧뎽) awst_tmp%0#0 |
    retsub


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:                                                                        (洧도) item#0,sequence#0 |
    proto 2 1                                                                        (洧도) item#0,sequence#0 |
    allocate 1 to stack                                                              (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0 |

is_substring_block@0:                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0 |
    int 0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0 | start#0
    f-store start#0                                                                  (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    // Implicit fall through to is_substring_while_top@1                             (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

is_substring_while_top@1:                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    p-load item#0                                                                    (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | item#0 (copy)
    len                                                                              (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%0#0
    f-load start#0                                                                   (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%0#0,start#0
    l-load tmp%0#0 1                                                                 (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0,tmp%0#0
    +                                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0
    l-store-copy tmp%1#0 0                                                           (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%1#0
    f-store tmp%1#0                                                                  (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0
    p-load sequence#0                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,sequence#0 (copy)
    len                                                                              (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%2#0
    l-load tmp%1#0 1                                                                 (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%2#0,tmp%1#0
    l-load tmp%2#0 1                                                                 (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%1#0,tmp%2#0
    <=                                                                               (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%3#0
    bz is_substring_after_while@5                                                    (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    // Implicit fall through to is_substring_while_body@2                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

is_substring_while_body@2:                                                           (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    p-load sequence#0                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy)
    f-load start#0                                                                   (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy),start#0
    f-load tmp%1#0                                                                   (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | sequence#0 (copy),start#0,tmp%1#0
    substring3                                                                       (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%6#0
    p-load item#0                                                                    (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%6#0,item#0 (copy)
    l-load tmp%6#0 1                                                                 (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | item#0 (copy),tmp%6#0
    ==                                                                               (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | tmp%7#0
    bz is_substring_after_if_else@4                                                  (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    // Implicit fall through to is_substring_if_body@3                               (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

is_substring_if_body@3:                                                              (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    int 1                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | 1
    retsub                                                                           1

is_substring_after_if_else@4:                                                        (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    f-load start#0                                                                   (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0
    int 1                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0,1
    +                                                                                (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | start#0
    f-store start#0                                                                  (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    b is_substring_while_top@1                                                       (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |

is_substring_after_while@5:                                                          (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 |
    int 0                                                                            (洧도) item#0,sequence#0 | (洧뎽) tmp%1#0,start#0 | 0
    retsub                                                                           0


