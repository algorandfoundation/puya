contract test_cases.boolean_binary_ops.contract.BooleanBinaryOps:
    program approval:
        subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> bool:
            block@0: // L5
                test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(1u, 0u)
                test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops()
                return 1u
        
        subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: bool, false: bool) -> void:
            block@0: // L15
                let tmp%0#0: bool = (&& true#0 false#0)
                let tmp%1#0: bool = (! tmp%0#0)
                (assert tmp%1#0)
                let tmp%2#0: bool = (&& false#0 true#0)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bool = (&& true#0 true#0)
                (assert tmp%4#0)
                let tmp%5#0: bool = (&& false#0 false#0)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (|| true#0 false#0)
                (assert tmp%7#0)
                let tmp%8#0: bool = (|| false#0 true#0)
                (assert tmp%8#0)
                let tmp%9#0: bool = (|| true#0 true#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (|| false#0 false#0)
                let tmp%11#0: bool = (! tmp%10#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
            block@0: // L33
                let tuple_index%0#0: uint64 = 0u
                let lhs#0: bool = 1u
                goto block@3
            block@2: // for_header_1_L35
                let lhs#1: bool = 0u
                goto block@3
            block@3: // for_body_L35
                let lhs#3: bool = φ(lhs#0 <- block@0, lhs#1 <- block@2)
                let tuple_index%0#5: uint64 = φ(tuple_index%0#0 <- block@0, tuple_index%0#8 <- block@2)
                let tuple_index%1#0: uint64 = 0u
                let rhs#0: bool = 1u
                goto block@6
            block@5: // for_header_1_L36
                let rhs#1: bool = 0u
                goto block@6
            block@6: // for_body_L36
                let rhs#2: bool = φ(rhs#0 <- block@3, rhs#1 <- block@5)
                let tuple_index%1#4: uint64 = φ(tuple_index%1#0 <- block@3, tuple_index%1#7 <- block@5)
                let tmp%0#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#3)
                let tmp%1#0: bytes = (concat "_" tmp%0#0)
                let tmp%2#0: bytes = (concat tmp%1#0 "_and_")
                let tmp%3#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#2)
                let and_msg#0: bytes = (concat tmp%2#0 tmp%3#0)
                let tmp%4#0: bytes = (concat "lhs" and_msg#0)
                let tmp%5#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#3, tmp%4#0)
                goto tmp%5#0 ? block@7 : block@9
            block@7: // and_contd_L38
                let tmp%6#0: bytes = (concat "rhs" and_msg#0)
                let tmp%7#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#2, tmp%6#0)
                goto tmp%7#0 ? block@8 : block@9
            block@8: // bool_true_L38
                let and_result%0#0: bool = 1u
                goto block@10
            block@9: // bool_false_L38
                let and_result%0#1: bool = 0u
                goto block@10
            block@10: // bool_merge_L38
                let and_result#0: bool = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9)
                let tmp%8#0: bool = (&& lhs#3 rhs#2)
                let tmp%9#0: bool = (== and_result#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#3)
                let tmp%11#0: bytes = (concat "_" tmp%10#0)
                let tmp%12#0: bytes = (concat tmp%11#0 "_or_")
                let tmp%13#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#2)
                let or_msg#0: bytes = (concat tmp%12#0 tmp%13#0)
                let tmp%14#0: bytes = (concat "lhs" or_msg#0)
                let tmp%15#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#3, tmp%14#0)
                goto tmp%15#0 ? block@12 : block@11
            block@11: // or_contd_L43
                let tmp%16#0: bytes = (concat "rhs" or_msg#0)
                let tmp%17#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#2, tmp%16#0)
                goto tmp%17#0 ? block@12 : block@13
            block@12: // bool_true_L43
                let or_result%0#0: bool = 1u
                goto block@14
            block@13: // bool_false_L43
                let or_result%0#1: bool = 0u
                goto block@14
            block@14: // bool_merge_L43
                let or_result#0: bool = φ(or_result%0#0 <- block@12, or_result%0#1 <- block@13)
                let tmp%18#0: bool = (|| lhs#3 rhs#2)
                let tmp%19#0: bool = (== or_result#0 tmp%18#0)
                (assert tmp%19#0)
                let tuple_index%1#7: uint64 = (+ tuple_index%1#4 1u)
                goto tuple_index%1#4 ? block@16 : block@5
            block@16: // after_for_L36
                let tuple_index%0#8: uint64 = (+ tuple_index%0#5 1u)
                goto tuple_index%0#5 ? block@18 : block@2
            block@18: // after_for_L35
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes(x: bool) -> bytes:
            block@0: // L28
                goto x#0 ? block@1 : block@2
            block@1: // ternary_true_L30
                let ternary_result%0#0: bytes = 0x74727565
                goto block@3
            block@2: // ternary_false_L30
                let ternary_result%0#1: bytes = 0x66616c7365
                goto block@3
            block@3: // ternary_merge_L30
                let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                return ternary_result%0#2
        
        subroutine test_cases.boolean_binary_ops.contract.log_and_return(x: bool, msg: bytes) -> bool:
            block@0: // L49
                (log msg#0)
                return x#0
    
    program clear-state:
        subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> bool:
            block@0: // L10
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                return 1u