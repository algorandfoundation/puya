contract BooleanBinaryOps
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  
  subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program(): bool
  {
    test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true=true, false=false)
    test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops()
    test_cases.boolean_binary_ops.contract.type_coercion()
    test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops()
    test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops()
    test_cases.boolean_binary_ops.contract.test_literal_conditionals(true=true, false=false)
    return true
  }
  
  subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program(): bool
  {
    assert(false == false)
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

subroutine test_boolean_binary_ops(true: bool, false: bool): void
{
  assert(!(true and false))
  assert(!(false and true))
  assert(true and true)
  assert(!(false and false))
  assert(true or false)
  assert(false or true)
  assert(true or true)
  assert(!(false or false))
}

subroutine bool_to_bytes(x: bool): bytes
{
  return (x) ? (hex<"74727565">) : (hex<"66616C7365">)
}

subroutine test_boolean_shortcircuit_binary_ops(): void
{
  for lhs in (true, false) {
    for rhs in (true, false) {
      and_msg: bytes = hex<"5F"> + test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs) + hex<"5F616E645F"> + test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs)
      and_result: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs, hex<"6C6873"> + and_msg) and test_cases.boolean_binary_ops.contract.log_and_return(rhs, hex<"726873"> + and_msg)
      assert(and_result == lhs and rhs)
      or_msg: bytes = hex<"5F"> + test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs) + hex<"5F6F725F"> + test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs)
      or_result: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs, hex<"6C6873"> + or_msg) or test_cases.boolean_binary_ops.contract.log_and_return(rhs, hex<"726873"> + or_msg)
      assert(or_result == lhs or rhs)
    }
  }
}

subroutine log_and_return(x: bool, msg: bytes): bool
{
  log(msg)
  return x
}

subroutine type_coercion(): void
{
  b: uint64 = (0u != 0u) ? (0u) : (OptIn)
  assert(b > 0u)
  c: uint64 = (appl != 0u) ? (appl) : ((0u != 0u) ? (0u) : (OptIn))
  assert(c == appl)
}

subroutine test_union_boolean_binary_ops(): void
{
  ok: bool = len(hex<"">) != 0u or 1u != 0u
  assert(ok)
  x: uint64 = 0u
  y: bytes = hex<"79">
  z: string = 'z'
  assert(x != 0u or len(y) != 0u or len(y) != 0u or len(z) != 0u)
  assert(x != 0u or len(y) != 0u and x != 0u or len(y) != 0u)
  assert(x != 0u or len(y) != 0u or len(z) != 0u)
  assert(x != 0u or len(y) != 0u or len(z) != 0u)
  assert((len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0, source='ri'))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=2, source=(len(SINGLE_EVAL(id=1, source='left')) == 0u) ? (SINGLE_EVAL(id=1)) : ('right'))))) ? (false) : (extract3(SINGLE_EVAL(id=2), 0u, len(reinterpret_cast<bytes>(SINGLE_EVAL(id=0)))) == SINGLE_EVAL(id=0)))
  assert((len(reinterpret_cast<bytes>((len(SINGLE_EVAL(id=3, source='le')) == 0u) ? (SINGLE_EVAL(id=3)) : (SINGLE_EVAL(id=4, source='ri')))) > len(reinterpret_cast<bytes>(SINGLE_EVAL(id=5, source='right')))) ? (false) : (extract3(SINGLE_EVAL(id=5), 0u, len(reinterpret_cast<bytes>((len(SINGLE_EVAL(id=3)) == 0u) ? (SINGLE_EVAL(id=3)) : (SINGLE_EVAL(id=4))))) == (len(SINGLE_EVAL(id=3)) == 0u) ? (SINGLE_EVAL(id=3)) : (SINGLE_EVAL(id=4))))
  bytes_to_iterate: bytes = hex<"616263">
  for (idx, b) in enumerate((len(hex<"6E65766572207365656E">) == 0u) ? (hex<"6E65766572207365656E">) : (bytes_to_iterate)) {
    assert(b == bytes_to_iterate[idx])
  }
  assert((len(hex<"6C656674">) == 0u) ? (hex<"6C656674">) : (hex<"7269676874">)[1u] == hex<"69">)
  assert((len(hex<"6C656674">) != 0u) ? (hex<"6C656674">) : (hex<"7269676874">)[0:2] == hex<"6C65">)
  assert(_puya_lib.bytes_.is_substring('ight', (len(SINGLE_EVAL(id=6, source='left')) == 0u) ? (SINGLE_EVAL(id=6)) : ('right')))
  assert((1u == 0u) ? (1u) : (2u) + 3u == 5u)
  assert(~((1u != 0u) ? (1u) : (2u)) == ~(1u))
}

subroutine test_literal_boolean_binary_ops(): void
{
  assert(true)
  assert(true)
  assert(0u != 0u or true)
  assert(false or len(hex<"616263">) != 0u)
  a: bool = true
  b: bool = true
  c: bool = 0u != 0u or true
  d: bool = false or len(hex<"616263">) != 0u
  assert(a and b and c and d)
  if (false) {
    assert(false)
  }
  if (false) {
    assert(false)
  }
  if (0u != 0u or false) {
    assert(false)
  }
  if (false or len(hex<"">) != 0u) {
    assert(false)
  }
  assert(2u == 2u)
  one: uint64 = 1u
  assert(bitlen((one == 0u) ? (one) : (4u)) == 3u)
  empty_bytes: bytes = hex<"">
  assert(bitlen((len(empty_bytes) != 0u) ? (empty_bytes) : (hex<"68656C6C6F">)) > 0u)
}

subroutine test_literal_conditionals(true: bool, false: bool): void
{
  assert((false) ? (true) : (false) or true)
  assert(false or (true) ? (true) : (false))
  assert(true or (true) ? (true) : (false))
  assert((false) ? (true) : (false) or true)
  y: uint64 = (SINGLE_EVAL(id=7, source=(false) ? (3u) : (0u)) != 0u) ? (SINGLE_EVAL(id=7)) : (4u)
  assert(y == 4u)
  z: uint64 = (0u != 0u) ? (0u) : ((true) ? (3u) : (0u))
  assert(z == 3u)
}