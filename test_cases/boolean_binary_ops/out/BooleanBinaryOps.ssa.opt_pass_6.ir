contract test_cases.boolean_binary_ops.contract.BooleanBinaryOps:
    program approval:
        subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> bool:
            block@0: // L6
                test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(1u, 0u)
                test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops()
                test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops()
                test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops()
                test_cases.boolean_binary_ops.contract.test_literal_conditionals(1u, 0u)
                return 1u
        
        subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: bool, false: bool) -> void:
            block@0: // L20
                let tmp%0#0: bool = (&& true#0 false#0)
                let tmp%1#0: bool = (! tmp%0#0)
                (assert tmp%1#0)
                let tmp%2#0: bool = (&& false#0 true#0)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bool = (&& true#0 true#0)
                (assert tmp%4#0)
                let tmp%5#0: bool = (&& false#0 false#0)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (|| true#0 false#0)
                (assert tmp%7#0)
                let tmp%8#0: bool = (|| false#0 true#0)
                (assert tmp%8#0)
                let tmp%9#0: bool = (|| true#0 true#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (|| false#0 false#0)
                let tmp%11#0: bool = (! tmp%10#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
            block@0: // L38
                let loop_counter%0#0: uint64 = 0u
                let lhs#0: bool = 1u
                goto block@1
            block@1: // for_body_L41
                let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15)
                let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15)
                let loop_counter%1#0: uint64 = 0u
                let rhs#0: bool = 1u
                goto block@2
            block@2: // for_body_L42
                let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12)
                let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12)
                let tmp%0#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
                let tmp%1#0: bytes = (concat 0x5f tmp%0#0)
                let tmp%2#0: bytes = (concat tmp%1#0 0x5f616e645f)
                let tmp%3#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
                let and_msg#0: bytes = (concat tmp%2#0 tmp%3#0)
                let tmp%4#0: bytes = (concat 0x6c6873 and_msg#0)
                let tmp%5#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%4#0)
                goto tmp%5#0 ? block@3 : block@5
            block@3: // and_contd_L43
                let tmp%6#0: bytes = (concat 0x726873 and_msg#0)
                let tmp%7#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%6#0)
                goto tmp%7#0 ? block@4 : block@5
            block@4: // bool_true_L43
                let and_result%0#0: bool = 1u
                goto block@6
            block@5: // bool_false_L43
                let and_result%0#1: bool = 0u
                goto block@6
            block@6: // bool_merge_L43
                let and_result#0: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5)
                let tmp%8#0: bool = (&& lhs#6 rhs#1)
                let tmp%9#0: bool = (== and_result#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
                let tmp%11#0: bytes = (concat 0x5f tmp%10#0)
                let tmp%12#0: bytes = (concat tmp%11#0 0x5f6f725f)
                let tmp%13#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
                let or_msg#0: bytes = (concat tmp%12#0 tmp%13#0)
                let tmp%14#0: bytes = (concat 0x6c6873 or_msg#0)
                let tmp%15#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%14#0)
                goto tmp%15#0 ? block@8 : block@7
            block@7: // or_contd_L48
                let tmp%16#0: bytes = (concat 0x726873 or_msg#0)
                let tmp%17#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%16#0)
                goto tmp%17#0 ? block@8 : block@9
            block@8: // bool_true_L48
                let or_result%0#0: bool = 1u
                goto block@10
            block@9: // bool_false_L48
                let or_result%0#1: bool = 0u
                goto block@10
            block@10: // bool_merge_L48
                let or_result#0: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9)
                let tmp%18#0: bool = (|| lhs#6 rhs#1)
                let tmp%19#0: bool = (== or_result#0 tmp%18#0)
                (assert tmp%19#0)
                goto loop_counter%1#1 ? block@13 : block@12
            block@12: // for_header_1_L41
                let loop_counter%1#2: uint64 = 1u
                let rhs#6: bool = 0u
                goto block@2
            block@13: // after_for_L41
                goto loop_counter%0#1 ? block@16 : block@15
            block@15: // for_header_1_L40
                let loop_counter%0#2: uint64 = 1u
                let lhs#7: bool = 0u
                goto block@1
            block@16: // after_for_L40
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes(x: bool) -> bytes:
            block@0: // L33
                let tmp%0#0: bytes = (select 0x66616c7365 0x74727565 x#0)
                return tmp%0#0
        
        subroutine test_cases.boolean_binary_ops.contract.log_and_return(x: bool, msg: bytes) -> bool:
            block@0: // L54
                (log msg#0)
                return x#0
        
        subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
            block@0: // L68
                let item_index_internal%0#0: uint64 = 0u
                goto block@45
            block@45: // for_header_L85
                let idx#0: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@46)
                let continue_looping%0#0: bool = (< idx#0 3u)
                goto continue_looping%0#0 ? block@46 : block@48
            block@46: // for_body_L86
                let item_index_internal%0#2: uint64 = (+ idx#0 1u)
                goto block@45
            block@48: // after_for_L85
                let tmp%57#0: bytes = 0x6c65
                let tmp%58#0: bool = (== tmp%57#0 0x6c65)
                (assert tmp%58#0)
                let tmp%61#0: bool = _puya_lib.bytes_.is_substring("ight", "right")
                (assert tmp%61#0)
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
            block@0: // L95
                let tmp%13#0: uint64 = (bitlen 4u)
                let tmp%14#0: bool = (== tmp%13#0 3u)
                (assert tmp%14#0)
                let tmp%18#0: uint64 = (bitlen 0x68656c6c6f)
                (assert tmp%18#0)
                return 
        
        subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: bool, false: bool) -> void:
            block@0: // L125
                let tmp%1#0: bool = (|| false#0 1u)
                (assert tmp%1#0)
                goto true#0 ? block@2 : block@3
            block@2: // bool_true_L128
                let or_result%0#0: bool = 1u
                goto block@4
            block@3: // bool_false_L128
                let or_result%0#1: bool = 0u
                goto block@4
            block@4: // bool_merge_L128
                let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
                (assert or_result%0#2)
                let awst_tmp%0#0: uint64 = (* false#0 3u)
                goto awst_tmp%0#0 ? block@9 : block@10
            block@9: // ternary_true_L131
                goto block@11
            block@10: // ternary_false_L131
                let ternary_result%0#1: uint64 = 4u
                goto block@11
            block@11: // ternary_merge_L131
                let y#0: uint64 = φ(awst_tmp%0#0 <- block@9, ternary_result%0#1 <- block@10)
                let tmp%7#0: bool = (== y#0 4u)
                (assert tmp%7#0)
                let ternary_result%1#1: uint64 = (* true#0 3u)
                let tmp%9#0: bool = (== ternary_result%1#1 3u)
                (assert tmp%9#0)
                return 
        
        subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L12
                let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
                let tmp%7#0: bool = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L13
                return 1u
            block@4: // after_if_else_L12
                let start#2: uint64 = (+ start#1 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.boolean_binary_ops.contract.BooleanBinaryOps.clear_state_program() -> bool:
            block@0: // L15
                return 1u