#pragma version 10

test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    // boolean_binary_ops/contract.py:6
    // test_boolean_binary_ops(true=True, false=False)
    int 1
    int 0
    callsub test_boolean_binary_ops
    // boolean_binary_ops/contract.py:7
    // test_boolean_shortcircuit_binary_ops()
    callsub test_boolean_shortcircuit_binary_ops
    // boolean_binary_ops/contract.py:8
    // return True
    int 1
    return


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:
    // boolean_binary_ops/contract.py:15-16
    // @subroutine
    // def test_boolean_binary_ops(*, true: bool, false: bool) -> None:
    proto 2 0
    // boolean_binary_ops/contract.py:17
    // assert not (true and false)
    frame_dig -2
    frame_dig -1
    &&
    !
    assert
    // boolean_binary_ops/contract.py:18
    // assert not (false and true)
    frame_dig -1
    frame_dig -2
    &&
    !
    assert
    // boolean_binary_ops/contract.py:19
    // assert true and true
    frame_dig -2
    dup
    &&
    assert
    // boolean_binary_ops/contract.py:20
    // assert not (false and false)
    frame_dig -1
    dup
    &&
    !
    assert
    // boolean_binary_ops/contract.py:22
    // assert true or false
    frame_dig -2
    frame_dig -1
    ||
    assert
    // boolean_binary_ops/contract.py:23
    // assert false or true
    frame_dig -1
    frame_dig -2
    ||
    assert
    // boolean_binary_ops/contract.py:24
    // assert true or true
    frame_dig -2
    dup
    ||
    assert
    // boolean_binary_ops/contract.py:25
    // assert not (false or false)
    frame_dig -1
    dup
    ||
    !
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    // boolean_binary_ops/contract.py:33-34
    // @subroutine
    // def test_boolean_shortcircuit_binary_ops() -> None:
    proto 0 0
    int 0
    dup
    byte ""
    dupn 3
    int 0
    // boolean_binary_ops/contract.py:35
    // for lhs in (True, False):
    int 1
    b test_boolean_shortcircuit_binary_ops_for_body@3

test_boolean_shortcircuit_binary_ops_for_header_1@2:
    // boolean_binary_ops/contract.py:35
    // for lhs in (True, False):
    int 0
    frame_bury 7
    frame_dig 3
    frame_bury 6

test_boolean_shortcircuit_binary_ops_for_body@3:
    int 0
    frame_bury 4
    // boolean_binary_ops/contract.py:36
    // for rhs in (True, False):
    int 1
    frame_bury 2
    b test_boolean_shortcircuit_binary_ops_for_body@6

test_boolean_shortcircuit_binary_ops_for_header_1@5:
    // boolean_binary_ops/contract.py:36
    // for rhs in (True, False):
    int 0
    frame_bury 2
    frame_dig 5
    frame_bury 4

test_boolean_shortcircuit_binary_ops_for_body@6:
    // boolean_binary_ops/contract.py:37
    // and_msg = b"_" + bool_to_bytes(lhs) + b"_and_" + bool_to_bytes(rhs)
    frame_dig 7
    dup
    callsub bool_to_bytes
    byte 0x5f
    swap
    concat
    byte 0x5f616e645f
    concat
    frame_dig 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 0
    // boolean_binary_ops/contract.py:38
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    byte 0x6c6873
    swap
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:38-40
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    bz test_boolean_shortcircuit_binary_ops_bool_false@9
    // boolean_binary_ops/contract.py:39
    // rhs, b"rhs" + and_msg
    byte 0x726873
    frame_dig 0
    concat
    // boolean_binary_ops/contract.py:38-40
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    frame_dig 2
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@10

test_boolean_shortcircuit_binary_ops_bool_false@9:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@10:
    // boolean_binary_ops/contract.py:41
    // assert and_result == (lhs and rhs)
    frame_dig 7
    dup
    frame_dig 2
    dup
    cover 3
    &&
    uncover 3
    ==
    assert
    // boolean_binary_ops/contract.py:42
    // or_msg = b"_" + bool_to_bytes(lhs) + b"_or_" + bool_to_bytes(rhs)
    dup
    callsub bool_to_bytes
    byte 0x5f
    swap
    concat
    byte 0x5f6f725f
    concat
    uncover 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 1
    // boolean_binary_ops/contract.py:43
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    byte 0x6c6873
    swap
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:43-45
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    bnz test_boolean_shortcircuit_binary_ops_bool_true@12
    // boolean_binary_ops/contract.py:44
    // rhs, b"rhs" + or_msg
    byte 0x726873
    frame_dig 1
    concat
    // boolean_binary_ops/contract.py:43-45
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    frame_dig 2
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@13

test_boolean_shortcircuit_binary_ops_bool_true@12:
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@14

test_boolean_shortcircuit_binary_ops_bool_false@13:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@14:
    // boolean_binary_ops/contract.py:46
    // assert or_result == (lhs or rhs)
    frame_dig 7
    frame_dig 2
    ||
    ==
    assert
    frame_dig 4
    dup
    int 1
    +
    frame_bury 5
    // boolean_binary_ops/contract.py:36
    // for rhs in (True, False):
    bz test_boolean_shortcircuit_binary_ops_for_header_1@5
    frame_dig 6
    dup
    int 1
    +
    frame_bury 3
    // boolean_binary_ops/contract.py:35
    // for lhs in (True, False):
    bz test_boolean_shortcircuit_binary_ops_for_header_1@2
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:
    // boolean_binary_ops/contract.py:28-29
    // @subroutine
    // def bool_to_bytes(x: bool) -> Bytes:
    proto 1 1
    // boolean_binary_ops/contract.py:30
    // return Bytes(b"true") if x else Bytes(b"false")  # TODO: allow Bytes() outside ternary instead
    frame_dig -1
    bz bool_to_bytes_ternary_false@2
    byte 0x74727565
    b bool_to_bytes_ternary_merge@3

bool_to_bytes_ternary_false@2:
    // boolean_binary_ops/contract.py:30
    // return Bytes(b"true") if x else Bytes(b"false")  # TODO: allow Bytes() outside ternary instead
    byte 0x66616c7365

bool_to_bytes_ternary_merge@3:
    // boolean_binary_ops/contract.py:30
    // return Bytes(b"true") if x else Bytes(b"false")  # TODO: allow Bytes() outside ternary instead
    retsub


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:
    // boolean_binary_ops/contract.py:49-50
    // @subroutine
    // def log_and_return(x: bool, msg: Bytes) -> bool:
    proto 2 1
    // boolean_binary_ops/contract.py:51
    // log(msg)
    frame_dig -1
    log
    // boolean_binary_ops/contract.py:52
    // return x
    frame_dig -2
    retsub
