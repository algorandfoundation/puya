main test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    block@0: // L6
        let loop_counter%0#0: uint64 = 0u
        let lhs#0: bool = 1u
        goto block@4
    block@4: // for_body_L41
        let loop_counter%1#0: uint64 = 0u
        let rhs#0: bool = 1u
        goto block@5
    block@5: // for_body_L42
        let select%0#2: bytes = (select 0x66616c7365 0x74727565 lhs#0)
        let tmp%1#1: bytes = (concat 0x5f select%0#2)
        let tmp%2#1: bytes = (concat tmp%1#1 0x5f616e645f)
        let select%0#2: bytes = (select 0x66616c7365 0x74727565 rhs#0)
        let and_msg#0: bytes = (concat tmp%2#1 select%0#2)
        let msg#0: bytes = (concat 0x6c6873 and_msg#0)
        (log msg#0)
        goto lhs#0 ? block@6 : block@8
    block@6: // and_contd_L43
        let msg#0: bytes = (concat 0x726873 and_msg#0)
        (log msg#0)
        goto rhs#0 ? block@7 : block@8
    block@7: // bool_true_L43
        let and_result%0#0: bool = 1u
        let and_result#0: bool = and_result%0#0
        goto block@9
    block@8: // bool_false_L43
        let and_result%0#0: bool = 0u
        let and_result#0: bool = and_result%0#0
        goto block@9
    block@9: // bool_merge_L43
        let tmp%8#1: bool = (&& lhs#0 rhs#0)
        let tmp%9#1: bool = (== and_result#0 tmp%8#1)
        (assert tmp%9#1)
        let tmp%12#0: bytes = (concat tmp%1#1 0x5f6f725f)
        let or_msg#0: bytes = (concat tmp%12#0 select%0#2)
        let msg#0: bytes = (concat 0x6c6873 or_msg#0)
        (log msg#0)
        goto lhs#0 ? block@11 : block@10
    block@10: // or_contd_L48
        let msg#0: bytes = (concat 0x726873 or_msg#0)
        (log msg#0)
        goto rhs#0 ? block@11 : block@12
    block@11: // bool_true_L48
        let or_result%0#0: bool = 1u
        let or_result#0: bool = or_result%0#0
        goto block@13
    block@12: // bool_false_L48
        let or_result%0#0: bool = 0u
        let or_result#0: bool = or_result%0#0
        goto block@13
    block@13: // bool_merge_L48
        let tmp%18#0: bool = (|| lhs#0 rhs#0)
        let tmp%19#0: bool = (== or_result#0 tmp%18#0)
        (assert tmp%19#0)
        goto loop_counter%1#0 ? block@16 : block@15
    block@15: // for_header_1_L41
        let loop_counter%1#0: uint64 = 1u
        let rhs#0: bool = 0u
        goto block@5
    block@16: // after_for_L41
        goto loop_counter%0#0 ? block@19 : block@18
    block@18: // for_header_1_L40
        let loop_counter%0#0: uint64 = 1u
        let lhs#0: bool = 0u
        goto block@4
    block@19: // after_for_L40
        let item_index_internal%0#0: uint64 = 0u
        let idx#0: uint64 = item_index_internal%0#0
        goto block@68
    block@68: // for_header_L85
        let continue_looping%0#0: bool = (< idx#0 3u)
        goto continue_looping%0#0 ? block@69 : block@71
    block@69: // for_body_L86
        let item_index_internal%0#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%0#0
        goto block@68
    block@71: // after_for_L85
        let start#0: uint64 = 0u
        goto block@118
    block@118: // while_top_L11
        let tmp%1#6: uint64 = (+ start#0 4u)
        let tmp%3#6: bool = (<= tmp%1#6 5u)
        goto tmp%3#6 ? block@119 : block@122
    block@119: // while_body_L12
        let tmp%6#4: bytes = (substring3 "right" start#0 tmp%1#6)
        let tmp%7#4: bool = (== "ight" tmp%6#4)
        goto tmp%7#4 ? block@120 : block@121
    block@120: // if_body_L13
        let _puya_lib.bytes_.is_substring%0#0: bool = 1u
        let tmp%52#0: bool = _puya_lib.bytes_.is_substring%0#0
        goto block@123
    block@121: // after_if_else_L12
        let start#0: uint64 = (+ start#0 1u)
        goto block@118
    block@122: // after_while_L11
        let _puya_lib.bytes_.is_substring%0#0: bool = 0u
        let tmp%52#0: bool = _puya_lib.bytes_.is_substring%0#0
        goto block@123
    block@123: // after_inlined__puya_lib.bytes_.is_substring_L89
        (assert tmp%52#0)
        return 1u