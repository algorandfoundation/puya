main test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    block@0: // L6
        test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(1u, 0u)
        test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops()
        test_cases.boolean_binary_ops.contract.type_coercion()
        test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops()
        test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops()
        test_cases.boolean_binary_ops.contract.test_literal_conditionals(1u, 0u)
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%4#0: uint64 = (len item#0)
        let tmp%5#0: uint64 = (+ start#1 tmp%4#0)
        let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%5#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let tmp%8#0: uint64 = (+ start#1 1u)
        let start#2: uint64 = tmp%8#0
        goto block@1
    block@5: // after_while_L11
        return 0u

subroutine test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: bool, false: bool) -> void:
    block@0: // L20
        let tmp%0#0: bool = (&& true#0 false#0)
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: bool = (&& false#0 true#0)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (&& true#0 true#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (&& false#0 false#0)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: bool = (|| true#0 false#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (|| false#0 true#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = (|| true#0 true#0)
        (assert tmp%9#0)
        let tmp%10#0: bool = (|| false#0 false#0)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes(x: bool) -> bytes:
    block@0: // L33
        let select%0#0: bytes = (select 0x66616c7365 0x74727565 x#0)
        return select%0#0

subroutine test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
    block@0: // L38
        let loop_counter%0#0: uint64 = 0u
        let lhs#0: bool = 1u
        goto block@1
    block@1: // for_body_L41
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@15)
        let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@15)
        let loop_counter%1#0: uint64 = 0u
        let rhs#0: bool = 1u
        goto block@2
    block@2: // for_body_L42
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@1, loop_counter%1#2 <- block@12)
        let rhs#1: bool = φ(rhs#0 <- block@1, rhs#6 <- block@12)
        let tmp%0#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
        let tmp%1#0: bytes = (concat 0x5f tmp%0#0)
        let tmp%2#0: bytes = (concat tmp%1#0 0x5f616e645f)
        let tmp%3#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
        let tmp%4#0: bytes = (concat tmp%2#0 tmp%3#0)
        let and_msg#0: bytes = tmp%4#0
        let tmp%5#0: bytes = (concat 0x6c6873 and_msg#0)
        let tmp%6#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%5#0)
        goto tmp%6#0 ? block@3 : block@5
    block@3: // and_contd_L43
        let tmp%7#0: bytes = (concat 0x726873 and_msg#0)
        let tmp%8#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%7#0)
        goto tmp%8#0 ? block@4 : block@5
    block@4: // bool_true_L43
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L43
        let and_result%0#1: bool = 0u
        goto block@6
    block@6: // bool_merge_L43
        let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5)
        let and_result#0: bool = and_result%0#2
        let tmp%9#0: bool = (&& lhs#6 rhs#1)
        let tmp%10#0: bool = (== and_result#0 tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
        let tmp%12#0: bytes = (concat 0x5f tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 0x5f6f725f)
        let tmp%14#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
        let tmp%15#0: bytes = (concat tmp%13#0 tmp%14#0)
        let or_msg#0: bytes = tmp%15#0
        let tmp%16#0: bytes = (concat 0x6c6873 or_msg#0)
        let tmp%17#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%16#0)
        goto tmp%17#0 ? block@8 : block@7
    block@7: // or_contd_L48
        let tmp%18#0: bytes = (concat 0x726873 or_msg#0)
        let tmp%19#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%18#0)
        goto tmp%19#0 ? block@8 : block@9
    block@8: // bool_true_L48
        let or_result%0#0: bool = 1u
        goto block@10
    block@9: // bool_false_L48
        let or_result%0#1: bool = 0u
        goto block@10
    block@10: // bool_merge_L48
        let or_result%0#2: bool = φ(or_result%0#0 <- block@8, or_result%0#1 <- block@9)
        let or_result#0: bool = or_result%0#2
        let tmp%20#0: bool = (|| lhs#6 rhs#1)
        let tmp%21#0: bool = (== or_result#0 tmp%20#0)
        (assert tmp%21#0)
        goto block@11
    block@11: // for_footer_L41
        goto_nth [block@12][loop_counter%1#1] else goto block@13
    block@12: // for_header_1_L41
        let loop_counter%1#2: uint64 = 1u
        let rhs#6: bool = 0u
        goto block@2
    block@13: // after_for_L41
        goto block@14
    block@14: // for_footer_L40
        goto_nth [block@15][loop_counter%0#1] else goto block@16
    block@15: // for_header_1_L40
        let loop_counter%0#2: uint64 = 1u
        let lhs#7: bool = 0u
        goto block@1
    block@16: // after_for_L40
        return 

subroutine test_cases.boolean_binary_ops.contract.log_and_return(x: bool, msg: bytes) -> bool:
    block@0: // L54
        (log msg#0)
        return x#0

subroutine test_cases.boolean_binary_ops.contract.type_coercion() -> void:
    block@0: // L60
        let tmp%0#0: bool = (!= 0u 0u)
        let select%0#0: uint64 = (select OptIn 0u tmp%0#0)
        let b#0: uint64 = select%0#0
        let tmp%1#0: bool = (> b#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (!= appl 0u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // ternary_true_L64
        let ternary_result%0#0: uint64 = appl
        goto block@3
    block@2: // ternary_false_L64
        let tmp%3#0: bool = (!= 0u 0u)
        let select%1#0: uint64 = (select OptIn 0u tmp%3#0)
        let ternary_result%0#1: uint64 = select%1#0
        goto block@3
    block@3: // ternary_merge_L64
        let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
        let c#0: uint64 = ternary_result%0#2
        let tmp%4#0: bool = (== c#0 appl)
        (assert tmp%4#0)
        return 

subroutine test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
    block@0: // L68
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@2 : block@1
    block@1: // or_contd_L70
        let tmp%2#0: bool = (!= 1u 0u)
        goto tmp%2#0 ? block@2 : block@3
    block@2: // bool_true_L70
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L70
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L70
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        let ok#0: bool = or_result%0#2
        (assert ok#0)
        let x#0: uint64 = 0u
        let y#0: bytes = 0x79
        let z#0: string = "z"
        let tmp%3#0: bool = (!= x#0 0u)
        goto tmp%3#0 ? block@8 : block@5
    block@5: // or_contd_L76
        let tmp%4#0: uint64 = (len y#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@8 : block@6
    block@6: // or_contd_L76
        let tmp%6#0: uint64 = (len y#0)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@7
    block@7: // or_contd_L76
        let tmp%8#0: uint64 = (len z#0)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        goto tmp%9#0 ? block@8 : block@9
    block@8: // bool_true_L76
        let or_result%1#0: bool = 1u
        goto block@10
    block@9: // bool_false_L76
        let or_result%1#1: bool = 0u
        goto block@10
    block@10: // bool_merge_L76
        let or_result%1#2: bool = φ(or_result%1#0 <- block@8, or_result%1#1 <- block@9)
        (assert or_result%1#2)
        let tmp%10#0: bool = (!= x#0 0u)
        goto tmp%10#0 ? block@12 : block@11
    block@11: // or_contd_L77
        let tmp%11#0: uint64 = (len y#0)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        goto tmp%12#0 ? block@12 : block@15
    block@12: // and_contd_L77
        let tmp%13#0: bool = (!= x#0 0u)
        goto tmp%13#0 ? block@14 : block@13
    block@13: // or_contd_L77
        let tmp%14#0: uint64 = (len y#0)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        goto tmp%15#0 ? block@14 : block@15
    block@14: // bool_true_L77
        let and_result%0#0: bool = 1u
        goto block@16
    block@15: // bool_false_L77
        let and_result%0#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L77
        let and_result%0#2: bool = φ(and_result%0#0 <- block@14, and_result%0#1 <- block@15)
        (assert and_result%0#2)
        let tmp%16#0: bool = (!= x#0 0u)
        goto tmp%16#0 ? block@19 : block@17
    block@17: // or_contd_L78
        let tmp%17#0: uint64 = (len y#0)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        goto tmp%18#0 ? block@19 : block@18
    block@18: // or_contd_L78
        let tmp%19#0: uint64 = (len z#0)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        goto tmp%20#0 ? block@19 : block@20
    block@19: // bool_true_L78
        let or_result%2#0: bool = 1u
        goto block@21
    block@20: // bool_false_L78
        let or_result%2#1: bool = 0u
        goto block@21
    block@21: // bool_merge_L78
        let or_result%2#2: bool = φ(or_result%2#0 <- block@19, or_result%2#1 <- block@20)
        (assert or_result%2#2)
        let tmp%21#0: bool = (!= x#0 0u)
        goto tmp%21#0 ? block@24 : block@22
    block@22: // or_contd_L79
        let tmp%22#0: uint64 = (len y#0)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        goto tmp%23#0 ? block@24 : block@23
    block@23: // or_contd_L79
        let tmp%24#0: uint64 = (len z#0)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        goto tmp%25#0 ? block@24 : block@25
    block@24: // bool_true_L79
        let or_result%3#0: bool = 1u
        goto block@26
    block@25: // bool_false_L79
        let or_result%3#1: bool = 0u
        goto block@26
    block@26: // bool_merge_L79
        let or_result%3#2: bool = φ(or_result%3#0 <- block@24, or_result%3#1 <- block@25)
        (assert or_result%3#2)
        let tmp%26#0: uint64 = (len "ri")
        let tmp%27#0: uint64 = (len "left")
        let tmp%28#0: bool = (== tmp%27#0 0u)
        goto tmp%28#0 ? block@27 : block@28
    block@27: // ternary_true_L81
        let ternary_result%1#0: string = "left"
        goto block@29
    block@28: // ternary_false_L81
        let ternary_result%1#1: string = "right"
        goto block@29
    block@29: // ternary_merge_L81
        let ternary_result%1#2: string = φ(ternary_result%1#0 <- block@27, ternary_result%1#1 <- block@28)
        let tmp%29#0: uint64 = (len ternary_result%1#2)
        let tmp%30#0: bool = (> tmp%26#0 tmp%29#0)
        goto tmp%30#0 ? block@30 : block@31
    block@30: // ternary_true_L81
        let ternary_result%0#0: bool = 0u
        goto block@32
    block@31: // ternary_false_L81
        let tmp%31#0: string = (extract3 ternary_result%1#2 0u tmp%26#0)
        let ternary_result%0#1: bool = (== tmp%31#0 "ri")
        goto block@32
    block@32: // ternary_merge_L81
        let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@30, ternary_result%0#1 <- block@31)
        (assert ternary_result%0#2)
        let tmp%32#0: uint64 = (len "le")
        let tmp%33#0: bool = (== tmp%32#0 0u)
        goto tmp%33#0 ? block@33 : block@34
    block@33: // ternary_true_L82
        let ternary_result%3#0: string = "le"
        goto block@35
    block@34: // ternary_false_L82
        let ternary_result%3#1: string = "ri"
        goto block@35
    block@35: // ternary_merge_L82
        let ternary_result%3#2: string = φ(ternary_result%3#0 <- block@33, ternary_result%3#1 <- block@34)
        let tmp%34#0: uint64 = (len ternary_result%3#2)
        let tmp%35#0: uint64 = (len "right")
        let tmp%36#0: bool = (> tmp%34#0 tmp%35#0)
        goto tmp%36#0 ? block@36 : block@37
    block@36: // ternary_true_L82
        let ternary_result%2#0: bool = 0u
        goto block@41
    block@37: // ternary_false_L82
        let tmp%37#0: string = (extract3 "right" 0u tmp%34#0)
        let tmp%38#0: uint64 = (len "le")
        let tmp%39#0: bool = (== tmp%38#0 0u)
        goto tmp%39#0 ? block@38 : block@39
    block@38: // ternary_true_L82
        let ternary_result%4#0: string = "le"
        goto block@40
    block@39: // ternary_false_L82
        let ternary_result%4#1: string = "ri"
        goto block@40
    block@40: // ternary_merge_L82
        let ternary_result%4#2: string = φ(ternary_result%4#0 <- block@38, ternary_result%4#1 <- block@39)
        let ternary_result%2#1: bool = (== tmp%37#0 ternary_result%4#2)
        goto block@41
    block@41: // ternary_merge_L82
        let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@36, ternary_result%2#1 <- block@40)
        (assert ternary_result%2#2)
        let bytes_to_iterate#0: bytes = 0x616263
        let tmp%40#0: uint64 = (len 0x6e65766572207365656e)
        let tmp%41#0: bool = (== tmp%40#0 0u)
        let select%0#0: bytes = (select bytes_to_iterate#0 0x6e65766572207365656e tmp%41#0)
        let bytes_length%0#0: uint64 = (len select%0#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = bytes_length%0#0
        goto block@42
    block@42: // for_header_L85
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@41, item_index_internal%0#2 <- block@44)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
        goto continue_looping%0#0 ? block@43 : block@45
    block@43: // for_body_L86
        let b#0: bytes = (extract3 select%0#0 item_index_internal%0#1 1u)
        let idx#0: uint64 = item_index_internal%0#1
        let extract%0#0: bytes = (extract3 bytes_to_iterate#0 idx#0 1u)
        let tmp%42#0: bool = (== b#0 extract%0#0)
        (assert tmp%42#0)
        goto block@44
    block@44: // for_footer_L85
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@42
    block@45: // after_for_L85
        let tmp%43#0: uint64 = (len 0x6c656674)
        let tmp%44#0: bool = (== tmp%43#0 0u)
        let select%1#0: bytes = (select 0x7269676874 0x6c656674 tmp%44#0)
        let extract%1#0: bytes = (extract3 select%1#0 1u 1u)
        let tmp%45#0: bool = (== extract%1#0 0x69)
        (assert tmp%45#0)
        let tmp%46#0: uint64 = (len 0x6c656674)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        let select%2#0: bytes = (select 0x7269676874 0x6c656674 tmp%47#0)
        let length%0#0: uint64 = (len select%2#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 2u length%0#0)
        let bounded_index%1#0: uint64 = (select 2u length%0#0 is_out_of_bounds%1#0)
        let tmp%48#0: bytes = (substring3 select%2#0 bounded_index%0#0 bounded_index%1#0)
        let tmp%49#0: bool = (== tmp%48#0 0x6c65)
        (assert tmp%49#0)
        let tmp%50#0: uint64 = (len "left")
        let tmp%51#0: bool = (== tmp%50#0 0u)
        goto tmp%51#0 ? block@46 : block@47
    block@46: // ternary_true_L89
        let ternary_result%5#0: string = "left"
        goto block@48
    block@47: // ternary_false_L89
        let ternary_result%5#1: string = "right"
        goto block@48
    block@48: // ternary_merge_L89
        let ternary_result%5#2: string = φ(ternary_result%5#0 <- block@46, ternary_result%5#1 <- block@47)
        let tmp%52#0: bool = _puya_lib.bytes_.is_substring("ight", ternary_result%5#2)
        (assert tmp%52#0)
        let tmp%53#0: bool = (== 1u 0u)
        let select%3#0: uint64 = (select 2u 1u tmp%53#0)
        let tmp%54#0: uint64 = (+ select%3#0 3u)
        let tmp%55#0: bool = (== tmp%54#0 5u)
        (assert tmp%55#0)
        let tmp%56#0: bool = (!= 1u 0u)
        let select%4#0: uint64 = (select 2u 1u tmp%56#0)
        let tmp%57#0: uint64 = (~ select%4#0)
        let tmp%58#0: uint64 = (~ 1u)
        let tmp%59#0: bool = (== tmp%57#0 tmp%58#0)
        (assert tmp%59#0)
        return 

subroutine test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
    block@0: // L95
        let tmp%0#0: bool = (!= 0u 0u)
        let tmp%1#0: bool = (|| tmp%0#0 1u)
        (assert tmp%1#0)
        goto 0u ? block@2 : block@1
    block@1: // or_contd_L100
        let tmp%2#0: uint64 = (len 0x616263)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        goto tmp%3#0 ? block@2 : block@3
    block@2: // bool_true_L100
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L100
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L100
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        let a#0: bool = 1u
        let b#0: bool = 1u
        let tmp%4#0: bool = (!= 0u 0u)
        let tmp%5#0: bool = (|| tmp%4#0 1u)
        let c#0: bool = tmp%5#0
        goto 0u ? block@6 : block@5
    block@5: // or_contd_L105
        let tmp%6#0: uint64 = (len 0x616263)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        goto tmp%7#0 ? block@6 : block@7
    block@6: // bool_true_L105
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L105
        let or_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L105
        let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7)
        let d#0: bool = or_result%1#2
        goto a#0 ? block@9 : block@13
    block@9: // and_contd_L106
        goto b#0 ? block@10 : block@13
    block@10: // and_contd_L106
        goto c#0 ? block@11 : block@13
    block@11: // and_contd_L106
        goto d#0 ? block@12 : block@13
    block@12: // bool_true_L106
        let and_result%0#0: bool = 1u
        goto block@14
    block@13: // bool_false_L106
        let and_result%0#1: bool = 0u
        goto block@14
    block@14: // bool_merge_L106
        let and_result%0#2: bool = φ(and_result%0#0 <- block@12, and_result%0#1 <- block@13)
        (assert and_result%0#2)
        goto 0u ? block@15 : block@16
    block@15: // if_body_L109
        fail
    block@16: // after_if_else_L108
        goto 0u ? block@17 : block@18
    block@17: // if_body_L111
        fail
    block@18: // after_if_else_L110
        let tmp%8#0: bool = (!= 0u 0u)
        goto tmp%8#0 ? block@20 : block@19
    block@19: // or_contd_L112
        goto 0u ? block@20 : block@21
    block@20: // if_body_L113
        fail
    block@21: // after_if_else_L112
        goto 0u ? block@23 : block@22
    block@22: // or_contd_L114
        let tmp%9#0: uint64 = (len 0x)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        goto tmp%10#0 ? block@23 : block@24
    block@23: // if_body_L115
        fail
    block@24: // after_if_else_L114
        let tmp%11#0: bool = (== 2u 2u)
        (assert tmp%11#0)
        let one#0: uint64 = 1u
        let tmp%12#0: bool = (== one#0 0u)
        let select%0#0: uint64 = (select 4u one#0 tmp%12#0)
        let tmp%13#0: uint64 = (bitlen select%0#0)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0)
        let empty_bytes#0: bytes = 0x
        let tmp%15#0: uint64 = (len empty_bytes#0)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        let select%1#0: bytes = (select 0x68656c6c6f empty_bytes#0 tmp%16#0)
        let tmp%17#0: uint64 = (bitlen select%1#0)
        let tmp%18#0: bool = (> tmp%17#0 0u)
        (assert tmp%18#0)
        return 

subroutine test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: bool, false: bool) -> void:
    block@0: // L125
        let select%0#0: bool = (select 0u 1u false#0)
        let tmp%0#0: bool = (|| select%0#0 1u)
        (assert tmp%0#0)
        goto 0u ? block@2 : block@1
    block@1: // or_contd_L128
        let select%1#0: bool = (select 0u 1u true#0)
        goto select%1#0 ? block@2 : block@3
    block@2: // bool_true_L128
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L128
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L128
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        goto 1u ? block@6 : block@5
    block@5: // or_contd_L129
        let select%2#0: bool = (select 0u 1u true#0)
        goto select%2#0 ? block@6 : block@7
    block@6: // bool_true_L129
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L129
        let or_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L129
        let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7)
        (assert or_result%1#2)
        let select%3#0: bool = (select 0u 1u false#0)
        let tmp%1#0: bool = (|| select%3#0 1u)
        (assert tmp%1#0)
        let select%4#0: uint64 = (select 0u 3u false#0)
        let tmp%2#0: bool = (!= select%4#0 0u)
        goto tmp%2#0 ? block@9 : block@10
    block@9: // ternary_true_L131
        let ternary_result%0#0: uint64 = select%4#0
        goto block@11
    block@10: // ternary_false_L131
        let ternary_result%0#1: uint64 = 4u
        goto block@11
    block@11: // ternary_merge_L131
        let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@9, ternary_result%0#1 <- block@10)
        let y#0: uint64 = ternary_result%0#2
        let tmp%3#0: bool = (== y#0 4u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (!= 0u 0u)
        goto tmp%4#0 ? block@12 : block@13
    block@12: // ternary_true_L133
        let ternary_result%1#0: uint64 = 0u
        goto block@14
    block@13: // ternary_false_L133
        let select%5#0: uint64 = (select 0u 3u true#0)
        let ternary_result%1#1: uint64 = select%5#0
        goto block@14
    block@14: // ternary_merge_L133
        let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@12, ternary_result%1#1 <- block@13)
        let z#0: uint64 = ternary_result%1#2
        let tmp%5#0: bool = (== z#0 3u)
        (assert tmp%5#0)
        return 