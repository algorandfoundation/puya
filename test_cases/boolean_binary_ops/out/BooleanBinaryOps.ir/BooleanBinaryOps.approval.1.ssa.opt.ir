main test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    block@0: // L6
        let loop_counter%0#0: uint64 = 0u
        let lhs#0: bool = 1u
        goto block@4
    block@4: // for_body_L41
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@18)
        let lhs#6: bool = φ(lhs#0 <- block@0, lhs#7 <- block@18)
        let loop_counter%1#0: uint64 = 0u
        let rhs#0: bool = 1u
        goto block@5
    block@5: // for_body_L42
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@4, loop_counter%1#2 <- block@15)
        let rhs#1: bool = φ(rhs#0 <- block@4, rhs#6 <- block@15)
        let tmp%0#1: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
        let tmp%1#1: bytes = (concat 0x5f tmp%0#1)
        let tmp%2#1: bytes = (concat tmp%1#1 0x5f616e645f)
        let tmp%3#1: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
        let and_msg#0: bytes = (concat tmp%2#1 tmp%3#1)
        let tmp%4#1: bytes = (concat 0x6c6873 and_msg#0)
        let tmp%5#1: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%4#1)
        goto tmp%5#1 ? block@6 : block@8
    block@6: // and_contd_L43
        let tmp%6#1: bytes = (concat 0x726873 and_msg#0)
        let tmp%7#1: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%6#1)
        goto tmp%7#1 ? block@7 : block@8
    block@7: // bool_true_L43
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L43
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L43
        let and_result#0: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        let tmp%8#1: bool = (&& lhs#6 rhs#1)
        let tmp%9#1: bool = (== and_result#0 tmp%8#1)
        (assert tmp%9#1)
        let tmp%10#1: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(lhs#6)
        let tmp%11#1: bytes = (concat 0x5f tmp%10#1)
        let tmp%12#0: bytes = (concat tmp%11#1 0x5f6f725f)
        let tmp%13#0: bytes = test_cases.boolean_binary_ops.contract.bool_to_bytes(rhs#1)
        let or_msg#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%14#0: bytes = (concat 0x6c6873 or_msg#0)
        let tmp%15#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(lhs#6, tmp%14#0)
        goto tmp%15#0 ? block@11 : block@10
    block@10: // or_contd_L48
        let tmp%16#0: bytes = (concat 0x726873 or_msg#0)
        let tmp%17#0: bool = test_cases.boolean_binary_ops.contract.log_and_return(rhs#1, tmp%16#0)
        goto tmp%17#0 ? block@11 : block@12
    block@11: // bool_true_L48
        let or_result%0#0: bool = 1u
        goto block@13
    block@12: // bool_false_L48
        let or_result%0#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L48
        let or_result#0: bool = φ(or_result%0#0 <- block@11, or_result%0#1 <- block@12)
        let tmp%18#0: bool = (|| lhs#6 rhs#1)
        let tmp%19#0: bool = (== or_result#0 tmp%18#0)
        (assert tmp%19#0)
        goto loop_counter%1#1 ? block@16 : block@15
    block@15: // for_header_1_L41
        let loop_counter%1#2: uint64 = 1u
        let rhs#6: bool = 0u
        goto block@5
    block@16: // after_for_L41
        goto loop_counter%0#1 ? block@19 : block@18
    block@18: // for_header_1_L40
        let loop_counter%0#2: uint64 = 1u
        let lhs#7: bool = 0u
        goto block@4
    block@19: // after_for_L40
        let ternary_result%0#0: uint64 = appl
        goto block@24
    block@24: // ternary_merge_L64
        let tmp%4#2: bool = (== ternary_result%0#0 appl)
        (assert tmp%4#2)
        let or_result%0#3: bool = 1u
        goto block@30
    block@30: // bool_merge_L70
        (assert or_result%0#3)
        goto block@34
    block@34: // bool_true_L76
        let or_result%1#0: bool = 1u
        goto block@36
    block@36: // bool_merge_L76
        (assert or_result%1#0)
        let and_result%0#3: bool = 1u
        goto block@42
    block@42: // bool_merge_L77
        (assert and_result%0#3)
        goto block@45
    block@45: // bool_true_L78
        let or_result%2#0: bool = 1u
        goto block@47
    block@47: // bool_merge_L78
        (assert or_result%2#0)
        goto block@50
    block@50: // bool_true_L79
        let or_result%3#0: bool = 1u
        goto block@52
    block@52: // bool_merge_L79
        (assert or_result%3#0)
        let ternary_result%1#1: bytes = "right"
        goto block@55
    block@55: // ternary_merge_L81
        let tmp%29#0: uint64 = (len ternary_result%1#1)
        let tmp%30#0: bool = (> 2u tmp%29#0)
        goto tmp%30#0 ? block@56 : block@57
    block@56: // ternary_true_L81
        let ternary_result%0#3: bool = 0u
        goto block@58
    block@57: // ternary_false_L81
        let tmp%31#0: bytes = ((extract 0 2) ternary_result%1#1)
        let ternary_result%0#4: bool = (== tmp%31#0 "ri")
        goto block@58
    block@58: // ternary_merge_L81
        let ternary_result%0#5: bool = φ(ternary_result%0#3 <- block@56, ternary_result%0#4 <- block@57)
        (assert ternary_result%0#5)
        let ternary_result%3#1: bytes = "ri"
        goto block@61
    block@61: // ternary_merge_L82
        let tmp%34#0: uint64 = (len ternary_result%3#1)
        let tmp%36#0: bool = (> tmp%34#0 5u)
        goto tmp%36#0 ? block@62 : block@63
    block@62: // ternary_true_L82
        let ternary_result%2#0: bool = 0u
        goto block@67
    block@63: // ternary_false_L82
        let tmp%37#0: bytes = (extract3 "right" 0u tmp%34#0)
        let ternary_result%4#1: bytes = "ri"
        goto block@66
    block@66: // ternary_merge_L82
        let ternary_result%2#1: bool = (== tmp%37#0 ternary_result%4#1)
        goto block@67
    block@67: // ternary_merge_L82
        let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@62, ternary_result%2#1 <- block@66)
        (assert ternary_result%2#2)
        let item_index_internal%0#0: uint64 = 0u
        goto block@68
    block@68: // for_header_L85
        let idx#0: uint64 = φ(item_index_internal%0#0 <- block@67, item_index_internal%0#2 <- block@69)
        let continue_looping%0#0: bool = (< idx#0 3u)
        goto continue_looping%0#0 ? block@69 : block@71
    block@69: // for_body_L86
        let b#1: bytes = (extract3 0x616263 idx#0 1u)
        let tmp%44#0: bool = (== b#1 b#1)
        (assert tmp%44#0)
        let item_index_internal%0#2: uint64 = (+ idx#0 1u)
        goto block@68
    block@71: // after_for_L85
        let ternary_result%5#1: bytes = "right"
        goto block@74
    block@74: // ternary_merge_L89
        let tmp%57#0: bool = _puya_lib.bytes_.is_substring("ight", ternary_result%5#1)
        (assert tmp%57#0)
        let or_result%0#6: bool = 1u
        goto block@80
    block@80: // bool_merge_L100
        (assert or_result%0#6)
        let or_result%1#3: bool = 1u
        goto block@84
    block@84: // bool_merge_L105
        goto or_result%1#3 ? block@88 : block@89
    block@88: // bool_true_L106
        let and_result%0#6: bool = 1u
        goto block@90
    block@89: // bool_false_L106
        let and_result%0#7: bool = 0u
        goto block@90
    block@90: // bool_merge_L106
        let and_result%0#8: bool = φ(and_result%0#6 <- block@88, and_result%0#7 <- block@89)
        (assert and_result%0#8)
        let or_result%0#9: bool = 1u
        goto block@106
    block@106: // bool_merge_L128
        (assert or_result%0#9)
        goto block@108
    block@108: // bool_true_L129
        let or_result%1#6: bool = 1u
        goto block@110
    block@110: // bool_merge_L129
        (assert or_result%1#6)
        let awst_tmp%0#0: uint64 = 0u
        let ternary_result%0#7: uint64 = 4u
        goto block@113
    block@113: // ternary_merge_L131
        let tmp%7#4: bool = (== ternary_result%0#7 4u)
        (assert tmp%7#4)
        let ternary_result%1#4: uint64 = 3u
        goto block@116
    block@116: // ternary_merge_L133
        let tmp%9#4: bool = (== ternary_result%1#4 3u)
        (assert tmp%9#4)
        return 1u

subroutine test_cases.boolean_binary_ops.contract.bool_to_bytes(x: bool) -> bytes:
    block@0: // L33
        let tmp%0#0: bytes = (select 0x66616c7365 0x74727565 x#0)
        return tmp%0#0

subroutine test_cases.boolean_binary_ops.contract.log_and_return(x: bool, msg: bytes) -> bool:
    block@0: // L54
        (log msg#0)
        return x#0

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4)
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%1#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let start#2: uint64 = (+ start#1 1u)
        goto block@1
    block@5: // after_while_L11
        return 0u