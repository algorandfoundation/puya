#pragma version 10
#pragma typetrack false

// test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program() -> uint64:
main:
    intcblock 0 1 2 3
    bytecblock 0x 0x6c656674 0x79 0x7269676874 0x6c65 "ri" 0x616263 "z" 0x6c6873 0x726873 0x6e65766572207365656e

main_block@0:
    // boolean_binary_ops/contract.py:7
    // test_boolean_binary_ops(true=True, false=False)
    intc_1 // 1
    intc_0 // 0
    callsub test_boolean_binary_ops
    // boolean_binary_ops/contract.py:8
    // test_boolean_shortcircuit_binary_ops()
    callsub test_boolean_shortcircuit_binary_ops
    // boolean_binary_ops/contract.py:9
    // type_coercion()
    callsub type_coercion
    // boolean_binary_ops/contract.py:10
    // test_union_boolean_binary_ops()
    callsub test_union_boolean_binary_ops
    // boolean_binary_ops/contract.py:11
    // test_literal_boolean_binary_ops()
    callsub test_literal_boolean_binary_ops
    // boolean_binary_ops/contract.py:12
    // test_literal_conditionals(true=True, false=False)
    intc_1 // 1
    intc_0 // 0
    callsub test_literal_conditionals
    // boolean_binary_ops/contract.py:13
    // return True
    intc_1 // 1
    return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1

is_substring_block@0:
    intc_0 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 0
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5

is_substring_while_body@2:
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4

is_substring_if_body@3:
    intc_1 // 1
    swap
    retsub

is_substring_after_if_else@4:
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_0 // 0
    swap
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:
    // boolean_binary_ops/contract.py:20-21
    // @subroutine
    // def test_boolean_binary_ops(*, true: bool, false: bool) -> None:
    proto 2 0

test_boolean_binary_ops_block@0:
    // boolean_binary_ops/contract.py:22
    // assert not (true and false)
    frame_dig -2
    frame_dig -1
    &&
    !
    assert
    // boolean_binary_ops/contract.py:23
    // assert not (false and true)
    frame_dig -1
    frame_dig -2
    &&
    !
    assert
    // boolean_binary_ops/contract.py:24
    // assert true and true
    frame_dig -2
    dup
    &&
    assert
    // boolean_binary_ops/contract.py:25
    // assert not (false and false)
    frame_dig -1
    dup
    &&
    !
    assert
    // boolean_binary_ops/contract.py:27
    // assert true or false
    frame_dig -2
    frame_dig -1
    ||
    assert
    // boolean_binary_ops/contract.py:28
    // assert false or true
    frame_dig -1
    frame_dig -2
    ||
    assert
    // boolean_binary_ops/contract.py:29
    // assert true or true
    frame_dig -2
    dup
    ||
    assert
    // boolean_binary_ops/contract.py:30
    // assert not (false or false)
    frame_dig -1
    dup
    ||
    !
    assert
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:
    // boolean_binary_ops/contract.py:33-34
    // @subroutine
    // def bool_to_bytes(x: bool) -> Bytes:
    proto 1 1

bool_to_bytes_block@0:
    // boolean_binary_ops/contract.py:35
    // return Bytes(b"true" if x else b"false")
    pushbytes 0x66616c7365
    pushbytes 0x74727565
    frame_dig -1
    select
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    // boolean_binary_ops/contract.py:38-39
    // @subroutine
    // def test_boolean_shortcircuit_binary_ops() -> None:
    proto 0 0
    intc_0 // 0
    dup
    bytec_0 // ""
    dup

test_boolean_shortcircuit_binary_ops_block@0:
    intc_0 // 0
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    intc_1 // 1

test_boolean_shortcircuit_binary_ops_for_body@1:
    intc_0 // 0
    frame_bury 2
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    intc_1 // 1
    frame_bury 3

test_boolean_shortcircuit_binary_ops_for_body@2:
    // boolean_binary_ops/contract.py:42
    // and_msg = b"_" + bool_to_bytes(lhs) + b"_and_" + bool_to_bytes(rhs)
    frame_dig 5
    dup
    callsub bool_to_bytes
    pushbytes 0x5f
    swap
    concat
    pushbytes 0x5f616e645f
    concat
    frame_dig 3
    callsub bool_to_bytes
    concat
    dup
    frame_bury 0
    // boolean_binary_ops/contract.py:43
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    bytec 8 // 0x6c6873
    swap
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:43-45
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    bz test_boolean_shortcircuit_binary_ops_bool_false@5

test_boolean_shortcircuit_binary_ops_and_contd@3:
    // boolean_binary_ops/contract.py:44
    // rhs, b"rhs" + and_msg
    bytec 9 // 0x726873
    frame_dig 0
    concat
    // boolean_binary_ops/contract.py:43-45
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    frame_dig 3
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@5

test_boolean_shortcircuit_binary_ops_bool_true@4:
    intc_1 // 1

test_boolean_shortcircuit_binary_ops_bool_merge@6:
    // boolean_binary_ops/contract.py:46
    // assert and_result == (lhs and rhs)
    frame_dig 5
    dup
    cover 2
    frame_dig 3
    dup
    cover 4
    &&
    ==
    assert
    // boolean_binary_ops/contract.py:47
    // or_msg = b"_" + bool_to_bytes(lhs) + b"_or_" + bool_to_bytes(rhs)
    dup
    callsub bool_to_bytes
    pushbytes 0x5f
    swap
    concat
    pushbytes 0x5f6f725f
    concat
    uncover 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 1
    // boolean_binary_ops/contract.py:48
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    bytec 8 // 0x6c6873
    swap
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:48-50
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    bnz test_boolean_shortcircuit_binary_ops_bool_true@8

test_boolean_shortcircuit_binary_ops_or_contd@7:
    // boolean_binary_ops/contract.py:49
    // rhs, b"rhs" + or_msg
    bytec 9 // 0x726873
    frame_dig 1
    concat
    // boolean_binary_ops/contract.py:48-50
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    frame_dig 3
    swap
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9

test_boolean_shortcircuit_binary_ops_bool_true@8:
    intc_1 // 1

test_boolean_shortcircuit_binary_ops_bool_merge@10:
    // boolean_binary_ops/contract.py:51
    // assert or_result == (lhs or rhs)
    frame_dig 5
    frame_dig 3
    ||
    ==
    assert

test_boolean_shortcircuit_binary_ops_for_footer@11:
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    frame_dig 2
    switch test_boolean_shortcircuit_binary_ops_for_header_1@12

test_boolean_shortcircuit_binary_ops_after_for@13:

test_boolean_shortcircuit_binary_ops_for_footer@14:
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    frame_dig 4
    switch test_boolean_shortcircuit_binary_ops_for_header_1@15

test_boolean_shortcircuit_binary_ops_after_for@16:
    retsub

test_boolean_shortcircuit_binary_ops_for_header_1@15:
    intc_1 // 1
    frame_bury 4
    // boolean_binary_ops/contract.py:40
    // for lhs in (True, False):
    intc_0 // 0
    frame_bury 5
    b test_boolean_shortcircuit_binary_ops_for_body@1

test_boolean_shortcircuit_binary_ops_for_header_1@12:
    intc_1 // 1
    frame_bury 2
    // boolean_binary_ops/contract.py:41
    // for rhs in (True, False):
    intc_0 // 0
    frame_bury 3
    b test_boolean_shortcircuit_binary_ops_for_body@2

test_boolean_shortcircuit_binary_ops_bool_false@9:
    intc_0 // 0
    b test_boolean_shortcircuit_binary_ops_bool_merge@10

test_boolean_shortcircuit_binary_ops_bool_false@5:
    intc_0 // 0
    b test_boolean_shortcircuit_binary_ops_bool_merge@6


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:
    // boolean_binary_ops/contract.py:54-55
    // @subroutine
    // def log_and_return(x: bool, msg: Bytes) -> bool:
    proto 2 1

log_and_return_block@0:
    // boolean_binary_ops/contract.py:56
    // log(msg)
    frame_dig -1
    log
    // boolean_binary_ops/contract.py:57
    // return x
    frame_dig -2
    retsub


// test_cases.boolean_binary_ops.contract.type_coercion() -> void:
type_coercion:

type_coercion_block@0:
    // boolean_binary_ops/contract.py:62
    // b = UInt64(0) or OnCompleteAction.OptIn
    intc_0 // 0
    dup
    !=
    intc_1 // OptIn
    intc_0 // 0
    uncover 2
    select
    // boolean_binary_ops/contract.py:63
    // assert b > 0
    intc_0 // 0
    >
    assert
    // boolean_binary_ops/contract.py:64
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    pushint 6 // appl
    intc_0 // 0
    !=
    bz type_coercion_ternary_false@2

type_coercion_ternary_true@1:
    // boolean_binary_ops/contract.py:64
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    pushint 6 // appl

type_coercion_ternary_merge@3:
    // boolean_binary_ops/contract.py:65
    // assert c == TransactionType.ApplicationCall
    pushint 6 // appl
    ==
    assert
    retsub

type_coercion_ternary_false@2:
    // boolean_binary_ops/contract.py:64
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    intc_0 // 0
    dup
    !=
    intc_1 // OptIn
    intc_0 // 0
    uncover 2
    select
    b type_coercion_ternary_merge@3


// test_cases.boolean_binary_ops.contract.test_union_boolean_binary_ops() -> void:
test_union_boolean_binary_ops:
    // boolean_binary_ops/contract.py:68-69
    // @subroutine
    // def test_union_boolean_binary_ops() -> None:
    proto 0 0
    intc_0 // 0
    dupn 2
    bytec_0 // ""
    dupn 3

test_union_boolean_binary_ops_block@0:
    // boolean_binary_ops/contract.py:70
    // ok = bool(Bytes() or UInt64(1))
    bytec_0 // 0x
    len
    intc_0 // 0
    !=
    bnz test_union_boolean_binary_ops_bool_true@2

test_union_boolean_binary_ops_or_contd@1:
    // boolean_binary_ops/contract.py:70
    // ok = bool(Bytes() or UInt64(1))
    intc_1 // 1
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@3

test_union_boolean_binary_ops_bool_true@2:
    intc_1 // 1

test_union_boolean_binary_ops_bool_merge@4:
    // boolean_binary_ops/contract.py:71
    // assert ok
    assert
    // boolean_binary_ops/contract.py:73
    // x = UInt64(0)
    intc_0 // 0
    // boolean_binary_ops/contract.py:76
    // assert (x or y) or (y or z)
    dup
    !=
    bnz test_union_boolean_binary_ops_bool_true@8

test_union_boolean_binary_ops_or_contd@5:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:76
    // assert (x or y) or (y or z)
    len
    intc_0 // 0
    !=
    bnz test_union_boolean_binary_ops_bool_true@8

test_union_boolean_binary_ops_or_contd@6:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:76
    // assert (x or y) or (y or z)
    len
    intc_0 // 0
    !=
    bnz test_union_boolean_binary_ops_bool_true@8

test_union_boolean_binary_ops_or_contd@7:
    // boolean_binary_ops/contract.py:75
    // z = String("z")
    bytec 7 // "z"
    // boolean_binary_ops/contract.py:76
    // assert (x or y) or (y or z)
    len
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@9

test_union_boolean_binary_ops_bool_true@8:
    intc_1 // 1

test_union_boolean_binary_ops_bool_merge@10:
    // boolean_binary_ops/contract.py:76
    // assert (x or y) or (y or z)
    assert
    // boolean_binary_ops/contract.py:73
    // x = UInt64(0)
    intc_0 // 0
    // boolean_binary_ops/contract.py:77
    // assert (x or y) and (x or y)
    dup
    !=
    bnz test_union_boolean_binary_ops_and_contd@12

test_union_boolean_binary_ops_or_contd@11:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:77
    // assert (x or y) and (x or y)
    len
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@15

test_union_boolean_binary_ops_and_contd@12:
    // boolean_binary_ops/contract.py:73
    // x = UInt64(0)
    intc_0 // 0
    // boolean_binary_ops/contract.py:77
    // assert (x or y) and (x or y)
    dup
    !=
    bnz test_union_boolean_binary_ops_bool_true@14

test_union_boolean_binary_ops_or_contd@13:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:77
    // assert (x or y) and (x or y)
    len
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@15

test_union_boolean_binary_ops_bool_true@14:
    intc_1 // 1

test_union_boolean_binary_ops_bool_merge@16:
    // boolean_binary_ops/contract.py:77
    // assert (x or y) and (x or y)
    assert
    // boolean_binary_ops/contract.py:73
    // x = UInt64(0)
    intc_0 // 0
    // boolean_binary_ops/contract.py:78
    // assert x or (y or z)
    dup
    !=
    bnz test_union_boolean_binary_ops_bool_true@19

test_union_boolean_binary_ops_or_contd@17:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:78
    // assert x or (y or z)
    len
    intc_0 // 0
    !=
    bnz test_union_boolean_binary_ops_bool_true@19

test_union_boolean_binary_ops_or_contd@18:
    // boolean_binary_ops/contract.py:75
    // z = String("z")
    bytec 7 // "z"
    // boolean_binary_ops/contract.py:78
    // assert x or (y or z)
    len
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@20

test_union_boolean_binary_ops_bool_true@19:
    intc_1 // 1

test_union_boolean_binary_ops_bool_merge@21:
    // boolean_binary_ops/contract.py:78
    // assert x or (y or z)
    assert
    // boolean_binary_ops/contract.py:73
    // x = UInt64(0)
    intc_0 // 0
    // boolean_binary_ops/contract.py:79
    // assert (x or y) or z
    dup
    !=
    bnz test_union_boolean_binary_ops_bool_true@24

test_union_boolean_binary_ops_or_contd@22:
    // boolean_binary_ops/contract.py:74
    // y = Bytes(b"y")
    bytec_2 // 0x79
    // boolean_binary_ops/contract.py:79
    // assert (x or y) or z
    len
    intc_0 // 0
    !=
    bnz test_union_boolean_binary_ops_bool_true@24

test_union_boolean_binary_ops_or_contd@23:
    // boolean_binary_ops/contract.py:75
    // z = String("z")
    bytec 7 // "z"
    // boolean_binary_ops/contract.py:79
    // assert (x or y) or z
    len
    intc_0 // 0
    !=
    bz test_union_boolean_binary_ops_bool_false@25

test_union_boolean_binary_ops_bool_true@24:
    intc_1 // 1

test_union_boolean_binary_ops_bool_merge@26:
    // boolean_binary_ops/contract.py:79
    // assert (x or y) or z
    assert
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    bytec 5 // "ri"
    len
    frame_bury 5
    bytec_1 // "left"
    len
    intc_0 // 0
    ==
    bz test_union_boolean_binary_ops_ternary_false@28

test_union_boolean_binary_ops_ternary_true@27:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    bytec_1 // "left"
    frame_bury 1

test_union_boolean_binary_ops_ternary_merge@29:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    frame_dig 1
    len
    frame_dig 5
    <
    bz test_union_boolean_binary_ops_ternary_false@31

test_union_boolean_binary_ops_ternary_true@30:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    intc_0 // 0

test_union_boolean_binary_ops_ternary_merge@32:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    assert
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec 4 // "le"
    len
    intc_0 // 0
    ==
    bz test_union_boolean_binary_ops_ternary_false@34

test_union_boolean_binary_ops_ternary_true@33:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec 4 // "le"

test_union_boolean_binary_ops_ternary_merge@35:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    len
    dup
    frame_bury 6
    bytec_3 // "right"
    len
    >
    bz test_union_boolean_binary_ops_ternary_false@37

test_union_boolean_binary_ops_ternary_true@36:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    intc_0 // 0

test_union_boolean_binary_ops_ternary_merge@41:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    assert
    // boolean_binary_ops/contract.py:85
    // for idx, b in uenumerate(Bytes(b"never seen") and bytes_to_iterate):
    bytec 10 // 0x6e65766572207365656e
    len
    intc_0 // 0
    ==
    // boolean_binary_ops/contract.py:84
    // bytes_to_iterate = Bytes(b"abc")
    bytec 6 // 0x616263
    // boolean_binary_ops/contract.py:85
    // for idx, b in uenumerate(Bytes(b"never seen") and bytes_to_iterate):
    bytec 10 // 0x6e65766572207365656e
    uncover 2
    select
    dup
    frame_bury 0
    len
    frame_bury 3
    intc_0 // 0
    frame_bury 4

test_union_boolean_binary_ops_for_header@42:
    // boolean_binary_ops/contract.py:85
    // for idx, b in uenumerate(Bytes(b"never seen") and bytes_to_iterate):
    frame_dig 4
    frame_dig 3
    <
    bz test_union_boolean_binary_ops_after_for@45

test_union_boolean_binary_ops_for_body@43:
    // boolean_binary_ops/contract.py:85
    // for idx, b in uenumerate(Bytes(b"never seen") and bytes_to_iterate):
    frame_dig 0
    frame_dig 4
    dup
    cover 2
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    swap
    // boolean_binary_ops/contract.py:84
    // bytes_to_iterate = Bytes(b"abc")
    bytec 6 // 0x616263
    // boolean_binary_ops/contract.py:86
    // assert b == bytes_to_iterate[idx]
    swap
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    ==
    assert

test_union_boolean_binary_ops_for_footer@44:
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_union_boolean_binary_ops_for_header@42

test_union_boolean_binary_ops_after_for@45:
    // boolean_binary_ops/contract.py:87
    // assert (Bytes(b"left") and Bytes(b"right"))[1] == b"i"
    bytec_1 // 0x6c656674
    len
    intc_0 // 0
    ==
    bytec_3 // 0x7269676874
    bytec_1 // 0x6c656674
    uncover 2
    select
    intc_1 // 1
    dup
    extract3 // on error: Index access is out of bounds
    pushbytes 0x69
    ==
    assert
    // boolean_binary_ops/contract.py:88
    // assert (Bytes(b"left") or Bytes(b"right"))[0:2] == b"le"
    bytec_1 // 0x6c656674
    len
    intc_0 // 0
    !=
    bytec_3 // 0x7269676874
    bytec_1 // 0x6c656674
    uncover 2
    select
    dup
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    swap
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    bytec 4 // 0x6c65
    ==
    assert
    // boolean_binary_ops/contract.py:89
    // assert "ight" in (String("left") and String("right"))
    bytec_1 // "left"
    len
    intc_0 // 0
    ==
    bz test_union_boolean_binary_ops_ternary_false@47

test_union_boolean_binary_ops_ternary_true@46:
    // boolean_binary_ops/contract.py:89
    // assert "ight" in (String("left") and String("right"))
    bytec_1 // "left"

test_union_boolean_binary_ops_ternary_merge@48:
    // boolean_binary_ops/contract.py:89
    // assert "ight" in (String("left") and String("right"))
    pushbytes "ight"
    swap
    callsub is_substring
    assert
    // boolean_binary_ops/contract.py:91
    // assert (UInt64(1) and UInt64(2)) + 3 == 5
    intc_1 // 1
    intc_0 // 0
    ==
    intc_2 // 2
    intc_1 // 1
    uncover 2
    select
    intc_3 // 3
    +
    pushint 5 // 5
    ==
    assert
    // boolean_binary_ops/contract.py:92
    // assert ~(UInt64(1) or UInt64(2)) == ~UInt64(1)
    intc_1 // 1
    intc_0 // 0
    !=
    intc_2 // 2
    intc_1 // 1
    uncover 2
    select
    ~
    intc_1 // 1
    ~
    ==
    assert
    retsub

test_union_boolean_binary_ops_ternary_false@47:
    // boolean_binary_ops/contract.py:89
    // assert "ight" in (String("left") and String("right"))
    bytec_3 // "right"
    b test_union_boolean_binary_ops_ternary_merge@48

test_union_boolean_binary_ops_ternary_false@37:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec_3 // "right"
    intc_0 // 0
    frame_dig 6
    extract3
    frame_bury 2
    bytec 4 // "le"
    len
    intc_0 // 0
    ==
    bz test_union_boolean_binary_ops_ternary_false@39

test_union_boolean_binary_ops_ternary_true@38:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec 4 // "le"

test_union_boolean_binary_ops_ternary_merge@40:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    frame_dig 2
    ==
    b test_union_boolean_binary_ops_ternary_merge@41

test_union_boolean_binary_ops_ternary_false@39:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec 5 // "ri"
    b test_union_boolean_binary_ops_ternary_merge@40

test_union_boolean_binary_ops_ternary_false@34:
    // boolean_binary_ops/contract.py:82
    // assert String("right").startswith(String("le") and String("ri"))
    bytec 5 // "ri"
    b test_union_boolean_binary_ops_ternary_merge@35

test_union_boolean_binary_ops_ternary_false@31:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    frame_dig 1
    intc_0 // 0
    frame_dig 5
    extract3
    bytec 5 // "ri"
    ==
    b test_union_boolean_binary_ops_ternary_merge@32

test_union_boolean_binary_ops_ternary_false@28:
    // boolean_binary_ops/contract.py:81
    // assert (String("left") and String("right")).startswith("ri")
    bytec_3 // "right"
    frame_bury 1
    b test_union_boolean_binary_ops_ternary_merge@29

test_union_boolean_binary_ops_bool_false@25:
    intc_0 // 0
    b test_union_boolean_binary_ops_bool_merge@26

test_union_boolean_binary_ops_bool_false@20:
    intc_0 // 0
    b test_union_boolean_binary_ops_bool_merge@21

test_union_boolean_binary_ops_bool_false@15:
    intc_0 // 0
    b test_union_boolean_binary_ops_bool_merge@16

test_union_boolean_binary_ops_bool_false@9:
    intc_0 // 0
    b test_union_boolean_binary_ops_bool_merge@10

test_union_boolean_binary_ops_bool_false@3:
    intc_0 // 0
    b test_union_boolean_binary_ops_bool_merge@4


// test_cases.boolean_binary_ops.contract.test_literal_boolean_binary_ops() -> void:
test_literal_boolean_binary_ops:
    // boolean_binary_ops/contract.py:95-96
    // @subroutine
    // def test_literal_boolean_binary_ops() -> None:
    proto 0 0
    bytec_0 // ""
    dup

test_literal_boolean_binary_ops_block@0:
    // boolean_binary_ops/contract.py:99
    // assert UInt64(0) or 1
    intc_0 // 0
    dup
    !=
    intc_1 // 1
    ||
    assert
    // boolean_binary_ops/contract.py:100
    // assert False or Bytes(b"abc")
    intc_0 // 0
    bnz test_literal_boolean_binary_ops_bool_true@2

test_literal_boolean_binary_ops_or_contd@1:
    // boolean_binary_ops/contract.py:100
    // assert False or Bytes(b"abc")
    bytec 6 // 0x616263
    len
    intc_0 // 0
    !=
    bz test_literal_boolean_binary_ops_bool_false@3

test_literal_boolean_binary_ops_bool_true@2:
    intc_1 // 1

test_literal_boolean_binary_ops_bool_merge@4:
    // boolean_binary_ops/contract.py:100
    // assert False or Bytes(b"abc")
    assert
    // boolean_binary_ops/contract.py:104
    // c = bool(UInt64(0) or 1)
    intc_0 // 0
    dup
    !=
    intc_1 // 1
    ||
    frame_bury 0
    // boolean_binary_ops/contract.py:105
    // d = bool(False or Bytes(b"abc"))
    intc_0 // 0
    bnz test_literal_boolean_binary_ops_bool_true@6

test_literal_boolean_binary_ops_or_contd@5:
    // boolean_binary_ops/contract.py:105
    // d = bool(False or Bytes(b"abc"))
    bytec 6 // 0x616263
    len
    intc_0 // 0
    !=
    bz test_literal_boolean_binary_ops_bool_false@7

test_literal_boolean_binary_ops_bool_true@6:
    intc_1 // 1

test_literal_boolean_binary_ops_bool_merge@8:
    // boolean_binary_ops/contract.py:105
    // d = bool(False or Bytes(b"abc"))
    frame_bury 1
    // boolean_binary_ops/contract.py:102
    // a = bool(0 or 1)
    intc_1 // 1
    // boolean_binary_ops/contract.py:106
    // assert a and b and c and d
    bz test_literal_boolean_binary_ops_bool_false@13

test_literal_boolean_binary_ops_and_contd@9:
    // boolean_binary_ops/contract.py:103
    // b = bool("abc" and 1)
    intc_1 // 1
    // boolean_binary_ops/contract.py:106
    // assert a and b and c and d
    bz test_literal_boolean_binary_ops_bool_false@13

test_literal_boolean_binary_ops_and_contd@10:
    // boolean_binary_ops/contract.py:106
    // assert a and b and c and d
    frame_dig 0
    bz test_literal_boolean_binary_ops_bool_false@13

test_literal_boolean_binary_ops_and_contd@11:
    // boolean_binary_ops/contract.py:106
    // assert a and b and c and d
    frame_dig 1
    bz test_literal_boolean_binary_ops_bool_false@13

test_literal_boolean_binary_ops_bool_true@12:
    intc_1 // 1

test_literal_boolean_binary_ops_bool_merge@14:
    // boolean_binary_ops/contract.py:106
    // assert a and b and c and d
    assert
    // boolean_binary_ops/contract.py:108
    // if 0 and 1:
    intc_0 // 0
    bz test_literal_boolean_binary_ops_after_if_else@16

test_literal_boolean_binary_ops_if_body@15:
    // boolean_binary_ops/contract.py:109
    // assert False
    err

test_literal_boolean_binary_ops_after_if_else@16:
    // boolean_binary_ops/contract.py:110
    // if "abc" and 0:
    intc_0 // 0
    bz test_literal_boolean_binary_ops_after_if_else@18

test_literal_boolean_binary_ops_if_body@17:
    // boolean_binary_ops/contract.py:111
    // assert False
    err

test_literal_boolean_binary_ops_after_if_else@18:
    // boolean_binary_ops/contract.py:112
    // if UInt64(0) or 0:
    intc_0 // 0
    dup
    !=
    bnz test_literal_boolean_binary_ops_if_body@20

test_literal_boolean_binary_ops_or_contd@19:
    // boolean_binary_ops/contract.py:112
    // if UInt64(0) or 0:
    intc_0 // 0
    bz test_literal_boolean_binary_ops_after_if_else@21

test_literal_boolean_binary_ops_if_body@20:
    // boolean_binary_ops/contract.py:113
    // assert False
    err

test_literal_boolean_binary_ops_after_if_else@21:
    // boolean_binary_ops/contract.py:114
    // if False or Bytes(b""):
    intc_0 // 0
    bnz test_literal_boolean_binary_ops_if_body@23

test_literal_boolean_binary_ops_or_contd@22:
    // boolean_binary_ops/contract.py:114
    // if False or Bytes(b""):
    bytec_0 // 0x
    len
    intc_0 // 0
    !=
    bz test_literal_boolean_binary_ops_after_if_else@24

test_literal_boolean_binary_ops_if_body@23:
    // boolean_binary_ops/contract.py:115
    // assert False
    err

test_literal_boolean_binary_ops_after_if_else@24:
    // boolean_binary_ops/contract.py:117
    // assert UInt64(1 and 2) == 2
    intc_2 // 2
    dup
    ==
    assert
    // boolean_binary_ops/contract.py:119
    // one = UInt64(1)
    intc_1 // 1
    // boolean_binary_ops/contract.py:120
    // assert op.bitlen(one and 4) == 3
    intc_0 // 0
    ==
    pushint 4 // 4
    // boolean_binary_ops/contract.py:119
    // one = UInt64(1)
    intc_1 // 1
    // boolean_binary_ops/contract.py:120
    // assert op.bitlen(one and 4) == 3
    uncover 2
    select
    bitlen
    intc_3 // 3
    ==
    assert
    // boolean_binary_ops/contract.py:121
    // empty_bytes = Bytes()
    bytec_0 // 0x
    // boolean_binary_ops/contract.py:122
    // assert op.bitlen(empty_bytes or b"hello") > 0
    len
    intc_0 // 0
    !=
    pushbytes 0x68656c6c6f
    // boolean_binary_ops/contract.py:121
    // empty_bytes = Bytes()
    bytec_0 // 0x
    // boolean_binary_ops/contract.py:122
    // assert op.bitlen(empty_bytes or b"hello") > 0
    uncover 2
    select
    bitlen
    intc_0 // 0
    >
    assert
    retsub

test_literal_boolean_binary_ops_bool_false@13:
    intc_0 // 0
    b test_literal_boolean_binary_ops_bool_merge@14

test_literal_boolean_binary_ops_bool_false@7:
    intc_0 // 0
    b test_literal_boolean_binary_ops_bool_merge@8

test_literal_boolean_binary_ops_bool_false@3:
    intc_0 // 0
    b test_literal_boolean_binary_ops_bool_merge@4


// test_cases.boolean_binary_ops.contract.test_literal_conditionals(true: uint64, false: uint64) -> void:
test_literal_conditionals:
    // boolean_binary_ops/contract.py:125-126
    // @subroutine
    // def test_literal_conditionals(*, true: bool, false: bool) -> None:
    proto 2 0
    bytec_0 // ""

test_literal_conditionals_block@0:
    // boolean_binary_ops/contract.py:127
    // assert (3 if false else 0) or 4
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    select
    intc_1 // 1
    ||
    assert
    // boolean_binary_ops/contract.py:128
    // assert 0 or (3 if true else 0)
    intc_0 // 0
    bnz test_literal_conditionals_bool_true@2

test_literal_conditionals_or_contd@1:
    // boolean_binary_ops/contract.py:128
    // assert 0 or (3 if true else 0)
    intc_0 // 0
    intc_1 // 1
    frame_dig -2
    select
    bz test_literal_conditionals_bool_false@3

test_literal_conditionals_bool_true@2:
    intc_1 // 1

test_literal_conditionals_bool_merge@4:
    // boolean_binary_ops/contract.py:128
    // assert 0 or (3 if true else 0)
    assert
    // boolean_binary_ops/contract.py:129
    // assert b"123" or (3 if true else 0)
    intc_1 // 1
    bnz test_literal_conditionals_bool_true@6

test_literal_conditionals_or_contd@5:
    // boolean_binary_ops/contract.py:129
    // assert b"123" or (3 if true else 0)
    intc_0 // 0
    intc_1 // 1
    frame_dig -2
    select
    bz test_literal_conditionals_bool_false@7

test_literal_conditionals_bool_true@6:
    intc_1 // 1

test_literal_conditionals_bool_merge@8:
    // boolean_binary_ops/contract.py:129
    // assert b"123" or (3 if true else 0)
    assert
    // boolean_binary_ops/contract.py:130
    // assert (3 if false else 0) or b"123"
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    select
    intc_1 // 1
    ||
    assert
    // boolean_binary_ops/contract.py:131
    // y = UInt64((3 if false else 0) or 4)
    intc_0 // 0
    intc_3 // 3
    frame_dig -1
    select
    dup
    frame_bury 0
    intc_0 // 0
    !=
    bz test_literal_conditionals_ternary_false@10

test_literal_conditionals_ternary_true@9:
    // boolean_binary_ops/contract.py:131
    // y = UInt64((3 if false else 0) or 4)
    frame_dig 0

test_literal_conditionals_ternary_merge@11:
    // boolean_binary_ops/contract.py:132
    // assert y == 4
    pushint 4 // 4
    ==
    assert
    // boolean_binary_ops/contract.py:133
    // z = UInt64(0 or (3 if true else 0))
    intc_0 // 0
    dup
    !=
    bz test_literal_conditionals_ternary_false@13

test_literal_conditionals_ternary_true@12:
    // boolean_binary_ops/contract.py:133
    // z = UInt64(0 or (3 if true else 0))
    intc_0 // 0

test_literal_conditionals_ternary_merge@14:
    // boolean_binary_ops/contract.py:134
    // assert z == 3
    intc_3 // 3
    ==
    assert
    retsub

test_literal_conditionals_ternary_false@13:
    // boolean_binary_ops/contract.py:133
    // z = UInt64(0 or (3 if true else 0))
    intc_0 // 0
    intc_3 // 3
    frame_dig -2
    select
    b test_literal_conditionals_ternary_merge@14

test_literal_conditionals_ternary_false@10:
    // boolean_binary_ops/contract.py:131
    // y = UInt64((3 if false else 0) or 4)
    pushint 4 // 4
    b test_literal_conditionals_ternary_merge@11

test_literal_conditionals_bool_false@7:
    intc_0 // 0
    b test_literal_conditionals_bool_merge@8

test_literal_conditionals_bool_false@3:
    intc_0 // 0
    b test_literal_conditionals_bool_merge@4
