#pragma version 10

test_cases.boolean_binary_ops.contract.BooleanBinaryOps.approval_program:
    // boolean_binary_ops/contract.py:6
    // test_boolean_binary_ops(true=True, false=False)
    int 1
    int 0
    callsub test_boolean_binary_ops
    // boolean_binary_ops/contract.py:7
    // test_boolean_shortcircuit_binary_ops()
    callsub test_boolean_shortcircuit_binary_ops
    // boolean_binary_ops/contract.py:8
    // type_coercion()
    callsub type_coercion
    // boolean_binary_ops/contract.py:9
    // return True
    int 1
    return


// test_cases.boolean_binary_ops.contract.test_boolean_binary_ops(true: uint64, false: uint64) -> void:
test_boolean_binary_ops:
    // boolean_binary_ops/contract.py:16-17
    // @subroutine
    // def test_boolean_binary_ops(*, true: bool, false: bool) -> None:
    proto 2 0
    // boolean_binary_ops/contract.py:18
    // assert not (true and false)
    frame_dig -2
    frame_dig -1
    &&
    !
    assert
    // boolean_binary_ops/contract.py:19
    // assert not (false and true)
    frame_dig -1
    frame_dig -2
    &&
    !
    assert
    // boolean_binary_ops/contract.py:20
    // assert true and true
    frame_dig -2
    frame_dig -2
    &&
    assert
    // boolean_binary_ops/contract.py:21
    // assert not (false and false)
    frame_dig -1
    frame_dig -1
    &&
    !
    assert
    // boolean_binary_ops/contract.py:23
    // assert true or false
    frame_dig -2
    frame_dig -1
    ||
    assert
    // boolean_binary_ops/contract.py:24
    // assert false or true
    frame_dig -1
    frame_dig -2
    ||
    assert
    // boolean_binary_ops/contract.py:25
    // assert true or true
    frame_dig -2
    frame_dig -2
    ||
    assert
    // boolean_binary_ops/contract.py:26
    // assert not (false or false)
    frame_dig -1
    frame_dig -1
    ||
    !
    assert
    retsub


// test_cases.boolean_binary_ops.contract.test_boolean_shortcircuit_binary_ops() -> void:
test_boolean_shortcircuit_binary_ops:
    // boolean_binary_ops/contract.py:34-35
    // @subroutine
    // def test_boolean_shortcircuit_binary_ops() -> None:
    proto 0 0
    int 0
    dup
    byte ""
    dup
    int 0
    // boolean_binary_ops/contract.py:36
    // for lhs in (True, False):
    int 1

test_boolean_shortcircuit_binary_ops_for_body@1:
    int 0
    frame_bury 2
    // boolean_binary_ops/contract.py:37
    // for rhs in (True, False):
    int 1
    frame_bury 3

test_boolean_shortcircuit_binary_ops_for_body@2:
    // boolean_binary_ops/contract.py:38
    // and_msg = b"_" + bool_to_bytes(lhs) + b"_and_" + bool_to_bytes(rhs)
    frame_dig 5
    dup
    callsub bool_to_bytes
    byte 0x5f
    uncover 1
    concat
    byte 0x5f616e645f
    concat
    frame_dig 3
    callsub bool_to_bytes
    concat
    dup
    frame_bury 0
    // boolean_binary_ops/contract.py:39
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    byte 0x6c6873
    uncover 1
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:39-41
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    bz test_boolean_shortcircuit_binary_ops_bool_false@5
    // boolean_binary_ops/contract.py:40
    // rhs, b"rhs" + and_msg
    byte 0x726873
    frame_dig 0
    concat
    // boolean_binary_ops/contract.py:39-41
    // and_result = log_and_return(lhs, b"lhs" + and_msg) and log_and_return(
    //     rhs, b"rhs" + and_msg
    // )
    frame_dig 3
    uncover 1
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@5
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@6

test_boolean_shortcircuit_binary_ops_bool_false@5:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@6:
    // boolean_binary_ops/contract.py:42
    // assert and_result == (lhs and rhs)
    frame_dig 5
    dup
    cover 2
    frame_dig 3
    dup
    cover 4
    &&
    ==
    assert
    // boolean_binary_ops/contract.py:43
    // or_msg = b"_" + bool_to_bytes(lhs) + b"_or_" + bool_to_bytes(rhs)
    dup
    callsub bool_to_bytes
    byte 0x5f
    uncover 1
    concat
    byte 0x5f6f725f
    concat
    uncover 2
    callsub bool_to_bytes
    concat
    dup
    frame_bury 1
    // boolean_binary_ops/contract.py:44
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    byte 0x6c6873
    uncover 1
    concat
    callsub log_and_return
    // boolean_binary_ops/contract.py:44-46
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    bnz test_boolean_shortcircuit_binary_ops_bool_true@8
    // boolean_binary_ops/contract.py:45
    // rhs, b"rhs" + or_msg
    byte 0x726873
    frame_dig 1
    concat
    // boolean_binary_ops/contract.py:44-46
    // or_result = log_and_return(lhs, b"lhs" + or_msg) or log_and_return(
    //     rhs, b"rhs" + or_msg
    // )
    frame_dig 3
    uncover 1
    callsub log_and_return
    bz test_boolean_shortcircuit_binary_ops_bool_false@9

test_boolean_shortcircuit_binary_ops_bool_true@8:
    int 1
    b test_boolean_shortcircuit_binary_ops_bool_merge@10

test_boolean_shortcircuit_binary_ops_bool_false@9:
    int 0

test_boolean_shortcircuit_binary_ops_bool_merge@10:
    // boolean_binary_ops/contract.py:47
    // assert or_result == (lhs or rhs)
    frame_dig 5
    frame_dig 3
    ||
    ==
    assert
    // boolean_binary_ops/contract.py:37
    // for rhs in (True, False):
    frame_dig 2
    switch test_boolean_shortcircuit_binary_ops_for_header_1@12
    b test_boolean_shortcircuit_binary_ops_after_for@13

test_boolean_shortcircuit_binary_ops_for_header_1@12:
    int 1
    frame_bury 2
    // boolean_binary_ops/contract.py:37
    // for rhs in (True, False):
    int 0
    frame_bury 3
    b test_boolean_shortcircuit_binary_ops_for_body@2

test_boolean_shortcircuit_binary_ops_after_for@13:
    // boolean_binary_ops/contract.py:36
    // for lhs in (True, False):
    frame_dig 4
    switch test_boolean_shortcircuit_binary_ops_for_header_1@15
    b test_boolean_shortcircuit_binary_ops_after_for@16

test_boolean_shortcircuit_binary_ops_for_header_1@15:
    int 1
    frame_bury 4
    // boolean_binary_ops/contract.py:36
    // for lhs in (True, False):
    int 0
    frame_bury 5
    b test_boolean_shortcircuit_binary_ops_for_body@1

test_boolean_shortcircuit_binary_ops_after_for@16:
    retsub


// test_cases.boolean_binary_ops.contract.bool_to_bytes(x: uint64) -> bytes:
bool_to_bytes:
    // boolean_binary_ops/contract.py:29-30
    // @subroutine
    // def bool_to_bytes(x: bool) -> Bytes:
    proto 1 1
    // boolean_binary_ops/contract.py:31
    // return Bytes(b"true" if x else b"false")
    frame_dig -1
    bz bool_to_bytes_ternary_false@2
    byte 0x74727565
    b bool_to_bytes_ternary_merge@3

bool_to_bytes_ternary_false@2:
    // boolean_binary_ops/contract.py:31
    // return Bytes(b"true" if x else b"false")
    byte 0x66616c7365

bool_to_bytes_ternary_merge@3:
    // boolean_binary_ops/contract.py:31
    // return Bytes(b"true" if x else b"false")
    retsub


// test_cases.boolean_binary_ops.contract.log_and_return(x: uint64, msg: bytes) -> uint64:
log_and_return:
    // boolean_binary_ops/contract.py:50-51
    // @subroutine
    // def log_and_return(x: bool, msg: Bytes) -> bool:
    proto 2 1
    // boolean_binary_ops/contract.py:52
    // log(msg)
    frame_dig -1
    log
    // boolean_binary_ops/contract.py:53
    // return x
    frame_dig -2
    retsub


// test_cases.boolean_binary_ops.contract.type_coercion() -> void:
type_coercion:
    // boolean_binary_ops/contract.py:56-57
    // @subroutine
    // def type_coercion() -> None:
    proto 0 0
    // boolean_binary_ops/contract.py:58
    // b = UInt64(0) or OnCompleteAction.OptIn
    int 0
    int 0
    !=
    bz type_coercion_ternary_false@2
    int 0
    b type_coercion_ternary_merge@3

type_coercion_ternary_false@2:
    // boolean_binary_ops/contract.py:58
    // b = UInt64(0) or OnCompleteAction.OptIn
    int OptIn

type_coercion_ternary_merge@3:
    // boolean_binary_ops/contract.py:59
    // assert b > 0
    int 0
    >
    assert
    // boolean_binary_ops/contract.py:60
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    int appl
    int 0
    !=
    bz type_coercion_ternary_false@5
    int appl
    b type_coercion_ternary_merge@9

type_coercion_ternary_false@5:
    // boolean_binary_ops/contract.py:60
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    int 0
    int 0
    !=
    bz type_coercion_ternary_false@7
    int 0
    b type_coercion_ternary_merge@8

type_coercion_ternary_false@7:
    // boolean_binary_ops/contract.py:60
    // c = TransactionType.ApplicationCall or UInt64(0) or OnCompleteAction.OptIn
    int OptIn

type_coercion_ternary_merge@8:

type_coercion_ternary_merge@9:
    // boolean_binary_ops/contract.py:61
    // assert c == TransactionType.ApplicationCall
    int appl
    ==
    assert
    retsub
