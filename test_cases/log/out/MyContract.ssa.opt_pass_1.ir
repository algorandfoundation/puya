contract test_cases.log.contract.MyContract:
    program approval:
        subroutine test_cases.log.contract.MyContract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bytes = (itob 0u)
                (log tmp%0#0)
                (log "1")
                (log "2")
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: uint64 = (+ tmp%1#0 3u)
                let tmp%3#0: bytes = (itob tmp%2#0)
                (log tmp%3#0)
                let tmp%4#0: uint64 = (txn NumAppArgs)
                goto tmp%4#0 ? block@1 : block@2
            block@1: // ternary_true_L10
                let ternary_result%0#0: bytes = "4"
                goto block@3
            block@2: // ternary_false_L10
                let ternary_result%0#1: bytes = ""
                goto block@3
            block@3: // ternary_merge_L10
                let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                (log ternary_result%0#2)
                let tmp%5#0: bytes = "5"
                let tmp%6#0: bytes = (itob 6u)
                let tmp%7#0: bytes = (concat tmp%5#0 tmp%6#0)
                let tmp%9#0: uint64 = (txn NumAppArgs)
                let tmp%10#0: uint64 = (+ tmp%9#0 7u)
                let tmp%11#0: bytes = (itob tmp%10#0)
                let tmp%12#0: bytes = (concat tmp%7#0 tmp%11#0)
                let tmp%14#0: bytes = (concat tmp%12#0 8b)
                let tmp%16#0: uint64 = (txn NumAppArgs)
                goto tmp%16#0 ? block@4 : block@5
            block@4: // ternary_true_L16
                let ternary_result%1#0: bytes = "9"
                goto block@6
            block@5: // ternary_false_L16
                let ternary_result%1#1: bytes = ""
                goto block@6
            block@6: // ternary_merge_L16
                let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
                let tmp%17#0: bytes = (concat tmp%14#0 ternary_result%1#2)
                (log tmp%17#0)
                let tmp%18#0: bytes = "5_"
                let tmp%20#0: bytes = (concat tmp%18#0 tmp%6#0)
                let tmp%21#0: bytes = (concat tmp%20#0 "_")
                let tmp%22#0: uint64 = (txn NumAppArgs)
                let tmp%23#0: uint64 = (+ tmp%22#0 7u)
                let tmp%24#0: bytes = (itob tmp%23#0)
                let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
                let tmp%26#0: bytes = (concat tmp%25#0 "_")
                let tmp%27#0: bytes = (concat tmp%26#0 8b)
                let tmp%28#0: bytes = (concat tmp%27#0 "_")
                let tmp%29#0: uint64 = (txn NumAppArgs)
                goto tmp%29#0 ? block@7 : block@8
            block@7: // ternary_true_L23
                let ternary_result%2#0: bytes = "9"
                goto block@9
            block@8: // ternary_false_L23
                let ternary_result%2#1: bytes = ""
                goto block@9
            block@9: // ternary_merge_L23
                let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
                let tmp%30#0: bytes = (concat tmp%28#0 ternary_result%2#2)
                (log tmp%30#0)
                let tmp%31#0: bytes = "5_"
                let tmp%33#0: bytes = (concat tmp%31#0 tmp%6#0)
                let tmp%34#0: bytes = (concat tmp%33#0 "_")
                let tmp%35#0: uint64 = (txn NumAppArgs)
                let tmp%36#0: uint64 = (+ tmp%35#0 7u)
                let tmp%37#0: bytes = (itob tmp%36#0)
                let tmp%38#0: bytes = (concat tmp%34#0 tmp%37#0)
                let tmp%39#0: bytes = (concat tmp%38#0 "_")
                let tmp%40#0: bytes = (concat tmp%39#0 8b)
                let tmp%41#0: bytes = (concat tmp%40#0 "_")
                let tmp%42#0: uint64 = (txn NumAppArgs)
                goto tmp%42#0 ? block@10 : block@11
            block@10: // ternary_true_L31
                let ternary_result%3#0: bytes = "9"
                goto block@12
            block@11: // ternary_false_L31
                let ternary_result%3#1: bytes = ""
                goto block@12
            block@12: // ternary_merge_L31
                let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11)
                let tmp%43#0: bytes = (concat tmp%41#0 ternary_result%3#2)
                (log tmp%43#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.log.contract.MyContract.clear_state_program() -> bool:
            block@0: // L36
                return 1u