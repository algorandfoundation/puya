contract test_cases.log.contract.MyContract:
    program approval:
        subroutine test_cases.log.contract.MyContract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bytes = (itob 0u)
                (log tmp%0#0)
                (log 0x31)
                (log "2")
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: uint64 = (+ tmp%1#0 3u)
                let tmp%3#0: bytes = (itob tmp%2#0)
                (log tmp%3#0)
                let reinterpret_bool%0#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%0#0 ? block@1 : block@2
            block@1: // ternary_true_L10
                let ternary_result%0#0: bytes = 0x34
                goto block@3
            block@2: // ternary_false_L10
                let ternary_result%0#0: bytes = 0x
                goto block@3
            block@3: // ternary_merge_L10
                (log ternary_result%0#0)
                let tmp%8#0: uint64 = (txn NumAppArgs)
                let tmp%9#0: uint64 = (+ tmp%8#0 7u)
                let tmp%10#0: bytes = (itob tmp%9#0)
                let tmp%11#0: bytes = (concat 0x350000000000000006 tmp%10#0)
                let tmp%13#0: bytes = (concat tmp%11#0 8b)
                let reinterpret_bool%1#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%1#0 ? block@4 : block@5
            block@4: // ternary_true_L16
                let ternary_result%1#0: bytes = 0x39
                goto block@6
            block@5: // ternary_false_L16
                let ternary_result%1#0: bytes = 0x
                goto block@6
            block@6: // ternary_merge_L16
                let tmp%15#0: bytes = (concat tmp%13#0 ternary_result%1#0)
                (log tmp%15#0)
                let tmp%20#0: uint64 = (txn NumAppArgs)
                let tmp%21#0: uint64 = (+ tmp%20#0 7u)
                let tmp%22#0: bytes = (itob tmp%21#0)
                let tmp%23#0: bytes = (concat 0x355f00000000000000065f tmp%22#0)
                let tmp%24#0: bytes = (concat tmp%23#0 0x5f)
                let tmp%25#0: bytes = (concat tmp%24#0 8b)
                let tmp%26#0: bytes = (concat tmp%25#0 0x5f)
                let reinterpret_bool%2#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%2#0 ? block@7 : block@8
            block@7: // ternary_true_L23
                let ternary_result%2#0: bytes = 0x39
                goto block@9
            block@8: // ternary_false_L23
                let ternary_result%2#0: bytes = 0x
                goto block@9
            block@9: // ternary_merge_L23
                let tmp%27#0: bytes = (concat tmp%26#0 ternary_result%2#0)
                (log tmp%27#0)
                let tmp%32#0: uint64 = (txn NumAppArgs)
                let tmp%33#0: uint64 = (+ tmp%32#0 7u)
                let tmp%34#0: bytes = (itob tmp%33#0)
                let tmp%35#0: bytes = (concat 0x355f00000000000000065f tmp%34#0)
                let tmp%36#0: bytes = (concat tmp%35#0 "_")
                let tmp%37#0: bytes = (concat tmp%36#0 8b)
                let tmp%38#0: bytes = (concat tmp%37#0 "_")
                let reinterpret_bool%3#0: bool = (txn NumAppArgs)
                goto reinterpret_bool%3#0 ? block@10 : block@11
            block@10: // ternary_true_L31
                let ternary_result%3#0: bytes = 0x39
                goto block@12
            block@11: // ternary_false_L31
                let ternary_result%3#0: bytes = 0x
                goto block@12
            block@12: // ternary_merge_L31
                let tmp%39#0: bytes = (concat tmp%38#0 ternary_result%3#0)
                (log tmp%39#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.log.contract.MyContract.clear_state_program() -> bool:
            block@0: // L36
                return 1u