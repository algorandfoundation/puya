contract test_cases.log.contract.MyContract:
    program approval:
        subroutine test_cases.log.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: bytes = (itob 0u)
                (log tmp%0#0)
                (log "1")
                (log "2")
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: uint64 = (+ tmp%1#0 3u)
                let tmp%3#0: bytes = (itob tmp%2#0)
                (log tmp%3#0)
                let tmp%4#0: uint64 = (txn NumAppArgs)
                goto tmp%4#0 ? block@1 : block@2
            block@1: // ternary_true_L10
                let ternary_result%5#0: bytes = "4"
                let ternary_result%5#3: bytes = ternary_result%5#0
                goto block@3
            block@2: // ternary_false_L10
                let ternary_result%5#1: bytes = ""
                let ternary_result%5#4: bytes = ternary_result%5#1
                goto block@3
            block@3: // ternary_merge_L10
                let ternary_result%5#5: bytes = φ(ternary_result%5#3 <- block@1, ternary_result%5#4 <- block@2)
                let ternary_result%5#2: bytes = ternary_result%5#5
                (log ternary_result%5#2)
                let tmp%7#0: bytes = (itob 6u)
                let tmp%8#0: bytes = (concat "5 " tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " ")
                let tmp%10#0: uint64 = (txn NumAppArgs)
                let tmp%11#0: uint64 = (+ tmp%10#0 7u)
                let tmp%12#0: bytes = (itob tmp%11#0)
                let tmp%13#0: bytes = (concat tmp%9#0 tmp%12#0)
                let tmp%14#0: bytes = (concat tmp%13#0 " ")
                let tmp%15#0: uint64 = (txn NumAppArgs)
                goto tmp%15#0 ? block@4 : block@5
            block@4: // ternary_true_L15
                let ternary_result%16#0: bytes = "8"
                let ternary_result%16#3: bytes = ternary_result%16#0
                goto block@6
            block@5: // ternary_false_L15
                let ternary_result%16#1: bytes = ""
                let ternary_result%16#4: bytes = ternary_result%16#1
                goto block@6
            block@6: // ternary_merge_L15
                let ternary_result%16#5: bytes = φ(ternary_result%16#3 <- block@4, ternary_result%16#4 <- block@5)
                let ternary_result%16#2: bytes = ternary_result%16#5
                let tmp%17#0: bytes = (concat tmp%14#0 ternary_result%16#2)
                (log tmp%17#0)
                let tmp%19#0: bytes = (itob 6u)
                let tmp%20#0: bytes = (concat "5_" tmp%19#0)
                let tmp%21#0: bytes = (concat tmp%20#0 "_")
                let tmp%22#0: uint64 = (txn NumAppArgs)
                let tmp%23#0: uint64 = (+ tmp%22#0 7u)
                let tmp%24#0: bytes = (itob tmp%23#0)
                let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
                let tmp%26#0: bytes = (concat tmp%25#0 "_")
                let tmp%27#0: uint64 = (txn NumAppArgs)
                goto tmp%27#0 ? block@7 : block@8
            block@7: // ternary_true_L21
                let ternary_result%28#0: bytes = "8"
                let ternary_result%28#3: bytes = ternary_result%28#0
                goto block@9
            block@8: // ternary_false_L21
                let ternary_result%28#1: bytes = ""
                let ternary_result%28#4: bytes = ternary_result%28#1
                goto block@9
            block@9: // ternary_merge_L21
                let ternary_result%28#5: bytes = φ(ternary_result%28#3 <- block@7, ternary_result%28#4 <- block@8)
                let ternary_result%28#2: bytes = ternary_result%28#5
                let tmp%29#0: bytes = (concat tmp%26#0 ternary_result%28#2)
                (log tmp%29#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.log.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L26
                return 1u