contract test_cases.log.contract.MyContract:
    program approval:
        subroutine test_cases.log.contract.MyContract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bytes = (itob 0u)
                (log tmp%0#0)
                (log 0x31)
                (log "2")
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: uint64 = (+ tmp%1#0 3u)
                let tmp%3#0: bytes = (itob tmp%2#0)
                (log tmp%3#0)
                let tmp%4#0: uint64 = (txn NumAppArgs)
                let tmp%6#0: bytes = (select 0x 0x34 tmp%4#0)
                (log tmp%6#0)
                let tmp%11#0: uint64 = (txn NumAppArgs)
                let tmp%12#0: uint64 = (+ tmp%11#0 7u)
                let tmp%13#0: bytes = (itob tmp%12#0)
                let tmp%14#0: bytes = (concat 0x350000000000000006 tmp%13#0)
                let tmp%16#0: bytes = (concat tmp%14#0 8b)
                let tmp%18#0: uint64 = (txn NumAppArgs)
                let tmp%20#0: bytes = (select 0x 0x39 tmp%18#0)
                let tmp%21#0: bytes = (concat tmp%16#0 tmp%20#0)
                (log tmp%21#0)
                let tmp%26#0: uint64 = (txn NumAppArgs)
                let tmp%27#0: uint64 = (+ tmp%26#0 7u)
                let tmp%28#0: bytes = (itob tmp%27#0)
                let tmp%29#0: bytes = (concat 0x355f00000000000000065f tmp%28#0)
                let tmp%30#0: bytes = (concat tmp%29#0 0x5f)
                let tmp%31#0: bytes = (concat tmp%30#0 8b)
                let tmp%32#0: bytes = (concat tmp%31#0 0x5f)
                let tmp%33#0: uint64 = (txn NumAppArgs)
                let tmp%35#0: bytes = (select 0x 0x39 tmp%33#0)
                let tmp%36#0: bytes = (concat tmp%32#0 tmp%35#0)
                (log tmp%36#0)
                let tmp%41#0: uint64 = (txn NumAppArgs)
                let tmp%42#0: uint64 = (+ tmp%41#0 7u)
                let tmp%43#0: bytes = (itob tmp%42#0)
                let tmp%44#0: bytes = (concat 0x355f00000000000000065f tmp%43#0)
                let tmp%45#0: bytes = (concat tmp%44#0 "_")
                let tmp%46#0: bytes = (concat tmp%45#0 8b)
                let tmp%47#0: bytes = (concat tmp%46#0 "_")
                let tmp%48#0: uint64 = (txn NumAppArgs)
                let tmp%50#0: bytes = (select 0x 0x39 tmp%48#0)
                let tmp%51#0: bytes = (concat tmp%47#0 tmp%50#0)
                (log tmp%51#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.log.contract.MyContract.clear_state_program() -> bool:
            block@0: // L36
                return 1u