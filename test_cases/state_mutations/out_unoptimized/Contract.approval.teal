#pragma version 10
#pragma typetrack false

// test_cases.state_mutations.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 2 1 8
    bytecblock "box" "modified" 0x "glob" "loc" "map" "baz"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    callsub approval_program
    return


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_2 // ""
    b dynamic_array_concat_dynamic_element_block@0

dynamic_array_concat_dynamic_element_block@0:
    bytec_2 // 0x
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -4
    intc_1 // 2
    *
    intc_1 // 2
    assert // Step cannot be zero
    intc_0 // 0
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    b dynamic_array_concat_dynamic_element_for_body@2

dynamic_array_concat_dynamic_element_for_body@2:
    frame_dig -3
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    uncover 1
    concat
    frame_bury 1
    b dynamic_array_concat_dynamic_element_for_footer@3

dynamic_array_concat_dynamic_element_for_footer@3:
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 2
    frame_dig -2
    intc_1 // 2
    *
    frame_bury 0
    intc_1 // 2
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 0
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    b dynamic_array_concat_dynamic_element_for_body@6

dynamic_array_concat_dynamic_element_for_body@6:
    frame_dig -1
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    uncover 1
    concat
    frame_bury 1
    b dynamic_array_concat_dynamic_element_for_footer@7

dynamic_array_concat_dynamic_element_for_footer@7:
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -4
    intc_1 // 2
    *
    frame_dig -3
    len
    frame_dig -3
    uncover 2
    uncover 2
    substring3
    concat
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_dynamic_element:
    proto 3 1
    b dynamic_array_replace_dynamic_element_block@0

dynamic_array_replace_dynamic_element_block@0:
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_dynamic_element
    concat
    retsub


// _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_dynamic_element:
    proto 4 1
    b static_array_replace_dynamic_element_block@0

static_array_replace_dynamic_element_block@0:
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -4
    uncover 1
    extract_uint16
    frame_dig -2
    intc_2 // 1
    +
    intc_1 // 2
    *
    frame_dig -4
    uncover 1
    extract_uint16
    frame_dig -4
    len
    frame_dig -1
    frame_dig -2
    -
    intc_2 // 1
    -
    dig 1
    uncover 3
    uncover 2
    select
    dup
    dig 3
    -
    cover 3
    frame_dig -3
    len
    cover 3
    frame_dig -4
    intc_0 // 0
    uncover 4
    substring3
    frame_dig -3
    concat
    frame_dig -4
    uncover 2
    uncover 3
    substring3
    concat
    frame_dig -1
    intc_1 // 2
    *
    frame_dig -2
    intc_2 // 1
    +
    intc_1 // 2
    *
    intc_1 // 2
    assert // Step cannot be zero
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz static_array_replace_dynamic_element_after_for@4
    b static_array_replace_dynamic_element_for_body@2

static_array_replace_dynamic_element_for_body@2:
    frame_dig 2
    dup
    frame_dig 4
    dup
    cover 3
    extract_uint16
    frame_dig 1
    +
    frame_dig 0
    -
    itob
    extract 6 2
    uncover 1
    uncover 2
    uncover 2
    replace3
    frame_bury 2
    b static_array_replace_dynamic_element_for_footer@3

static_array_replace_dynamic_element_for_footer@3:
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_after_for@4:
    frame_dig 2
    frame_bury 0
    retsub


// test_cases.state_mutations.contract.get_struct() -> bytes:
get_struct:
    b get_struct_block@0

get_struct_block@0:
    // state_mutations/contract.py:68
    // baz=arc4.String("baz"),
    bytec 6 // "baz"
    len
    itob
    extract 6 2
    bytec 6 // "baz"
    concat
    // state_mutations/contract.py:66-69
    // return MyStruct(
    //     bar=arc4.UInt64(1),
    //     baz=arc4.String("baz"),
    // )
    bytec_2 // 0x
    // state_mutations/contract.py:67
    // bar=arc4.UInt64(1),
    pushbytes 0x0000000000000001
    // state_mutations/contract.py:66-69
    // return MyStruct(
    //     bar=arc4.UInt64(1),
    //     baz=arc4.String("baz"),
    // )
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    uncover 1
    concat
    retsub


// test_cases.state_mutations.contract.Contract.append[routing]() -> void:
append:
    b append_block@0

append_block@0:
    // state_mutations/contract.py:36
    // @arc4.abimethod
    callsub test_cases.state_mutations.contract.Contract.append
    intc_2 // 1
    return


// test_cases.state_mutations.contract.Contract.modify[routing]() -> void:
modify:
    b modify_block@0

modify_block@0:
    // state_mutations/contract.py:44
    // @arc4.abimethod
    callsub test_cases.state_mutations.contract.Contract.modify
    intc_2 // 1
    return


// test_cases.state_mutations.contract.Contract.get[routing]() -> void:
get:
    b get_block@0

get_block@0:
    // state_mutations/contract.py:51
    // @arc4.abimethod
    callsub test_cases.state_mutations.contract.Contract.get
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.state_mutations.contract.Contract.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    retsub


// test_cases.state_mutations.contract.Contract.opt_in() -> void:
opt_in:
    b opt_in_block@0

opt_in_block@0:
    // state_mutations/contract.py:31
    // self.glob.value = MyArray()
    intc_0 // 0
    itob
    extract 6 2
    bytec_3 // "glob"
    uncover 1
    app_global_put
    // state_mutations/contract.py:32
    // self.box.value = MyArray()
    intc_0 // 0
    itob
    extract 6 2
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    uncover 1
    box_put
    // state_mutations/contract.py:33
    // self.loc[Txn.sender] = MyArray()
    intc_0 // 0
    itob
    extract 6 2
    txn Sender
    bytec 4 // "loc"
    uncover 2
    app_local_put
    // state_mutations/contract.py:34
    // self.map[Txn.sender] = MyArray()
    intc_0 // 0
    itob
    extract 6 2
    txn Sender
    bytec 5 // "map"
    uncover 1
    concat
    dup
    box_del
    pop
    uncover 1
    box_put
    retsub


// test_cases.state_mutations.contract.Contract.append() -> void:
test_cases.state_mutations.contract.Contract.append:
    b test_cases.state_mutations.contract.Contract.append_block@0

test_cases.state_mutations.contract.Contract.append_block@0:
    // state_mutations/contract.py:38
    // struct = get_struct()
    callsub get_struct
    // state_mutations/contract.py:39
    // self.glob.value.append(struct.copy())
    intc_0 // 0
    bytec_3 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_1 // 2
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    dig 3
    concat
    uncover 2
    uncover 2
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    bytec_3 // "glob"
    uncover 1
    app_global_put
    // state_mutations/contract.py:40
    // self.loc[Txn.sender].append(struct.copy())
    txn Sender
    dup
    intc_0 // 0
    bytec 4 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_1 // 2
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    dig 4
    concat
    uncover 2
    uncover 2
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    uncover 1
    bytec 4 // "loc"
    uncover 2
    app_local_put
    // state_mutations/contract.py:41
    // self.box.value.append(struct.copy())
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_1 // 2
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    dig 3
    concat
    uncover 2
    uncover 2
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    uncover 1
    box_put
    // state_mutations/contract.py:42
    // self.map[Txn.sender].append(struct.copy())
    txn Sender
    bytec 5 // "map"
    uncover 1
    concat
    dup
    box_get
    assert // check self.map entry exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    intc_1 // 2
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    uncover 4
    concat
    uncover 2
    uncover 2
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    dig 1
    box_del
    pop
    box_put
    retsub


// test_cases.state_mutations.contract.Contract.modify() -> void:
test_cases.state_mutations.contract.Contract.modify:
    b test_cases.state_mutations.contract.Contract.modify_block@0

test_cases.state_mutations.contract.Contract.modify_block@0:
    // state_mutations/contract.py:46
    // self.glob.value[0].baz = arc4.String("modified")
    bytec_1 // "modified"
    len
    itob
    extract 6 2
    bytec_1 // "modified"
    concat
    intc_0 // 0
    bytec_3 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_1 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_2 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_1 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 2
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec_3 // "glob"
    uncover 1
    app_global_put
    // state_mutations/contract.py:47
    // self.loc[Txn.sender][0].baz = arc4.String("modified")
    bytec_1 // "modified"
    len
    itob
    extract 6 2
    bytec_1 // "modified"
    concat
    txn Sender
    dup
    intc_0 // 0
    bytec 4 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_1 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_2 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_1 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 3
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    uncover 1
    bytec 4 // "loc"
    uncover 2
    app_local_put
    // state_mutations/contract.py:48
    // self.box.value[0].baz = arc4.String("modified")
    bytec_1 // "modified"
    len
    itob
    extract 6 2
    bytec_1 // "modified"
    concat
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_1 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_2 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_1 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 2
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    uncover 1
    box_put
    // state_mutations/contract.py:49
    // self.map[Txn.sender][0].baz = arc4.String("modified")
    bytec_1 // "modified"
    len
    itob
    extract 6 2
    bytec_1 // "modified"
    concat
    txn Sender
    bytec 5 // "map"
    uncover 1
    concat
    dup
    box_get
    assert // check self.map entry exists
    dup
    len
    cover 1
    dup
    intc_1 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_1 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_2 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_1 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 3
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    dig 1
    box_del
    pop
    box_put
    retsub


// test_cases.state_mutations.contract.Contract.get() -> bytes:
test_cases.state_mutations.contract.Contract.get:
    b test_cases.state_mutations.contract.Contract.get_block@0

test_cases.state_mutations.contract.Contract.get_block@0:
    // state_mutations/contract.py:53
    // a1 = self.glob.value.copy()
    intc_0 // 0
    bytec_3 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    // state_mutations/contract.py:54
    // a2 = self.loc[Txn.sender].copy()
    txn Sender
    intc_0 // 0
    bytec 4 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    // state_mutations/contract.py:55
    // a3 = self.box.value.copy()
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    // state_mutations/contract.py:56
    // a4 = self.map[Txn.sender].copy()
    txn Sender
    bytec 5 // "map"
    uncover 1
    concat
    box_get
    assert // check self.map entry exists
    // state_mutations/contract.py:58
    // assert a1 == a2, "expected local == global"
    dig 3
    uncover 3
    ==
    assert // expected local == global
    // state_mutations/contract.py:59
    // assert a1 == a3, "expected box == global"
    dig 2
    uncover 2
    ==
    assert // expected box == global
    // state_mutations/contract.py:60
    // assert a1 == a4, "expected map == global"
    dig 1
    ==
    assert // expected map == global
    // state_mutations/contract.py:61
    // return a1
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    b approval_program_block@0

approval_program_block@0:
    b approval_program_block@1

approval_program_block@1:
    // state_mutations/contract.py:22
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@11
    b approval_program_abi_routing@2

approval_program_abi_routing@2:
    // state_mutations/contract.py:22
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz approval_program_create_NoOp@9
    b approval_program_call_NoOp@3

approval_program_call_NoOp@3:
    // state_mutations/contract.py:22
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x526e8bbf // method "append()void"
    pushbytes 0x95fef13d // method "modify()void"
    pushbytes 0x0c29444b // method "get()(uint64,string)[]"
    uncover 3
    match approval_program_append_route@4 approval_program_modify_route@5 approval_program_get_route@6
    b approval_program_switch_case_default@7

approval_program_switch_case_default@7:
    b approval_program_switch_case_next@8

approval_program_switch_case_next@8:
    b approval_program_after_if_else@10

approval_program_after_if_else@10:
    b approval_program_after_if_else@18

approval_program_after_if_else@18:
    // state_mutations/contract.py:22
    // class Contract(ARC4Contract):
    err

approval_program_get_route@6:
    // state_mutations/contract.py:51
    // @arc4.abimethod
    callsub get
    b approval_program_switch_case_next@8

approval_program_modify_route@5:
    // state_mutations/contract.py:44
    // @arc4.abimethod
    callsub modify
    b approval_program_switch_case_next@8

approval_program_append_route@4:
    // state_mutations/contract.py:36
    // @arc4.abimethod
    callsub append
    b approval_program_switch_case_next@8

approval_program_create_NoOp@9:
    b approval_program_after_if_else@10

approval_program_bare_routing@11:
    // state_mutations/contract.py:22
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    intc_2 // OptIn
    uncover 2
    match approval_program___algopy_default_create@12 approval_program_opt_in@15
    b approval_program_switch_case_default@16

approval_program_switch_case_default@16:
    b approval_program_switch_case_next@17

approval_program_switch_case_next@17:
    b approval_program_after_if_else@18

approval_program_opt_in@15:
    // state_mutations/contract.py:29
    // @arc4.baremethod(allow_actions=["OptIn"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub opt_in
    intc_2 // 1
    return

approval_program___algopy_default_create@12:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    b approval_program_block@13

approval_program_block@13:
    b approval_program_after_inlined_test_cases.state_mutations.contract.Contract.__algopy_default_create@14

approval_program_after_inlined_test_cases.state_mutations.contract.Contract.__algopy_default_create@14:
    intc_2 // 1
    return
