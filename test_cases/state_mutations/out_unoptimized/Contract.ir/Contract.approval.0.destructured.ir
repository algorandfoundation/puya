main test_cases.state_mutations.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.state_mutations.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let materialized_values%0#0: uint64 = (* new_items_count#0 2u)
        let item_offset_adjustment#0: uint64 = materialized_values%0#0
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let materialized_values%1#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = materialized_values%1#0
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let materialized_values%2#0: bytes = (concat new_head#0 tmp%3#0)
        let new_head#0: bytes = materialized_values%2#0
        goto block@3
    block@3: // for_footer_L203
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let materialized_values%3#0: uint64 = (len array_head_and_tail#0)
        let item_offset_adjustment#0: uint64 = materialized_values%3#0
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 tmp%4#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let materialized_values%4#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = materialized_values%4#0
        let tmp%5#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let materialized_values%5#0: bytes = (concat new_head#0 tmp%7#0)
        let new_head#0: bytes = materialized_values%5#0
        goto block@7
    block@7: // for_footer_L208
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#0)
        let tmp%12#0: uint64 = (* array_items_count#0 2u)
        let tmp%13#0: uint64 = (len array_head_and_tail#0)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%16#0: uint64 = (* new_items_count#0 2u)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 tmp%16#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let materialized_values%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = materialized_values%0#0
        let materialized_values%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = materialized_values%1#0
        let tmp%0#0: bytes = ((extract 2 0) source#0)
        let tmp%1#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%0#0, new_item#0, index#0, array_length#0)
        let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
        return tmp%2#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let materialized_values%0#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = materialized_values%0#0
        let tmp%1#0: uint64 = (+ index#0 1u)
        let tmp%2#0: uint64 = (* tmp%1#0 2u)
        let materialized_values%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%2#0)
        let next_item_offset#0: uint64 = materialized_values%1#0
        let materialized_values%2#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = materialized_values%2#0
        let tmp%3#0: uint64 = (- array_length#0 index#0)
        let materialized_values%3#0: uint64 = (- tmp%3#0 1u)
        let is_before_end#0: uint64 = materialized_values%3#0
        let materialized_values%4#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = materialized_values%4#0
        let materialized_values%5#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = materialized_values%5#0
        let materialized_values%6#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = materialized_values%6#0
        let tmp%4#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%5#0: bytes = (concat tmp%4#0 new_item#0)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let materialized_values%7#0: bytes = (concat tmp%5#0 tmp%6#0)
        let new_head_and_tail#0: bytes = materialized_values%7#0
        let tmp%7#0: uint64 = (* array_length#0 2u)
        let tmp%8#0: uint64 = (+ index#0 1u)
        let tmp%9#0: uint64 = (* tmp%8#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%9#0
        goto block@1
    block@1: // for_header_L273
        let continue_looping%0#0: bool = (< head_offset#0 tmp%7#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let materialized_values%8#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = materialized_values%8#0
        let materialized_values%9#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#0: uint64 = materialized_values%9#0
        let materialized_values%10#0: uint64 = (- tail_offset#0 original_item_length#0)
        let tail_offset#0: uint64 = materialized_values%10#0
        let tmp%10#0: bytes = (itob tail_offset#0)
        let materialized_values%11#0: bytes = ((extract 6 2) tmp%10#0)
        let tail_offset_bytes#0: bytes = materialized_values%11#0
        let materialized_values%12#0: bytes = (replace3 new_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let new_head_and_tail#0: bytes = materialized_values%12#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#0

subroutine test_cases.state_mutations.contract.get_struct() -> Encoded((uint64,len+utf8[])):
    block@0: // L64
        let encoded%0#0: Encoded((uint64)) = (concat 0x 0x0000000000000001)
        let tail%0#0: bytes = (concat 0x 0x000362617a)
        let as_bytes%0#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%1#0: Encoded((uint64,len+utf8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: bytes = (concat encoded%1#0 tail%0#0)
        return encoded%2#0

subroutine test_cases.state_mutations.contract.Contract.__init__() -> void:
    block@0: // L23
        return 

subroutine test_cases.state_mutations.contract.Contract.opt_in() -> void:
    block@0: // L29
        let array_data%0#0: bytes = (concat 0x0000 0x)
        (app_global_put "glob" array_data%0#0)
        let array_data%1#0: bytes = (concat 0x0000 0x)
        (box_del "box")
        (box_put "box" array_data%1#0)
        let array_data%2#0: bytes = (concat 0x0000 0x)
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_put tmp%0#0 "loc" array_data%2#0)
        let array_data%3#0: bytes = (concat 0x0000 0x)
        let materialized_values%0#0: bytes[32] = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "map" materialized_values%0#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 array_data%3#0)
        return 

subroutine test_cases.state_mutations.contract.Contract.append() -> void:
    block@0: // L36
        let materialized_values%0#0: Encoded((uint64,len+utf8[])) = test_cases.state_mutations.contract.get_struct()
        let struct#0: Encoded((uint64,len+utf8[])) = materialized_values%0#0
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let copy%0#0: Encoded((uint64,len+utf8[])) = struct#0
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let result%1#0: bytes = (concat result%0#0 copy%0#0)
        let array%array_length%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let l_count%0#0: uint64 = array%array_length%0#1
        let l_head_and_tail%0#0: bytes = ((extract 2 0) maybe_value%0#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
        (app_global_put "glob" concat_result%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%1#0) // check self.loc exists for account
        let copy%1#0: Encoded((uint64,len+utf8[])) = struct#0
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result%2#0: bytes = (concat 0x next_item_head%1#0)
        let result%3#0: bytes = (concat result%2#0 copy%1#0)
        let array%array_length%1#1: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let l_count%1#0: uint64 = array%array_length%1#1
        let l_head_and_tail%1#0: bytes = ((extract 2 0) maybe_value%1#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, result%3#0)
        (app_local_put tmp%0#0 "loc" concat_result%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "box")
        (assert maybe_exists%2#0) // check self.box exists
        let copy%2#0: Encoded((uint64,len+utf8[])) = struct#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%4#0: bytes = (concat 0x next_item_head%2#0)
        let result%5#0: bytes = (concat result%4#0 copy%2#0)
        let array%array_length%2#1: uint64 = (extract_uint16 maybe_value%2#0 0u)
        let l_count%2#0: uint64 = array%array_length%2#1
        let l_head_and_tail%2#0: bytes = ((extract 2 0) maybe_value%2#0)
        let concat_result%2#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%2#0, l_head_and_tail%2#0, 1u, result%5#0)
        (box_del "box")
        (box_put "box" concat_result%2#0)
        let materialized_values%1#0: bytes[32] = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "map" materialized_values%1#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%3#0) // check self.map entry exists
        let copy%3#0: Encoded((uint64,len+utf8[])) = struct#0
        let as_bytes%3#0: bytes[8] = (itob 2u)
        let next_item_head%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let result%6#0: bytes = (concat 0x next_item_head%3#0)
        let result%7#0: bytes = (concat result%6#0 copy%3#0)
        let array%array_length%3#1: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let l_count%3#0: uint64 = array%array_length%3#1
        let l_head_and_tail%3#0: bytes = ((extract 2 0) maybe_value%3#0)
        let concat_result%3#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%3#0, l_head_and_tail%3#0, 1u, result%7#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 concat_result%3#0)
        return 

subroutine test_cases.state_mutations.contract.Contract.modify() -> void:
    block@0: // L44
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let array_head_and_tail%0#0: bytes = ((extract 2 0) maybe_value%0#0)
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array%array_length%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let array_length%0#0: uint64 = array%array_length%0#1
        let next_index%0#0: uint64 = (+ 0u 1u)
        let has_next%0#0: uint64 = (- array_length%0#0 next_index%0#0) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item_offset%1#0: uint64 = (extract_uint16 substring3%0#0 8u)
        let data_up_to_item%0#0: bytes = (extract3 substring3%0#0 0u item_offset%1#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 0x00086d6f646966696564)
        let array%array_length%1#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let array_length%1#0: uint64 = array%array_length%1#1
        let lt%0#0: bool = (< 0u array_length%1#0)
        (assert lt%0#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%0#0, updated_data%0#0, 0u)
        (app_global_put "glob" updated_array%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%1#0) // check self.loc exists for account
        let array_head_and_tail%1#0: bytes = ((extract 2 0) maybe_value%1#0)
        let item_offset_offset%1#0: uint64 = (* 0u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array%array_length%2#1: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let array_length%2#0: uint64 = array%array_length%2#1
        let next_index%1#0: uint64 = (+ 0u 1u)
        let has_next%1#0: uint64 = (- array_length%2#0 next_index%1#0) // on error: index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let substring3%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%2#0 end_offset%1#0)
        let item_offset%3#0: uint64 = (extract_uint16 substring3%1#0 8u)
        let data_up_to_item%1#0: bytes = (extract3 substring3%1#0 0u item_offset%3#0)
        let updated_data%1#0: bytes = (concat data_up_to_item%1#0 0x00086d6f646966696564)
        let array%array_length%3#1: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let array_length%3#0: uint64 = array%array_length%3#1
        let lt%1#0: bool = (< 0u array_length%3#0)
        (assert lt%1#0) // index access is out of bounds
        let updated_array%1#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%1#0, updated_data%1#0, 0u)
        (app_local_put tmp%0#0 "loc" updated_array%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "box")
        (assert maybe_exists%2#0) // check self.box exists
        let array_head_and_tail%2#0: bytes = ((extract 2 0) maybe_value%2#0)
        let item_offset_offset%2#0: uint64 = (* 0u 2u)
        let item_offset%4#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array%array_length%4#1: uint64 = (extract_uint16 maybe_value%2#0 0u)
        let array_length%4#0: uint64 = array%array_length%4#1
        let next_index%2#0: uint64 = (+ 0u 1u)
        let has_next%2#0: uint64 = (- array_length%4#0 next_index%2#0) // on error: index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let substring3%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%4#0 end_offset%2#0)
        let item_offset%5#0: uint64 = (extract_uint16 substring3%2#0 8u)
        let data_up_to_item%2#0: bytes = (extract3 substring3%2#0 0u item_offset%5#0)
        let updated_data%2#0: bytes = (concat data_up_to_item%2#0 0x00086d6f646966696564)
        let array%array_length%5#1: uint64 = (extract_uint16 maybe_value%2#0 0u)
        let array_length%5#0: uint64 = array%array_length%5#1
        let lt%2#0: bool = (< 0u array_length%5#0)
        (assert lt%2#0) // index access is out of bounds
        let updated_array%2#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%2#0, updated_data%2#0, 0u)
        (box_del "box")
        (box_put "box" updated_array%2#0)
        let materialized_values%0#0: bytes[32] = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "map" materialized_values%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%3#0) // check self.map entry exists
        let array_head_and_tail%3#0: bytes = ((extract 2 0) maybe_value%3#0)
        let item_offset_offset%3#0: uint64 = (* 0u 2u)
        let item_offset%6#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%3#0)
        let array%array_length%6#1: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let array_length%6#0: uint64 = array%array_length%6#1
        let next_index%3#0: uint64 = (+ 0u 1u)
        let has_next%3#0: uint64 = (- array_length%6#0 next_index%3#0) // on error: index access is out of bounds
        let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
        let substring3%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%6#0 end_offset%3#0)
        let item_offset%7#0: uint64 = (extract_uint16 substring3%3#0 8u)
        let data_up_to_item%3#0: bytes = (extract3 substring3%3#0 0u item_offset%7#0)
        let updated_data%3#0: bytes = (concat data_up_to_item%3#0 0x00086d6f646966696564)
        let array%array_length%7#1: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let array_length%7#0: uint64 = array%array_length%7#1
        let lt%3#0: bool = (< 0u array_length%7#0)
        (assert lt%3#0) // index access is out of bounds
        let updated_array%3#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%3#0, updated_data%3#0, 0u)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 updated_array%3#0)
        return 

subroutine test_cases.state_mutations.contract.Contract.get() -> Encoded(len+(uint64,len+utf8[])[]):
    block@0: // L51
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let copy%0#0: bytes = maybe_value%0#0
        let a1#0: Encoded(len+(uint64,len+utf8[])[]) = copy%0#0
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%1#0) // check self.loc exists for account
        let copy%1#0: bytes = maybe_value%1#0
        let a2#0: Encoded(len+(uint64,len+utf8[])[]) = copy%1#0
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "box")
        (assert maybe_exists%2#0) // check self.box exists
        let copy%2#0: bytes = maybe_value%2#0
        let a3#0: Encoded(len+(uint64,len+utf8[])[]) = copy%2#0
        let materialized_values%0#0: bytes[32] = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "map" materialized_values%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%3#0) // check self.map entry exists
        let copy%3#0: bytes = maybe_value%3#0
        let a4#0: Encoded(len+(uint64,len+utf8[])[]) = copy%3#0
        let tmp%1#0: bool = (== a1#0 a2#0)
        (assert tmp%1#0) // expected local == global
        let tmp%2#0: bool = (== a1#0 a3#0)
        (assert tmp%2#0) // expected box == global
        let tmp%3#0: bool = (== a1#0 a4#0)
        (assert tmp%3#0) // expected map == global
        return a1#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L22
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "append()void" => block@3, method "modify()void" => block@4, method "get()(uint64,string)[]" => block@5, * => block@6}
    block@3: // append_route_L36
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.state_mutations.contract.Contract.append()
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@4: // modify_route_L44
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.state_mutations.contract.Contract.modify()
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@5: // get_route_L51
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let tmp%15#0: Encoded(len+(uint64,len+utf8[])[]) = test_cases.state_mutations.contract.Contract.get()
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@6: // switch_case_default_L22
        goto block@7
    block@7: // switch_case_next_L22
        goto block@15
    block@8: // bare_routing_L22
        let tmp%17#0: uint64 = (txn OnCompletion)
        switch tmp%17#0 {1u => block@9, 0u => block@10, * => block@13}
    block@9: // opt_in_L29
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        test_cases.state_mutations.contract.Contract.opt_in()
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@10: // __algopy_default_create_L1
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        goto block@11
    block@11: // L1
        goto block@12
    block@12: // after_inlined_test_cases.state_mutations.contract.Contract.__algopy_default_create_L1
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@13: // switch_case_default_L22
        goto block@14
    block@14: // switch_case_next_L22
        goto block@15
    block@15: // after_if_else_L22
        let test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__%0#0
        goto block@16
    block@16: // after_inlined_test_cases.state_mutations.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0