{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "modify",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "glob": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYg=="
                }
            },
            "local": {
                "loc": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bG9j"
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "map": {
                    "keyType": "address",
                    "valueType": "(uint64,string)[]",
                    "prefix": "bWFw"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "OptIn"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        96,
                        117,
                        129
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        160
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        99,
                        120,
                        132,
                        151
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        494,
                        634,
                        741
                    ],
                    "errorMessage": "check self.box exists"
                },
                {
                    "pc": [
                        452,
                        544,
                        732
                    ],
                    "errorMessage": "check self.glob exists"
                },
                {
                    "pc": [
                        475,
                        591,
                        738
                    ],
                    "errorMessage": "check self.loc exists for account"
                },
                {
                    "pc": [
                        521,
                        685,
                        748
                    ],
                    "errorMessage": "check self.map entry exists"
                },
                {
                    "pc": [
                        760
                    ],
                    "errorMessage": "expected box == global"
                },
                {
                    "pc": [
                        754
                    ],
                    "errorMessage": "expected local == global"
                },
                {
                    "pc": [
                        764
                    ],
                    "errorMessage": "expected map == global"
                },
                {
                    "pc": [
                        557,
                        604,
                        647,
                        698
                    ],
                    "errorMessage": "index access is out of bounds"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECCCYHA2JveARnbG9iA2xvYwIAAANtYXARAAIAAAAAAAAAAQAKAANiYXoKAAhtb2RpZmllZDEbQQBLggMEUm6LvwSV/vE9BAwpREs2GgCOAwAjABcAAiJDMRkURDEYRIgCcoAEFR98dUxQsCNDMRkURDEYRIgBoSNDMRkURDEYRIgBOSNDMRmNAgALAANC/8YxGESIAQ0jQzEYFEQjQ4oEAYAASYv+JAuL/CQLIosEiwMMQQAci/2LBElOAlmLAggWVwYCiwFMUIwBJAiMBEL/3Iv9FYwAIowEiwSLAgxBAByL/4sESU4CWYsACBZXBgKLAUxQjAEkCIwEQv/ci/yL/ggWVwYCiwFQi/2LA4sAUlCL/xWL/4sCTwJSUIwAiYoDAYv9UQACSReL/VcCAIv/JAtLAUxZi/8jCCQLSU4ESwJMWUsCFUsEi/8JIwlLAU8DTwJNSUsDCU4Fi/4VTgVLAyJPBFKL/lBPA08CTwNSUEwkC4sBiwUMQQAgiwRJiwFJTgNZiwMIiwIJFlcGAksCTF2MBCQIjAFC/9iLAIsEUIwAiSkrZyi8SCgrvzEAKitmJwQxAFBJvEgrv4kiKWVESSJZTFcCACMnBYj+0SlMZzEASSIqY0RJIllMVwIAIycFiP66KkxmKL5ESSJZTFcCACMnBYj+pyi8SChMvycEMQBQSb5ESSJZTFcCACMnBYj+jEsBvEi/iSIpZURJVwIASSJZSwIiWSMJSwIVSwMkWU8CTVJJJVkiTFgnBlAiiP7eKUxnMQBJIipjRElXAgBJIllLAiJZIwlLAhVLAyRZTwJNUkklWSJMWCcGUCKI/q8qTGYovkRJVwIASSJZSwIiWSMJSwIVSwMkWU8CTVJJJVkiTFgnBlAiiP6EKLxIKEy/JwQxAFBJvkRJVwIASSJZSwIiWSMJSwIVSwMkWU8CTVJJJVkiTFgnBlAiiP5RSwG8SL+JIillRDEAIipjRCi+RCcEMQBQvkRLA08DEkRLAk8CEkRLARJEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}