{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "modify",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "glob": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYg=="
                }
            },
            "local": {
                "loc": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bG9j"
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "map": {
                    "keyType": "address",
                    "valueType": "(uint64,string)[]",
                    "prefix": "bWFw"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "OptIn"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        66
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        140
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        110
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        450,
                        609,
                        735
                    ],
                    "errorMessage": "check self.box exists"
                },
                {
                    "pc": [
                        408,
                        501,
                        726
                    ],
                    "errorMessage": "check self.glob exists"
                },
                {
                    "pc": [
                        431,
                        557,
                        732
                    ],
                    "errorMessage": "check self.loc exists for account"
                },
                {
                    "pc": [
                        477,
                        669,
                        742
                    ],
                    "errorMessage": "check self.map entry exists"
                },
                {
                    "pc": [
                        754
                    ],
                    "errorMessage": "expected box == global"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "expected local == global"
                },
                {
                    "pc": [
                        758
                    ],
                    "errorMessage": "expected map == global"
                },
                {
                    "pc": [
                        517,
                        543,
                        573,
                        599,
                        625,
                        651,
                        685,
                        711
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        509,
                        565,
                        617,
                        677
                    ],
                    "errorMessage": "invalid array length header"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYHA2JveARnbG9iA2xvYwIAAANtYXARAAIAAAAAAAAAAQAKAANiYXoKAAhtb2RpZmllZDEbQQAkMRkURDEYRIIDBFJui78Elf7xPQQMKURLNhoAjgMBMwGQAnEAMRmNAgAeAAEAMRhEKStnKLxIKCu/MQAqK2YnBDEAUEm8SCu/I0MxGBREI0OKBAGAAEmL/iQLi/wkCyKLBIsDDEEAHIv9iwRJTgJZiwIIFlcGAosBTFCMASQIjARC/9yL/RWMACKMBIsEiwIMQQAci/+LBElOAlmLAAgWVwYCiwFMUIwBJAiMBEL/3Iv8i/4IFlcGAosBUIv9iwOLAFJQi/8Vi/+LAk8CUlCMAImKAwGL/VEAAkkXi/1XAgCL/yQLSwFMWYv/IwgkC0sCSwFZSwMVSwWL/wkjCUsBTwNPAk1JSwQJTgaL/hVOBksEIk8FUov+UE8ETwJPA1JQTgJMJAtMiwWLBAxBACCLA0mLBUlOA1mLAgiLAQkWVwYCSwJMXYwDJAiMBUL/2IsAiwNQjACJIillREkiWUxXAgAjJwWI/ukpTGcxAEkiKmNESSJZTFcCACMnBYj+0ipMZii+REkiWUxXAgAjJwWI/r8ovEgoTL8nBDEAUEm+REkiWUxXAgAjJwWI/qRLAbxIvyNDIillRElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnBlBMRCKI/uwpTGcxAEkiKmNESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcGUExEIoj+tCpMZii+RElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnBlBMRCKI/oAovEgoTL8nBDEAUEm+RElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnBlBMRCKI/kRLAbxIvyNDIillRDEAIipjRCi+RCcEMQBQvkRLA08DEkRLAk8CEkRLARJEgAQVH3x1TFCwI0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}