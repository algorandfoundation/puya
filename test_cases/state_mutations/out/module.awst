contract Contract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  globals {
    ['glob']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  locals {
    ['loc']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  boxes {
    ['box']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
    ['map']: account => arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  
  subroutine test_cases.state_mutations.contract.Contract.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.state_mutations.contract.Contract.__init__(): void
  {
  }
  
  baremethod test_cases.state_mutations.contract.Contract.opt_in(): void
  {
    GlobalState['glob']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    Box['box']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    LocalState['loc', txn<Sender>()]: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    Box[BoxMapKey(prefix='map', key=txn<Sender>())]: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
  }
  
  abimethod test_cases.state_mutations.contract.Contract.append(): void
  {
    struct: test_cases.state_mutations.contract.MyStruct = test_cases.state_mutations.contract.get_struct()
    GlobalState['glob'].extend((struct.copy()))
    LocalState['loc', txn<Sender>()].extend((struct.copy()))
    Box['box'].extend((struct.copy()))
    Box[BoxMapKey(prefix='map', key=txn<Sender>())].extend((struct.copy()))
  }
  
  abimethod test_cases.state_mutations.contract.Contract.modify(): void
  {
    GlobalState['glob'][0u].baz: arc4.dynamic_array<arc4.uint8> = 'modified'
    LocalState['loc', txn<Sender>()][0u].baz: arc4.dynamic_array<arc4.uint8> = 'modified'
    Box['box'][0u].baz: arc4.dynamic_array<arc4.uint8> = 'modified'
    Box[BoxMapKey(prefix='map', key=txn<Sender>())][0u].baz: arc4.dynamic_array<arc4.uint8> = 'modified'
  }
  
  abimethod test_cases.state_mutations.contract.Contract.get(): arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  {
    a1: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = GlobalState['glob'].copy()
    a2: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = LocalState['loc', txn<Sender>()].copy()
    a3: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = Box['box'].copy()
    a4: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = Box[BoxMapKey(prefix='map', key=txn<Sender>())].copy()
    assert(a1 == a2, comment="expected local == global")
    assert(a1 == a3, comment="expected box == global")
    assert(a1 == a4, comment="expected map == global")
    return a1
  }
  
  baremethod test_cases.state_mutations.contract.Contract.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}

subroutine get_struct(): test_cases.state_mutations.contract.MyStruct
{
  return new test_cases.state_mutations.contract.MyStruct(bar=1_arc4u64, baz='baz')
}