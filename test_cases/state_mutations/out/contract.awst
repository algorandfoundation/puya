struct MyStruct {
  bar: arc4.uint64
  baz: arc4.dynamic_array<arc4.uint8>
}

contract Contract
{
  globals {
    ['glob']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  locals {
    ['loc']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  boxes {
    ['box']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
    ['map']: account => arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  }
  
  constructor()
  {
  }
  
  baremethod __algopy_default_create(): void
  {
  }
  
  baremethod opt_in(): void
  {
    GlobalState['glob']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    Box['box']: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    LocalState['loc', txn<Sender>()]: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
    Box[concat('map', reinterpret_cast<bytes>(txn<Sender>()))]: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = new arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>()
  }
  
  abimethod append(): void
  {
    struct: test_cases.state_mutations.contract.MyStruct = test_cases.state_mutations.contract::get_struct()
    GlobalState['glob'].extend((struct.copy()))
    LocalState['loc', txn<Sender>()].extend((struct.copy()))
    Box['box'].extend((struct.copy()))
    Box[concat('map', reinterpret_cast<bytes>(txn<Sender>()))].extend((struct.copy()))
  }
  
  abimethod modify(): void
  {
    GlobalState['glob'][0u].baz: arc4.dynamic_array<arc4.uint8> = arc4_encode('modified', arc4.dynamic_array<arc4.uint8>)
    LocalState['loc', txn<Sender>()][0u].baz: arc4.dynamic_array<arc4.uint8> = arc4_encode('modified', arc4.dynamic_array<arc4.uint8>)
    Box['box'][0u].baz: arc4.dynamic_array<arc4.uint8> = arc4_encode('modified', arc4.dynamic_array<arc4.uint8>)
    Box[concat('map', reinterpret_cast<bytes>(txn<Sender>()))][0u].baz: arc4.dynamic_array<arc4.uint8> = arc4_encode('modified', arc4.dynamic_array<arc4.uint8>)
  }
  
  abimethod get(): arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct>
  {
    a1: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = GlobalState['glob'].copy()
    a2: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = LocalState['loc', txn<Sender>()].copy()
    a3: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = Box['box'].copy()
    a4: arc4.dynamic_array<test_cases.state_mutations.contract.MyStruct> = Box[concat('map', reinterpret_cast<bytes>(txn<Sender>()))].copy()
    assert(a1 == a2, comment="expected local == global")
    assert(a1 == a3, comment="expected box == global")
    assert(a1 == a4, comment="expected map == global")
    return a1
  }
}

subroutine get_struct(): test_cases.state_mutations.contract.MyStruct
{
  return new test_cases.state_mutations.contract.MyStruct(bar=1arc4u64, baz=arc4_encode('baz', arc4.dynamic_array<arc4.uint8>))
}