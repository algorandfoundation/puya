{
    "hints": {
        "append()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "modify()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get()(uint64,string)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnN0YXRlX211dGF0aW9ucy5jb250cmFjdC5Db250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3RhdGVfbXV0YXRpb25zL2NvbnRyYWN0LnB5OjIyCiAgICAvLyBjbGFzcyBDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "glob": {
                    "type": "bytes",
                    "key": "glob"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "loc": {
                    "type": "bytes",
                    "key": "loc"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "methods": [
            {
                "name": "append",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "modify",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "opt_in": "CALL",
        "no_op": "CREATE"
    }
}