{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA6BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAdL;;AAAA;;;;;;AAAA;;;AAOK;;AAAA;AAAL;;;AAAA;;;;;;;;AAOA;;;AAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACS;;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;AAAS;;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAgB;AAAhB;;;AAAA;AAAA;AAAA;AACS;;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAqB;AAArB;;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAe;AAAf;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;AAAS;;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAqB;AAArB;;;AAAA;;AAAA;;AAAA;;AAER;;;AAEa;AAAA;AAAA;AAAA;AACS;;AAAT;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAS;;AAAT;AAAA;AAAA;AAEE;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;AACA;AAhCR;;;AAEQ;AAAkB;;AAAlB;AACA;AAAA;;AAAA;AAAiB;;AAAjB;AACS;;AAAT;AAAuB;;AAAvB;AACA;;AAAS;;AAAT;AAAA;AAAA;;AAAuB;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.state_mutations.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock \"box\" \"glob\" \"loc\" 0x00020000000000000001000a000362617a \"map\" 0x00086d6f646966696564 0x0000"
    },
    "58": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "60": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "63": {
      "op": "pushbytess 0x526e8bbf 0x95fef13d 0x0c29444b // method \"append()void\", method \"modify()void\", method \"get()(uint64,string)[]\""
    },
    "80": {
      "op": "txna ApplicationArgs 0"
    },
    "83": {
      "op": "match main_append_route@5 main_modify_route@6 main_get_route@7"
    },
    "91": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "92": {
      "op": "return"
    },
    "93": {
      "block": "main_get_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "95": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "96": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "97": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "99": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "100": {
      "callsub": "test_cases.state_mutations.contract.Contract.get",
      "op": "callsub get",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "103": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": []
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "113": {
      "op": "return"
    },
    "114": {
      "block": "main_modify_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "116": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "121": {
      "callsub": "test_cases.state_mutations.contract.Contract.modify",
      "op": "callsub modify"
    },
    "124": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "125": {
      "op": "return"
    },
    "126": {
      "block": "main_append_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "callsub": "test_cases.state_mutations.contract.Contract.append",
      "op": "callsub append"
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "137": {
      "op": "return"
    },
    "138": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "140": {
      "op": "switch main___algopy_default_create@10 main_opt_in@9",
      "stack_out": []
    },
    "146": {
      "op": "b main_after_if_else@11"
    },
    "149": {
      "block": "main_opt_in@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "151": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "152": {
      "callsub": "test_cases.state_mutations.contract.Contract.opt_in",
      "op": "callsub opt_in"
    },
    "155": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "156": {
      "op": "return"
    },
    "157": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "159": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "160": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "162": {
      "op": "return"
    },
    "163": {
      "subroutine": "test_cases.state_mutations.contract.Contract.append",
      "params": {},
      "block": "append",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "167": {
      "op": "bytec_1 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "168": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "169": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "170": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "172": {
      "op": "extract_uint16",
      "defined_out": [
        "l_count%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "l_count%0#0"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "l_count%0#0",
        "maybe_value%0#0"
      ]
    },
    "174": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ],
      "stack_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ]
    },
    "177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ],
      "stack_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1"
      ]
    },
    "178": {
      "op": "bytec_3 // 0x00020000000000000001000a000362617a",
      "defined_out": [
        "0x00020000000000000001000a000362617a",
        "1",
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ],
      "stack_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1",
        "0x00020000000000000001000a000362617a"
      ]
    },
    "179": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "182": {
      "op": "bytec_1 // \"glob\"",
      "stack_out": [
        "concat_result%0#0",
        "\"glob\""
      ]
    },
    "183": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "concat_result%0#0"
      ]
    },
    "184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "185": {
      "op": "txn Sender"
    },
    "187": {
      "op": "dup"
    },
    "188": {
      "op": "intc_0 // 0"
    },
    "189": {
      "op": "bytec_2 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "190": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "191": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "192": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "194": {
      "op": "extract_uint16",
      "defined_out": [
        "l_count%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "l_count%1#0"
      ]
    },
    "195": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "l_count%1#0",
        "maybe_value%1#0"
      ]
    },
    "196": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0"
      ]
    },
    "199": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "1"
      ]
    },
    "200": {
      "op": "bytec_3 // 0x00020000000000000001000a000362617a",
      "stack_out": [
        "tmp%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "1",
        "0x00020000000000000001000a000362617a"
      ]
    },
    "201": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%1#0"
      ]
    },
    "204": {
      "op": "bytec_2 // \"loc\""
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "concat_result%1#0"
      ]
    },
    "206": {
      "op": "app_local_put",
      "stack_out": []
    },
    "207": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "208": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "209": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "210": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "0"
      ]
    },
    "212": {
      "op": "extract_uint16",
      "defined_out": [
        "l_count%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "l_count%2#0"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "l_count%2#0",
        "maybe_value%2#0"
      ]
    },
    "214": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%2#0",
        "l_head_and_tail%2#0"
      ],
      "stack_out": [
        "l_count%2#0",
        "l_head_and_tail%2#0"
      ]
    },
    "217": {
      "op": "intc_1 // 1",
      "stack_out": [
        "l_count%2#0",
        "l_head_and_tail%2#0",
        "1"
      ]
    },
    "218": {
      "op": "bytec_3 // 0x00020000000000000001000a000362617a",
      "stack_out": [
        "l_count%2#0",
        "l_head_and_tail%2#0",
        "1",
        "0x00020000000000000001000a000362617a"
      ]
    },
    "219": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%2#0"
      ],
      "stack_out": [
        "concat_result%2#0"
      ]
    },
    "222": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "concat_result%2#0",
        "\"box\""
      ]
    },
    "223": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "224": {
      "op": "pop",
      "stack_out": [
        "concat_result%2#0"
      ]
    },
    "225": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "concat_result%2#0",
        "\"box\""
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "concat_result%2#0"
      ]
    },
    "227": {
      "op": "box_put",
      "stack_out": []
    },
    "228": {
      "op": "bytec 4 // \"map\""
    },
    "230": {
      "op": "txn Sender",
      "defined_out": [
        "\"map\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "\"map\"",
        "tmp%1#0"
      ]
    },
    "232": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "233": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "234": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "235": {
      "error": "check self.map entry exists",
      "op": "assert // check self.map entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%3#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "238": {
      "op": "extract_uint16",
      "defined_out": [
        "l_count%3#0",
        "maybe_value%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%3#0",
        "l_count%3#0"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "l_count%3#0",
        "maybe_value%3#0"
      ]
    },
    "240": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%3#0",
        "l_head_and_tail%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "l_count%3#0",
        "l_head_and_tail%3#0"
      ]
    },
    "243": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "l_count%3#0",
        "l_head_and_tail%3#0",
        "1"
      ]
    },
    "244": {
      "op": "bytec_3 // 0x00020000000000000001000a000362617a",
      "stack_out": [
        "tmp%2#0",
        "l_count%3#0",
        "l_head_and_tail%3#0",
        "1",
        "0x00020000000000000001000a000362617a"
      ]
    },
    "245": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "concat_result%3#0"
      ]
    },
    "248": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "concat_result%3#0",
        "tmp%2#0 (copy)"
      ]
    },
    "250": {
      "op": "box_del",
      "stack_out": [
        "tmp%2#0",
        "concat_result%3#0",
        "{box_del}"
      ]
    },
    "251": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "concat_result%3#0"
      ]
    },
    "252": {
      "op": "box_put",
      "stack_out": []
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "test_cases.state_mutations.contract.Contract.modify",
      "params": {},
      "block": "modify",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "258": {
      "op": "bytec_1 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "265": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "266": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "0"
      ]
    },
    "267": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "268": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "270": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "271": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_length%0#0"
      ]
    },
    "272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_length%0#0",
        "1"
      ]
    },
    "273": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0"
      ]
    },
    "274": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "276": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0",
        "end_of_array%0#0"
      ]
    },
    "277": {
      "op": "dig 3",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "279": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "array_head_and_tail%0#0 (copy)",
        "2"
      ]
    },
    "280": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "maybe_value%0#0",
        "next_item_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0"
      ]
    },
    "281": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0",
        "has_next%0#0"
      ]
    },
    "283": {
      "op": "select",
      "defined_out": [
        "array_head_and_tail%0#0",
        "end_offset%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "end_offset%0#0"
      ]
    },
    "284": {
      "op": "substring3",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "286": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "8"
      ]
    },
    "287": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%1#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "item_offset%1#0"
      ]
    },
    "288": {
      "op": "intc_0 // 0"
    },
    "289": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "0",
        "item_offset%1#0"
      ]
    },
    "290": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "291": {
      "op": "bytec 5 // 0x00086d6f646966696564",
      "defined_out": [
        "0x00086d6f646966696564",
        "data_up_to_item%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "data_up_to_item%0#0",
        "0x00086d6f646966696564"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "maybe_value%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "updated_data%0#0"
      ]
    },
    "294": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "updated_data%0#0",
        "0"
      ]
    },
    "295": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "defined_out": [
        "updated_value%0#0"
      ],
      "stack_out": [
        "updated_value%0#0"
      ]
    },
    "298": {
      "op": "bytec_1 // \"glob\"",
      "stack_out": [
        "updated_value%0#0",
        "\"glob\""
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "updated_value%0#0"
      ]
    },
    "300": {
      "op": "app_global_put",
      "stack_out": []
    },
    "301": {
      "op": "txn Sender"
    },
    "303": {
      "op": "dup"
    },
    "304": {
      "op": "intc_0 // 0"
    },
    "305": {
      "op": "bytec_2 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "306": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "307": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "308": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "309": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0"
      ]
    },
    "312": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "0"
      ]
    },
    "314": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0"
      ]
    },
    "315": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "318": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "array_length%1#0"
      ]
    },
    "319": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "array_length%1#0",
        "1"
      ]
    },
    "320": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0"
      ]
    },
    "321": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "323": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0",
        "end_of_array%1#0"
      ]
    },
    "324": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "326": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "array_head_and_tail%1#0 (copy)",
        "2"
      ]
    },
    "327": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "next_item_offset%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0"
      ]
    },
    "328": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "end_of_array%1#0",
        "next_item_offset%1#0",
        "has_next%1#0"
      ]
    },
    "330": {
      "op": "select",
      "defined_out": [
        "array_head_and_tail%1#0",
        "end_offset%1#0",
        "item_offset%2#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "array_head_and_tail%1#0",
        "item_offset%2#0",
        "end_offset%1#0"
      ]
    },
    "331": {
      "op": "substring3",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "332": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "333": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "8"
      ]
    },
    "334": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%3#0",
        "maybe_value%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "item_offset%3#0"
      ]
    },
    "335": {
      "op": "intc_0 // 0"
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "0",
        "item_offset%3#0"
      ]
    },
    "337": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "data_up_to_item%1#0"
      ]
    },
    "338": {
      "op": "bytec 5 // 0x00086d6f646966696564",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "data_up_to_item%1#0",
        "0x00086d6f646966696564"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "updated_data%1#0"
      ]
    },
    "341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "updated_data%1#0",
        "0"
      ]
    },
    "342": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "defined_out": [
        "tmp%1#0",
        "updated_value%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "updated_value%1#0"
      ]
    },
    "345": {
      "op": "bytec_2 // \"loc\""
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"loc\"",
        "updated_value%1#0"
      ]
    },
    "347": {
      "op": "app_local_put",
      "stack_out": []
    },
    "348": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "349": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "350": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "351": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "352": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "0"
      ]
    },
    "357": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0"
      ]
    },
    "358": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "360": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "maybe_value%2#0 (copy)",
        "0"
      ]
    },
    "361": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "item_offset%4#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "array_length%2#0"
      ]
    },
    "362": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "array_length%2#0",
        "1"
      ]
    },
    "363": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "item_offset%4#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0"
      ]
    },
    "364": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "366": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%4#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0",
        "end_of_array%2#0"
      ]
    },
    "367": {
      "op": "dig 3",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "369": {
      "op": "intc_2 // 2",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "2"
      ]
    },
    "370": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%4#0",
        "maybe_value%2#0",
        "next_item_offset%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "end_of_array%2#0",
        "next_item_offset%2#0",
        "has_next%2#0"
      ]
    },
    "373": {
      "op": "select",
      "defined_out": [
        "array_head_and_tail%2#0",
        "end_offset%2#0",
        "item_offset%4#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "array_head_and_tail%2#0",
        "item_offset%4#0",
        "end_offset%2#0"
      ]
    },
    "374": {
      "op": "substring3",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "375": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "376": {
      "op": "intc_3 // 8",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "8"
      ]
    },
    "377": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%5#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "item_offset%5#0"
      ]
    },
    "378": {
      "op": "intc_0 // 0"
    },
    "379": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "0",
        "item_offset%5#0"
      ]
    },
    "380": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "data_up_to_item%2#0"
      ]
    },
    "381": {
      "op": "bytec 5 // 0x00086d6f646966696564",
      "stack_out": [
        "maybe_value%2#0",
        "data_up_to_item%2#0",
        "0x00086d6f646966696564"
      ]
    },
    "383": {
      "op": "concat",
      "defined_out": [
        "maybe_value%2#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "updated_data%2#0"
      ]
    },
    "384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "updated_data%2#0",
        "0"
      ]
    },
    "385": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "defined_out": [
        "updated_value%2#0"
      ],
      "stack_out": [
        "updated_value%2#0"
      ]
    },
    "388": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "updated_value%2#0",
        "\"box\""
      ]
    },
    "389": {
      "op": "box_del",
      "defined_out": [
        "updated_value%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "updated_value%2#0",
        "{box_del}"
      ]
    },
    "390": {
      "op": "pop",
      "stack_out": [
        "updated_value%2#0"
      ]
    },
    "391": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "updated_value%2#0",
        "\"box\""
      ]
    },
    "392": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "updated_value%2#0"
      ]
    },
    "393": {
      "op": "box_put",
      "stack_out": []
    },
    "394": {
      "op": "bytec 4 // \"map\""
    },
    "396": {
      "op": "txn Sender",
      "defined_out": [
        "\"map\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "\"map\"",
        "tmp%4#0"
      ]
    },
    "398": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "399": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "400": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "401": {
      "error": "check self.map entry exists",
      "op": "assert // check self.map entry exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "402": {
      "op": "dup",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "403": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0"
      ]
    },
    "406": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)"
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "0"
      ]
    },
    "408": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0"
      ]
    },
    "409": {
      "op": "dig 2",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "411": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "412": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%3#0",
        "array_length%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "array_length%3#0"
      ]
    },
    "413": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "array_length%3#0",
        "1"
      ]
    },
    "414": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%3#0",
        "has_next%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0"
      ]
    },
    "415": {
      "op": "dig 2",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0",
        "array_head_and_tail%3#0 (copy)"
      ]
    },
    "417": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%3#0",
        "end_of_array%3#0",
        "has_next%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0",
        "end_of_array%3#0"
      ]
    },
    "418": {
      "op": "dig 3",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0",
        "end_of_array%3#0",
        "array_head_and_tail%3#0 (copy)"
      ]
    },
    "420": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0",
        "end_of_array%3#0",
        "array_head_and_tail%3#0 (copy)",
        "2"
      ]
    },
    "421": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%3#0",
        "end_of_array%3#0",
        "has_next%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "next_item_offset%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "has_next%3#0",
        "end_of_array%3#0",
        "next_item_offset%3#0"
      ]
    },
    "422": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "end_of_array%3#0",
        "next_item_offset%3#0",
        "has_next%3#0"
      ]
    },
    "424": {
      "op": "select",
      "defined_out": [
        "array_head_and_tail%3#0",
        "end_offset%3#0",
        "item_offset%6#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "array_head_and_tail%3#0",
        "item_offset%6#0",
        "end_offset%3#0"
      ]
    },
    "425": {
      "op": "substring3",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ]
    },
    "426": {
      "op": "dup",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "427": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "8"
      ]
    },
    "428": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%7#0",
        "maybe_value%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%6#0",
        "item_offset%7#0"
      ]
    },
    "429": {
      "op": "intc_0 // 0"
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%6#0",
        "0",
        "item_offset%7#0"
      ]
    },
    "431": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "data_up_to_item%3#0"
      ]
    },
    "432": {
      "op": "bytec 5 // 0x00086d6f646966696564",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "data_up_to_item%3#0",
        "0x00086d6f646966696564"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%5#0",
        "updated_data%3#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "updated_data%3#0"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "updated_data%3#0",
        "0"
      ]
    },
    "436": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "defined_out": [
        "tmp%5#0",
        "updated_value%3#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "updated_value%3#0"
      ]
    },
    "439": {
      "op": "dig 1",
      "stack_out": [
        "tmp%5#0",
        "updated_value%3#0",
        "tmp%5#0 (copy)"
      ]
    },
    "441": {
      "op": "box_del",
      "stack_out": [
        "tmp%5#0",
        "updated_value%3#0",
        "{box_del}"
      ]
    },
    "442": {
      "op": "pop",
      "stack_out": [
        "tmp%5#0",
        "updated_value%3#0"
      ]
    },
    "443": {
      "op": "box_put",
      "stack_out": []
    },
    "444": {
      "retsub": true,
      "op": "retsub"
    },
    "445": {
      "subroutine": "test_cases.state_mutations.contract.Contract.get",
      "params": {},
      "block": "get",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "448": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "449": {
      "op": "bytec_1 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "450": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a1#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "a1#0",
        "maybe_exists%0#0"
      ]
    },
    "451": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "a1#0"
      ]
    },
    "452": {
      "op": "txn Sender",
      "defined_out": [
        "a1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%0#0"
      ]
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a1#0",
        "tmp%0#0",
        "0"
      ]
    },
    "455": {
      "op": "bytec_2 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "a1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%0#0",
        "0",
        "\"loc\""
      ]
    },
    "456": {
      "op": "app_local_get_ex",
      "defined_out": [
        "a1#0",
        "a2#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "maybe_exists%1#0"
      ]
    },
    "457": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "a1#0",
        "a2#0"
      ]
    },
    "458": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\"",
        "a1#0",
        "a2#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "\"box\""
      ]
    },
    "459": {
      "op": "box_get",
      "defined_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "maybe_exists%2#0"
      ]
    },
    "460": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0"
      ]
    },
    "461": {
      "op": "bytec 4 // \"map\""
    },
    "463": {
      "op": "txn Sender",
      "defined_out": [
        "\"map\"",
        "a1#0",
        "a2#0",
        "a3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "\"map\"",
        "tmp%1#0"
      ]
    },
    "465": {
      "op": "concat",
      "defined_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "tmp%2#0"
      ]
    },
    "466": {
      "op": "box_get",
      "defined_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "a4#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "a4#0",
        "maybe_exists%3#0"
      ]
    },
    "467": {
      "error": "check self.map entry exists",
      "op": "assert // check self.map entry exists",
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "a4#0"
      ]
    },
    "468": {
      "op": "dig 3",
      "defined_out": [
        "a1#0",
        "a1#0 (copy)",
        "a2#0",
        "a3#0",
        "a4#0"
      ],
      "stack_out": [
        "a1#0",
        "a2#0",
        "a3#0",
        "a4#0",
        "a1#0 (copy)"
      ]
    },
    "470": {
      "op": "uncover 3",
      "stack_out": [
        "a1#0",
        "a3#0",
        "a4#0",
        "a1#0 (copy)",
        "a2#0"
      ]
    },
    "472": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "a3#0",
        "a4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a1#0",
        "a3#0",
        "a4#0",
        "tmp%3#0"
      ]
    },
    "473": {
      "error": "expected local == global",
      "op": "assert // expected local == global",
      "stack_out": [
        "a1#0",
        "a3#0",
        "a4#0"
      ]
    },
    "474": {
      "op": "dig 2",
      "stack_out": [
        "a1#0",
        "a3#0",
        "a4#0",
        "a1#0 (copy)"
      ]
    },
    "476": {
      "op": "uncover 2",
      "stack_out": [
        "a1#0",
        "a4#0",
        "a1#0 (copy)",
        "a3#0"
      ]
    },
    "478": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "a4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a1#0",
        "a4#0",
        "tmp%4#0"
      ]
    },
    "479": {
      "error": "expected box == global",
      "op": "assert // expected box == global",
      "stack_out": [
        "a1#0",
        "a4#0"
      ]
    },
    "480": {
      "op": "dig 1",
      "stack_out": [
        "a1#0",
        "a4#0",
        "a1#0 (copy)"
      ]
    },
    "482": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%5#0"
      ]
    },
    "483": {
      "error": "expected map == global",
      "op": "assert // expected map == global",
      "stack_out": [
        "a1#0"
      ]
    },
    "484": {
      "retsub": true,
      "op": "retsub"
    },
    "485": {
      "subroutine": "test_cases.state_mutations.contract.Contract.opt_in",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "488": {
      "op": "bytec_1 // \"glob\"",
      "defined_out": [
        "\"glob\""
      ],
      "stack_out": [
        "\"glob\""
      ]
    },
    "489": {
      "op": "bytec 6 // 0x0000",
      "defined_out": [
        "\"glob\"",
        "0x0000"
      ],
      "stack_out": [
        "\"glob\"",
        "0x0000"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "493": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "494": {
      "op": "pop",
      "stack_out": []
    },
    "495": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "\"box\""
      ]
    },
    "496": {
      "op": "bytec 6 // 0x0000",
      "stack_out": [
        "\"box\"",
        "0x0000"
      ]
    },
    "498": {
      "op": "box_put",
      "stack_out": []
    },
    "499": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "bytec_2 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "502": {
      "op": "bytec 6 // 0x0000",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "0x0000"
      ]
    },
    "504": {
      "op": "app_local_put",
      "stack_out": []
    },
    "505": {
      "op": "bytec 4 // \"map\""
    },
    "507": {
      "op": "txn Sender",
      "defined_out": [
        "\"map\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "\"map\"",
        "tmp%1#0"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "510": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "511": {
      "op": "box_del",
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "512": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "513": {
      "op": "bytec 6 // 0x0000",
      "stack_out": [
        "tmp%2#0",
        "0x0000"
      ]
    },
    "515": {
      "op": "box_put",
      "stack_out": []
    },
    "516": {
      "retsub": true,
      "op": "retsub"
    },
    "517": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "params": {
        "array_items_count#0": "uint64",
        "array_head_and_tail#0": "bytes",
        "new_items_count#0": "uint64",
        "new_head_and_tail#0": "bytes"
      },
      "block": "dynamic_array_concat_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "520": {
      "op": "pushbytes \"\""
    },
    "522": {
      "op": "dup"
    },
    "523": {
      "op": "frame_dig -2"
    },
    "525": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "526": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0"
      ]
    },
    "527": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)"
      ]
    },
    "529": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "530": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "532": {
      "block": "dynamic_array_concat_dynamic_element_for_header@1",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "534": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "537": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@4",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "540": {
      "op": "frame_dig -3"
    },
    "542": {
      "op": "frame_dig 4"
    },
    "544": {
      "op": "dup"
    },
    "545": {
      "op": "cover 2"
    },
    "547": {
      "op": "extract_uint16"
    },
    "548": {
      "op": "frame_dig 2"
    },
    "550": {
      "op": "+"
    },
    "551": {
      "op": "itob"
    },
    "552": {
      "op": "extract 6 2"
    },
    "555": {
      "op": "frame_dig 1"
    },
    "557": {
      "op": "swap"
    },
    "558": {
      "op": "concat"
    },
    "559": {
      "op": "frame_bury 1"
    },
    "561": {
      "op": "intc_2 // 2"
    },
    "562": {
      "op": "+"
    },
    "563": {
      "op": "frame_bury 4"
    },
    "565": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@1"
    },
    "568": {
      "block": "dynamic_array_concat_dynamic_element_after_for@4",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "570": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset_adjustment#2"
      ]
    },
    "571": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "573": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "574": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "576": {
      "block": "dynamic_array_concat_dynamic_element_for_header@5",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "578": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "580": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "581": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@8",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "584": {
      "op": "frame_dig -1"
    },
    "586": {
      "op": "frame_dig 4"
    },
    "588": {
      "op": "dup"
    },
    "589": {
      "op": "cover 2"
    },
    "591": {
      "op": "extract_uint16"
    },
    "592": {
      "op": "frame_dig 0"
    },
    "594": {
      "op": "+"
    },
    "595": {
      "op": "itob"
    },
    "596": {
      "op": "extract 6 2"
    },
    "599": {
      "op": "frame_dig 1"
    },
    "601": {
      "op": "swap"
    },
    "602": {
      "op": "concat"
    },
    "603": {
      "op": "frame_bury 1"
    },
    "605": {
      "op": "intc_2 // 2"
    },
    "606": {
      "op": "+"
    },
    "607": {
      "op": "frame_bury 4"
    },
    "609": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@5"
    },
    "612": {
      "block": "dynamic_array_concat_dynamic_element_after_for@8",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)"
      ]
    },
    "614": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "616": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "617": {
      "op": "itob",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%9#0"
      ]
    },
    "618": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "621": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_head#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0",
        "new_head#0"
      ]
    },
    "623": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "624": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "626": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ]
    },
    "628": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0",
        "item_offset_adjustment#2"
      ]
    },
    "630": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "632": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "634": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "635": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "637": {
      "op": "frame_dig 2",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0"
      ]
    },
    "639": {
      "op": "uncover 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0",
        "tmp%17#0"
      ]
    },
    "641": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "642": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%19#0"
      ]
    },
    "643": {
      "op": "frame_bury 0"
    },
    "645": {
      "retsub": true,
      "op": "retsub"
    },
    "646": {
      "subroutine": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "params": {
        "source#0": "bytes",
        "new_item#0": "bytes",
        "index#0": "uint64"
      },
      "block": "dynamic_array_replace_dynamic_element",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "649": {
      "op": "frame_dig -3",
      "defined_out": [
        "source#0 (copy)"
      ],
      "stack_out": [
        "source#0 (copy)"
      ]
    },
    "651": {
      "op": "substring 0 2",
      "defined_out": [
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0"
      ]
    },
    "654": {
      "op": "dup",
      "defined_out": [
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "size_b#0"
      ]
    },
    "655": {
      "op": "btoi",
      "defined_out": [
        "array_length#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0"
      ]
    },
    "656": {
      "op": "frame_dig -3",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "source#0 (copy)"
      ]
    },
    "658": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0"
      ]
    },
    "661": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "index#0 (copy)",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "index#0 (copy)"
      ]
    },
    "663": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail#0",
        "array_length#0",
        "index#0 (copy)",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "index#0 (copy)",
        "2"
      ]
    },
    "664": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "size_b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "tmp%0#1"
      ]
    },
    "665": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "array_head_and_tail#0 (copy)",
        "array_length#0",
        "size_b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "tmp%0#1",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "667": {
      "op": "swap",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#1"
      ]
    },
    "668": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0"
      ]
    },
    "669": {
      "op": "frame_dig -1",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "index#0 (copy)"
      ]
    },
    "671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail#0",
        "array_length#0",
        "index#0 (copy)",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "index#0 (copy)",
        "1"
      ]
    },
    "672": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "original_offset#0",
        "size_b#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "tmp%1#1"
      ]
    },
    "673": {
      "op": "intc_2 // 2",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "tmp%1#1",
        "2"
      ]
    },
    "674": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "head_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "head_offset#0"
      ]
    },
    "675": {
      "op": "dup",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "676": {
      "op": "cover 4",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "head_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "head_offset#0"
      ]
    },
    "678": {
      "op": "dig 2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "680": {
      "op": "swap",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "681": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "head_offset#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0"
      ]
    },
    "682": {
      "op": "dig 2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "684": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "head_offset#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0"
      ]
    },
    "685": {
      "op": "dig 4",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "array_length#0 (copy)",
        "end_of_tail#0",
        "head_offset#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)"
      ]
    },
    "687": {
      "op": "frame_dig -1",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)",
        "index#0 (copy)"
      ]
    },
    "689": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "head_offset#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%3#0"
      ]
    },
    "690": {
      "op": "intc_1 // 1",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%3#0",
        "1"
      ]
    },
    "691": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "head_offset#0",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0"
      ]
    },
    "692": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "head_offset#0",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)"
      ]
    },
    "694": {
      "op": "uncover 3",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0"
      ]
    },
    "696": {
      "op": "uncover 2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0",
        "is_before_end#0"
      ]
    },
    "698": {
      "op": "select",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "699": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "head_offset#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)"
      ]
    },
    "700": {
      "op": "dig 3",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "head_offset#0",
        "original_offset#0",
        "original_offset#0 (copy)",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0 (copy)"
      ]
    },
    "702": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "original_item_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0"
      ]
    },
    "703": {
      "op": "cover 5",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "original_item_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "705": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "new_item#0 (copy)",
        "original_item_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item#0 (copy)"
      ]
    },
    "707": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0"
      ]
    },
    "708": {
      "op": "cover 5",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "710": {
      "op": "dig 3",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0"
      ]
    },
    "713": {
      "op": "uncover 4",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0",
        "original_offset#0"
      ]
    },
    "715": {
      "op": "substring3",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "size_b#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%4#0"
      ]
    },
    "716": {
      "op": "frame_dig -2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%4#0",
        "new_item#0 (copy)"
      ]
    },
    "718": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "head_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "size_b#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "array_head_and_tail#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%5#0"
      ]
    },
    "719": {
      "op": "uncover 3",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%5#0",
        "array_head_and_tail#0"
      ]
    },
    "721": {
      "op": "uncover 2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "end_of_tail#0",
        "tmp%5#0",
        "array_head_and_tail#0",
        "end_offset#0"
      ]
    },
    "723": {
      "op": "uncover 3",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "tmp%5#0",
        "array_head_and_tail#0",
        "end_offset#0",
        "end_of_tail#0"
      ]
    },
    "725": {
      "op": "substring3",
      "defined_out": [
        "array_length#0",
        "head_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "size_b#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "726": {
      "op": "concat",
      "defined_out": [
        "array_length#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "array_length#0",
        "new_head_and_tail#0"
      ]
    },
    "727": {
      "op": "swap",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0"
      ]
    },
    "728": {
      "op": "intc_2 // 2",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0",
        "2"
      ]
    },
    "729": {
      "op": "*",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "size_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0"
      ]
    },
    "730": {
      "block": "dynamic_array_replace_dynamic_element_for_header@2",
      "stack_in": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "732": {
      "op": "frame_dig 5",
      "defined_out": [
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%7#0"
      ]
    },
    "734": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "continue_looping%0#0"
      ]
    },
    "735": {
      "op": "bz dynamic_array_replace_dynamic_element_after_for@5",
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0"
      ]
    },
    "738": {
      "op": "frame_dig 4"
    },
    "740": {
      "op": "dup"
    },
    "741": {
      "op": "frame_dig 1"
    },
    "743": {
      "op": "dup"
    },
    "744": {
      "op": "cover 3"
    },
    "746": {
      "op": "extract_uint16"
    },
    "747": {
      "op": "frame_dig 3"
    },
    "749": {
      "op": "+"
    },
    "750": {
      "op": "frame_dig 2"
    },
    "752": {
      "op": "-"
    },
    "753": {
      "op": "itob"
    },
    "754": {
      "op": "extract 6 2"
    },
    "757": {
      "op": "dig 2"
    },
    "759": {
      "op": "swap"
    },
    "760": {
      "op": "replace3"
    },
    "761": {
      "op": "frame_bury 4"
    },
    "763": {
      "op": "intc_2 // 2"
    },
    "764": {
      "op": "+"
    },
    "765": {
      "op": "frame_bury 1"
    },
    "767": {
      "op": "b dynamic_array_replace_dynamic_element_for_header@2"
    },
    "770": {
      "block": "dynamic_array_replace_dynamic_element_after_for@5",
      "stack_in": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "size_b#0"
      ]
    },
    "772": {
      "op": "frame_dig 4",
      "defined_out": [
        "new_head_and_tail#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "size_b#0",
        "new_head_and_tail#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "new_head_and_tail#0",
        "size_b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "size_b#0",
        "head_offset#0",
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "tmp%2#0"
      ]
    },
    "775": {
      "op": "frame_bury 0"
    },
    "777": {
      "retsub": true,
      "op": "retsub"
    }
  }
}