contract test_cases.state_mutations.contract.Contract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.state_mutations.contract.Contract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.state_mutations.contract.Contract.__puya_arc4_router__() -> bool:
            block@0: // L22
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@7
            block@1: // abi_routing_L22
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "append()void" => block@2, method "modify()void" => block@3, method "get()(uint64,string)[]" => block@4, * => return 0u}
            block@2: // append_route_L36
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                test_cases.state_mutations.contract.Contract.append()
                return 1u
            block@3: // modify_route_L44
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                test_cases.state_mutations.contract.Contract.modify()
                return 1u
            block@4: // get_route_L51
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: uint64 = (txn ApplicationID)
                (assert tmp%13#0) // is not creating
                let tmp%15#0: bytes = test_cases.state_mutations.contract.Contract.get()
                let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
                (log tmp%16#0)
                return 1u
            block@7: // bare_routing_L22
                let tmp%17#0: uint64 = (txn OnCompletion)
                goto_nth [block@8, block@9][tmp%17#0] else return 0u
            block@8: // __algopy_default_create_L22
                let tmp%18#0: uint64 = (txn ApplicationID)
                let tmp%19#0: bool = (! tmp%18#0)
                (assert tmp%19#0) // is creating
                return 1u
            block@9: // opt_in_L29
                let tmp%20#0: uint64 = (txn ApplicationID)
                (assert tmp%20#0) // is not creating
                test_cases.state_mutations.contract.Contract.opt_in()
                return 1u
        
        subroutine test_cases.state_mutations.contract.Contract.append() -> void:
            block@0: // L36
                let struct#0: bytes = test_cases.state_mutations.contract.get_struct()
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
                (assert maybe_exists%0#0) // check self.glob exists
                let result%1#0: bytes = (concat 0x0002 struct#0)
                let l_count%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
                let l_head_and_tail%0#0: bytes = ((extract 2 0) maybe_value%0#0)
                let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
                (app_global_put "glob" concat_result%0#0)
                let tmp%0#0: bytes = (txn Sender)
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
                (assert maybe_exists%1#0) // check self.loc exists for account
                let l_count%1#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
                let l_head_and_tail%1#0: bytes = ((extract 2 0) maybe_value%1#0)
                let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, result%1#0)
                let tmp%1#0: bytes = (txn Sender)
                (app_local_put tmp%1#0 "loc" concat_result%1#0)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "box")
                (assert maybe_exists%2#0) // check self.box exists
                let l_count%2#0: uint64 = (extract_uint16 maybe_value%2#0 0u)
                let l_head_and_tail%2#0: bytes = ((extract 2 0) maybe_value%2#0)
                let concat_result%2#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%2#0, l_head_and_tail%2#0, 1u, result%1#0)
                (box_del "box")
                (box_put "box" concat_result%2#0)
                let tmp%2#0: bytes = (txn Sender)
                let tmp%3#0: bytes = (concat "map" tmp%2#0)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get tmp%3#0)
                (assert maybe_exists%3#0) // check self.map entry exists
                let l_count%3#0: uint64 = (extract_uint16 maybe_value%3#0 0u)
                let l_head_and_tail%3#0: bytes = ((extract 2 0) maybe_value%3#0)
                let concat_result%3#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%3#0, l_head_and_tail%3#0, 1u, result%1#0)
                let tmp%4#0: bytes = (txn Sender)
                let tmp%5#0: bytes = (concat "map" tmp%4#0)
                (box_del tmp%5#0)
                (box_put tmp%5#0 concat_result%3#0)
                return 
        
        subroutine test_cases.state_mutations.contract.get_struct() -> bytes:
            block@0: // L64
                let encoded_tuple_buffer%3#0: bytes = 0x0000000000000001000a000362617a
                return encoded_tuple_buffer%3#0
        
        subroutine test_cases.state_mutations.contract.Contract.modify() -> void:
            block@0: // L44
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
                (assert maybe_exists%0#0) // check self.glob exists
                let array_head_and_tail%0#0: bytes = ((extract 2 0) maybe_value%0#0)
                let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 0u)
                let array_length%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
                let has_next%0#0: uint64 = (- array_length%0#0 1u) // on error: Index access is out of bounds
                let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u)
                let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
                let tmp%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
                let item_offset%1#0: uint64 = (extract_uint16 tmp%0#0 8u)
                let data_up_to_item%0#0: bytes = (extract3 tmp%0#0 0u item_offset%1#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 0x00086d6f646966696564)
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "glob")
                (assert maybe_exists%1#0) // check self.glob exists
                let updated_value%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%1#0, updated_data%0#0, 0u)
                (app_global_put "glob" updated_value%0#0)
                let tmp%1#0: bytes = (txn Sender)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%1#0 0u "loc")
                (assert maybe_exists%2#0) // check self.loc exists for account
                let array_head_and_tail%1#0: bytes = ((extract 2 0) maybe_value%2#0)
                let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%1#0 0u)
                let array_length%1#0: uint64 = (extract_uint16 maybe_value%2#0 0u)
                let has_next%1#0: uint64 = (- array_length%1#0 1u) // on error: Index access is out of bounds
                let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
                let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 2u)
                let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
                let tmp%2#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%2#0 end_offset%1#0)
                let item_offset%3#0: uint64 = (extract_uint16 tmp%2#0 8u)
                let data_up_to_item%1#0: bytes = (extract3 tmp%2#0 0u item_offset%3#0)
                let updated_data%1#0: bytes = (concat data_up_to_item%1#0 0x00086d6f646966696564)
                let tmp%3#0: bytes = (txn Sender)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "loc")
                (assert maybe_exists%3#0) // check self.loc exists for account
                let updated_value%1#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%3#0, updated_data%1#0, 0u)
                let tmp%4#0: bytes = (txn Sender)
                (app_local_put tmp%4#0 "loc" updated_value%1#0)
                let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (box_get "box")
                (assert maybe_exists%4#0) // check self.box exists
                let array_head_and_tail%2#0: bytes = ((extract 2 0) maybe_value%4#0)
                let item_offset%4#0: uint64 = (extract_uint16 array_head_and_tail%2#0 0u)
                let array_length%2#0: uint64 = (extract_uint16 maybe_value%4#0 0u)
                let has_next%2#0: uint64 = (- array_length%2#0 1u) // on error: Index access is out of bounds
                let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
                let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 2u)
                let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
                let tmp%5#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%4#0 end_offset%2#0)
                let item_offset%5#0: uint64 = (extract_uint16 tmp%5#0 8u)
                let data_up_to_item%2#0: bytes = (extract3 tmp%5#0 0u item_offset%5#0)
                let updated_data%2#0: bytes = (concat data_up_to_item%2#0 0x00086d6f646966696564)
                let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (box_get "box")
                (assert maybe_exists%5#0) // check self.box exists
                let updated_value%2#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%5#0, updated_data%2#0, 0u)
                (box_del "box")
                (box_put "box" updated_value%2#0)
                let tmp%6#0: bytes = (txn Sender)
                let tmp%7#0: bytes = (concat "map" tmp%6#0)
                let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (box_get tmp%7#0)
                (assert maybe_exists%6#0) // check self.map entry exists
                let array_head_and_tail%3#0: bytes = ((extract 2 0) maybe_value%6#0)
                let item_offset%6#0: uint64 = (extract_uint16 array_head_and_tail%3#0 0u)
                let array_length%3#0: uint64 = (extract_uint16 maybe_value%6#0 0u)
                let has_next%3#0: uint64 = (- array_length%3#0 1u) // on error: Index access is out of bounds
                let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
                let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 2u)
                let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
                let tmp%8#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%6#0 end_offset%3#0)
                let item_offset%7#0: uint64 = (extract_uint16 tmp%8#0 8u)
                let data_up_to_item%3#0: bytes = (extract3 tmp%8#0 0u item_offset%7#0)
                let updated_data%3#0: bytes = (concat data_up_to_item%3#0 0x00086d6f646966696564)
                let tmp%9#0: bytes = (txn Sender)
                let tmp%10#0: bytes = (concat "map" tmp%9#0)
                let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (box_get tmp%10#0)
                (assert maybe_exists%7#0) // check self.map entry exists
                let updated_value%3#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(maybe_value%7#0, updated_data%3#0, 0u)
                let tmp%11#0: bytes = (txn Sender)
                let tmp%12#0: bytes = (concat "map" tmp%11#0)
                (box_del tmp%12#0)
                (box_put tmp%12#0 updated_value%3#0)
                return 
        
        subroutine test_cases.state_mutations.contract.Contract.get() -> bytes:
            block@0: // L51
                let (a1#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
                (assert maybe_exists%0#0) // check self.glob exists
                let tmp%0#0: bytes = (txn Sender)
                let (a2#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
                (assert maybe_exists%1#0) // check self.loc exists for account
                let (a3#0: bytes, maybe_exists%2#0: bool) = (box_get "box")
                (assert maybe_exists%2#0) // check self.box exists
                let tmp%1#0: bytes = (txn Sender)
                let tmp%2#0: bytes = (concat "map" tmp%1#0)
                let (a4#0: bytes, maybe_exists%3#0: bool) = (box_get tmp%2#0)
                (assert maybe_exists%3#0) // check self.map entry exists
                let tmp%3#0: bool = (== a1#0 a2#0)
                (assert tmp%3#0) // expected local == global
                let tmp%4#0: bool = (== a1#0 a3#0)
                (assert tmp%4#0) // expected box == global
                let tmp%5#0: bool = (== a1#0 a4#0)
                (assert tmp%5#0) // expected map == global
                return a1#0
        
        subroutine test_cases.state_mutations.contract.Contract.opt_in() -> void:
            block@0: // L29
                (app_global_put "glob" 0x0000)
                (box_del "box")
                (box_put "box" 0x0000)
                let tmp%0#0: bytes = (txn Sender)
                (app_local_put tmp%0#0 "loc" 0x0000)
                let tmp%1#0: bytes = (txn Sender)
                let tmp%2#0: bytes = (concat "map" tmp%1#0)
                (box_del tmp%2#0)
                (box_put tmp%2#0 0x0000)
                return 
        
        subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
            block@0: // L189
                let new_head#0: bytes = 0x
                let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
                let tmp%0#0: uint64 = (* array_items_count#0 2u)
                let head_offset#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L199
                let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
                let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L200
                let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
                let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
                let tmp%2#0: bytes = (itob tmp%1#0)
                let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
                let new_head#2: bytes = (concat new_head#1 tmp%3#0)
                let head_offset#2: uint64 = (+ head_offset#1 2u)
                goto block@1
            block@4: // after_for_L199
                let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
                let head_offset#3: uint64 = 0u
                goto block@5
            block@5: // for_header_L204
                let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
                let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
                let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L205
                let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
                let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
                let tmp%6#0: bytes = (itob tmp%5#0)
                let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
                let new_head#4: bytes = (concat new_head#3 tmp%7#0)
                let head_offset#5: uint64 = (+ head_offset#4 2u)
                goto block@5
            block@8: // after_for_L204
                let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
                let tmp%9#0: bytes = (itob tmp%8#0)
                let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
                let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
                let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%0#0 item_offset_adjustment#2)
                let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
                let tmp%17#0: uint64 = (len new_head_and_tail#0)
                let tmp%18#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%17#0)
                let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
                return tmp%19#0
        
        subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L240
                let size_b#0: bytes = ((substring 0 2) source#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) source#0)
                let tmp%1#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L252
                let tmp%0#0: uint64 = (* index#0 2u)
                let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
                let tmp%1#0: uint64 = (+ index#0 1u)
                let head_offset#0: uint64 = (* tmp%1#0 2u)
                let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
                let end_of_tail#0: uint64 = (len array_head_and_tail#0)
                let tmp%3#0: uint64 = (- array_length#0 index#0)
                let is_before_end#0: uint64 = (- tmp%3#0 1u)
                let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
                let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
                let new_item_length#0: uint64 = (len new_item#0)
                let tmp%4#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
                let tmp%5#0: bytes = (concat tmp%4#0 new_item#0)
                let tmp%6#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
                let new_head_and_tail#0: bytes = (concat tmp%5#0 tmp%6#0)
                let tmp%7#0: uint64 = (* array_length#0 2u)
                goto block@1
            block@1: // for_header_L269
                let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
                let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#1 tmp%7#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L270
                let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
                let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
                let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
                let tmp%10#0: bytes = (itob tail_offset#2)
                let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%10#0)
                let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
                let head_offset#2: uint64 = (+ head_offset#1 2u)
                goto block@1
            block@4: // after_for_L269
                return new_head_and_tail#1
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u