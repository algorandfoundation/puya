#pragma version 10

test_cases.state_mutations.contract.Contract.approval_program:
    txn NumAppArgs
    bz main_bare_routing@9
    method "append()void"
    method "modify()void"
    method "get()(uint64,string)[]"
    txna ApplicationArgs 0
    match main_append_route@4 main_modify_route@5 main_get_route@6
    err // reject transaction

main_append_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub append
    int 1
    return

main_modify_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub modify
    int 1
    return

main_get_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@9:
    txn OnCompletion
    switch main___algopy_default_create@10 main_opt_in@11
    err // reject transaction

main___algopy_default_create@10:
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_opt_in@11:
    txn ApplicationID
    assert // is not creating
    callsub opt_in
    int 1
    return


// test_cases.state_mutations.contract.Contract.append() -> void:
append:
    proto 0 0
    callsub get_struct
    int 0
    byte "glob"
    app_global_get_ex
    assert // check self.glob exists
    byte 0x0002
    uncover 2
    concat
    swap
    dup
    int 0
    extract_uint16
    swap
    extract 2 0
    int 1
    dig 3
    callsub dynamic_array_concat_dynamic_element
    byte "glob"
    swap
    app_global_put
    txn Sender
    int 0
    byte "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    int 0
    extract_uint16
    swap
    extract 2 0
    int 1
    dig 3
    callsub dynamic_array_concat_dynamic_element
    txn Sender
    byte "loc"
    uncover 2
    app_local_put
    byte "box"
    box_get
    assert // check self.box exists
    dup
    int 0
    extract_uint16
    swap
    extract 2 0
    int 1
    dig 3
    callsub dynamic_array_concat_dynamic_element
    byte "box"
    box_del
    pop
    byte "box"
    swap
    box_put
    byte "map"
    txn Sender
    concat
    box_get
    assert // check self.map entry exists
    dup
    int 0
    extract_uint16
    swap
    extract 2 0
    int 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    byte "map"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    retsub


// test_cases.state_mutations.contract.get_struct() -> bytes:
get_struct:
    proto 0 1
    byte 0x0000000000000001000a000362617a
    retsub


// test_cases.state_mutations.contract.Contract.modify() -> void:
modify:
    proto 0 0
    int 0
    byte "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    extract 2 0
    dup
    int 0
    extract_uint16
    cover 2
    swap
    int 0
    extract_uint16
    int 1
    - // on error: Index access is out of bounds
    dig 1
    len
    swap
    dig 2
    int 2
    extract_uint16
    swap
    select
    swap
    cover 2
    substring3
    dup
    int 8
    extract_uint16
    int 0
    swap
    extract3
    byte 0x00086d6f646966696564
    concat
    int 0
    byte "glob"
    app_global_get_ex
    assert // check self.glob exists
    swap
    int 0
    callsub dynamic_array_replace_dynamic_element
    byte "glob"
    swap
    app_global_put
    txn Sender
    int 0
    byte "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    extract 2 0
    dup
    int 0
    extract_uint16
    cover 2
    swap
    int 0
    extract_uint16
    int 1
    - // on error: Index access is out of bounds
    dig 1
    len
    swap
    dig 2
    int 2
    extract_uint16
    swap
    select
    swap
    cover 2
    substring3
    dup
    int 8
    extract_uint16
    int 0
    swap
    extract3
    byte 0x00086d6f646966696564
    concat
    txn Sender
    int 0
    byte "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    swap
    int 0
    callsub dynamic_array_replace_dynamic_element
    txn Sender
    byte "loc"
    uncover 2
    app_local_put
    byte "box"
    box_get
    assert // check self.box exists
    dup
    extract 2 0
    dup
    int 0
    extract_uint16
    cover 2
    swap
    int 0
    extract_uint16
    int 1
    - // on error: Index access is out of bounds
    dig 1
    len
    swap
    dig 2
    int 2
    extract_uint16
    swap
    select
    swap
    cover 2
    substring3
    dup
    int 8
    extract_uint16
    int 0
    swap
    extract3
    byte 0x00086d6f646966696564
    concat
    byte "box"
    box_get
    assert // check self.box exists
    swap
    int 0
    callsub dynamic_array_replace_dynamic_element
    byte "box"
    box_del
    pop
    byte "box"
    swap
    box_put
    byte "map"
    txn Sender
    concat
    box_get
    assert // check self.map entry exists
    dup
    extract 2 0
    dup
    int 0
    extract_uint16
    cover 2
    swap
    int 0
    extract_uint16
    int 1
    - // on error: Index access is out of bounds
    dig 1
    len
    swap
    dig 2
    int 2
    extract_uint16
    swap
    select
    swap
    cover 2
    substring3
    dup
    int 8
    extract_uint16
    int 0
    swap
    extract3
    byte 0x00086d6f646966696564
    concat
    byte "map"
    txn Sender
    concat
    box_get
    assert // check self.map entry exists
    swap
    int 0
    callsub dynamic_array_replace_dynamic_element
    byte "map"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    retsub


// test_cases.state_mutations.contract.Contract.get() -> bytes:
get:
    proto 0 1
    int 0
    byte "glob"
    app_global_get_ex
    assert // check self.glob exists
    txn Sender
    int 0
    byte "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    byte "box"
    box_get
    swap
    cover 2
    assert // check self.box exists
    byte "map"
    txn Sender
    concat
    box_get
    assert // check self.map entry exists
    dig 3
    uncover 2
    ==
    assert // expected local == global
    dig 2
    uncover 2
    ==
    assert // expected box == global
    dig 1
    ==
    assert // expected map == global
    retsub


// test_cases.state_mutations.contract.Contract.opt_in() -> void:
opt_in:
    proto 0 0
    byte "glob"
    byte 0x0000
    app_global_put
    byte "box"
    box_del
    pop
    byte "box"
    byte 0x0000
    box_put
    txn Sender
    byte "loc"
    byte 0x0000
    app_local_put
    byte "map"
    txn Sender
    concat
    dup
    box_del
    pop
    byte 0x0000
    box_put
    retsub


// algopy_lib_arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    byte ""
    byte 0x
    frame_dig -2
    int 2
    *
    frame_dig -4
    int 2
    *
    int 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    frame_dig -3
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    int 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 0
    int 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 2
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    frame_dig -1
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 0
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    int 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -3
    frame_dig 3
    frame_dig 0
    substring3
    concat
    frame_dig -1
    len
    frame_dig -1
    frame_dig 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// algopy_lib_arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_dynamic_element:
    proto 3 1
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_dynamic_element
    concat
    retsub


// algopy_lib_arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_dynamic_element:
    proto 4 1
    frame_dig -2
    int 2
    *
    frame_dig -4
    swap
    extract_uint16
    frame_dig -2
    int 1
    +
    int 2
    *
    dup
    cover 2
    frame_dig -4
    swap
    extract_uint16
    frame_dig -4
    len
    frame_dig -1
    frame_dig -2
    -
    int 1
    -
    dig 1
    uncover 3
    uncover 2
    select
    dup
    dig 3
    -
    cover 3
    frame_dig -3
    len
    cover 3
    frame_dig -4
    int 0
    uncover 4
    substring3
    frame_dig -3
    concat
    frame_dig -4
    uncover 2
    uncover 3
    substring3
    concat
    frame_dig -1
    int 2
    *

static_array_replace_dynamic_element_for_header@1:
    frame_dig 0
    frame_dig 4
    <
    bz static_array_replace_dynamic_element_after_for@4
    frame_dig 3
    dup
    frame_dig 0
    dup
    cover 3
    extract_uint16
    frame_dig 2
    +
    frame_dig 1
    -
    itob
    extract 6 2
    dig 2
    swap
    replace3
    frame_bury 3
    int 2
    +
    frame_bury 0
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_after_for@4:
    frame_dig 3
    frame_bury 0
    retsub
