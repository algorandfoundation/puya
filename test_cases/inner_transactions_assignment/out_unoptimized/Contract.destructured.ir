contract test_cases.inner_transactions_assignment.contract.Contract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__() -> bool:
            block@0: // L11
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@6
            block@1: // abi_routing_L11
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_itxn_slice()void" => block@2, method "test_itxn_nested()void" => block@3, * => block@4}
            block@2: // test_itxn_slice_route_L13
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice()
                return 1u
            block@3: // test_itxn_nested_route_L30
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 NoOp)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                let tmp%10#0: bool = (!= tmp%9#0 0u)
                (assert tmp%10#0) // is not creating
                test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested()
                return 1u
            block@4: // switch_case_default_L11
                goto block@5
            block@5: // switch_case_next_L11
                goto block@10
            block@6: // bare_routing_L11
                let tmp%11#0: uint64 = (txn OnCompletion)
                switch tmp%11#0 {0u => block@7, * => block@8}
            block@7: // __algopy_default_create_L1
                let tmp%12#0: uint64 = (txn ApplicationID)
                let tmp%13#0: bool = (== tmp%12#0 0u)
                (assert tmp%13#0) // is creating
                test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create()
                return 1u
            block@8: // switch_case_default_L11
                goto block@9
            block@9: // switch_case_next_L11
                goto block@10
            block@10: // after_if_else_L11
                return 0u
        
        subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
            block@0: // L13
                let pay1%%param_Receiver_idx_0#0: bytes = (txn Sender)
                let pay2%%param_Receiver_idx_0#0: bytes = pay1%%param_Receiver_idx_0#0
                let pay3%%param_Receiver_idx_0#0: bytes = pay2%%param_Receiver_idx_0#0
                itxn_begin
                ((itxn_field Note) "pay1")
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
                ((itxn_field TypeEnum) pay)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L26
                itxn_next
                ((itxn_field ConfigAssetTotal) 1u)
                ((itxn_field Note) "acfg")
                ((itxn_field ConfigAssetName) "TEST")
                ((itxn_field ConfigAssetUnitName) "TST")
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L26
                itxn_next
                ((itxn_field TypeEnum) pay)
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay2%%param_Receiver_idx_0#0)
                ((itxn_field Note) "pay2")
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L26
                itxn_next
                ((itxn_field TypeEnum) pay)
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
                ((itxn_field Note) "pay3")
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L26
                itxn_submit
                let sliced_txns.0.Note#0: bytes = (gitxn 1 Note)
                let sliced_txns.1.Note#0: bytes = (gitxn 2 Note)
                let tmp%0#0: bool = (== sliced_txns.0.Note#0 0x61636667)
                (assert tmp%0#0)
                let tmp%1#0: bool = (== sliced_txns.1.Note#0 0x70617932)
                (assert tmp%1#0)
                return 
        
        subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
            block@0: // L30
                let pay1%%param_Receiver_idx_0#0: bytes = (txn Sender)
                let pay2%%param_Receiver_idx_0#0: bytes = pay1%%param_Receiver_idx_0#0
                let pay3%%param_Receiver_idx_0#0: bytes = pay2%%param_Receiver_idx_0#0
                let tmp%0#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x6869)
                itxn_begin
                ((itxn_field Note) "pay1")
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
                ((itxn_field TypeEnum) pay)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L45
                itxn_next
                ((itxn_field ConfigAssetTotal) 1u)
                ((itxn_field Note) "acfg")
                ((itxn_field ConfigAssetName) "TEST")
                ((itxn_field ConfigAssetUnitName) "TST")
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L45
                itxn_next
                ((itxn_field TypeEnum) pay)
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay2%%param_Receiver_idx_0#0)
                ((itxn_field Note) "pay2")
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L45
                itxn_next
                ((itxn_field TypeEnum) pay)
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
                ((itxn_field Note) "pay3")
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L45
                itxn_submit
                let tmp%1#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x7468657265)
                let nested_tuple.0#0: bytes = tmp%0#0
                let nested_tuple.2#0: bytes = tmp%1#0
                let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
                let nested_tuple.1.1.Note#0: bytes = (gitxn 2 Note)
                let tmp%2#0: bool = (== nested_tuple.0#0 0x6869)
                (assert tmp%2#0)
                let tmp%3#0: bool = (== nested_tuple.1.0.Note#0 0x61636667)
                (assert tmp%3#0)
                let tmp%4#0: bool = (== nested_tuple.1.1.Note#0 0x70617932)
                (assert tmp%4#0)
                let tmp%5#0: bool = (== nested_tuple.2#0 0x7468657265)
                (assert tmp%5#0)
                let nested_tuple_copy.1.0.Note#0: bytes = nested_tuple.1.0.Note#0
                let nested_tuple_copy.1.1.Note#0: bytes = nested_tuple.1.1.Note#0
                let tmp%6#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x6d61796265)
                let tmp%7#0: bool = (== tmp%6#0 0x6d61796265)
                goto tmp%7#0 ? block@5 : block@9
            block@5: // if_body_L59
                let tmp%8#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x686932)
                itxn_begin
                ((itxn_field Note) "pay1")
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
                ((itxn_field TypeEnum) pay)
                ((itxn_field Fee) 0u)
                goto block@6
            block@6: // next_txn_L61
                itxn_next
                ((itxn_field ConfigAssetTotal) 1u)
                ((itxn_field Note) "acfg2")
                ((itxn_field ConfigAssetName) "TEST")
                ((itxn_field ConfigAssetUnitName) "TST")
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                goto block@7
            block@7: // next_txn_L61
                itxn_next
                ((itxn_field TypeEnum) pay)
                ((itxn_field Amount) 0u)
                ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
                ((itxn_field Note) "pay5")
                ((itxn_field Fee) 0u)
                goto block@8
            block@8: // next_txn_L61
                itxn_submit
                let tmp%9#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x746865726532)
                let nested_tuple.0#0: bytes = tmp%8#0
                let nested_tuple.2#0: bytes = tmp%9#0
                let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
                let nested_tuple.1.1.Note#0: bytes = (itxn Note)
                goto block@9
            block@9: // after_if_else_L58
                let tmp%10#0: bool = (== nested_tuple.0#0 0x686932)
                (assert tmp%10#0)
                let tmp%11#0: bool = (== nested_tuple.1.0.Note#0 0x6163666732)
                (assert tmp%11#0)
                let tmp%12#0: bool = (== nested_tuple.1.1.Note#0 0x70617935)
                (assert tmp%12#0)
                let tmp%13#0: bool = (== nested_tuple.2#0 0x746865726532)
                (assert tmp%13#0)
                let mish_mash.0.Note#0: bytes = nested_tuple_copy.1.0.Note#0
                let mish_mash.1.Note#0: bytes = nested_tuple_copy.1.1.Note#0
                let mish_mash.2.0.Note#0: bytes = nested_tuple.1.0.Note#0
                let mish_mash.2.1.Note#0: bytes = nested_tuple.1.1.Note#0
                let tmp%14#0: bool = (== mish_mash.0.Note#0 0x61636667)
                (assert tmp%14#0)
                let tmp%15#0: bool = (== mish_mash.1.Note#0 0x70617932)
                (assert tmp%15#0)
                let tmp%16#0: bool = (== mish_mash.2.0.Note#0 0x6163666732)
                (assert tmp%16#0)
                let tmp%17#0: bool = (== mish_mash.2.1.Note#0 0x70617935)
                (assert tmp%17#0)
                return 
        
        subroutine test_cases.inner_transactions_assignment.contract.echo(value: bytes) -> bytes:
            block@0: // L77
                return value#0
        
        subroutine test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u