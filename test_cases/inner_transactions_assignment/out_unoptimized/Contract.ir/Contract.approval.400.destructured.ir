main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L11
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@10
    block@5: // call_NoOp_L11
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_itxn_slice()void" => block@6, method "test_itxn_nested()void" => block@7, * => block@8}
    block@6: // test_itxn_slice_route_L12
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice[routing]()
        goto block@9
    block@7: // test_itxn_nested_route_L29
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested[routing]()
        goto block@9
    block@8: // switch_case_default_L11
        goto block@9
    block@9: // switch_case_next_L11
        goto block@13
    block@10: // create_NoOp_L11
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@11}
    block@11: // switch_case_default_L11
        goto block@12
    block@12: // switch_case_next_L11
        goto block@13
    block@13: // after_if_else_L11
        goto block@14
    block@14: // switch_case_next_L11
        goto block@15
    block@15: // switch_case_next_L11
        goto block@20
    block@16: // bare_routing_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@17, * => block@18}
    block@17: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create_L1
        exit 1u
    block@18: // switch_case_default_L11
        goto block@19
    block@19: // switch_case_next_L11
        goto block@20
    block@20: // after_if_else_L11
        exit 0u
    block@21: // after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.inner_transactions_assignment.contract.echo(value: bytes) -> bytes:
    block@0: // L76
        return value#0

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice[routing]() -> void:
    block@0: // L12
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice()
        exit 1u

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested[routing]() -> void:
    block@0: // L29
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested()
        exit 1u

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
    block@0: // L12
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        let pay2%%param_Receiver_idx_0#0: account = pay1%%param_Receiver_idx_0#0
        let pay3%%param_Receiver_idx_0#0: account = pay2%%param_Receiver_idx_0#0
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L25
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L25
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay2%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L25
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L25
        itxn_submit
        let sliced_txns.0.Note#0: bytes = (gitxn 1 Note)
        let sliced_txns.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%0#0: bool = (== sliced_txns.0.Note#0 0x61636667)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== sliced_txns.1.Note#0 0x70617932)
        (assert tmp%1#0)
        return 

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
    block@0: // L29
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        let pay2%%param_Receiver_idx_0#0: account = pay1%%param_Receiver_idx_0#0
        let pay3%%param_Receiver_idx_0#0: account = pay2%%param_Receiver_idx_0#0
        let tmp%0#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x6869)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L44
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L44
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay2%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L44
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L44
        itxn_submit
        let tmp%1#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x7468657265)
        let nested_tuple.0#0: bytes = tmp%0#0
        let nested_tuple.2#0: bytes = tmp%1#0
        let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%2#0: bool = (== nested_tuple.0#0 0x6869)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== nested_tuple.1.0.Note#0 0x61636667)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== nested_tuple.1.1.Note#0 0x70617932)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== nested_tuple.2#0 0x7468657265)
        (assert tmp%5#0)
        let nested_tuple_copy.1.0.Note#0: bytes = nested_tuple.1.0.Note#0
        let nested_tuple_copy.1.1.Note#0: bytes = nested_tuple.1.1.Note#0
        let tmp%6#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x6d61796265)
        let tmp%7#0: bool = (== tmp%6#0 0x6d61796265)
        goto tmp%7#0 ? block@5 : block@9
    block@5: // if_body_L58
        let tmp%8#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x686932)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L60
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg2")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L60
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay3%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay5")
        ((itxn_field Fee) 0u)
        goto block@8
    block@8: // next_txn_L60
        itxn_submit
        let tmp%9#0: bytes = test_cases.inner_transactions_assignment.contract.echo(0x746865726532)
        let nested_tuple.0#0: bytes = tmp%8#0
        let nested_tuple.2#0: bytes = tmp%9#0
        let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#0: bytes = (itxn Note)
        goto block@9
    block@9: // after_if_else_L57
        let tmp%10#0: bool = (== nested_tuple.0#0 0x686932)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== nested_tuple.1.0.Note#0 0x6163666732)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== nested_tuple.1.1.Note#0 0x70617935)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== nested_tuple.2#0 0x746865726532)
        (assert tmp%13#0)
        let mish_mash.0.Note#0: bytes = nested_tuple_copy.1.0.Note#0
        let mish_mash.1.Note#0: bytes = nested_tuple_copy.1.1.Note#0
        let mish_mash.2.0.Note#0: bytes = nested_tuple.1.0.Note#0
        let mish_mash.2.1.Note#0: bytes = nested_tuple.1.1.Note#0
        let tmp%14#0: bool = (== mish_mash.0.Note#0 0x61636667)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== mish_mash.1.Note#0 0x70617932)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== mish_mash.2.0.Note#0 0x6163666732)
        (assert tmp%16#0)
        let tmp%17#0: bool = (== mish_mash.2.1.Note#0 0x70617935)
        (assert tmp%17#0)
        return 