#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3
    bytecblock 0x61636667 0x70617932 "pay1" "TEST" "TST" 0x6163666732 0x70617935 "pay3" 0x6869 0x7468657265 0x6d61796265 0x686932 0x746865726532

main_block@0:

main_block@1:
    // inner_transactions_assignment/contract.py:11
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // inner_transactions_assignment/contract.py:11
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xe46d9019 // method "test_itxn_slice()void"
    pushbytes 0xf883853e // method "test_itxn_nested()void"
    uncover 2
    match main_test_itxn_slice_route@3 main_test_itxn_nested_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // inner_transactions_assignment/contract.py:11
    // class Contract(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__@12:
    return

main_test_itxn_nested_route@4:
    // inner_transactions_assignment/contract.py:29
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_itxn_nested
    intc_1 // 1
    b main_after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__@12

main_test_itxn_slice_route@3:
    // inner_transactions_assignment/contract.py:12
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_itxn_slice
    intc_1 // 1
    b main_after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__@12

main_bare_routing@7:
    // inner_transactions_assignment/contract.py:11
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algopy_default_create@8:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@13:

main_after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create@14:
    intc_1 // 1
    b main_after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__@12


// test_cases.inner_transactions_assignment.contract.echo(value: bytes) -> bytes:
echo:
    // inner_transactions_assignment/contract.py:76-77
    // @subroutine
    // def echo(value: Bytes) -> Bytes:
    proto 1 1

echo_block@0:
    // inner_transactions_assignment/contract.py:78
    // return value
    frame_dig -1
    retsub


// test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
test_itxn_slice:
    // inner_transactions_assignment/contract.py:12-13
    // @arc4.abimethod
    // def test_itxn_slice(self) -> None:
    proto 0 0

test_itxn_slice_block@0:
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    txn Sender
    // inner_transactions_assignment/contract.py:21
    // pay2 = pay1.copy()
    dupn 2
    cover 2
    // inner_transactions_assignment/contract.py:23
    // pay3 = pay2.copy()
    swap
    // inner_transactions_assignment/contract.py:25
    // sliced_txns = itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1]
    itxn_begin
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_slice_next_txn@1:
    // inner_transactions_assignment/contract.py:25
    // sliced_txns = itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1]
    itxn_next
    // inner_transactions_assignment/contract.py:18
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // inner_transactions_assignment/contract.py:17
    // note="acfg",
    bytec_0 // "acfg"
    itxn_field Note
    // inner_transactions_assignment/contract.py:16
    // asset_name="TEST",
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    // inner_transactions_assignment/contract.py:15
    // unit_name="TST",
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    // inner_transactions_assignment/contract.py:14
    // acfg = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_slice_next_txn@2:
    // inner_transactions_assignment/contract.py:25
    // sliced_txns = itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1]
    itxn_next
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    frame_dig 0
    itxn_field Receiver
    // inner_transactions_assignment/contract.py:22
    // pay2.set(note="pay2")
    bytec_1 // "pay2"
    itxn_field Note
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_0 // 0
    itxn_field Fee

test_itxn_slice_next_txn@3:
    // inner_transactions_assignment/contract.py:25
    // sliced_txns = itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1]
    itxn_next
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    frame_dig 1
    itxn_field Receiver
    // inner_transactions_assignment/contract.py:24
    // pay3.set(note="pay3")
    bytec 7 // "pay3"
    itxn_field Note
    // inner_transactions_assignment/contract.py:20
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_0 // 0
    itxn_field Fee

test_itxn_slice_next_txn@4:
    // inner_transactions_assignment/contract.py:25
    // sliced_txns = itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1]
    itxn_submit
    gitxn 1 Note
    gitxn 2 Note
    swap
    // inner_transactions_assignment/contract.py:26
    // assert sliced_txns[0].note == b"acfg"
    bytec_0 // 0x61636667
    ==
    assert
    // inner_transactions_assignment/contract.py:27
    // assert sliced_txns[1].note == b"pay2"
    bytec_1 // 0x70617932
    ==
    assert
    retsub


// test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
test_itxn_nested:
    // inner_transactions_assignment/contract.py:29-30
    // @arc4.abimethod
    // def test_itxn_nested(self) -> None:
    proto 0 0
    intc_0 // 0
    dupn 6

test_itxn_nested_block@0:
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    txn Sender
    dupn 3
    // inner_transactions_assignment/contract.py:38
    // pay2 = pay1.copy()
    cover 2
    // inner_transactions_assignment/contract.py:40
    // pay3 = pay2.copy()
    swap
    // inner_transactions_assignment/contract.py:43
    // echo(Bytes(b"hi")),
    bytec 8 // 0x6869
    callsub echo
    swap
    // inner_transactions_assignment/contract.py:44
    // itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    itxn_begin
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@1:
    // inner_transactions_assignment/contract.py:44
    // itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    itxn_next
    // inner_transactions_assignment/contract.py:35
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // inner_transactions_assignment/contract.py:34
    // note="acfg",
    bytec_0 // "acfg"
    itxn_field Note
    // inner_transactions_assignment/contract.py:33
    // asset_name="TEST",
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    // inner_transactions_assignment/contract.py:32
    // unit_name="TST",
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    // inner_transactions_assignment/contract.py:31
    // acfg = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@2:
    // inner_transactions_assignment/contract.py:44
    // itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    itxn_next
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    frame_dig 8
    itxn_field Receiver
    // inner_transactions_assignment/contract.py:39
    // pay2.set(note="pay2")
    bytec_1 // "pay2"
    itxn_field Note
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@3:
    // inner_transactions_assignment/contract.py:44
    // itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    itxn_next
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    frame_dig 9
    itxn_field Receiver
    // inner_transactions_assignment/contract.py:41
    // pay3.set(note="pay3")
    bytec 7 // "pay3"
    itxn_field Note
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@4:
    // inner_transactions_assignment/contract.py:44
    // itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    itxn_submit
    // inner_transactions_assignment/contract.py:45
    // echo(Bytes(b"there")),
    bytec 9 // 0x7468657265
    callsub echo
    // inner_transactions_assignment/contract.py:42-46
    // nested_tuple = (
    //     echo(Bytes(b"hi")),
    //     itxn.submit_txns(pay1, acfg, pay2, pay3)[1:-1],
    //     echo(Bytes(b"there")),
    // )
    frame_dig 10
    dup
    cover 2
    frame_bury 0
    dup
    cover 2
    frame_bury 3
    gitxn 1 Note
    dup
    cover 2
    frame_bury 1
    gitxn 2 Note
    dup
    cover 3
    frame_bury 2
    // inner_transactions_assignment/contract.py:47
    // assert nested_tuple[0] == b"hi"
    bytec 8 // 0x6869
    ==
    assert
    // inner_transactions_assignment/contract.py:48
    // assert nested_tuple[1][0].note == b"acfg"
    dup
    bytec_0 // 0x61636667
    ==
    assert
    // inner_transactions_assignment/contract.py:49
    // assert nested_tuple[1][1].note == b"pay2"
    dig 1
    bytec_1 // 0x70617932
    ==
    assert
    // inner_transactions_assignment/contract.py:50
    // assert nested_tuple[2] == b"there"
    uncover 2
    bytec 9 // 0x7468657265
    ==
    assert
    frame_bury 4
    frame_bury 5
    // inner_transactions_assignment/contract.py:57
    // if echo(Bytes(b"maybe")) == b"maybe":
    bytec 10 // 0x6d61796265
    callsub echo
    bytec 10 // 0x6d61796265
    ==
    bz test_itxn_nested_after_if_else@9

test_itxn_nested_if_body@5:
    // inner_transactions_assignment/contract.py:59
    // echo(Bytes(b"hi2")),
    bytec 11 // 0x686932
    callsub echo
    frame_bury 6
    // inner_transactions_assignment/contract.py:60
    // itxn.submit_txns(pay1, acfg, pay3)[1:],
    itxn_begin
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    frame_dig 7
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@6:
    // inner_transactions_assignment/contract.py:60
    // itxn.submit_txns(pay1, acfg, pay3)[1:],
    itxn_next
    // inner_transactions_assignment/contract.py:35
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // inner_transactions_assignment/contract.py:53
    // acfg.set(note="acfg2")
    bytec 5 // "acfg2"
    itxn_field Note
    // inner_transactions_assignment/contract.py:33
    // asset_name="TEST",
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    // inner_transactions_assignment/contract.py:32
    // unit_name="TST",
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    // inner_transactions_assignment/contract.py:31
    // acfg = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@7:
    // inner_transactions_assignment/contract.py:60
    // itxn.submit_txns(pay1, acfg, pay3)[1:],
    itxn_next
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    frame_dig 9
    itxn_field Receiver
    // inner_transactions_assignment/contract.py:55
    // pay3.set(note="pay5")
    bytec 6 // "pay5"
    itxn_field Note
    // inner_transactions_assignment/contract.py:37
    // pay1 = itxn.Payment(receiver=Txn.sender, amount=0, note="pay1")
    intc_0 // 0
    itxn_field Fee

test_itxn_nested_next_txn@8:
    // inner_transactions_assignment/contract.py:60
    // itxn.submit_txns(pay1, acfg, pay3)[1:],
    itxn_submit
    // inner_transactions_assignment/contract.py:61
    // echo(Bytes(b"there2")),
    bytec 12 // 0x746865726532
    callsub echo
    // inner_transactions_assignment/contract.py:58-62
    // nested_tuple = (
    //     echo(Bytes(b"hi2")),
    //     itxn.submit_txns(pay1, acfg, pay3)[1:],
    //     echo(Bytes(b"there2")),
    // )
    frame_dig 6
    frame_bury 0
    frame_bury 3
    gitxn 1 Note
    frame_bury 1
    itxn Note
    frame_bury 2

test_itxn_nested_after_if_else@9:
    // inner_transactions_assignment/contract.py:63
    // assert nested_tuple[0] == b"hi2"
    frame_dig 0
    bytec 11 // 0x686932
    ==
    assert
    // inner_transactions_assignment/contract.py:64
    // assert nested_tuple[1][0].note == b"acfg2"
    frame_dig 1
    dup
    bytec 5 // 0x6163666732
    ==
    assert
    // inner_transactions_assignment/contract.py:65
    // assert nested_tuple[1][1].note == b"pay5"
    frame_dig 2
    dup
    bytec 6 // 0x70617935
    ==
    assert
    // inner_transactions_assignment/contract.py:66
    // assert nested_tuple[2] == b"there2"
    frame_dig 3
    bytec 12 // 0x746865726532
    ==
    assert
    frame_dig 4
    frame_dig 5
    swap
    uncover 3
    cover 2
    // inner_transactions_assignment/contract.py:70
    // assert mish_mash[0].note == b"acfg"
    bytec_0 // 0x61636667
    ==
    assert
    // inner_transactions_assignment/contract.py:71
    // assert mish_mash[1].note == b"pay2"
    bytec_1 // 0x70617932
    ==
    assert
    // inner_transactions_assignment/contract.py:72
    // assert mish_mash[2][0].note == b"acfg2"
    bytec 5 // 0x6163666732
    ==
    assert
    // inner_transactions_assignment/contract.py:73
    // assert mish_mash[2][1].note == b"pay5"
    bytec 6 // 0x70617935
    ==
    assert
    retsub
