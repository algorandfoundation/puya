#pragma version 10

test_cases.inner_transactions_assignment.contract.Contract.approval_program:
    intcblock 0 1 3
    bytecblock 0x61636667 0x70617932 "pay1" "TEST" "TST" "pay3" 0x6869 0x7468657265 0x6d61796265 0x686932 0x6163666732 0x70617935 0x746865726532
    callsub __puya_arc4_router__
    return


// test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    pushbytess 0xe46d9019 0xf883853e // method "test_itxn_slice()void", method "test_itxn_nested()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___test_itxn_slice_route@2 __puya_arc4_router___test_itxn_nested_route@3
    intc_0 // 0
    retsub

__puya_arc4_router___test_itxn_slice_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub test_itxn_slice
    intc_1 // 1
    retsub

__puya_arc4_router___test_itxn_nested_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub test_itxn_nested
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@6:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // is creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@10:
    intc_0 // 0
    retsub


// test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
test_itxn_slice:
    proto 0 0
    txn Sender
    itxn_begin
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    dup
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec_0 // "acfg"
    itxn_field Note
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    dup
    itxn_field Receiver
    bytec_1 // "pay2"
    itxn_field Note
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    bytec 5 // "pay3"
    itxn_field Note
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 2 Note
    gitxn 1 Note
    bytec_0 // 0x61636667
    ==
    assert
    bytec_1 // 0x70617932
    ==
    assert
    retsub


// test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
test_itxn_nested:
    proto 0 0
    txn Sender
    dup
    bytec 6 // 0x6869
    callsub echo
    dup
    uncover 2
    itxn_begin
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    dup
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec_0 // "acfg"
    itxn_field Note
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    dup
    itxn_field Receiver
    bytec_1 // "pay2"
    itxn_field Note
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    bytec 5 // "pay3"
    itxn_field Note
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    bytec 7 // 0x7468657265
    callsub echo
    dup
    cover 2
    gitxn 1 Note
    dup
    cover 3
    gitxn 2 Note
    dup
    cover 2
    cover 4
    uncover 3
    bytec 6 // 0x6869
    ==
    assert
    bytec_0 // 0x61636667
    ==
    assert
    bytec_1 // 0x70617932
    ==
    assert
    bytec 7 // 0x7468657265
    ==
    assert
    bytec 8 // 0x6d61796265
    callsub echo
    bytec 8 // 0x6d61796265
    ==
    bz test_itxn_nested_after_if_else@9
    bytec 9 // 0x686932
    callsub echo
    frame_bury 1
    itxn_begin
    bytec_2 // "pay1"
    itxn_field Note
    intc_0 // 0
    itxn_field Amount
    frame_dig 0
    dup
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec 10 // "acfg2"
    itxn_field Note
    bytec_3 // "TEST"
    itxn_field ConfigAssetName
    bytec 4 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    bytec 11 // "pay5"
    itxn_field Note
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    bytec 12 // 0x746865726532
    callsub echo
    frame_bury 2
    gitxn 1 Note
    frame_bury 3
    itxn Note
    frame_bury 4

test_itxn_nested_after_if_else@9:
    frame_dig 1
    bytec 9 // 0x686932
    ==
    assert
    frame_dig 3
    bytec 10 // 0x6163666732
    ==
    assert
    frame_dig 4
    bytec 11 // 0x70617935
    ==
    assert
    frame_dig 2
    bytec 12 // 0x746865726532
    ==
    assert
    retsub


// test_cases.inner_transactions_assignment.contract.echo(value: bytes) -> bytes:
echo:
    proto 1 1
    frame_dig -1
    retsub
