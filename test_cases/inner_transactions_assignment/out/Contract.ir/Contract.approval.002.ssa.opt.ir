main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@7, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20][tmp%4#0] else goto block@20
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_itxn_slice()void" => block@3, method "test_itxn_nested()void" => block@4, * => block@6}
    block@3: // test_itxn_slice_route_L12
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice[routing]()
        goto block@6
    block@4: // test_itxn_nested_route_L29
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested[routing]()
        goto block@6
    block@6: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@20: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice[routing]() -> void:
    block@0: // L12
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let sliced_txns.0.Note#0: bytes = (gitxn 1 Note)
        let sliced_txns.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%0#0: bool = (== sliced_txns.0.Note#0 0x61636667)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== sliced_txns.1.Note#0 0x70617932)
        (assert tmp%1#0)
        exit 1u

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested[routing]() -> void:
    block@0: // L29
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        let nested_tuple.0#0: bytes = 0x6869
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.2#0: bytes = 0x7468657265
        let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = (== nested_tuple.1.0.Note#0 0x61636667)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== nested_tuple.1.1.Note#0 0x70617932)
        (assert tmp%4#0)
        let tmp%5#0: bool = 1u
        let tmp%7#0: bool = 1u
        let nested_tuple.0#1: bytes = 0x686932
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg2")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay5")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.2#1: bytes = 0x746865726532
        let nested_tuple.1.0.Note#1: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#1: bytes = (itxn Note)
        let tmp%10#0: bool = (== nested_tuple.0#1 0x686932)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== nested_tuple.1.0.Note#1 0x6163666732)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== nested_tuple.1.1.Note#1 0x70617935)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== nested_tuple.2#1 0x746865726532)
        (assert tmp%13#0)
        exit 1u