main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_itxn_slice()void" => block@3, method "test_itxn_nested()void" => block@4, * => block@11}
    block@3: // test_itxn_slice_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice()
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test_itxn_nested_route_L29
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested()
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L11
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L11
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#0 <- block@3, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#1 <- block@4, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#2 <- block@8, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
    block@0: // L12
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let sliced_txns.0.Note#0: bytes = (gitxn 1 Note)
        let sliced_txns.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%0#0: bool = (== sliced_txns.0.Note#0 0x61636667)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== sliced_txns.1.Note#0 0x70617932)
        (assert tmp%1#0)
        return 

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
    block@0: // L29
        let pay1%%param_Receiver_idx_0#0: account = (txn Sender)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%3#0: bool = (== nested_tuple.1.0.Note#0 0x61636667)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== nested_tuple.1.1.Note#0 0x70617932)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg2")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay5")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.1.0.Note#1: bytes = (gitxn 1 Note)
        let nested_tuple.1.1.Note#1: bytes = (itxn Note)
        let tmp%11#0: bool = (== nested_tuple.1.0.Note#1 0x6163666732)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== nested_tuple.1.1.Note#1 0x70617935)
        (assert tmp%12#0)
        return 