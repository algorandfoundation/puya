main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_itxn_slice()void" => block@3, method "test_itxn_nested()void" => block@4, * => block@11}
    block@3: // test_itxn_slice_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice()
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test_itxn_nested_route_L29
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%9#0) // can only call when not creating
        test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested()
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L11
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create()
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L11
        let test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#0 <- block@3, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#1 <- block@4, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#2 <- block@8, test_cases.inner_transactions_assignment.contract.Contract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_slice() -> void:
    block@0: // L12
        let pay1%%param_Receiver_idx_0#0: bytes[32] = (txn Sender)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let sliced_txns.0.Note#0: bytes = (gitxn 1 Note)
        let sliced_txns.1.Note#0: bytes = (gitxn 2 Note)
        let tmp%0#0: bool = (== sliced_txns.0.Note#0 0x61636667)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== sliced_txns.1.Note#0 0x70617932)
        (assert tmp%1#0)
        return 

subroutine test_cases.inner_transactions_assignment.contract.Contract.test_itxn_nested() -> void:
    block@0: // L29
        let pay1%%param_Receiver_idx_0#0: bytes[32] = (txn Sender)
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay2")
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay3")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.0#0: bytes = 0x6869
        let nested_tuple.1.0#0: itxn_group_idx = itxn_group_idx(1)
        let nested_tuple.1.1#0: itxn_group_idx = itxn_group_idx(2)
        let nested_tuple.2#0: bytes = 0x7468657265
        let nested_tuple.1.0.Sender#0: bytes[32] = (gitxn 1 Sender)
        let nested_tuple.1.0.Fee#0: uint64 = (gitxn 1 Fee)
        let nested_tuple.1.0.FirstValid#0: uint64 = (gitxn 1 FirstValid)
        let nested_tuple.1.0.FirstValidTime#0: uint64 = (gitxn 1 FirstValidTime)
        let nested_tuple.1.0.LastValid#0: uint64 = (gitxn 1 LastValid)
        let nested_tuple.1.0.Note#0: bytes = (gitxn 1 Note)
        let nested_tuple.1.0.Lease#0: bytes[32] = (gitxn 1 Lease)
        let nested_tuple.1.0.Receiver#0: bytes[32] = (gitxn 1 Receiver)
        let nested_tuple.1.0.Amount#0: uint64 = (gitxn 1 Amount)
        let nested_tuple.1.0.CloseRemainderTo#0: bytes[32] = (gitxn 1 CloseRemainderTo)
        let nested_tuple.1.0.VotePK#0: bytes[32] = (gitxn 1 VotePK)
        let nested_tuple.1.0.SelectionPK#0: bytes[32] = (gitxn 1 SelectionPK)
        let nested_tuple.1.0.VoteFirst#0: uint64 = (gitxn 1 VoteFirst)
        let nested_tuple.1.0.VoteLast#0: uint64 = (gitxn 1 VoteLast)
        let nested_tuple.1.0.VoteKeyDilution#0: uint64 = (gitxn 1 VoteKeyDilution)
        let nested_tuple.1.0.Type#0: bytes = (gitxn 1 Type)
        let nested_tuple.1.0.TypeEnum#0: uint64 = (gitxn 1 TypeEnum)
        let nested_tuple.1.0.XferAsset#0: uint64 = (gitxn 1 XferAsset)
        let nested_tuple.1.0.AssetAmount#0: uint64 = (gitxn 1 AssetAmount)
        let nested_tuple.1.0.AssetSender#0: bytes[32] = (gitxn 1 AssetSender)
        let nested_tuple.1.0.AssetReceiver#0: bytes[32] = (gitxn 1 AssetReceiver)
        let nested_tuple.1.0.AssetCloseTo#0: bytes[32] = (gitxn 1 AssetCloseTo)
        let nested_tuple.1.0.GroupIndex#0: uint64 = (gitxn 1 GroupIndex)
        let nested_tuple.1.0.TxID#0: bytes[32] = (gitxn 1 TxID)
        let nested_tuple.1.0.ApplicationID#0: uint64 = (gitxn 1 ApplicationID)
        let nested_tuple.1.0.OnCompletion#0: uint64 = (gitxn 1 OnCompletion)
        let nested_tuple.1.0.NumAppArgs#0: uint64 = (gitxn 1 NumAppArgs)
        let nested_tuple.1.0.NumAccounts#0: uint64 = (gitxn 1 NumAccounts)
        let nested_tuple.1.0.ApprovalProgram#0: bytes = (gitxn 1 ApprovalProgram)
        let nested_tuple.1.0.ClearStateProgram#0: bytes = (gitxn 1 ClearStateProgram)
        let nested_tuple.1.0.RekeyTo#0: bytes[32] = (gitxn 1 RekeyTo)
        let nested_tuple.1.0.ConfigAsset#0: uint64 = (gitxn 1 ConfigAsset)
        let nested_tuple.1.0.ConfigAssetTotal#0: uint64 = (gitxn 1 ConfigAssetTotal)
        let nested_tuple.1.0.ConfigAssetDecimals#0: uint64 = (gitxn 1 ConfigAssetDecimals)
        let nested_tuple.1.0.ConfigAssetDefaultFrozen#0: bool = (gitxn 1 ConfigAssetDefaultFrozen)
        let nested_tuple.1.0.ConfigAssetUnitName#0: bytes = (gitxn 1 ConfigAssetUnitName)
        let nested_tuple.1.0.ConfigAssetName#0: bytes = (gitxn 1 ConfigAssetName)
        let nested_tuple.1.0.ConfigAssetURL#0: bytes = (gitxn 1 ConfigAssetURL)
        let nested_tuple.1.0.ConfigAssetMetadataHash#0: bytes[32] = (gitxn 1 ConfigAssetMetadataHash)
        let nested_tuple.1.0.ConfigAssetManager#0: bytes[32] = (gitxn 1 ConfigAssetManager)
        let nested_tuple.1.0.ConfigAssetReserve#0: bytes[32] = (gitxn 1 ConfigAssetReserve)
        let nested_tuple.1.0.ConfigAssetFreeze#0: bytes[32] = (gitxn 1 ConfigAssetFreeze)
        let nested_tuple.1.0.ConfigAssetClawback#0: bytes[32] = (gitxn 1 ConfigAssetClawback)
        let nested_tuple.1.0.FreezeAsset#0: uint64 = (gitxn 1 FreezeAsset)
        let nested_tuple.1.0.FreezeAssetAccount#0: bytes[32] = (gitxn 1 FreezeAssetAccount)
        let nested_tuple.1.0.FreezeAssetFrozen#0: bool = (gitxn 1 FreezeAssetFrozen)
        let nested_tuple.1.0.NumAssets#0: uint64 = (gitxn 1 NumAssets)
        let nested_tuple.1.0.NumApplications#0: uint64 = (gitxn 1 NumApplications)
        let nested_tuple.1.0.GlobalNumUint#0: uint64 = (gitxn 1 GlobalNumUint)
        let nested_tuple.1.0.GlobalNumByteSlice#0: uint64 = (gitxn 1 GlobalNumByteSlice)
        let nested_tuple.1.0.LocalNumUint#0: uint64 = (gitxn 1 LocalNumUint)
        let nested_tuple.1.0.LocalNumByteSlice#0: uint64 = (gitxn 1 LocalNumByteSlice)
        let nested_tuple.1.0.ExtraProgramPages#0: uint64 = (gitxn 1 ExtraProgramPages)
        let nested_tuple.1.0.Nonparticipation#0: bool = (gitxn 1 Nonparticipation)
        let nested_tuple.1.0.NumLogs#0: uint64 = (gitxn 1 NumLogs)
        let nested_tuple.1.0.CreatedAssetID#0: uint64 = (gitxn 1 CreatedAssetID)
        let nested_tuple.1.0.CreatedApplicationID#0: uint64 = (gitxn 1 CreatedApplicationID)
        let nested_tuple.1.0.LastLog#0: bytes = (gitxn 1 LastLog)
        let nested_tuple.1.0.StateProofPK#0: bytes = (gitxn 1 StateProofPK)
        let nested_tuple.1.0.NumApprovalProgramPages#0: uint64 = (gitxn 1 NumApprovalProgramPages)
        let nested_tuple.1.0.NumClearStateProgramPages#0: uint64 = (gitxn 1 NumClearStateProgramPages)
        let nested_tuple.1.1.Sender#0: bytes[32] = (gitxn 2 Sender)
        let nested_tuple.1.1.Fee#0: uint64 = (gitxn 2 Fee)
        let nested_tuple.1.1.FirstValid#0: uint64 = (gitxn 2 FirstValid)
        let nested_tuple.1.1.FirstValidTime#0: uint64 = (gitxn 2 FirstValidTime)
        let nested_tuple.1.1.LastValid#0: uint64 = (gitxn 2 LastValid)
        let nested_tuple.1.1.Note#0: bytes = (gitxn 2 Note)
        let nested_tuple.1.1.Lease#0: bytes[32] = (gitxn 2 Lease)
        let nested_tuple.1.1.Receiver#0: bytes[32] = (gitxn 2 Receiver)
        let nested_tuple.1.1.Amount#0: uint64 = (gitxn 2 Amount)
        let nested_tuple.1.1.CloseRemainderTo#0: bytes[32] = (gitxn 2 CloseRemainderTo)
        let nested_tuple.1.1.VotePK#0: bytes[32] = (gitxn 2 VotePK)
        let nested_tuple.1.1.SelectionPK#0: bytes[32] = (gitxn 2 SelectionPK)
        let nested_tuple.1.1.VoteFirst#0: uint64 = (gitxn 2 VoteFirst)
        let nested_tuple.1.1.VoteLast#0: uint64 = (gitxn 2 VoteLast)
        let nested_tuple.1.1.VoteKeyDilution#0: uint64 = (gitxn 2 VoteKeyDilution)
        let nested_tuple.1.1.Type#0: bytes = (gitxn 2 Type)
        let nested_tuple.1.1.TypeEnum#0: uint64 = (gitxn 2 TypeEnum)
        let nested_tuple.1.1.XferAsset#0: uint64 = (gitxn 2 XferAsset)
        let nested_tuple.1.1.AssetAmount#0: uint64 = (gitxn 2 AssetAmount)
        let nested_tuple.1.1.AssetSender#0: bytes[32] = (gitxn 2 AssetSender)
        let nested_tuple.1.1.AssetReceiver#0: bytes[32] = (gitxn 2 AssetReceiver)
        let nested_tuple.1.1.AssetCloseTo#0: bytes[32] = (gitxn 2 AssetCloseTo)
        let nested_tuple.1.1.GroupIndex#0: uint64 = (gitxn 2 GroupIndex)
        let nested_tuple.1.1.TxID#0: bytes[32] = (gitxn 2 TxID)
        let nested_tuple.1.1.ApplicationID#0: uint64 = (gitxn 2 ApplicationID)
        let nested_tuple.1.1.OnCompletion#0: uint64 = (gitxn 2 OnCompletion)
        let nested_tuple.1.1.NumAppArgs#0: uint64 = (gitxn 2 NumAppArgs)
        let nested_tuple.1.1.NumAccounts#0: uint64 = (gitxn 2 NumAccounts)
        let nested_tuple.1.1.ApprovalProgram#0: bytes = (gitxn 2 ApprovalProgram)
        let nested_tuple.1.1.ClearStateProgram#0: bytes = (gitxn 2 ClearStateProgram)
        let nested_tuple.1.1.RekeyTo#0: bytes[32] = (gitxn 2 RekeyTo)
        let nested_tuple.1.1.ConfigAsset#0: uint64 = (gitxn 2 ConfigAsset)
        let nested_tuple.1.1.ConfigAssetTotal#0: uint64 = (gitxn 2 ConfigAssetTotal)
        let nested_tuple.1.1.ConfigAssetDecimals#0: uint64 = (gitxn 2 ConfigAssetDecimals)
        let nested_tuple.1.1.ConfigAssetDefaultFrozen#0: bool = (gitxn 2 ConfigAssetDefaultFrozen)
        let nested_tuple.1.1.ConfigAssetUnitName#0: bytes = (gitxn 2 ConfigAssetUnitName)
        let nested_tuple.1.1.ConfigAssetName#0: bytes = (gitxn 2 ConfigAssetName)
        let nested_tuple.1.1.ConfigAssetURL#0: bytes = (gitxn 2 ConfigAssetURL)
        let nested_tuple.1.1.ConfigAssetMetadataHash#0: bytes[32] = (gitxn 2 ConfigAssetMetadataHash)
        let nested_tuple.1.1.ConfigAssetManager#0: bytes[32] = (gitxn 2 ConfigAssetManager)
        let nested_tuple.1.1.ConfigAssetReserve#0: bytes[32] = (gitxn 2 ConfigAssetReserve)
        let nested_tuple.1.1.ConfigAssetFreeze#0: bytes[32] = (gitxn 2 ConfigAssetFreeze)
        let nested_tuple.1.1.ConfigAssetClawback#0: bytes[32] = (gitxn 2 ConfigAssetClawback)
        let nested_tuple.1.1.FreezeAsset#0: uint64 = (gitxn 2 FreezeAsset)
        let nested_tuple.1.1.FreezeAssetAccount#0: bytes[32] = (gitxn 2 FreezeAssetAccount)
        let nested_tuple.1.1.FreezeAssetFrozen#0: bool = (gitxn 2 FreezeAssetFrozen)
        let nested_tuple.1.1.NumAssets#0: uint64 = (gitxn 2 NumAssets)
        let nested_tuple.1.1.NumApplications#0: uint64 = (gitxn 2 NumApplications)
        let nested_tuple.1.1.GlobalNumUint#0: uint64 = (gitxn 2 GlobalNumUint)
        let nested_tuple.1.1.GlobalNumByteSlice#0: uint64 = (gitxn 2 GlobalNumByteSlice)
        let nested_tuple.1.1.LocalNumUint#0: uint64 = (gitxn 2 LocalNumUint)
        let nested_tuple.1.1.LocalNumByteSlice#0: uint64 = (gitxn 2 LocalNumByteSlice)
        let nested_tuple.1.1.ExtraProgramPages#0: uint64 = (gitxn 2 ExtraProgramPages)
        let nested_tuple.1.1.Nonparticipation#0: bool = (gitxn 2 Nonparticipation)
        let nested_tuple.1.1.NumLogs#0: uint64 = (gitxn 2 NumLogs)
        let nested_tuple.1.1.CreatedAssetID#0: uint64 = (gitxn 2 CreatedAssetID)
        let nested_tuple.1.1.CreatedApplicationID#0: uint64 = (gitxn 2 CreatedApplicationID)
        let nested_tuple.1.1.LastLog#0: bytes = (gitxn 2 LastLog)
        let nested_tuple.1.1.StateProofPK#0: bytes = (gitxn 2 StateProofPK)
        let nested_tuple.1.1.NumApprovalProgramPages#0: uint64 = (gitxn 2 NumApprovalProgramPages)
        let nested_tuple.1.1.NumClearStateProgramPages#0: uint64 = (gitxn 2 NumClearStateProgramPages)
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = (== nested_tuple.1.0.Note#0 0x61636667)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== nested_tuple.1.1.Note#0 0x70617932)
        (assert tmp%4#0)
        let tmp%5#0: bool = 1u
        let tmp%7#0: bool = 1u
        itxn_begin
        ((itxn_field Note) "pay1")
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field Note) "acfg2")
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field TypeEnum) pay)
        ((itxn_field Amount) 0u)
        ((itxn_field Receiver) pay1%%param_Receiver_idx_0#0)
        ((itxn_field Note) "pay5")
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_tuple.0#1: bytes = 0x686932
        let nested_tuple.1.0#1: itxn_group_idx = itxn_group_idx(1)
        let nested_tuple.1.1#1: itxn_group_idx = itxn_group_idx(2)
        let nested_tuple.2#1: bytes = 0x746865726532
        let nested_tuple.1.0.Sender#1: bytes[32] = (gitxn 1 Sender)
        let nested_tuple.1.0.Fee#1: uint64 = (gitxn 1 Fee)
        let nested_tuple.1.0.FirstValid#1: uint64 = (gitxn 1 FirstValid)
        let nested_tuple.1.0.FirstValidTime#1: uint64 = (gitxn 1 FirstValidTime)
        let nested_tuple.1.0.LastValid#1: uint64 = (gitxn 1 LastValid)
        let nested_tuple.1.0.Note#1: bytes = (gitxn 1 Note)
        let nested_tuple.1.0.Lease#1: bytes[32] = (gitxn 1 Lease)
        let nested_tuple.1.0.Receiver#1: bytes[32] = (gitxn 1 Receiver)
        let nested_tuple.1.0.Amount#1: uint64 = (gitxn 1 Amount)
        let nested_tuple.1.0.CloseRemainderTo#1: bytes[32] = (gitxn 1 CloseRemainderTo)
        let nested_tuple.1.0.VotePK#1: bytes[32] = (gitxn 1 VotePK)
        let nested_tuple.1.0.SelectionPK#1: bytes[32] = (gitxn 1 SelectionPK)
        let nested_tuple.1.0.VoteFirst#1: uint64 = (gitxn 1 VoteFirst)
        let nested_tuple.1.0.VoteLast#1: uint64 = (gitxn 1 VoteLast)
        let nested_tuple.1.0.VoteKeyDilution#1: uint64 = (gitxn 1 VoteKeyDilution)
        let nested_tuple.1.0.Type#1: bytes = (gitxn 1 Type)
        let nested_tuple.1.0.TypeEnum#1: uint64 = (gitxn 1 TypeEnum)
        let nested_tuple.1.0.XferAsset#1: uint64 = (gitxn 1 XferAsset)
        let nested_tuple.1.0.AssetAmount#1: uint64 = (gitxn 1 AssetAmount)
        let nested_tuple.1.0.AssetSender#1: bytes[32] = (gitxn 1 AssetSender)
        let nested_tuple.1.0.AssetReceiver#1: bytes[32] = (gitxn 1 AssetReceiver)
        let nested_tuple.1.0.AssetCloseTo#1: bytes[32] = (gitxn 1 AssetCloseTo)
        let nested_tuple.1.0.GroupIndex#1: uint64 = (gitxn 1 GroupIndex)
        let nested_tuple.1.0.TxID#1: bytes[32] = (gitxn 1 TxID)
        let nested_tuple.1.0.ApplicationID#1: uint64 = (gitxn 1 ApplicationID)
        let nested_tuple.1.0.OnCompletion#1: uint64 = (gitxn 1 OnCompletion)
        let nested_tuple.1.0.NumAppArgs#1: uint64 = (gitxn 1 NumAppArgs)
        let nested_tuple.1.0.NumAccounts#1: uint64 = (gitxn 1 NumAccounts)
        let nested_tuple.1.0.ApprovalProgram#1: bytes = (gitxn 1 ApprovalProgram)
        let nested_tuple.1.0.ClearStateProgram#1: bytes = (gitxn 1 ClearStateProgram)
        let nested_tuple.1.0.RekeyTo#1: bytes[32] = (gitxn 1 RekeyTo)
        let nested_tuple.1.0.ConfigAsset#1: uint64 = (gitxn 1 ConfigAsset)
        let nested_tuple.1.0.ConfigAssetTotal#1: uint64 = (gitxn 1 ConfigAssetTotal)
        let nested_tuple.1.0.ConfigAssetDecimals#1: uint64 = (gitxn 1 ConfigAssetDecimals)
        let nested_tuple.1.0.ConfigAssetDefaultFrozen#1: bool = (gitxn 1 ConfigAssetDefaultFrozen)
        let nested_tuple.1.0.ConfigAssetUnitName#1: bytes = (gitxn 1 ConfigAssetUnitName)
        let nested_tuple.1.0.ConfigAssetName#1: bytes = (gitxn 1 ConfigAssetName)
        let nested_tuple.1.0.ConfigAssetURL#1: bytes = (gitxn 1 ConfigAssetURL)
        let nested_tuple.1.0.ConfigAssetMetadataHash#1: bytes[32] = (gitxn 1 ConfigAssetMetadataHash)
        let nested_tuple.1.0.ConfigAssetManager#1: bytes[32] = (gitxn 1 ConfigAssetManager)
        let nested_tuple.1.0.ConfigAssetReserve#1: bytes[32] = (gitxn 1 ConfigAssetReserve)
        let nested_tuple.1.0.ConfigAssetFreeze#1: bytes[32] = (gitxn 1 ConfigAssetFreeze)
        let nested_tuple.1.0.ConfigAssetClawback#1: bytes[32] = (gitxn 1 ConfigAssetClawback)
        let nested_tuple.1.0.FreezeAsset#1: uint64 = (gitxn 1 FreezeAsset)
        let nested_tuple.1.0.FreezeAssetAccount#1: bytes[32] = (gitxn 1 FreezeAssetAccount)
        let nested_tuple.1.0.FreezeAssetFrozen#1: bool = (gitxn 1 FreezeAssetFrozen)
        let nested_tuple.1.0.NumAssets#1: uint64 = (gitxn 1 NumAssets)
        let nested_tuple.1.0.NumApplications#1: uint64 = (gitxn 1 NumApplications)
        let nested_tuple.1.0.GlobalNumUint#1: uint64 = (gitxn 1 GlobalNumUint)
        let nested_tuple.1.0.GlobalNumByteSlice#1: uint64 = (gitxn 1 GlobalNumByteSlice)
        let nested_tuple.1.0.LocalNumUint#1: uint64 = (gitxn 1 LocalNumUint)
        let nested_tuple.1.0.LocalNumByteSlice#1: uint64 = (gitxn 1 LocalNumByteSlice)
        let nested_tuple.1.0.ExtraProgramPages#1: uint64 = (gitxn 1 ExtraProgramPages)
        let nested_tuple.1.0.Nonparticipation#1: bool = (gitxn 1 Nonparticipation)
        let nested_tuple.1.0.NumLogs#1: uint64 = (gitxn 1 NumLogs)
        let nested_tuple.1.0.CreatedAssetID#1: uint64 = (gitxn 1 CreatedAssetID)
        let nested_tuple.1.0.CreatedApplicationID#1: uint64 = (gitxn 1 CreatedApplicationID)
        let nested_tuple.1.0.LastLog#1: bytes = (gitxn 1 LastLog)
        let nested_tuple.1.0.StateProofPK#1: bytes = (gitxn 1 StateProofPK)
        let nested_tuple.1.0.NumApprovalProgramPages#1: uint64 = (gitxn 1 NumApprovalProgramPages)
        let nested_tuple.1.0.NumClearStateProgramPages#1: uint64 = (gitxn 1 NumClearStateProgramPages)
        let nested_tuple.1.1.Sender#1: bytes[32] = (itxn Sender)
        let nested_tuple.1.1.Fee#1: uint64 = (itxn Fee)
        let nested_tuple.1.1.FirstValid#1: uint64 = (itxn FirstValid)
        let nested_tuple.1.1.FirstValidTime#1: uint64 = (itxn FirstValidTime)
        let nested_tuple.1.1.LastValid#1: uint64 = (itxn LastValid)
        let nested_tuple.1.1.Note#1: bytes = (itxn Note)
        let nested_tuple.1.1.Lease#1: bytes[32] = (itxn Lease)
        let nested_tuple.1.1.Receiver#1: bytes[32] = (itxn Receiver)
        let nested_tuple.1.1.Amount#1: uint64 = (itxn Amount)
        let nested_tuple.1.1.CloseRemainderTo#1: bytes[32] = (itxn CloseRemainderTo)
        let nested_tuple.1.1.VotePK#1: bytes[32] = (itxn VotePK)
        let nested_tuple.1.1.SelectionPK#1: bytes[32] = (itxn SelectionPK)
        let nested_tuple.1.1.VoteFirst#1: uint64 = (itxn VoteFirst)
        let nested_tuple.1.1.VoteLast#1: uint64 = (itxn VoteLast)
        let nested_tuple.1.1.VoteKeyDilution#1: uint64 = (itxn VoteKeyDilution)
        let nested_tuple.1.1.Type#1: bytes = (itxn Type)
        let nested_tuple.1.1.TypeEnum#1: uint64 = (itxn TypeEnum)
        let nested_tuple.1.1.XferAsset#1: uint64 = (itxn XferAsset)
        let nested_tuple.1.1.AssetAmount#1: uint64 = (itxn AssetAmount)
        let nested_tuple.1.1.AssetSender#1: bytes[32] = (itxn AssetSender)
        let nested_tuple.1.1.AssetReceiver#1: bytes[32] = (itxn AssetReceiver)
        let nested_tuple.1.1.AssetCloseTo#1: bytes[32] = (itxn AssetCloseTo)
        let nested_tuple.1.1.GroupIndex#1: uint64 = (itxn GroupIndex)
        let nested_tuple.1.1.TxID#1: bytes[32] = (itxn TxID)
        let nested_tuple.1.1.ApplicationID#1: uint64 = (itxn ApplicationID)
        let nested_tuple.1.1.OnCompletion#1: uint64 = (itxn OnCompletion)
        let nested_tuple.1.1.NumAppArgs#1: uint64 = (itxn NumAppArgs)
        let nested_tuple.1.1.NumAccounts#1: uint64 = (itxn NumAccounts)
        let nested_tuple.1.1.ApprovalProgram#1: bytes = (itxn ApprovalProgram)
        let nested_tuple.1.1.ClearStateProgram#1: bytes = (itxn ClearStateProgram)
        let nested_tuple.1.1.RekeyTo#1: bytes[32] = (itxn RekeyTo)
        let nested_tuple.1.1.ConfigAsset#1: uint64 = (itxn ConfigAsset)
        let nested_tuple.1.1.ConfigAssetTotal#1: uint64 = (itxn ConfigAssetTotal)
        let nested_tuple.1.1.ConfigAssetDecimals#1: uint64 = (itxn ConfigAssetDecimals)
        let nested_tuple.1.1.ConfigAssetDefaultFrozen#1: bool = (itxn ConfigAssetDefaultFrozen)
        let nested_tuple.1.1.ConfigAssetUnitName#1: bytes = (itxn ConfigAssetUnitName)
        let nested_tuple.1.1.ConfigAssetName#1: bytes = (itxn ConfigAssetName)
        let nested_tuple.1.1.ConfigAssetURL#1: bytes = (itxn ConfigAssetURL)
        let nested_tuple.1.1.ConfigAssetMetadataHash#1: bytes[32] = (itxn ConfigAssetMetadataHash)
        let nested_tuple.1.1.ConfigAssetManager#1: bytes[32] = (itxn ConfigAssetManager)
        let nested_tuple.1.1.ConfigAssetReserve#1: bytes[32] = (itxn ConfigAssetReserve)
        let nested_tuple.1.1.ConfigAssetFreeze#1: bytes[32] = (itxn ConfigAssetFreeze)
        let nested_tuple.1.1.ConfigAssetClawback#1: bytes[32] = (itxn ConfigAssetClawback)
        let nested_tuple.1.1.FreezeAsset#1: uint64 = (itxn FreezeAsset)
        let nested_tuple.1.1.FreezeAssetAccount#1: bytes[32] = (itxn FreezeAssetAccount)
        let nested_tuple.1.1.FreezeAssetFrozen#1: bool = (itxn FreezeAssetFrozen)
        let nested_tuple.1.1.NumAssets#1: uint64 = (itxn NumAssets)
        let nested_tuple.1.1.NumApplications#1: uint64 = (itxn NumApplications)
        let nested_tuple.1.1.GlobalNumUint#1: uint64 = (itxn GlobalNumUint)
        let nested_tuple.1.1.GlobalNumByteSlice#1: uint64 = (itxn GlobalNumByteSlice)
        let nested_tuple.1.1.LocalNumUint#1: uint64 = (itxn LocalNumUint)
        let nested_tuple.1.1.LocalNumByteSlice#1: uint64 = (itxn LocalNumByteSlice)
        let nested_tuple.1.1.ExtraProgramPages#1: uint64 = (itxn ExtraProgramPages)
        let nested_tuple.1.1.Nonparticipation#1: bool = (itxn Nonparticipation)
        let nested_tuple.1.1.NumLogs#1: uint64 = (itxn NumLogs)
        let nested_tuple.1.1.CreatedAssetID#1: uint64 = (itxn CreatedAssetID)
        let nested_tuple.1.1.CreatedApplicationID#1: uint64 = (itxn CreatedApplicationID)
        let nested_tuple.1.1.LastLog#1: bytes = (itxn LastLog)
        let nested_tuple.1.1.StateProofPK#1: bytes = (itxn StateProofPK)
        let nested_tuple.1.1.NumApprovalProgramPages#1: uint64 = (itxn NumApprovalProgramPages)
        let nested_tuple.1.1.NumClearStateProgramPages#1: uint64 = (itxn NumClearStateProgramPages)
        let tmp%10#0: bool = (== nested_tuple.0#1 0x686932)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== nested_tuple.1.0.Note#1 0x6163666732)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== nested_tuple.1.1.Note#1 0x70617935)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== nested_tuple.2#1 0x746865726532)
        (assert tmp%13#0)
        return 

subroutine test_cases.inner_transactions_assignment.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 