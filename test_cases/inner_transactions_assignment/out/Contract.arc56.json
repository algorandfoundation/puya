{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_itxn_slice",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_itxn_nested",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        56
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        89
                    ],
                    "errorMessage": "can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEDJggEYWNmZwRwYXkyBHBheTEEVEVTVANUU1QEcGF5MwVhY2ZnMgRwYXk1MRtBAB0xGRREMRhEggIE5G2QGQT4g4U+NhoAjgIACwBgADEZFEQxGBREI0MxALEqsgUisghJsgcjshAisgG2I7IiKLIFK7ImJwSyJSSyECKyAbYjshAisghJsgcpsgUisgG2I7IQIrIIsgcnBbIFIrIBs7cCBbcBBSgSRCkSRCNDMQCxKrIFIrIISbIHI7IQIrIBtiOyIiiyBSuyJicEsiUkshAisgG2I7IQIrIISbIHKbIFIrIBtiOyECKyCEmyBycFsgUisgGztwIFtwEFKBJEKRJEsSqyBSKyCEmyByOyECKyAbYjsiInBrIFK7ImJwSyJSSyECKyAbYjshAisgiyBycHsgUisgGztAW3AQUnBhJEJwcSRCND",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}