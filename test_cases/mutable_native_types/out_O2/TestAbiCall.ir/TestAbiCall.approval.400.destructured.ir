main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@20
    block@2: // abi_routing_L102
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_fixed_struct()void" => block@6, method "test_nested_struct()void" => block@7, method "test_dynamic_struct()void" => block@8, method "test_fixed_array()void" => block@9, method "test_native_array()void" => block@10, method "test_log()void" => block@11, * => block@12}
    block@6: // test_fixed_struct_route_L103
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#2: bool = (== res#0 fixed_struct#0)
        (assert tmp%8#2) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#1: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#1 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#1 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#1: bool = (== res#0 fixed_struct#0)
        (assert tmp%17#1) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@7: // test_nested_struct_route_L122
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let tmp%5#2: uint64 = (txn NumAppArgs)
        let tmp%6#3: uint64 = (+ tmp%5#2 3u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%6#3)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (concat aggregate%head%5#0 aggregate%val_as_bytes%6#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%9#4: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%10#1: bool = (== tmp%9#4 0x151f7c75)
        (assert tmp%10#1) // application log value is not the result of an ABI return
        let tmp%11#0: bool = (== res#0 nested_struct#0)
        (assert tmp%11#0) // should be the same
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#0 2u)
        let tmp%14#2: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#2 3u)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%13#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%15#0)
        let aggregate%head%9#0: bytes = (concat aggregate%val_as_bytes%7#0 aggregate%val_as_bytes%8#0)
        let tmp%17#3: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#3 4u)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob tmp%18#0)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (concat aggregate%head%9#0 aggregate%val_as_bytes%9#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%23#1: bool = (== res#0 nested_struct#0)
        (assert tmp%23#1) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@8: // test_dynamic_struct_route_L149
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%10#0 aggregate%val_as_bytes%11#0)
        let tmp%5#2: uint64 = (txn NumAppArgs)
        let tmp%6#3: uint64 = (+ tmp%5#2 1u)
        let tmp%7#4: uint64 = (txn NumAppArgs)
        let tmp%8#4: uint64 = (+ tmp%7#4 2u)
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 3u)
        let tmp%11#3: bytes = (itob tmp%10#0)
        let aggregate%head%14#0: bytes = (concat 0x0001 fixed_struct#0)
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob tmp%6#3)
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob tmp%8#4)
        let aggregate%head%16#0: bytes = (concat aggregate%val_as_bytes%12#0 aggregate%val_as_bytes%13#0)
        let aggregate%encoded_value%0#0: bytes = (concat 0x0008 tmp%11#3)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 0x0016)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 22u aggregate%data_length%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 aggregate%offset_as_uint16%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 7u)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%19#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 0x000548656c6c6f)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%concat%1#0 aggregate%head%14#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%15#3: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#3) // application log value is not the result of an ABI return
        let tmp%16#0: bool = (== res#0 dynamic_struct#1)
        (assert tmp%16#0) // should be the same
        let tmp%17#3: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#3 2u)
        let tmp%19#1: uint64 = (txn NumAppArgs)
        let tmp%20#1: uint64 = (+ tmp%19#1 3u)
        let tmp%21#1: uint64 = (txn NumAppArgs)
        let tmp%22#1: uint64 = (+ tmp%21#1 4u)
        let tmp%23#0: bytes = (itob tmp%22#1)
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob tmp%18#0)
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob tmp%20#1)
        let aggregate%head%21#0: bytes = (concat aggregate%val_as_bytes%14#0 aggregate%val_as_bytes%15#0)
        let aggregate%encoded_value%2#0: bytes = (concat 0x0008 tmp%23#0)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 0x0016)
        let aggregate%data_length%3#0: uint64 = (len aggregate%encoded_value%2#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ 22u aggregate%data_length%3#0)
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 aggregate%offset_as_uint16%4#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ aggregate%current_tail_offset%3#0 7u)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%24#0 aggregate%encoded_value%2#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 0x000548656c6c6f)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%concat%4#0 aggregate%head%14#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%26#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%27#0: bool = (== tmp%26#0 0x151f7c75)
        (assert tmp%27#0) // application log value is not the result of an ABI return
        let tmp%28#0: bool = (== res#0 dynamic_struct#1)
        (assert tmp%28#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@9: // test_fixed_array_route_L188
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%16#0: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%17#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%16#0 aggregate%val_as_bytes%17#0)
        let aggregate%head%28#0: bytes = (concat fixed_struct#0 fixed_struct#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (concat aggregate%head%28#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#2: bool = (== res#0 fixed_arr#0)
        (assert tmp%8#2) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#1: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#1 3u)
        let aggregate%val_as_bytes%18#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%19#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%18#0 aggregate%val_as_bytes%19#0)
        let aggregate%head%33#0: bytes = (concat fixed_struct#0 fixed_struct#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (concat aggregate%head%33#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#1 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#1: bool = (== res#0 fixed_arr#0)
        (assert tmp%17#1) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@10: // test_native_array_route_L214
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%20#0: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%21#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%20#0 aggregate%val_as_bytes%21#0)
        let aggregate%head%37#0: bytes = (concat 0x0003 fixed_struct#0)
        let aggregate%head%38#0: bytes = (concat aggregate%head%37#0 fixed_struct#0)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%head%38#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#2: bool = (== res#0 native_arr#1)
        (assert tmp%8#2) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#1: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#1 3u)
        let aggregate%val_as_bytes%22#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%23#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%22#0 aggregate%val_as_bytes%23#0)
        let aggregate%head%42#0: bytes = (concat 0x0003 fixed_struct#0)
        let aggregate%head%43#0: bytes = (concat aggregate%head%42#0 fixed_struct#0)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%head%43#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#1 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#1: bool = (== res#0 native_arr#1)
        (assert tmp%17#1) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@11: // test_log_route_L242
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiABACYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnKBATEbQQDdgAQkN408NhoAjgEAxzEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwBmAF0AVwBOAEgAPwA4AC4AJwAdAAEAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwQyInBWVEKExQsEMnBTYaAWdDIicEZUQoTFCwQycENhoBZ0MiK2VEKExQsEMrNhoBZ0MiKmVEKExQsEMqNhoBZ0MiKWVEKExQsEMpNhoBZ0MxGYEFEkQxGEMxGRREMRgUQw==)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let fixed_struct#0: Encoded(uint64,uint64) = (bzero 16u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (bzero 24u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) 0x0000000000000000000000000000000000160018001a000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) 0x0000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "log_it()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.NumLogs#0: uint64 = (itxn NumLogs)
        let tmp%4#0: bool = (== txn.NumLogs#0 5u)
        (assert tmp%4#0) // expected 5 logs
        let tmp%5#1: bytes = (itxna Logs 0)
        let tmp%7#1: bool = (== tmp%5#1 fixed_struct#0)
        (assert tmp%7#1) // expected fixed struct
        let tmp%8#1: bytes = (itxna Logs 1)
        let tmp%10#1: bool = (== tmp%8#1 nested_struct#0)
        (assert tmp%10#1) // expected nested struct
        let tmp%14#0: bytes = (itxna Logs 2)
        let tmp%15#0: uint64 = (len tmp%14#0)
        let tmp%16#0: bool = (== tmp%15#0 28u)
        (assert tmp%16#0) // expected dynamic struct
        let tmp%17#0: bytes = (itxna Logs 3)
        let tmp%19#0: bool = (== tmp%17#0 fixed_arr#0)
        (assert tmp%19#0) // expected fixed array
        let tmp%20#0: bytes = (itxna Logs 4)
        let tmp%21#0: bytes = (bzero 2u)
        let tmp%22#0: bool = (== tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // expected fixed array
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@12: // switch_case_default_L102
        fail
    block@20: // bare_routing_L102
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0