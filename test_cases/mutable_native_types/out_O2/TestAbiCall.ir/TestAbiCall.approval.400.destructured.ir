main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L102
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_fixed_struct()void" => block@3, method "test_nested_struct()void" => block@4, method "test_dynamic_struct()void" => block@5, method "test_fixed_array()void" => block@6, method "test_native_array()void" => block@7, method "test_log()void" => block@8, * => block@15}
    block@3: // test_fixed_struct_route_L103
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_struct#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#2: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#1: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%10#2)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%12#1)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%2#1 aggregate%val_as_bytes%3#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#2: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#2 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#2: bool = (== res#0 fixed_struct#0)
        (assert tmp%17#2) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@4: // test_nested_struct_route_L122
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%3#0)
        let aggregate%encoded%7#1: bytes = (concat aggregate%val_as_bytes%4#1 aggregate%val_as_bytes%5#1)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#3: uint64 = (+ tmp%5#0 3u)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%6#3)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (concat aggregate%encoded%7#1 aggregate%val_as_bytes%6#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%9#4: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%10#1: bool = (== tmp%9#4 0x151f7c75)
        (assert tmp%10#1) // application log value is not the result of an ABI return
        let tmp%11#4: bool = (== res#0 nested_struct#0)
        (assert tmp%11#4) // should be the same
        let tmp%12#1: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#1 2u)
        let tmp%14#3: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#3 3u)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%13#0)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%15#0)
        let aggregate%encoded%13#1: bytes = (concat aggregate%val_as_bytes%7#1 aggregate%val_as_bytes%8#1)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#1: uint64 = (+ tmp%17#0 4u)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob tmp%18#1)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (concat aggregate%encoded%13#1 aggregate%val_as_bytes%9#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%21#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#1: bool = (== tmp%21#1 0x151f7c75)
        (assert tmp%22#1) // application log value is not the result of an ABI return
        let tmp%23#2: bool = (== res#0 nested_struct#0)
        (assert tmp%23#2) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@5: // test_dynamic_struct_route_L149
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%10#1 aggregate%val_as_bytes%11#1)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#3: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: uint64 = (txn NumAppArgs)
        let tmp%8#4: uint64 = (+ tmp%7#0 2u)
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#2: uint64 = (+ tmp%9#0 3u)
        let tmp%11#3: bytes = (itob tmp%10#2)
        let aggregate%encoded%21#1: bytes = (concat 0x0001 fixed_struct#0)
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob tmp%6#3)
        let aggregate%val_as_bytes%13#1: bytes[8] = (itob tmp%8#4)
        let aggregate%encoded%24#1: bytes = (concat aggregate%val_as_bytes%12#1 aggregate%val_as_bytes%13#1)
        let aggregate%encoded_value%0#1: bytes = (concat 0x0008 tmp%11#3)
        let aggregate%data_length%0#1: uint64 = (len aggregate%encoded_value%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 22u aggregate%data_length%0#1)
        let aggregate%encoded%25#1: bytes = (concat aggregate%encoded%24#1 0x0016)
        let aggregate%tail%1#1: bytes = (concat aggregate%encoded_value%0#1 0x000548656c6c6f)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 7u)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%26#1: bytes = (concat aggregate%encoded%25#1 aggregate%offset_as_uint16%1#1)
        let aggregate%tail%2#1: bytes = (concat aggregate%tail%1#1 aggregate%encoded%21#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%current_tail_offset%1#1)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%27#1: bytes = (concat aggregate%encoded%26#1 aggregate%offset_as_uint16%2#1)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%encoded%27#1 aggregate%tail%2#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%14#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%15#4: bool = (== tmp%14#1 0x151f7c75)
        (assert tmp%15#4) // application log value is not the result of an ABI return
        let tmp%16#0: bool = (== res#0 dynamic_struct#1)
        (assert tmp%16#0) // should be the same
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#1: uint64 = (+ tmp%17#0 2u)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#2: uint64 = (+ tmp%19#0 3u)
        let tmp%21#0: uint64 = (txn NumAppArgs)
        let tmp%22#2: uint64 = (+ tmp%21#0 4u)
        let tmp%23#1: bytes = (itob tmp%22#2)
        let aggregate%val_as_bytes%14#1: bytes[8] = (itob tmp%18#1)
        let aggregate%val_as_bytes%15#1: bytes[8] = (itob tmp%20#2)
        let aggregate%encoded%30#1: bytes = (concat aggregate%val_as_bytes%14#1 aggregate%val_as_bytes%15#1)
        let aggregate%encoded_value%2#1: bytes = (concat 0x0008 tmp%23#1)
        let aggregate%data_length%3#1: uint64 = (len aggregate%encoded_value%2#1)
        let aggregate%current_tail_offset%3#1: uint64 = (+ 22u aggregate%data_length%3#1)
        let aggregate%encoded%31#1: bytes = (concat aggregate%encoded%30#1 0x0016)
        let aggregate%tail%4#1: bytes = (concat aggregate%encoded_value%2#1 0x000548656c6c6f)
        let aggregate%current_tail_offset%4#1: uint64 = (+ aggregate%current_tail_offset%3#1 7u)
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%current_tail_offset%3#1)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded%32#1: bytes = (concat aggregate%encoded%31#1 aggregate%offset_as_uint16%4#1)
        let aggregate%tail%5#1: bytes = (concat aggregate%tail%4#1 aggregate%encoded%21#1)
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%current_tail_offset%4#1)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%33#1: bytes = (concat aggregate%encoded%32#1 aggregate%offset_as_uint16%5#1)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%encoded%33#1 aggregate%tail%5#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%26#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%27#1: bool = (== tmp%26#1 0x151f7c75)
        (assert tmp%27#1) // application log value is not the result of an ABI return
        let tmp%28#1: bool = (== res#0 dynamic_struct#1)
        (assert tmp%28#1) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@6: // test_fixed_array_route_L188
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%16#1: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%17#1: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%16#1 aggregate%val_as_bytes%17#1)
        let aggregate%encoded%39#1: bytes = (concat fixed_struct#0 fixed_struct#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (concat aggregate%encoded%39#1 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#2: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#1: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%18#1: bytes[8] = (itob tmp%10#2)
        let aggregate%val_as_bytes%19#1: bytes[8] = (itob tmp%12#1)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%18#1 aggregate%val_as_bytes%19#1)
        let aggregate%encoded%46#1: bytes = (concat fixed_struct#0 fixed_struct#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (concat aggregate%encoded%46#1 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#2: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#2 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#2: bool = (== res#0 fixed_arr#0)
        (assert tmp%17#2) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@7: // test_native_array_route_L214
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (+ tmp%0#1 1u)
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#1 2u)
        let aggregate%val_as_bytes%20#1: bytes[8] = (itob tmp%1#1)
        let aggregate%val_as_bytes%21#1: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%20#1 aggregate%val_as_bytes%21#1)
        let aggregate%encoded%52#1: bytes = (concat 0x0003 fixed_struct#0)
        let aggregate%encoded%53#1: bytes = (concat aggregate%encoded%52#1 fixed_struct#0)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%encoded%53#1 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#1: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#1) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 native_arr#1)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#2: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#1: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%22#1: bytes[8] = (itob tmp%10#2)
        let aggregate%val_as_bytes%23#1: bytes[8] = (itob tmp%12#1)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%22#1 aggregate%val_as_bytes%23#1)
        let aggregate%encoded%59#1: bytes = (concat 0x0003 fixed_struct#0)
        let aggregate%encoded%60#1: bytes = (concat aggregate%encoded%59#1 fixed_struct#0)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%encoded%60#1 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%15#2: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#2 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#2: bool = (== res#0 native_arr#1)
        (assert tmp%17#2) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@8: // test_log_route_L242
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBASuCDAQkN408BBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4MAMUAtwCmAJgAhwB5AGgAWQBHADgAJgACI0MxGRREMRhEIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMxGRREMRhEIycFZUQoTFCwIkMxGRREMRhEJwU2GgFnIkMxGRREMRhEIycEZUQoTFCwIkMxGRREMRhEJwQ2GgFnIkMxGRREMRhEIytlRChMULAiQzEZFEQxGEQrNhoBZyJDMRkURDEYRCMqZUQoTFCwIkMxGRREMRhEKjYaAWciQzEZFEQxGEQjKWVEKExQsCJDMRkURDEYRCk2GgFnIkMxGYEFEkQxGEQiQzEZQP8rMRgURCJD)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let fixed_struct#0: Encoded(uint64,uint64) = (bzero 16u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (bzero 24u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) 0x0000000000000000000000000000000000160018001a000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) 0x0000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "log_it()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.NumLogs#0: uint64 = (itxn NumLogs)
        let tmp%4#0: bool = (== txn.NumLogs#0 5u)
        (assert tmp%4#0) // expected 5 logs
        let tmp%5#1: bytes = (itxna Logs 0)
        let tmp%7#1: bool = (== tmp%5#1 fixed_struct#0)
        (assert tmp%7#1) // expected fixed struct
        let tmp%8#1: bytes = (itxna Logs 1)
        let tmp%10#1: bool = (== tmp%8#1 nested_struct#0)
        (assert tmp%10#1) // expected nested struct
        let tmp%14#1: bytes = (itxna Logs 2)
        let tmp%15#0: uint64 = (len tmp%14#1)
        let tmp%16#0: bool = (== tmp%15#0 28u)
        (assert tmp%16#0) // expected dynamic struct
        let tmp%17#1: bytes = (itxna Logs 3)
        let tmp%19#1: bool = (== tmp%17#1 fixed_arr#0)
        (assert tmp%19#1) // expected fixed array
        let tmp%20#1: bytes = (itxna Logs 4)
        let tmp%21#1: bytes = (bzero 2u)
        let tmp%22#1: bool = (== tmp%20#1 tmp%21#1)
        (assert tmp%22#1) // expected fixed array
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@11: // bare_routing_L102
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@15 : block@12
    block@12: // __algopy_default_create_L1
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@15: // after_if_else_L102
        let test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router__%0#0
        goto block@16
    block@16: // after_inlined_test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router___L1
        return tmp%0#0