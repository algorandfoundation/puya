#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 16 128 4272
    bytecblock "tup_bag" 0x151f7c75
    intc_0 // 0
    dupn 2
    pushbytes ""
    dupn 3
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 0x73457a19 // method "create_box()void", method "num_tups()uint64", method "add_tup((uint64,uint64))void", method "get_tup(uint64)(uint64,uint64)", method "sum()uint64", method "add_many_tups((uint64,uint64)[])void", method "add_fixed_tups((uint64,uint64)[3])void", method "set_a(uint64)void", method "set_b(uint64)void", method "get_3_tups(uint64)(uint64,uint64)[3]", method "get_all_tups()(uint64,uint64)[]"
    txna ApplicationArgs 0
    match create_box_route@5 num_tups_route@6 add_tup_route@7 get_tup_route@8 sum_route@9 add_many_tups_route@10 add_fixed_tups_route@11 set_a_route@12 set_b_route@13 get_3_tups_route@14 get_all_tups_route@15
    err // this contract does not implement the given ABI method for call NoOp

get_all_tups_route@15:
    pushbytes 0x0000
    bury 6
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    bury 1
    intc_0 // 0
    bury 3

for_header@20:
    dig 2
    dig 1
    <
    bz after_for@22
    bytec_0 // "tup_bag"
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 3
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    dig 7
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 7
    intc_1 // 1
    +
    bury 3
    b for_header@20

after_for@22:
    bytec_1 // 0x151f7c75
    dig 6
    concat
    log
    intc_1 // 1
    return

get_3_tups_route@14:
    txna ApplicationArgs 1
    btoi
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    dig 1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    bytec_0 // "tup_bag"
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 1
    intc_3 // 16
    *
    dig 1
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    dig 2
    intc_1 // 1
    +
    intc_3 // 16
    *
    dig 2
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    uncover 3
    pushint 2 // 2
    +
    intc_3 // 16
    *
    uncover 3
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    cover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

set_b_route@13:
    txna ApplicationArgs 1
    bury 7
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    bury 1
    intc_0 // 0
    bury 3

for_header@27:
    dig 2
    dig 1
    <
    bz after_for@44
    dig 2
    dup
    intc_2 // 8
    <
    assert // index out of bounds
    dup
    intc_3 // 16
    *
    intc_3 // 16
    +
    bytec_0 // "tup_bag"
    swap
    dig 9
    box_replace
    intc_1 // 1
    +
    bury 3
    b for_header@27

after_for@44:
    intc_1 // 1
    return

set_a_route@12:
    txna ApplicationArgs 1
    bury 7
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    bury 1
    intc_0 // 0
    bury 3

for_header@32:
    dig 2
    dig 1
    <
    bz after_for@44
    dig 2
    dup
    intc_2 // 8
    <
    assert // index out of bounds
    dup
    intc_3 // 16
    *
    intc_2 // 8
    +
    bytec_0 // "tup_bag"
    swap
    dig 9
    box_replace
    intc_1 // 1
    +
    bury 3
    b for_header@32

add_fixed_tups_route@11:
    txna ApplicationArgs 1
    bury 5
    intc_0 // 0
    bury 3

for_header@37:
    dig 2
    pushint 3 // 3
    <
    bz after_for@44
    dig 2
    dup
    intc_3 // 16
    *
    dig 6
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    callsub add_tup
    pop
    intc_1 // 1
    +
    bury 3
    b for_header@37

add_many_tups_route@10:
    txna ApplicationArgs 1
    dup
    bury 6
    intc_0 // 0
    extract_uint16
    bury 4
    intc_0 // 0
    bury 3

for_header@42:
    dig 2
    dig 4
    <
    bz after_for@44
    dig 4
    extract 2 0
    dig 3
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    callsub add_tup
    pop
    intc_1 // 1
    +
    bury 3
    b for_header@42

sum_route@9:
    intc_0 // 0
    bury 2
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    bury 1
    intc_0 // 0
    bury 3

for_header@47:
    dig 2
    dig 1
    <
    bz after_for@49
    bytec_0 // "tup_bag"
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 3
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    dig 4
    +
    swap
    intc_2 // 8
    extract_uint64
    +
    bury 3
    intc_1 // 1
    +
    bury 3
    b for_header@47

after_for@49:
    dig 1
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

get_tup_route@8:
    txna ApplicationArgs 1
    btoi
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    dig 1
    >
    assert // index out of bounds
    bytec_0 // "tup_bag"
    intc_2 // 8
    intc 4 // 128
    box_extract
    swap
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

add_tup_route@7:
    txna ApplicationArgs 1
    callsub add_tup
    pop
    intc_1 // 1
    return

num_tups_route@6:
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

create_box_route@5:
    bytec_0 // "tup_bag"
    pushint 4273 // 4273
    box_create
    assert // box already exists
    bytec_0 // "tup_bag"
    pushint 136 // 136
    txn Sender
    box_replace
    global CurrentApplicationID
    itob
    bytec_0 // "tup_bag"
    pushint 168 // 168
    uncover 2
    box_replace
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_1 // 1
    box_extract
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // "tup_bag"
    intc 5 // 4272
    uncover 2
    box_replace
    intc_1 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: bytes) -> bytes:
add_tup:
    proto 1 1
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    dup
    intc_2 // 8
    <
    assert // too many tups
    intc_3 // 16
    *
    intc_2 // 8
    +
    bytec_0 // "tup_bag"
    swap
    frame_dig -1
    box_replace
    bytec_0 // "tup_bag"
    intc_0 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 1
    +
    itob
    bytec_0 // "tup_bag"
    intc_0 // 0
    uncover 2
    box_replace
    frame_dig -1
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
_check_owner:
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_1 // 1
    box_extract
    intc_0 // 0
    getbit
    assert // app not bootstrapped
    bytec_0 // "tup_bag"
    pushints 136 32 // 136, 32
    box_extract
    txn Sender
    ==
    assert // sender not authorized
    bytec_0 // "tup_bag"
    pushint 168 // 168
    intc_2 // 8
    box_extract
    btoi
    global CurrentApplicationID
    ==
    assert // this error should be impossible
    retsub
