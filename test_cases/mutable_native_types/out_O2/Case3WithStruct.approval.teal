#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 16 1 8
    bytecblock "tup_bag" 0x151f7c75
    intc_0 // 0
    dup
    pushbytes ""
    dupn 4
    txn NumAppArgs
    bz main_bare_routing@30
    pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 // method "create_box()void", method "num_tups()uint64", method "add_tup((uint64,uint64))void", method "get_tup(uint64)(uint64,uint64)", method "sum()uint64", method "add_many_tups((uint64,uint64)[])void", method "add_fixed_tups((uint64,uint64)[3])void", method "set_a(uint64)void", method "set_b(uint64)void", method "get_3_tups(uint64)(uint64,uint64)[3]"
    txna ApplicationArgs 0
    match main_create_box_route@5 main_num_tups_route@6 main_add_tup_route@7 main_get_tup_route@8 main_sum_route@9 main_add_many_tups_route@13 main_add_fixed_tups_route@17 main_set_a_route@21 main_set_b_route@25 main_get_3_tups_route@29

main_after_if_else@32:
    intc_0 // 0
    return

main_get_3_tups_route@29:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    dig 1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    extract 8 128 // on error: Index access is out of bounds
    dig 1
    intc_1 // 16
    *
    dig 1
    swap
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    dig 2
    intc_2 // 1
    +
    intc_1 // 16
    *
    dig 2
    swap
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    uncover 3
    pushint 2 // 2
    +
    intc_1 // 16
    *
    uncover 3
    swap
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    cover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_set_b_route@25:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    bury 4
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    bury 2
    intc_0 // 0
    bury 3

main_for_header@26:
    dig 2
    dig 2
    <
    bz main_after_for@16
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    dig 4
    dup
    cover 2
    intc_1 // 16
    *
    dup2
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    dig 8
    itob
    replace2 8
    dig 3
    intc_3 // 8
    <
    assert // Index access is out of bounds
    replace3
    uncover 2
    swap
    replace2 8
    bytec_0 // "tup_bag"
    swap
    box_put
    intc_2 // 1
    +
    bury 3
    b main_for_header@26

main_after_for@16:
    intc_2 // 1
    return

main_set_a_route@21:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    bury 5
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    bury 2
    intc_0 // 0
    bury 3

main_for_header@22:
    dig 2
    dig 2
    <
    bz main_after_for@16
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    dig 4
    dup
    cover 2
    intc_1 // 16
    *
    dup2
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    dig 9
    itob
    replace2 0
    dig 3
    intc_3 // 8
    <
    assert // Index access is out of bounds
    replace3
    uncover 2
    swap
    replace2 8
    bytec_0 // "tup_bag"
    swap
    box_put
    intc_2 // 1
    +
    bury 3
    b main_for_header@22

main_add_fixed_tups_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    bury 7
    intc_0 // 0
    bury 3

main_for_header@18:
    dig 2
    pushint 3 // 3
    <
    bz main_after_for@16
    dig 2
    dup
    intc_1 // 16
    *
    dig 8
    swap
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    callsub add_tup
    pop
    intc_2 // 1
    +
    bury 3
    b main_for_header@18

main_add_many_tups_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    bury 7
    intc_0 // 0
    extract_uint16
    bury 2
    intc_0 // 0
    bury 3

main_for_header@14:
    dig 2
    dig 2
    <
    bz main_after_for@16
    dig 5
    extract 2 0
    dig 3
    dup
    cover 2
    intc_1 // 16
    *
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    callsub add_tup
    pop
    intc_2 // 1
    +
    bury 3
    b main_for_header@14

main_sum_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bury 1
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    bury 2
    intc_0 // 0
    bury 3

main_for_header@10:
    dig 2
    dig 2
    <
    bz main_after_for@12
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    extract 8 128 // on error: Index access is out of bounds
    dig 3
    dup
    cover 2
    intc_1 // 16
    *
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    dig 3
    +
    swap
    intc_3 // 8
    extract_uint64
    +
    bury 2
    intc_2 // 1
    +
    bury 3
    b main_for_header@10

main_after_for@12:
    dup
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_get_tup_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    dig 1
    >
    assert // index out of bounds
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    extract 8 128 // on error: Index access is out of bounds
    swap
    intc_1 // 16
    *
    intc_1 // 16
    extract3 // on error: Index access is out of bounds
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_add_tup_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    callsub add_tup
    pop
    intc_2 // 1
    return

main_num_tups_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_create_box_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // "tup_bag"
    pushint 136 // 136
    box_create
    assert // box already existed
    intc_2 // 1
    return

main_bare_routing@30:
    txn OnCompletion
    bnz main_after_if_else@32
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: bytes) -> bytes:
add_tup:
    proto 1 1
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    intc_3 // 8
    <
    assert // too many tups
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    extract_uint64
    dup
    intc_3 // 8
    <
    assert // Index access is out of bounds
    intc_1 // 16
    *
    frame_dig -1
    replace3
    replace2 8
    bytec_0 // "tup_bag"
    swap
    box_put
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_0 // 0
    extract_uint64
    intc_2 // 1
    +
    itob
    replace2 0
    bytec_0 // "tup_bag"
    swap
    box_put
    frame_dig -1
    retsub
