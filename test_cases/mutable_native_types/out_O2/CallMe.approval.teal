#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 16
    bytecblock 0x151f7c75 "fixed_struct" "nested_struct" "dynamic_struct" "fixed_arr" "native_arr"
    txn NumAppArgs
    bz main___algopy_default_create@22
    pushbytes 0x24378d3c // method "delete()void"
    txna ApplicationArgs 0
    match main_delete_route@5
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x11b19b95 0xd28b964a 0xea18655f 0xbb3bfdb7 0x46ec14a0 0x9b4d0926 0x4f0deb50 0x59664ab6 0x125d1376 0x818e4a62 0x9bbe1032 // method "fixed_struct_arg((uint64,uint64))void", method "fixed_struct_ret()(uint64,uint64)", method "nested_struct_arg(((uint64,uint64),uint64))void", method "nested_struct_ret()((uint64,uint64),uint64)", method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void", method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])", method "fixed_arr_arg((uint64,uint64)[3])void", method "fixed_arr_ret()(uint64,uint64)[3]", method "native_arr_arg((uint64,uint64)[])void", method "native_arr_ret()(uint64,uint64)[]", method "log_it()void"
    txna ApplicationArgs 0
    match main_fixed_struct_arg_route@8 main_fixed_struct_ret_route@9 main_nested_struct_arg_route@10 main_nested_struct_ret_route@11 main_dynamic_struct_arg_route@12 main_dynamic_struct_ret_route@13 main_fixed_arr_arg_route@14 main_fixed_arr_ret_route@15 main_native_arr_arg_route@16 main_native_arr_ret_route@17 main_log_it_route@18
    err

main_log_it_route@18:
    intc_1 // 0
    bytec_1 // "fixed_struct"
    app_global_get_ex
    assert // check self.fixed_struct exists
    log
    intc_1 // 0
    bytec_2 // "nested_struct"
    app_global_get_ex
    assert // check self.nested_struct exists
    log
    intc_1 // 0
    bytec_3 // "dynamic_struct"
    app_global_get_ex
    assert // check self.dynamic_struct exists
    log
    intc_1 // 0
    bytec 4 // "fixed_arr"
    app_global_get_ex
    assert // check self.fixed_arr exists
    log
    intc_1 // 0
    bytec 5 // "native_arr"
    app_global_get_ex
    assert // check self.native_arr exists
    log
    intc_0 // 1
    return

main_native_arr_ret_route@17:
    intc_1 // 0
    bytec 5 // "native_arr"
    app_global_get_ex
    assert // check self.native_arr exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_native_arr_arg_route@16:
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    intc_2 // 16
    *
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+(uint64,uint64)[])
    bytec 5 // "native_arr"
    swap
    app_global_put
    intc_0 // 1
    return

main_fixed_arr_ret_route@15:
    intc_1 // 0
    bytec 4 // "fixed_arr"
    app_global_get_ex
    assert // check self.fixed_arr exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_fixed_arr_arg_route@14:
    txna ApplicationArgs 1
    dup
    len
    pushint 48 // 48
    ==
    assert // invalid number of bytes for (uint64,uint64)[3]
    bytec 4 // "fixed_arr"
    swap
    app_global_put
    intc_0 // 1
    return

main_dynamic_struct_ret_route@13:
    intc_1 // 0
    bytec_3 // "dynamic_struct"
    app_global_get_ex
    assert // check self.dynamic_struct exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_dynamic_struct_arg_route@12:
    bytec_3 // "dynamic_struct"
    txna ApplicationArgs 1
    app_global_put
    intc_0 // 1
    return

main_nested_struct_ret_route@11:
    intc_1 // 0
    bytec_2 // "nested_struct"
    app_global_get_ex
    assert // check self.nested_struct exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_nested_struct_arg_route@10:
    txna ApplicationArgs 1
    dup
    len
    pushint 24 // 24
    ==
    assert // invalid number of bytes for ((uint64,uint64),uint64)
    bytec_2 // "nested_struct"
    swap
    app_global_put
    intc_0 // 1
    return

main_fixed_struct_ret_route@9:
    intc_1 // 0
    bytec_1 // "fixed_struct"
    app_global_get_ex
    assert // check self.fixed_struct exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_fixed_struct_arg_route@8:
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    bytec_1 // "fixed_struct"
    swap
    app_global_put
    intc_0 // 1
    return

main_delete_route@5:
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be DeleteApplication && can only call when not creating
    intc_0 // 1
    return

main___algopy_default_create@22:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return
