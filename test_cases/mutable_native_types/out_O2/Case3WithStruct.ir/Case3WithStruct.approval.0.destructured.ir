main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@34
    block@4: // abi_routing_L31
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@13, method "add_fixed_tups((uint64,uint64)[3])void" => block@17, method "set_a(uint64)void" => block@21, method "set_b(uint64)void" => block@25, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@29, method "get_all_tups()(uint64,uint64)[]" => block@30, * => block@36}
    block@5: // create_box_route_L35
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#1: bool = (box_create "tup_bag" 176u)
        (assert tmp%0#1) // box already exists
        let tmp%1#4: bytes[32] = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let updated_data%0#0: bytes = ((replace2 136) maybe_value%0#0 tmp%1#4)
        let tmp%2#3: uint64 = (global CurrentApplicationID)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#3)
        let updated_data%1#0: bytes = ((replace2 168) updated_data%0#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@6: // num_tups_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#2)
        let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%12#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@7: // add_tup_route_L45
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded((uint64,uint64))%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@8: // get_tup_route_L52
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#3: bool = (< index#0 tmp%0#2)
        (assert tmp%1#3) // index out of bounds
        let extract%1#2: bytes = ((extract 8 128) maybe_value%0#0)
        let bytes_offset%0#0: uint64 = (* index#0 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#2 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%23#0: bytes = (concat 0x151f7c75 encoded_element%0#0)
        (log tmp%23#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@9: // sum_route_L57
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let total#0: uint64 = 0u
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L60
        let continue_looping%0#0: bool = (< i#0 tmp%0#2)
        goto continue_looping%0#0 ? block@11 : block@12
    block@11: // for_body_L61
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#2) // check self.tup_bag exists
        let extract%1#2: bytes = ((extract 8 128) maybe_value%1#2)
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let tup#0: Encoded((uint64,uint64)) = (extract3 extract%1#2 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%1#1: uint64 = (extract_uint64 tup#0 0u)
        let total#0: uint64 = (+ total#0 tmp%1#1)
        let tmp%3#0: uint64 = (extract_uint64 tup#0 8u)
        let total#0: uint64 = (+ total#0 tmp%3#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@10
    block@12: // after_for_L60
        let val_as_bytes%1#0: bytes[8] = (itob total#0)
        let tmp%29#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%29#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@13: // add_many_tups_route_L66
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        (assert tmp%32#0) // can only call when not creating
        let tups#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        let array%array_length%0#1: uint64 = (extract_uint16 tups#0 0u)
        let i#0: uint64 = 0u
        goto block@14
    block@14: // for_header_L68
        let continue_looping%0#0: bool = (< i#0 array%array_length%0#1)
        goto continue_looping%0#0 ? block@15 : block@16
    block@15: // for_body_L69
        let array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(encoded_element%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@14
    block@16: // after_for_L68
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@17: // add_fixed_tups_route_L71
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let tups#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        let i#0: uint64 = 0u
        goto block@18
    block@18: // for_header_L73
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@19 : block@16
    block@19: // for_body_L74
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let encoded_element%0#0: bytes = (extract3 tups#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(encoded_element%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@18
    block@21: // set_a_route_L76
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L79
        let continue_looping%0#0: bool = (< i#0 tmp%0#2)
        goto continue_looping%0#0 ? block@23 : block@16
    block@23: // for_body_L80
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#2) // check self.tup_bag exists
        let extract%1#2: bytes = ((extract 8 128) maybe_value%1#2)
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#2 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let updated_data%0#0: bytes = ((replace2 0) encoded_element%0#0 val_as_bytes%0#0)
        let updated_array%0#0: bytes = (replace3 extract%1#2 bytes_offset%0#0 updated_data%0#0)
        let updated_data%1#0: bytes = ((replace2 8) maybe_value%1#2 updated_array%0#0)
        (box_put "tup_bag" updated_data%1#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@22
    block@25: // set_b_route_L82
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@26
    block@26: // for_header_L85
        let continue_looping%0#0: bool = (< i#0 tmp%0#2)
        goto continue_looping%0#0 ? block@27 : block@16
    block@27: // for_body_L86
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#2) // check self.tup_bag exists
        let extract%1#2: bytes = ((extract 8 128) maybe_value%1#2)
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#2 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob b#0)
        let updated_data%0#0: bytes = ((replace2 8) encoded_element%0#0 val_as_bytes%0#0)
        let updated_array%0#0: bytes = (replace3 extract%1#2 bytes_offset%0#0 updated_data%0#0)
        let updated_data%1#0: bytes = ((replace2 8) maybe_value%1#2 updated_array%0#0)
        (box_put "tup_bag" updated_data%1#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@26
    block@29: // get_3_tups_route_L88
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#1: uint64 = (+ start#0 3u)
        let tmp%2#1: bool = (>= tmp%0#2 tmp%1#1)
        (assert tmp%2#1) // not enough items
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%0#0)
        let bytes_offset%0#0: uint64 = (* start#0 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%3#0: uint64 = (+ start#0 1u)
        let bytes_offset%1#0: uint64 = (* tmp%3#0 16u)
        let encoded_element%1#0: bytes = (extract3 items#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%4#1: uint64 = (+ start#0 2u)
        let bytes_offset%2#0: uint64 = (* tmp%4#1 16u)
        let encoded_element%2#0: bytes = (extract3 items#0 bytes_offset%2#0 16u) // on error: index access is out of bounds
        let encoded%1#1: Encoded(((uint64,uint64),(uint64,uint64))) = (concat encoded_element%0#0 encoded_element%1#0)
        let encoded%2#1: Encoded(((uint64,uint64),(uint64,uint64),(uint64,uint64))) = (concat encoded%1#1 encoded_element%2#0)
        let tmp%54#0: bytes = (concat 0x151f7c75 encoded%2#1)
        (log tmp%54#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@30: // get_all_tups_route_L101
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%0#0)
        let tmp%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@31
    block@31: // for_header_L106
        let continue_looping%0#0: bool = (< i#0 tmp%0#2)
        goto continue_looping%0#0 ? block@32 : block@33
    block@32: // for_body_L107
        let bytes_offset%0#0: uint64 = (* i#0 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 encoded_element%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@31
    block@33: // after_for_L106
        let tmp%60#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%60#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@34: // bare_routing_L31
        let tmp%61#0: uint64 = (txn OnCompletion)
        goto tmp%61#0 ? block@36 : block@35
    block@35: // __algopy_default_create_L1
        let tmp%62#0: uint64 = (txn ApplicationID)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // can only call when creating
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@36: // after_if_else_L31
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@37: // after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router___L1
        return tmp%0#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded((uint64,uint64))) -> Encoded((uint64,uint64)):
    block@0: // L45
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let extract%1#0: bytes = ((extract 8 128) maybe_value%0#0)
        let write_offset%0#0: uint64 = (* tmp%0#0 16u)
        let updated_array%0#0: bytes = (replace3 extract%1#0 write_offset%0#0 tup#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%0#0 updated_array%0#0)
        let tmp%3#0: uint64 = (extract_uint64 updated_data%0#0 0u)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let updated_data%1#0: bytes = ((replace2 0) updated_data%0#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        return tup#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L110
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 136 32) maybe_value%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== extract%0#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let tmp%2#0: uint64 = (extract_uint64 maybe_value%0#0 168u)
        let tmp%3#0: uint64 = (global CurrentApplicationID)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // this error should be impossible
        return 