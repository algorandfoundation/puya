main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@34
    block@4: // abi_routing_L34
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@13, method "add_fixed_tups((uint64,uint64)[3])void" => block@17, method "set_a(uint64)void" => block@21, method "set_b(uint64)void" => block@25, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@29, method "get_all_tups()(uint64,uint64)[]" => block@30, * => block@36}
    block@5: // create_box_route_L38
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#1: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#1) // box already exists
        let tmp%1#3: account = (txn Sender)
        (box_replace "tup_bag" 136u tmp%1#3)
        let tmp%2#1: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#1)
        (box_replace "tup_bag" 168u aggregate%val_as_bytes%0#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#0 0u 1u)
        (box_replace "tup_bag" 4272u aggregate%updated_target%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@6: // num_tups_route_L45
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let tmp%13#0: bytes = (concat 0x151f7c75 box%box_extract%1#0)
        (log tmp%13#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@7: // add_tup_route_L49
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@8: // get_tup_route_L56
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%2#0)
        let tmp%0#1: bool = (< index#0 values%0#1)
        (assert tmp%0#1) // index out of bounds
        let box%box_extract%4#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%4#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%24#0: bytes = (concat 0x151f7c75 aggregate%encoded_element%0#0)
        (log tmp%24#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@9: // sum_route_L61
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let total#0: uint64 = 0u
        let box%box_extract%5#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%5#0)
        let i#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L64
        let continue_looping%0#0: bool = (< i#0 values%0#1)
        goto continue_looping%0#0 ? block@11 : block@12
    block@11: // for_body_L65
        let box%box_extract%8#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%2#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 box%box_extract%8#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let values%3#1: uint64 = (extract_uint64 aggregate%encoded_element%2#0 0u)
        let total#0: uint64 = (+ total#0 values%3#1)
        let box%box_extract%9#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%encoded_element%3#0: bytes = (extract3 box%box_extract%9#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let values%4#1: uint64 = (extract_uint64 aggregate%encoded_element%3#0 8u)
        let total#0: uint64 = (+ total#0 values%4#1)
        let i#0: uint64 = (+ i#0 1u)
        goto block@10
    block@12: // after_for_L64
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#0)
        let tmp%31#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%31#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@13: // add_many_tups_route_L70
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let tups#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let i#0: uint64 = 0u
        goto block@14
    block@14: // for_header_L72
        let continue_looping%0#0: bool = (< i#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@15 : block@16
    block@15: // for_body_L73
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let aggregate%bytes_offset%4#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%4#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(aggregate%encoded_element%4#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@14
    block@16: // after_for_L72
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@17: // add_fixed_tups_route_L75
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let tups#0: bytes = (txna ApplicationArgs 1)
        let i#0: uint64 = 0u
        goto block@18
    block@18: // for_header_L77
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@19 : block@16
    block@19: // for_body_L78
        let aggregate%bytes_offset%5#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%5#0: bytes = (extract3 tups#0 aggregate%bytes_offset%5#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(aggregate%encoded_element%5#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@18
    block@21: // set_a_route_L80
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%10#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%10#0)
        let i#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L83
        let continue_looping%0#0: bool = (< i#0 values%0#1)
        goto continue_looping%0#0 ? block@23 : block@16
    block@23: // for_body_L84
        let box%index_ok%0#0: bool = (< i#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* i#0 16u)
        let box%offset%13#0: uint64 = (+ 8u box%index_bytes_offset%0#0)
        (box_replace "tup_bag" box%offset%13#0 reinterpret_Encoded(uint64)%1#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@22
    block@25: // set_b_route_L86
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%11#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%11#0)
        let i#0: uint64 = 0u
        goto block@26
    block@26: // for_header_L89
        let continue_looping%0#0: bool = (< i#0 values%0#1)
        goto continue_looping%0#0 ? block@27 : block@16
    block@27: // for_body_L90
        let box%index_ok%1#0: bool = (< i#0 8u)
        (assert box%index_ok%1#0) // index out of bounds
        let box%index_bytes_offset%1#0: uint64 = (* i#0 16u)
        let box%offset%18#0: uint64 = (+ box%index_bytes_offset%1#0 16u)
        (box_replace "tup_bag" box%offset%18#0 reinterpret_Encoded(uint64)%2#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@26
    block@29: // get_3_tups_route_L92
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let box%box_extract%12#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%12#0)
        let tmp%0#2: uint64 = (+ start#0 3u)
        let tmp%1#1: bool = (>= values%0#1 tmp%0#2)
        (assert tmp%1#1) // not enough items
        let box%box_extract%14#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%6#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%6#0: bytes = (extract3 box%box_extract%14#0 aggregate%bytes_offset%6#0 16u) // on error: index access is out of bounds
        let tmp%2#1: uint64 = (+ start#0 1u)
        let box%box_extract%15#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%7#0: uint64 = (* tmp%2#1 16u)
        let aggregate%encoded_element%7#0: bytes = (extract3 box%box_extract%15#0 aggregate%bytes_offset%7#0 16u) // on error: index access is out of bounds
        let tmp%3#0: uint64 = (+ start#0 2u)
        let box%box_extract%16#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%8#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%8#0: bytes = (extract3 box%box_extract%16#0 aggregate%bytes_offset%8#0 16u) // on error: index access is out of bounds
        let aggregate%head%1#0: bytes = (concat aggregate%encoded_element%6#0 aggregate%encoded_element%7#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_element%8#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%56#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@30: // get_all_tups_route_L105
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let box%box_extract%18#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%1#0: uint64 = (btoi box%box_extract%18#0)
        let i#0: uint64 = 0u
        goto block@31
    block@31: // for_header_L110
        let continue_looping%0#0: bool = (< i#0 values%1#0)
        goto continue_looping%0#0 ? block@32 : block@33
    block@32: // for_body_L111
        let box%box_extract%19#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%9#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%9#0: bytes = (extract3 box%box_extract%19#0 aggregate%bytes_offset%9#0 16u) // on error: index access is out of bounds
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 aggregate%encoded_element%9#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@31
    block@33: // after_for_L110
        let tmp%62#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%62#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@34: // bare_routing_L34
        let tmp%63#0: uint64 = (txn OnCompletion)
        goto tmp%63#0 ? block@36 : block@35
    block@35: // __algopy_default_create_L1
        let tmp%64#0: uint64 = (txn ApplicationID)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0) // can only call when creating
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@36: // after_if_else_L34
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@37
    block@37: // after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router___L1
        return tmp%0#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L49
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%1#0: uint64 = (btoi box%box_extract%1#0)
        let box%index_ok%0#0: bool = (< values%1#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* values%1#0 16u)
        let box%offset%3#0: uint64 = (+ 8u box%index_bytes_offset%0#0)
        (box_replace "tup_bag" box%offset%3#0 tup#0)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        (box_replace "tup_bag" 0u aggregate%val_as_bytes%0#0)
        return tup#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L114
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%get_bit%0#0: uint64 = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0) // app not bootstrapped
        let box%box_extract%1#0: Encoded(uint8[32]) = (box_extract "tup_bag" 136u 32u)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== box%box_extract%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 168u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 