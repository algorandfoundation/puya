{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoE8C;;AAApB;AAAA;AAAoB;AAAA;AAAlC;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAxB;AAAA;AAAwB;AAAA;AAAtC;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAxB;AAAA;AAAwB;AAAA;AAAxB;AAHD;;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAYM;;AADA;AAAA;AACA;AAAA;AAFK;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAGL;;AAHK;AAIL;;AAJK;AAKL;;AALK;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;;AAAA;AAAhB;AAAA;AAAA;AAtBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAyFK;;AAAA;AAAA;AAAA;;AAAA;AAEa;AAAA;AAAA;AAAA;AAAV;AAAU;;;AACV;AAAU;;;AAWP;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAAA;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAVM;AAAT;AAAA;;AACG;AAAS;;AAAT;;;;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;;AAAA;;AAAA;AACA;;;;AARP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;;;AAFV;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;AAAA;;;AAyEQ;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACa;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AANH;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA9DL;;;AAAA;AAgEY;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;AAAb;;AAAA;AAAA;AAAJ;;AALH;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;AAyDkC;AAAA;AAAA;AAAA;AAA1B;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;;;AAAnB;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AALH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;;AAAA;AAAA;;;AAAA;AAoDuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHH;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA5CL;;;AA8Ce;AAAA;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;AAJH;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAxBL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 48"
    },
    "7": {
      "op": "bytecblock \"nested\" \"num_payments\" \"payments\" 0x70 0x6c \"box\" 0x0000 0x151f7c75 \"box_map\""
    },
    "62": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "result#0"
      ]
    },
    "64": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "70": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%1#1"
      ]
    },
    "72": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "tmp%1#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%1#1",
        "val_as_bytes%0#0"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "75": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "77": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0",
        "1"
      ]
    },
    "80": {
      "op": "+",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0"
      ]
    },
    "81": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "83": {
      "op": "intc_1 // 1",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "1"
      ]
    },
    "84": {
      "op": "+",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "87": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0",
        "tmp%5#0"
      ]
    },
    "88": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "90": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%6#0"
      ]
    },
    "92": {
      "op": "intc_1 // 1",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%6#0",
        "1"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0"
      ]
    },
    "94": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "96": {
      "op": "intc_1 // 1",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "97": {
      "op": "+",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "99": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%9#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%9#0",
        "val_as_bytes%4#0"
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0",
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "102": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "103": {
      "op": "cover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%8#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "105": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%8#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "108": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%12#0",
        "\"nested\""
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"nested\"",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "111": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%11#0"
      ]
    },
    "113": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%11#0",
        "val_as_bytes%6#0"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%6#0",
        "tmp%11#0"
      ]
    },
    "116": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "118": {
      "op": "pushbytes 0x0016",
      "defined_out": [
        "0x0016",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%15#0",
        "0x0016"
      ]
    },
    "122": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "123": {
      "op": "pushbytes 0x0018",
      "defined_out": [
        "0x0018",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%16#0",
        "0x0018"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "128": {
      "op": "pushbytes 0x001a",
      "defined_out": [
        "0x001a",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%17#0",
        "0x001a"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "133": {
      "op": "bytec 6 // 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%18#0",
        "0x0000"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "136": {
      "op": "bytec 6 // 0x0000",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%19#0",
        "0x0000"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "139": {
      "op": "bytec 6 // 0x0000",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%20#0",
        "0x0000"
      ]
    },
    "141": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "142": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%21#0",
        "\"dyn\""
      ]
    },
    "147": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"dyn\"",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "148": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "149": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "\"num_payments\""
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "\"num_payments\"",
        "0"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "152": {
      "op": "pushint 384 // 384",
      "defined_out": [
        "384"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "384"
      ]
    },
    "155": {
      "op": "bzero",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "materialized_values%0#0"
      ]
    },
    "156": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "materialized_values%0#0",
        "\"payments\""
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"payments\"",
        "materialized_values%0#0"
      ]
    },
    "158": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "159": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#2"
      ]
    },
    "161": {
      "op": "bz main_bare_routing@16",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "164": {
      "op": "pushbytess 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 // method \"fixed_initialize()void\", method \"add_payment((address,uint64,uint64))void\", method \"increment_payment(uint64,uint64)void\", method \"create_storage(uint64)void\", method \"delete_storage(uint64)void\", method \"struct_arg(uint64,(uint64,uint64))void\", method \"struct_return()(uint64,uint64)\", method \"tup_return()(uint64,uint64)\", method \"calculate_sum()uint64\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "tmp%2#1"
      ]
    },
    "214": {
      "op": "match main_fixed_initialize_route@5 main_add_payment_route@6 main_increment_payment_route@7 main_create_storage_route@8 main_delete_storage_route@9 main_struct_arg_route@10 main_struct_return_route@11 main_tup_return_route@12 main_calculate_sum_route@13",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "234": {
      "block": "main_after_if_else@18",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "236": {
      "block": "main_calculate_sum_route@13",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%43#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%44#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%45#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "243": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "244": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "245": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "246": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "248": {
      "error": "Index access is out of bounds",
      "op": "extract 0 16 // on error: Index access is out of bounds",
      "defined_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0",
        "fixed_a#0"
      ]
    },
    "251": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_a#0",
        "maybe_value%0#0"
      ]
    },
    "252": {
      "error": "Index access is out of bounds",
      "op": "extract 16 16 // on error: Index access is out of bounds",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "255": {
      "op": "dig 1",
      "defined_out": [
        "fixed_a#0",
        "fixed_a#0 (copy)",
        "fixed_b#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)",
        "0"
      ]
    },
    "258": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_a#0",
        "fixed_b#0",
        "tmp%0#2"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%0#2",
        "fixed_a#0"
      ]
    },
    "261": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "fixed_a#0",
        "fixed_b#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%0#2",
        "fixed_a#0",
        "8"
      ]
    },
    "262": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "263": {
      "op": "+",
      "defined_out": [
        "fixed_b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "dig 1",
      "defined_out": [
        "fixed_b#0",
        "fixed_b#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%2#0",
        "fixed_b#0 (copy)"
      ]
    },
    "266": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%2#0",
        "fixed_b#0 (copy)",
        "0"
      ]
    },
    "267": {
      "op": "extract_uint64",
      "stack_out": [
        "result#0",
        "result#6",
        "fixed_b#0",
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "268": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0",
        "tmp%0#2",
        "fixed_b#0"
      ]
    },
    "270": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0",
        "tmp%0#2",
        "fixed_b#0",
        "8"
      ]
    },
    "271": {
      "op": "extract_uint64",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "272": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0",
        "tmp%2#6"
      ]
    },
    "273": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "274": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "result#6",
        "result#0",
        "result#0"
      ]
    },
    "275": {
      "op": "bury 3",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "277": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "278": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "280": {
      "op": "<",
      "defined_out": [
        "result#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0",
        "tmp%2#2"
      ]
    },
    "281": {
      "op": "swap",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%2#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#2",
        "result#6"
      ]
    },
    "282": {
      "op": "bury 2",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%2#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#2"
      ]
    },
    "284": {
      "op": "bz main_after_if_else@15",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "288": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "290": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "291": {
      "error": "Index access is out of bounds",
      "op": "extract 32 16 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0"
      ]
    },
    "296": {
      "op": "extract_uint64",
      "defined_out": [
        "c#0",
        "encoded%0#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "c#0"
      ]
    },
    "297": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "encoded%0#0"
      ]
    },
    "298": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "encoded%0#0",
        "8"
      ]
    },
    "299": {
      "op": "extract_uint64",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "300": {
      "op": "dig 3",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0",
        "result#0"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0",
        "c#0"
      ]
    },
    "304": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "305": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "306": {
      "op": "bury 1",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "308": {
      "block": "main_after_if_else@15",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "dup",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "309": {
      "op": "itob",
      "defined_out": [
        "result#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%2#0"
      ]
    },
    "310": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "312": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%47#0"
      ]
    },
    "314": {
      "op": "log",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "result#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "317": {
      "block": "main_tup_return_route@12",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%38#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%39#0"
      ]
    },
    "320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%40#0"
      ]
    },
    "323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "324": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "325": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "326": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "327": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0"
      ]
    },
    "328": {
      "error": "Index access is out of bounds",
      "op": "extract 32 16 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0"
      ]
    },
    "331": {
      "op": "dup",
      "defined_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ]
    },
    "332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0"
      ]
    },
    "333": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded%0#0",
        "item0%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "item0%1#1"
      ]
    },
    "334": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#1",
        "encoded%0#0"
      ]
    },
    "335": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "encoded%0#0",
        "item0%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#1",
        "encoded%0#0",
        "8"
      ]
    },
    "336": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1#1",
        "item1%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#1",
        "item1%1#1"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "item1%1#1",
        "item0%1#1"
      ]
    },
    "338": {
      "op": "itob",
      "defined_out": [
        "item1%1#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "item1%1#1",
        "val_as_bytes%0#0"
      ]
    },
    "339": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%0#0",
        "item1%1#1"
      ]
    },
    "340": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "342": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%42#0"
      ]
    },
    "346": {
      "op": "log",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "349": {
      "block": "main_struct_return_route@11",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%32#0"
      ]
    },
    "351": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%33#0"
      ]
    },
    "352": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "353": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%34#0"
      ]
    },
    "355": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "357": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "358": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "359": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%0#0"
      ]
    },
    "360": {
      "error": "Index access is out of bounds",
      "op": "extract 0 16 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#5"
      ]
    },
    "363": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#5",
        "0x151f7c75"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "0x151f7c75",
        "tmp%0#5"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%37#0"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "370": {
      "block": "main_struct_arg_route@10",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%27#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%28#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%29#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "380": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "381": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0"
      ]
    },
    "384": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "0"
      ]
    },
    "385": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "0",
        "\"nested\""
      ]
    },
    "386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "387": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%0#0"
      ]
    },
    "388": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "box_key#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "390": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "box_key#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%0#0"
      ]
    },
    "392": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%0#0",
        "\"nested\""
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "\"nested\"",
        "updated_data%0#0"
      ]
    },
    "394": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "0"
      ]
    },
    "396": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0",
        "0x70",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "0",
        "0x70"
      ]
    },
    "397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%1#1",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "398": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%1#1"
      ]
    },
    "399": {
      "op": "dig 1",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%1#1",
        "a#0 (copy)"
      ]
    },
    "401": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "box_key#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%1#0"
      ]
    },
    "403": {
      "op": "bytec_3 // 0x70",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%1#0",
        "0x70"
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "0x70",
        "updated_data%1#0"
      ]
    },
    "405": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0"
      ]
    },
    "406": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "box_key#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5"
      ]
    },
    "408": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "box_key#0",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "tmp%0#5 (copy)",
        "0"
      ]
    },
    "410": {
      "op": "bytec 4 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "a#0",
        "box_key#0",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "tmp%0#5 (copy)",
        "0",
        "0x6c"
      ]
    },
    "412": {
      "op": "app_local_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "413": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "maybe_value%2#0"
      ]
    },
    "414": {
      "op": "dig 2",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "416": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "box_key#0",
        "tmp%0#5",
        "updated_data%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "updated_data%2#0"
      ]
    },
    "418": {
      "op": "bytec 4 // 0x6c"
    },
    "420": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "tmp%0#5",
        "0x6c",
        "updated_data%2#0"
      ]
    },
    "421": {
      "op": "app_local_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0"
      ]
    },
    "422": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "\"box\""
      ]
    },
    "424": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "425": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%3#0"
      ]
    },
    "426": {
      "op": "dig 1",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "maybe_value%3#0",
        "a#0 (copy)"
      ]
    },
    "428": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "box_key#0",
        "updated_data%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%3#0"
      ]
    },
    "430": {
      "op": "bytec 5 // \"box\"",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "updated_data%3#0",
        "\"box\""
      ]
    },
    "432": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0",
        "\"box\"",
        "updated_data%3#0"
      ]
    },
    "433": {
      "op": "box_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "a#0"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "box_key#0"
      ]
    },
    "435": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "encoded_value%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "encoded_value%0#1"
      ]
    },
    "436": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "a#0",
        "encoded_value%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "encoded_value%0#1",
        "\"box_map\""
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "\"box_map\"",
        "encoded_value%0#1"
      ]
    },
    "439": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "box_prefixed_key%0#0"
      ]
    },
    "440": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "441": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "box_prefixed_key%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "box_prefixed_key%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "442": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "result#0",
        "result#6",
        "a#0",
        "box_prefixed_key%0#0",
        "maybe_value%4#0"
      ]
    },
    "443": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "box_prefixed_key%0#0",
        "maybe_value%4#0",
        "a#0"
      ]
    },
    "445": {
      "op": "replace2 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_data%4#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_prefixed_key%0#0",
        "updated_data%4#0"
      ]
    },
    "447": {
      "op": "box_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "448": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "450": {
      "block": "main_delete_storage_route@9",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%22#0"
      ]
    },
    "452": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%23#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%24#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "460": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "461": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0x70"
      ]
    },
    "462": {
      "op": "app_global_del",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "463": {
      "op": "txn Sender",
      "defined_out": [
        "box_key#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "tmp%0#5"
      ]
    },
    "465": {
      "op": "bytec 4 // 0x6c",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "tmp%0#5",
        "0x6c"
      ]
    },
    "467": {
      "op": "app_local_del",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "468": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "\"box\""
      ]
    },
    "470": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "{box_del}"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "{box_del}"
      ]
    },
    "471": {
      "op": "pop",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "472": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_value%0#1"
      ]
    },
    "473": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded_value%0#1",
        "\"box_map\""
      ]
    },
    "475": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"box_map\"",
        "encoded_value%0#1"
      ]
    },
    "476": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_prefixed_key%0#0"
      ]
    },
    "477": {
      "op": "box_del",
      "stack_out": [
        "result#0",
        "result#6",
        "{box_del}"
      ]
    },
    "478": {
      "op": "pop",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "479": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "480": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "481": {
      "block": "main_create_storage_route@8",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%17#0"
      ]
    },
    "483": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%18#0"
      ]
    },
    "484": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "485": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%19#0"
      ]
    },
    "487": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "488": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "491": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "492": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0"
      ]
    },
    "493": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0",
        "box_key#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0",
        "\"nested\""
      ]
    },
    "494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_key#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "495": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%0#0"
      ]
    },
    "496": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70",
        "box_key#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "498": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0"
      ]
    },
    "499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0"
      ]
    },
    "500": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "0",
        "\"nested\""
      ]
    },
    "501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_key#0",
        "maybe_exists%1#1",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "502": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1"
      ]
    },
    "503": {
      "op": "txn Sender",
      "defined_out": [
        "box_key#0",
        "maybe_value%1#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "tmp%0#5"
      ]
    },
    "505": {
      "op": "bytec 4 // 0x6c",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "maybe_value%1#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "tmp%0#5",
        "0x6c"
      ]
    },
    "507": {
      "op": "dig 2",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "maybe_value%1#1",
        "maybe_value%1#1 (copy)",
        "tmp%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "tmp%0#5",
        "0x6c",
        "maybe_value%1#1 (copy)"
      ]
    },
    "509": {
      "op": "app_local_put",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1"
      ]
    },
    "510": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "box_key#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "\"box\""
      ]
    },
    "512": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064",
        "box_key#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "\"box\"",
        "2064"
      ]
    },
    "515": {
      "op": "box_create",
      "defined_out": [
        "box_key#0",
        "maybe_value%1#1",
        "tmp%1#4"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1",
        "tmp%1#4"
      ]
    },
    "516": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "maybe_value%1#1"
      ]
    },
    "517": {
      "error": "Index access is out of bounds",
      "op": "extract 0 16 // on error: Index access is out of bounds",
      "defined_out": [
        "box_key#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_key#0",
        "tmp%2#1"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "box_key#0"
      ]
    },
    "521": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "encoded_value%0#1"
      ]
    },
    "522": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "encoded_value%0#1",
        "\"box_map\""
      ]
    },
    "524": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "\"box_map\"",
        "encoded_value%0#1"
      ]
    },
    "525": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "box_prefixed_key%0#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "527": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "box_prefixed_key%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "528": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#1",
        "box_prefixed_key%0#0",
        "maybe_value%3#0"
      ]
    },
    "529": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "box_prefixed_key%0#0",
        "maybe_value%3#0",
        "tmp%2#1"
      ]
    },
    "531": {
      "op": "replace2 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "box_prefixed_key%0#0",
        "updated_data%0#0"
      ]
    },
    "533": {
      "op": "box_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "534": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "535": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "536": {
      "block": "main_increment_payment_route@7",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%11#0"
      ]
    },
    "538": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%12#0"
      ]
    },
    "539": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "540": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%13#0"
      ]
    },
    "542": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "543": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "546": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0"
      ]
    },
    "547": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "550": {
      "op": "btoi",
      "defined_out": [
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "0"
      ]
    },
    "552": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "0",
        "\"num_payments\""
      ]
    },
    "553": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "index#0",
        "maybe_exists%0#0",
        "maybe_value%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%0#5",
        "maybe_exists%0#0"
      ]
    },
    "554": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%0#5"
      ]
    },
    "555": {
      "op": "dig 2",
      "defined_out": [
        "amt#0",
        "index#0",
        "index#0 (copy)",
        "maybe_value%0#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%0#5",
        "index#0 (copy)"
      ]
    },
    "557": {
      "op": ">",
      "defined_out": [
        "amt#0",
        "index#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "tmp%0#0"
      ]
    },
    "558": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0"
      ]
    },
    "559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "0"
      ]
    },
    "560": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "0",
        "\"payments\""
      ]
    },
    "561": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "index#0",
        "maybe_exists%1#1",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "562": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1"
      ]
    },
    "563": {
      "op": "dig 2",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "index#0 (copy)"
      ]
    },
    "565": {
      "op": "intc_3 // 48",
      "defined_out": [
        "48",
        "amt#0",
        "index#0",
        "index#0 (copy)",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "index#0 (copy)",
        "48"
      ]
    },
    "566": {
      "op": "*",
      "defined_out": [
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0"
      ]
    },
    "567": {
      "op": "dup2",
      "defined_out": [
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "maybe_value%1#1",
        "maybe_value%1#1 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "maybe_value%1#1 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "568": {
      "op": "intc_3 // 48",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "maybe_value%1#1 (copy)",
        "item_offset%0#0 (copy)",
        "48"
      ]
    },
    "569": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5"
      ]
    },
    "570": {
      "op": "dup",
      "defined_out": [
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5",
        "tmp%1#5 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "tmp%1#5 (copy)"
      ]
    },
    "571": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5",
        "tmp%1#5 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "tmp%1#5 (copy)",
        "40"
      ]
    },
    "573": {
      "op": "extract_uint64",
      "defined_out": [
        "amt#0",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "amt#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "tmp%2#0"
      ]
    },
    "574": {
      "op": "uncover 4",
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "tmp%2#0",
        "amt#0"
      ]
    },
    "576": {
      "op": "+",
      "defined_out": [
        "assigned_value%0#2",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "assigned_value%0#2"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "tmp%1#5",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "tmp%1#5",
        "val_as_bytes%0#0"
      ]
    },
    "578": {
      "op": "replace2 40",
      "defined_out": [
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "index#0",
        "maybe_value%1#1",
        "item_offset%0#0",
        "updated_data%0#0"
      ]
    },
    "580": {
      "op": "uncover 3",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%1#1",
        "item_offset%0#0",
        "updated_data%0#0",
        "index#0"
      ]
    },
    "582": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "index#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%1#1",
        "item_offset%0#0",
        "updated_data%0#0",
        "index#0",
        "8"
      ]
    },
    "583": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "item_offset%0#0",
        "maybe_value%1#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%1#1",
        "item_offset%0#0",
        "updated_data%0#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "584": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%1#1",
        "item_offset%0#0",
        "updated_data%0#0"
      ]
    },
    "585": {
      "op": "replace3",
      "defined_out": [
        "updated_target%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "updated_target%0#0"
      ]
    },
    "586": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "result#0",
        "result#6",
        "updated_target%0#0",
        "\"payments\""
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"payments\"",
        "updated_target%0#0"
      ]
    },
    "588": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "589": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "591": {
      "block": "main_add_payment_route@6",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%7#0"
      ]
    },
    "593": {
      "op": "!",
      "defined_out": [
        "tmp%8#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%8#1"
      ]
    },
    "594": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "595": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%9#0"
      ]
    },
    "597": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "598": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0"
      ]
    },
    "601": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "0"
      ]
    },
    "602": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "0",
        "\"num_payments\""
      ]
    },
    "603": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#5",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "maybe_exists%0#0"
      ]
    },
    "604": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5"
      ]
    },
    "605": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#5",
        "maybe_value%0#5 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "maybe_value%0#5 (copy)"
      ]
    },
    "606": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#5",
        "maybe_value%0#5 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "maybe_value%0#5 (copy)",
        "8"
      ]
    },
    "607": {
      "op": "<",
      "defined_out": [
        "maybe_value%0#5",
        "pay#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "tmp%0#0"
      ]
    },
    "608": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5"
      ]
    },
    "609": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "0"
      ]
    },
    "610": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "maybe_value%0#5",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "0",
        "\"payments\""
      ]
    },
    "611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#1",
        "maybe_value%0#5",
        "maybe_value%1#1",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "612": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%0#5",
        "maybe_value%1#1"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%1#1",
        "maybe_value%0#5"
      ]
    },
    "614": {
      "op": "intc_3 // 48",
      "defined_out": [
        "48",
        "maybe_value%0#5",
        "maybe_value%1#1",
        "pay#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%1#1",
        "maybe_value%0#5",
        "48"
      ]
    },
    "615": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#1",
        "pay#0",
        "write_offset%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "pay#0",
        "maybe_value%1#1",
        "write_offset%0#1"
      ]
    },
    "616": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%1#1",
        "write_offset%0#1",
        "pay#0"
      ]
    },
    "618": {
      "op": "replace3",
      "defined_out": [
        "updated_target%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "updated_target%0#0"
      ]
    },
    "619": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "result#0",
        "result#6",
        "updated_target%0#0",
        "\"payments\""
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"payments\"",
        "updated_target%0#0"
      ]
    },
    "621": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "623": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"num_payments\""
      ]
    },
    "624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%3#2",
        "maybe_exists%3#0"
      ]
    },
    "625": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%3#2"
      ]
    },
    "626": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#2"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%3#2",
        "1"
      ]
    },
    "627": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "materialized_values%0#1"
      ]
    },
    "628": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "result#0",
        "result#6",
        "materialized_values%0#1",
        "\"num_payments\""
      ]
    },
    "629": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "\"num_payments\"",
        "materialized_values%0#1"
      ]
    },
    "630": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "631": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "632": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "633": {
      "block": "main_fixed_initialize_route@5",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "635": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%4#1"
      ]
    },
    "636": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "637": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%5#0"
      ]
    },
    "639": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "640": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "642": {
      "block": "main_bare_routing@16",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%48#0"
      ]
    },
    "644": {
      "op": "bnz main_after_if_else@18",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "647": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%49#0"
      ]
    },
    "649": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%50#0"
      ]
    },
    "650": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "651": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%0#0"
      ]
    },
    "652": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    }
  }
}