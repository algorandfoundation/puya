main test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#2)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@17, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18][tmp%4#0] else goto block@18
    block@4: // switch_case_0_L41
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@10, method "add_fixed_tups((uint64,uint64)[3])void" => block@11, method "set_a(uint64)void" => block@12, method "set_b(uint64)void" => block@13, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@14, method "get_all_tups()(uint64,uint64)[]" => block@15, * => block@16}
    block@5: // create_box_route_L45
        let tmp%0#2: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#2) // box already exists
        let tmp%1#8: account = (txn Sender)
        (box_replace "tup_bag" 136u tmp%1#8)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        (box_replace "tup_bag" 168u aggregate%val_as_bytes%0#0)
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 4272u 1u)
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#0 0u 1u)
        (box_replace "tup_bag" 4272u aggregate%updated_target%0#0)
        exit 1u
    block@6: // num_tups_route_L52
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let tmp%2#1: bytes = (concat 0x151f7c75 box%box_extract%0#0)
        (log tmp%2#1)
        exit 1u
    block@7: // add_tup_route_L56
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%item0%0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let aggregate%item1%0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(aggregate%item0%0#0, aggregate%item1%0#0)
        exit 1u
    block@8: // get_tup_route_L63
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#2: bool = (< index#0 values%0#0)
        (assert tmp%0#2) // index out of bounds
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%encoded_element%0#0)
        (log tmp%4#1)
        exit 1u
    block@9: // sum_route_L68
        let total#0: uint64 = 0u
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@47
    block@47: // for_header_L71
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@48 : block@49
    block@48: // for_body_L72
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%1#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tup.a#2: uint64 = (extract_uint64 aggregate%encoded_element%1#0 0u)
        let tup.b#2: uint64 = (extract_uint64 aggregate%encoded_element%1#0 8u)
        let total#0: uint64 = (+ total#0 tup.a#2)
        let total#0: uint64 = (+ total#0 tup.b#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@47
    block@49: // after_for_L71
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#0)
        let tmp%2#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%2#1)
        exit 1u
    block@10: // add_many_tups_route_L77
        let tups#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@42
    block@42: // for_header_L79
        let continue_looping%0#0: bool = (< item_index_internal%0#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@43 : block@44
    block@43: // for_body_L80
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let aggregate%bytes_offset%2#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let tup.a#2: uint64 = (extract_uint64 aggregate%encoded_element%2#0 0u)
        let tup.b#2: uint64 = (extract_uint64 aggregate%encoded_element%2#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#2, tup.b#2)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@42
    block@44: // after_for_L79
        exit 1u
    block@11: // add_fixed_tups_route_L82
        let tups#0: bytes = (txna ApplicationArgs 1)
        let item_index_internal%0#0: uint64 = 0u
        goto block@37
    block@37: // for_header_L84
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@38 : block@44
    block@38: // for_body_L85
        let aggregate%bytes_offset%3#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%3#0: bytes = (extract3 tups#0 aggregate%bytes_offset%3#0 16u) // on error: index access is out of bounds
        let tup.a#2: uint64 = (extract_uint64 aggregate%encoded_element%3#0 0u)
        let tup.b#2: uint64 = (extract_uint64 aggregate%encoded_element%3#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#2, tup.b#2)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@37
    block@12: // set_a_route_L87
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@32
    block@32: // for_header_L90
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@33 : block@44
    block@33: // for_body_L91
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%4#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%4#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%4#0 16u) // on error: index access is out of bounds
        let aggregate%extract%9#0: bytes = ((extract 8 8) aggregate%encoded_element%4#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob a#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%extract%9#0)
        let box%index_ok%0#0: bool = (< i#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%offset%4#1: uint64 = (+ 8u aggregate%bytes_offset%4#0)
        (box_replace "tup_bag" box%offset%4#1 aggregate%head%1#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@32
    block@13: // set_b_route_L94
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@27
    block@27: // for_header_L97
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@28 : block@44
    block@28: // for_body_L98
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%5#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%5#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%5#0 16u) // on error: index access is out of bounds
        let aggregate%extract%10#0: bytes = ((extract 0 8) aggregate%encoded_element%5#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob b#0)
        let aggregate%head%3#0: bytes = (concat aggregate%extract%10#0 aggregate%val_as_bytes%5#0)
        let box%index_ok%0#0: bool = (< i#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%offset%4#1: uint64 = (+ 8u aggregate%bytes_offset%5#0)
        (box_replace "tup_bag" box%offset%4#1 aggregate%head%3#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@27
    block@14: // get_3_tups_route_L101
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#12: uint64 = (+ start#0 3u)
        let tmp%1#0: bool = (>= values%0#0 tmp%0#12)
        (assert tmp%1#0) // not enough items
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%6#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%6#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%6#0 16u) // on error: index access is out of bounds
        let aggregate%extract%12#0: bytes = ((extract 0 8) aggregate%encoded_element%6#0)
        let aggregate%extract%13#0: bytes = ((extract 8 8) aggregate%encoded_element%6#0)
        let tmp%2#0: uint64 = (+ start#0 1u)
        let aggregate%bytes_offset%7#0: uint64 = (* tmp%2#0 16u)
        let aggregate%encoded_element%7#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%7#0 16u) // on error: index access is out of bounds
        let aggregate%extract%14#0: bytes = ((extract 0 8) aggregate%encoded_element%7#0)
        let aggregate%extract%15#0: bytes = ((extract 8 8) aggregate%encoded_element%7#0)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%bytes_offset%8#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%8#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%8#0 16u) // on error: index access is out of bounds
        let aggregate%extract%16#0: bytes = ((extract 0 8) aggregate%encoded_element%8#0)
        let aggregate%extract%17#0: bytes = ((extract 8 8) aggregate%encoded_element%8#0)
        let aggregate%head%5#0: bytes = (concat aggregate%extract%12#0 aggregate%extract%13#0)
        let aggregate%head%8#0: bytes = (concat aggregate%extract%14#0 aggregate%extract%15#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%5#0 aggregate%head%8#0)
        let aggregate%head%11#0: bytes = (concat aggregate%extract%16#0 aggregate%extract%17#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%9#0 aggregate%head%11#0)
        let tmp%2#1: bytes = (concat 0x151f7c75 aggregate%head%12#0)
        (log tmp%2#1)
        exit 1u
    block@15: // get_all_tups_route_L114
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%1#0)
        let i#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L119
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@21 : block@22
    block@21: // for_body_L120
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%9#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%9#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%9#0 16u) // on error: index access is out of bounds
        let aggregate%extract%18#0: bytes = ((extract 0 8) aggregate%encoded_element%9#0)
        let aggregate%extract%19#0: bytes = ((extract 8 8) aggregate%encoded_element%9#0)
        let aggregate%head%14#0: bytes = (concat aggregate%extract%18#0 aggregate%extract%19#0)
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 aggregate%head%14#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@20
    block@22: // after_for_L119
        let tmp%1#1: bytes = (concat 0x151f7c75 result#0)
        (log tmp%1#1)
        exit 1u
    block@16: // switch_case_next_L41
        fail // this contract does not implement the given ABI method for call NoOp
    block@17: // switch_case_1_L41
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@18: // switch_case_default_L41
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L56
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tup.a#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tup.b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let box%element_offset%0#0: uint64 = (* values%0#0 16u)
        let box%offset%3#0: uint64 = (+ 8u box%element_offset%0#0)
        (box_replace "tup_bag" box%offset%3#0 aggregate%head%1#0)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        (box_replace "tup_bag" 0u aggregate%val_as_bytes%2#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
    block@0: // L123
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0) // app not bootstrapped
        let box%box_extract%1#0: Encoded(uint8[32]) = (box_extract "tup_bag" 136u 32u)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== box%box_extract%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 168u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 