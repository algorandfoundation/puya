main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#2)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#1)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%4#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%6#0)
        let aggregate%head%3#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (+ tmp%10#0 1u)
        let aggregate%head%5#0: bytes = (concat aggregate%head%1#0 aggregate%head%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%9#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%11#0)
        let aggregate%head%7#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%5#0 aggregate%head%7#0)
        (app_global_put "nested" aggregate%head%8#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%13#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%14#0)
        let aggregate%head%10#0: bytes = (concat aggregate%val_as_bytes%6#0 aggregate%val_as_bytes%7#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%10#0 0x00160018001a000000000000)
        (app_global_put "dyn" aggregate%concat%2#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[8]) = (bzero 384u)
        (app_global_put "payments" tmp%16#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@21
    block@4: // abi_routing_L69
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        switch tmp%2#1 {method "fixed_initialize()void" => block@5, method "add_payment((address,uint64,uint64))void" => block@6, method "increment_payment(uint64,uint64)void" => block@7, method "create_storage(uint64)void" => block@8, method "local_struct()(address,uint64,uint64)" => block@9, method "delete_storage(uint64)void" => block@10, method "struct_arg(uint64,(uint64,uint64))void" => block@11, method "struct_return()(uint64,uint64)" => block@12, method "tup_return()(uint64,uint64)" => block@13, method "calculate_sum()uint64" => block@14, method "test_arr((uint64,uint64)[])(uint64,uint64)[]" => block@17, * => block@23}
    block@5: // fixed_initialize_route_L93
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#0)
        (assert tmp%4#1) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@6: // add_payment_route_L123
        let tmp%7#1: uint64 = (txn OnCompletion)
        let tmp%8#1: bool = (! tmp%7#1)
        (assert tmp%8#1) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let pay#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        let (maybe_value%0#6: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#1) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#6 8u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#2) // check self.payments exists
        let aggregate%write_offset%3#0: uint64 = (* maybe_value%0#6 48u)
        let aggregate%updated_array%3#0: bytes = (replace3 maybe_value%1#2 aggregate%write_offset%3#0 pay#0)
        (app_global_put "payments" aggregate%updated_array%3#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#1: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#1)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@7: // increment_payment_route_L129
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#1: bool = (! tmp%11#0)
        (assert tmp%12#1) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let (maybe_value%0#6: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#1) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#6)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#2) // check self.payments exists
        let aggregate%bytes_offset%7#0: uint64 = (* index#0 48u)
        let aggregate%encoded_element%7#0: bytes = (extract3 maybe_value%1#2 aggregate%bytes_offset%7#0 48u) // on error: index access is out of bounds
        let values%1#3: uint64 = (extract_uint64 aggregate%encoded_element%7#0 40u)
        let tmp%1#1: uint64 = (+ values%1#3 amt#0)
        let aggregate%val_as_bytes%26#0: bytes[8] = (itob tmp%1#1)
        let aggregate%updated_data%0#0: bytes = ((replace2 40) aggregate%encoded_element%7#0 aggregate%val_as_bytes%26#0)
        let aggregate%updated_array%4#0: bytes = (replace3 maybe_value%1#2 aggregate%bytes_offset%7#0 aggregate%updated_data%0#0)
        (app_global_put "payments" aggregate%updated_array%4#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@8: // create_storage_route_L134
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#1) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#1)
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#2) // check self.nested exists
        let tmp%0#6: account = (txn Sender)
        (app_local_put tmp%0#6 0x6c maybe_value%1#2)
        let tmp%1#6: bool = (box_create "box" 2064u)
        (assert tmp%1#6) // expected box to not exist
        let aggregate%extract%5#0: bytes = ((extract 0 16) maybe_value%1#2)
        let encoded_value%0#1: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#1)
        (box_replace box_prefixed_key%0#0 0u aggregate%extract%5#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@9: // local_struct_route_L141
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let tmp%0#6: account = (txn Sender)
        let aggregate%val_as_bytes%27#0: bytes[8] = (itob 1234u)
        let aggregate%head%33#0: bytes = (concat tmp%0#6 aggregate%val_as_bytes%27#0)
        let aggregate%val_as_bytes%28#0: bytes[8] = (itob 567u)
        let a#0: bytes = (concat aggregate%head%33#0 aggregate%val_as_bytes%28#0)
        let foo#0: account = ((extract 0 32) a#0)
        let bar#0: uint64 = (extract_uint64 a#0 32u)
        let baz#0: uint64 = (extract_uint64 a#0 40u)
        let tmp%2#4: account = (global ZeroAddress)
        let tmp%3#3: bool = (!= foo#0 tmp%2#4)
        (assert tmp%3#3) // use foo
        (assert bar#0) // use bar
        (assert baz#0) // use baz
        let a#0: bytes = test_cases.mutable_native_types.contract.do_something(a#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 a#0)
        (log tmp%27#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@10: // delete_storage_route_L153
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        (app_global_del 0x70)
        let tmp%0#6: account = (txn Sender)
        (app_local_del tmp%0#6 0x6c)
        (box_del "box")
        let encoded_value%0#1: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#1)
        (box_del box_prefixed_key%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@11: // struct_arg_route_L160
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let a#0: bytes = (txna ApplicationArgs 2)
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#1) // check self.nested exists
        let aggregate%updated_data%1#0: bytes = ((replace2 0) maybe_value%0#1 a#0)
        (app_global_put "nested" aggregate%updated_data%1#0)
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#2) // check self.nested_proxy exists
        let aggregate%updated_data%2#0: bytes = ((replace2 0) maybe_value%1#2 a#0)
        (app_global_put 0x70 aggregate%updated_data%2#0)
        let tmp%0#6: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#6 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let aggregate%updated_data%3#0: bytes = ((replace2 0) maybe_value%2#0 a#0)
        (app_local_put tmp%0#6 0x6c aggregate%updated_data%3#0)
        (box_replace "box" 0u a#0)
        let encoded_value%4#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%4#0)
        (box_replace box_prefixed_key%0#0 0u a#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@12: // struct_return_route_L170
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#1) // check self.nested exists
        let aggregate%extract%12#0: bytes = ((extract 0 16) maybe_value%0#1)
        let tmp%43#0: bytes = (concat 0x151f7c75 aggregate%extract%12#0)
        (log tmp%43#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@13: // tup_return_route_L174
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#1) // check self.nested exists
        let aggregate%extract%13#0: bytes = ((extract 32 16) maybe_value%0#1)
        let tmp%51#0: bytes = (concat 0x151f7c75 aggregate%extract%13#0)
        (log tmp%51#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@14: // calculate_sum_route_L178
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        (assert tmp%54#0) // can only call when not creating
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#1) // check self.nested exists
        let fixed_a#0: Encoded(uint64,uint64) = ((extract 0 16) maybe_value%0#1)
        let fixed_b#0: Encoded(uint64,uint64) = ((extract 16 16) maybe_value%0#1)
        let values%0#0: uint64 = (extract_uint64 fixed_a#0 0u)
        let values%1#3: uint64 = (extract_uint64 fixed_a#0 8u)
        let tmp%0#2: uint64 = (+ values%0#0 values%1#3)
        let values%0#0: uint64 = (extract_uint64 fixed_b#0 0u)
        let values%1#3: uint64 = (extract_uint64 fixed_b#0 8u)
        let tmp%0#13: uint64 = (+ values%0#0 values%1#3)
        let result#0: uint64 = (+ tmp%0#2 tmp%0#13)
        let tmp%3#3: bool = (< result#0 100u)
        let result#8: uint64 = result#0
        goto tmp%3#3 ? block@15 : block@16
    block@15: // if_body_L184
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%18#0: bytes = ((extract 32 16) maybe_value%2#0)
        let c#0: uint64 = (extract_uint64 aggregate%extract%18#0 0u)
        let d#0: uint64 = (extract_uint64 aggregate%extract%18#0 8u)
        let result#0: uint64 = (+ result#0 c#0)
        let result#0: uint64 = (+ result#0 d#0)
        let result#8: uint64 = result#0
        goto block@16
    block@16: // after_if_else_L183
        let result#0: uint64 = result#8
        let aggregate%val_as_bytes%29#0: bytes[8] = (itob result#0)
        let tmp%58#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%29#0)
        (log tmp%58#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@17: // test_arr_route_L189
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        (assert tmp%61#0) // can only call when not creating
        let arr#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let tmp%2#2: uint64 = (+ tmp%1#1 1u)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 2u)
        let aggregate%val_as_bytes%30#0: bytes[8] = (itob tmp%2#2)
        let aggregate%val_as_bytes%31#0: bytes[8] = (itob tmp%4#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%30#0 aggregate%val_as_bytes%31#0)
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat arr#0 fixed_struct#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%7#2: bool = (!= arr#0 arr2#1)
        (assert tmp%7#2) // expected arrays to be different
        let arr2#1: Encoded(len+(uint64,uint64)[]) = 0x0000
        let _i#0: uint64 = 0u
        goto block@18
    block@18: // for_header_L199
        let continue_looping%0#0: bool = (< _i#0 3u)
        goto continue_looping%0#0 ? block@19 : block@20
    block@19: // for_body_L200
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat arr2#1 fixed_struct#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr2#1 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@18
    block@20: // after_for_L199
        let array_length#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%9#2: bool = (== array_length#0 3u)
        (assert tmp%9#2) // expected 3 elements
        let tmp%10#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#1)
        let tmp%11#2: bool = (== tmp%10#0 15u)
        (assert tmp%11#2) // expected sum to be 15
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#6: bytes = ((extract 6 0) tmp%2#1)
        let result#4: bytes = ((replace2 0) arr2#1 tmp%3#6)
        let tmp%5#0: uint64 = (len result#4)
        let item_location#0: uint64 = (- tmp%5#0 16u)
        let result#4: bytes = (substring3 result#4 0u item_location#0)
        let tmp%15#2: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#1)
        let tmp%16#2: bool = (== tmp%15#2 15u)
        (assert tmp%16#2) // expected sum to be 15
        let tmp%17#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(result#4)
        let tmp%18#0: bool = (== tmp%17#0 10u)
        (assert tmp%18#0) // expected sum to be 10
        (app_global_put "arr" result#4)
        let tmp%64#0: bytes = (concat 0x151f7c75 result#4)
        (log tmp%64#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@21: // bare_routing_L69
        let tmp%65#0: uint64 = (txn OnCompletion)
        goto tmp%65#0 ? block@23 : block@22
    block@22: // __algopy_default_create_L1
        let tmp%66#0: uint64 = (txn ApplicationID)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // can only call when creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@23: // after_if_else_L69
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@24
    block@24: // after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.sum_frozen_arr(arr: Encoded(len+(uint64,uint64)[])) -> uint64:
    block@0: // L218
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L221
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L222
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let element#0: Encoded(uint64,uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 element#0 0u)
        let total#0: uint64 = (+ total#0 values%1#0)
        let values%2#0: uint64 = (extract_uint64 element#0 8u)
        let total#0: uint64 = (+ total#0 values%2#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L221
        return total#0

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L232
        return pay#0