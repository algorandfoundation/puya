#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 0 16 1 128 4272
    bytecblock "tup_bag" 0x151f7c75
    intc_1 // 0
    dup
    pushbytes ""
    dupn 6
    txn NumAppArgs
    bz main___algopy_default_create@20
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 0x73457a19 // method "create_box()void", method "num_tups()uint64", method "add_tup((uint64,uint64))void", method "get_tup(uint64)(uint64,uint64)", method "sum()uint64", method "add_many_tups((uint64,uint64)[])void", method "add_fixed_tups((uint64,uint64)[3])void", method "set_a(uint64)void", method "set_b(uint64)void", method "get_3_tups(uint64)(uint64,uint64)[3]", method "get_all_tups()(uint64,uint64)[]"
    txna ApplicationArgs 0
    match main_create_box_route@6 main_num_tups_route@7 main_add_tup_route@8 main_get_tup_route@9 main_sum_route@10 main_add_many_tups_route@11 main_add_fixed_tups_route@12 main_set_a_route@13 main_set_b_route@14 main_get_3_tups_route@15 main_get_all_tups_route@16
    err

main_get_all_tups_route@16:
    pushbytes 0x0000
    bury 9
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    bury 1
    intc_1 // 0
    bury 4

main_for_header@24:
    dig 3
    dig 1
    <
    bz main_after_for@26
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    dig 4
    dup
    cover 2
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    extract 0 8
    swap
    extract 8 8
    concat
    dig 10
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_3 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 10
    intc_3 // 1
    +
    bury 4
    b main_for_header@24

main_after_for@26:
    bytec_1 // 0x151f7c75
    dig 9
    concat
    log
    intc_3 // 1
    return

main_get_3_tups_route@15:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    dig 1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    dig 1
    intc_2 // 16
    *
    dig 1
    swap
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    extract 0 8
    swap
    extract 8 8
    dig 3
    intc_3 // 1
    +
    intc_2 // 16
    *
    dig 3
    swap
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    extract 0 8
    swap
    extract 8 8
    uncover 5
    pushint 2 // 2
    +
    intc_2 // 16
    *
    uncover 5
    swap
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    extract 0 8
    swap
    extract 8 8
    uncover 5
    uncover 5
    concat
    uncover 4
    uncover 4
    concat
    concat
    cover 2
    concat
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    return

main_set_b_route@14:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bury 5
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    bury 1
    intc_1 // 0
    bury 4

main_for_header@31:
    dig 3
    dig 1
    <
    bz main_after_for@48
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    dig 4
    dup
    cover 2
    intc_2 // 16
    *
    swap
    dig 1
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    extract 0 8
    dig 7
    itob
    concat
    dig 2
    intc_0 // 8
    <
    assert // index out of bounds
    intc_0 // 8
    uncover 2
    +
    bytec_0 // "tup_bag"
    swap
    uncover 2
    box_replace
    intc_3 // 1
    +
    bury 4
    b main_for_header@31

main_after_for@48:
    intc_3 // 1
    return

main_set_a_route@13:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bury 7
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    bury 1
    intc_1 // 0
    bury 4

main_for_header@36:
    dig 3
    dig 1
    <
    bz main_after_for@48
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    dig 4
    dup
    cover 2
    intc_2 // 16
    *
    swap
    dig 1
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    extract 8 8
    dig 9
    itob
    swap
    concat
    dig 2
    intc_0 // 8
    <
    assert // index out of bounds
    intc_0 // 8
    uncover 2
    +
    bytec_0 // "tup_bag"
    swap
    uncover 2
    box_replace
    intc_3 // 1
    +
    bury 4
    b main_for_header@36

main_add_fixed_tups_route@12:
    txna ApplicationArgs 1
    dup
    bury 9
    len
    pushint 48 // 48
    ==
    assert // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.case1_with_tups.NamedTup, 3>
    intc_1 // 0
    bury 3

main_for_header@41:
    dig 2
    pushint 3 // 3
    <
    bz main_after_for@48
    dig 2
    dup
    intc_2 // 16
    *
    dig 9
    swap
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    callsub add_tup
    intc_3 // 1
    +
    bury 3
    b main_for_header@41

main_add_many_tups_route@11:
    txna ApplicationArgs 1
    dup
    bury 9
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 8
    intc_2 // 16
    *
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.case1_with_tups.NamedTup>
    intc_1 // 0
    bury 3

main_for_header@46:
    dig 2
    dig 6
    <
    bz main_after_for@48
    dig 7
    extract 2 0
    dig 3
    dup
    cover 2
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    callsub add_tup
    intc_3 // 1
    +
    bury 3
    b main_for_header@46

main_sum_route@10:
    intc_1 // 0
    bury 2
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    bury 1
    intc_1 // 0
    bury 4

main_for_header@51:
    dig 3
    dig 1
    <
    bz main_after_for@53
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    dig 4
    dup
    cover 2
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    dig 4
    uncover 2
    +
    +
    bury 3
    intc_3 // 1
    +
    bury 4
    b main_for_header@51

main_after_for@53:
    dig 1
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    return

main_get_tup_route@9:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    dig 1
    >
    assert // index out of bounds
    bytec_0 // "tup_bag"
    intc_0 // 8
    intc 4 // 128
    box_extract
    swap
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    return

main_add_tup_route@8:
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 16
    ==
    assert // invalid number of bytes for test_cases.mutable_native_types.case1_with_tups.NamedTup
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    callsub add_tup
    intc_3 // 1
    return

main_num_tups_route@7:
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    return

main_create_box_route@6:
    bytec_0 // "tup_bag"
    pushint 4273 // 4273
    box_create
    assert // box already exists
    bytec_0 // "tup_bag"
    pushint 136 // 136
    txn Sender
    box_replace
    global CurrentApplicationID
    itob
    bytec_0 // "tup_bag"
    pushint 168 // 168
    uncover 2
    box_replace
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_3 // 1
    box_extract
    intc_1 // 0
    intc_3 // 1
    setbit
    bytec_0 // "tup_bag"
    intc 5 // 4272
    uncover 2
    box_replace
    intc_3 // 1
    return

main___algopy_default_create@20:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_3 // 1
    return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
add_tup:
    proto 2 0
    callsub _check_owner
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    dup
    intc_0 // 8
    <
    assert // too many tups
    frame_dig -2
    itob
    frame_dig -1
    itob
    concat
    swap
    intc_2 // 16
    *
    intc_0 // 8
    +
    bytec_0 // "tup_bag"
    swap
    uncover 2
    box_replace
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_0 // 8
    box_extract
    btoi
    intc_3 // 1
    +
    itob
    bytec_0 // "tup_bag"
    intc_1 // 0
    uncover 2
    box_replace
    retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
_check_owner:
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_3 // 1
    box_extract
    intc_1 // 0
    getbit
    assert // app not bootstrapped
    bytec_0 // "tup_bag"
    pushints 136 32 // 136, 32
    box_extract
    txn Sender
    ==
    assert // sender not authorized
    bytec_0 // "tup_bag"
    pushint 168 // 168
    intc_0 // 8
    box_extract
    btoi
    global CurrentApplicationID
    ==
    assert // this error should be impossible
    retsub
