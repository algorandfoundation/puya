{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDK;;AAAA;AAAA;AAAA;;AAAA;AAEO;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AANH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEG;;AA9CR;;;AA8CQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEG;;AAtCR;;;AAsCQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEG;AA9BR;;;AA8BQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEG;AAtBR;;;AAsBQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEG;AAdR;;;AAcQ;AAFH;;AAJA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "77": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "80": {
      "op": "pushbytess 0x24378d3c 0x11b19b95 0xd28b964a 0xea18655f 0xbb3bfdb7 0x46ec14a0 0x9b4d0926 0x4f0deb50 0x59664ab6 0x125d1376 0x818e4a62 0x9bbe1032 // method \"delete()void\", method \"fixed_struct_arg((uint64,uint64))void\", method \"fixed_struct_ret()(uint64,uint64)\", method \"nested_struct_arg(((uint64,uint64),uint64))void\", method \"nested_struct_ret()((uint64,uint64),uint64)\", method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\", method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\", method \"fixed_arr_arg((uint64,uint64)[3])void\", method \"fixed_arr_ret()(uint64,uint64)[3]\", method \"native_arr_arg((uint64,uint64)[])void\", method \"native_arr_ret()(uint64,uint64)[]\", method \"log_it()void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ],
      "stack_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%2#0"
      ]
    },
    "145": {
      "op": "match main_delete_route@5 main_fixed_struct_arg_route@6 main_fixed_struct_ret_route@7 main_nested_struct_arg_route@8 main_nested_struct_ret_route@9 main_dynamic_struct_arg_route@10 main_dynamic_struct_ret_route@11 main_fixed_arr_arg_route@12 main_fixed_arr_ret_route@13 main_native_arr_arg_route@14 main_native_arr_ret_route@15 main_log_it_route@16",
      "stack_out": []
    },
    "171": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "172": {
      "block": "main_log_it_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "174": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "180": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "182": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "183": {
      "op": "log",
      "stack_out": []
    },
    "184": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "185": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "186": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "187": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "190": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "191": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "192": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "193": {
      "op": "log",
      "stack_out": []
    },
    "194": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "195": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "198": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "199": {
      "op": "log",
      "stack_out": []
    },
    "200": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "201": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "203": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "204": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "205": {
      "op": "log",
      "stack_out": []
    },
    "206": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_native_arr_ret_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "214": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "215": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "216": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "218": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "219": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "220": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "223": {
      "op": "log",
      "stack_out": []
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "block": "main_native_arr_arg_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\""
      ],
      "stack_out": [
        "\"native_arr\""
      ]
    },
    "235": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"native_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "\"native_arr\"",
        "arg#0"
      ]
    },
    "238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "239": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "240": {
      "op": "return",
      "stack_out": []
    },
    "241": {
      "block": "main_fixed_arr_ret_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "243": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "244": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "245": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "247": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "248": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "249": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "251": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "252": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "253": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "256": {
      "op": "log",
      "stack_out": []
    },
    "257": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "258": {
      "op": "return",
      "stack_out": []
    },
    "259": {
      "block": "main_fixed_arr_arg_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "261": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "262": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "263": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "265": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "266": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\""
      ],
      "stack_out": [
        "\"fixed_arr\""
      ]
    },
    "268": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0"
      ]
    },
    "271": {
      "op": "app_global_put",
      "stack_out": []
    },
    "272": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "273": {
      "op": "return",
      "stack_out": []
    },
    "274": {
      "block": "main_dynamic_struct_ret_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "276": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "277": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "278": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "280": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "281": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "282": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "283": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "284": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "285": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "287": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "288": {
      "op": "log",
      "stack_out": []
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "block": "main_dynamic_struct_arg_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "293": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "294": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "295": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "297": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "298": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\""
      ],
      "stack_out": [
        "\"dynamic_struct\""
      ]
    },
    "299": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ]
    },
    "302": {
      "op": "app_global_put",
      "stack_out": []
    },
    "303": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "304": {
      "op": "return",
      "stack_out": []
    },
    "305": {
      "block": "main_nested_struct_ret_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "307": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "308": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "309": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "311": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "313": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "314": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "315": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "316": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "318": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "319": {
      "op": "log",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "321": {
      "op": "return",
      "stack_out": []
    },
    "322": {
      "block": "main_nested_struct_arg_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "324": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "325": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "326": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "328": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "329": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\""
      ],
      "stack_out": [
        "\"nested_struct\""
      ]
    },
    "330": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "\"nested_struct\"",
        "arg#0"
      ]
    },
    "333": {
      "op": "app_global_put",
      "stack_out": []
    },
    "334": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "block": "main_fixed_struct_ret_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "338": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "339": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "340": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "342": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "343": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "344": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "345": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "346": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "347": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "350": {
      "op": "log",
      "stack_out": []
    },
    "351": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "block": "main_fixed_struct_arg_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "359": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "360": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\""
      ],
      "stack_out": [
        "\"fixed_struct\""
      ]
    },
    "361": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0"
      ]
    },
    "364": {
      "op": "app_global_put",
      "stack_out": []
    },
    "365": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "366": {
      "op": "return",
      "stack_out": []
    },
    "367": {
      "block": "main_delete_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "369": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "371": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "372": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "373": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "375": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "376": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "377": {
      "op": "return",
      "stack_out": []
    },
    "378": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "380": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "386": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "387": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "388": {
      "op": "return",
      "stack_out": []
    }
  }
}